     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 04/02/2024 (Previous: 24/12/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]9F02              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]9F02              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [AF12]9F02              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [EC14]9F02              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [210A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 3F04                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  
  3632                                  		; 29/09/2023
  3633                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3634                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3635                                  	
  3636                                  ; 20/12/2022
  3637                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3638                                  %if 0	
  3639                                  		cli
  3640                                  
  3641                                  		push	ax
  3642                                  		xor	ax, ax
  3643                                  		mov	ds, ax
  3644                                  		pop	ax
  3645                                  %endif
  3646                                  
  3647                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3648                                  
  3649                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3650                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3651                                  
  3652                                  ;-----------------------------------------------------------------------------
  3653                                  ; initialization - stage 1
  3654                                  ;-----------------------------------------------------------------------------
  3655                                  ; 02/06/2018 - Retro DOS v3.0
  3656                                  		
  3657                                  		; 21/12/2022
  3658                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3659                                  		;mov	bx, 60h
  3660                                  		;mov	es, bx
  3661                                  		;mov	si, bp
  3662                                  		;sub	di, di
  3663                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3664                                  		;;mov	cl, 35
  3665                                  		;rep	movsw
  3666                                  
  3667 00001763 0E                      		push	cs
  3668 00001764 1F                      		pop	ds
  3669                                  
  3670                                  		; 20/03/2019 - Retro DOS v4.0
  3671                                  		;cli		; turn interrupts off while manupulating stack
  3672                                  		;mov	ss, cx	; set stack segment register
  3673 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3674                                  		;sti		; turn interrupts on
  3675                                  
  3676                                  		; 27/03/2018
  3677                                  		;mov	cx, KERNEL_SIZE	; words !
  3678                                  
  3679                                  		; 20/03/2019
  3680 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3681                                  
  3682                                  		; 21/12/2022
  3683                                  		; 07/04/2018
  3684 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3685                                  		;mov	bl, KERNEL_SEGMENT
  3686 0000176E 8EC3                    		mov	es, bx
  3687 00001770 31FF                    		xor	di, di
  3688 00001772 89FE                    		mov	si, di
  3689                                  		
  3690                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3691                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3692 00001774 F3A5                    		rep	movsw
  3693                                  
  3694                                  		; 20/03/2019 - Retro DOS v4.0
  3695 00001776 53                      		push	bx
  3696 00001777 68[7B17]                		push	init0
  3697 0000177A CB                      		retf
  3698                                  init0:	
  3699                                  		; 20/12/2022
  3700                                  		; (combined kernel file > 64KB)
  3701                                  
  3702                                  		; 20/03/2019
  3703 0000177B B520                    		mov	ch, 20h
  3704 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3705                                  		;mov	cx, 1070h
  3706 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3707 00001782 8EC1                    		mov	es, cx
  3708                                  		
  3709                                  		; 21/12/2022
  3710                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3711                                  		; 28/09/2023
  3712                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3713                                  
  3714                                  		;mov	cx, KERNEL_SIZE - 32768
  3715                                  		; 28/09/2023 (BugFix)
  3716 00001784 B93903                  		mov	cx, NXWORDCOUNT
  3717                                  		;shr	cx, 1 ; 28/09/2023
  3718                                  		;xor	si, si
  3719                                  		;xor	di, di
  3720 00001787 F3A5                    		rep	movsw
  3721                                  
  3722                                  		; 28/09/2023
  3723                                  		;; 17/06/2018 
  3724                                  		;mov	ds, bx
  3725                                  		;; 21/03/2019
  3726                                  		;mov	es, bx
  3727                                  ;init0:
  3728                                  ;		;push	es
  3729                                  ;		push	bx ; 20/03/2019
  3730                                  ;		push	init1 ; 07/04/2018
  3731                                  ;		retf	; jump to 0070h:init1
  3732                                  ;init:
  3733                                  init1:
  3734                                  		; 20/12/2022
  3735                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3736                                  		; for full MSDOS compatibility.
  3737                                  
  3738 00001789 8EC1                    		mov	es, cx ; 0
  3739 0000178B 8ED9                    		mov	ds, cx ; 0
  3740                                  
  3741 0000178D B82205                  		mov	ax, SEC9
  3742                                  
  3743                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3744 00001790 B378                    		mov	bl, 1Eh*4
  3745                                  				; INT 1Eh points to diskette parms table
  3746                                  
  3747                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3748                                   		; (do not move the DPT if is not original ROMBIOS table)
  3749                                  
  3750                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3751                                  		;;jnz	short mov_dpt
  3752                                  
  3753                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3754                                  		;je	short dont_mov_dpt
  3755                                  
  3756                                  		;mov	si, [bx] ; [1Eh*4]		
  3757                                  ;mov_dpt:
  3758                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3759 00001792 C537                    		lds	si, [bx]
  3760 00001794 89C7                    		mov	di, ax  ; SEC9
  3761 00001796 B10B                    		mov	cl, 11
  3762                                  		;cld
  3763 00001798 F3A4                    		rep	movsb
  3764                                  
  3765                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3766 0000179A 8ED9                    		mov	ds, cx ; 0
  3767 0000179C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3768 0000179E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3769                                  ;dont_mov_dpt:
  3770                                  
  3771                                  ; 20/12/2022 - Retro DOS v4.0
  3772                                  %if 0
  3773                                  		; 27/12/2018 - Retro DOS v4.0
  3774                                  		; 'Starting MS-DOS...' message
  3775                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3776                                  		; (0070h:96A3h)
  3777                                  
  3778                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3779                                  		mov     ah, 0Eh
  3780                                  		;bh = 0
  3781                                          	mov     bl, 7		; "normal" attribute and page
  3782                                  startmsg_nxt_chr:  
  3783                                  		lodsb
  3784                                  		or	al, al
  3785                                          	jz	short startmsg_ok
  3786                                         
  3787                                  		int	10h		; video write
  3788                                          	jmp	short startmsg_nxt_chr
  3789                                  
  3790                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3791                                  
  3792                                  startmsg_ok:
  3793                                  
  3794                                  %endif
  3795                                  
  3796                                  ;-----------------------------------------------------------------------------
  3797                                  ; initialization - stage 2
  3798                                  ;-----------------------------------------------------------------------------
  3799                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3800                                  
  3801                                  
  3802                                  ; 19/03/2018
  3803                                  ; Retro DOS v2.0 (24/02/2018)
  3804                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3805                                  
  3806                                  ;------------------------------------------------------------------------
  3807                                  ;									:
  3808                                  ;	System initialization						:
  3809                                  ;									:
  3810                                  ;	The entry conditions are established by the bootstrap		:
  3811                                  ;	loader and are considered unknown. The following jobs		:
  3812                                  ;	will be performed by this module:				:
  3813                                  ;									:
  3814                                  ;	1.	All device initialization is performed			:
  3815                                  ;	2.	A local stack is set up and DS:SI are set		:
  3816                                  ;		to point to an initialization table. Then		:
  3817                                  ;		an inter-segment call is made to the first		:
  3818                                  ;		byte of the dos 					:
  3819                                  ;	3.	Once the dos returns from this call the ds		:
  3820                                  ;		register has been set up to point to the start		:
  3821                                  ;		of free memory. The initialization will then		:
  3822                                  ;		load the command program into this area 		:
  3823                                  ;		beginning at 100 hex and transfer control to		:
  3824                                  ;		this program.						:
  3825                                  ;									:
  3826                                  ;------------------------------------------------------------------------
  3827                                  		
  3828                                  		; 20/12/2022
  3829                                  		; ----------------------
  3830                                  		; Registers
  3831                                  		; ----------------------
  3832                                  		; DL = [bsDriveNumber]
  3833                                  		; DH = [bsMedia]
  3834                                  		; DS = 0, ES = 0, SS = 0
  3835                                  		; BP = 7C00h
  3836                                  		; SP = 700h
  3837                                  		; ----------------------
  3838                                  		; CX = 0				
  3839                                  
  3840                                  ; 02/10/2022 - 20/12/2022
  3841                                  ; ------------------------------------------------------------------------------
  3842                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3843                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3844                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3845                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3846                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3847                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3848                                  ; ------------------------------------------------------------------------------
  3849                                  
  3850                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3851                                  ;
  3852                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3853                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3854                                  ;;	data sector of the bios.
  3855                                  ;
  3856                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3857                                  ;		mov	[cs:bios_l], bx
  3858                                  
  3859                                  ; with the following information from msload, we don't need the
  3860                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3861                                  ;     limitation of msbio.com file.
  3862                                  
  3863                                  		; 21/12/2022
  3864 000017A1 FA                      		cli
  3865                                  
  3866 000017A2 0E                      		push	cs		; Save a peck of interrupt vectors...
  3867 000017A3 07                      		pop	es
  3868                                  		;push	cx
  3869                                  		;push	di
  3870                                  		; 20/12/2022
  3871 000017A4 B105                    		mov	cl, 5
  3872                                  		;mov	cx, 5		; NUMROMVECTORS
  3873                                  					; no. of rom vectors to	be saved
  3874                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3875 000017A6 BE[0001]                		mov	si, RomVectors
  3876                                  next_int_:		
  3877 000017A9 2E                      		cs	; 16/10/2022
  3878 000017AA AC                      		lodsb		
  3879                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3880 000017AB 98                      		cbw			; ax = interrupt number
  3881 000017AC D1E0                    		shl	ax, 1
  3882 000017AE D1E0                    		shl	ax, 1		; int no * 4
  3883 000017B0 89C7                    		mov	di, ax		; interrupt vector address
  3884 000017B2 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3885                                  					; saving address in di
  3886                                  		;lodsw			; movsw
  3887                                  		;stosw
  3888                                  		;lodsw			; movsw
  3889                                  		;stosw			; save the vector
  3890                                  		; 20/12/2022
  3891 000017B4 A5                      		movsw
  3892 000017B5 A5                      		movsw		
  3893                                  
  3894 000017B6 87F7                    		xchg	si, di
  3895 000017B8 E2EF                    		loop	next_int_
  3896                                  		
  3897                                  		;pop	di
  3898                                  		;pop	cx
  3899                                  
  3900                                  ; we need to save int13 in two places in case we are running on an at.
  3901                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3902                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3903                                  ; rom int13 routine, we must have that rom address also stored away.
  3904                                  
  3905                                  		; 20/12/2022
  3906                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3907                                  		;mov	[cs:Orig13], ax
  3908                                  		;mov	ax, [cs:Old13+2]
  3909                                  		;mov	[cs:Orig13+2], ax
  3910                                  
  3911                                  		; 16/10/2022
  3912 000017BA C7064C00[7407]          		mov	word [13h*4], block13
  3913                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3914                                  					; set up int 13	for new	action
  3915 000017C0 8C0E4E00                		mov	[13h*4+2], cs
  3916                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3917 000017C4 C7065400[4808]          		mov	word [15h*4], Int15
  3918                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3919                                  					; set up int 15	for new	action
  3920 000017CA 8C0E5600                		mov	[15h*4+2], cs
  3921                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3922 000017CE C7066400[F907]          		mov	word [19h*4], int19
  3923                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3924                                  					; set up int 19	for new	action
  3925 000017D4 8C0E6600                		mov	[19h*4+2], cs
  3926                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3927                                  
  3928                                  		; 20/12/2022
  3929 000017D8 0E                      		push	cs
  3930 000017D9 1F                      		pop	ds
  3931                                  		
  3932 000017DA A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3933 000017DD A3[B400]                		mov	[Orig13], ax
  3934 000017E0 A1[0801]                		mov	ax, [Old13+2]
  3935 000017E3 A3[B600]                		mov	[Orig13+2], ax
  3936                                  					; ;
  3937 000017E6 FB                      		sti
  3938 000017E7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3939                                  					; Return: AX = equipment flag bits
  3940                                  
  3941                                  ; we have to support a system that does not have any diskette
  3942                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3943                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3944                                  ; otherwise, the system has only hardfiles.
  3945                                  ;
  3946                                  ; important thing is that still, for compatibility reason, the drive letter
  3947                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3948                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3949                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3950                                  ; drives will get "invalid drive letter ..." message. we are going to
  3951                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3952                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3953                                  
  3954                                  ; check the register returned by the equipment determination interrupt
  3955                                  ; we have to handle the case of no diskettes in the system by faking
  3956                                  ; two dummy drives.
  3957                                  ;
  3958                                  ; if the register indicates that we do have floppy drives we don't need
  3959                                  ; to do anything special.
  3960                                  ;
  3961                                  ; if the register indicates that we don't have any floppy drives then
  3962                                  ; what we need to do is set the fakefloppydrv variable, change the
  3963                                  ; register to say that we do have floppy drives and then go to execute
  3964                                  ; the code which starts at notsingle. this is because we can skip the
  3965                                  ; code given below which tries to find if there are one or two drives
  3966                                  ; since we already know about this.
  3967                                  
  3968                                  		; 06/05/2019 - Retro DOS v4.0
  3969 000017E9 88C1                    		mov	cl, al
  3970                                  
  3971                                  		; 12/12/2022
  3972 000017EB A801                    		test	al, 1
  3973                                  		;test	ax, 1		; floppy drives	present	?
  3974 000017ED 751F                    		jnz	short normalfloppydrv ;	yes.
  3975                                  
  3976                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3977                                  ; whether it is an old ROM BIOS or a new one
  3978                                  ;
  3979                                  ; WARNING !!!
  3980                                  ;
  3981                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3982                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3983                                  
  3984                                  		; 20/12/2022
  3985                                  		;push	ax
  3986                                  		;push	bx
  3987                                  		;push	cx
  3988 000017EF 52                      		push	dx
  3989                                  		;push	di
  3990 000017F0 06                      		push	es
  3991 000017F1 B408                    		mov	ah, 8
  3992 000017F3 B200                    		mov	dl, 0
  3993 000017F5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3994                                  					; DL = drive number
  3995                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3996                                  					; DL = number of consecutive drives
  3997                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3998 000017F7 7202                    		jc	short _gdskp_error
  3999                                  		;;mov	[cs:flp_drvs], dl
  4000                                  		; 20/12/2022
  4001                                  		; ds = cs
  4002                                  		;mov	[flp_drvs], dl
  4003 000017F9 88D1                    		mov	cl, dl
  4004                                  _gdskp_error:	
  4005                                  		; 20/12/2022			
  4006 000017FB 07                      		pop	es
  4007                                  		;pop	di
  4008 000017FC 5A                      		pop	dx
  4009                                  		;pop	cx
  4010                                  		;pop	bx
  4011                                  		;pop	ax
  4012                                  		
  4013 000017FD 720F                    		jc	short normalfloppydrv
  4014                                  					; if error it is an old ROM BIOS
  4015                                  					; so, lets assume that ROM BIOS lied
  4016                                  		; 20/12/2022
  4017                                  		; ds = cs
  4018                                  		;cmp	byte [flp_drvs], 0
  4019                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4020                                  		;jz	short _set_fake_flpdrv
  4021                                  		;;mov	al, [cs:flp_drvs]
  4022                                  		;mov	al, [flp_drvs]
  4023                                  		;;dec	al		; make it zero based
  4024                                  		;; 18/12/2022
  4025                                  		;dec	ax
  4026                                  		;jmp	short got_num_flp_drvs
  4027                                  		
  4028                                  		; 20/12/2022
  4029 000017FF 08C9                    		or	cl, cl ; [flp_drvs]
  4030 00001801 7403                    		jz	short _set_fake_flpdrv		
  4031 00001803 49                      		dec	cx	
  4032 00001804 EB0C                    		jmp	short got_num_flp_drvs
  4033                                  ; ----------------------------------------------------------------------------
  4034                                  
  4035                                  _set_fake_flpdrv:
  4036                                  		;20/12/2022
  4037                                  		; ds = cs
  4038 00001806 FEC1                    		inc	cl	; cl = 1
  4039 00001808 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4040                                  		;mov	byte [fakefloppydrv], 1		
  4041                                  		;;mov	byte [cs:fakefloppydrv], 1
  4042                                  					; we don't have any floppy drives.
  4043                                  		; 20/12/2022
  4044                                  		;mov	ax, 1
  4045 0000180C EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4046                                  ; ----------------------------------------------------------------------------
  4047                                  
  4048                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4049                                  		; 20/12/2022
  4050                                  		;rol	al, 1		; there	exist floppy drives.
  4051                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4052 0000180E D0C1                    		rol	cl, 1
  4053 00001810 D0C1                    		rol	cl, 1
  4054                                  got_num_flp_drvs:			
  4055                                  		;;and	ax, 3		; only look at bits 0 &	1
  4056                                  		; 18/12/2022
  4057                                  		;and	al, 3
  4058                                  		; 20/12/2022
  4059 00001812 80E103                  		and	cl, 3
  4060 00001815 7505                    		jnz	short notsingle	; zero means single drive system
  4061                                  		; 20/12/2022
  4062 00001817 41                      		inc	cx
  4063                                  		;inc	ax		; pretend it's a two drive system
  4064                                  settwodrive:				; set this to two fakedrives
  4065                                  		; 20/12/2022
  4066                                  		; ds = cs
  4067 00001818 FE06[7800]              		inc	byte [single]
  4068                                  		;inc	byte [cs:single] ; remember this
  4069                                  notsingle:	
  4070                                  		; 20/12/2022			
  4071                                  		;inc	ax		; ax has number	of drives, 2-4
  4072                                  		;			; is also 0 indexed boot drive if we
  4073                                  		;			; booted off hard file
  4074                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4075                                  		; 20/12/2022
  4076 0000181C FEC1                    		inc	cl	; cl >= 2
  4077                                  
  4078                                  ; 16/10/2022
  4079                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4080                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4081                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4082                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4083                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4084                                  SEC9	EQU	522h	; address of disk parameters
  4085                                  CHROUT	EQU	29h
  4086                                  LSTDRV	EQU     504h
  4087                                  
  4088                                  ; determine whether we booted from floppy or hard disk...
  4089                                  
  4090                                  		; 20/12/2022
  4091 0000181E 88C8                    		mov	al, cl	; 26/05/2019
  4092                                  
  4093 00001820 F6C280                  		test	dl, 80h		; boot from floppy ?
  4094 00001823 7502                    		jnz	short gothrd	; no.
  4095 00001825 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4096                                  gothrd:					
  4097                                  
  4098                                  ; MSDOS 6.0
  4099                                  ;   ax = 0-based drive we booted from
  4100                                  ;   bios_l, bios_h set.
  4101                                  ;   cl = number of floppies including fake one
  4102                                  ;   ch = media byte
  4103                                  
  4104                                  ; Retro DOS 4.0 - 27/12/2018 
  4105                                  ;  (from Retro DOS v2.0 boot sector)
  4106                                  ;   dl = int 13 drive number we booted from
  4107                                  ;   dh = media byte
  4108                                  
  4109                                  		; 20/12/2022
  4110 00001827 88F5                    		mov	ch, dh		; 01/07/2018
  4111                                  
  4112                                  		; cl = number of floppies
  4113                                  		; ch = media byte
  4114                                  
  4115                                  		; set up local stack
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4119                                  					; bios_l, bios_h set.
  4120                                  					; cl = number of floppies including fake one
  4121                                  					; ch = media byte
  4122                                  		; 20/12/2022
  4123                                  		; es = ds = cs
  4124                                  		; ss = 0
  4125                                  		; sp = 700h
  4126                                  
  4127                                  		; 20/12/2022
  4128                                  		;cli
  4129                                  		;mov	ss, dx		; set stack segment and stack pointer
  4130                                  		;mov	sp, 700h
  4131                                  		;sti
  4132                                  
  4133 00001829 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4134                                  		
  4135 0000182A 88EC                    		mov	ah, ch		; FAT ID to AH
  4136 0000182C 50                      		push	ax ; (**)	; save boot drive number and media byte
  4137                                  		
  4138                                  ; let model_byte, secondary_model_byte be set here!!!
  4139                                  
  4140 0000182D B4C0                    		mov	ah, 0C0h
  4141 0000182F CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4142 00001831 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4143 00001833 80FC00                  		cmp	ah, 0
  4144 00001836 7510                    		jnz	short no_rom_system_conf
  4145                                  
  4146                                  ;		; 20/12/2022
  4147                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4148                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4149                                  ;
  4150                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4151                                  ;
  4152                                  ;		on return:
  4153                                  ;		CF = 0 if successful
  4154                                  ;		   = 1 if error
  4155                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4156                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4157                                  ;
  4158                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4159                                  ;
  4160                                  ;		Offset Size	     Description
  4161                                  ;
  4162                                  ;		  00   word   length of descriptor (8 minimum)
  4163                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4164                                  ;		  03   byte   secondary model byte
  4165                                  ;		  04   byte   BIOS revision level (zero based)
  4166                                  ;		  05   byte   feature information, see below
  4167                                  ;		  06   dword  reserved
  4168                                  
  4169                                  		; 20/12/2022
  4170                                  		; ds = cs
  4171 00001838 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4172 0000183C A2[3E06]                		mov	[model_byte], al
  4173                                  		;mov	[cs:model_byte], al
  4174                                  					; get/save model byte
  4175 0000183F 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4176 00001843 A2[3F06]                		mov	[secondary_model_byte], al
  4177                                  		;mov	[cs:secondary_model_byte], al
  4178                                  					; get/save secondary model byte
  4179 00001846 EB0C                    		jmp	short turn_timer_on
  4180                                  ;-----------------------------------------------------------------------------
  4181                                  
  4182                                  no_rom_system_conf:			
  4183 00001848 BEFFFF                  		mov	si, 0FFFFh
  4184 0000184B 8EC6                    		mov	es, si
  4185                                  		; 20/12/2022
  4186 0000184D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4187 00001851 A2[3E06]                		mov	[model_byte], al
  4188                                  		;mov	[cs:model_byte], al ; save model byte
  4189                                  turn_timer_on:				
  4190 00001854 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4191 00001856 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4192                                  					; AKPORT
  4193                                  
  4194                                  ; some olivetti m24 machines have an 8530 serial communications
  4195                                  ; chip installed at io address 50h and 52h. if we're running
  4196                                  ; on one of those, we must inhibit the normal aux port initialization
  4197                                  
  4198                                  		; 20/12/2022
  4199                                  		; ds = cs
  4200 00001858 803E[3E06]00            		cmp	byte [model_byte], 0
  4201                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4202 0000185D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4203                                  					; (except olivetti m24)
  4204 0000185F E466                    		in	al, 66h		; is 8530 installed?
  4205 00001861 A820                    		test	al, 20h
  4206 00001863 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4207 00001865 B00F                    		mov	al, 0Fh		; double check
  4208 00001867 E650                    		out	50h, al
  4209 00001869 E450                    		in	al, 50h
  4210 0000186B A801                    		test	al, 1		; this test was	copied from olivetti
  4211 0000186D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4212                                  
  4213                                  not_olivetti_m24:
  4214 0000186F B003                    		mov	al, 3		; init com4
  4215 00001871 E89108                  		call	aux_init
  4216 00001874 B002                    		mov	al, 2		; init com3
  4217 00001876 E88C08                  		call	aux_init
  4218 00001879 B001                    		mov	al, 1		; init com2
  4219 0000187B E88708                  		call	aux_init
  4220 0000187E 30C0                    		xor	al, al		; init com1
  4221 00001880 E88208                  		call	aux_init
  4222                                  
  4223                                  skip_aux_port_init:			
  4224 00001883 B002                    		mov	al, 2		; init lpt3
  4225 00001885 E87508                  		call	print_init
  4226 00001888 B001                    		mov	al, 1		; init lpt2
  4227 0000188A E87008                  		call	print_init
  4228 0000188D 30C0                    		xor	al, al		; init lpt1
  4229 0000188F E86B08                  		call	print_init
  4230                                  
  4231 00001892 31D2                    		xor	dx, dx	; 0
  4232 00001894 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4233 00001896 8EC2                    		mov	es, dx
  4234 00001898 31C0                    		xor	ax, ax
  4235                                  		; 16/10/2022
  4236 0000189A BF3405                  		mov	di, INITSPOT	; 0534h
  4237                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4238                                  					; IBM wants 4 zeros here
  4239 0000189D AB                      		stosw
  4240 0000189E AB                      		stosw
  4241 0000189F 8CC8                    		mov	ax, cs		; fetch	segment
  4242 000018A1 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4243                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4244                                  					; break	entry point
  4245 000018A7 A36E00                  		mov	[BRKADR+2], ax		
  4246                                  		;mov	ds:6Eh,	ax	; vector for break
  4247 000018AA C706A400[6207]          		mov	word [CHROUT*4], outchr
  4248                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4249 000018B0 A3A600                  		mov	[CHROUT*4+2], ax
  4250                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4251                                  
  4252 000018B3 BF0400                  		mov	di, 4
  4253 000018B6 BB[F406]                		mov	bx, intret ; 19/10/2022
  4254                                  		;mov	bx, offset intret ; intret (cs:intret)
  4255                                  					; will initialize rest of interrupts
  4256 000018B9 93                      		xchg	ax, bx
  4257 000018BA AB                      		stosw			; location 4
  4258 000018BB 93                      		xchg	ax, bx		; cs:
  4259 000018BC AB                      		stosw			; int 1	; location 6
  4260 000018BD 83C704                  		add	di, 4
  4261 000018C0 93                      		xchg	ax, bx
  4262 000018C1 AB                      		stosw			; location 12
  4263 000018C2 93                      		xchg	ax, bx		; cs:
  4264 000018C3 AB                      		stosw			; int 3	; location 14
  4265 000018C4 93                      		xchg	ax, bx
  4266 000018C5 AB                      		stosw			; location 16
  4267 000018C6 93                      		xchg	ax, bx		; cs:
  4268 000018C7 AB                      		stosw			; int 4	; location 18
  4269                                  
  4270                                  
  4271                                  ;		; 20/12/2022
  4272                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4273                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4274                                  ;	
  4275                                  ;		50:00	byte	Print screen status byte
  4276                                  ;				 00 = PrtSc not active,
  4277                                  ;				 01 = PrtSc in progress
  4278                                  ;				 FF = error
  4279                                  ;		50:01  3 bytes	Used by BASIC
  4280                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4281                                  ;		50:05  10bytes	POST work area
  4282                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4283                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4284                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4285                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4286                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4287                                  ;		50:20	word	DOS dynamic storage
  4288                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4289                                  ;		50:30	4bytes	MODE command
  4290                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4291                                  
  4292 000018C8 89160005                		mov	[0500h], dx ; 0
  4293                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4294 000018CC 89160405                		mov	[LSTDRV], dx	; [0504h]
  4295                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4296                                  
  4297                                  ; we need to initialize the cs:motorstartup variable from the disk
  4298                                  ; parameter table at sec9. the offsets in this table are defined in
  4299                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4300                                  
  4301 000018D0 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4302                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4303                                  					; [522h+0Ah]
  4304                                  		; 20/12/2022
  4305                                  		; ds = 0
  4306                                  
  4307 000018D3 2EA2[2601]              		mov	[cs:motorstartup], al
  4308 000018D7 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4309 000018DD 720B                    		jb	short no_diddle	; no
  4310 000018DF C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4311                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4312                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4313 000018E5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4314                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4315                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4316                                  no_diddle:				
  4317 000018EA CD12                    		int	12h		; MEMORY SIZE -
  4318                                  					; Return: AX = number of contiguous 1K blocks of memory
  4319 000018EC B106                    		mov	cl, 6
  4320 000018EE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4321                                  		
  4322                                  		; 20/12/2022
  4323                                  		; 03/07/2018 - 27/12/2018
  4324                                  		;pop	cx ; (**)
  4325                                  		;mov	[cs:drvfat], cx
  4326                                  		
  4327 000018F0 50                      		push	ax ; (*)	; save real top	of memory
  4328                                  
  4329                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4330                                  
  4331                                  ;M068 - BEGIN
  4332                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4333                                  
  4334                                  		; 20/12/2022
  4335                                  		; ds = 0
  4336                                  
  4337                                  		;push	ds
  4338                                  		;push	bx		; pushes not required but since this
  4339                                  					; happens to be a last minute change
  4340                                  					; & since it is only init code.
  4341                                  		;xor	bx, bx
  4342                                  		;mov	ds, bx
  4343                                  
  4344                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4345                                  		;mov	bx, [2Fh*4]
  4346                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4347                                  		;mov	ds, [2Fh*4+2]
  4348                                  		; 29/09/2023
  4349 000018F1 C51EBC00                		lds	bx, [2Fh*4]
  4350                                  
  4351 000018F5 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4352                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4353 000018FA 750F                    		jnz	short SkipRPL
  4354 000018FC 807F054C                		cmp	byte [bx+5], 'L'
  4355                                  		;cmp	byte ptr [bx+5], 'L'
  4356 00001900 7509                    		jnz	short SkipRPL
  4357 00001902 89C2                    		mov	dx, ax		; get TOM into DX
  4358 00001904 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4359 00001907 CD2F                    		int	2Fh		; Get new TOM from any RPL
  4360 00001909 89D0                    		mov	ax, dx
  4361                                  SkipRPL:	
  4362                                  		; 20/12/2022		
  4363                                  		;pop	bx
  4364                                  		;pop	ds
  4365                                  
  4366                                  ;M068 - END
  4367                                  		; 20/12/2022
  4368                                  		; 27/12/2018
  4369 0000190B 0E                      		push	cs
  4370 0000190C 1F                      		pop	ds
  4371                                  
  4372                                  		; 18/03/2019 - Retro DOS v4.0
  4373                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4374                                  		;mov	[cs:fatloc], ax	; location to read fat
  4375                                  
  4376                                  		; 01/07/2018
  4377                                  		; 08/04/2018
  4378                                  		; 28/03/2018
  4379                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4380 0000190D 83E840                  		sub	ax, 64
  4381 00001910 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4382                                  		;mov	[cs:init_bootseg], ax
  4383                                  
  4384                                  		; 27/12/2018 - Retro DOS v4.0
  4385                                  		;;pop	ax ; (*)	; get back real top of memory
  4386                                  		;pop	dx ; (*)
  4387                                  		; 29/09/2023 (BugFix)
  4388 00001913 58                      		pop	ax ; (*)	; get back real top of memory
  4389                                  
  4390                                  		; 20/12/2022
  4391                                  		; 27/12/2018
  4392 00001914 59                      		pop	cx ; (**)
  4393 00001915 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4394                                  
  4395                                  		; 20/12/2022
  4396                                  
  4397                                  		;mov	dx, 46Dh	; SYSINIT segment
  4398 00001919 BA3F04                  		mov	dx, SYSINITSEG	; 17/10/2022
  4399 0000191C 8EDA                    		mov	ds, dx
  4400                                  
  4401                                  ; set pointer to resident device driver chain
  4402                                  
  4403                                  		; 17/10/2022
  4404 0000191E C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4405                                  		;mov	word [273h], res_dev_list
  4406                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4407                                  					; [SYSINIT+DEVICE_LIST]
  4408 00001924 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4409                                  		;mov	[275h], cs
  4410                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4411                                  
  4412 00001928 A3[9202]                		mov	[MEMORYSIZE], ax
  4413                                  		;mov	[292h], ax
  4414                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4415                                  
  4416 0000192B FEC1                    		inc	cl
  4417 0000192D 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4418                                  		;mov	[296h], cl
  4419                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4420                                  
  4421 00001931 C706[7102]CD07          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4422                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4423                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4424                                  					; dos_load_seg
  4425                                  
  4426                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4427                                  ; printer cards. we initialize this value to point to an iret only if
  4428                                  ;
  4429                                  ; 1) the original segment points to storage inside valid ram.
  4430                                  ;
  4431                                  ; 2) the original segment is 0F000:xxxx
  4432                                  
  4433                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4434                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4435                                  		;mov	es, ax
  4436                                  		; 20/12/2022
  4437                                  		;push	ds ; SYSINITSEG
  4438                                  		;pop	es
  4439 00001937 8EC2                    		mov	es, dx ; SYSINITSEG
  4440 00001939 31C0                    		xor	ax, ax ; 0
  4441 0000193B 8ED8                    		mov	ds, ax		; segment 0
  4442                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4443 0000193D A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4444                                  		; 18/10/2022
  4445 00001940 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4446                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4447 00001945 7605                    		jbe	short resetintf
  4448 00001947 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4449 0000194A 750A                    		jnz	short keepintf
  4450                                  resetintf:	
  4451 0000194C C7063C00[F406]          		mov	word [0Fh*4], intret			
  4452                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4453 00001952 8C0E3E00                		mov	word [0Fh*4+2], cs
  4454                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4455                                  keepintf:				
  4456                                  ; end important
  4457                                  
  4458                                  ; 17/10/2022
  4459                                  ; 28/12/2018 - Retro DOS v4.0
  4460                                  
  4461                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4462                                  ;
  4463                                  ; we will check if the system has ibm extended keyboard by
  4464                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4465                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4466                                  ; for the extended keyboard function. use cx as the temporary register.
  4467                                  
  4468                                  		; 20/12/2022
  4469                                  		; ds = 0
  4470                                  		;xor	cx, cx
  4471                                  		;mov	ds, cx
  4472                                  
  4473 00001956 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4474                                  
  4475                                  		; 20/12/2022
  4476                                  		; 20/03/2019
  4477 0000195A 0E                      		push	cs
  4478 0000195B 1F                      		pop	ds
  4479                                  
  4480                                  		;test	cl, 00010000b ; 10h
  4481 0000195C F6C110                  		test	cl, 10h		; extended keyboard ?
  4482 0000195F 740A                    		jz	short org_key	; no, original keyboard
  4483                                  
  4484                                  		; 20/12/2022
  4485                                  		;  ds = cs
  4486 00001961 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4487 00001966 C606[E604]11            		mov	byte [keysts_func], 11h
  4488                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4489                                  		;mov	byte [cs:keysts_func], 11h
  4490                                  					; change for extended keyboard functions
  4491                                  org_key:
  4492                                  
  4493                                  ; 02/06/2018 - Retro DOS v3.0
  4494                                  
  4495                                  ;**************************************************************
  4496                                  ;	will initialize the number of drives
  4497                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4498                                  ;	the indications are as follows:
  4499                                  ;
  4500                                  ;	bits	7	6	drives
  4501                                  ;		0	0	1
  4502                                  ;		0	1	2
  4503                                  ;		1	0	3
  4504                                  ;		1	1	4
  4505                                  ;**************************************************************
  4506                                  		
  4507                                  		; 20/12/2022
  4508                                  		; ds = cs		
  4509                                  		;push	cs
  4510                                  		;pop	ds
  4511                                  		; 21/12/2022
  4512                                  		;push	cs
  4513                                  		;pop	es
  4514                                  
  4515 0000196B E8DC08                  		call	cmos_clock_read	; If cmos clock	exists,
  4516                                  					; then set the system time according to	that.
  4517                                  					; also,	reset the cmos clock rate.
  4518                                  		; 18/10/2022
  4519                                  		;mov	word ptr BData_start, offset harddrv ;
  4520                                  					; set up pointer to hdrive
  4521                                  		; 02/10/2022
  4522 0000196E C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4523                                  		
  4524                                  		; 20/12/2022
  4525                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4526 00001974 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4527 00001975 30E4                    		xor	ah, ah		; chuck	fat id byte
  4528 00001977 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4529 0000197A A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4530 0000197D D1E0                    		shl	ax, 1
  4531 0000197F 0106[4417]              		add	[last_dskdrv_table], ax
  4532                                  
  4533 00001983 B280                    		mov	dl, 80h
  4534 00001985 B408                    		mov	ah, 8
  4535 00001987 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4536                                  					; DL = drive number
  4537                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4538                                  					; DL = number of consecutive drives
  4539                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4540 00001989 7204                    		jc	short enddrv
  4541 0000198B 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4542                                  enddrv:
  4543                                  		; 21/12/2022
  4544 0000198F 0E                      		push	cs
  4545 00001990 07                      		pop	es
  4546                                  
  4547                                  ; scan the list of drives to determine their type. we have three flavors of
  4548                                  ; diskette drives:
  4549                                  ;
  4550                                  ;   48tpi drives    we do nothing special for them
  4551                                  ;   96tpi drives    mark the fact that they have changeline support.
  4552                                  ;   3.5"  drives    mark changeline support and small.
  4553                                  ;
  4554                                  ; the following code uses registers for certain values:
  4555                                  ;
  4556                                  ;   dl - physical drive
  4557                                  ;   ds:di - points to current bds
  4558                                  ;   cx - flag bits for bds
  4559                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4560                                  					
  4561 00001991 30D2                    		xor	dl, dl
  4562                                  
  4563                                  		; 20/12/2022
  4564                                  		; ds = cs
  4565                                  		; 17/06/2018		 
  4566                                  		;push	cs
  4567                                  		;pop	ds
  4568                                  
  4569 00001993 C606[2C01]09            		mov	byte [eot], 9
  4570 00001998 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4571                                  					; to set aside two bdss	for the	two fake floppy	drives
  4572                                  
  4573                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4574                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4575                                  
  4576                                  ; check to see if we are faking floppy drives. if not we don't
  4577                                  ; do anything special. if we are faking floppy drives we need
  4578                                  ; to set aside two bdss for the two fake floppy drives. we
  4579                                  ; don't need to initalise any fields though. so starting at start_bds
  4580                                  ; use the link field in the bds structure to go to the second bds
  4581                                  ; in the list and initalise it's link field to -1 to set the end of
  4582                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4583                                  ; the bds for harddrives.
  4584                                  
  4585 0000199B 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4586 000019A0 750B                    		jnz	short loop_drive
  4587 000019A2 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4588                                  					; di <-	first bds link
  4589 000019A4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4590                                  					; di <-	second bds link
  4591 000019A6 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4592 000019AA E91201                  		jmp	dohard		; allocate/initialise bds for harddrives
  4593                                  ;-----------------------------------------------------------------------------
  4594                                  
  4595                                  loop_drive:				
  4596 000019AD 3A16[7500]              		cmp	dl, [drvmax]
  4597 000019B1 7203                    		jb	short got_more
  4598 000019B3 E90501                  		jmp	done_drives
  4599                                  ;-----------------------------------------------------------------------------
  4600                                  
  4601                                  got_more:				
  4602 000019B6 31C9                    		xor	cx, cx ; 0	; zero all flags
  4603 000019B8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4604                                  					; get next bds
  4605 000019BA B600                    		mov	dh, 0 ; ff48tpi
  4606                                  					; set form factor to 48	tpi
  4607 000019BC C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4608                                  		
  4609                                  		; 14/12/2023
  4610 000019C1 51                      		push	cx ; 0
  4611                                  		; 20/12/2022
  4612                                  		;push	ds ; 11/05/2019	
  4613 000019C2 57                      		push	di
  4614 000019C3 52                      		push	dx
  4615                                  		;push	cx ; not necessary (14/12/2023)
  4616 000019C4 06                      		push	es ; ((*)) ; 20/12/2022
  4617                                  		
  4618 000019C5 B408                    		mov	ah, 8
  4619 000019C7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4620                                  					; DL = drive number
  4621                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4622                                  					; DL = number of consecutive drives
  4623                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4624 000019C9 7278                    		jc	short noparmsfromrom
  4625                                  
  4626                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4627                                  ; in this case, we are going to put bogus informations to bds table.
  4628                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4629                                  ; they are calculated at the later time. this is just for the diagnostic
  4630                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4631                                  ; this should only happen with drive b.
  4632                                  
  4633                                  		; 14/12/2023
  4634                                  		; ch = low eight bits of maximum cylinder number
  4635                                  		; cl = maximum sector number (bits 5-0)
  4636                                  		;      high two bits of maximum cylinder number (bits 7-6)
  4637                                  
  4638 000019CB 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4639 000019CE 7505                    		jnz	short pfr_ok
  4640                                  
  4641                                  		;mov	ch, 39		; rom gave wrong info.
  4642                                  		;mov	cl, 9		; let's default to 360k.
  4643                                  		; 20/12/2022
  4644 000019D0 B90927                  		mov	cx, 2709h
  4645                                  
  4646 000019D3 B601                    		mov	dh, 1
  4647                                  pfr_ok:					
  4648 000019D5 FEC6                    		inc	dh		; make number of heads 1-based
  4649 000019D7 FEC5                    		inc	ch		; make number of cylinders 1-based
  4650 000019D9 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4651 000019DD 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4652 000019E0 880E[D116]              		mov	[sec_trk], cl
  4653 000019E4 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4654                                  
  4655                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4656                                  
  4657 000019E8 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4658                                  		;jbe	short eot_ok
  4659                                  		; 09/12/2022
  4660                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4661                                  		; 14/08/2023
  4662 000019EC 7604                    		jbe	short eotok
  4663 000019EE 880E[2C01]              		mov	[eot], cl
  4664                                  ;eot_ok:					
  4665                                  eotok:
  4666                                  		; 20/12/2022
  4667 000019F2 07                      		pop	es ; ((*)) es = cs = ds
  4668                                  		;pop	cx ; 14/12/2023
  4669 000019F3 5A                      		pop	dx
  4670 000019F4 5F                      		pop	di
  4671                                  		; 20/12/2022
  4672                                  		;pop	ds
  4673                                  
  4674                                  		; 14/12/2023
  4675                                  		; 13/12/2023 - Retro DOS v4.0 & v4.1 IO.SYS - BugFix ; +*+
  4676                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1AAAh)
  4677                                  
  4678                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS - BugFix ; +*+
  4679                                  		; (MSDOS 5.0 & MSDOS 6.22 IO.SYS both have a bug here,
  4680                                  		;  they does not save CX,DX registers before INT 13h func 15h)
  4681                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4682                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4683                                  		;  -- ref: Ralf Brown's Interrupt List --
  4684                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4685                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4686                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4687                                  
  4688                                  		; 14/12/2023
  4689                                  		; 13/12/2023
  4690 000019F5 52                      		push	dx ; +*+
  4691                                  
  4692                                  ; Check	for presence of	changeline
  4693                                  
  4694 000019F6 B415                    		mov	ah, 15h
  4695 000019F8 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4696                                  					; DL = drive ID
  4697                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4698                                  					; CX:DX	= number of sectors on the media
  4699                                  		; 14/12/2023
  4700 000019FA 5A                      		pop	dx ; +*+
  4701 000019FB 59                      		pop	cx ; +*+		
  4702 000019FC 720D                    		jc	short changeline_done
  4703                                  
  4704 000019FE 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4705 00001A01 7508                    		jnz	short changeline_done
  4706                                  
  4707                                  ; we have a drive with change line support.
  4708                                  
  4709 00001A03 80C902                  		or	cl, 2		; fchangeline
  4710                                  					; signal type
  4711 00001A06 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4712                                  
  4713                                  ; we now try to set up the form factor for the types of media that we know
  4714                                  ; and can recognise. for the rest, we set the form factor as "other".
  4715                                  
  4716                                  changeline_done:
  4717                                  
  4718                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4719                                  			
  4720 00001A0B 803E[D216]28            		cmp	byte [num_cyln], 40
  4721 00001A10 750B                    		jnz	short try_80
  4722 00001A12 803E[D116]09            		cmp	byte [sec_trk], 9
  4723 00001A17 7655                    		jbe	short nextdrive
  4724                                  gotother:				
  4725 00001A19 B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4726 00001A1B EB51                    		jmp	short nextdrive
  4727                                  ;-----------------------------------------------------------------------------
  4728                                  
  4729                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4730                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4731                                  
  4732                                  try_80:					
  4733 00001A1D 803E[D216]50            		cmp	byte [num_cyln], 80
  4734 00001A22 75F5                    		jnz	short gotother
  4735 00001A24 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4736 00001A26 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4737 00001A2B 7441                    		jz	short nextdrive	; yeah,	go update
  4738                                  
  4739                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4740                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4741                                  		;mov	dh, ff144
  4742                                  		;cmp	byte [sec_trk], 18
  4743                                  		;je	short nextdrive
  4744                                  
  4745 00001A2D 803E[D116]0F            		cmp	byte [sec_trk], 15
  4746 00001A32 740B                    		jz	short got96
  4747                                  		
  4748 00001A34 803E[D116]09            		cmp	byte [sec_trk], 9
  4749 00001A39 75DE                    		jnz	short gotother
  4750                                  		
  4751 00001A3B B602                    		mov	dh, 2 ; ffSmall
  4752 00001A3D EB2F                    		jmp	short nextdrive
  4753                                  ; ----------------------------------------------------------------------------
  4754                                  
  4755                                  got96:					
  4756 00001A3F B601                    		mov	dh, 1 ; ff96tpi
  4757 00001A41 EB2B                    		jmp	short nextdrive
  4758                                  ; ----------------------------------------------------------------------------
  4759                                  
  4760                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4761                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4762                                  
  4763                                  noparmsfromrom:				
  4764                                  		; 20/12/2022
  4765 00001A43 07                      		pop	es ; ((*)) 
  4766                                  		;pop	cx ; 14/12/2023
  4767 00001A44 5A                      		pop	dx
  4768 00001A45 5F                      		pop	di
  4769                                  		; 20/12/2022
  4770                                  		;pop	ds
  4771                                  
  4772                                  		; 14/12/2023
  4773                                  		; 13/12/2023 - BugFix ; * ; +*+
  4774                                  		; (MSDOS 5.0 & 6.22 IO.SYS bug) ; +*+
  4775                                  		; (some ROMBIOSs fix this BUG but return with false)
  4776                                  		; -- ref: Ralf Brown's Interrupt List --
  4777                                  
  4778                                  		; 14/12/2023
  4779                                  		; 13/12/2023
  4780 00001A46 52                      		push	dx  ; +*+
  4781                                  		
  4782 00001A47 B415                    		mov	ah, 15h
  4783 00001A49 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4784                                  					; DL = drive ID
  4785                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4786                                  					; CX:DX	= number of sectors on the media
  4787                                  		; 14/12/2023
  4788 00001A4B 5A                      		pop	dx  ; +*+
  4789 00001A4C 59                      		pop	cx  ; +*+ ; 0
  4790 00001A4D 721F                    		jc	short nextdrive
  4791                                  		
  4792 00001A4F 80FC02                  		cmp	ah, 2		; is there changeline?
  4793 00001A52 751A                    		jnz	short nextdrive
  4794                                  
  4795 00001A54 80C902                  		or	cl, 2 ; fchangeline
  4796 00001A57 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4797                                  
  4798 00001A5C C606[D216]50            		mov	byte [num_cyln], 80
  4799 00001A61 B601                    		mov	dh, 1 ; ff96tpi 
  4800 00001A63 B00F                    		mov	al, 15
  4801 00001A65 3A06[2C01]              		cmp	al, [eot]
  4802 00001A69 7603                    		jbe	short nextdrive ; eot_ok2
  4803 00001A6B A2[2C01]                		mov	[eot], al
  4804                                  ; ----------------------------------------------------------------------------
  4805                                  
  4806                                  ;eot_ok2:
  4807                                  nextdrive:				
  4808 00001A6E 80C920                  		or	cl, 20h	; fi_own_physical
  4809                                  					; set this true	for all	drives
  4810 00001A71 88D7                    		mov	bh, dl		; save int13 drive number
  4811                                  
  4812                                  ; we need to do special things if we have a single drive system and are setting
  4813                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4814                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4815                                  ; we detect the presence of this situation by examining the flag single for the
  4816                                  ; value 2.
  4817 00001A73 803E[7800]02            		cmp	byte [single], 2
  4818 00001A78 7505                    		jnz	short not_special
  4819 00001A7A FECF                    		dec	bh		; int13	drive number same for logical drive
  4820 00001A7C 80F120                  		xor	cl, 20h	; fi_own_physical
  4821                                  					; reset	ownership flag for logical drive
  4822                                  not_special:
  4823                                  
  4824                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4825                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4826                                  ; form factor is of type "ffother".
  4827                                  				
  4828 00001A7F 31C0                    		xor	ax, ax		; fill BDS for drive
  4829 00001A81 A0[D016]                		mov	al, [num_heads]
  4830 00001A84 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4831 00001A87 A0[D116]                		mov	al, [sec_trk]
  4832 00001A8A 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4833 00001A8D 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4834 00001A90 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4835 00001A93 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4836 00001A96 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4837 00001A99 8A1E[D216]              		mov	bl, [num_cyln]
  4838 00001A9D 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4839 00001AA0 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4840 00001AA5 7510                    		jnz	short no_single
  4841                                  		; 14/12/2023
  4842 00001AA7 FE06[7800]              		inc	byte [single]	; [single] = 2
  4843                                  		;mov	byte [single], 2 ; Don't forget we have
  4844                                  					; single drive system
  4845                                  		; 18/12/2022
  4846 00001AAB 80C910                  		or	cl, 10h
  4847                                  		;or	cx, 10h	; fi_am_mult
  4848                                  					; set that this	is one of several drives
  4849 00001AAE 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4850                                  					; save flags
  4851 00001AB1 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4852                                  					; move to next BDS in list
  4853 00001AB3 FEC2                    		inc	dl		; add a	number
  4854 00001AB5 EBB7                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4855                                  ; ----------------------------------------------------------------------------
  4856                                  
  4857                                  no_single:				
  4858                                  		;inc	dl
  4859                                  		; 18/12/2022
  4860 00001AB7 42                      		inc	dx
  4861 00001AB8 E9F2FE                  		jmp	loop_drive
  4862                                  ; ----------------------------------------------------------------------------
  4863                                  
  4864                                  done_drives:	
  4865                                  		;mov	word [di+BDS.link], -1			
  4866 00001ABB C705FFFF                		mov	word [di], -1	; set link to null
  4867                                  
  4868                                  ; set up all the hard drives in	the system
  4869                                  
  4870                                  		; 20/12/2022
  4871                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4872                                  dohard:					
  4873 00001ABF 8A36[4317]              		mov	dh, [hnum]
  4874 00001AC3 08F6                    		or	dh, dh		; done if no hardfiles
  4875 00001AC5 745B                    		jz	short static_configure
  4876 00001AC7 B280                    		mov	dl, 80h
  4877                                  dohard1:				
  4878 00001AC9 52                      		push	dx
  4879 00001ACA 8B3E[4617]              		mov	di, [end_of_bdss]
  4880 00001ACE 8A1E[7500]              		mov	bl, [drvmax]
  4881 00001AD2 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4882 00001AD4 E8BE01                  		call	sethard
  4883 00001AD7 7208                    		jb	short hardfile_err
  4884 00001AD9 E82407                  		call	dmax_check	; error	if already 26 drives
  4885 00001ADC 7303                    		jnb	short hardfile_err
  4886 00001ADE E83407                  		call	xinstall_bds	; insert new bds into linked list
  4887                                  hardfile_err:				
  4888 00001AE1 5A                      		pop	dx
  4889 00001AE2 FEC2                    		inc	dl		; next hard drive
  4890 00001AE4 FECE                    		dec	dh
  4891 00001AE6 75E1                    		jnz	short dohard1
  4892                                  
  4893                                  ; end of physical drive	initialization
  4894                                  
  4895                                  ; *** do not change the position of the following statement.
  4896                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4897                                  ; *** drive number of mini disk(s).
  4898                                  					
  4899 00001AE8 E82306                  		call	domini		; for setting up mini disks, if found
  4900                                  
  4901                                  ; -- begin added section
  4902                                  
  4903 00001AEB 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4904 00001AEF B280                    		mov	dl, 80h
  4905                                  dohardx1:				
  4906 00001AF1 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4907                                  dohardx2:				
  4908 00001AF3 52                      		push	dx
  4909 00001AF4 53                      		push	bx
  4910 00001AF5 8B3E[4617]              		mov	di, [end_of_bdss]
  4911 00001AF9 8A1E[7500]              		mov	bl, [drvmax]
  4912 00001AFD E89501                  		call	sethard
  4913 00001B00 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4914 00001B02 E8FB06                  		call	dmax_check	; make sure <=26 drives
  4915 00001B05 7309                    		jnb	short dohardx4	; skip if error
  4916 00001B07 E80B07                  		call	xinstall_bds	; insert new bds into linked list
  4917 00001B0A 5B                      		pop	bx		; get partition	number
  4918 00001B0B 5A                      		pop	dx		; restore physical drive counts
  4919 00001B0C FEC7                    		inc	bh
  4920 00001B0E EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4921                                  ; ----------------------------------------------------------------------------
  4922                                  
  4923                                  dohardx4:				
  4924 00001B10 5B                      		pop	bx		; unjunk partition number from stack
  4925 00001B11 5A                      		pop	dx		; restore physical drive counts
  4926 00001B12 FEC2                    		inc	dl		; next hard drive
  4927 00001B14 FECE                    		dec	dh
  4928 00001B16 75D9                    		jnz	short dohardx1
  4929                                  
  4930                                  ; -- end changed section
  4931                                  
  4932                                  ;******************************************************************************
  4933                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4934                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4935                                  ; than two diskette drives
  4936                                  ;
  4937                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4938                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4939                                  ;		letters. to do this, scan for disk drives and assign logical
  4940                                  ;		drive number starting from 2 and then rescan diskette drives
  4941                                  ;		and assign next to the last logical drive number of last disk
  4942                                  ;		drive to the 3rd and 4th diskette drives.
  4943                                  ;******************************************************************************
  4944                                  
  4945 00001B18 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4946                                  		;jbe	short static_configure ; no - no need for remapping
  4947 00001B1D 7603                    		jbe	short no_remap
  4948 00001B1F E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4949                                  no_remap:
  4950                                  
  4951                                  ; End of drive initialization.
  4952                                  
  4953                                  ; ----------------------------------------------------------------------------
  4954                                  
  4955                                  ;we now decide, based on the configurations available so far, what
  4956                                  ;code or data we need to keep as a stay resident code. the following table
  4957                                  ;shows the configurations under consideration. they are listed in the order
  4958                                  ;of their current position memory.
  4959                                  ;
  4960                                  ;configuration will be done in two ways:
  4961                                  ;
  4962                                  ;first, we are going to set "static configuration". static configuration will
  4963                                  ;consider from basic configuration to endof96tpi configuration. the result
  4964                                  ;of static configuration will be the address the dynamic configuration will
  4965                                  ;use to start with.
  4966                                  ;
  4967                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4968                                  ;involves possible relocation of code or data. dynamic configuration routine
  4969                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4970                                  ;code individually. after these operation, [dosdatasg] will be set.
  4971                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4972                                  
  4973                                  ; -- begin changed section
  4974                                  ;
  4975                                  ;   1.	 basic configuration for msbio (endfloppy)
  4976                                  ;   2.   end96tpi	; a system that supports "change line error"
  4977                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4978                                  ;   4.	 endatrom	;some of at rom fix module.
  4979                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4980                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4981                                  ;
  4982                                  
  4983                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4984                                  
  4985                                  static_configure:			
  4986 00001B22 8B3E[4617]              		mov	di, [end_of_bdss]
  4987 00001B26 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4988                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4989 00001B2A 750D                    		jnz	short dynamic_configure	; that's the end, then
  4990                                  		; 18/10/2022
  4991 00001B2C BF[1709]                		mov	di, end96tpi
  4992                                  		;mov	di, offset harddrv ; end96tpi
  4993                                  					; keep everything up to	end96tpi
  4994 00001B2F 803E[7700]00            		cmp	byte [fhave96], 0
  4995 00001B34 7503                    		jnz	short dynamic_configure
  4996                                  		
  4997 00001B36 BF[FC08]                		mov	di, endfloppy
  4998                                  dynamic_configure:
  4999                                  		; 20/12/2022
  5000                                  		;push	cs
  5001                                  		;pop	es
  5002                                  		
  5003 00001B39 FC                      		cld			; clear direction
  5004                                  
  5005                                  ; -- end changed section
  5006                                  
  5007                                  		; 20/12/2022
  5008                                  		; ds = cs <> es
  5009                                  		; ss = 0
  5010                                  		; sp = 700h
  5011                                  
  5012                                  		; 14/12/2023
  5013 00001B3A BE00F0                  		mov	si, 0F000h
  5014 00001B3D 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5015                                  
  5016 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5017                                  		;jnz	short checkcmosclock
  5018                                  		; 14/12/2023
  5019 00001B44 751E                    		jnz	short checkcompaqbug ; no
  5020 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  5021                                  		;jz	short checkcmosclock
  5022 00001B4B 7417                    		jz	short checkcompaqbug
  5023 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  5024                                  		; 14/12/2023
  5025                                  		;mov	si, 0F000h
  5026                                  		;mov	es, si		; ES ->	ROM BIOS segment
  5027 00001B4E BE[4C17]                		mov	si, bios_date	; "01/10/84"
  5028 00001B51 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5029 00001B54 B90900                  		mov	cx, 9		; bdate_l
  5030                                  					; Only patch ROM for bios 01/10/84
  5031 00001B57 F3A6                    		repe cmpsb		; check	for date + zero	on end
  5032 00001B59 97                      		xchg	ax, di		; restore allocation pointer
  5033                                  
  5034                                  ; M015 -- begin changes
  5035                                  
  5036                                  		;jnz	short checkcmosclock
  5037                                  		; 02/10/2022
  5038 00001B5A 7508                    		jnz	short checkcompaqbug
  5039                                  
  5040                                  ; install at rom fix
  5041                                  
  5042                                  		; 19/10/2022
  5043                                  		;mov	cx, offset endatrom
  5044 00001B5C B9[0A14]                		mov	cx, endatrom
  5045                                  		;mov	si, offset ibm_disk_io
  5046 00001B5F BE[DC12]                		mov	si, ibm_disk_io
  5047 00001B62 EB46                    		jmp	short install_int13_patch
  5048                                  ; ----------------------------------------------------------------------------
  5049                                  
  5050                                  ; M065 -- begin changes
  5051                                  ;
  5052                                  ; On certain systems with Western Digital disk controllers, the
  5053                                  ; following detection scheme caused an unpredictable and serious
  5054                                  ; failure. In particular, they've implemented a nonstandard
  5055                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5056                                  ; what happens to be at es:[bx] and other memory locations indexed
  5057                                  ; off of it.
  5058                                  ;
  5059                                  ; Compaq was unable to tell us exactly which kind of systems have
  5060                                  ; the bug, except that they guarantee that the bug was fixed in
  5061                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5062                                  ; string, and then look for date codes before 08/04/86 to decide
  5063                                  ; when to install the hook.
  5064                                  
  5065                                  ;checkcmosclock:
  5066                                  ; 02/10/2022				
  5067                                  checkcompaqbug:
  5068                                  		; 20/12/2022
  5069                                  		; es = 0F000h
  5070                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5071                                  		;mov	es, ax
  5072                                  
  5073                                  		; 19/10/2022
  5074 00001B64 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5075                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5076 00001B6B 754B                    		jnz	short not_compaq_patch
  5077 00001B6D 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5078                                  		;cmp	word ptr es:0FFECh, 'PM'
  5079 00001B74 7542                    		jnz	short not_compaq_patch
  5080 00001B76 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5081                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5082 00001B7D 7539                    		jnz	short not_compaq_patch
  5083                                  
  5084                                  ; We're running on a COMPAQ. Now look at the date code.
  5085                                  
  5086 00001B7F 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5087 00001B83 86E0                    		xchg	ah, al
  5088 00001B85 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5089                                  		;cmp	ax, '86'        ; 3836h
  5090                                  					; is it	86?
  5091 00001B88 772E                    		ja	short not_compaq_patch
  5092 00001B8A 7218                    		jb	short do_compaq_patch
  5093 00001B8C 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5094 00001B90 86E0                    		xchg	ah, al
  5095 00001B92 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5096                                  		;cmp	ax, '08'        ; 3038h
  5097                                  					; is it	08?
  5098 00001B95 7721                    		ja	short not_compaq_patch
  5099 00001B97 720B                    		jb	short do_compaq_patch
  5100 00001B99 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5101 00001B9D 86E0                    		xchg	ah, al
  5102 00001B9F 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5103                                  		;cmp	ax, '04'        ; 3034h
  5104                                  					; is it	04?
  5105 00001BA2 7314                    		jnb	short not_compaq_patch
  5106                                  
  5107                                  do_compaq_patch:			
  5108 00001BA4 B9[2B14]                		mov	cx, end_compaq_i13hook
  5109                                  		;mov	si, endatrom
  5110                                  		; 14/12/2023
  5111 00001BA7 BE[0A14]                		mov	si, compaq_disk_io ; endatrom
  5112                                  
  5113                                  install_int13_patch:			
  5114 00001BAA 0E                      		push	cs
  5115 00001BAB 07                      		pop	es
  5116                                  		; 18/10/2022
  5117 00001BAC 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5118 00001BB0 8C0E[B600]              		mov	[Orig13+2], cs
  5119 00001BB4 29F1                    		sub	cx, si		; size of rom fix module
  5120 00001BB6 F3A4                    		rep movsb		; relocate it
  5121                                  
  5122                                  ; M065 -- end changes
  5123                                  
  5124                                  ; ----------------------------------------------------------------------------
  5125                                  not_compaq_patch:			; M065
  5126                                  		; 17/10/2022
  5127                                  checkcmosclock:	
  5128                                  		; 18/10/2022		
  5129 00001BB8 0E                      		push	cs
  5130 00001BB9 07                      		pop	es
  5131                                  
  5132                                  		; 20/12/2022
  5133                                  		; ds = cs = es
  5134                                  		; ss = 0
  5135                                  		; sp = 700h
  5136                                  
  5137 00001BBA 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5138 00001BBF 7518                    		jnz	short checkk09	; no
  5139                                  
  5140 00001BC1 893E[0605]              		mov	word [daycnttoday], di
  5141                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5142 00001BC5 B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5143 00001BC8 BE[2C14]                		mov	si, daycnt_to_day
  5144 00001BCB F3A4                    		rep movsb
  5145 00001BCD 893E[0205]              		mov	word [bintobcd], di
  5146                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5147                                  					; let original segment stay
  5148 00001BD1 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5149 00001BD4 BE[FD14]                		mov	si, bin_to_bcd
  5150 00001BD7 F3A4                    		rep movsb
  5151                                  checkk09:				
  5152 00001BD9 57                      		push	di ; ? ; save ? ; 20/12/2022
  5153 00001BDA B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5154 00001BDD B301                    		mov	bl, 1		; wait for 1 clock tick
  5155 00001BDF 268A3D                  		mov	bh, [es:di]
  5156 00001BE2 F9                      		stc			; Assume we will fail
  5157 00001BE3 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5158                                  					; AL = condition type, BH = condition compare or mask value
  5159                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5160                                  					; DX = I/O port	address	if AL bit 4 set
  5161                                  					; 14/12/2023
  5162                                  					; ES:DI = user byte if AL bit 4 clear
  5163 00001BE5 5F                      		pop	di ; ?
  5164 00001BE6 721B                    		jc	short configdone ; 20/12/2022
  5165                                  
  5166 00001BE8 C606[7900]01            		mov	byte [fhavek09], 1
  5167                                  					; remember we have a k09 type
  5168 00001BED 1E                      		push	ds
  5169 00001BEE 31C0                    		xor	ax, ax
  5170 00001BF0 8ED8                    		mov	ds, ax
  5171                                  		
  5172 00001BF2 893EB001                		mov	[6Ch*4], di
  5173                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5174                                  					; new int 6ch handler
  5175                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5176 00001BF6 8C0EB201                		mov	word [6Ch*4+2], cs
  5177 00001BFA 1F                      		pop	ds
  5178                                  		; 20/12/2022
  5179                                  		; ds = cs = es
  5180 00001BFB BE[0815]                		mov	si, int6c
  5181 00001BFE B9C201                  		mov	cx, endk09-int6c ; 459
  5182                                  		;mov	cx, 459		; endk09 - int6c
  5183                                  					; size of k09 routine
  5184 00001C01 F3A4                    		rep movsb		;
  5185                                  					; set up config	stuff for sysinit
  5186                                  ; ----------------------------------------------------------------------------
  5187                                  ; Set up config stuff for SYSINIT
  5188                                  
  5189                                  ; 17/10/2022
  5190                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5191                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5192                                  ; 09/12/2022
  5193                                  SETDRIVE equ SetDrive
  5194                                  GETBP equ GetBp
  5195                                  		
  5196                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5197                                  configdone:	
  5198                                  		; 14/12/2023
  5199                                  		; ds = cs
  5200                                  		; 21/12/2022
  5201                                  		; 20/03/2019
  5202                                  		;push	cs		; di is	final ending address of	msbio.
  5203                                  		;pop	ds
  5204                                  		
  5205 00001C03 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5206                                  		; 10/12/2022
  5207                                  		;shr	di, 1
  5208                                  		;shr	di, 1
  5209                                  		;shr	di, 1
  5210                                  		;shr	di, 1
  5211 00001C06 B104                    		mov	cl, 4
  5212 00001C08 D3EF                    		shr	di, cl		
  5213                                  		; 10/12/2022
  5214                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5215                                  		; 19/10/2022 - Temporary !
  5216                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5217                                  		; 13/08/2023
  5218 00001C0A 83C770                  		add	di, 70h
  5219 00001C0D 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5220                                  
  5221                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5222                                  
  5223                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5224                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5225                                  	     
  5226                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5227                                  
  5228                                  ; 14/12/2023 
  5229                                  ; ----------------------------------------------------------------------------
  5230                                  ; ----------------------------------------------------------------------------
  5231                                  %if 0
  5232                                  		mov	ax, [drvfat]	; get drive and	fat id
  5233                                  		; 22/12/2022
  5234                                  		; Note: SETDRIVES uses AL (drive number) only
  5235                                  		mov	bp, SETDRIVE
  5236                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5237                                  					; at 2C7h:4D7h = 70h:2A47h
  5238                                  		push	cs		; simulate far call
  5239                                  		call	call_bios_code	; get bds for drive
  5240                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5241                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5242                                  		push	cs
  5243                                  		call	call_bios_code
  5244                                  
  5245                                  	; resort to funky old segment definitions for now
  5246                                  
  5247                                  		; 22/12/2022
  5248                                  		;push	es		; copy bds to ds:di
  5249                                  		;pop	ds
  5250                                  
  5251                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5252                                  	;
  5253                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5254                                  	;	  back. Apparently it was what actually setup es: for the following
  5255                                  	; cas----
  5256                                  
  5257                                  		; 22/12/2022
  5258                                  		;xor	di, di
  5259                                  		;mov	al, [es:di]	; get fat id byte
  5260                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5261                                  		;mov	[es:drvfat+1], al
  5262                                  		;mov	ax, [es:drvfat]
  5263                                  		
  5264                                  		; 22/12/2022
  5265                                  		; ds = cs
  5266                                  	;;;	mov	al, [drvfat]
  5267                                  
  5268                                  	; cas -- why do a SECOND setdrive here???
  5269                                  
  5270                                  		; 22/12/2022
  5271                                  		;push	es		; save whatever's in es
  5272                                  		;push	ds		; copy bds to es:di
  5273                                  		;pop	es
  5274                                  		;push	cs		; copy Bios_Data to ds
  5275                                  		;pop	ds
  5276                                  	
  5277                                  	; 22/12/2022
  5278                                  	;;;	mov	bp, SETDRIVE
  5279                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5280                                  	;;;	push	cs		; simulate far call
  5281                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5282                                  	
  5283                                  		; 22/12/2022
  5284                                  		;push	es		; copy bds back to ds:di
  5285                                  		;pop	ds
  5286                                  		;pop	es		; pop whatever was in es
  5287                                  
  5288                                  	; Now we load in the MSDOS.SYS file
  5289                                  
  5290                                  	; 22/12/2022
  5291                                  	; -----
  5292                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5293                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5294                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5295                                  	;				; get size of fat on media
  5296                                  	;	;mov	es:16DEh, bl
  5297                                  	;	mov	[es:fbigfat], bl
  5298                                  	;	mov	cl, [di+8]
  5299                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5300                                  	;	;sub	es:16D8h, ax
  5301                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5302                                  	;				; need a logical sector number that will
  5303                                  	;				; be used by getclus(diskrd procedure)
  5304                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5305                                  	;	;sbb	es:16DAh, ax
  5306                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5307                                  	; -----
  5308                                  		
  5309                                  	; -----	; 22/12/2022
  5310                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5311                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5312                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5313                                  					; get size of fat on media
  5314                                  		mov	[fbigfat], bl
  5315                                  		mov	cl, [es:di+8]
  5316                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5317                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5318                                  					; need a logical sector number that will
  5319                                  					; be used by getclus(diskrd procedure)
  5320                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5321                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5322                                  	; ------
  5323                                  
  5324                                  		xor	ch, ch	 ; cx = sectors/cluster
  5325                                  
  5326                                  	; the boot program has left the directory at 0:500h
  5327                                  
  5328                                  		push	ds
  5329                                  		xor	di, di
  5330                                  		mov	ds, di
  5331                                  		mov	bx, [53Ah]
  5332                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5333                                  					; (First cluster field of 2nd dir entry
  5334                                  					; of root directory in the buffer at 500h)
  5335                                  		pop	ds
  5336                                  loadit:
  5337                                  		mov	ax, SYSINITSEG	; 46Dh
  5338                                  		;mov	ax, 46Dh	; sysinit segment
  5339                                  		mov	es, ax
  5340                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5341                                  		;mov	es, [es:271h]
  5342                                  
  5343                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5344                                  ; ----------------------------------------------------------------------------
  5345                                  
  5346                                  		;test	byte [cs:fbigfat], fbig
  5347                                  		test	byte [cs:fbigfat], 40h ; fbig
  5348                                  		jnz	short eofbig
  5349                                  		cmp	bx, 0FF7h
  5350                                  		jmp	short iseofx
  5351                                  ; ----------------------------------------------------------------------------
  5352                                  
  5353                                  eofbig:
  5354                                  		cmp	bx, 0FFF7h
  5355                                  iseofx:
  5356                                  		jb	short loadit	; keep loading until cluster = eof
  5357                                  %endif
  5358                                  ; ----------------------------------------------------------------------------
  5359                                  ; ----------------------------------------------------------------------------
  5360                                  
  5361 00001C11 E83004                  		call	setdrvparms	; 
  5362                                  
  5363                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5364                                  		;jmp	far 46Dh:267h
  5365 00001C14 EA[6702]3F04            		jmp	SYSINITSEG:SYSINITSTART
  5366                                  
  5367                                  ; =============== S U B	R O U T	I N E ========================================
  5368                                  
  5369                                  ; Following are subroutines to support resident device driver initialization
  5370                                  ;
  5371                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5372                                  
  5373                                  ;	M035 -- begin changed section
  5374                                  
  5375                                  ;******************************************************************************
  5376                                  ; module name: remap
  5377                                  ;
  5378                                  ; descriptive name: all the code for himem that could be separated from msbio
  5379                                  ;
  5380                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5381                                  ;	     letters) if more than two diskette drives on the system.
  5382                                  ;
  5383                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5384                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5385                                  ;	       letters. to do this, scan for disk drives and assign logical
  5386                                  ;	       drive number starting from 2 and then rescan diskette drives
  5387                                  ;	       and assign next to the last logical drive number of last disk
  5388                                  ;	       drive to the 3rd and 4th diskette drives.
  5389                                  
  5390                                  ; input:       none
  5391                                  ; exit:	drive letters have been remapped in bds chain
  5392                                  ; exit error:  none
  5393                                  ; called from: msinit
  5394                                  ;
  5395                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5396                                  ;	  found in the system
  5397                                  ;	  this function assumes that there are no more than 26 drives assigned
  5398                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5399                                  ;	  this function assumes that the first entries in the chain are
  5400                                  ;	   floppy drives, and all the rest are hard drives
  5401                                  ;	  will alter the boot drive if necessary to reflect remapping
  5402                                  ;
  5403                                  ;******************************************************************************
  5404                                  
  5405                                  ; 17/10/2022
  5406                                  ; 02/10/2022
  5407                                  
  5408                                  remap:		; proc near
  5409                                  
  5410                                  		; 15/12/2023
  5411                                  		; ds = cs
  5412                                  		;mov	di, [cs:start_bds] ; get first bds
  5413 00001C19 8B3E[1901]              		mov	di, [start_bds]
  5414                                  
  5415                                  ; search for 1st fixed disk physical drive num
  5416                                  
  5417                                  drive_loop:
  5418 00001C1D 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5419                                  					; first	hard disk??
  5420 00001C21 7409                    		jz	short fdrv_found ; yes,	continue
  5421 00001C23 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5422                                  					; get next bds,	assume segment
  5423 00001C25 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  5424 00001C28 75F3                    		jnz	short drive_loop ; loop	if not
  5425 00001C2A EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5426                                  
  5427                                  ;------------------------------------------------------------------------------
  5428                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5429                                  ;logical drive nums to 3, 4, 5 etc.
  5430                                  ;------------------------------------------------------------------------------
  5431                                  
  5432                                  fdrv_found:
  5433 00001C2C B002                    		mov	al, 2		; start	with logical drv num=2
  5434                                  fdrv_loop:
  5435 00001C2E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5436 00001C31 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5437                                  					; ds:di--> next	bds
  5438                                  		;inc	al		; set num for next drive
  5439                                  		; 18/12/2022
  5440 00001C33 40                      		inc	ax
  5441 00001C34 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5442 00001C37 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5443                                  
  5444                                  ;------------------------------------------------------------------------------
  5445                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5446                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5447                                  ; any more.
  5448                                  ;------------------------------------------------------------------------------
  5449                                  
  5450                                  		;mov	di, [cs:start_bds] ; [start_bds]
  5451                                  		; 15/12/2023
  5452 00001C39 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  5453 00001C3D 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5454                                  					; ds:di-->bds2
  5455                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5456 00001C3F 8A26[2501]              		mov	ah, [dsktnum]
  5457 00001C43 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5458                                  remap_loop1:
  5459 00001C46 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5460                                  					; set new num to next floppy
  5461 00001C48 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5462 00001C4B FEC0                    		inc	al		; new number for next floppy
  5463 00001C4D FECC                    		dec	ah		; count down extra floppies
  5464 00001C4F 75F5                    		jnz	short remap_loop1
  5465                                  
  5466                                  ; now we've got to adjust the boot drive if we reassigned it
  5467                                  
  5468                                  		; 15/12/2023
  5469                                  		;mov	al, [cs:drvfat]
  5470 00001C51 A0[CA16]                		mov	al, [drvfat]
  5471 00001C54 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5472 00001C56 721D                    		jb	short rmap_exit
  5473                                  		;sub	al, [cs:dsktnum]
  5474 00001C58 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  5475 00001C5C 7204                    		jb	short remap_boot_flop ;	brif so
  5476                                  
  5477                                  ; we've got to remap the boot hard drive
  5478                                  ; subtract the number of EXTRA floppies from it
  5479                                  
  5480 00001C5E 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5481 00001C60 EB04                    		jmp	short remap_change_boot_drv
  5482                                  ; ---------------------------------------------------------------------------
  5483                                  
  5484                                  ; we've got to remap the boot floppy.
  5485                                  ; add the number of hard drive partitions to it
  5486                                  
  5487                                  remap_boot_flop:
  5488                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5489                                  		; 15/12/2023
  5490 00001C62 0206[7500]              		add	al, [drvmax]
  5491                                  remap_change_boot_drv:			
  5492                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  5493 00001C66 A2[CA16]                		mov	[drvfat], al
  5494 00001C69 FEC0                    		inc	al
  5495 00001C6B 1E                      		push	ds
  5496 00001C6C BF3F04                  		mov	di, SYSINITSEG	; 46Dh
  5497                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  5498                                  		;;mov	di, 46Dh	; SYSINIT segment
  5499 00001C6F 8EDF                    		mov	ds, di
  5500 00001C71 A2[9602]                		mov	[DEFAULTDRIVE], al
  5501                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5502                                  					; pass it to sysinit as	well
  5503 00001C74 1F                      		pop	ds ; ds = cs
  5504                                  rmap_exit:
  5505 00001C75 C3                      		retn
  5506                                  
  5507                                  ; =============== S U B	R O U T	I N E =======================================
  5508                                  
  5509                                  ; 17/10/2022
  5510                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5511                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5512                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5513                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5514                                  ;**************************************************
  5515                                  ; getboot - get the boot sector for a hard disk
  5516                                  ;
  5517                                  ; Reads the boot sector from a specified drive into
  5518                                  ; a buffer at the top of memory.
  5519                                  ;
  5520                                  ; dl = int13 drive number to read boot sector for
  5521                                  ;**************************************************
  5522                                  
  5523                                  ; 17/10/2022
  5524                                  bootbias equ 200h
  5525                                  
  5526                                  getboot:	; proc near
  5527                                  		
  5528                                  		; 15/12/2023
  5529                                  		; ds = cs
  5530                                  		
  5531                                  		; 08/04/2018
  5532                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5533                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5534                                  		; 02/10/2022 - Retro DOS v4.0
  5535                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5536                                  
  5537                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  5538                                  		; 15/12/2023
  5539 00001C76 A1[CD16]                		mov	ax, [init_bootseg]
  5540 00001C79 8EC0                    		mov	es, ax
  5541                                  
  5542                                  		; 17/10/2022
  5543 00001C7B BB0002                  		mov	bx, bootbias ; 200h
  5544                                  		;mov	bx, 200h	; bootbias
  5545                                  					; load BX, ES:BX is where sector goes
  5546 00001C7E B80102                  		mov	ax, 201h
  5547 00001C81 30F6                    		xor	dh, dh
  5548 00001C83 B90100                  		mov	cx, 1
  5549 00001C86 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5550                                  					; AL = number of sectors to read, CH = track, CL = sector
  5551                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5552                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5553 00001C88 7209                    		jb	short erret
  5554                                  		; 17/10/2022
  5555 00001C8A 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5556                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5557                                  					; Dave Litton magic word?
  5558 00001C91 7401                    		jz	short norm_ret	; yes
  5559                                  erret:
  5560 00001C93 F9                      		stc
  5561                                  norm_ret:
  5562 00001C94 C3                      		retn
  5563                                  
  5564                                  ; =============== S U B	R O U T	I N E =======================================
  5565                                  
  5566                                  ; 28/12/2018 - Retro DOS v4.0 
  5567                                  
  5568                                  ;***************************************************************************
  5569                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5570                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5571                                  ;   our own logical sectors start. we also read in our boot sector to
  5572                                  ;   determine version number
  5573                                  ;
  5574                                  ;   inputs:	dl is rom drive number (80...)
  5575                                  ;		bh is partition number (0....) 
  5576                                  ;		ds:di points to bds
  5577                                  ;   outputs:	carry clear -> bpb is filled in
  5578                                  ;		carry set   -> bpb is left uninitialized due to error
  5579                                  ;	trashes (at least) si, cx
  5580                                  ;	MUST PRESERVE ES:!!!!
  5581                                  ;***************************************************************************
  5582                                  
  5583                                  sethard:	; proc near		
  5584 00001C95 57                      		push	di
  5585 00001C96 53                      		push	bx
  5586 00001C97 1E                      		push	ds
  5587 00001C98 06                      		push	es
  5588 00001C99 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5589 00001C9C 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5590 00001C9F 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5591                                  					; fnon_removable
  5592 00001CA3 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5593                                  					; ffHardFile
  5594 00001CA7 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5595 00001CAC 88FE                    		mov	dh, bh		; partition number
  5596 00001CAE 52                      		push	dx
  5597 00001CAF B408                    		mov	ah, 8
  5598 00001CB1 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5599                                  					; DL = drive number
  5600                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5601                                  					; DL = number of consecutive drives
  5602                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5603 00001CB3 FEC6                    		inc	dh
  5604 00001CB5 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5605 00001CB8 5A                      		pop	dx
  5606 00001CB9 7263                    		jb	short setret	; error	if no hard disk
  5607 00001CBB 80E13F                  		and	cl, 3Fh
  5608 00001CBE 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5609 00001CC1 52                      		push	dx		; save partition number
  5610 00001CC2 E8B1FF                  		call	getboot
  5611 00001CC5 5A                      		pop	dx		; restore partition number
  5612 00001CC6 7256                    		jb	short setret
  5613 00001CC8 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5614                                  
  5615                                  ; The first 'active' partition is 00, the second is 01....
  5616                                  ;   then the remainder of the 'primary' but non-active partitions
  5617                                  
  5618                                  act_part:				
  5619 00001CCB 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5620 00001CD0 7418                    		jz	short no_act	; no
  5621 00001CD2 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5622 00001CD6 740C                    		jz	short got_good_act
  5623 00001CD8 26803F04                		cmp	byte [es:bx], 4
  5624 00001CDC 7406                    		jz	short got_good_act
  5625 00001CDE 26803F06                		cmp	byte [es:bx], 6
  5626 00001CE2 7506                    		jnz	short no_act
  5627                                  got_good_act:				
  5628 00001CE4 08F6                    		or	dh, dh		; is this our target partition #?
  5629 00001CE6 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5630 00001CE8 FECE                    		dec	dh		; count	down
  5631                                  no_act:					
  5632 00001CEA 83C310                  		add	bx, 16
  5633 00001CED 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5634                                  					; last entry done?
  5635 00001CF1 75D8                    		jnz	short act_part	; no, process next entry
  5636 00001CF3 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5637                                  					; restore original value of bx
  5638                                  
  5639                                  ; Now scan the non-active partitions
  5640                                  
  5641                                  get_primary:				
  5642 00001CF6 26F647FC80              		test	byte [es:bx-4], 80h
  5643 00001CFB 7518                    		jnz	short not_prim	; we've already scanned
  5644                                  					; the ACTIVE ones
  5645 00001CFD 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5646 00001D01 740C                    		jz	short got_prim
  5647 00001D03 26803F04                		cmp	byte [es:bx], 4
  5648 00001D07 7406                    		jz	short got_prim
  5649 00001D09 26803F06                		cmp	byte [es:bx], 6
  5650 00001D0D 7506                    		jnz	short not_prim
  5651                                  got_prim:				
  5652 00001D0F 08F6                    		or	dh, dh		; is this our target partition?
  5653 00001D11 740F                    		jz	short set2
  5654 00001D13 FECE                    		dec	dh
  5655                                  not_prim:				
  5656 00001D15 83C310                  		add	bx, 16
  5657 00001D18 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5658 00001D1C 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5659                                  setret:					
  5660 00001D1E F9                      		stc			; error	return
  5661 00001D1F E9DC02                  		jmp	ret_hard_err
  5662                                  
  5663                                  ; ---------------------------------------------------------------------------
  5664                                  
  5665                                  ;  until we get the real logical boot record and get the bpb,
  5666                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5667                                  ;  for the convenience of the computation.
  5668                                  ;
  5669                                  ;  at the end of this procedure, if a bpb information is gotten from
  5670                                  ;  the valid boot record, then we are going to use those bpb information
  5671                                  ;  without change.
  5672                                  ;
  5673                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5674                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5675                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5676                                  
  5677                                  set2:					
  5678 00001D22 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5679                                  			; save the rom bios drive number we are handling now.
  5680 00001D27 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5681 00001D2B 268B5706                		mov	dx, [es:bx+6]
  5682                                  
  5683                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5684                                  ; sectors should be allowed	
  5685                                  
  5686 00001D2F 83E801                  		sub	ax, 1
  5687 00001D32 83DA00                  		sbb	dx, 0
  5688 00001D35 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5689 00001D39 2613570A                		adc	dx, [es:bx+10]
  5690 00001D3D 7305                    		jnb	short okdrive
  5691 00001D3F 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5692                                  okdrive:				
  5693 00001D44 268B4704                		mov	ax, [es:bx+4]
  5694 00001D48 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5695                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5696 00001D4B 268B4706                		mov	ax, [es:bx+6]
  5697 00001D4F 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5698 00001D52 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5699 00001D56 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5700 00001D5A 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5701 00001D5D 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5702                                  					; bpb->maxsec =	p->partitionlength
  5703 00001D60 83FA00                  		cmp	dx, 0
  5704 00001D63 7705                    		ja	short okdrive_1
  5705 00001D65 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5706 00001D68 72B4                    		jb	short setret	; return -1;
  5707                                  okdrive_1:				
  5708 00001D6A 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5709 00001D6D 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5710 00001D70 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5711                                  					; usually equal	to the # of sec/trk.
  5712 00001D72 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5713 00001D75 50                      		push	ax
  5714 00001D76 89D0                    		mov	ax, dx
  5715 00001D78 31D2                    		xor	dx, dx
  5716 00001D7A F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5717                                  					; (track)temp_h:ax + (sector)dx
  5718                                  		; 17/10/2022
  5719 00001D7C 2EA3[2905]              		mov	[cs:temp_h], ax
  5720 00001D80 58                      		pop	ax
  5721 00001D81 F7F3                    		div	bx
  5722 00001D83 88D1                    		mov	cl, dl
  5723 00001D85 FEC1                    		inc	cl
  5724 00001D87 31DB                    		xor	bx, bx
  5725 00001D89 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5726 00001D8C 50                      		push	ax
  5727 00001D8D 31D2                    		xor	dx, dx
  5728 00001D8F 2EA1[2905]              		mov	ax, [cs:temp_h]
  5729 00001D93 F7F3                    		div	bx
  5730 00001D95 2EA3[2905]              		mov	[cs:temp_h], ax
  5731 00001D99 58                      		pop	ax
  5732 00001D9A F7F3                    		div	bx		;  dl is head, ax is cylinder
  5733 00001D9C 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5734 00001DA2 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5735 00001DA4 3D0004                  		cmp	ax, 1024
  5736 00001DA7 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5737                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5738                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5739                                  			; ('ja' must be 'jnb')
  5740                                  okdrive_2:
  5741                                   		; 28/07/2019
  5742                                  ; dl is head.
  5743                                  ; ax is cylinder
  5744                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5745                                  
  5746                                  ;*** for mini disks ***
  5747                                  
  5748 00001DA9 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5749                                  					; check	for mini disk
  5750 00001DAD 7503                    		jnz	short oknotmini	; not mini disk.
  5751 00001DAF 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5752                                  					; set the physical track number
  5753                                  oknotmini:
  5754                                  ;*** end of added logic for mini disk
  5755                                  				
  5756 00001DB2 D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5757 00001DB4 D0CC                    		ror	ah, 1		; two bits of upper byte
  5758 00001DB6 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5759 00001DB9 08E1                    		or	cl, ah		; move two bits	to correct spot
  5760 00001DBB 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5761                                  					; cl is	sector + 2 high	bits of	cylinder
  5762 00001DBD 88D6                    		mov	dh, dl		; dh is	head
  5763 00001DBF 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5764                                  
  5765                                  ; cl is sector + 2 high bits of cylinder
  5766                                  ; ch is low 8 bits of cylinder
  5767                                  ; dh is head
  5768                                  ; dl is drive
  5769                                  
  5770                                  ; for convenience, we are going to read the logical boot sector
  5771                                  ; into cs:disksector area.
  5772                                  
  5773                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5774                                  ; is to be read in is cs:disksector.
  5775                                  
  5776 00001DC4 0E                      		push	cs
  5777 00001DC5 07                      		pop	es
  5778 00001DC6 BB[4E01]                		mov	bx, disksector	; for convenience,
  5779                                  					; we are going to read the logical boot	sector
  5780                                  					; into cs:disksector area.
  5781 00001DC9 B80102                  		mov	ax, 201h
  5782 00001DCC CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5783                                  					; AL = number of sectors to read, CH = track, CL = sector
  5784                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5785                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5786                                  
  5787                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5788                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5789                                  ; media if we recognize the version number.
  5790                                  
  5791 00001DCE BB[4E01]                		mov	bx, disksector
  5792 00001DD1 53                      		push	bx
  5793 00001DD2 50                      		push	ax
  5794 00001DD3 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5795 00001DD7 740D                    		jz	short check_1_ok ; yes
  5796 00001DD9 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5797 00001DDD 7529                    		jnz	short invalid_boot_record ; no
  5798 00001DDF 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5799 00001DE4 7522                    		jnz	short invalid_boot_record
  5800                                  check_1_ok:				
  5801                                  		; 14/08/2023
  5802 00001DE6 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5803                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5804                                  					; point	to the bpb in the boot record
  5805 00001DE9 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5806                                  					; get the mediadescriptor byte
  5807 00001DED 24F0                    		and	al, 0F0h	; mask off low nibble
  5808 00001DEF 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5809 00001DF1 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5810 00001DF3 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5811 00001DF8 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5812                                  
  5813                                  check2_ok:				; yes, mediadescriptor ok.
  5814 00001DFA 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5815                                  					; the sectorspercluster	is
  5816                                  					; a power of 2
  5817                                  					;
  5818                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5819                                  					; get the sectorspercluster
  5820 00001DFE 08C0                    		or	al, al		; is it	zero?
  5821 00001E00 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5822                                  
  5823                                  ck_power_of_two:			
  5824 00001E02 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5825 00001E04 73FC                    		jnb	short ck_power_of_two
  5826 00001E06 7405                    		jz	short valid_boot_record
  5827                                  
  5828                                  invalid_boot_record:			
  5829 00001E08 58                      		pop	ax
  5830 00001E09 5B                      		pop	bx
  5831 00001E0A E93301                  		jmp	unknown		; jump to invalid boot record
  5832                                  					; unformatted or illegal media.
  5833                                  ; ---------------------------------------------------------------------------
  5834                                  
  5835                                  valid_boot_record:			
  5836 00001E0D 58                      		pop	ax
  5837 00001E0E 5B                      		pop	bx
  5838                                  
  5839                                  ; Signature found. Now check version.
  5840                                  
  5841 00001E0F 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5842                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5843 00001E15 750F                    		jnz	short try5
  5844 00001E17 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5845                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5846 00001E1C 7508                    		jnz	short try5
  5847 00001E1E EB2F                    		jmp	short copybpb
  5848                                  ; ---------------------------------------------------------------------------
  5849                                  
  5850                                  setret_brdg:				
  5851 00001E20 E9FBFE                  		jmp	setret
  5852                                  ; ---------------------------------------------------------------------------
  5853                                  
  5854                                  unknown3_0_j:				
  5855 00001E23 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5856                                  					; although, content might be bad.
  5857                                  ; ---------------------------------------------------------------------------
  5858                                  
  5859                                  try5:					
  5860 00001E26 E8DA01                  		call	cover_fdisk_bug
  5861                                  
  5862                                  ; see if it is an os2 signature
  5863                                  
  5864 00001E29 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5865                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5866 00001E2F 750D                    		jnz	short no_os2
  5867 00001E31 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5868 00001E35 2C31                    		sub	al, '1'
  5869                                  		;sub	al, 31h		; '1'
  5870 00001E37 24FE                    		and	al, 0FEh
  5871 00001E39 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5872 00001E3B E90201                  		jmp	unknown
  5873                                  ; ---------------------------------------------------------------------------
  5874                                  
  5875                                  ; no os2 signature, this is to check for real dos versions
  5876                                  
  5877                                  no_os2:					
  5878 00001E3E 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5879                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5880 00001E44 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5881                                  					; do not trust it, but still legal.
  5882 00001E46 7507                    		jnz	short copybpb	; honor	os2 boot record
  5883                                  					; or dos 4.0 version
  5884 00001E48 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5885                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5886 00001E4D 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5887                                  copybpb:
  5888                                  
  5889                                  ; 03/10/2022
  5890                                  
  5891                                  ; we have a valid boot sector. use the bpb in it to build the
  5892                                  ; bpb in bios. it is assumed that only
  5893                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5894                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5895                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5896                                  ; need to be set (all other values in already). fbigfat is also set.
  5897                                  
  5898                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5899                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5900                                  ; and system id according to the boot record.
  5901                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5902                                  
  5903                                  		; 10/12/2022
  5904                                  		; (number of FATs optimization)
  5905 00001E4F BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5906                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5907 00001E52 2E8A4C05                		mov	cl, [cs:si+05h]
  5908                                  		
  5909 00001E56 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5910                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5911                                  					; [disksector+EXT_BOOT.SIG]
  5912                                  					; EXT_BOOT_SIGNATURE
  5913 00001E5B 754E                    		jnz	short copybpb_fat ; conventional fat system
  5914                                  
  5915                                  		; 03/10/2022
  5916                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5917                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5918                                  		;	     number of FATs must be 2 ; =*?=
  5919                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5920                                  		;
  5921                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5922                                  
  5923                                  		; 10/12/2022
  5924                                  		;cmp	byte [cs:disksector+10h], 0
  5925                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5926                                  		;jnz	short copybpb_fat ; a fat system.
  5927 00001E5D 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5928 00001E5F 754A                    		jnz	short copybpb_fat ; a fat system.
  5929                                  
  5930                                  ; non fat based	media.
  5931                                  
  5932 00001E61 57                      		push	di
  5933 00001E62 1E                      		push	ds
  5934 00001E63 1E                      		push	ds
  5935 00001E64 07                      		pop	es
  5936 00001E65 0E                      		push	cs
  5937 00001E66 1F                      		pop	ds
  5938                                  
  5939                                  		; 10/12/2022
  5940                                  		; (number of FATs optimization)
  5941                                  		; SI = disksector+11
  5942                                  		; 17/10/2022
  5943                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5944                                  		;mov	si, disksector+11
  5945 00001E67 83C706                  		add	di, 6		; add di,BDS.BPB
  5946                                  
  5947                                  ; just for completeness, we'll make sure that total_sectors and
  5948                                  ; big_total_sectors aren't both zero. I've seen examples of
  5949                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5950                                  ; got that way. If it occurs, then use the values from the
  5951                                  ; partition table.
  5952                                  
  5953                                  		; 18/12/2022
  5954 00001E6A 29C9                    		sub	cx, cx 
  5955                                  
  5956                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5957                                  		;jnz	short already_nonz 
  5958                                  		;			; how about big_total?
  5959                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5960                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5961                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5962                                  		;jnz	short already_nonz
  5963                                  
  5964                                  		; 18/12/2022
  5965 00001E6C 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5966 00001E70 7521                    		jnz	short already_nonz
  5967                                  					     ; how about big_total?
  5968 00001E72 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5969 00001E76 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5970 00001E78 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5971 00001E7C 7515                    		jnz	short already_nonz
  5972                                  
  5973                                  ; now let's copy the values from the partition table (now in the BDS)
  5974                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5975                                  
  5976 00001E7E 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5977 00001E81 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5978 00001E85 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5979 00001E88 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5980 00001E8C 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5981 00001E8F 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5982                                  
  5983                                  already_nonz:	
  5984                                  		; 18/12/2022
  5985                                  		; cx = 0
  5986 00001E93 B119                    		mov	cl, 25		
  5987                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5988 00001E95 F3A4                    		rep movsb
  5989 00001E97 1F                      		pop	ds
  5990 00001E98 5F                      		pop	di
  5991 00001E99 06                      		push	es
  5992 00001E9A 1E                      		push	ds
  5993 00001E9B 07                      		pop	es
  5994 00001E9C 0E                      		push	cs
  5995 00001E9D 1F                      		pop	ds
  5996                                  		; 13/08/2023
  5997 00001E9E BD[3507]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5998                                  		; 18/12/2022
  5999                                  		;mov	bp, mov_media_ids
  6000                                  		;;mov	bp, 751h	; mov_media_ids
  6001                                  					; at 2C7h:751h = 70h:2CC1h
  6002                                  					; set volume id, systemid, serial.
  6003 00001EA1 0E                      		push	cs		; simulate far call
  6004 00001EA2 E8B2F8                  		call	call_bios_code
  6005 00001EA5 06                      		push	es
  6006 00001EA6 1F                      		pop	ds
  6007 00001EA7 07                      		pop	es
  6008 00001EA8 E94B01                  		jmp	goodret
  6009                                  ; ---------------------------------------------------------------------------
  6010                                  
  6011                                  ; ****** cas ---
  6012                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6013                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6014                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6015                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6016                                  ; from the boot sector into the DPB anyway, we've just been using
  6017                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6018                                  ; we'll go ahead and copy it into the DPB, except in the case
  6019                                  ; that it equals zero, in which case we just use the values in
  6020                                  ; the DPB from the partition table.
  6021                                  
  6022                                  ; 17/10/2022
  6023                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6024                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6025                                  ; 09/12/2022
  6026                                  MOVMEDIAIDS equ mov_media_ids
  6027                                  CLEARIDS equ clear_ids
  6028                                  ; 11/09/2023
  6029                                  CLEARIDS_X equ clear_ids_x
  6030                                  
  6031                                  copybpb_fat:
  6032                                  		; 10/12/2022
  6033                                  		; (number of FATs optimization)
  6034                                  		; SI = disksector+11				
  6035                                  		; 17/10/2022
  6036                                  		;mov	si, disksector+11
  6037                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6038                                  					; cs:si	-> bpb in boot
  6039 00001EAB 31D2                    		xor	dx, dx
  6040 00001EAD 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6041                                  					; get totsec from boot sec
  6042 00001EB1 09C0                    		or	ax, ax
  6043 00001EB3 7516                    		jnz	short copy_totsec ; if non zero, use that
  6044 00001EB5 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6045                                  					; get the big version
  6046                                  					; (32 bit total	sectors)
  6047 00001EB9 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6048                                  		; 10/12/2022
  6049                                  		; (number of FATs optimization)
  6050                                  		; CL = number of FATs (2 or 1) 
  6051 00001EBD 89D3                    		mov	bx, dx		; see if it is a big zero
  6052 00001EBF 09C3                    		or	bx, ax
  6053 00001EC1 7508                    		jnz	short copy_totsec
  6054                                  			; screw it. it	was bogus.
  6055 00001EC3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6056 00001EC6 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6057 00001EC9 EB06                    		jmp	short fat_big_small
  6058                                  
  6059                                  		;mov	cx, dx
  6060                                  		;or	cx, ax		; see if it is a big zero
  6061                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6062                                  copy_totsec:				
  6063 00001ECB 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6064                                  					; make DPB match boot sec
  6065 00001ECE 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6066                                  
  6067                                  		; 10/12/2022
  6068                                  ;totsec_already_set:			
  6069                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6070                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6071                                  
  6072                                  ; determine fat entry size.
  6073                                  
  6074                                  fat_big_small:
  6075                                  
  6076                                  ;at this moment dx;ax = total sector number
  6077                                  
  6078                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6079                                  ;from the BPB on the disk
  6080                                  				
  6081 00001ED1 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6082                                  					; get #reserved_sectors	from BPB
  6083 00001ED5 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6084                                  					; update BDS field
  6085 00001ED8 29D8                    		sub	ax, bx
  6086 00001EDA 83DA00                  		sbb	dx, 0		; update the count
  6087 00001EDD 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6088                                  					; bx = sectors/fat
  6089 00001EE1 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6090                                  					; set in bds bpb
  6091                                  		; 10/12/2022
  6092                                  		; (number of FATs optimization)
  6093                                  		; CL = number of FATs (2 or 1) 
  6094                                  		;dec	cl ; *
  6095                                  		; 18/12/2022
  6096 00001EE4 49                      		dec	cx ; *
  6097 00001EE5 D3E3                    		shl	bx, cl			
  6098                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6099                                  		
  6100 00001EE7 29D8                    		sub	ax, bx		; sub #	fat sectors
  6101 00001EE9 83DA00                  		sbb	dx, 0
  6102 00001EEC 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6103                                  					; # root entries
  6104 00001EF0 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6105                                  					; set in bds bpb
  6106 00001EF3 B104                    		mov	cl, 4
  6107 00001EF5 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6108 00001EF7 29D8                    		sub	ax, bx		; sub #	dir sectors
  6109 00001EF9 83DA00                  		sbb	dx, 0		;
  6110                                  					; dx:ax	now contains the
  6111                                  					; # of data sectors
  6112 00001EFC 31C9                    		xor	cx, cx ; *
  6113 00001EFE 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6114                                  					; sectors per cluster
  6115 00001F02 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6116                                  					; set in bios bpb
  6117 00001F05 50                      		push	ax
  6118 00001F06 89D0                    		mov	ax, dx
  6119 00001F08 31D2                    		xor	dx, dx
  6120 00001F0A F7F1                    		div	cx		; cx = sectors per cluster
  6121 00001F0C 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6122                                  					; # clusters.
  6123 00001F10 58                      		pop	ax
  6124 00001F11 F7F1                    		div	cx
  6125 00001F13 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6126 00001F19 771C                    		ja	short toobig_ret ; too big cluster number
  6127 00001F1B 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6128                                  					; is this 16-bit fat?
  6129 00001F1E 7205                    		jb	short copymediaid ; no,	small fat
  6130                                  		; 17/10/2022
  6131 00001F20 800E[CC16]40            		or	byte [fbigfat], 40h
  6132                                  		;or	ds:fbigfat, 40h	; fbig
  6133                                  					; 16 bit fat
  6134                                  copymediaid:				
  6135 00001F25 06                      		push	es
  6136 00001F26 1E                      		push	ds
  6137 00001F27 07                      		pop	es
  6138 00001F28 0E                      		push	cs
  6139 00001F29 1F                      		pop	ds
  6140                                  		; 17/10/2022
  6141 00001F2A BD[3507]                		mov	bp, MOVMEDIAIDS
  6142                                  		;mov	bp, 751h	; mov_media_ids
  6143                                  					; at 2C7h:751h = 70h:2CC1h
  6144                                  					; copy filesys_id, volume label
  6145 00001F2D 0E                      		push	cs		; simulate far call
  6146 00001F2E E826F8                  		call	call_bios_code
  6147 00001F31 06                      		push	es
  6148 00001F32 1F                      		pop	ds
  6149 00001F33 07                      		pop	es
  6150 00001F34 E9A100                  		jmp	massage_bpb	; now final check for bpb info
  6151                                  					; and return.
  6152                                  ; ---------------------------------------------------------------------------
  6153                                  
  6154                                  toobig_ret:				
  6155 00001F37 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6156 00001F3D E9B600                  		jmp	goodret		; still	drive letter is	assigned
  6157                                  					; but useless. to big for
  6158                                  					; current pc dos fat file system
  6159                                  ; ---------------------------------------------------------------------------
  6160                                  
  6161                                  unknown:	
  6162                                  		; 12/12/2022
  6163 00001F40 804D2402                		or	byte [di+24h], 02h			
  6164                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6165                                  					; unformatted_media
  6166                                  					; Set unformatted media	flag.
  6167                                  
  6168                                  ; the boot signature may not be	recognizable,
  6169                                  ; but we should	try and	read it	anyway.
  6170                                  
  6171                                  unknown3_0:				
  6172 00001F44 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6173                                  					; [di+BDS.totalsecs32+2]
  6174 00001F47 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6175 00001F4A BE[FC16]                		mov	si, disktable2
  6176                                  
  6177                                  scan:					
  6178 00001F4D 2E3B14                  		cmp	dx, [cs:si]
  6179 00001F50 720D                    		jb	short gotparm
  6180 00001F52 7706                    		ja	short scan_next
  6181 00001F54 2E3B4402                		cmp	ax, [cs:si+2]
  6182 00001F58 7605                    		jbe	short gotparm
  6183                                  
  6184                                  scan_next:				
  6185 00001F5A 83C60A                  		add	si, 10		; 5*2
  6186 00001F5D EBEE                    		jmp	short scan	; covers upto 512 mb media
  6187                                  ; ---------------------------------------------------------------------------
  6188                                  
  6189                                  gotparm:				
  6190 00001F5F 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6191                                  		;or	ds:fbigfat, cl
  6192                                  		; 17/10/2022
  6193 00001F62 080E[CC16]              		or	[fbigfat], cl
  6194 00001F66 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6195                                  					; cl = log base	2 of ch
  6196 00001F6A 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6197                                  
  6198                                  ; now calculate size of fat table
  6199                                  
  6200 00001F6E 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6201                                  					; save number of (root)	dir entries
  6202 00001F71 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6203 00001F74 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6204 00001F77 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6205                                  					; save sectors per cluster
  6206                                  		; 17/10/2022
  6207 00001F7A F606[CC16]40            		test	byte [fbigfat], 40h
  6208                                  		;test	ds:fbigfat, 40h	; fbig
  6209                                  					; if (fbigfat)
  6210 00001F7F 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6211                                  
  6212                                  ; we don't need to change "small fat" logic since it is gauranteed
  6213                                  ; that double word total sector will not use 12 bit fat (unless
  6214                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6215                                  ; so in this case we assume dx = 0 !!
  6216                                  
  6217 00001F81 31DB                    		xor	bx, bx		; (12 bit fat)
  6218 00001F83 88EB                    		mov	bl, ch
  6219 00001F85 4B                      		dec	bx
  6220 00001F86 01C3                    		add	bx, ax		; dx=0
  6221 00001F88 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6222 00001F8A 43                      		inc	bx		; BDS.secperclus
  6223 00001F8B 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6224 00001F8E 89DE                    		mov	si, bx
  6225 00001F90 D1EB                    		shr	bx, 1
  6226 00001F92 01F3                    		add	bx, si
  6227 00001F94 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6228 00001F98 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6229 00001F9A 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6230                                  					; save number of fat sectors
  6231 00001F9D EB39                    		jmp	short massage_bpb
  6232                                  ; ---------------------------------------------------------------------------
  6233                                  
  6234                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6235                                  
  6236                                  dobig:					
  6237 00001F9F B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6238 00001FA1 52                      		push	dx		; save total sectors (high)
  6239 00001FA2 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6240 00001FA5 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6241 00001FA7 29D0                    		sub	ax, dx
  6242 00001FA9 5A                      		pop	dx
  6243 00001FAA 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6244 00001FAD 83E801                  		sub	ax, 1
  6245 00001FB0 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6246                                  					; total	secs - reserved	secs - root dir	secs
  6247 00001FB3 B302                    		mov	bl, 2
  6248 00001FB5 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6249                                  					; bx = 256 * BDS.secperclus + 2
  6250                                  
  6251                                  ; I don't understand why to add bx here!!!
  6252                                  
  6253                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6254                                  		; 27/09/2022
  6255                                  		; (Microsoft FAT32 File	System Specification,
  6256                                  		; December 2000, Page 21)
  6257                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6258                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6259                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6260                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6261                                  		
  6262 00001FB8 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6263 00001FBA 83D200                  		adc	dx, 0
  6264 00001FBD 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6265 00001FC0 83DA00                  		sbb	dx, 0
  6266                                  
  6267                                  ; assuming dx in the table will never be bigger than bx.
  6268                                  
  6269 00001FC3 F7F3                    		div	bx		; BDS.fatsecs =
  6270                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6271 00001FC5 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6272                                  					; number of fat	sectors
  6273                                  
  6274                                  ; now, set the default filesys_id, volume label, serial number
  6275                                  
  6276                                  		;;mov	bl, ds:fbigfat
  6277                                  		; 11/09/2023
  6278                                  		; 17/10/2022
  6279                                  		;mov	bl, [fbigfat]
  6280                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6281                                  
  6282 00001FC8 1E                      		push	ds
  6283 00001FC9 1E                      		push	ds
  6284 00001FCA 07                      		pop	es
  6285 00001FCB 0E                      		push	cs
  6286 00001FCC 1F                      		pop	ds
  6287                                  		; 11/09/2023
  6288 00001FCD A0[CC16]                		mov	al, [fbigfat]
  6289 00001FD0 BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6290                                  		; 17/10/2022
  6291                                  		;mov	bp, CLEARIDS
  6292                                  		;;mov	bp, 5D9h	; clear_ids
  6293                                  					; at 2C7h:5D9h = 70h:2B49h
  6294 00001FD3 0E                      		push	cs
  6295 00001FD4 E880F7                  		call	call_bios_code
  6296 00001FD7 1F                      		pop	ds
  6297                                  
  6298                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6299                                  ; set according to the partition information. we are going to
  6300                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6301                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6302                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6303                                  ; we don't do this for the bpb information from the boot record. we
  6304                                  ; are not going to change the bpb information from the boot record.
  6305                                  
  6306                                  massage_bpb:
  6307                                  		; 11/09/2023
  6308                                  		;; 12/12/2022
  6309                                  		;mov	bl, [fbigfat]
  6310                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6311                                  		;			; set size of fat on media
  6312                                  		
  6313 00001FD8 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6314 00001FDB 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6315 00001FDE 83FA00                  		cmp	dx, 0		; double word total sectors?
  6316                                  		;ja	short goodret	; don't have to change it.
  6317                                  		; 12/12/2022
  6318 00001FE1 771B                    		ja	short short goodret2
  6319                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6320                                  		;ja	short goodret	; don't have to change it.
  6321                                  		; 12/12/2022
  6322 00001FE3 395519                  		cmp	[di+19h], dx ; 0
  6323 00001FE6 7716                    		ja	short goodret2
  6324 00001FE8 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6325                                  		;jb	short goodret
  6326                                  		; 12/12/2022
  6327 00001FEB 7209                    		jc	short goodret
  6328 00001FED 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6329 00001FF0 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6330                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6331                                  		; 12/12/2022
  6332 00001FF3 89551B                  		mov	[di+1Bh], dx ; 0 
  6333                                  goodret:				
  6334                                  		;mov	bl, ds:fbigfat
  6335                                  		; 11/09/2023
  6336                                  		; 12/12/2022
  6337                                  		; 17/10/2022
  6338 00001FF6 8A1E[CC16]              		mov	bl, [fbigfat]
  6339 00001FFA 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6340                                  		;			; set size of fat on media
  6341 00001FFD F8                      		clc
  6342                                  ret_hard_err:
  6343                                  		; 12/12/2022
  6344                                  goodret2:					
  6345 00001FFE 07                      		pop	es
  6346 00001FFF 1F                      		pop	ds
  6347 00002000 5B                      		pop	bx
  6348 00002001 5F                      		pop	di
  6349 00002002 C3                      		retn
  6350                                  
  6351                                  ; =============== S U B	R O U T	I N E =======================================
  6352                                  
  6353                                  ; 15/10/2022
  6354                                  
  6355                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6356                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6357                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6358                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6359                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6360                                  
  6361                                  		; 17/10/2022
  6362                                  cover_fdisk_bug:	
  6363 00002003 50                      		push	ax
  6364                                  		; 18/12/2023
  6365                                  		;push	dx
  6366 00002004 56                      		push	si
  6367 00002005 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6368                                  					; [disksector+EXT_BOOT.SIG],
  6369                                  					; EXT_BOOT_SIGNATURE
  6370 0000200B 742E                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6371 0000200D 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6372 00002013 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6373 00002015 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6374 0000201A 751F                    		jnz	short cfb_retit
  6375                                  cfb_chk_BPB_TOTALSECTORS:
  6376                                  		; 17/10/2022		
  6377 0000201C BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6378                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6379                                  		; 18/12/2023
  6380 0000201F 2E8B4408                		mov	ax, [cs:si+8]
  6381 00002023 09C0                    		or	ax, ax ; 0 ?
  6382                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6383                                  					; just to make sure.
  6384 00002025 7414                    		jz	short cfb_retit
  6385                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6386 00002027 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6387 0000202B 730E                    		jnb	short cfb_retit
  6388 0000202D 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6389 0000202F 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6390                                  					; then decrease	BPB_TOTALSECTORS by 1
  6391 00002033 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6392 00002037 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6393                                  cfb_retit:				
  6394 0000203B 5E                      		pop	si
  6395                                  		;pop	dx ; 18/12/2023	
  6396 0000203C 58                      		pop	ax
  6397 0000203D C3                      		retn
  6398                                  
  6399                                  ; ---------------------------------------------------------------------------
  6400                                  
  6401 0000203E 0200                    word2		dw 2			
  6402 00002040 0300                    word3		dw 3			
  6403 00002042 0002                    word512		dw 512			
  6404                                  
  6405                                  ; =============== S U B	R O U T	I N E =======================================
  6406                                  
  6407                                  ; 15/10/2022
  6408                                  
  6409                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6410                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6411                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6412                                  ; as the bpb on the drive.
  6413                                  ;
  6414                                  ; no attempt is made to preserve registers since we are going to jump to
  6415                                  ; sysinit straight after this routine.
  6416                                  
  6417                                  setdrvparms:
  6418 00002044 31DB                    		xor	bx, bx
  6419                                  		; 18/10/2022
  6420 00002046 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6421                                  _next_bds:				
  6422 0000204A 06                      		push	es
  6423 0000204B 57                      		push	di
  6424 0000204C 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6425 00002050 80FB05                  		cmp	bl, 5		; ffHardFile
  6426 00002053 753E                    		jnz	short nothardff
  6427 00002055 31D2                    		xor	dx, dx
  6428 00002057 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6429 0000205B 09C0                    		or	ax, ax
  6430 0000205D 7508                    		jnz	short get_ccyl
  6431 0000205F 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6432 00002063 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6433                                  
  6434                                  get_ccyl:				
  6435 00002067 52                      		push	dx
  6436 00002068 50                      		push	ax
  6437 00002069 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6438 0000206D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6439                                  					; assume sectors per cyl. < 64k.
  6440 00002071 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6441 00002073 58                      		pop	ax
  6442 00002074 5A                      		pop	dx		; dx:ax	= total	sectors
  6443 00002075 50                      		push	ax
  6444 00002076 89D0                    		mov	ax, dx
  6445 00002078 31D2                    		xor	dx, dx
  6446 0000207A F7F1                    		div	cx
  6447 0000207C 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6448 00002080 58                      		pop	ax
  6449 00002081 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6450 00002083 09D2                    		or	dx, dx
  6451 00002085 7401                    		jz	short no_cyl_rnd ; came out even
  6452 00002087 40                      		inc	ax		; round	up
  6453                                  
  6454                                  no_cyl_rnd:				
  6455 00002088 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6456 0000208C 06                      		push	es
  6457 0000208D 1F                      		pop	ds
  6458 0000208E 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6459                                  					; ds:si	-> bpb for hard	file
  6460 00002091 EB55                    		jmp	short set_recbpb
  6461                                  ; ---------------------------------------------------------------------------
  6462                                  
  6463                                  nothardff:				
  6464 00002093 0E                      		push	cs
  6465 00002094 1F                      		pop	ds
  6466                                  
  6467                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6468                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6469                                  
  6470                                  		; 10/12/2022
  6471                                  		; ds = cs
  6472                                  		; 17/10/2022 (ds=cs)
  6473 00002095 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6474                                  		;cmp	byte [cs:fakefloppydrv], 1
  6475 0000209A 7454                    		jz	short go_to_next_bds
  6476 0000209C 80FB07                  		cmp	bl, 7		; ffother
  6477                                  					; special case "other" type of medium
  6478 0000209F 753D                    		jnz	short not_process_other
  6479                                  process_other:
  6480 000020A1 31D2                    		xor	dx, dx
  6481 000020A3 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6482 000020A6 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6483 000020A9 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6484 000020AC 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6485                                  					; have the total number of sectors
  6486 000020AF 48                      		dec	ax
  6487 000020B0 B201                    		mov	dl, 1
  6488                                  _again:					
  6489 000020B2 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6490 000020B5 7206                    		jb	short _@@
  6491 000020B7 D1E8                    		shr	ax, 1
  6492 000020B9 D0E2                    		shl	dl, 1
  6493 000020BB EBF5                    		jmp	short _again
  6494                                  ; ---------------------------------------------------------------------------
  6495                                  
  6496                                  _@@:					
  6497 000020BD 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6498 000020C0 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6499 000020C2 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6500                                  __@@:					
  6501 000020C7 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6502                                  
  6503                                  ; logic to get the sectors/fat area.
  6504                                  ; fat entry is assumed to be 1.5 bytes!!!
  6505                                  
  6506                                  		; 10/12/2022
  6507                                  		; ds = cs
  6508                                  		; 17/10/2022 (ds=cs)
  6509 000020CA F726[4020]              		mul	word [word3]
  6510 000020CE F736[3E20]              		div	word [word2]
  6511 000020D2 31D2                    		xor	dx, dx
  6512 000020D4 F736[4220]              		div	word [word512]
  6513                                  		;
  6514                                  		; 10/12/2022
  6515                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6516                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6517                                  		;xor	dx, dx
  6518                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6519                                  		;
  6520 000020D8 40                      		inc	ax		; + 1
  6521                                  no_round_up:
  6522 000020D9 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6523 000020DC EB12                    		jmp	short go_to_next_bds
  6524                                  ; ---------------------------------------------------------------------------
  6525                                  
  6526                                  not_process_other:			
  6527 000020DE D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6528                                  		;mov	si, bpbtable
  6529                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6530                                  		; 09/12/2022
  6531                                  		;mov	si, BPBTABLE
  6532                                  		;mov	si, [bx+si]	; get address of bpb
  6533                                  		; 10/12/2022
  6534                                  		;mov	si, [BPBTABLE+bx]
  6535                                  		; 13/12/2022
  6536                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6537                                  		; 14/08/2023
  6538                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6539                                  							; correct offset
  6540 000020E0 8BB7[FE73]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6541                                  
  6542                                  		; 28/08/2023
  6543 000020E4 81C6F03C                		add	si, SYSINIT_OFFSET
  6544                                  set_recbpb:				
  6545 000020E8 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6546                                  					; es:di	-> recbpb
  6547 000020EB B91900                  		mov	cx, 25		; bpbx.size
  6548 000020EE F3A4                    		rep movsb		; move (size bpbx) bytes	
  6549                                  go_to_next_bds:				
  6550 000020F0 5F                      		pop	di
  6551 000020F1 07                      		pop	es		; restore pointer to bds
  6552 000020F2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6553 000020F5 83FFFF                  		cmp	di, 0FFFFh	; -1
  6554 000020F8 740A                    		jz	short got_end_of_bds_chain
  6555 000020FA E94DFF                  		jmp	_next_bds
  6556                                  ; ---------------------------------------------------------------------------
  6557                                  
  6558                                  		; 18/12/2022
  6559                                  ;got_end_of_bds_chain:			
  6560                                  		;retn
  6561                                  
  6562                                  ; =============== S U B	R O U T	I N E =======================================
  6563                                  
  6564                                  ; 15/10/2022
  6565                                  ; 30/12/2018 - Retro DOS v4.0
  6566                                  
  6567                                  ; al = device number
  6568                                  
  6569                                  print_init:	
  6570 000020FD 98                      		cbw
  6571 000020FE 89C2                    		mov	dx, ax
  6572 00002100 B401                    		mov	ah, 1
  6573 00002102 CD17                    		int	17h		; PRINTER - INITIALIZE
  6574                                  					; DX = printer port (0-3)
  6575                                  					; Return: AH = status
  6576                                  got_end_of_bds_chain:	; 18/12/2022
  6577 00002104 C3                      		retn
  6578                                  
  6579                                  ; =============== S U B	R O U T	I N E =======================================
  6580                                  
  6581                                  ; al = device number
  6582                                  
  6583                                  aux_init:
  6584 00002105 98                      		cbw
  6585 00002106 89C2                    		mov	dx, ax
  6586                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6587                                  					; 2400,n,1,8 (msequ.inc)
  6588                                  		;mov	ah, 0
  6589                                  		; 10/12/2022
  6590 00002108 B8A300                  		mov	ax, 00A3h
  6591 0000210B CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6592                                  					; 	AL = initializing parameters,
  6593                                  					;	DX = port number (0-3)
  6594                                  					; Return: AH = RS-232 status code bits,
  6595                                  					;	  AL = modem status bits
  6596 0000210D C3                      		retn
  6597                                  
  6598                                  ; =============== S U B	R O U T	I N E =======================================
  6599                                  
  6600                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6601                                  ; 30/12/2018 - Retro DOS v4.0
  6602                                  ; 03/06/2018 - Retro DOS v3.0
  6603                                  ; (19/03/2018 - Retro DOS v2.0)
  6604                                  
  6605                                  ; domini **********************************************************************
  6606                                  ;
  6607                                  ;mini disk initialization routine. called right after dohard
  6608                                  ;modified for >2 hardfile support
  6609                                  ;
  6610                                  ; **cs=ds=es=datagrp
  6611                                  ;
  6612                                  ; **domini will search for every extended partition in the system, and
  6613                                  ;   initialize it.
  6614                                  ;
  6615                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6616                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6617                                  ;   address of bdsm table.
  6618                                  ;
  6619                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6620                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6621                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6622                                  ;
  6623                                  ; **domini will use the same routine in sethard routine after label set2 to
  6624                                  ;   save coding.
  6625                                  ;
  6626                                  ; **drvmax determined in dohard routine will be used for the next
  6627                                  ;   available logical mini disk drive number.
  6628                                  ;
  6629                                  ; input: drvmax, dskdrvs
  6630                                  ;
  6631                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6632                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6633                                  ;
  6634                                  ; called modules:
  6635                                  ;		  getboot
  6636                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6637                                  ;
  6638                                  ;		  setmini (new, it will use set2 routine)
  6639                                  ;
  6640                                  ; variables used: end_of_bdsm
  6641                                  ;		  rom_minidisk_num
  6642                                  ;		  mini_hdlim, mini_seclim
  6643                                  ;		  BDS_STRUC, start_bds
  6644                                  ;
  6645                                  ;******************************************************************************
  6646                                  
  6647                                  		; 19/10/2022
  6648                                  domini:	
  6649 0000210E 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6650                                  		; 10/12/2022
  6651 00002112 20F6                    		and	dh, dh
  6652                                  		;cmp	dh, 0
  6653 00002114 7431                    		jz	short dominiret	; no hard file?	then exit.
  6654 00002116 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6655                                  domini_loop:				
  6656 00002118 52                      		push	dx
  6657 00002119 8816[4217]              		mov	[rom_minidisk_num], dl
  6658 0000211D B408                    		mov	ah, 8
  6659 0000211F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6660                                  					; DL = drive number
  6661                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6662                                  					; DL = number of consecutive drives
  6663                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6664 00002121 FEC6                    		inc	dh
  6665 00002123 31C0                    		xor	ax, ax
  6666 00002125 88F0                    		mov	al, dh
  6667 00002127 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6668 0000212A 80E13F                  		and	cl, 3Fh
  6669 0000212D 88C8                    		mov	al, cl
  6670 0000212F A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6671 00002132 06                      		push	es
  6672 00002133 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6673 00002137 E83CFB                  		call	getboot		; read master boot record into
  6674                                  					; initbootsegment:bootbias
  6675 0000213A 7203                    		jc	short domininext
  6676 0000213C E80900                  		call	find_mini_partition
  6677                                  domininext:				
  6678 0000213F 07                      		pop	es
  6679 00002140 5A                      		pop	dx
  6680 00002141 FEC2                    		inc	dl		; next hard file
  6681 00002143 FECE                    		dec	dh
  6682 00002145 75D1                    		jnz	short domini_loop
  6683                                  dominiret:				
  6684 00002147 C3                      		retn
  6685                                  
  6686                                  ; =============== S U B	R O U T	I N E =======================================
  6687                                  
  6688                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6689                                  ; 30/12/2018 - Retro DOS v4.0
  6690                                  
  6691                                  ;find_mini_partition tries to find every extended partition on a disk.
  6692                                  ;at entry:	di -> bdsm entry
  6693                                  ;		es:bx -> 07c0:bootbias - master boot record
  6694                                  ;		rom_minidisk_num - rom drive number
  6695                                  ;		drvmax - logical drive number
  6696                                  ;		mini_hdlim, mini_seclim
  6697                                  ;
  6698                                  ;called routine: setmini which uses set2 (in sethard routine)
  6699                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6700                                  
  6701                                  
  6702                                  find_mini_partition:	
  6703 00002148 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6704                                  fmpnext:				
  6705 0000214C 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6706 00002150 740A                    		jz	short fmpgot
  6707 00002152 83C310                  		add	bx, 16
  6708 00002155 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6709 00002159 75F1                    		jnz	short fmpnext
  6710                                  		;jmp	short fmpnextfound ; extended partition	not found
  6711                                  		; 18/12/2022
  6712                                  fmpnextfound:
  6713 0000215B C3                      		retn
  6714                                  
  6715                                  ;		; 30/07/2019 - Retro DOS v3.2
  6716                                  ;		jb	short fmpnext
  6717                                  ;fmpret:
  6718                                  ;		retn	; 29/05/2019
  6719                                  
  6720                                  ; ---------------------------------------------------------------------------
  6721                                  
  6722                                  		; 19/10/2022
  6723                                  fmpgot:					; found my partition.
  6724 0000215C E8A100                  		call	dmax_check	; check	for drvmax already 26
  6725 0000215F 73FA                    		jnb	short fmpnextfound ; done if too many
  6726 00002161 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free bds
  6727 00002165 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6728                                  		; 10/12/2022
  6729 0000216A 804D2301                		or	byte [di+23h], 1
  6730                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6731                                  					; fNon_Removable
  6732 0000216E C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6733                                  					; ffHardFile
  6734 00002172 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6735 00002177 A1[4817]                		mov	ax, [mini_hdlim]
  6736 0000217A 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6737 0000217D A1[4A17]                		mov	ax, [mini_seclim]
  6738 00002180 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6739 00002183 A0[4217]                		mov	al, [rom_minidisk_num]
  6740 00002186 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6741                                  					; set physical number
  6742 00002189 A0[7500]                		mov	al, [drvmax]
  6743 0000218C 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6744                                  					; set logical number
  6745 0000218F 26837F0A00              		cmp	word [es:bx+10], 0
  6746 00002194 7707                    		ja	short fmpgot_cont
  6747 00002196 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6748                                  					; only lower word is meaningful.
  6749 0000219B 72BE                    		jb	short fmpnextfound
  6750                                  					; should be bigger than 64 sectors at least
  6751                                  fmpgot_cont:				
  6752 0000219D 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6753 000021A0 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6754 000021A4 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6755 000021A7 D0C6                    		rol	dh, 1
  6756 000021A9 D0C6                    		rol	dh, 1
  6757 000021AB 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6758 000021AF 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6759                                  					; set hidden trks
  6760 000021B2 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6761 000021B6 268A7701                		mov	dh, [es:bx+1]	; head
  6762 000021BA 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6763 000021BE BB0002                  		mov	bx, 200h	; bootbias
  6764 000021C1 B80102                  		mov	ax, 201h
  6765 000021C4 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6766                                  					; AL = number of sectors to read, CH = track, CL = sector
  6767                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6768                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6769 000021C6 7293                    		jc	short fmpnextfound
  6770 000021C8 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6771 000021CB 06                      		push	es
  6772 000021CC E80900                  		call	setmini		; install a mini disk.
  6773                                  					; bx value saved.
  6774 000021CF 07                      		pop	es
  6775 000021D0 7203                    		jc	short fmpnextchain
  6776 000021D2 E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6777                                  fmpnextchain:				
  6778 000021D5 E974FF                  		jmp	fmpnext		; let's find out
  6779                                  					; if we	have any chained partition
  6780                                  ; ---------------------------------------------------------------------------
  6781                                  
  6782                                  		; 18/12/2022
  6783                                  ;fmpnextfound:
  6784                                  		;retn
  6785                                  
  6786                                  ; =============== S U B	R O U T	I N E =======================================
  6787                                  
  6788                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6789                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6790                                  
  6791                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6792                                  	
  6793 000021D8 57                      		push	di
  6794 000021D9 53                      		push	bx
  6795 000021DA 1E                      		push	ds
  6796 000021DB 06                      		push	es
  6797                                  setmini_1:				
  6798 000021DC 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6799 000021E0 741B                    		jz	short setmini_2
  6800 000021E2 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6801 000021E6 7415                    		jz	short setmini_2
  6802 000021E8 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6803 000021EC 740F                    		jz	short setmini_2
  6804 000021EE 83C310                  		add	bx, 16
  6805 000021F1 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6806 000021F5 75E5                    		jnz	short setmini_1
  6807 000021F7 F9                      		stc
  6808 000021F8 07                      		pop	es
  6809 000021F9 1F                      		pop	ds
  6810 000021FA 5B                      		pop	bx
  6811 000021FB 5F                      		pop	di
  6812 000021FC C3                      		retn
  6813                                  
  6814                                  ; ---------------------------------------------------------------------------
  6815                                  setmini_2:				
  6816 000021FD E922FB                  		jmp	set2		; branch into middle of sethard
  6817                                  
  6818                                  ; =============== S U B	R O U T	I N E =======================================
  6819                                  
  6820                                  ; 15/10/2022
  6821                                  ; 28/12/2018 - Retro DOS v4.0
  6822                                  ;
  6823                                  ; dmax_check --- call this when we want to install a new drive.
  6824                                  ;		it checks for drvmax < 26 to see if there is
  6825                                  ;		a drive letter left.
  6826                                  ;
  6827                                  ;	drvmax < 26 : carry SET!
  6828                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6829                                  ;			trash ax
  6830                                  
  6831                                  dmax_check:	
  6832 00002200 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6833 00002205 720D                    		jb	short dmax_ok	; return with carry if okay
  6834 00002207 06                      		push	es
  6835                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6836 00002208 B83F04                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6837 0000220B 8EC0                    		mov	es, ax
  6838                                  		; 18/10/2022
  6839 0000220D 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6840                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6841                                  					; set message flag
  6842                                  					; [SYSINIT+toomanydrivesflag]
  6843 00002213 07                      		pop	es
  6844                                  
  6845                                  		;;push	es
  6846                                  		;;mov	ax,SYSINIT_SEG
  6847                                  		;;mov	es,ax
  6848                                  		;;mov	byte [es:toomanydrivesflag],1
  6849                                  					; set message flag
  6850                                  		;;pop	es
  6851                                  		;
  6852                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6853                                  dmax_ok:				
  6854 00002214 C3                      		retn
  6855                                  
  6856                                  ; =============== S U B	R O U T	I N E =======================================
  6857                                  
  6858                                  ; 18/10/2022
  6859                                  ; 15/10/2022
  6860                                  ; 28/12/2018 - Retro DOS v4.0						
  6861                                  ;								 
  6862                                  ;	link next bds (at ds:di) into the chain. assume that the
  6863                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6864                                  ;	  dskdrv_table, and end_of_bdss.	
  6865                                  
  6866                                  xinstall_bds:		
  6867 00002215 56                      		push	si
  6868 00002216 53                      		push	bx
  6869 00002217 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6870                                  xinstall_bds_1:				
  6871 0000221B 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6872 0000221E 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6873                                  		;mov	si, [si+BDS.link]
  6874 00002220 8B34                    		mov	si, [si]	; chain	through	list
  6875 00002222 EBF7                    		jmp	short xinstall_bds_1
  6876                                  ; ---------------------------------------------------------------------------
  6877                                  
  6878                                  xinstall_bds_2:				
  6879                                  		;mov	[si+BDS.link], di
  6880 00002224 893C                    		mov	[si], di
  6881                                  		;mov	[si+BDS.link+2], ds
  6882 00002226 8C5C02                  		mov	[si+2], ds
  6883                                  		;mov	word [di+BDS.link], -1
  6884 00002229 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6885                                  		;mov	[di+BDS.link+2], ds
  6886 0000222D 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6887                                  		; 20/03/2019 - Retro DOS v4.0
  6888                                  		;lea	bx, [di+BDS.BPB]
  6889 00002230 8D5D06                  		lea	bx, [di+6]
  6890 00002233 8B36[4417]              		mov	si, [last_dskdrv_table]
  6891 00002237 891C                    		mov	[si], bx
  6892 00002239 8306[4417]02            		add	word [last_dskdrv_table], 2
  6893 0000223E FE06[7500]              		inc	byte [drvmax]
  6894 00002242 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6895 00002247 5B                      		pop	bx
  6896 00002248 5E                      		pop	si
  6897 00002249 C3                      		retn
  6898                                  
  6899                                  ; =============== S U B	R O U T	I N E =======================================
  6900                                  
  6901                                  ; 17/10/2022
  6902                                  ; 15/10/2022
  6903                                  ; 28/12/2018 - Retro DOS v4.0
  6904                                  ; 03/06/2018 - Retro DOS v3.0
  6905                                  
  6906                                  		; 19/12/2023
  6907                                  cmos_clock_read:	
  6908 0000224A 50                      		push	ax
  6909 0000224B 51                      		push	cx
  6910 0000224C 52                      		push	dx
  6911 0000224D 55                      		push	bp
  6912 0000224E 31ED                    		xor	bp, bp
  6913                                  loop_clock:
  6914 00002250 31C9                    		xor	cx, cx
  6915 00002252 31D2                    		xor	dx, dx
  6916 00002254 B402                    		mov	ah, 2
  6917 00002256 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6918                                  					; Return: CH = hours in	BCD
  6919                                  					; CL = minutes in BCD
  6920                                  					; DH = seconds in BCD
  6921 00002258 83F900                  		cmp	cx, 0
  6922 0000225B 7512                    		jnz	short clock_present
  6923 0000225D 83FA00                  		cmp	dx, 0
  6924 00002260 750D                    		jnz	short clock_present
  6925 00002262 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6926 00002265 741B                    		jz	short no_readdate ; was	at zero	setting.
  6927 00002267 45                      		inc	bp		; only perform delay once.
  6928 00002268 B90040                  		mov	cx, 4000h	; 16384
  6929                                  delay:
  6930 0000226B E2FE                    		loop	delay
  6931 0000226D EBE1                    		jmp	short loop_clock
  6932                                  ; ---------------------------------------------------------------------------
  6933                                  
  6934                                  clock_present:
  6935                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6936                                  		; 19/12/2023
  6937                                  		; ds = cs
  6938 0000226F C606[F304]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  6939                                  		
  6940 00002274 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6941                                  					; possibly destroyed by	cp dos and
  6942                                  					; post routine did not restore that.
  6943 00002277 56                      		push	si
  6944 00002278 E8AEF2                  		call	read_real_date	; read real-time clock for date
  6945 0000227B FA                      		cli
  6946                                  		;mov	ds:daycnt, si	; set system date
  6947 0000227C 8936[F004]              		mov	[daycnt], si
  6948 00002280 FB                      		sti
  6949 00002281 5E                      		pop	si
  6950                                  
  6951                                  no_readdate:
  6952 00002282 5D                      		pop	bp
  6953 00002283 5A                      		pop	dx
  6954 00002284 59                      		pop	cx
  6955 00002285 58                      		pop	ax
  6956                                  cmosck9:	; 19/12/2023
  6957 00002286 C3                      		retn
  6958                                  
  6959                                  ; ---------------------------------------------------------------------------
  6960                                  
  6961                                  ; the following code is written by jack gulley in engineering group.
  6962                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6963                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6964                                  ; the cmos clock rate are still slow which slow down disk operations
  6965                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6966                                  ; to fix this problem at the request of cp dos.
  6967                                  ;
  6968                                  ; the program is modified to be run on msinit. equates are defined
  6969                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6970                                  ;
  6971                                  ;  the following code cmosck is used to insure that the cmos has not
  6972                                  ;	had its rate controls left in an invalid state on older at's.
  6973                                  ;
  6974                                  ;	it checks for an at model byte "fc" with a submodel type of
  6975                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6976                                  ;	bits in case post has not done it. this initialization routine
  6977                                  ;	is only needed once when dos loads. it should be run as soon
  6978                                  ;	as possible to prevent slow diskette access.
  6979                                  ;
  6980                                  ;	this code exposes one to dos clearing cmos setup done by a
  6981                                  ;	resident program that hides and re-boots the system.
  6982                                  
  6983                                  cmosck:					; check and reset rtc rate bits	
  6984                                  
  6985                                  ;model byte and submodel byte were already determined in msinit.
  6986                                  
  6987                                  	; 16/06/2018 - Retro DOS v3.0
  6988                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6989                                  			
  6990                                  		; 19/12/2023
  6991                                  		; ds = cs
  6992                                  		;push	ax ; not necessary ; 19/12/2023
  6993                                  		;
  6994 00002287 803E[3E06]FC            		cmp	byte [model_byte], 0FCh
  6995                                  		;cmp	byte [cs:model_byte], 0FCh
  6996 0000228C 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  6997 0000228E 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  6998                                  		;cmp	byte [cs:secondary_model_byte], 6
  6999                                  					; Is it 06 for the industral AT ?
  7000 00002294 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  7001 00002296 803E[3F06]04            		cmp	byte [secondary_model_byte], 4
  7002                                  		;cmp	byte [cs:secondary_model_byte], 4
  7003                                  					; Is it 00, 01, 02, or 03 ?
  7004 0000229B 73E9                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  7005                                  					; Also,Secondary_model_byte = 0
  7006                                  					;   when AH=0C0h, int 15h failed.
  7007                                  					;	RESET THE CMOS PERIODIC RATE
  7008                                  					;  Model=FC submodel=00,01,02,03 or 06
  7009                                  cmosck4:				
  7010 0000229D B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7011                                  					; NMI disabled on return
  7012 0000229F B426                    		mov	ah, 26h		; 00100110b
  7013                                  					; Set divider &	rate selection
  7014 000022A1 E80B00                  		call	cmos_write
  7015 000022A4 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7016                                  					; NMI disabled on return
  7017 000022A6 E82000                  		call	cmos_read
  7018 000022A9 2407                    		and	al, 7		; 00000111b
  7019                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7020 000022AB 88C4                    		mov	ah, al
  7021 000022AD B00B                    		mov	al, 0Bh		; cmos_reg_b
  7022                                  					; NMI enabled on return
  7023                                  		; 19/12/2023
  7024                                  		;call	cmos_write
  7025                                  ;cmosck9:
  7026                                  		;pop	ax ; 19/12/2023
  7027                                  		;retn
  7028                                  
  7029                                  		; 19/12/2023
  7030                                  		;jmp	short cmos_write
  7031                                  
  7032                                  ; =============== S U B	R O U T	I N E =======================================
  7033                                  
  7034                                  ;--- cmos_write ----------------------------------------------------------------
  7035                                  ;		write byte to cmos system clock configuration table	       :
  7036                                  ;									       :
  7037                                  ; input: (al)=	cmos table address to be written to			       :
  7038                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7039                                  ;		bits 6-0 = address of table location to write		       :
  7040                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7041                                  ;									       :
  7042                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7043                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7044                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7045                                  ;		the cmos address register is pointed to a default value and    :
  7046                                  ;		the interrupt flag restored to the entry state on return.      :
  7047                                  ;		only the cmos location and the nmi state is changed.	       :
  7048                                  ;-------------------------------------------------------------------------------
  7049                                  
  7050                                  cmos_write:				; write (ah) to location (al)	
  7051 000022AF 9C                      		pushf			; write (ah) to location (al)
  7052 000022B0 50                      		push	ax		; save work register values
  7053 000022B1 FA                      		cli
  7054 000022B2 50                      		push	ax		; save user nmi	state
  7055 000022B3 0C80                    		or	al, 80h		; disable nmi for us
  7056 000022B5 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7057                                  					; RTC Seconds
  7058 000022B7 90                      		nop
  7059 000022B8 88E0                    		mov	al, ah
  7060 000022BA E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7061 000022BC 58                      		pop	ax		; get user nmi
  7062 000022BD 2480                    		and	al, 80h
  7063 000022BF 0C0F                    		or	al, 0Fh
  7064 000022C1 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7065                                  					; RTC Seconds
  7066 000022C3 90                      		nop
  7067 000022C4 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7068 000022C6 58                      		pop	ax		; restore work registers
  7069                                  
  7070                                  		; 19/12/2023
  7071                                  		;push	cs		; *place code segment in stack and
  7072                                  		;call	cmos_popf	; *handle popf for b- level 80286
  7073                                  		;retn
  7074 000022C7 EB1A                    		jmp	short cmos_rw_popf
  7075                                  
  7076                                  ; =============== S U B	R O U T	I N E =======================================
  7077                                  
  7078                                  ;--- CMOS_READ -----------------------------------------------------------------
  7079                                  ;		read byte from cmos system clock configuration table	       :
  7080                                  ;									       :
  7081                                  ; input: (al)=	cmos table address to be read				       :
  7082                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7083                                  ;		bits 6-0 = address of table location to read		       :
  7084                                  ;									       :
  7085                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7086                                  ;		on then nmi left disabled. during the cmos read both nmi and   :
  7087                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7088                                  ;		the cmos address register is pointed to a default value and    :
  7089                                  ;		the interrupt flag restored to the entry state on return.      :
  7090                                  ;		only the (al) register and the nmi state is changed.	       :
  7091                                  ;-------------------------------------------------------------------------------
  7092                                  
  7093                                  cmos_read:				; read location (al) into (al)	
  7094 000022C9 9C                      		pushf
  7095 000022CA FA                      		cli
  7096 000022CB 53                      		push	bx
  7097 000022CC 50                      		push	ax		; AL = cmos table address to be	read
  7098 000022CD 0C80                    		or	al, 80h
  7099 000022CF E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7100                                  					; RTC Seconds
  7101 000022D1 90                      		nop			; (undocumented	delay needed)
  7102 000022D2 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7103 000022D4 89C3                    		mov	bx, ax
  7104 000022D6 58                      		pop	ax
  7105 000022D7 2480                    		and	al, 80h
  7106 000022D9 0C0F                    		or	al, 0Fh
  7107 000022DB E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7108                                  					; RTC Seconds
  7109 000022DD 90                      		nop
  7110 000022DE E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7111 000022E0 89D8                    		mov	ax, bx
  7112 000022E2 5B                      		pop	bx
  7113                                  		
  7114                                  		; 19/12/2023
  7115                                  cmos_rw_popf:
  7116 000022E3 0E                      		push	cs		; *place code segment in stack and
  7117 000022E4 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7118 000022E7 C3                      		retn			; return with flags restored
  7119                                  
  7120                                  ; ---------------------------------------------------------------------------
  7121                                  
  7122                                  cmos_popf:				
  7123 000022E8 CF                      		iret			; popf for level b- parts
  7124                                  					; return far and restore flags
  7125                                  
  7126                                  ; 21/12/2022
  7127                                  ; ---------------------------------------------------------------------------
  7128                                  ; ---------------------------------------------------------------------------
  7129                                  %if 0
  7130                                  
  7131                                  ; ---------------------------------------------------------------------------
  7132                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7133                                  ; ---------------------------------------------------------------------------
  7134                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7135                                  ; ---------------------------------------------------------------------------
  7136                                  
  7137                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7138                                  ;
  7139                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7140                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7141                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7142                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7143                                  
  7144                                  ; =============== S U B	R O U T	I N E =======================================
  7145                                  
  7146                                  ; GetClus, read in a cluster at a specified address
  7147                                  ;
  7148                                  ;  bx = cluster to read
  7149                                  ;  cx = sectors per cluster
  7150                                  ;  es:di = load location
  7151                                  
  7152                                  ; 17/10/2022
  7153                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7154                                  ; 09/12/2022
  7155                                  DISKRD equ diskrd
  7156                                  
  7157                                  		; 17/10/2022
  7158                                  getclus:
  7159                                  		; 13/12/2023
  7160                                  		; ds = cs
  7161                                  
  7162                                  		push	cx
  7163                                  		push	di
  7164                                  		;mov	[cs:doscnt], cx
  7165                                  		mov	[doscnt], cx ; 13/12/2023
  7166                                  		mov	ax, bx
  7167                                  		dec	ax
  7168                                  		dec	ax
  7169                                  		mul	cx		; convert to logical sector
  7170                                  					; dx:ax	= matching logical sector number
  7171                                  					;	  starting from the data sector
  7172                                  		;add	ax, [cs:bios_l]
  7173                                  		;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7174                                  		; 13/12/2023
  7175                                  		add	ax, [bios_l]
  7176                                  		adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
  7177                                  unpack:
  7178                                  		push	ds ; ds = cs ; 13/12/2023
  7179                                  		push	dx ; * ; 13/12/2023
  7180                                  		push	ax
  7181                                  		push	bx
  7182                                  		;mov	si, [cs:fatloc]
  7183                                  		mov	si, [fatloc] ; 13/12/2023
  7184                                  		mov	ds, si
  7185                                  		mov	si, bx		; next cluster
  7186                                  		test	byte [cs:fbigfat], 40h	; fbig
  7187                                  					; 16 bit fat?
  7188                                  		jnz	short unpack16	; yes
  7189                                  		shr	si, 1		; 12 bit fat. si=si/2
  7190                                  					; si = clus + clus/2
  7191                                  		add	si, bx		;
  7192                                  					; (si =	byte offset of the cluster in the FAT)
  7193                                  		;push	dx ; 13/12/2023
  7194                                  		xor	dx, dx
  7195                                  		; 12/12/2023
  7196                                  		; ds = FAT buffer segment
  7197                                  		call	get_fat_sector
  7198                                  		;pop	dx ; 12/12/2023
  7199                                  
  7200                                  		mov	ax, [bx]	; save it into ax
  7201                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7202                                  		; 25/06/2023
  7203                                  		;mov	al, [bx]	; splitted fat
  7204                                  
  7205                                  		; 13/12/2023
  7206                                  		;mov	[cs:temp_cluster], al
  7207                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
  7208                                  
  7209                                  		inc	si		; (next	byte)
  7210                                  
  7211                                  		;push	dx ; 13/12/2023
  7212                                  		xor	dx, dx
  7213                                  		call	get_fat_sector
  7214                                  		;pop	dx ; 13/12/2023
  7215                                  
  7216                                  		;mov	al, ds:0
  7217                                  		; 13/12/2023
  7218                                  		; ds = FAT buffer segment
  7219                                  		;mov	al, [0] ; 19/10/2022
  7220                                  		;mov	[cs:temp_cluster+1], al
  7221                                  		;mov	ax, [cs:temp_cluster]
  7222                                  		; 13/12/2023
  7223                                  		;mov	al, [cs:temp_cluster]
  7224                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
  7225                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
  7226                                  even_odd:
  7227                                  		pop	bx		; restore old fat entry	value
  7228                                  		push	bx		; save it right	away.
  7229                                  		shr	bx, 1		; was it even or odd?
  7230                                  		jnb	short havclus	; it was even.
  7231                                  		shr	ax, 1		; odd. massage fat value and keep
  7232                                  					; the highest 12 bits.
  7233                                  		shr	ax, 1
  7234                                  		shr	ax, 1
  7235                                  		shr	ax, 1
  7236                                  havclus:
  7237                                  		mov	bx, ax		; now bx = new fat entry.
  7238                                  		and	bx, 0FFFh	; keep low 12 bits.
  7239                                  		jmp	short unpackx
  7240                                  ; ---------------------------------------------------------------------------
  7241                                  
  7242                                  unpack16:
  7243                                  		;push	dx	; 13/12/2023	
  7244                                  		xor	dx, dx ; 0
  7245                                  		shl	si, 1		; extend to 32 bit offset
  7246                                  		;adc	dx, 0
  7247                                  		; 13/12/2023
  7248                                  		rcl	dx, 1
  7249                                  
  7250                                  		; 13/12/2023
  7251                                  		; ds = FAT buffer segment
  7252                                  		call	get_fat_sector
  7253                                  		;pop	dx	; 13/12/2023
  7254                                  		mov	bx, [bx]	;
  7255                                  					; bx = new fat entry.
  7256                                  unpackx:
  7257                                  		pop	si		; restore old bx value into si
  7258                                  		pop	ax		; restore logical sector (low)
  7259                                  		pop	dx ; * ; 13/12/2023
  7260                                  		pop	ds
  7261                                  		; 13/12/2023
  7262                                  		; (this is a fast kernel loading method by the MSDOS programmer)
  7263                                  		; ((consequtive clusters --> consequtive sectors))
  7264                                  		; ds = cs
  7265                                  		sub	si, bx
  7266                                  		cmp	si, -1		; one apart? (consequtive?)
  7267                                  					; (current = previous+1)
  7268                                  		jnz	short getcl2	; no, read [doscnt] sectors 
  7269                                  		;add	[cs:doscnt], cx
  7270                                  		add	[doscnt], cx ; 13/12/2023 ; add to read count
  7271                                  		jmp	short unpack
  7272                                  ; ---------------------------------------------------------------------------
  7273                                  
  7274                                  getcl2:
  7275                                  		push	bx
  7276                                  		push	dx		; sector to read (high)
  7277                                  		push	ax		; sector to read (low)
  7278                                  
  7279                                  		; 13/12/2023
  7280                                  		; ds = cs
  7281                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
  7282                                  		;mov	cx, [cs:doscnt]
  7283                                  		mov	ax, [drvfat]	; get drive and	fat spec
  7284                                  		mov	cx, [doscnt]
  7285                                  
  7286                                  		pop	dx		; sector to read for diskrd (low)
  7287                                  		;pop	word [cs:start_sec_h]
  7288                                  		; 13/12/2023
  7289                                  		pop	word [start_sec_h]
  7290                                  					; sector to read for diskrd (high)
  7291                                  		; 13/12/2023
  7292                                  		; ds = cs
  7293                                  		;push	ds
  7294                                  		;push	cs
  7295                                  		;pop	ds
  7296                                  
  7297                                  		push	cs		; simulate far call
  7298                                  		; 17/10/2022
  7299                                  		mov	bp, DISKRD	; 8E5h
  7300                                  		;mov	bp, 8E5h	; offset diskrd
  7301                                  					; 2C7h:8E5h = 70h:2E55h
  7302                                  		call	call_bios_code	; read the clusters
  7303                                  		
  7304                                  		;pop	ds
  7305                                  		; 13/12/2023
  7306                                  		; ds = cs
  7307                                  		pop	bx
  7308                                  		pop	di
  7309                                  
  7310                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
  7311                                  		; 13/12/2023
  7312                                  		mov	ax, [doscnt]
  7313                                  		xchg	ah, al		; multiply by 256
  7314                                  		shl	ax, 1		; times	2 equal	512
  7315                                  		add	di, ax		; update load location
  7316                                  		pop	cx		; restore sectors/cluster
  7317                                  		retn
  7318                                  
  7319                                  ; =============== S U B	R O U T	I N E =======================================
  7320                                  
  7321                                  
  7322                                  ;function: find and read the corresponding fat sector into ds:0
  7323                                  ;
  7324                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7325                                  ;     ds - fatloc segment
  7326                                  ;     cs:drvfat - logical drive number, fat id
  7327                                  ;     cs:md_sectorsize
  7328                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7329                                  ;
  7330                                  ;out). corresponding fat sector read in.
  7331                                  ;      bx = offset value from fatlog segment.
  7332                                  ;      other registera saved.
  7333                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7334                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7335                                  ;      should save this byte, and read the next fat sector to get the rest
  7336                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7337                                  
  7338                                  		; 17/10/2022
  7339                                  get_fat_sector:
  7340                                  		; 13/12/2023
  7341                                  		; ds = fat buffer segment
  7342                                  
  7343                                  		; 13/12/2023
  7344                                  		;push	ax ; (not necessary)
  7345                                  		push	cx ; read count (sectors per cluster)
  7346                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
  7347                                  		push	si ; FAT offset value (from fat entry 0)
  7348                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
  7349                                  		push	ds ; FAT buffer segment
  7350                                  
  7351                                  		; 13/12/2023
  7352                                  		push	cs
  7353                                  		pop	ds
  7354                                  
  7355                                  		mov	ax, si
  7356                                  		;;mov	cx, [cs:md_sectorsize] ; 512
  7357                                  		; 13/12/2023
  7358                                  		;mov	cx, [md_sectorsize] ; 512
  7359                                  		;div	cx		; ax = sector number, dx = offset
  7360                                  		; 13/12/2023
  7361                                  		;nop
  7362                                  
  7363                                  		; 13/12/2023
  7364                                  		div	word [md_sectorsize] ; 512
  7365                                  
  7366                                  		; ax = FAT sector (sequence/index) number
  7367                                  		; dx = cluster number offset
  7368                                  
  7369                                  		; Get rid of the assumption that
  7370                                  		; there	is only	one reserved sector
  7371                                  
  7372                                  		; 13/12/2023 ; *
  7373                                  		;push	es ; *
  7374                                  		;push	ds ; *
  7375                                  		;push	di ; *
  7376                                  		push	ax
  7377                                  		;push	cs ; *
  7378                                  		;pop	ds ; *
  7379                                  
  7380                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
  7381                                  		; 13/12/2023
  7382                                  		mov	ax, [drvfat]	; get drive # and FAT id 
  7383                                  		mov	bp, SETDRIVE
  7384                                  		;;mov	bp, 4D7h	; setdrive
  7385                                  					; at 2C7h:4D7h = 70h:2A47h
  7386                                  		push	cs		; simulate far call
  7387                                  		call	call_bios_code	; get bds for drive
  7388                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7389                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7390                                  					; add #reserved_sectors
  7391                                  		; 13/12/2023
  7392                                  		;pop	di ; *
  7393                                  		;pop	ds ; *
  7394                                  		;pop	es ; *
  7395                                  
  7396                                  		; 13/12/2023
  7397                                  		; ds = cs
  7398                                  		cmp	ax, [last_fat_sec_num]
  7399                                  		;cmp	ax, [cs:last_fat_sec_num]
  7400                                  		jz	short gfs_split_chk ; don't need to read it again.
  7401                                  		mov	[last_fat_sec_num], ax
  7402                                  		;mov	[cs:last_fat_sec_num], ax
  7403                                  					; sector number
  7404                                  					; (in the partition, without hidden sectors)
  7405                                  		; 13/12/2023
  7406                                  		pop	es ; FAT buffer segment (DS on top of the stack)
  7407                                  		push	es ; (put it on top of the stack again)
  7408                                  
  7409                                  		push	dx ; cluster number offset
  7410                                  
  7411                                  		; 13/12/2023
  7412                                  		xor	cx, cx
  7413                                  		mov	[start_sec_h], cx ;0 
  7414                                  		;mov	word [cs:start_sec_h], 0 
  7415                                  					; prepare to read the fat sector
  7416                                  					; start_sec_h is always	0 for fat sector.
  7417                                  		mov	dx, ax
  7418                                  		; 13/12/2023
  7419                                  		inc	cx ; cx = 1
  7420                                  		;mov	cx, 1		; 1 sector read
  7421                                  		;mov	ax, [cs:drvfat]
  7422                                  		mov	ax, [drvfat]
  7423                                  		;push	ds
  7424                                  		;pop	es
  7425                                  
  7426                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
  7427                                  		
  7428                                  		; 13/12/2023
  7429                                  		;push	ds
  7430                                  		;push	cs
  7431                                  		;pop	ds
  7432                                  		
  7433                                  		push	cs		; simulate far call
  7434                                  		mov	bp, DISKRD	; 8E5h
  7435                                  		;mov	bp, 8E5h	; offset diskrd
  7436                                  					; 2C7h:8E5h = 70h:2E55h
  7437                                  		call	call_bios_code
  7438                                  
  7439                                  		; 13/12/2023
  7440                                  		;pop	ds
  7441                                  		; ds = cs = biosdata segment
  7442                                  
  7443                                  		pop	dx ; cluster number offset 
  7444                                  
  7445                                  gfs_split_chk:
  7446                                  		; 13/12/2023
  7447                                  		;mov	cx, [cs:md_sectorsize] ; 512
  7448                                  		mov	cx, [md_sectorsize]
  7449                                  ;gfs_split_chk:
  7450                                  		dec	cx		; 511
  7451                                  		cmp	dx, cx		; if offset points to the
  7452                                  					; last byte of this sector,
  7453                                  					; then splitted	entry.
  7454                                  		mov	bx, dx		; set bx to dx
  7455                                  		
  7456                                  		; 13/12/2023
  7457                                  		; bx = dx = cluster number offset in the FAT buffer
  7458                                  		pop	ds ; FAT buffer segment
  7459                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
  7460                                  		pop	si ; FAT offset value (from fat entry 0)
  7461                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
  7462                                  		pop	cx ; read count (sectors per cluster)
  7463                                  		;pop	ax
  7464                                  
  7465                                  		retn
  7466                                  ; 15/10/2022
  7467                                  ;Bios_Data_Init	ends
  7468                                  
  7469                                  %endif
  7470                                  ; ---------------------------------------------------------------------------
  7471                                  ; ---------------------------------------------------------------------------
  7472                                  
  7473                                  		; 09/12/2022
  7474                                  		;db 0
  7475                                  
  7476                                  numbertodiv	equ ($-BData_start)
  7477                                  numbertomod	equ (numbertodiv % 16)
  7478                                  
  7479                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7480 000022E9 00<rep 7h>              		times (16-numbertomod) db 0
  7481                                  %endif
  7482                                  
  7483                                  ;align 16
  7484                                  
  7485                                  ; 09/12/2022
  7486                                  IOSYSCODESEGOFF equ $ - BData_start
  7487                                  ; 29/09/2023
  7488                                  ;IOSYSCODESEGOFF equ $-$$
  7489                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7490                                  
  7491                                  ; 28/09/2023
  7492                                  S1SIZE equ $-$$
  7493                                  
  7494                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7495                                  ; ---------------------------------------------------------------------------
  7496                                  		;db 4 dup(0)
  7497                                  ; 09/12/2022		
  7498                                  ;		times 4 db 0	; 19/10/2022
  7499                                  ; ---------------------------------------------------------------------------
  7500                                  
  7501                                  ;============================================================================
  7502                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7503                                  ;============================================================================
  7504                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7505                                  
  7506                                  section .BIOSCODE vstart=0  
  7507                                  
  7508                                  BCode_start:	 ; 09/12/2022
  7509                                   
  7510                                  ; 02/10/2022
  7511                                  
  7512                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7513                                  ;----------------------------------------------------------------------------
  7514                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7515                                  ;----------------------------------------------------------------------------
  7516                                  
  7517                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7518 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7519 00000030 7000                    BiosDataWord:	dw 70h
  7520                                  
  7521                                  ; 15/10/2022
  7522                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7523                                  ; 09/12/2022
  7524                                  BIOSDATAWORD	equ BiosDataWord
  7525                                  
  7526                                  ; ---------------------------------------------------------------------------
  7527                                  
  7528                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7529                                  
  7530                                  ;************************************************************************
  7531                                  ;*									*
  7532                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7533                                  ;*	  trashes di, cx, es						*
  7534                                  ;*									*
  7535                                  ;*	cas -- should be made disposable!				*
  7536                                  ;*									*
  7537                                  ;************************************************************************
  7538                                  
  7539                                  _seg_reinit:
  7540 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7541                                  					; at 2C7h:30h or 70h:25A0h
  7542                                  		;mov	di, (offset cdev+2)
  7543 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7544 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7545                                  
  7546                                  _seg_reinit_1:				
  7547 0000003D AB                      		stosw			; modify Bios_Code entry points
  7548 0000003E 47                      		inc	di
  7549 0000003F 47                      		inc	di
  7550 00000040 E2FB                    		loop	_seg_reinit_1
  7551 00000042 CB                      		retf
  7552                                  
  7553                                  ; ---------------------------------------------------------------------------
  7554                                  
  7555                                  ; 15/10/2022
  7556                                  
  7557                                  ;************************************************************************
  7558                                  ;*									*
  7559                                  ;*	chardev_entry - main device driver dispatch routine		*
  7560                                  ;*	   called with a dummy parameter block on the stack		*
  7561                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7562                                  ;*									*
  7563                                  ;*	will eventually take care of doing the transitions in		*
  7564                                  ;*	   out of Bios_Code						*
  7565                                  ;*									*
  7566                                  ;************************************************************************
  7567                                  
  7568                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7569 00000043 56                      		push	si
  7570 00000044 50                      		push	ax
  7571 00000045 51                      		push	cx
  7572 00000046 52                      		push	dx
  7573 00000047 57                      		push	di
  7574 00000048 55                      		push	bp
  7575 00000049 1E                      		push	ds
  7576 0000004A 06                      		push	es
  7577 0000004B 53                      		push	bx
  7578 0000004C 89E5                    		mov	bp, sp
  7579 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7580                                  		;;mov	ds, word [cs:0030h]
  7581                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7582 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7583 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7584 00000059 A2[2100]                		mov	[auxnum], al
  7585 0000005C 8826[E704]              		mov	[printdev], ah
  7586 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7587 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7588 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7589 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7590 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7591 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7592                                  		; 17/10/2022
  7593 00000076 81FE[9604]              		cmp	si, DSKTBL
  7594                                  		;cmp	si, 4A2h	; dsktbl
  7595                                  					; at 2C7h:4A2h = 70h:2A12h
  7596 0000007A 7517                    		jnz	short no_sector32_mapping
  7597                                  
  7598                                  ; Special case for 32-bit start sector number:
  7599                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7600                                  ;      set high 16 bits of secnum to 0
  7601                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7602                                  ;
  7603                                  ; pass high word of sector number in start_sec_h, low word in dx
  7604                                  ;
  7605                                  ; note: start_l and start_h are the offsets within the io_request packet
  7606                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7607                                  ;	  it has been used.
  7608                                  ;
  7609                                  ; note: remember not to destroy the registers which have been set up before
  7610                                  
  7611                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7612 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7613 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7614 00000085 750C                    		jnz	short no_sector32_mapping
  7615 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7616                                  					; 32 bits dsk req
  7617                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7618 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7619 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7620                                  					; dx = packet.start_l
  7621                                  no_sector32_mapping:			
  7622 00000093 97                      		xchg	ax, di
  7623 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7624 00000098 2E3A04                  		cmp	al, cs:[si]
  7625 0000009B 732C                    		jnb	short command_error
  7626 0000009D 98                      		cbw			; note that al <= 15 means ok
  7627 0000009E D1E0                    		shl	ax, 1
  7628 000000A0 01C6                    		add	si, ax
  7629 000000A2 97                      		xchg	ax, di
  7630 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7631 000000A7 FC                      		cld
  7632                                  		; 17/10/2022
  7633 000000A8 2EFF5401                		call	near [cs:si+1]
  7634                                  		;call	word ptr cs:si+1
  7635 000000AC 7202                    		jb	short already_got_ah_status
  7636 000000AE B401                    		mov	ah, 1
  7637                                  already_got_ah_status:
  7638                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7639                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7640                                  					; cas note: shouldn't be needed!
  7641 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7642                                  		;lds	bx, ds:ptrsav
  7643 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7644 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7645                                  					; mark operation complete
  7646 000000BC 5B                      		pop	bx
  7647 000000BD 07                      		pop	es
  7648 000000BE 1F                      		pop	ds
  7649 000000BF 5D                      		pop	bp
  7650 000000C0 5F                      		pop	di
  7651 000000C1 5A                      		pop	dx
  7652 000000C2 59                      		pop	cx
  7653 000000C3 58                      		pop	ax
  7654 000000C4 5E                      		pop	si
  7655 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7656                                  	
  7657                                  		; fall through into bc_retf
  7658                                  ; ---------------------------------------------------------------------------	
  7659                                  bc_retf:
  7660 000000C8 CB                      		retf
  7661                                  ; ---------------------------------------------------------------------------
  7662                                  
  7663                                  command_error:				
  7664 000000C9 E80900                  		call	bc_cmderr
  7665 000000CC EBE2                    		jmp	short already_got_ah_status
  7666                                  ; 15/10/2022
  7667                                  ; 01/05/2019
  7668                                  
  7669                                  ;----------------------------------------------------------------------------
  7670                                  ; The following piece of hack is for supporting CP/M compatibility
  7671                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7672                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7673                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7674                                  ; high.
  7675                                  ;----------------------------------------------------------------------------
  7676                                  
  7677                                  		;db 7 dup(0)
  7678                                  
  7679                                  		; 15/10/2022
  7680                                  
  7681 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7682                                  
  7683 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7684                                  				;  which is the CP/M call 5 entry point
  7685                                  		
  7686                                  
  7687                                  ; ---------------------------------------------------------------------------
  7688                                  
  7689                                  ;	exit - all routines return through this path
  7690                                  
  7691                                  bc_cmderr:				
  7692 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7693                                  					; unknown command error
  7694                                  
  7695                                  ; =============== S U B	R O U T	I N E =======================================
  7696                                  
  7697                                  ;	now zero the count field by subtracting its current value,
  7698                                  ;	  which is still in cx, from itself.
  7699                                  
  7700                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7701                                  ;	  in order to return the number actually complete
  7702                                  
  7703                                  bc_err_cnt:	
  7704                                  		;les	bx, ds:ptrsav
  7705                                  		; 19/10/2022
  7706 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7707 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7708                                  					; # of successful i/o's
  7709 000000DF B481                    		mov	ah, 81h		; mark error return
  7710 000000E1 F9                      		stc			; indicate abnormal end
  7711 000000E2 C3                      		retn
  7712                                  
  7713                                  ; 15/10/2022
  7714                                  
  7715                                  ;Bios_Code ends
  7716                                  
  7717                                  ;----------------------------------------------------------------------------
  7718                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7719                                  ;----------------------------------------------------------------------------
  7720                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7721                                  ; 10/01/2019 - Retro DOS v4.0
  7722                                  
  7723                                  ; 30/04/2019
  7724                                  
  7725                                  ;title	mschar - character and clock devices
  7726                                  
  7727                                  ;MODE_CTRLBRK	equ	0FFh
  7728                                  
  7729                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7730                                  
  7731                                  ;************************************************************************
  7732                                  ;*									*
  7733                                  ;*	device driver dispatch tables					*
  7734                                  ;*									*
  7735                                  ;*	each table starts with a byte which lists the number of		*
  7736                                  ;*	legal functions, followed by that number of words. Each		*
  7737                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7738                                  ;*	handles the function. The functions are terminated with		*
  7739                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7740                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7741                                  ;*	returned as abnormal completion status. Notice that ds		*
  7742                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7743                                  ;*									*
  7744                                  ;************************************************************************
  7745                                  
  7746                                  		; 13/12/2022
  7747                                  		;db 0
  7748                                  
  7749                                  		; 13/12/202
  7750 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7751                                  					; 2C7h:0E4h = 70h:2654h
  7752 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7753                                  					; 00 init
  7754 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7755 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7756 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7757                                  					; 03
  7758 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7759                                  					; 04
  7760 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7761                                  					; 05
  7762 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7763 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7764                                  					; 07
  7765 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7766                                  					; 08
  7767 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7768 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7769                                  con_table_end:
  7770 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7771                                  					; 2C7h:0FBh = 70h:266Bh
  7772 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7773 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7774 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7775 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7776 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7777                                  					; 04 indicate zero chars read
  7778 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7779                                  					; 05 read non-destructive
  7780 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7781 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7782 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7783 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7784 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7785 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7786 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7787 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7788 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7789 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7790 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7791 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7792 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7793 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7794 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7795 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7796 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7797 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7798 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7799 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7800                                  prn_table_end:
  7801 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7802                                  					; 2C7h:130h = 70h:26A0h
  7803 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7804 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7805 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7806 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7807 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7808 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7809 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7810 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7811 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7812 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7813 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7814                                  aux_table_end:
  7815 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7816                                  					; 2C7h:147h = 70h:26B7h
  7817 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7818 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7819 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7820 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7821 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7822 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7823 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7824 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7825 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7826 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7827                                  tim_table_end:
  7828                                  
  7829                                  ; ---------------------------------------------------------------------------
  7830                                  
  7831                                  ;************************************************************************
  7832                                  ;*									*
  7833                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7834                                  ;*									*
  7835                                  ;************************************************************************
  7836                                  
  7837                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7838                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7839 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7840                                  con_loop:				
  7841 0000015D E80500                  		call	chrin		; get char in al
  7842 00000160 AA                      		stosb			; store	char at	es:di
  7843 00000161 E2FA                    		loop	con_loop
  7844                                  con_exit:				
  7845 00000163 F8                      		clc
  7846 00000164 C3                      		retn
  7847                                  
  7848                                  ; =============== S U B	R O U T	I N E =======================================
  7849                                  
  7850                                  ;************************************************************************
  7851                                  ;*									*
  7852                                  ;*	chrin - input single char from keyboard into al			*
  7853                                  ;*									*
  7854                                  ;*	  we are going to issue extended keyboard function, if		*
  7855                                  ;*	  supported. the returning value of the extended keystroke	*
  7856                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7857                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7858                                  ;*	  this creates a conflict when the user entered real		*
  7859                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7860                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7861                                  ;*	  in the following manner:					*
  7862                                  ;*									*
  7863                                  ;*	      ah = 16h							*
  7864                                  ;*	      int 16h							*
  7865                                  ;*	      if al == 0, then extended code (in ah)			*
  7866                                  ;*	      else if al == 0E0h, then					*
  7867                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7868                                  ;*		else greek_alpha character.				*
  7869                                  ;*									*
  7870                                  ;*	also, for compatibility reason, if an extended code is		*
  7871                                  ;*	  detected, then we are going to change the value in al		*
  7872                                  ;*	  from 0E0h to 00h.						*
  7873                                  ;*									*
  7874                                  ;************************************************************************
  7875                                  
  7876                                  		; 19/10/2022
  7877                                  chrin:		
  7878 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7879 00000169 30C0                    		xor	al, al
  7880 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7881 0000016F 08C0                    		or	al, al
  7882 00000171 752A                    		jnz	short keyret
  7883 00000173 CD16                    		int	16h		; KEYBOARD -
  7884 00000175 09C0                    		or	ax, ax
  7885 00000177 74EC                    		jz	short chrin
  7886 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7887 0000017C 7504                    		jnz	short alt_ext_chk
  7888 0000017E B010                    		mov	al, 10h
  7889 00000180 EB1B                    		jmp	short keyret
  7890                                  ; ---------------------------------------------------------------------------
  7891                                  
  7892                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7893                                  ;    if character read was 0E0h then
  7894                                  ;      if extended byte was zero (i.e. ah == 0) then
  7895                                  ;	 goto keyret
  7896                                  ;      else
  7897                                  ;	 set al to zero
  7898                                  ;	 goto alt_save
  7899                                  ;      endif
  7900                                  ;    endif
  7901                                  ;  endif
  7902                                  
  7903                                  alt_ext_chk:
  7904 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7905 00000187 740C                    		jz	short not_ext
  7906 00000189 3CE0                    		cmp	al, 0E0h
  7907 0000018B 7508                    		jnz	short not_ext
  7908 0000018D 08E4                    		or	ah, ah
  7909 0000018F 740C                    		jz	short keyret
  7910 00000191 30C0                    		xor	al, al
  7911 00000193 EB04                    		jmp	short alt_save
  7912                                  ; ---------------------------------------------------------------------------
  7913                                  
  7914                                  not_ext:				
  7915 00000195 08C0                    		or	al, al		; special case?
  7916 00000197 7504                    		jnz	short keyret
  7917                                  alt_save:				
  7918 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7919                                  keyret:					
  7920 0000019D C3                      		retn
  7921                                  
  7922                                  ; ---------------------------------------------------------------------------
  7923                                  
  7924                                  ;************************************************************************
  7925                                  ;*									*
  7926                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7927                                  ;*									*
  7928                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7929                                  ;*	in the status word of the request packet, and there is no	*
  7930                                  ;*	character in the input buffer, the driver issues a system	*
  7931                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7932                                  ;*	a 'char-not-found' to the dos.					*
  7933                                  ;*									*
  7934                                  ;************************************************************************
  7935                                  
  7936                                  		; 19/10/2022
  7937                                  con_rdnd:				
  7938 0000019E A0[0C00]                		mov	al, [altah]
  7939 000001A1 08C0                    		or	al, al
  7940 000001A3 754C                    		jnz	short rdexit
  7941 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7942 000001A9 CD16                    		int	16h		; KEYBOARD -
  7943 000001AB 751D                    		jnz	short gotchr
  7944 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7945 000001B2 7412                    		jz	short z_bus_exit
  7946 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7947                                  		; 12/12/2022
  7948 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7949                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7950 000001BD 7407                    		jz	short z_bus_exit
  7951 000001BF B80041                  		mov	ax, 4100h
  7952 000001C2 30DB                    		xor	bl, bl
  7953 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7954                                  					; AL = condition type, BH = condition compare or mask value
  7955                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7956                                  					; DX = I/O port	address	if AL bit 4 set
  7957                                  z_bus_exit:				
  7958 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7959 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7960 000001C9 C3                      		retn
  7961                                  ; ---------------------------------------------------------------------------
  7962                                  
  7963                                  gotchr:					
  7964 000001CA 09C0                    		or	ax, ax
  7965 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7966 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7967 000001D2 CD16                    		int	16h		; KEYBOARD -
  7968 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7969                                  ; ---------------------------------------------------------------------------
  7970                                  
  7971                                  notbrk:					
  7972 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7973 000001D9 7504                    		jnz	short rd_ext_chk
  7974 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7975 000001DD EB12                    		jmp	short rdexit
  7976                                  ; ---------------------------------------------------------------------------
  7977                                  
  7978                                  rd_ext_chk:				
  7979 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7980 000001E4 740B                    		jz	short rdexit
  7981 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7982 000001E8 7507                    		jnz	short rdexit
  7983 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7984 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7985 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7986                                  					; change it for	compatibility
  7987                                  rdexit:					
  7988 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7989 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7990                                  					; return keyboard character here
  7991                                  bc_exvec:				
  7992 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7993                                  					; indicate normal termination
  7994 000001FA C3                      		retn
  7995                                  ; ---------------------------------------------------------------------------
  7996                                  
  7997                                  ;************************************************************************
  7998                                  ;*									*
  7999                                  ;*	con_write - console write routine				*
  8000                                  ;*									*
  8001                                  ;*	entry:	es:di -> buffer						*
  8002                                  ;*		cx    =  count						*
  8003                                  ;*									*
  8004                                  ;************************************************************************
  8005                                  
  8006                                  con_writ:
  8007                                  		;jcxz	short bc_exvec
  8008 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8009                                  		; 12/12/2022
  8010                                  		;jcxz	cc_ret
  8011                                  con_lp:					
  8012 000001FD 268A05                  		mov	al, [es:di]
  8013 00000200 47                      		inc	di
  8014 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8015                                  					; AL = character to display
  8016 00000203 E2F8                    		loop	con_lp
  8017                                  cc_ret:					
  8018 00000205 F8                      		clc
  8019 00000206 C3                      		retn
  8020                                  
  8021                                  ; =============== S U B	R O U T	I N E =======================================
  8022                                  
  8023                                  ;************************************************************************
  8024                                  ;*									*
  8025                                  ;*	con_flush - flush out keyboard queue				*
  8026                                  ;*									*
  8027                                  ;************************************************************************
  8028                                  
  8029                                  con_flush:
  8030 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8031                                  flloop:					; while	(charavail()) charread();	
  8032 0000020C B401                    		mov	ah, 1
  8033 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8034                                  					; Return: ZF clear if character	in buffer
  8035                                  					; AH = scan code, AL = character
  8036                                  					; ZF set if no character in buffer
  8037 00000210 74F3                    		jz	short cc_ret
  8038 00000212 30E4                    		xor	ah, ah
  8039 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8040                                  					; Return: AH = scan code, AL = character
  8041 00000216 EBF4                    		jmp	short flloop
  8042                                  
  8043                                  ; ---------------------------------------------------------------------------
  8044                                  
  8045                                  ; 15/10/2022
  8046                                  
  8047                                  ;************************************************************************
  8048                                  ;*									*
  8049                                  ;*	some equates for rom bios printer i/o				*
  8050                                  ;*									*
  8051                                  ;************************************************************************
  8052                                  
  8053                                  ; ibm rom status bits (i don't trust them, neither should you)
  8054                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8055                                  ; whole slew of bits, only one of which is correct.
  8056                                  
  8057                                  ;notbusystatus	equ 10000000b		; not busy
  8058                                  ;nopaperstatus	equ 00100000b		; no more paper
  8059                                  ;prnselected	equ 00010000b		; printer selected
  8060                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8061                                  ;timeoutstatus	equ 00000001b		; time out.
  8062                                  ;
  8063                                  ;noprinter	equ 00110000b		; no printer attached
  8064                                  
  8065                                  ; 18/03/2019 - Retro DOS v4.0
  8066                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8067                                  
  8068                                  ; ---------------------------------------------------------------------------
  8069                                  
  8070                                  ;************************************************************************
  8071                                  ;*									*
  8072                                  ;*	prn_input - return with no error but zero chars read		*
  8073                                  ;*									*
  8074                                  ;*	enter with cx = number of characters requested			*
  8075                                  ;*									*
  8076                                  ;************************************************************************
  8077                                  
  8078                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8079 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8080                                  					; (sub reqpkt.count,cx)
  8081                                  		; 12/12/2022
  8082                                  prn_done:
  8083 0000021B F8                      		clc			; but return with carry	reset for no error
  8084 0000021C C3                      		retn
  8085                                  ; ---------------------------------------------------------------------------
  8086                                  
  8087                                  ;************************************************************************
  8088                                  ;*									*
  8089                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8090                                  ;*									*
  8091                                  ;*	auxnum has printer number					*
  8092                                  ;*									*
  8093                                  ;************************************************************************
  8094                                  
  8095                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8096                                  		;jcxz	short prn_done	; no chars to output
  8097 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8098                                  prn_loop:				
  8099 0000021F BB0200                  		mov	bx, 2		; retry	count
  8100                                  prn_out:				
  8101 00000222 E83600                  		call	prnstat		; get status
  8102 00000225 751D                    		jnz	short TestPrnError
  8103 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8104 0000022A 30E4                    		xor	ah, ah
  8105 0000022C E82E00                  		call	prnop		; print	to printer
  8106 0000022F 7419                    		jz	short prn_con	; no error - continue
  8107 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8108 00000234 7509                    		jnz	short _prnwf
  8109 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8110 00000238 C606[0C00]00            		mov	byte [altah], 0
  8111 0000023D EB08                    		jmp	short pmessg
  8112                                  ; ---------------------------------------------------------------------------
  8113                                  
  8114                                  _prnwf:					
  8115 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8116 00000242 7406                    		jz	short prn_con
  8117                                  TestPrnError:				
  8118 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8119 00000245 75DB                    		jnz	short prn_out
  8120                                  pmessg:					
  8121 00000247 E98DFE                  		jmp	bc_err_cnt
  8122                                  ; ---------------------------------------------------------------------------
  8123                                  
  8124                                  prn_con:				
  8125 0000024A 47                      		inc	di		; point	to next	char and continue
  8126 0000024B E2D2                    		loop	prn_loop
  8127                                  ;prn_done:				
  8128                                  		; 12/12/2022
  8129                                  prn_done2:
  8130                                  		;clc
  8131                                  		; cf=0
  8132 0000024D C3                      		retn
  8133                                  ; ---------------------------------------------------------------------------
  8134                                  
  8135                                  ;************************************************************************
  8136                                  ;*									*
  8137                                  ;*	prn_stat - device driver entry to return printer status		*
  8138                                  ;*									*
  8139                                  ;************************************************************************
  8140                                  
  8141                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8142 0000024E E80A00                  		call	prnstat		; device in dx
  8143 00000251 75F4                    		jnz	short pmessg
  8144 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8145                                  		;jnz	short prn_done
  8146                                  		; 12/12/2022
  8147 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8148 00000258 E96BFF                  		jmp	z_bus_exit
  8149                                  ; ---------------------------------------------------------------------------
  8150                                  
  8151                                  ;************************************************************************
  8152                                  ;*									*
  8153                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8154                                  ;*		 printer status. Return meaningful error code		*
  8155                                  ;*									*
  8156                                  ;************************************************************************
  8157                                  
  8158                                  prnstat:				
  8159 0000025B B402                    		mov	ah, 2		; set command for get status
  8160                                  					; PRINTER - GET	STATUS
  8161                                  					; DX = printer port (0-3)
  8162                                  					; Return: AH = status
  8163                                  
  8164                                  ; =============== S U B	R O U T	I N E =======================================
  8165                                  
  8166                                  ;************************************************************************
  8167                                  ;*									*
  8168                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8169                                  ;*		return zero true if no error				*
  8170                                  ;*		return zero false if error, al = error code		*
  8171                                  ;*									*
  8172                                  ;************************************************************************
  8173                                  
  8174                                  prnop:	
  8175 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8176 00000261 CD17                    		int	17h
  8177                                  
  8178                                  	; This check was added to see if this is a case of no
  8179                                  	; printer being installed. This tests checks to be sure
  8180                                  	; the error is noprinter (30h)
  8181                                  
  8182 00000263 50                      		push	ax
  8183 00000264 80E430                  		and	ah, 30h
  8184 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8185 0000026A 58                      		pop	ax
  8186 0000026B 7506                    		jnz	short NextTest
  8187 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8188 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8189                                  
  8190                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8191                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8192                                  ; careful about breaking basic.
  8193                                  
  8194                                  NextTest:				
  8195 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8196                                  					; i/o error?
  8197 00000276 740A                    		jz	short checknotready ; no, try not ready
  8198                                  
  8199                                  ; at this point, we know we have an error. the converse is not true
  8200                                  
  8201 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8202                                  					; first, assume	out of paper
  8203 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8204 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8205 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8206                                  ret1:					
  8207 00000281 C3                      		retn
  8208                                  ; ---------------------------------------------------------------------------
  8209                                  
  8210                                  checknotready:				
  8211 00000282 B002                    		mov	al, 2		; assume not-ready
  8212 00000284 F6C401                  		test	ah, 1
  8213 00000287 C3                      		retn
  8214                                  
  8215                                  ; ---------------------------------------------------------------------------
  8216                                  
  8217                                  ;************************************************************************
  8218                                  ;*									*
  8219                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8220                                  ;*		     this entry point should never block waiting for	*
  8221                                  ;*		     device to come ready.				*
  8222                                  ;*									*
  8223                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8224                                  ;*	outputs: set the number of bytes transferred in the		*
  8225                                  ;*		 device driver request packet				*
  8226                                  ;*									*
  8227                                  ;************************************************************************
  8228                                  
  8229                                  		; 19/10/2022
  8230                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8231 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8232                                  prn_tilbloop:				
  8233 0000028A 51                      		push	cx
  8234 0000028B 53                      		push	bx
  8235 0000028C 30FF                    		xor	bh, bh
  8236 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8237 00000292 D1E3                    		shl	bx, 1
  8238                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8239 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8240 00000298 5B                      		pop	bx
  8241                                  prn_getstat:				
  8242 00000299 E8BFFF                  		call	prnstat		; get status
  8243 0000029C 7514                    		jnz	short prn_bperr	; error
  8244 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8245 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8246 000002A3 59                      		pop	cx		; get original count
  8247 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8248 000002A6 26                      		es
  8249 000002A7 AC                      		lodsb
  8250                                  		;lods	byte ptr es:[si] ; es
  8251                                  					; lodsb
  8252 000002A8 30E4                    		xor	ah, ah
  8253 000002AA E8B0FF                  		call	prnop
  8254 000002AD 7504                    		jnz	short prn_berr	; error
  8255 000002AF E2D9                    		loop	prn_tilbloop
  8256                                  		; 12/12/2022
  8257                                  		; cf=0 (prnop)
  8258                                  		;clc			; normal no-error return
  8259 000002B1 C3                      		retn			;   from device driver
  8260                                  
  8261                                  ; ---------------------------------------------------------------------------
  8262                                  
  8263                                  prn_bperr:				
  8264 000002B2 59                      		pop	cx		; restore transfer count from stack
  8265                                  prn_berr:				
  8266 000002B3 E921FE                  		jmp	bc_err_cnt
  8267                                  ; ---------------------------------------------------------------------------
  8268                                  
  8269                                  ; 15/10/2022
  8270                                  
  8271                                  ;************************************************************************
  8272                                  ;*									*
  8273                                  ;*	prn_genioctl - get/set printer retry count			*
  8274                                  ;*									*
  8275                                  ;************************************************************************
  8276                                  
  8277                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8278                                  ; 11/01/2019
  8279                                  
  8280                                  ;********************************;*
  8281                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8282                                  ;********************************;*
  8283                                  
  8284                                  ;;RAWIO SUB-FUNCTIONS
  8285                                  ;;get_retry_count equ 65h
  8286                                  ;;set_retry_count equ 45h
  8287                                  
  8288                                  ;;struc A_RETRYCOUNT
  8289                                  ;;.rc_count: resw 1
  8290                                  ;;endstruc
  8291                                  
  8292                                  ;ioc_pc equ 5
  8293                                  
  8294                                  ; ---------------------------------------------------------------------------
  8295                                  
  8296                                  		; 19/10/2022
  8297                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8298 000002B6 C43E[1200]              		les	di, [ptrsav]
  8299 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8300                                  					; ioc_pc
  8301 000002BF 7403                    		jz	short prnfunc_ok
  8302                                  
  8303                                  prnfuncerr:				
  8304 000002C1 E911FE                  		jmp	bc_cmderr
  8305                                  ; ---------------------------------------------------------------------------
  8306                                  
  8307                                  prnfunc_ok:				
  8308 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8309 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8310 000002CC 30FF                    		xor	bh, bh
  8311                                  		;mov	bl, ds:printdev	; get index into retry counts
  8312 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8313 000002D2 D1E3                    		shl	bx, 1
  8314                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8315 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8316 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8317 000002DA 7407                    		jz	short prngetcount
  8318 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8319 000002DE 75E1                    		jnz	short prnfuncerr
  8320 000002E0 268B0D                  		mov	cx, [es:di]
  8321                                  prngetcount:				
  8322                                  		;mov	ds:wait_count[bx], cx
  8323 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8324 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8325                                  					; return current retry count
  8326                                  		; 12/12/2022
  8327                                  		; cf=0
  8328                                  		;clc
  8329 000002EA C3                      		retn
  8330                                  ; ---------------------------------------------------------------------------
  8331                                  
  8332                                  ;************************************************************************
  8333                                  ;*									*
  8334                                  ;*  prn_ioctl_query							*
  8335                                  ;*									*
  8336                                  ;*  Added for 5.00							*
  8337                                  ;************************************************************************
  8338                                  
  8339                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8340 000002EB C43E[1200]              		les	di, [ptrsav]
  8341 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8342                                  					; ioc_pc
  8343 000002F4 750D                    		jnz	short prn_query_err
  8344 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8345 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8346 000002FC 7404                    		jz	short IOCtlSupported
  8347 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8348 00000300 7501                    		jnz	short prn_query_err
  8349                                  IOCtlSupported:	
  8350                                  		; 12/12/2022
  8351                                  		; cf=0		
  8352                                  		;clc
  8353 00000302 C3                      		retn
  8354                                  ; ---------------------------------------------------------------------------
  8355                                  
  8356                                  prn_query_err:
  8357                                  		; 12/12/2022				
  8358                                  		;stc
  8359 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8360                                  ; ---------------------------------------------------------------------------
  8361                                  
  8362                                  ;************************************************************************
  8363                                  ;*									*
  8364                                  ;*	aux port driver code -- "aux" == "com1"				*
  8365                                  ;*									*
  8366                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8367                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8368                                  ;*									*
  8369                                  ;************************************************************************
  8370                                  
  8371                                  ;	values in ah, requesting function of int 14h in rom bios
  8372                                  
  8373                                  ;auxfunc_send	 equ	1	;transmit
  8374                                  ;auxfunc_receive equ	2	;read
  8375                                  ;auxfunc_status	 equ	3	;request status
  8376                                  
  8377                                  ;	error flags, reported by int 14h, reported in ah:
  8378                                  
  8379                                  ;flag_data_ready equ	01h	;data ready
  8380                                  ;flag_overrun	 equ	02h	;overrun error
  8381                                  ;flag_parity	 equ	04h	;parity error
  8382                                  ;flag_frame	 equ	08h	;framing error
  8383                                  ;flag_break	 equ	10h	;break detect
  8384                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8385                                  ;flag_timeout	 equ	80h	;timeout
  8386                                  
  8387                                  ;	these flags reported in al:
  8388                                  
  8389                                  ;flag_cts	 equ	10h	;clear to send
  8390                                  ;flag_dsr	 equ	20h	;data set ready
  8391                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8392                                  
  8393                                  ; ---------------------------------------------------------------------------
  8394                                  
  8395                                  ;************************************************************************
  8396                                  ;*									*
  8397                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8398                                  ;*		   at es:di						*
  8399                                  ;*									*
  8400                                  ;************************************************************************
  8401                                  
  8402                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8403                                  		;jcxz	short exvec2
  8404 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8405 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8406 0000030B 30C0                    		xor	al, al
  8407 0000030D 8607                    		xchg	al, [bx]
  8408 0000030F 08C0                    		or	al, al
  8409 00000311 7503                    		jnz	short aux2
  8410                                  aux1:					
  8411 00000313 E80500                  		call	auxin		; get character	from port
  8412                                  					; won't return if error
  8413                                  aux2:					
  8414 00000316 AA                      		stosb
  8415 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8416                                  exvec2:					
  8417 00000319 F8                      		clc			; all done, successful exit
  8418                                  auxin_retn:	; 18/12/2022
  8419 0000031A C3                      		retn
  8420                                  ; ---------------------------------------------------------------------------
  8421                                  
  8422                                  ;************************************************************************
  8423                                  ;*									*
  8424                                  ;*	auxin - call rom bios to read character from aux port		*
  8425                                  ;*		if error occurs, map the error and return one		*
  8426                                  ;*		level up to device driver exit code, setting		*
  8427                                  ;*		the number of bytes transferred appropriately		*
  8428                                  ;*									*
  8429                                  ;************************************************************************
  8430                                  
  8431                                  auxin:					
  8432 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8433 0000031D E83C00                  		call	auxop
  8434 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8435                                  		;jnz	short arbad	; skip if any error bits set
  8436                                  		;retn
  8437                                  		; 25/06/2023 (BugFix)
  8438 00000323 74F5                    		jz	short auxin_retn
  8439                                  ; ---------------------------------------------------------------------------
  8440                                  
  8441                                  arbad:					
  8442 00000325 58                      		pop	ax		; remove return	address	(near call)
  8443 00000326 30C0                    		xor	al, al
  8444 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8445 0000032A E9AAFD                  		jmp	bc_err_cnt
  8446                                  
  8447                                  ; ---------------------------------------------------------------------------
  8448                                  
  8449                                  ;************************************************************************
  8450                                  ;*									*
  8451                                  ;*	aux_rdnd - non-destructive aux port read			*
  8452                                  ;*									*
  8453                                  ;************************************************************************
  8454                                  
  8455                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8456 0000032D E85200                  		call	getbx
  8457 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8458 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8459 00000334 7511                    		jnz	short auxdrx	; then return character
  8460 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8461 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8462 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8463 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8464 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8465 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8466 00000345 8807                    		mov	[bx], al
  8467                                  auxdrx:					
  8468 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8469                                  ; ---------------------------------------------------------------------------
  8470                                  
  8471                                  auxbus:					
  8472 0000034A E979FE                  		jmp	z_bus_exit
  8473                                  ; ---------------------------------------------------------------------------
  8474                                  
  8475                                  ;************************************************************************
  8476                                  ;*									*
  8477                                  ;*	aux_wrst - return aux port write status				*
  8478                                  ;*									*
  8479                                  ;************************************************************************
  8480                                  
  8481                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8482 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8483 00000350 A820                    		test	al, 20h		; test data set	ready
  8484 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8485 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8486 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8487                                  		; 12/12/2022
  8488                                  		; cf=0	; (test instruction resets cf)
  8489                                  		;clc
  8490 00000359 C3                      		retn
  8491                                  ; ---------------------------------------------------------------------------
  8492                                  
  8493                                  ;************************************************************************
  8494                                  ;*									*
  8495                                  ;*	auxstat - call rom bios to determine aux port status		*
  8496                                  ;*									*
  8497                                  ;*	exit:	ax = status						*
  8498                                  ;*		dx = [auxnum]						*
  8499                                  ;*									*
  8500                                  ;************************************************************************
  8501                                  
  8502                                  auxstat:				
  8503 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8504                                  
  8505                                  		; fall into auxop
  8506                                  
  8507                                  ; =============== S U B	R O U T	I N E =======================================
  8508                                  
  8509                                  ;************************************************************************
  8510                                  ;*									*
  8511                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8512                                  ;*									*
  8513                                  ;*	entry:	ah = int 14h function number				*
  8514                                  ;*	exit:	ax = results						*
  8515                                  ;*		dx = [auxnum]						*
  8516                                  ;*									*
  8517                                  ;************************************************************************
  8518                                  
  8519                                  auxop:		; proc near		
  8520 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8521                                  					; 0=init, 1=send, 2=receive, 3=status
  8522                                  					; get port number
  8523 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8524                                  					; DX = port number (0-3)
  8525                                  					; Return: AX = port status code
  8526 00000362 C3                      		retn
  8527                                  
  8528                                  ; ---------------------------------------------------------------------------
  8529                                  
  8530                                  ;************************************************************************
  8531                                  ;*									*
  8532                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8533                                  ;*		   auxbuf [auxnum] to zero				*
  8534                                  ;*									*
  8535                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8536                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8537                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8538                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8539                                  ;*									*
  8540                                  ;************************************************************************
  8541                                  
  8542                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8543 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8544 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8545                                  					; zero out buffer
  8546                                  		;clc			; all done, successful return
  8547                                  		; 12/12/2022
  8548                                  		; cf=0 ('add' instruction in 'getbx')
  8549 00000369 C3                      		retn
  8550                                  ; ---------------------------------------------------------------------------
  8551                                  
  8552                                  ;************************************************************************
  8553                                  ;*									*
  8554                                  ;*	aux_writ - write to aux device					*
  8555                                  ;*									*
  8556                                  ;************************************************************************
  8557                                  
  8558                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8559                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8560 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8561                                  aux_loop:				
  8562 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8563                                  					; move di pointer to next character
  8564 0000036F 47                      		inc	di
  8565 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8566 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8567 00000375 F6C480                  		test	ah, 80h		; check	for error
  8568 00000378 7405                    		jz	short awok	; then no error
  8569 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8570 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8571                                  ; ---------------------------------------------------------------------------
  8572                                  
  8573                                  awok:					
  8574 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8575                                  					; still	more character to print
  8576                                  		;clc			; all done, successful return
  8577                                  		; 12/12/2022
  8578                                  		; cf=0 (test instruction above)	
  8579 00000381 C3                      		retn
  8580                                  
  8581                                  ; =============== S U B	R O U T	I N E =======================================
  8582                                  
  8583                                  ;************************************************************************
  8584                                  ;*									*
  8585                                  ;*	getbx - return bx -> single byte input buffer for		*
  8586                                  ;*		selected aux port ([auxnum])				*
  8587                                  ;*									*
  8588                                  ;************************************************************************
  8589                                  
  8590                                  getbx:	
  8591 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8592                                  					; for selected aux port	([auxnum])
  8593                                  		;add	bx, offset auxbuf
  8594 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8595                                  		; 12/12/2022
  8596                                  		; cf=0 (if [uaxnum] is valid number) 
  8597 0000038A C3                      		retn
  8598                                  
  8599                                  ; ---------------------------------------------------------------------------
  8600                                  
  8601                                  ; 15/10/2022
  8602                                  
  8603                                  ;----------------------------------------------------------------
  8604                                  ;								:
  8605                                  ;		    clock device driver 			:
  8606                                  ;								:
  8607                                  ;								:
  8608                                  ;   this file contains the clock device driver. 		:
  8609                                  ;								:
  8610                                  ;   the routines in this files are:				:
  8611                                  ;								:
  8612                                  ;	routine 		function			:
  8613                                  ;	------- 		--------			:
  8614                                  ;	tim_writ		set the current time		:
  8615                                  ;	tim_read		read the current time		:
  8616                                  ;	time_to_ticks		convert time to corresponding	:
  8617                                  ;				  number of clock ticks 	:
  8618                                  ;								:
  8619                                  ; the clock ticks at the rate of:				:
  8620                                  ;								:
  8621                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8622                                  ; see each routine for information on the use.			:
  8623                                  ;								:
  8624                                  ;----------------------------------------------------------------
  8625                                  
  8626                                  ; convert time to ticks
  8627                                  ; input : time in cx and dx
  8628                                  ; ticks returned in cx:dx
  8629                                  
  8630                                  ;19/07/2019
  8631                                  ;09/03/2019
  8632                                  
  8633                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8634                                  
  8635                                  ; first convert from hour,min,sec,hund. to
  8636                                  ; total number of 100th of seconds
  8637                                  
  8638 0000038B B03C                    		mov	al, 60
  8639 0000038D F6E5                    		mul	ch		; hours	to minutes
  8640 0000038F B500                    		mov	ch, 0
  8641 00000391 01C8                    		add	ax, cx		; total	minutes
  8642 00000393 B97017                  		mov	cx, 6000	; 60*100
  8643 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8644 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8645 0000039A 89C1                    		mov	cx, ax
  8646 0000039C B064                    		mov	al, 100
  8647 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8648 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8649 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8650 000003A5 B700                    		mov	bh, 0
  8651 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8652 000003A9 83D200                  		adc	dx, 0
  8653                                  
  8654                                  	; dx:cx is time in 1/100 sec
  8655                                  
  8656 000003AC 92                      		xchg	ax, dx
  8657 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8658 000003AE BB0BE9                  		mov	bx, 59659
  8659 000003B1 F7E3                    		mul	bx		; multiply low half
  8660 000003B3 87D1                    		xchg	dx, cx
  8661 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8662 000003B6 F7E3                    		mul	bx		; multiply high	half
  8663 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8664 000003BA 83D200                  		adc	dx, 0
  8665 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8666 000003BE BB0500                  		mov	bx, 5
  8667 000003C1 F6F3                    		div	bl		; divide high half by 5
  8668 000003C3 88C1                    		mov	cl, al
  8669 000003C5 B500                    		mov	ch, 0
  8670 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8671 000003C9 98                      		cbw
  8672 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8673 000003CB F7F3                    		div	bx		; divide low half by 5
  8674 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8675 000003CF CB                      		retf			; far return
  8676                                  
  8677                                  ; ---------------------------------------------------------------------------
  8678                                  
  8679                                  ; 17/10/2022
  8680                                  ; 15/10/2022
  8681                                  
  8682                                  ;--------------------------------------------------------------------
  8683                                  ;
  8684                                  ; tim_writ sets the current time
  8685                                  ;
  8686                                  ; on entry es:[di] has the current time:
  8687                                  ;
  8688                                  ;	number of days since 1-1-80	(word)
  8689                                  ;	minutes (0-59)			(byte)
  8690                                  ;	hours (0-23)			(byte)
  8691                                  ;	hundredths of seconds (0-99)	(byte)
  8692                                  ;	seconds (0-59)			(byte)
  8693                                  ;
  8694                                  ; each number has been checked for the correct range.
  8695                                  ;
  8696                                  ;	NOTE: Any changes in this routine probably require corresponding
  8697                                  ;	changes in the version that is built with the power manager driver.
  8698                                  ;	See ptime.asm.
  8699                                  ;
  8700                                  ;--------------------------------------------------------------------
  8701                                  
  8702                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8703 000003D0 268B05                  		mov	ax, [es:di]
  8704 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8705                                  					; end to avoid tick windows.
  8706 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8707                                  		;cmp	ds:havecmosclock, 0
  8708 000003D9 7426                    		jz	short no_cmos_1
  8709 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8710                                  					; get binary hours
  8711                                  					; convert to bcd
  8712 000003DF FF1E[0205]              		call	far [bintobcd]
  8713                                  		;call	ds:bintobcd	; call far [bintobcd]
  8714 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8715 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8716 000003E9 FF1E[0205]              		call	far [bintobcd]
  8717                                  		;call	ds:bintobcd	; convert to bcd
  8718 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8719 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8720 000003F3 FF1E[0205]              		call	far [bintobcd]
  8721                                  		;call	ds:bintobcd
  8722 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8723 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8724 000003FB FA                      		cli
  8725 000003FC B403                    		mov	ah, 3
  8726 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8727                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8728                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8729                                  					; Return: CMOS clock set
  8730 00000400 FB                      		sti
  8731                                  no_cmos_1:				
  8732 00000401 268B4D02                		mov	cx, [es:di+2]
  8733 00000405 268B5504                		mov	dx, [es:di+4]
  8734                                  		; 17/10/2022
  8735 00000409 FF1E[E206]              		call	far [ttticks]
  8736                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8737                                  					; convert time to ticks
  8738                                  					; cx:dx	now has	time in	ticks
  8739 0000040D FA                      		cli			; turn off timer
  8740 0000040E B401                    		mov	ah, 1
  8741 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8742                                  					; CX:DX	= clock	count
  8743                                  					; Return: time of day set
  8744                                  		;pop	ds:daycnt
  8745 00000412 8F06[F004]              		pop	word [daycnt]
  8746 00000416 FB                      		sti
  8747                                  		;cmp	ds:havecmosclock, 0
  8748 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8749 0000041C 740A                    		jz	short no_cmos_2
  8750 0000041E FF1E[0605]              		call	far [daycnttoday]
  8751                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8752                                  					; convert to bcd format
  8753 00000422 FA                      		cli
  8754 00000423 B405                    		mov	ah, 5
  8755 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8756                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8757                                  					; CH = century (19h or 20h)
  8758                                  					; Return: CMOS clock set
  8759 00000427 FB                      		sti
  8760                                  no_cmos_2:
  8761                                  		; 12/12/2022
  8762                                  		; cf=0				
  8763                                  		;clc
  8764 00000428 C3                      		retn
  8765                                  
  8766                                  ; ---------------------------------------------------------------------------
  8767                                  
  8768                                  ; 15/10/2022
  8769                                  
  8770                                  ;----------------------------------------------------------------------------
  8771                                  ; gettime reads date and time
  8772                                  ; and returns the following information:
  8773                                  ;
  8774                                  ;	es:[di]  =count of days since 1-1-80
  8775                                  ;	es:[di+2]=hours
  8776                                  ;	es:[di+3]=minutes
  8777                                  ;	es:[di+4]=seconds
  8778                                  ;	es:[di+5]=hundredths of seconds
  8779                                  ;
  8780                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8781                                  ;	changes in the version that is built with the power manager driver.
  8782                                  ;	See ptime.asm.
  8783                                  ;----------------------------------------------------------------------------
  8784                                  
  8785                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8786 00000429 E84E00                  		call	GetTickCnt
  8787 0000042C 8B36[F004]              		mov	si, [daycnt]
  8788                                  
  8789                                  ; we now need to convert the time in tick to the time in 100th of
  8790                                  ; seconds. the relation between tick and seconds is:
  8791                                  ;
  8792                                  ;		 65,536 seconds
  8793                                  ;	       ----------------
  8794                                  ;		1,193,180 tick
  8795                                  ;
  8796                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8797                                  ;
  8798                                  ;	ticks from clock  * 65,536 * 100
  8799                                  ;      --------------------------------- = time in 100th of seconds
  8800                                  ;		1,193,180
  8801                                  ;
  8802                                  ; fortunately this formula simplifies to:
  8803                                  ;
  8804                                  ;	ticks from clock * 5 * 65,536
  8805                                  ;      --------------------------------- = time in 100th of seconds
  8806                                  ;		59,659
  8807                                  ;
  8808                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8809                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8810                                  ; my 16 bits to the left.
  8811                                  ;
  8812                                  ; start with ticks in cx:dx
  8813                                  ; multiply by 5
  8814                                  
  8815 00000430 89C8                    		mov	ax, cx
  8816 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8817                                  					; multiply by 5
  8818 00000434 D1E2                    		shl	dx, 1
  8819 00000436 D1D1                    		rcl	cx, 1		; times	2
  8820 00000438 D1E2                    		shl	dx, 1
  8821 0000043A D1D1                    		rcl	cx, 1		; times	4
  8822 0000043C 01DA                    		add	dx, bx
  8823 0000043E 11C8                    		adc	ax, cx		; times	5
  8824 00000440 92                      		xchg	ax, dx
  8825                                  
  8826                                  ; now have ticks * 5 in	dx:ax
  8827                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8828                                  
  8829 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8830 00000444 F7F1                    		div	cx		; dx now has remainder
  8831                                  					; ax has high word of final quotient
  8832 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8833 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8834 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8835                                  
  8836                                  ; rounding based on the	remainder may be added here
  8837                                  ; the result in	bx:ax is time in 1/100 second.
  8838                                  
  8839 0000044C 89DA                    		mov	dx, bx		
  8840 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8841                                  
  8842                                  ; division by 200 is necessary to ensure no overflow--max result
  8843                                  ; is number of seconds in a day/2 = 43200.
  8844                                  
  8845 00000451 F7F1                    		div	cx
  8846 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8847 00000456 7203                    		jb	short noadj
  8848 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8849                                  noadj:					
  8850 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8851 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8852                                  
  8853                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8854                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8855                                  
  8856 0000045E D1D0                    		rcl	ax, 1		
  8857 00000460 B200                    		mov	dl, 0
  8858 00000462 D1D2                    		rcl	dx, 1
  8859 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8860 00000467 F7F1                    		div	cx
  8861 00000469 88D7                    		mov	bh, dl		; save the seconds
  8862 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8863 0000046D 86C4                    		xchg	al, ah
  8864                                  
  8865                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8866                                  
  8867 0000046F 50                      		push	ax
  8868 00000470 89F0                    		mov	ax, si		; daycnt
  8869 00000472 AB                      		stosw
  8870 00000473 58                      		pop	ax
  8871 00000474 AB                      		stosw
  8872 00000475 89D8                    		mov	ax, bx
  8873 00000477 AB                      		stosw
  8874 00000478 F8                      		clc
  8875 00000479 C3                      		retn
  8876                                  
  8877                                  ; =============== S U B	R O U T	I N E =======================================
  8878                                  
  8879                                  ; 15/10/2022
  8880                                  
  8881                                  ;----------------------------------------------------------------------------
  8882                                  ;
  8883                                  ; procedure : GetTickCnt
  8884                                  ;
  8885                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8886                                  ;		of rollover [except when power management driver is in use]. 
  8887                                  ;		Uses the following logic for updating Daycnt
  8888                                  ;
  8889                                  ;		if ( rollover ) {
  8890                                  ;			if ( t_switch )
  8891                                  ;				daycnt++ ;
  8892                                  ;			else
  8893                                  ;				daycnt += rollover ;
  8894                                  ;		}
  8895                                  ;
  8896                                  ; USES : AX
  8897                                  ;
  8898                                  ; RETURNS : CX:DX - tick count
  8899                                  ; MODIFIES : daycnt
  8900                                  ;
  8901                                  ;----------------------------------------------------------------------------
  8902                                  
  8903                                  		; 17/10/2022
  8904                                  GetTickCnt:	
  8905 0000047A 30E4                    		xor	ah, ah
  8906 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8907                                  					; Return: CX:DX	= clock	count
  8908                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8909                                  					; midnight
  8910                                  					; Otherwise, AL	> 0
  8911 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8912 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8913 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8914                                  					; and not flag
  8915 00000487 0106[F004]              		add	[daycnt], ax
  8916 0000048B C3                      		retn
  8917                                  ; ---------------------------------------------------------------------------
  8918                                  
  8919                                  inc_case:				
  8920 0000048C 08C0                    		or	al, al
  8921 0000048E 7404                    		jz	short no_rollover
  8922 00000490 FF06[F004]              		inc	word [daycnt]
  8923                                  no_rollover:				
  8924 00000494 C3                      		retn
  8925                                  
  8926                                  ;----------------------------------------------------------------------------
  8927                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8928                                  ;----------------------------------------------------------------------------
  8929                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8930                                  ; 09/03/2019 - Retro DOS v4.0
  8931                                  
  8932                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8933                                  ; 26/05/2018 - Retro DOS v3.0
  8934                                  ; 23/03/2018 - Retro DOS v2.0
  8935                                  
  8936                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8937                                  
  8938                                  ;struc BPB_TYPE
  8939                                  ;.SECSIZE:	resw 1
  8940                                  ;.SECALL:	resb 1
  8941                                  ;.RESNUM:	resw 1
  8942                                  ;.FATNUM:	resb 1
  8943                                  ;.DIRNUM:	resw 1
  8944                                  ;.SECNUM:	resw 1
  8945                                  ;.FATID:	resb 1
  8946                                  ;.FATSIZE:	resw 1
  8947                                  ;.SLIM:		resw 1
  8948                                  ;.HLIM:		resw 1
  8949                                  ;.HIDDEN:	resw 1
  8950                                  ;.size:
  8951                                  ;endstruc
  8952                                  
  8953                                  ;-----------------------------------------------------------------
  8954                                  ;	disk interface routines
  8955                                  ;-----------------------------------------------------------------
  8956                                  
  8957                                  ; device attribute bits:
  8958                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8959                                  
  8960                                  ;MAXERR		equ	5
  8961                                  ;MAX_HD_FMT_ERR	equ	2
  8962                                  
  8963                                  ;LSTDRV	equ 504h
  8964                                  
  8965                                  ; some floppies do not have changeline. as a result, media-check would
  8966                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8967                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8968                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8969                                  ; the time of the last successful disk operation and compare it with the current
  8970                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8971                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8972                                  ; since we cannot trust the timer to be always available, we record the number 
  8973                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8974                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8975                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8976                                  ; the time of last successful access, if we see that time has passed too,
  8977                                  ; we reset the counter.
  8978                                  
  8979                                  accessmax	equ	5
  8980                                  
  8981                                  ; due to various bogosities, we need to continually adjust what the head
  8982                                  ; settle time is.  the following algorithm is used:
  8983                                  ;
  8984                                  ;   get the current head settle value.
  8985                                  ;   if it is 0, then
  8986                                  ;	set slow = 15
  8987                                  ;   else
  8988                                  ;	set slow = value
  8989                                  ;   ...
  8990                                  ;*********************************************
  8991                                  ;************ old algorithm ******************
  8992                                  ;*   if we are seeking and writing then
  8993                                  ;*	 use slow
  8994                                  ;*   else
  8995                                  ;*	 use fast
  8996                                  ;*********************************************
  8997                                  ;*********** ibm's requested logic ***********
  8998                                  ;   if we are seeking and writing and not on an at then
  8999                                  ;	use slow
  9000                                  ;   else
  9001                                  ;	use fast
  9002                                  ;   ...
  9003                                  ;   restore current head settle value
  9004                                  ;
  9005                                  ;
  9006                                  ;---------------------------------------
  9007                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9008                                  					; it on after handling config.sys file as a
  9009                                  					; default value, if multrk_flag = multrk_off1.
  9010                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9011                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9012                                  
  9013                                  ; close data segment, open Bios_Code segment
  9014                                  
  9015                                  ; 15/10/2022
  9016                                  
  9017                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9018                                  
  9019                                  ;-----------------------------------------------------------------
  9020                                  ;	command jump table
  9021                                  ;-----------------------------------------------------------------
  9022                                  
  9023 00000495 00                      		db 0
  9024                                  
  9025                                  ; 11/12/2022
  9026                                  %if 0
  9027                                  
  9028                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9029                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9030                                  		dw 1742h		; dsk_init
  9031                                  		dw 4EBh			; media_chk
  9032                                  		dw 592h			; get_bpb
  9033                                  		dw 0D5h			; bc_cmderr
  9034                                  		dw 857h			; dsk_read
  9035                                  		dw 83Dh			; x_bus_exit
  9036                                  		dw 558h			; ret_carry_clear
  9037                                  		dw 558h			; ret_carry_clear
  9038                                  		dw 849h			; dsk_writ
  9039                                  		dw 841h			; dsk_writv
  9040                                  		dw 558h			; ret_carry_clear
  9041                                  		dw 558h			; ret_carry_clear
  9042                                  		dw 0D5h			; bc_cmderr
  9043                                  		dw 80Ah			; dsk_open
  9044                                  		dw 81Ah			; dsk_close
  9045                                  		dw 831h			; dsk_rem
  9046                                  		dw 558h			; ret_carry_clear
  9047                                  		dw 558h			; ret_carry_clear
  9048                                  		dw 558h			; ret_carry_clear
  9049                                  		dw 0C6Bh		; do_generic_ioctl
  9050                                  		dw 558h			; ret_carry_clear
  9051                                  		dw 558h			; ret_carry_clear
  9052                                  		dw 558h			; ret_carry_clear
  9053                                  		dw 1124h		; ioctl_getown
  9054                                  		dw 1142h		; ioctl_setown
  9055                                  		dw 129Ah		; ioctl_support_query
  9056                                  
  9057                                  ;dtbl_siz equ $-dsktbl
  9058                                  
  9059                                  %endif
  9060                                  		; 11/12/2022
  9061 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9062 00000497 [DF16]                  		dw dsk_init
  9063 00000499 [DF04]                  		dw media_chk
  9064 0000049B [8505]                  		dw get_bpb
  9065 0000049D [D500]                  		dw bc_cmderr
  9066 0000049F [3408]                  		dw dsk_read
  9067 000004A1 [1A08]                  		dw x_bus_exit
  9068 000004A3 [4B05]                  		dw ret_carry_clear
  9069 000004A5 [4B05]                  		dw ret_carry_clear
  9070 000004A7 [2608]                  		dw dsk_writ
  9071 000004A9 [1E08]                  		dw dsk_writv
  9072 000004AB [4B05]                  		dw ret_carry_clear
  9073 000004AD [4B05]                  		dw ret_carry_clear
  9074 000004AF [D500]                  		dw bc_cmderr
  9075 000004B1 [EA07]                  		dw dsk_open
  9076 000004B3 [F907]                  		dw dsk_close
  9077 000004B5 [0F08]                  		dw dsk_rem
  9078 000004B7 [4B05]                  		dw ret_carry_clear
  9079 000004B9 [4B05]                  		dw ret_carry_clear
  9080 000004BB [4B05]                  		dw ret_carry_clear
  9081 000004BD [420C]                  		dw do_generic_ioctl
  9082 000004BF [4B05]                  		dw ret_carry_clear
  9083 000004C1 [4B05]                  		dw ret_carry_clear
  9084 000004C3 [4B05]                  		dw ret_carry_clear
  9085 000004C5 [E810]                  		dw ioctl_getown
  9086 000004C7 [0511]                  		dw ioctl_setown
  9087 000004C9 [4E12]                  		dw ioctl_support_query
  9088                                  
  9089                                  dtbl_siz equ $-dsktbl
  9090                                  
  9091                                  ; =============== S U B	R O U T	I N E =======================================
  9092                                  
  9093                                  ; ---------------------------------------------------------------------------
  9094                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9095                                  ; the one that belongs to the drive specified. carry is set if none exists
  9096                                  ; for the drive. Pointer is returned in es:[di]
  9097                                  ;
  9098                                  ;  AL contains the logical drive number.
  9099                                  ; ---------------------------------------------------------------------------
  9100                                  
  9101                                  SetDrive:	
  9102                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9103 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9104                                  X_Scan_Loop:				
  9105 000004CF 26384505                		cmp	[es:di+5], al	
  9106 000004D3 7409                    		jz	short X_SetDrv
  9107 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9108 000004D8 83FFFF                  		cmp	di, 0FFFFh
  9109 000004DB 75F2                    		jnz	short X_Scan_Loop
  9110 000004DD F9                      		stc
  9111                                  X_SetDrv:				
  9112 000004DE C3                      		retn
  9113                                  
  9114                                  ; ---------------------------------------------------------------------------
  9115                                  
  9116                                  ; 15/10/2022
  9117                                  
  9118                                  ; ---------------------------------------------------------------------
  9119                                  ; if id is f9, have a 96tpi disk else
  9120                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9121                                  ;  otherwise if within 2 secs of last disk operation media could not
  9122                                  ;    have changed, otherwise dont know if media has changed
  9123                                  ; ---------------------------------------------------------------------
  9124                                  
  9125                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9126 000004DF E8E9FF                  		call	SetDrive
  9127 000004E2 BE0100                  		mov	si, 1
  9128 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9129                                  					; fchanged_by_format
  9130 000004EA 7416                    		jz	short WeAreNotFakingIt
  9131                                  		; 12/12/2022
  9132 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9133                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9134                                  					; ~fchanged_by_format ;	reset flag
  9135 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9136                                  					; Ensure that we ask the rom if media has changed
  9137 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9138                                  					; fnon_removable
  9139 000004FB 740C                    		jz	short wehaveafloppy
  9140 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9141 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9142                                  ; ---------------------------------------------------------------------------
  9143                                  
  9144                                  WeAreNotFakingIt:
  9145                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9146 00000502 26F6452301              		test	byte [es:di+23h], 1
  9147 00000507 7525                    		jnz	short Media_Done
  9148                                  wehaveafloppy:				
  9149 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9150                                  
  9151                                  		; If we have a floppy with changeline support, we ask the ROM
  9152                                  		; to determine if media has changed. We do not perform the
  9153                                  		; 2 second check for these drives.
  9154                                  
  9155 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9156 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9157 00000512 E89512                  		call	mediacheck	;  Call	into removable routine
  9158 00000515 7236                    		jb	short err_exitj
  9159 00000517 E8ED13                  		call	haschange
  9160 0000051A 7512                    		jnz	short Media_Done
  9161                                  mChk_NoChangeLine:
  9162                                  		; If we come here, we have a floppy with no changeline support
  9163                                  			
  9164 0000051C BE0100                  		mov	si, 1		; Presume no change
  9165 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9166 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9167                                  					; Is drive of last access the same?
  9168 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9169 00000528 E82800                  		call	Check_Time_Of_Access
  9170 0000052B EB01                    		jmp	short Media_Done
  9171                                  ; ---------------------------------------------------------------------------
  9172                                  
  9173                                  Media_Unk:				
  9174 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9175                                  
  9176                                  		; SI now contains the correct value for media change.
  9177                                  		; Clean up the left overs
  9178                                  Media_Done:	
  9179                                  		; 19/10/2022			
  9180 0000052E 06                      		push	es
  9181 0000052F C41E[1200]              		les	bx, [ptrsav]
  9182 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9183 00000537 07                      		pop	es
  9184 00000538 09F6                    		or	si, si
  9185 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9186 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9187 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9188 00000543 E84D13                  		call	media_set_vid
  9189                                  mChk1_NoChangeLine:			
  9190 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9191                                  					; Make sure we ask rom for media check
  9192                                  ret_carry_clear:			
  9193 0000054B F8                      		clc			; volidok
  9194 0000054C C3                      		retn
  9195                                  ; ---------------------------------------------------------------------------
  9196                                  
  9197                                  err_exitj:				
  9198 0000054D E87D06                  		call	maperror	; guaranteed to	set carry
  9199                                  ret81:					
  9200 00000550 B481                    		mov	ah, 81h		; return error status
  9201 00000552 C3                      		retn			; return with carry set
  9202                                  
  9203                                  ; =============== S U B	R O U T	I N E =======================================
  9204                                  
  9205                                  ; ---------------------------------------------------------------------------
  9206                                  ; perform a check on the time passed since the last access for this physical
  9207                                  ; drive.
  9208                                  ; we are accessing the same drive. if the time of last successful access was
  9209                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9210                                  ; returns in si:
  9211                                  ;	0 - if time of last access was >= 2 seconds
  9212                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9213                                  ; registers affected ax,cx,dx, flags.
  9214                                  ;
  9215                                  ;	assume es:di -> bds, ds->Bios_Data
  9216                                  ; ---------------------------------------------------------------------------
  9217                                  
  9218                                  		; 19/10/2022
  9219                                  Check_Time_Of_Access:
  9220 00000553 BE0100                  		mov	si, 1		; presume no change.
  9221 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9222 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9223                                  					; get stored time
  9224 0000055D 29C2                    		sub	dx, ax
  9225 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9226 00000563 19C1                    		sbb	cx, ax
  9227 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9228 00000567 09D2                    		or	dx, dx		; time must pass
  9229 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9230 0000056B FE06[1D01]              		inc	byte [accesscount]
  9231 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9232                                  					; if count is less than threshold, ok
  9233 00000574 720C                    		jb	short timecheck_ret
  9234 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9235 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9236                                  ; ---------------------------------------------------------------------------
  9237                                  
  9238                                  timepassed:				
  9239 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9240                                  					; min elapsed time? (2 seconds)
  9241 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9242                                  
  9243                                  		; everything indicates that we do not know what has happened.
  9244                                  timecheck_unk:				
  9245 00000581 4E                      		dec	si		; presume i don't know
  9246                                  timecheck_ret:				
  9247 00000582 C3                      		retn
  9248                                  
  9249                                  ; ---------------------------------------------------------------------------
  9250                                  ; 15/10/2022
  9251                                  Err_Exitj2:
  9252 00000583 EBC8                    		jmp	short err_exitj
  9253                                  
  9254                                  ; ---------------------------------------------------------------------------
  9255                                  
  9256                                  ; 15/10/2022
  9257                                  
  9258                                  ; ==========================================================================
  9259                                  ; Build a valid bpb for the disk in the drive.
  9260                                  ; ==========================================================================
  9261                                  
  9262                                  		; 19/10/2022
  9263                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9264 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9265 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9266 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9267                                  					; fnon_removable
  9268 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9269                                  
  9270                                  		; let's set the default value for volid,vol_serial,
  9271                                  		; filesys_id in bds table
  9272                                  
  9273 00000592 E83700                  		call	clear_ids
  9274                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9275 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9276 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9277 0000059D 72B1                    		jb	short ret81
  9278                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9279 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9280                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9281 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9282 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9283                                  					; otherwise, conventional boot record
  9284                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9285 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9286 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9287 000005B2 E85813                  		call	set_volume_id
  9288                                  already_gotbpb:				
  9289 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9290                                  					; return the bpb from the current bds
  9291                                  
  9292                                  ;		fall into setptrsav, es:di -> result
  9293                                  
  9294                                  ; ---------------------------------------------------------------------------
  9295                                  
  9296                                  ; 15/10/2022
  9297                                  
  9298                                  ; ==========================================================================
  9299                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9300                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9301                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9302                                  ;It fails, for instance, when we install an external drive using driver.sys
  9303                                  ;because then the BDS segment is no longer Bios_Data. 
  9304                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9305                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9306                                  ;restored before returning to the caller.
  9307                                  ; ==========================================================================
  9308                                  
  9309                                  		; 19/10/2022
  9310                                  SetPtrSav:	; return point for dsk_init				
  9311 000005B8 8CC1                    		mov	cx, es		; save es
  9312                                  		;les	bx, ds:ptrsav
  9313 000005BA C41E[1200]              		les	bx, [ptrsav]
  9314 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9315 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9316 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9317 000005CA F8                      		clc
  9318 000005CB C3                      		retn
  9319                                  
  9320                                  ; =============== S U B	R O U T	I N E =======================================
  9321                                  
  9322                                  ; 15/10/2022
  9323                                  
  9324                                  ; -----------------------------------------------------
  9325                                  ; clear ids in bds table. only applied for floppies.
  9326                                  ;input:  es:di -> bds table
  9327                                  ;	assumes ds: -> Bios_Data
  9328                                  ;output: volid set to "NO NAME    "
  9329                                  ;	 vol_serial set to 0.
  9330                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9331                                  ;	   depending on the flag fatsize in bds.
  9332                                  ;
  9333                                  ;	trashes si, cx
  9334                                  ; -----------------------------------------------------
  9335                                  
  9336                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9337                                  ;size_of_EXT_SYSTEM_ID equ 8
  9338                                  
  9339                                  clear_ids:
  9340                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9341 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9342                                  clear_ids_x:	; 11/09/2023		
  9343                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9344 000005D0 57                      		push	di
  9345 000005D1 31C9                    		xor	cx, cx		; no serial number
  9346 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9347 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9348                                  
  9349                                  		; BUGBUG - there's a lot in common here and with
  9350                                  		; mov_media_ids.. see if we can save some space by
  9351                                  		; merging them... jgl
  9352                                  
  9353                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9354                                  		; 10/12/2022
  9355 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9356                                  
  9357                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9358 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9359 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9360 000005E3 F3A4                    		rep movsb
  9361                                  		
  9362                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9363                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9364                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9365                                  		;test	byte [es:di+1Fh], 40h
  9366                                  
  9367                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9368                                  			; Microsoft/IBM code has a bug here because the BDS's
  9369                                  			; .volid and .filesys_id fields will be reset
  9370                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9371                                  			; at the BDS offset 31 but current (this) code checks flags
  9372                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9373                                  			;
  9374                                  			; Correct Code:
  9375                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9376                                  			; 11/09/2023
  9377                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9378                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9379                                  			;
  9380                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9381                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9382                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9383                                  			;
  9384                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9385                                  			; 'clear_ids' is used for floppy disks only and the default
  9386                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9387                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9388                                  
  9389 000005E5 A840                    		test	al, 40h ; * 
  9390                                  		
  9391                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9392 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9393 000005EA 7503                    		jnz	short ci_bigfat
  9394                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9395 000005EC BE[0B05]                		mov	si, fat_12_id	; 19/10/2022
  9396                                  ci_bigfat:				
  9397                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9398                                  		; 10/12/2022
  9399 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9400 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9401                                  					; filesys_id field
  9402 000005F4 F3A4                    		rep movsb
  9403 000005F6 5F                      		pop	di		; restore bds pointer
  9404                                  getret_exit:		; 21/12/2023
  9405 000005F7 C3                      		retn
  9406                                  
  9407                                  ; =============== S U B	R O U T	I N E =======================================
  9408                                  
  9409                                  ; 15/10/2022
  9410                                  
  9411                                  ; ---------------------------------------------------------------------------
  9412                                  ;	getbp - return bpb from the drive specified by the bds.
  9413                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9414                                  ;	    note that we never come here for fixed disks.
  9415                                  ;	    for all other cases,
  9416                                  ;	      - it reads boot sector to pull out the bpb
  9417                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9418                                  ;		to get the fat id byte to build the bpb from there.
  9419                                  ;
  9420                                  ;   inputs:	es:di point to correct bds.
  9421                                  ;
  9422                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9423                                  ;		carry set, and al=7 if invalid disk.
  9424                                  ;		carry set and error code in al if other error.
  9425                                  ;		if failed to recognize the boot record, then will set the
  9426                                  ;		set_id_flag to 0.
  9427                                  ;		this routine will only work for a floppy diskette.
  9428                                  ;		     for a fixed disk, it will just return.
  9429                                  ;
  9430                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9431                                  ;	  segment definitions. It should be migrated towards.
  9432                                  ;	   now es:di has the bds, ds: has Bios_Data
  9433                                  ; ---------------------------------------------------------------------------
  9434                                  
  9435                                  GetBp:		; if returning fake bpb then return bpb as is.
  9436                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable
  9437 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9438                                  		;jz	short getbp1	; getbp1
  9439                                  		;jmp	getret_exit
  9440                                  		; 21/12/2023
  9441 000005FD 75F8                    		jnz	short getret_exit
  9442                                  ; ---------------------------------------------------------------------------
  9443                                  getbp1:
  9444 000005FF 51                      		push	cx
  9445 00000600 52                      		push	dx
  9446 00000601 53                      		push	bx
  9447                                  
  9448                                  		; attempt to read in boot sector and determine bpb.
  9449                                  		; we assume that the 2.x and greater dos disks all
  9450                                  		; have a valid boot sector.
  9451                                  
  9452 00000602 E8A400                  		call	readbootsec
  9453 00000605 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9454 00000607 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9455 00000609 7508                    		jnz	short dofatbpb
  9456 0000060B E8F000                  		call	movbpb		; move bpb into	registers
  9457 0000060E EB57                    		jmp	short Has1
  9458                                  ; ---------------------------------------------------------------------------
  9459                                  
  9460                                  getbp_err_ret_brdg:
  9461 00000610 E98200                  		jmp	getbp_err_ret
  9462                                  ; ---------------------------------------------------------------------------
  9463                                  
  9464                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9465                                  		; and fill in bpb from there.
  9466                                  dofatbpb:
  9467 00000613 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9468 00000616 72F8                    		jb	short getbp_err_ret_brdg
  9469                                  		;cmp	ds:fhave96, 0	; changeline support available?
  9470 00000618 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9471 0000061D 7403                    		jz	short bpb_nochangeline	; brif not
  9472 0000061F E88612                  		call	hidensity	; may not return! May add sp, 2	and
  9473                                  					; jump to has1!!!!!! or	has720K
  9474                                  bpb_nochangeline:		; test for a valid 3.5" medium
  9475 00000622 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9476                                  					; ffSmall
  9477 00000627 7515                    		jnz	short is_floppy
  9478 00000629 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9479 0000062C 7571                    		jnz	short got_unknown_medium
  9480                                  Has720K:				
  9481                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9482 0000062E BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9483                                  
  9484                                  		; es points to segment of bds. the following should be modified
  9485                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9486                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9487                                  
  9488                                  		; 10/12/2022
  9489                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9490                                  		; 21/12/2022
  9491 00000631 8A07                    		mov	al, [bx]
  9492 00000633 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9493 00000636 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9494 00000639 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9495                                  		; 19/10/2022 - Temporary !
  9496                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9497                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9498                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9499                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
  9500                                  
  9501 0000063C EB29                    		jmp	short Has1
  9502                                  ; ---------------------------------------------------------------------------
  9503                                  
  9504                                  is_floppy:			; must be a 5.25" floppy if we come here
  9505 0000063E 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9506 00000641 725C                    		jb	short got_unknown_medium
  9507 00000643 B001                    		mov	al, 1		; set number of	fat sectors
  9508 00000645 BB0840                  		mov	bx, 16392	; 64*256+8
  9509                                  					; set dir entries and sector max
  9510 00000648 B94001                  		mov	cx, 320		; 40*8
  9511                                  					; set size of drive
  9512 0000064B BA0101                  		mov	dx, 257		; 01*256+1
  9513                                  					; set head limit and sec/all unit
  9514 0000064E F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9515 00000651 7507                    		jnz	short has8	; nz = has 8 sectors
  9516 00000653 FEC0                    		inc	al		; inc number of	fat sectors
  9517 00000655 FEC3                    		inc	bl		; inc sector max
  9518                                  		;add	cx, 40		; increase size	(to 360)
  9519                                  		; 18/12/2022
  9520 00000657 80C128                  		add	cl, 40
  9521                                  has8:
  9522 0000065A F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9523 0000065D 7408                    		jz	short Has1	; jz = 1 head
  9524 0000065F 01C9                    		add	cx, cx		; double size of disk
  9525 00000661 B770                    		mov	bh, 112		; increase number of directory entries
  9526 00000663 FEC6                    		inc	dh		; inc sec/all unit
  9527 00000665 FEC2                    		inc	dl		; inc head limit
  9528                                  Has1:
  9529 00000667 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9530 0000066B 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9531 0000066F 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9532 00000673 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9533 00000677 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9534 0000067B 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9535 0000067F 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9536                                  
  9537                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9538                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9539                                  		; to 0 since this code is for floppies
  9540                                  
  9541                                  		; 18/12/2022
  9542                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9543                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9544                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9545                                  		; 18/12/2022
  9546 00000683 29C9                    		sub	cx, cx
  9547 00000685 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9548 00000689 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9549 0000068D 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9550                                  getret:
  9551 00000691 5B                      		pop	bx
  9552 00000692 5A                      		pop	dx
  9553 00000693 59                      		pop	cx
  9554                                  ;getret_exit:		; 21/12/2023
  9555 00000694 C3                      		retn
  9556                                  ; ---------------------------------------------------------------------------
  9557                                  
  9558                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
  9559                                  		;mov	ds:set_id_flag,	0
  9560                                  		; 19/10/2022
  9561 00000695 C606[0A05]00            		mov	byte [set_id_flag], 0
  9562 0000069A E83005                  		call	maperror
  9563 0000069D EBF2                    		jmp	short getret
  9564                                  ; ---------------------------------------------------------------------------
  9565                                  
  9566                                  		; we have a 3.5" diskette for which we cannot build a bpb.
  9567                                  		; we do	not assume any type of bpb for this medium.
  9568                                  
  9569                                  got_unknown_medium:
  9570                                  		;mov	ds:set_id_flag,	0
  9571 0000069F C606[0A05]00            		mov	byte [set_id_flag], 0
  9572 000006A4 B007                    		mov	al, 7
  9573 000006A6 F9                      		stc
  9574 000006A7 EBE8                    		jmp	short getret
  9575                                  
  9576                                  ; =============== S U B	R O U T	I N E =======================================
  9577                                  
  9578                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9579                                  
  9580                                  ; ----------------------------------------------------------------
  9581                                  ; read in the boot sector. set carry if error in reading sector.
  9582                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9583                                  ;
  9584                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9585                                  ; ----------------------------------------------------------------
  9586                                  
  9587                                  ; 10/03/2019 - Retro DOS v4.0
  9588                                  
  9589                                  readbootsec:	
  9590 000006A9 B600                    		mov	dh, 0		; head 0
  9591 000006AB B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9592 000006AE E8C600                  		call	read_sector
  9593 000006B1 724A                    		jb	short err_ret
  9594 000006B3 31DB                    		xor	bx, bx		; assume valid boot sector
  9595                                  
  9596                                  		; put a sanity check for the boot sector in here to detect
  9597                                  		; boot sectors that do not have valid bpbs. we examine the
  9598                                  		; first two bytes - they must contain a long jump (69h) or a
  9599                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9600                                  		; (E9h). if this test is passed, we further check by examining
  9601                                  		; the signature at the end of the boot sector for the word
  9602                                  		; AA55h. if the signature is not present, we examine the media
  9603                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9604                                  		; logic is modified a little bit. we are not going to check
  9605                                  		; signature. instead we are going to sanity check the media
  9606                                  		; byte in bpb regardless of the validity of signature. this is
  9607                                  		; to save the already developed commercial products that have
  9608                                  		; good jump instruction and signature but with the false bpb
  9609                                  		; informations
  9610                                  
  9611                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9612                                  
  9613                                  		; 19/10/2022
  9614 000006B5 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9615 000006BA 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9616 000006BC 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9617 000006C1 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9618 000006C3 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9619 000006C8 7531                    		jnz	short invalidbootsec
  9620 000006CA 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9621 000006CF 752A                    		jnz	short invalidbootsec
  9622                                  
  9623                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9624                                  ;
  9625                                  ;; 10/03/2019
  9626                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9627                                  ;;
  9628                                  ;; Don't have to perform the following signature check since
  9629                                  ;; we need to check the media byte even with the good signatured diskette.
  9630                                  ;;
  9631                                  ;;check_signature:
  9632                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9633                                  ;;							 ; disk or 1.x media.
  9634                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9635                                  ;;					       ; may need some special handling
  9636                                  
  9637                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9638                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9639                                  ; by examining the media descriptor in the boot sector.
  9640                                  
  9641                                  		; 19/10/2022
  9642                                  check_bpb_mediabyte:			
  9643 000006D1 A0[6301]                		mov	al, [disksector+15h]
  9644                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9645 000006D4 24F0                    		and	al, 0F0h
  9646 000006D6 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9647 000006D8 7521                    		jnz	short invalidbootsec
  9648                                  
  9649                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9650                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9651                                  ; sectors. these are specifically diskettes that were formatted in drives
  9652                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9653                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9654                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9655                                  ; help our build bpb routine to recognise these specific cases, and to
  9656                                  ; set up out copy of the bpb accordingly.
  9657                                  ; we do this by checking to see if the boot sector is off a diskette that
  9658                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9659                                  ; sec/clus field to 1. if not, we carry on as normal.
  9660                                  
  9661                                  checksinglesided:
  9662 000006DA A0[6301]                		mov	al, [disksector+15h]
  9663 000006DD 3CF0                    		cmp	al, 0F0h
  9664 000006DF 741B                    		jz	short gooddsk
  9665 000006E1 A801                    		test	al, 1
  9666 000006E3 7517                    		jnz	short gooddsk
  9667 000006E5 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9668 000006EB 7507                    		jnz	short mustbeearlier
  9669 000006ED 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9670 000006F2 7308                    		jnb	short gooddsk
  9671                                  
  9672                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9673                                  
  9674                                  mustbeearlier:				
  9675 000006F4 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9676                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9677 000006F9 EB01                    		jmp	short gooddsk
  9678                                  ; ---------------------------------------------------------------------------
  9679                                  
  9680                                  invalidbootsec:				
  9681 000006FB 43                      		inc	bx		; indicate that boot sector invalid
  9682                                  		; 10/12/2022
  9683                                  movbpb_ret:
  9684                                  gooddsk:				
  9685 000006FC F8                      		clc
  9686                                  err_ret:
  9687 000006FD C3                      		retn
  9688                                  ; ---------------------------------------------------------------------------
  9689                                  
  9690                                  		; 10/12/2022
  9691                                  ;err_ret:				
  9692                                  		;retn
  9693                                  
  9694                                  ; =============== S U B	R O U T	I N E =======================================
  9695                                  
  9696                                  ; 15/10/2022
  9697                                  ; ---------------------------------------------------------------------------
  9698                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9699                                  ; getbp routine at has1
  9700                                  ;
  9701                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9702                                  ; serial number, volume label, file system id in bds according to
  9703                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9704                                  ; to signal that volume label is set already from the extended boot record
  9705                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9706                                  ; the volume label in the root directory.)
  9707                                  ; ---------------------------------------------------------------------------
  9708                                  
  9709                                  ; 10/03/2019 - Retro DOS v4.0
  9710                                  
  9711                                  		; 19/10/2022
  9712                                  movbpb:	
  9713 000006FE 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9714                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9715                                  					; sectors per unit
  9716 00000702 8A3E[5F01]              		mov	bh, [disksector+11h]
  9717                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9718                                  					; number of directory entries
  9719 00000706 8B0E[6101]              		mov	cx, [disksector+13h]
  9720                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9721                                  					; size of drive
  9722 0000070A 8A26[6301]              		mov	ah, [disksector+15h]
  9723                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9724                                  					; media	descriptor
  9725 0000070E A0[6401]                		mov	al, [disksector+16h];
  9726                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9727                                  					; number of fat	sectors
  9728 00000711 8A1E[6601]              		mov	bl, [disksector+18h]
  9729                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9730                                  					; sectors per track
  9731 00000715 8A16[6801]              		mov	dl, [disksector+1Ah]
  9732                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9733                                  					; number of heads
  9734 00000719 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9735 0000071E 75DC                    		jnz	short movbpb_ret
  9736 00000720 E81200                  		call	mov_media_ids
  9737 00000723 7205                    		jb	short movbpb_conv ; conventional boot record?
  9738 00000725 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9739                                  movbpb_conv:				
  9740 0000072A 803E[7700]01            		cmp	byte [fhave96], 1
  9741 0000072F 75CB                    		jnz	short movbpb_ret
  9742 00000731 E8CD11                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9743                                  		; 10/12/2022
  9744                                  		; cf = 0
  9745                                  ;movbpb_ret:				
  9746                                  		;clc
  9747 00000734 C3                      		retn
  9748                                  
  9749                                  ; =============== S U B	R O U T	I N E =======================================
  9750                                  
  9751                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9752                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9753                                  ;by es:di.
  9754                                  
  9755                                  ;in.) es:di -> bds
  9756                                  ;     ds:disksector = valid extended boot record.
  9757                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9758                                  ;      the boot record information.
  9759                                  ;     carry flag set if not an extended bpb.
  9760                                  ;     all registers saved except the flag.
  9761                                  
  9762                                  		; 19/10/2022
  9763                                  mov_media_ids:		
  9764 00000735 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9765                                  					; [disksector+EXT_BOOT.SIG],
  9766                                  					; EXT_BOOT_SIGNATURE
  9767 0000073A 752C                    		jnz	short mmi_not_ext
  9768 0000073C 51                      		push	cx
  9769 0000073D 8B0E[7501]              		mov	cx, [disksector+27h]
  9770                                  					; [disksector+EXT_BOOT.SERIAL]
  9771 00000741 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9772 00000745 8B0E[7701]              		mov	cx, [disksector+29h]
  9773                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9774 00000749 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9775 0000074D 57                      		push	di
  9776 0000074E 56                      		push	si
  9777 0000074F B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9778 00000752 BE[7901]                		mov	si, disksector+2Bh
  9779                                  		;mov	si, (offset disksector+2Bh) ;
  9780                                  					; disksector+EXT_BOOT.VOL_LABEL
  9781 00000755 83C74B                  		add	di, 75		; BDS.volid
  9782 00000758 F3A4                    		rep movsb
  9783                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9784                                  		; 10/12/2022
  9785 0000075A B108                    		mov	cl, 8 ; cx = 8
  9786 0000075C BE[8401]                		mov	si, disksector+36h
  9787                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9788 0000075F 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9789 00000762 F3A4                    		rep movsb
  9790 00000764 5E                      		pop	si
  9791 00000765 5F                      		pop	di
  9792 00000766 59                      		pop	cx
  9793                                  		; 10/12/2022
  9794                                  		; cf = 0
  9795                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9796                                  				; (20/09/2022)
  9797 00000767 C3                      		retn
  9798                                  ; ---------------------------------------------------------------------------
  9799                                  
  9800                                  mmi_not_ext:				
  9801 00000768 F9                      		stc
  9802 00000769 C3                      		retn
  9803                                  
  9804                                  ; =============== S U B	R O U T	I N E =======================================
  9805                                  
  9806                                  ; 15/10/2022
  9807                                  ; --------------------------------------------------------------
  9808                                  ; read in the fat sector and get the media byte from it.
  9809                                  ; input : es:di -> bds
  9810                                  ; output:
  9811                                  ;	  carry set if an error occurs, ax contains error code.
  9812                                  ;	  otherwise, ah contains media byte on exit
  9813                                  ; --------------------------------------------------------------
  9814                                  
  9815                                  readfat:	
  9816                                  		;mov	dh, 0
  9817                                  		; 10/12/2022
  9818 0000076A 30F6                    		xor	dh, dh
  9819 0000076C B90200                  		mov	cx, 2		; head 0
  9820                                  					; cylinder 0, sector 2
  9821 0000076F E80500                  		call	read_sector
  9822 00000772 7202                    		jb	short bad_fat_ret
  9823 00000774 8A27                    		mov	ah, [bx]	; media	byte
  9824                                  bad_fat_ret:				
  9825 00000776 C3                      		retn
  9826                                  
  9827                                  ; =============== S U B	R O U T	I N E =======================================
  9828                                  
  9829                                  ; 15/10/2022
  9830                                  
  9831                                  ; ---------------------------------------------------------------------------
  9832                                  ; read a single sector into the temp buffer.
  9833                                  ; perform three retries in case of error.
  9834                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9835                                  ;		cx has sector and cylinder
  9836                                  ;		dh has head
  9837                                  ;		es:di has bds
  9838                                  ;		ds has Bios_Data
  9839                                  ;
  9840                                  ;   outputs:	carry clear
  9841                                  ;		    Bios_Data:bx point to sector
  9842                                  ;		       (note: some callers assume location of buffer)
  9843                                  ;
  9844                                  ;		carry set
  9845                                  ;		    ax has rom error code
  9846                                  ;
  9847                                  ; register bp is preserved.
  9848                                  ; ---------------------------------------------------------------------------
  9849                                  
  9850                                  ; 10/03/2019 - Retro DOS v4.0
  9851                                  
  9852                                  		; 19/10/2022
  9853                                  read_sector:	
  9854 00000777 55                      		push	bp
  9855 00000778 BD0300                  		mov	bp, 3		; make 3 attempts
  9856 0000077B 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9857 0000077F BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9858                                  rd_ret:					
  9859 00000782 06                      		push	es
  9860 00000783 1E                      		push	ds
  9861 00000784 07                      		pop	es
  9862 00000785 B80102                  		mov	ax, 201h
  9863 00000788 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9864                                  					; AL = number of sectors to read, CH = track, CL = sector
  9865                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9866                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9867 0000078A 07                      		pop	es
  9868 0000078B 734A                    		jnb	short okret2
  9869                                  rd_rty:					
  9870 0000078D E87504                  		call	again		; reset	disk, decrement	bp, preserve ax
  9871 00000790 7442                    		jz	short err_rd_ret
  9872 00000792 26F6452301              		test	byte [es:di+23h], 1
  9873                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9874                                  					; fnon_removable
  9875 00000797 75E9                    		jnz	short rd_ret
  9876 00000799 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9877 0000079E 7510                    		jnz	short rd_skip1_dpt
  9878 000007A0 50                      		push	ax
  9879 000007A1 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9880 000007A2 C536[2D01]              		lds	si, [dpt]
  9881                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9882                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9883                                  		;			; NORMSETTLE
  9884                                  		; 12/12/2022
  9885 000007A6 B00F                    		mov	al, 15
  9886 000007A8 864409                  		xchg	al, [si+9]
  9887                                  		; 
  9888 000007AB 1F                      		pop	ds
  9889 000007AC A2[2A01]                		mov	[save_head_sttl], al
  9890 000007AF 58                      		pop	ax
  9891                                  rd_skip1_dpt:				
  9892 000007B0 06                      		push	es
  9893 000007B1 1E                      		push	ds
  9894 000007B2 07                      		pop	es
  9895 000007B3 B80102                  		mov	ax, 201h
  9896 000007B6 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9897                                  					; AL = number of sectors to read, CH = track, CL = sector
  9898                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9899                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9900 000007B8 07                      		pop	es
  9901 000007B9 9C                      		pushf
  9902 000007BA 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9903 000007BF 750E                    		jnz	short rd_skip2_dpt
  9904 000007C1 50                      		push	ax
  9905 000007C2 A0[2A01]                		mov	al, [save_head_sttl]
  9906 000007C5 1E                      		push	ds
  9907 000007C6 C536[2D01]              		lds	si, [dpt]
  9908 000007CA 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9909 000007CD 1F                      		pop	ds
  9910 000007CE 58                      		pop	ax
  9911                                  rd_skip2_dpt:				
  9912 000007CF 9D                      		popf
  9913 000007D0 7305                    		jnb	short okret2
  9914 000007D2 EBB9                    		jmp	short rd_rty
  9915                                  ; ---------------------------------------------------------------------------
  9916                                  
  9917                                  err_rd_ret:				
  9918 000007D4 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9919                                  					; return error
  9920 000007D6 F9                      		stc
  9921                                  
  9922                                  ; update information pertaining to last drive accessed, time of access, last
  9923                                  ; track accessed in that drive.
  9924                                  
  9925                                  okret2:					
  9926 000007D7 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9927 000007DB 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9928 000007DF 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9929                                  					; save last track accessed on this drive
  9930                                  					; preserve flags in case error occurred
  9931 000007E3 9C                      		pushf
  9932 000007E4 E8FE03                  		call	set_tim
  9933 000007E7 9D                      		popf			; restore flags
  9934 000007E8 5D                      		pop	bp
  9935 000007E9 C3                      		retn
  9936                                  
  9937                                  ;----------------------------------------------------------------------------
  9938                                  ;	disk open/close routines
  9939                                  ;----------------------------------------------------------------------------
  9940                                  
  9941                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9942 000007EA 803E[7700]00            		cmp	byte [fhave96], 0
  9943 000007EF 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9944 000007F1 E8D7FC                  		call	SetDrive	; get bds for drive
  9945 000007F4 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9946                                  dsk_open_exit:	
  9947                                  		; 10/12/2022
  9948                                  		; cf = 0			
  9949                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9950                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9951 000007F8 C3                      		retn
  9952                                  ; ---------------------------------------------------------------------------
  9953                                  
  9954                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9955 000007F9 803E[7700]00            		cmp	byte [fhave96], 0
  9956 000007FE 740E                    		jz	short exitjx	; done if no changeline	support
  9957 00000800 E8C8FC                  		call	SetDrive	; get bds for drive
  9958 00000803 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9959 00000808 7404                    		jz	short exitjx	; watch	out for	wrap
  9960 0000080A 26FF4D20                		dec	word [es:di+20h]
  9961                                  exitjx:					
  9962                                  		; 10/12/2022
  9963                                  		; cf = 0
  9964                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9965                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9966 0000080E C3                      		retn
  9967                                  
  9968                                  ;----------------------------------------------------------------------------
  9969                                  ;		disk removable routine
  9970                                  ;----------------------------------------------------------------------------
  9971                                  
  9972                                  		; al is	unit #
  9973                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9974 0000080F E8B9FC                  		call	SetDrive	; get bds for this drive
  9975                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9976 00000812 26F6452301              		test	byte [es:di+23h], 1
  9977                                  		;jnz	short x_bus_exit ; non_rem
  9978 00000817 7501                    		jnz	short non_rem	; 15/10/2022
  9979                                  		; 10/12/2022
  9980                                  		; cf = 0
  9981                                  		;clc			; CF is already ZERO here
  9982                                  					; 15/10/2022
  9983 00000819 C3                      		retn
  9984                                  ; ---------------------------------------------------------------------------
  9985                                  
  9986                                  non_rem:
  9987                                  x_bus_exit:				
  9988 0000081A B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9989                                  					; return busy status
  9990 0000081C F9                      		stc
  9991                                  dsk_ret:				
  9992 0000081D C3                      		retn
  9993                                  
  9994                                  ;----------------------------------------------------------------------------
  9995                                  ;		disk i/o routines
  9996                                  ;----------------------------------------------------------------------------
  9997                                  
  9998                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9999                                  		;mov	word [wrtverify], 103h
 10000                                  		; 19/10/2022
 10001 0000081E C706[2001]0301          		mov	word [rflag], 103h
 10002                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10003 00000824 EB06                    		jmp	short dsk_cl
 10004                                  ; ---------------------------------------------------------------------------
 10005                                  
 10006                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10007                                  		;mov	word [wrtverify], 3
 10008                                  		; 19/10/2022
 10009 00000826 C706[2001]0300          		mov	word [rflag], 3
 10010                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10011                                  
 10012                                  dsk_cl:					
 10013 0000082C E89800                  		call	diskio		; romwrite
 10014                                  ; ---------------------------------------------------------------------------
 10015                                  
 10016                                  dsk_io:					
 10017 0000082F 73EC                    		jnb	short dsk_ret
 10018 00000831 E9A3F8                  		jmp	bc_err_cnt
 10019                                  ; ---------------------------------------------------------------------------
 10020                                  
 10021                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10022 00000834 E88B00                  		call	diskrd
 10023 00000837 EBF6                    		jmp	short dsk_io
 10024                                  
 10025                                  ; =============== S U B	R O U T	I N E =======================================
 10026                                  
 10027                                  ; 15/10/2022
 10028                                  ; 10/03/2019 - Retro DOS v4.0
 10029                                  
 10030                                  ;-----------------------------------------------------------
 10031                                  ; miscellaneous odd jump routines. 
 10032                                  ; moved out of mainline for speed.
 10033                                  
 10034                                  ; if we have a system where we have virtual drives, we need 
 10035                                  ; to prompt the user to place the correct disk in the drive.
 10036                                  ;
 10037                                  ;	assume es:di -> bds, ds:->Bios_Data
 10038                                  ;-----------------------------------------------------------
 10039                                  
 10040                                  		; 19/10/2022
 10041                                  checksingle:		
 10042 00000839 50                      		push	ax
 10043 0000083A 53                      		push	bx
 10044 0000083B 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10045                                  
 10046                                  ; if hard drive, cannot change disk.
 10047                                  ; if current owner of physical drive, no need to change diskette.
 10048                                  
 10049 0000083F F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10050 00000842 7573                    		jnz	short singleret
 10051 00000844 F6C310                  		test	bl, 10h		; fi_am_mult
 10052                                  					; is there a drive sharing this	physical drive?
 10053 00000847 746E                    		jz	short singleret
 10054                                  
 10055                                  
 10056                                  ; look for the previous owner of this physical drive
 10057                                  ; and reset its ownership flag.
 10058                                  
 10059 00000849 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10060                                  					; get physical drive number
 10061 0000084D 06                      		push	es		; preserve pointer to current bds
 10062 0000084E 57                      		push	di
 10063 0000084F C43E[1901]              		les	di, [start_bds] ; get first bds
 10064                                  scan_list:				
 10065 00000853 26384504                		cmp	[es:di+4], al
 10066 00000857 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10067 00000859 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10068 0000085B 26845D23                		test	[es:di+23h], bl
 10069 0000085F 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10070 00000861 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10071 00000865 5F                      		pop	di		; restore pointer to current bds
 10072 00000866 07                      		pop	es
 10073 00000867 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10074                                  
 10075                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10076                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10077                                  ; in this case.
 10078 0000086B 803E[7A00]01            		cmp	byte [fsetowner], 1
 10079 00000870 7517                    		jnz	short not_fsetowner
 10080                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10081 00000872 26807D0400              		cmp	byte [es:di+4], 0
 10082 00000877 753E                    		jnz	short singleret
 10083 00000879 268A4505                		mov	al, [es:di+5]
 10084                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10085                                  					; get the DOS drive letter
 10086 0000087D 06                      		push	es
 10087 0000087E 8E06[1A00]              		mov	es, [zeroseg]
 10088 00000882 26A20405                		mov	[es:LSTDRV], al
 10089                                  		;mov	es:504h, al	; [es:LSTDRV]
 10090                                  					; set up sdsb
 10091 00000886 07                      		pop	es		; restore bds pointer
 10092 00000887 EB2E                    		jmp	short singleret
 10093                                  ; ---------------------------------------------------------------------------
 10094                                  
 10095                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10096                                  ; we now check to see if we are in a single drive system and the application
 10097                                  ; has "cleverly" diddled the sdsb
 10098                                  
 10099                                  not_fsetowner:				
 10100 00000889 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10101 0000088E 7517                    		jnz	short ignore_sdsb
 10102 00000890 50                      		push	ax
 10103 00000891 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10104 00000895 88C4                    		mov	ah, al
 10105 00000897 06                      		push	es
 10106 00000898 8E06[1A00]              		mov	es, [zeroseg]
 10107 0000089C 2686060405              		xchg	al, [es:LSTDRV]
 10108                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10109                                  					; then swap(curr_drv,req_drv)
 10110 000008A1 07                      		pop	es
 10111 000008A2 38C4                    		cmp	ah, al		; else
 10112 000008A4 58                      		pop	ax		; swap(curr_drv,req_drv)
 10113 000008A5 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10114                                  ignore_sdsb:				
 10115 000008A7 E8790E                  		call	swpdsk
 10116 000008AA EB0B                    		jmp	short singleret
 10117                                  ; ---------------------------------------------------------------------------
 10118                                  
 10119                                  scan_skip:	
 10120 000008AC 26C43D                  		les	di, [es:di]			
 10121                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10122                                  					; go to	next bds
 10123 000008AF 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10124 000008B2 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10125 000008B4 F9                      		stc
 10126 000008B5 5F                      		pop	di		; restore current bds
 10127 000008B6 07                      		pop	es
 10128                                  
 10129                                  singleret:				
 10130 000008B7 5B                      		pop	bx
 10131 000008B8 58                      		pop	ax
 10132 000008B9 C3                      		retn
 10133                                  
 10134                                  ; ---------------------------------------------------------------------------
 10135                                  
 10136                                  baddrive:				
 10137 000008BA B008                    		mov	al, 8		; sector not found
 10138 000008BC EB02                    		jmp	short baddrive_ret
 10139                                  ; ---------------------------------------------------------------------------
 10140                                  
 10141                                  unformatteddrive:				
 10142 000008BE B007                    		mov	al, 7		; unknown media
 10143                                  baddrive_ret:				
 10144 000008C0 F9                      		stc
 10145                                  ; ---------------------------------------------------------------------------
 10146                                  
 10147                                  ioret:		
 10148 000008C1 C3                      		retn
 10149                                  
 10150                                  ; ---------------------------------------------------------------------------
 10151                                  
 10152                                  ; 15/10/2022
 10153                                  
 10154                                  ; ---------------------------------------------------------------------------
 10155                                  ;	disk i/o handler
 10156                                  ;
 10157                                  ;	al = drive number (0-6)
 10158                                  ;	ah = media descriptor
 10159                                  ;	cx = sector count
 10160                                  ;	dx = first sector (low)
 10161                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10162                                  ;	ds = cs
 10163                                  ;	es:di = transfer address
 10164                                  ;	[rflag]=operation (2=read, 3=write)
 10165                                  ;	[verify]=1 for verify after write
 10166                                  ;
 10167                                  ;	if successful carry flag = 0
 10168                                  ;	  else cf=1 and al contains error code
 10169                                  ; ---------------------------------------------------------------------------
 10170                                  
 10171                                  diskrd:	
 10172                                  		;mov	ds:rflag, 2	; romread
 10173                                  		; 19/10/2022
 10174 000008C2 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10175                                  
 10176                                  ; =============== S U B	R O U T	I N E =======================================
 10177                                  
 10178                                  		; 19/10/2022
 10179                                  diskio:
 10180 000008C7 89FB                    		mov	bx, di		; es:bx	= transfer address
 10181 000008C9 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10182 000008CD E8FBFB                  		call	SetDrive
 10183 000008D0 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10184 000008D4 A2[1F01]                		mov	[medbyt], al
 10185                                  		;jcxz	short ioret
 10186 000008D7 E3E8                    		jcxz	ioret
 10187                                  
 10188                                  ; see if the media is formatted or not by checking the flags field in
 10189                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10190                                  ; go to the error exit at label unformatteddrive.
 10191                                  
 10192 000008D9 26F6452402              		test	byte [es:di+24h], 2
 10193                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10194                                  					; unformatted_media
 10195 000008DE 75DE                    		jnz	short unformatteddrive
 10196 000008E0 890E[2201]              		mov	[seccnt], cx	; save sector count
 10197 000008E4 8926[3501]              		mov	[spsav], sp	; save sp
 10198                                  
 10199                                  ; ensure that we are trying to access valid sectors on the drive
 10200                                  
 10201 000008E8 89D0                    		mov	ax, dx
 10202 000008EA 31F6                    		xor	si, si
 10203 000008EC 01CA                    		add	dx, cx
 10204 000008EE 83D600                  		adc	si, 0
 10205 000008F1 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10206                                  					; > 32 bit sector ?
 10207 000008F6 740D                    		jz	short sanity32
 10208 000008F8 83FE00                  		cmp	si, 0
 10209 000008FB 75BD                    		jnz	short baddrive
 10210 000008FD 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10211 00000901 77B7                    		ja	short baddrive
 10212 00000903 EB12                    		jmp	short sanityok
 10213                                  ; ---------------------------------------------------------------------------
 10214                                  
 10215                                  sanity32:				
 10216 00000905 0336[2B05]              		add	si, [start_sec_h]
 10217 00000909 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10218 0000090D 7208                    		jb	short sanityok
 10219 0000090F 77A9                    		ja	short baddrive
 10220 00000911 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10221 00000915 77A3                    		ja	short baddrive
 10222                                  
 10223                                  sanityok:				
 10224 00000917 8B16[2B05]              		mov	dx, [start_sec_h]
 10225 0000091B 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10226 0000091F 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10227                                  
 10228                                  ; now dx;ax have the physical first sector.
 10229                                  ; since the following procedures is going to destroy ax, let's
 10230                                  ; save it temporarily to saved_word.
 10231                                  
 10232 00000923 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10233                                  
 10234                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10235                                  ; will do it because we will skip the set up stuff with hard disks.
 10236                                  
 10237 00000926 06                      		push	es
 10238 00000927 8E06[1A00]              		mov	es, [zeroseg]
 10239 0000092B 26C4367800              		les	si, [es:DSKADR]
 10240                                  		;les	si, es:78h	; [es:DSKADR]
 10241                                  					; current disk parm table
 10242 00000930 8936[2D01]              		mov	[dpt], si
 10243 00000934 8C06[2F01]              		mov	[dpt+2], es
 10244 00000938 07                      		pop	es
 10245 00000939 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10246                                  					; fnon_removable
 10247 0000093E 7510                    		jnz	short skip_setup
 10248 00000940 E8F6FE                  		call	checksingle
 10249                                  
 10250                                  ; check to see if we have previously noted a change line. the routine
 10251                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10252                                  ; the proper error code.
 10253                                  
 10254 00000943 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10255 00000948 7403                    		jz	short diskio_nochangeline ; brif not
 10256 0000094A E8A40E                  		call	checklatchio	; will do a sneaky pop stack return
 10257                                  					; if a disk error occurs
 10258                                  diskio_nochangeline:			
 10259 0000094D E84700                  		call	iosetup		; set up tables	and variables for i/o
 10260                                  
 10261                                  ; now the settle values are correct for the following code
 10262                                  
 10263                                  skip_setup:
 10264                                  
 10265                                  ; 32 bit sector calculation.
 10266                                  ; dx:[saved_word] = starting sector number.
 10267                                  				
 10268 00000950 89D0                    		mov	ax, dx
 10269 00000952 31D2                    		xor	dx, dx
 10270 00000954 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10271                                  					 ; divide by sec per track
 10272 00000958 A3[2905]                		mov	[temp_h], ax
 10273 0000095B A1[2D05]                		mov	ax, [saved_word]
 10274 0000095E 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10275                                  					; now, [temp_h]:ax = track #, dx = sector
 10276                                  		;inc	dl		; sector number	is 1 based.
 10277                                  		; 18/12/2022
 10278 00000962 42                      		inc	dx
 10279 00000963 8816[3101]              		mov	[cursec], dl	; save current sector
 10280 00000967 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10281                                  					; get number of	heads
 10282 0000096B 50                      		push	ax
 10283 0000096C 31D2                    		xor	dx, dx
 10284 0000096E A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10285 00000971 F7F1                    		div	cx
 10286 00000973 A3[2905]                		mov	[temp_h], ax
 10287 00000976 58                      		pop	ax
 10288 00000977 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10289 00000979 833E[2905]00            		cmp	word [temp_h], 0
 10290 0000097E 7714                    		ja	short baddrive_brdg
 10291 00000980 3D0004                  		cmp	ax, 1024	; 2^10 currently maximum for track #.
 10292 00000983 770F                    		ja	short baddrive_brdg
 10293 00000985 8816[3201]              		mov	[curhd], dl	; save current head
 10294 00000989 A3[3301]                		mov	[curtrk], ax	; save current track
 10295                                  
 10296                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10297                                  ; violations here. not true. we perform the operation as if everything is
 10298                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10299                                  
 10300 0000098C A1[2201]                		mov	ax, [seccnt]
 10301 0000098F E88300                  		call	block		; (cas - call/ret)
 10302                                  		;call	done
 10303                                  		;retn
 10304                                  		; 18/12/2022
 10305 00000992 EB4A                    		jmp	done
 10306                                  
 10307                                  ; ---------------------------------------------------------------------------
 10308                                  
 10309                                  baddrive_brdg:
 10310 00000994 E923FF                  		jmp	baddrive
 10311                                  
 10312                                  ; =============== S U B	R O U T	I N E =======================================
 10313                                  
 10314                                  ;--------------------------------------------------------------
 10315                                  ; set the drive-last-accessed flag for diskette only.
 10316                                  ; we know that the hard disk will not be removed.
 10317                                  ; es:di -> current bds.
 10318                                  ; ds -> Bios_Data
 10319                                  ; ax,cx,si are destroyed.
 10320                                  ;--------------------------------------------------------------
 10321                                  
 10322                                  		; 23/12/2023
 10323                                  		; 19/10/2022
 10324                                  iosetup:
 10325 00000997 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10326 0000099B A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10327                                  
 10328                                  ; determine proper head settle values
 10329                                  
 10330 0000099E 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10331 000009A3 7538                    		jnz	short skip_dpt_setting
 10332 000009A5 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10333 000009A8 1E                      		push	ds
 10334 000009A9 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10335 000009AD 884404                  		mov	[si+4],	al
 10336                                  		; 23/12/2023
 10337 000009B0 88C4                    		mov	ah, al
 10338 000009B2 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10339                                  		;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10340 000009B5 1F                      		pop	ds
 10341 000009B6 A2[2601]                		mov	[motorstartup], al
 10342 000009B9 8826[2B01]              		mov	[save_eot], ah
 10343                                  
 10344                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10345                                  ; motor start time to 4. this checking for every i/o is going to affect
 10346                                  ; performance across the board, but is necessary!!
 10347                                  
 10348 000009BD 1E                      		push	ds
 10349 000009BE C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10350 000009C2 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10351                                  					; ffSmall
 10352 000009C7 7505                    		jnz	short motor_start_ok
 10353 000009C9 B004                    		mov	al, 4
 10354 000009CB 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10355                                  motor_start_ok:
 10356                                  
 10357                                  ; ds:si now points to disk parameter table.
 10358                                  ; get current settle and set fast settle
 10359                                  
 10360                                  		;xor	al, al
 10361                                  		;inc	al		; ibm wants fast settle	to be 1
 10362                                  		; 18/12/2022
 10363 000009CE 31C0                    		xor	ax, ax
 10364 000009D0 40                      		inc	ax
 10365 000009D1 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10366                                  					; get settle and set up	for fast
 10367 000009D4 1F                      		pop	ds
 10368 000009D5 A2[2701]                		mov	[settlecurrent], al
 10369 000009D8 B00F                    		mov	al, 15		; NORMSETTLE
 10370                                  					; someone has diddled the settle
 10371 000009DA A2[2801]                		mov	[settleslow], al
 10372                                  skip_dpt_setting:
 10373 000009DD C3                      		retn
 10374                                  
 10375                                  ; =============== S U B	R O U T	I N E =======================================
 10376                                  
 10377                                  ;--------------------------------------------------------------
 10378                                  ; set time of last access, and reset default values in the dpt.
 10379                                  ;
 10380                                  ;	  note: trashes (at least) si
 10381                                  ;--------------------------------------------------------------
 10382                                  
 10383                                  		; 19/10/2022
 10384                                  done:
 10385 000009DE 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10386                                  					; fnon_removable
 10387 000009E3 752F                    		jnz	short ddbx	; do not set for non-removable media
 10388 000009E5 E8FD01                  		call	set_tim
 10389                                  ;diddleback:
 10390                                  ; 09/12/2022
 10391                                  diddle_back:				
 10392 000009E8 9C                      		pushf
 10393 000009E9 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10394 000009EE 7523                    		jnz	short nodiddleback
 10395 000009F0 50                      		push	ax
 10396 000009F1 06                      		push	es
 10397 000009F2 C436[2D01]              		les	si, [dpt]
 10398 000009F6 A0[2B01]                		mov	al, [save_eot]
 10399 000009F9 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10400 000009FD A0[2701]                		mov	al, [settlecurrent]
 10401 00000A00 8A26[2601]              		mov	ah, [motorstartup]
 10402 00000A04 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10403 00000A08 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10404 00000A0D 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10405 00000A11 07                      		pop	es
 10406 00000A12 58                      		pop	ax
 10407                                  nodiddleback:				
 10408 00000A13 9D                      		popf
 10409                                  ddbx:					
 10410 00000A14 C3                      		retn
 10411                                  
 10412                                  ; =============== S U B	R O U T	I N E =======================================
 10413                                  
 10414                                  ;--------------------------------------------------------------
 10415                                  ;read the number of sectors specified in ax, 
 10416                                  ;handling track boundaries
 10417                                  ;es:di -> bds for this drive
 10418                                  ;--------------------------------------------------------------
 10419                                  
 10420                                  		 ; 19/10/2022
 10421                                  block:	
 10422 00000A15 09C0                    		or	ax, ax
 10423 00000A17 74FB                    		jz	short ddbx
 10424 00000A19 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10425                                  					; fnon_removable
 10426 00000A1E 740D                    		jz	short block_floppy ;
 10427                                  
 10428                                  ; check	to see if multi	track operation	is allowed. if not
 10429                                  ; we have to go	to the block_floppy below to break up the operation.
 10430                                  
 10431 00000A20 F606[2F05]80            		test	byte [multrk_flag], 80h
 10432                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10433 00000A25 7406                    		jz	short block_floppy
 10434 00000A27 E82900                  		call	Disk
 10435 00000A2A 31C0                    		xor	ax, ax
 10436 00000A2C C3                      		retn
 10437                                  ; ---------------------------------------------------------------------------
 10438                                  
 10439                                  block_floppy:
 10440                                  
 10441                                  ; read at most 1 track worth. perform minimization at sector / track
 10442                                  				
 10443 00000A2D 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10444 00000A31 FEC1                    		inc	cl
 10445 00000A33 2A0E[3101]              		sub	cl, [cursec]
 10446 00000A37 30ED                    		xor	ch, ch
 10447 00000A39 39C8                    		cmp	ax, cx
 10448 00000A3B 7302                    		jnb	short gotmin
 10449 00000A3D 89C1                    		mov	cx, ax
 10450                                  
 10451                                  gotmin:
 10452                                  
 10453                                  ; ax is the requested number of sectors to read
 10454                                  ; cx is the number that we can do on this track
 10455                                  					
 10456 00000A3F 50                      		push	ax
 10457 00000A40 51                      		push	cx
 10458 00000A41 89C8                    		mov	ax, cx
 10459 00000A43 E80D00                  		call	Disk
 10460 00000A46 59                      		pop	cx
 10461 00000A47 58                      		pop	ax
 10462                                  
 10463                                  ; cx is the number of sectors just transferred
 10464                                  
 10465 00000A48 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10466 00000A4A D0E1                    		shl	cl, 1
 10467 00000A4C 00CF                    		add	bh, cl		; adjust transfer address
 10468 00000A4E EBC5                    		jmp	short block
 10469                                  dskerr_brdg:				
 10470 00000A50 E9EC00                  		jmp	dskerr
 10471                                  
 10472                                  ; =============== S U B	R O U T	I N E =======================================
 10473                                  
 10474                                  ; 15/10/2022
 10475                                  
 10476                                  ;--------------------------------------------------------------
 10477                                  ;perform disk i/o with retries
 10478                                  ; al = number of sectors (1-8, all on one track)
 10479                                  ; es:di point to drive parameters
 10480                                  ; xfer_seg:bx = transfer address 
 10481                                  ;		(must not cross a 64k physical boundary)
 10482                                  ; [rflag] = 2 if read, 3 if write
 10483                                  ; [verify] = 0 for normal, 1 for verify after write
 10484                                  ;--------------------------------------------------------------
 10485                                  
 10486                                  		; 19/10/2022
 10487                                  Disk:
 10488                                  
 10489                                  ; Check for hard disk format and
 10490                                  ; if TRUE then set max error count to 2
 10491                                  
 10492 00000A53 BD0500                  		mov	bp, 5		; MAXERR
 10493                                  					; set up retry count
 10494 00000A56 26F6452301              		test	byte [es:di+23h], 1	;
 10495                                  					; [es:di+BDS.flags], fnon_removable
 10496 00000A5B 7408                    		jz	short GetRdWrInd
 10497 00000A5D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10498 00000A60 7403                    		jz	short GetRdWrInd
 10499 00000A62 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10500                                  GetRdWrInd:				
 10501 00000A65 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10502 00000A69 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10503 00000A6D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10504                                  ;retry:
 10505                                  ; 09/12/2022
 10506                                  _retry:					
 10507 00000A71 50                      		push	ax
 10508 00000A72 8B16[3301]              		mov	dx, [curtrk]
 10509 00000A76 26F6452301              		test	byte [es:di+23h], 1
 10510 00000A7B 740B                    		jz	short disk_not_mini
 10511 00000A7D 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10512                                  					; is this a mini disk? ((logical dos partition))
 10513 00000A82 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10514 00000A84 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10515                                  					; add hidden trks.
 10516                                  disk_not_mini:				
 10517 00000A88 D0CE                    		ror	dh, 1
 10518 00000A8A D0CE                    		ror	dh, 1
 10519 00000A8C 0A36[3101]              		or	dh, [cursec]
 10520 00000A90 89D1                    		mov	cx, dx
 10521 00000A92 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10522 00000A94 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10523 00000A98 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10524                                  					; [es:di+BDS.drivenum]
 10525 00000A9C 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10526 00000AA1 7413                    		jz	short do_fast	; hard files use fast speed
 10527                                  
 10528                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10529                                  ; this helps when we have just done a reset disk operation and the head has
 10530                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10531                                  
 10532 00000AA3 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10533 00000AA8 740A                    		jz	short do_writej
 10534 00000AAA 80FC02                  		cmp	ah, 2		; romread
 10535 00000AAD 7407                    		jz	short do_fast
 10536 00000AAF 80FC04                  		cmp	ah, 4		; romverify
 10537 00000AB2 7402                    		jz	short do_fast
 10538                                  do_writej:	
 10539                                  
 10540                                  ; reads always fast, unless we have just done a disk reset operation
 10541                                  			
 10542 00000AB4 EB56                    		jmp	short do_write	; reads	always fast
 10543                                  ; ---------------------------------------------------------------------------
 10544                                  
 10545                                  do_fast:				
 10546 00000AB6 E8FC00                  		call	fastspeed	; change settle	mode
 10547                                  
 10548                                  testerr:				
 10549 00000AB9 7295                    		jb	short dskerr_brdg
 10550                                  
 10551                                  ; set drive and track of last access
 10552                                  
 10553 00000ABB 8816[7600]              		mov	[step_drv], dl
 10554 00000ABF 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10555                                  no_set:
 10556                                  		;cmp	word [wrtverify], 103h
 10557 00000AC3 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10558 00000AC9 7452                    		jz	short doverify
 10559                                  noverify:				
 10560 00000ACB 58                      		pop	ax
 10561                                  
 10562                                  ; check the flags word in the bds to see if the drive is non removable
 10563                                  ; if not we needn't do anything special
 10564                                  ; if it is a hard disk then check to see if multi-track operation
 10565                                  ; is specified. if specified we don't have to calculate for the next
 10566                                  ; track since we are already done. so we can go to the exit of this routine.
 10567                                  
 10568 00000ACC 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10569                                  					; fnon_removable
 10570 00000AD1 7407                    		jz	short its_removable
 10571 00000AD3 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10572 00000AD8 7530                    		jnz	short disk_ret
 10573                                  its_removable:				
 10574 00000ADA 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10575 00000ADD 30E4                    		xor	ah, ah
 10576 00000ADF 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10577 00000AE3 00C1                    		add	cl, al
 10578 00000AE5 880E[3101]              		mov	[cursec], cl
 10579 00000AE9 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10580                                  					; see if sector/track limit reached
 10581 00000AED 761B                    		jbe	short disk_ret
 10582 00000AEF C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10583 00000AF4 8A36[3201]              		mov	dh, [curhd]
 10584 00000AF8 FEC6                    		inc	dh
 10585 00000AFA 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10586 00000AFE 7206                    		jb	short noxor
 10587 00000B00 30F6                    		xor	dh, dh
 10588 00000B02 FF06[3301]              		inc	word [curtrk]
 10589                                  noxor:					
 10590 00000B06 8836[3201]              		mov	[curhd], dh
 10591                                  disk_ret:				
 10592 00000B0A F8                      		clc
 10593 00000B0B C3                      		retn
 10594                                  ; ---------------------------------------------------------------------------
 10595                                  
 10596                                  ; 15/10/2022
 10597                                  
 10598                                  ;--------------------------------------------------------------
 10599                                  ; the request is for write. determine if we are talking about
 10600                                  ; the same track and drive. if so, use the fast speed.
 10601                                  ;--------------------------------------------------------------
 10602                                  
 10603                                  do_write:				
 10604 00000B0C 3A16[7600]              		cmp	dl, [step_drv]
 10605 00000B10 7506                    		jnz	short do_norm	; we have changed drives
 10606 00000B12 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10607 00000B16 749E                    		jz	short do_fast	; we are still on the same track
 10608                                  
 10609                                  do_norm:				
 10610 00000B18 E87500                  		call	normspeed
 10611 00000B1B EB9C                    		jmp	short testerr
 10612                                  ; ---------------------------------------------------------------------------
 10613                                  
 10614                                  ;--------------------------------------------------------------
 10615                                  ; we have a verify request also. get state info and go verify
 10616                                  ;--------------------------------------------------------------
 10617                                  
 10618                                  doverify:				
 10619 00000B1D 58                      		pop	ax
 10620 00000B1E 50                      		push	ax
 10621 00000B1F B404                    		mov	ah, 4
 10622 00000B21 E89100                  		call	fastspeed
 10623 00000B24 73A5                    		jnb	short noverify
 10624                                  
 10625                                  ; check the error returned in ah to see if it is a soft ecc error.
 10626                                  ; if it is not we needn't do anything special. if it is a soft
 10627                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10628                                  ; this retry count becomes 0 then we just ignore the error and go to
 10629                                  ; no_verify but if we can still try then we call the routine to reset
 10630                                  ; the disk and go to dskerr1 to retry the operation.
 10631                                  
 10632 00000B26 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10633 00000B29 750B                    		jnz	short not_softecc_err
 10634 00000B2B FF0E[3405]              		dec	word [soft_ecc_cnt]
 10635 00000B2F 749A                    		jz	short noverify	; no more retry
 10636 00000B31 E84405                  		call	ResetDisk	; reset	disk
 10637 00000B34 EB3E                    		jmp	short dskerr1	; retry
 10638                                  ; ---------------------------------------------------------------------------
 10639                                  
 10640                                  not_softecc_err:			; other error.			
 10641 00000B36 E83F05                  		call	ResetDisk
 10642 00000B39 FF0E[3205]              		dec	word [vretry_cnt]
 10643 00000B3D EB1C                    		jmp	short dskerr0
 10644                                  ; ---------------------------------------------------------------------------
 10645                                  
 10646                                  ;--------------------------------------------------------------
 10647                                  ; need to special case the change-line error ah=06h.
 10648                                  ; if we get this, we need to return it.
 10649                                  ;--------------------------------------------------------------
 10650                                  
 10651                                  dskerr:					
 10652 00000B3F 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10653 00000B44 7403                    		jz	short dskerr_nochangeline ; brif not
 10654 00000B46 E81C0D                  		call	checkio
 10655                                  dskerr_nochangeline:			
 10656 00000B49 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10657 00000B4E 7508                    		jnz	short dochkagain ; no more retry.
 10658 00000B50 BD0100                  		mov	bp, 1
 10659 00000B53 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10660                                  dochkagain:				
 10661 00000B58 E8AA00                  		call	again
 10662                                  dskerr0:				
 10663 00000B5B 7420                    		jz	short harderr
 10664 00000B5D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10665                                  					; fnon_removable
 10666 00000B62 7505                    		jnz	short skip_timeout_chk
 10667 00000B64 80FC80                  		cmp	ah, 80h		; timeout?
 10668 00000B67 7414                    		jz	short harderr
 10669                                  skip_timeout_chk:			
 10670 00000B69 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10671 00000B6C 740A                    		jz	short write_fault_err ;	then, don't retry.
 10672 00000B6E C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10673                                  					; set soft_ecc_cnt back	to maxerr
 10674                                  dskerr1:				
 10675 00000B74 58                      		pop	ax		; restore sector count
 10676                                  		;jmp	retry
 10677                                  		; 09/12/2022
 10678 00000B75 E9F9FE                  		jmp	_retry
 10679                                  ; ---------------------------------------------------------------------------
 10680                                  
 10681                                  write_fault_err:			
 10682 00000B78 BD0100                  		mov	bp, 1		; just retry only once
 10683                                  					; for write fault error.
 10684 00000B7B EBF7                    		jmp	short dskerr1
 10685                                  
 10686                                  		; fall into harderr
 10687                                  ; ---------------------------------------------------------------------------
 10688                                  
 10689                                  ; entry point for routines that call maperror themselves
 10690                                  
 10691                                  harderr:				
 10692 00000B7D E84D00                  		call	maperror
 10693                                  harderr2:				
 10694 00000B80 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10695                                  					; force a media check through rom
 10696 00000B85 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10697 00000B89 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10698                                  
 10699                                  ; since we are performing a non-local goto, restore the disk parameters
 10700                                  
 10701                                  		;jmp	diddleback
 10702                                  		; 09/12/2022
 10703 00000B8D E958FE                  		jmp	diddle_back
 10704                                  
 10705                                  ; =============== S U B	R O U T	I N E =======================================
 10706                                  
 10707                                  ; change settle value from settlecurrent to whatever is appropriate
 10708                                  ; note that this routine is never called for a fixed disk.
 10709                                  
 10710                                  		; 19/10/2022
 10711                                  normspeed:
 10712 00000B90 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10713 00000B95 751E                    		jnz	short fastspeed
 10714 00000B97 06                      		push	es
 10715 00000B98 50                      		push	ax
 10716 00000B99 A0[2801]                		mov	al, [settleslow]
 10717 00000B9C C436[2D01]              		les	si, [dpt]	; current disk parm table
 10718 00000BA0 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10719 00000BA4 58                      		pop	ax
 10720 00000BA5 07                      		pop	es
 10721 00000BA6 E80C00                  		call	fastspeed
 10722 00000BA9 06                      		push	es
 10723 00000BAA C436[2D01]              		les	si, [dpt]
 10724 00000BAE 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10725                                  					; 1 is fast settle value
 10726 00000BB3 07                      		pop	es
 10727 00000BB4 C3                      		retn
 10728                                  
 10729                                  ; =============== S U B	R O U T	I N E =======================================
 10730                                  
 10731                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10732                                  ; partition is > 16 bits, then always return drive not ready.
 10733                                  
 10734                                  fastspeed:		
 10735 00000BB5 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10736                                  					; ftoobig
 10737 00000BBA 750D                    		jnz	short notready
 10738 00000BBC 06                      		push	es
 10739 00000BBD 8E06[3705]              		mov	es, [xfer_seg]
 10740 00000BC1 CD13                    		int	13h		; DISK -
 10741 00000BC3 8C06[3705]              		mov	[xfer_seg], es
 10742 00000BC7 07                      		pop	es
 10743 00000BC8 C3                      		retn
 10744                                  ; ---------------------------------------------------------------------------
 10745                                  
 10746                                  notready:				
 10747 00000BC9 F9                      		stc
 10748 00000BCA B480                    		mov	ah, 80h
 10749 00000BCC C3                      		retn
 10750                                  
 10751                                  ; =============== S U B	R O U T	I N E =======================================
 10752                                  
 10753                                  ; map error returned by rom in ah into corresponding code to be returned to
 10754                                  ; dos in al. trashes di. guaranteed to set carry.
 10755                                  
 10756                                  maperror:	
 10757 00000BCD 51                      		push	cx
 10758 00000BCE 06                      		push	es
 10759 00000BCF 1E                      		push	ds		; set es=Bios_Data
 10760 00000BD0 07                      		pop	es
 10761 00000BD1 88E0                    		mov	al, ah		; put error code in al
 10762 00000BD3 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10763 00000BD6 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10764                                  					; number of possible error conditions
 10765 00000BD9 BF[3C01]                		mov	di, errin	; point to error conditions
 10766 00000BDC F2AE                    		repne scasb
 10767                                  		; 10/12/2022
 10768 00000BDE 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10769                                  					; get translation
 10770                                  		; 19/10/2022 - Temporary ! 
 10771                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10772 00000BE1 07                      		pop	es
 10773 00000BE2 59                      		pop	cx
 10774 00000BE3 F9                      		stc			; flag error condition
 10775 00000BE4 C3                      		retn
 10776                                  
 10777                                  ; =============== S U B	R O U T	I N E =======================================
 10778                                  
 10779                                  ; set the time of last access for this drive.
 10780                                  ; this is done only for removable media. es:di -> bds
 10781                                  
 10782                                  set_tim:		
 10783 00000BE5 50                      		push	ax
 10784 00000BE6 E891F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10785                                  
 10786                                  ; we have the new time. if we see that the time has passed,
 10787                                  ; then we reset the threshold counter...
 10788                                  
 10789 00000BE9 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10790 00000BED 7506                    		jnz	short setaccess
 10791 00000BEF 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10792                                  		;jz	short done_set
 10793                                  		; 12/12/2022
 10794 00000BF3 740E                    		je	short done_set2
 10795                                  setaccess:				
 10796 00000BF5 C606[1D01]00            		mov	byte [accesscount], 0
 10797 00000BFA 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10798 00000BFE 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10799                                  done_set:				
 10800 00000C02 F8                      		clc
 10801                                  done_set2:		; 12/12/2022
 10802 00000C03 58                      		pop	ax
 10803 00000C04 C3                      		retn
 10804                                  
 10805                                  ; =============== S U B	R O U T	I N E =======================================
 10806                                  
 10807                                  ; this routine is called if an error occurs while formatting or verifying.
 10808                                  ; it resets the drive,and decrements the retry count.
 10809                                  ; on entry - ds:di - points to bds for the drive
 10810                                  ;	     bp    - contains retry count
 10811                                  ; on exit    flags indicate result of decrementing retry count
 10812                                  
 10813                                  again:	
 10814 00000C05 E87004                  		call	ResetDisk
 10815 00000C08 80FC06                  		cmp	ah, 6
 10816 00000C0B 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10817                                  					; do not decrement retry count.
 10818 00000C0D 4D                      		dec	bp		; decrement retry count
 10819 00000C0E C3                      		retn
 10820                                  ; ---------------------------------------------------------------------------
 10821                                  
 10822                                  dont_dec_retry_count:			
 10823 00000C0F 08E4                    		or	ah, ah
 10824 00000C11 C3                      		retn
 10825                                  
 10826                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10827                                  
 10828                                  ;----------------------------------------------------------------------------
 10829                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10830                                  ;----------------------------------------------------------------------------
 10831                                  ; 11/03/2019 - Retro DOS v4.0
 10832                                  
 10833                                  ; 18/03/2019
 10834                                  
 10835                                  ; ==========================================================================
 10836                                  ;
 10837                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10838                                  ;
 10839                                  ;      This function is intended to give the user to control the
 10840                                  ;      bds table flags of unformatted_media bit.
 10841                                  ;      GetAccessFlag will show the status -
 10842                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10843                                  ;						1 disk i/o allowed
 10844                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10845                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10846                                  ;						1 disallow disk i/o
 10847                                  ; ==========================================================================
 10848                                  
 10849                                  		; generic ioctl dispatch tables
 10850                                  
 10851                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10852                                  
 10853                                  ; ---------------------------------------------------------------------------
 10854 00000C12 00                      		db 0
 10855                                  
 10856                                  ; 09/12/2022 
 10857                                  %if 0
 10858                                  
 10859                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10860                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10861                                  		dw 0EE8h	; 61h	; ReadTrack
 10862                                  		dw 0E86h	; 62h	; VerifyTrack
 10863                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10864                                  		dw 0CA3h		; Cmd_Error_Proc
 10865                                  		dw 0CA3h		; Cmd_Error_Proc
 10866                                  		dw 119Ah	; 66h	; GetMediaId
 10867                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10868                                  		dw 12C1h	; 68h	; SenseMediaType
 10869                                  
 10870                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10871                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10872                                  		dw 0EEFh	; 41h	; WriteTrack
 10873                                  		dw 0DC1h	; 42h	; FormatTrack
 10874                                  		dw 0CA3h		; Cmd_Error_Proc
 10875                                  		dw 0CA3h		; Cmd_Error_Proc
 10876                                  		dw 0CA3h		; Cmd_Error_Proc
 10877                                  		dw 11D2h	; 46h	; SetMediaId
 10878                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10879                                  
 10880                                  %endif
 10881                                  
 10882                                  		; 09/12/2022
 10883 00000C13 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10884 00000C14 [7E0C]                  		dw GetDeviceParameters	; 60h
 10885 00000C16 [B90E]                  		dw ReadTrack		; 61h
 10886 00000C18 [590E]                  		dw VerifyTrack		; 62h
 10887 00000C1A [7A0C]                  		dw Cmd_Error_Proc
 10888 00000C1C [7A0C]                  		dw Cmd_Error_Proc
 10889 00000C1E [7A0C]                  		dw Cmd_Error_Proc
 10890 00000C20 [5411]                  		dw GetMediaId		; 66h
 10891 00000C22 [2012]                  		dw GetAccessFlag	; 67h ; unpublished function
 10892 00000C24 [7212]                  		dw SenseMediaType	; 68h
 10893                                  
 10894 00000C26 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10895 00000C27 [C90C]                  		dw SetDeviceParameters	; 40h
 10896 00000C29 [C00E]                  		dw WriteTrack		; 41h
 10897 00000C2B [940D]                  		dw FormatTrack		; 42h
 10898 00000C2D [7A0C]                  		dw Cmd_Error_Proc
 10899 00000C2F [7A0C]                  		dw Cmd_Error_Proc
 10900 00000C31 [7A0C]                  		dw Cmd_Error_Proc
 10901 00000C33 [8A11]                  		dw SetMediaId		; 46h
 10902 00000C35 [3612]                  		dw SetAccessFlag	; 47h ; unpublished function
 10903                                  
 10904                                  ; ==========================================================================
 10905                                  ; IOC_DC_Table
 10906                                  ;
 10907                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10908                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10909                                  ; Added for 5.00
 10910                                  ; ==========================================================================
 10911                                  
 10912 00000C37 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10913 00000C38 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10914 00000C39 61                      		db 61h			; READ_TRACK
 10915 00000C3A 41                      		db 41h			; WRITE_TRACK
 10916 00000C3B 62                      		db 62h			; VERIFY_TRACK
 10917 00000C3C 42                      		db 42h			; FORMAT_TRACK
 10918 00000C3D 66                      		db 66h			; GET_MEDIA_ID
 10919 00000C3E 46                      		db 46h			; SET_MEDIA_ID
 10920 00000C3F 67                      		db 67h			; GET_ACCESS_FLAG
 10921 00000C40 47                      		db 47h			; SET_ACCESS_FLAG
 10922 00000C41 68                      		db 68h			; SENSE_MEDIA_TYPE
 10923                                  
 10924                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10925                                  
 10926                                  ; ---------------------------------------------------------------------------
 10927                                  
 10928                                  ; 16/10/2022
 10929                                  
 10930                                  ; ==========================================================================
 10931                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10932                                  ;
 10933                                  ;    input: AL contains logical drive
 10934                                  ;
 10935                                  ;	functions are dispatched through a call. On return, carry indicates
 10936                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10937                                  ;	subfunctions.
 10938                                  ;
 10939                                  ; ==========================================================================
 10940                                  
 10941                                  ; 11/03/2019
 10942                                  		; 19/10/2022
 10943                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10944 00000C42 E886F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10945 00000C45 06                      		push	es
 10946 00000C46 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10947 00000C4A 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10948                                  					; RAWIO
 10949 00000C4F 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10950 00000C53 07                      		pop	es
 10951 00000C54 7525                    		jnz	short IoctlFuncErr
 10952                                  
 10953                                  		; cas note: Could do the above two blocks in reverse order.
 10954                                  		; Would have to preserve al for SetDrive
 10955                                  
 10956                                  		; 10/12/2022
 10957 00000C56 BE[130C]                		mov	si, IoReadJumpTable
 10958                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10959                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10960 00000C59 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10961 00000C5B 7503                    		jnz	short NotGenericWrite ; function is a read.
 10962                                  		; 10/12/2022
 10963 00000C5D BE[260C]                		mov	si, IoWriteJumpTable
 10964                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10965                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10966                                  NotGenericWrite:			
 10967 00000C60 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10968 00000C62 2C40                    		sub	al, 40h		; offset for base function
 10969 00000C64 2E3A04                  		cmp	al, [cs:si]
 10970 00000C67 7712                    		ja	short IoctlFuncErr
 10971 00000C69 98                      		cbw
 10972 00000C6A D1E0                    		shl	ax, 1
 10973 00000C6C 46                      		inc	si
 10974 00000C6D 01C6                    		add	si, ax
 10975 00000C6F 2EFF14                  		call	near [cs:si]
 10976                                  		;call	word ptr cs:[si]
 10977 00000C72 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10978                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10979                                  					; 2C7h:30h = 70h:25A0h
 10980 00000C77 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10981 00000C79 C3                      		retn			; Pass carry flag through to exit code
 10982                                  ; ---------------------------------------------------------------------------
 10983                                  
 10984                                  		; Cmd_Error_Proc is called as a procedure and also use
 10985                                  		; as a fall through from above
 10986                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10987 00000C7A 5A                      		pop	dx
 10988                                  
 10989                                  IoctlFuncErr:				
 10990 00000C7B E957F4                  		jmp	bc_cmderr
 10991                                  ; ---------------------------------------------------------------------------
 10992                                  
 10993                                  ; 16/10/2022
 10994                                  
 10995                                  ; ==========================================================================
 10996                                  ;**	GetDeviceParameters:
 10997                                  ;
 10998                                  ;	GetDeviceParameters implements the generic ioctl function:
 10999                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11000                                  ;
 11001                                  ;	ENTRY	(ES:di) = BDS for drive
 11002                                  ;		PtrSav = long pointer to request header
 11003                                  ;	EXIT	??? BUGBUG
 11004                                  ;	USES	??? BUGBUG
 11005                                  ; ==========================================================================
 11006                                  
 11007                                  		; 19/10/2022
 11008                                  GetDeviceParameters:
 11009                                  		; Copy info from bds to the device parameters packet
 11010                                  
 11011 00000C7E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11012 00000C82 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11013                                  					; (DS:BX) = return buffer
 11014 00000C85 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11015 00000C89 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11016 00000C8C 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11017 00000C90 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11018                                  					; Mask off other bits
 11019 00000C93 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11020 00000C96 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11021 00000C9A 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11022 00000C9D 30C0                    		xor	al, al		; Set media type to default
 11023 00000C9F 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11024                                  					
 11025                                  		; copy recommended bpb
 11026 00000CA2 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11027 00000CA5 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11028                                  					; BUILD_DEVICE_BPB
 11029 00000CA8 7412                    		jz	short UseBpbPresent
 11030 00000CAA 1E                      		push	ds		; Save request packet segment
 11031 00000CAB 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11032                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11033                                  					; 2C7h:30h = 70h:25A0h
 11034                                  					; Point back to Bios_Data
 11035 00000CB0 E886FB                  		call	checksingle
 11036 00000CB3 E842F9                  		call	GetBp		; Build	the bpb	from scratch
 11037 00000CB6 1F                      		pop	ds		; Restore request packet segment
 11038 00000CB7 720F                    		jb	short GetParmRet
 11039 00000CB9 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11040                                  					; Use this subfield of bds instead
 11041                                  UseBpbPresent:				
 11042 00000CBC 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11043                                  					; This is where	the result goes
 11044 00000CBF B91900                  		mov	cx, 25		; A_BPB.size - 6
 11045                                  					; For now use 'small' bpb
 11046 00000CC2 1E                      		push	ds		; reverse segments for copy
 11047 00000CC3 06                      		push	es
 11048 00000CC4 1F                      		pop	ds
 11049 00000CC5 07                      		pop	es
 11050 00000CC6 F3A4                    		rep movsb
 11051                                  		
 11052                                  		; 12/12/2022
 11053                                  		; cf=0 (test instruction -above- resets cf) 	
 11054                                  		;clc
 11055                                  GetParmRet:				
 11056 00000CC8 C3                      		retn
 11057                                  ; ---------------------------------------------------------------------------
 11058                                  
 11059                                  ; 17/10/2022
 11060                                  ; 16/10/2022
 11061                                  
 11062                                  ; ==========================================================================
 11063                                  ; SetDeviceParameters:
 11064                                  ;
 11065                                  ; input: ES:di points to bds for drive
 11066                                  ; ==========================================================================
 11067                                  
 11068                                  		; 19/10/2022
 11069                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11070 00000CC9 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11071 00000CCD C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11072 00000CD0 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11073                                  					; fchanged_by_format|fchanged
 11074 00000CD6 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11075                                  					; ONLY_SET_TRACKLAYOUT
 11076 00000CD9 7579                    		jnz	short setTrackTable
 11077 00000CDB 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11078 00000CDE 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11079 00000CE2 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11080 00000CE5 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11081 00000CE9 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11082 00000CEC 1E                      		push	ds
 11083                                  		; 17/10/2022
 11084 00000CED 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11085                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11086                                  					; 2C7h:30h = 70h:25A0h
 11087                                  		;cmp	byte [fhave96], 0
 11088 00000CF2 803E[7700]00            		cmp	byte [fhave96], 0
 11089 00000CF7 1F                      		pop	ds
 11090 00000CF8 7502                    		jnz	short HaveChange ; we have changeline support
 11091                                  		; 10/12/2022
 11092 00000CFA 24FD                    		and	al, 0FDh
 11093                                  		;and	ax, 0FFFDh	; ~fchangeline
 11094                                  
 11095                                  		; Ignore all bits except non_removable and changeline
 11096                                  HaveChange:				
 11097 00000CFC 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11098 00000CFF 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11099 00000D03 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11100 00000D07 09C8                    		or	ax, cx
 11101 00000D09 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11102 00000D0D 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11103                                  					; Set media type
 11104 00000D10 1E                      		push	ds
 11105 00000D11 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11106                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11107 00000D16 A2[3706]                		mov	[mediatype], al
 11108                                  		;mov	ds:mediatype, al
 11109 00000D19 1F                      		pop	ds
 11110                                  
 11111                                  		; The media changed (maybe) so we will have to do a set dasd
 11112                                  		; the next time we format a track
 11113                                  
 11114                                  		; 10/12/2022
 11115 00000D1A 26804D2380              		or	byte [es:di+35], 80h
 11116                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11117                                  					; set_dasd_true
 11118 00000D1F 57                      		push	di		; Save bds pointer
 11119                                  
 11120                                  		; Figure out what we are supposed to do with the bpb
 11121                                  		; were we asked to install a fake bpb?
 11122                                  
 11123 00000D20 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11124                                  					; INSTALL_FAKE_BPB
 11125 00000D23 7514                    		jnz	short InstallFakeBpb
 11126                                  
 11127                                  		; were we returning a fake bpb when asked to build a bpb?
 11128                                  
 11129                                  		; 10/12/2022
 11130 00000D25 26F6452304              		test	byte [es:di+35], 4
 11131                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11132                                  					; return_fake_bpb
 11133 00000D2A 7405                    		jz	short InstallRecommendedBpb
 11134                                  
 11135                                  		; we were returning a fake bpb but we can stop now
 11136                                  
 11137                                  		; 10/12/2022
 11138 00000D2C 26806523FB              		and	byte [es:di+35], 0FBh
 11139                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11140                                  					; ~return_fake_bpb
 11141                                  InstallRecommendedBpb:			
 11142 00000D31 B91F00                  		mov	cx, 31		; A_BPB.size
 11143 00000D34 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11144 00000D37 EB0B                    		jmp	short CopyTheBpb
 11145                                  ; ---------------------------------------------------------------------------
 11146                                  
 11147                                  InstallFakeBpb:
 11148                                  		; 10/12/2022
 11149 00000D39 26804D2304              		or	byte [es:di+35], 4				
 11150                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11151                                  					; return_fake_bpb
 11152 00000D3E B91900                  		mov	cx, 25		; A_BPB.size - 6
 11153                                  					; move 'smaller' bpb
 11154 00000D41 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11155                                  
 11156                                  CopyTheBpb:				
 11157 00000D44 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11158 00000D47 F3A4                    		rep movsb
 11159 00000D49 1E                      		push	ds		; Save packet segment
 11160                                  		; 17/10/2022
 11161 00000D4A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11162                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11163                                  					; Setup	for ds -> Bios_Data
 11164 00000D4F E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11165 00000D52 1F                      		pop	ds		; Restore packet segment
 11166 00000D53 5F                      		pop	di		; Restore bds pointer
 11167                                  setTrackTable:				
 11168 00000D54 8B4F26                  		mov	cx, [bx+38]
 11169 00000D57 1E                      		push	ds
 11170 00000D58 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11171 00000D5D 890E[3905]              		mov	[sectorspertrack], cx
 11172 00000D61 1F                      		pop	ds
 11173                                  		; 10/12/2022
 11174 00000D62 26806523F7              		and	byte [es:di+35], 0F7h
 11175                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11176                                  					; ~good_tracklayout
 11177 00000D67 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11178                                  					; TRACKLAYOUT_IS_GOOD
 11179 00000D6A 7405                    		jz	short UglyTrackLayOut
 11180                                  		; 10/12/2022
 11181 00000D6C 26804D2308              		or	byte [es:di+35], 8
 11182                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11183                                  					; good_tracklayout
 11184                                  UglyTrackLayOut:			
 11185 00000D71 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11186 00000D74 771A                    		ja	short TooManyPerTrack
 11187                                  		;jcxz	short SectorInfoSaved
 11188 00000D76 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 11189 00000D78 BF[3B05]                		mov	di, tracktable
 11190 00000D7B 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11191                                  		; 17/10/2022
 11192 00000D7E 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11193                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11194                                  					; Trash	our bds	pointer
 11195                                  StoreSectorInfo:			
 11196 00000D83 47                      		inc	di
 11197 00000D84 47                      		inc	di		; Skip over cylinder and head
 11198 00000D85 AD                      		lodsw			; Get sector id
 11199 00000D86 AA                      		stosb			; Copy it
 11200 00000D87 AD                      		lodsw			; Get sector size
 11201 00000D88 E8E301                  		call	SectSizeToSectIndex
 11202 00000D8B AA                      		stosb			; Store	sector SIZE index
 11203 00000D8C E2F5                    		loop	StoreSectorInfo
 11204                                  SectorInfoSaved:			
 11205 00000D8E F8                      		clc
 11206 00000D8F C3                      		retn
 11207                                  ; ---------------------------------------------------------------------------
 11208                                  
 11209                                  TooManyPerTrack:			
 11210 00000D90 B00C                    		mov	al, 0Ch
 11211 00000D92 F9                      		stc
 11212 00000D93 C3                      		retn
 11213                                  ; ---------------------------------------------------------------------------
 11214                                  
 11215                                  ; 16/10/2022
 11216                                  
 11217                                  ; ==========================================================================
 11218                                  ; FormatTrack:
 11219                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11220                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11221                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11222                                  ;
 11223                                  ; input: ES:di points to bds for drive
 11224                                  ;
 11225                                  ; output:
 11226                                  ;	for status call:
 11227                                  ;	specialfunction byte set to:
 11228                                  ;		0 - rom support + legal combination
 11229                                  ;		1 - no rom support
 11230                                  ;		2 - illegal combination
 11231                                  ;		3 - no media present
 11232                                  ;	carry cleared.
 11233                                  ;
 11234                                  ;	for format track:
 11235                                  ;		carry set if error
 11236                                  ;
 11237                                  ; ==========================================================================
 11238                                  
 11239                                  ; 16/03/2019
 11240                                  
 11241                                  		; 19/10/2022
 11242                                  FormatTrack:
 11243 00000D94 C51E[1200]              		lds	bx, [ptrsav]
 11244 00000D98 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11245 00000D9B F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11246                                  					; STATUS_FOR_FORMAT
 11247 00000D9E 740E                    		jz	short DoFormatTrack
 11248 00000DA0 1E                      		push	ds
 11249                                  		; 17/10/2022
 11250 00000DA1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11251                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11252 00000DA6 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11253 00000DA9 1F                      		pop	ds
 11254 00000DAA 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11255 00000DAC F8                      		clc
 11256 00000DAD C3                      		retn
 11257                                  ; ---------------------------------------------------------------------------
 11258                                  
 11259                                  DoFormatTrack:				
 11260 00000DAE 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11261                                  					; DEV_HARDDISK
 11262 00000DB3 7508                    		jnz	short DoFormatDiskette
 11263                                  		; 17/10/2022
 11264 00000DB5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11265                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11266                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11267 00000DBA E99C00                  		jmp	VerifyTrack
 11268                                  ; ---------------------------------------------------------------------------
 11269                                  
 11270                                  DoFormatDiskette:			
 11271 00000DBD 8B4F01                  		mov	cx, [bx+1]
 11272 00000DC0 8B5703                  		mov	dx, [bx+3]
 11273 00000DC3 F60702                  		test	byte [bx], 2
 11274                                  		; 17/10/2022
 11275 00000DC6 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11276                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11277                                  					; Setup	ds-> Bios_Data for verify
 11278 00000DCB 7403                    		jz	short DoFormatDiskette_1
 11279 00000DCD E9E400                  		jmp	VerifyTrack_Err
 11280                                  ; ---------------------------------------------------------------------------
 11281                                  
 11282                                  DoFormatDiskette_1:			
 11283 00000DD0 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11284 00000DD3 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11285 00000DD5 7406                    		jz	short NeedToSetDasd ; Old rom
 11286 00000DD7 3C03                    		cmp	al, 3		; Time out error?
 11287 00000DD9 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11288                                  					; about	the illegal combination)
 11289 00000DDB EB67                    		jmp	short FormatFailed
 11290                                  ; ---------------------------------------------------------------------------
 11291                                  
 11292                                  NeedToSetDasd:				
 11293 00000DDD 52                      		push	dx
 11294 00000DDE E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11295 00000DE1 5A                      		pop	dx
 11296                                  NoSetDasd:				
 11297 00000DE2 E854FA                  		call	checksingle	; Do any needed	diskette swapping
 11298 00000DE5 89D0                    		mov	ax, dx		; Get track from packet
 11299 00000DE7 A3[3901]                		mov	[trknum], ax
 11300 00000DEA 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11301 00000DEE 88CC                    		mov	ah, cl
 11302 00000DF0 BB[3B05]                		mov	bx, tracktable
 11303 00000DF3 8B0E[3905]              		mov	cx, [sectorspertrack]
 11304                                  
 11305                                  StoreCylinderHead:			
 11306 00000DF7 8907                    		mov	[bx], ax	; Store	into TrackTable
 11307 00000DF9 83C304                  		add	bx, 4		; Skip to next sector field
 11308 00000DFC E2F9                    		loop	StoreCylinderHead
 11309 00000DFE B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11310                                  FormatRetry:				
 11311 00000E01 51                      		push	cx
 11312 00000E02 BB[3B05]                		mov	bx, tracktable
 11313 00000E05 A0[3905]                		mov	al, [sectorspertrack]
 11314 00000E08 B405                    		mov	ah, 5		; romformat
 11315 00000E0A 8C1E[3705]              		mov	[xfer_seg], ds
 11316 00000E0E E87F02                  		call	ToRom
 11317 00000E11 59                      		pop	cx
 11318 00000E12 7216                    		jb	short FormatError
 11319 00000E14 51                      		push	cx		; Now verify the sectors just formatted.
 11320                                  					; NOTE:	because	of bug in some BIOSes we have to
 11321                                  					;	set ES:BX to 00:00
 11322 00000E15 53                      		push	bx
 11323 00000E16 31DB                    		xor	bx, bx
 11324 00000E18 891E[3705]              		mov	[xfer_seg], bx
 11325 00000E1C A0[3905]                		mov	al, [sectorspertrack]
 11326 00000E1F B404                    		mov	ah, 4		; romverify
 11327 00000E21 B101                    		mov	cl, 1
 11328 00000E23 E86A02                  		call	ToRom
 11329 00000E26 5B                      		pop	bx
 11330 00000E27 59                      		pop	cx
 11331 00000E28 7329                    		jnb	short FormatOk
 11332                                  FormatError:				
 11333 00000E2A E84B02                  		call	ResetDisk
 11334 00000E2D C606[3906]01            		mov	byte [had_format_error], 1
 11335 00000E32 50                      		push	ax
 11336 00000E33 51                      		push	cx
 11337 00000E34 52                      		push	dx
 11338 00000E35 E8AA01                  		call	SetMediaForFormat
 11339 00000E38 3C01                    		cmp	al, 1
 11340 00000E3A 7503                    		jnz	short WhileErr
 11341 00000E3C E84201                  		call	SetDasd
 11342                                  WhileErr:				
 11343 00000E3F 5A                      		pop	dx
 11344 00000E40 59                      		pop	cx
 11345 00000E41 58                      		pop	ax
 11346 00000E42 E2BD                    		loop	FormatRetry
 11347                                  FormatFailed:				
 11348 00000E44 C606[3906]01            		mov	byte [had_format_error], 1
 11349                                  					; Set the format error flag
 11350 00000E49 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11351 00000E4C 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11352 00000E4E B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11353                                  DoMapIt:				
 11354 00000E50 E97AFD                  		jmp	maperror
 11355                                  ; ---------------------------------------------------------------------------
 11356                                  
 11357                                  FormatOk:				
 11358 00000E53 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11359 00000E58 C3                      		retn
 11360                                  ; ---------------------------------------------------------------------------
 11361                                  
 11362                                  ; 16/10/2022
 11363                                  
 11364                                  ; ==========================================================================
 11365                                  ;
 11366                                  ; VerifyTrack:
 11367                                  ;
 11368                                  ; input: ES:di points to bds for drive
 11369                                  ; ==========================================================================
 11370                                  
 11371                                  VerifyTrack:				
 11372 00000E59 1E                      		push	ds
 11373 00000E5A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11374 00000E5E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11375                                  
 11376                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11377                                  
 11378 00000E61 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11379 00000E64 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11380 00000E67 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11381 00000E6A 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11382                                  					; Get option flag word
 11383 00000E6C 1F                      		pop	ds
 11384 00000E6D C606[2001]04            		mov	byte [rflag], 4	; romverify
 11385 00000E72 890E[3301]              		mov	[curtrk], cx
 11386 00000E76 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11387 00000E79 8B0E[3905]              		mov	cx, [sectorspertrack]
 11388                                  
 11389                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11390                                  		; specified if not we should go to the normal track verification
 11391                                  		; routine. If fast format has been specified we should get the
 11392                                  		; number of tracks to be verified and check it to see if it is
 11393                                  		; > 255. If it is then it is an error and we should go to
 11394                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11395                                  		; sectors per track to get the total number of sectors to be
 11396                                  		; verified. This should also be less than equal to 255
 11397                                  		; otherwise we go to same error exit. If everything is okay
 11398                                  		; we initalise cx to the total sectors. use ax as a temporary
 11399                                  		; register.
 11400                                  
 11401                                  					; Special function requested?	
 11402 00000E7D F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11403 00000E80 7421                    		jz	short NormVerifyTrack
 11404 00000E82 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11405 00000E84 08E4                    		or	ah, ah
 11406 00000E86 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11407 00000E88 F6E1                    		mul	cl
 11408 00000E8A 08E4                    		or	ah, ah
 11409 00000E8C 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11410 00000E8E 89C1                    		mov	cx, ax
 11411                                  		; 10/12/2022
 11412 00000E90 26F6452301              		test	byte [es:di+35], 1
 11413                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11414                                  					; fnon_removable
 11415 00000E95 740C                    		jz	short NormVerifyTrack
 11416                                  					; Multitrack operation = on?
 11417                                  		; 10/12/2022
 11418                                  		; 19/10/2022
 11419 00000E97 F606[2F05]80            		test	byte [multrk_flag], 80h
 11420                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11421                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11422 00000E9C 7405                    		jz	short NormVerifyTrack
 11423 00000E9E C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11424                                  NormVerifyTrack:			
 11425 00000EA3 31C0                    		xor	ax, ax		; 1st sector
 11426 00000EA5 31DB                    		xor	bx, bx
 11427 00000EA7 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11428 00000EAB E83F00                  		call	TrackIo
 11429 00000EAE C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11430 00000EB3 C3                      		retn
 11431                                  ; ---------------------------------------------------------------------------
 11432                                  
 11433                                  VerifyTrack_Err:			
 11434 00000EB4 B401                    		mov	ah, 1
 11435 00000EB6 E914FD                  		jmp	maperror
 11436                                  ; ---------------------------------------------------------------------------
 11437                                  
 11438                                  ; 16/10/2022
 11439                                  
 11440                                  ; ==========================================================================
 11441                                  ;
 11442                                  ; ReadTrack:
 11443                                  ;
 11444                                  ; input: ES:di points to bds for drive
 11445                                  ;
 11446                                  ; ==========================================================================
 11447                                  
 11448                                  ReadTrack:				
 11449 00000EB9 C606[2001]02            		mov	byte [rflag], 2	; romread
 11450 00000EBE EB05                    		jmp	short ReadWriteTrack
 11451                                  ; ---------------------------------------------------------------------------
 11452                                  
 11453                                  WriteTrack:
 11454                                  
 11455                                  ; ==========================================================================
 11456                                  ;
 11457                                  ; WriteTrack:
 11458                                  ;
 11459                                  ; input: ES:di points to bds for drive
 11460                                  ;
 11461                                  ; ==========================================================================
 11462                                  				
 11463 00000EC0 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11464                                  
 11465                                  		; Fall into ReadWriteTrack
 11466                                  
 11467                                  ; ==========================================================================
 11468                                  ;
 11469                                  ; readWriteTrack:
 11470                                  ;
 11471                                  ; input:
 11472                                  ;    ES:di points to bds for drive
 11473                                  ;    rFlag - 2 for read,3 for write
 11474                                  ;
 11475                                  ; ==========================================================================
 11476                                  
 11477                                  ReadWriteTrack:	
 11478                                  		; save bds pointer segment so we can use it to access
 11479                                  		; our packet. Notice that this is not the standard register
 11480                                  		; assignment for accessing packets
 11481                                  		
 11482                                  		; 19/10/2022	
 11483 00000EC5 06                      		push	es
 11484 00000EC6 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11485 00000ECA 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11486 00000ECE 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11487 00000ED2 A3[3301]                		mov	[curtrk], ax
 11488 00000ED5 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11489 00000ED9 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11490 00000EDC 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11491 00000EE0 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11492 00000EE4 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11493                                  					; Get transfer address
 11494                                  
 11495                                  		; we just trashed our packet address, but we no longer care
 11496                                  
 11497 00000EE8 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11498 00000EEC 07                      		pop	es
 11499                                  
 11500                                  		; Fall into TrackIo
 11501                                  
 11502                                  ; =============== S U B	R O U T	I N E =======================================
 11503                                  
 11504                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11505                                  
 11506                                  ; ==========================================================================
 11507                                  ;
 11508                                  ; TrackIo:
 11509                                  ;    performs track read/write/verify
 11510                                  ;
 11511                                  ;   input:
 11512                                  ;      rFlag	- 2 = read
 11513                                  ;		  3 = write
 11514                                  ;		  4 = verify
 11515                                  ;      AX	- Index into track table of first sector to io
 11516                                  ;      CX	- Number of sectors to io
 11517                                  ;      Xfer_Seg:BX - Transfer address
 11518                                  ;      ES:DI	- Pointer to bds
 11519                                  ;      CurTrk	- Current cylinder
 11520                                  ;      CurHd	- Current head
 11521                                  ;
 11522                                  ; ==========================================================================
 11523                                  
 11524                                  ; 16/03/2019 - Retro DOS v4.0
 11525                                  		
 11526                                  		; 19/10/2022
 11527                                  TrackIo:	
 11528                                  					; Procedure `disk' will pop stack to
 11529 00000EED 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11530 00000EF1 E845F9                  		call	checksingle	; Ensure correct disk is in drv
 11531 00000EF4 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11532                                  					; See if we have already set	disk
 11533 00000EF9 7407                    		jz	short Dptalreadyset ; base table
 11534 00000EFB 50                      		push	ax		; set up tables	and variables for i/o
 11535 00000EFC 51                      		push	cx
 11536 00000EFD E897FA                  		call	iosetup
 11537 00000F00 59                      		pop	cx
 11538 00000F01 58                      		pop	ax
 11539                                  Dptalreadyset:				; Point si at the table entry of the			
 11540 00000F02 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11541 00000F05 D1E0                    		shl	ax, 1
 11542 00000F07 D1E0                    		shl	ax, 1
 11543 00000F09 01C6                    		add	si, ax
 11544                                  
 11545                                  		; WE WANT:
 11546                                  		; CX to	be the number of times we have to loop
 11547                                  		; DX to	be the number of sectors we read on each iteration
 11548                                  		
 11549 00000F0B BA0100                  		mov	dx, 1
 11550                                  		; 12/12/2022
 11551 00000F0E 26F6452308              		test	byte [es:di+23h], 8
 11552                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11553                                  					; good_tracklayout
 11554 00000F13 7402                    		jz	short ionextsector
 11555                                  		
 11556 00000F15 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11557                                  ionextsector:				
 11558 00000F17 51                      		push	cx
 11559 00000F18 52                      		push	dx
 11560 00000F19 46                      		inc	si
 11561 00000F1A 46                      		inc	si		; Skip over the	cylinder and head in
 11562                                  					; the track table
 11563 00000F1B AC                      		lodsb			; Get sector ID	from track table
 11564 00000F1C A2[3101]                		mov	[cursec], al
 11565                                  
 11566                                  		; assumptions for a fixed disk multi-track disk	i/o
 11567                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11568                                  		;     only CL is valid.
 11569                                  		; 2). Sector size should be set	to 512 bytes.
 11570                                  		; 3). Good track layout
 11571                                  		
 11572                                  		; 12/12/2022
 11573 00000F1F 26F6452301              		test	byte [es:di+23h], 1
 11574                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11575                                  					; fnon_removable ; Fixed disk?
 11576 00000F24 7414                    		jz	short IoRemovable ; No
 11577                                  		; 12/12/2022
 11578 00000F26 F606[2F05]80            		test	byte [multrk_flag], 80h
 11579                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11580                                  						; Allow multi-track operation?
 11581 00000F2B 740D                    		jz	short IoRemovable ; No,don't do that.
 11582 00000F2D 8916[2201]              		mov	[seccnt], dx
 11583 00000F31 89D0                    		mov	ax, dx
 11584 00000F33 E81DFB                  		call	Disk
 11585 00000F36 5A                      		pop	dx
 11586 00000F37 59                      		pop	cx
 11587 00000F38 F8                      		clc
 11588 00000F39 C3                      		retn
 11589                                  ; ---------------------------------------------------------------------------
 11590                                  
 11591                                  IoRemovable:				
 11592 00000F3A AC                      		lodsb			; Get sector size index	from track
 11593                                  					; table	and save it
 11594 00000F3B 50                      		push	ax
 11595 00000F3C 56                      		push	si
 11596 00000F3D 1E                      		push	ds		; Save Bios_Data
 11597 00000F3E 50                      		push	ax
 11598 00000F3F 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11599                                  					; Fetch	EOT while ds-> Bios_Data
 11600 00000F43 C536[2D01]              		lds	si, [dpt]
 11601 00000F47 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11602 00000F4A 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11603 00000F4D 58                      		pop	ax
 11604 00000F4E 1F                      		pop	ds
 11605 00000F4F 88D0                    		mov	al, dl
 11606 00000F51 A3[2201]                		mov	[seccnt], ax
 11607 00000F54 E8FCFA                  		call	Disk
 11608 00000F57 5E                      		pop	si		; Advance buffer pointer by adding
 11609                                  					; sector size
 11610 00000F58 58                      		pop	ax
 11611 00000F59 E81D00                  		call	SectorSizeIndexToSectorSize
 11612 00000F5C 01C3                    		add	bx, ax
 11613 00000F5E 5A                      		pop	dx
 11614 00000F5F 59                      		pop	cx
 11615 00000F60 E2B5                    		loop	ionextsector
 11616 00000F62 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11617                                  		;jz	short NoNeedDone
 11618                                  		; 12/12/2022
 11619 00000F67 7404                    		je	short NoNeedDone2
 11620 00000F69 E872FA                  		call	done		; set time of last access, and reset
 11621                                  					; entries in Dpt.
 11622                                  NoNeedDone:				
 11623 00000F6C F8                      		clc
 11624                                  NoNeedDone2:
 11625 00000F6D C3                      		retn
 11626                                  
 11627                                  ; =============== S U B	R O U T	I N E =======================================
 11628                                  
 11629                                  ; ---------------------------------------------------------------------------
 11630                                  ;
 11631                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11632                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11633                                  ; are permissible.
 11634                                  ;
 11635                                  ; On Input   AX contains sector size in bytes
 11636                                  ; On Output  AL Contains index
 11637                                  ; All other registers preserved
 11638                                  ;
 11639                                  ; ---------------------------------------------------------------------------
 11640                                  
 11641                                  SectSizeToSectIndex:	
 11642 00000F6E 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11643                                  					; examine upper	byte only
 11644 00000F71 7703                    		ja	short OneK
 11645 00000F73 88E0                    		mov	al, ah		; value	in AH is the index!
 11646 00000F75 C3                      		retn
 11647                                  ; ---------------------------------------------------------------------------
 11648                                  
 11649                                  OneK:					
 11650 00000F76 B003                    		mov	al, 3
 11651 00000F78 C3                      		retn
 11652                                  
 11653                                  ; =============== S U B	R O U T	I N E =======================================
 11654                                  
 11655                                  
 11656                                  SectorSizeIndexToSectorSize:
 11657 00000F79 88C1                    		mov	cl, al
 11658 00000F7B B88000                  		mov	ax, 128
 11659 00000F7E D3E0                    		shl	ax, cl
 11660 00000F80 C3                      		retn
 11661                                  
 11662                                  ; =============== S U B	R O U T	I N E =======================================
 11663                                  
 11664                                  ; 16/10/2022
 11665                                  
 11666                                  ; ---------------------------------------------------------------------------
 11667                                  ;
 11668                                  ; SetDASD
 11669                                  ;
 11670                                  ; Set up the rom for formatting.
 11671                                  ; we have to tell the rom bios what type of disk is in the drive.
 11672                                  ;
 11673                                  ; On Input   - ES:di - Points to bds
 11674                                  ;
 11675                                  ; ---------------------------------------------------------------------------
 11676                                  
 11677                                  		; 19/10/2022
 11678                                  SetDasd:	
 11679 00000F81 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11680                                  					; See if we've previously set dasd type
 11681 00000F86 740C                    		jz	short DoSetDasd
 11682                                  		; 10/12/2022
 11683 00000F88 26F6452380              		test	byte [es:di+23h], 80h
 11684                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11685                                  					; set_dasd_true
 11686 00000F8D 744A                    		jz	short DasdHasBeenSet
 11687                                  		; 10/12/2022
 11688 00000F8F 268065237F              		and	byte [es:di+23h], 7Fh
 11689                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11690                                  					; ~set_dasd_true
 11691                                  DoSetDasd:				
 11692 00000F94 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11693 00000F99 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11694 00000F9E B004                    		mov	al, 4
 11695 00000FA0 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11696                                  					; DEV_3INCH720KB
 11697 00000FA5 741A                    		jz	short DoSet
 11698 00000FA7 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11699                                  					; DEV_5INCH96TPI
 11700 00000FAC 7404                    		jz	short GotBig
 11701 00000FAE B001                    		mov	al, 1
 11702 00000FB0 EB0F                    		jmp	short DoSet
 11703                                  ; ---------------------------------------------------------------------------
 11704                                  
 11705                                  GotBig:					
 11706 00000FB2 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11707 00000FB4 803E[3706]00            		cmp	byte [mediatype], 0
 11708 00000FB9 7506                    		jnz	short DoSet
 11709                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11710                                  		; 10/12/2022
 11711                                  		;inc	al  ; al = 3
 11712                                  		; 18/12/2022
 11713 00000FBB 40                      		inc	ax  ; al = 3
 11714 00000FBC C606[3B01]54            		mov	byte [gap_patch], 54h
 11715                                  DoSet:					
 11716 00000FC1 1E                      		push	ds
 11717 00000FC2 56                      		push	si
 11718 00000FC3 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11719                                  
 11720 00000FC7 C5367800                		lds	si, [DSKADR]
 11721                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11722                                  		;;lds	si, ds:78h		
 11723                                  
 11724 00000FCB C644090F                		mov	byte [si+9], 0Fh ;
 11725                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11726 00000FCF 5E                      		pop	si
 11727 00000FD0 1F                      		pop	ds
 11728 00000FD1 B417                    		mov	ah, 17h
 11729 00000FD3 268A5504                		mov	dl, [es:di+4]
 11730 00000FD7 CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11731                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11732                                  DasdHasBeenSet:				
 11733 00000FD9 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11734 00000FDD 8826[3701]              		mov	[formt_eot], ah
 11735 00000FE1 C3                      		retn
 11736                                  
 11737                                  ; =============== S U B	R O U T	I N E =======================================
 11738                                  
 11739                                  ; 16/10/2022
 11740                                  
 11741                                  ; ---------------------------------------------------------------------------
 11742                                  ;
 11743                                  ; Set Media Type for Format
 11744                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11745                                  ; BPB area in the BDS can be handled by the rom.
 11746                                  ; On Input, ES:DI -> current BDS.
 11747                                  ; The status of the operation is returned in AL
 11748                                  ;
 11749                                  ;	- 0 - if the support is available,and the combination is valid.
 11750                                  ;	- 1 - no rom support
 11751                                  ;	- 2 - illegal combination
 11752                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11753                                  ;
 11754                                  ; Flags also may be altered. All other registers preserved.
 11755                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11756                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11757                                  ; to the one returned. the original pointer to the disk base table is stored
 11758                                  ; in TempDpt, until it is restored.
 11759                                  ;
 11760                                  ; ---------------------------------------------------------------------------
 11761                                  
 11762                                  		; 19/10/2022
 11763                                  SetMediaForFormat:	
 11764 00000FE2 51                      		push	cx
 11765 00000FE3 52                      		push	dx
 11766                                  
 11767                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11768                                  		; but we need to call int 13h, ah=18h again.
 11769                                  
 11770 00000FE4 803E[3906]01            		cmp	byte [had_format_error], 1
 11771 00000FE9 7425                    		jz	short SkipSaveDskAdr
 11772 00000FEB 30C0                    		xor	al, al		; If already done return 0
 11773 00000FED 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11774 00000FF2 7502                    		jnz	short DoSetMediaForFormat
 11775 00000FF4 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11776                                  ; ---------------------------------------------------------------------------
 11777                                  
 11778                                  DoSetMediaForFormat:			
 11779 00000FF6 06                      		push	es
 11780 00000FF7 56                      		push	si
 11781 00000FF8 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11782 00000FFC 26C4367800              		les	si, [es:DSKADR]
 11783                                  		;les	si, es:78h	; [es:DSKADR]
 11784                                  					; Get pointer to disk base table
 11785 00001001 8936[2D01]              		mov	[dpt], si
 11786 00001005 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11787                                  
 11788                                  		; Initialize the head settle time to 0Fh. See the offsets
 11789                                  		; given in dskprm.inc.
 11790                                  
 11791 00001009 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11792 0000100E 5E                      		pop	si
 11793 0000100F 07                      		pop	es
 11794                                  
 11795                                  SkipSaveDskAdr:				
 11796 00001010 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11797 00001014 49                      		dec	cx
 11798 00001015 80E503                  		and	ch, 3
 11799 00001018 D0CD                    		ror	ch, 1
 11800 0000101A D0CD                    		ror	ch, 1
 11801 0000101C 86E9                    		xchg	ch, cl
 11802 0000101E 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11803 00001022 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11804 00001026 06                      		push	es
 11805 00001027 1E                      		push	ds
 11806 00001028 56                      		push	si
 11807 00001029 57                      		push	di
 11808 0000102A B418                    		mov	ah, 18h
 11809 0000102C CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11810                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11811 0000102E 7233                    		jb	short FormaStatErr
 11812 00001030 803E[3906]01            		cmp	byte [had_format_error], 1
 11813 00001035 7425                    		jz	short skip_disk_base_setting
 11814 00001037 06                      		push	es		; Save segment returned	by the rom
 11815 00001038 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11816 0000103C 26C4367800              		les	si, [es:DSKADR]
 11817                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11818                                  					; Get current disk base	table
 11819 00001041 8936[3A06]              		mov	[tempdpt], si
 11820 00001045 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11821 00001049 8E06[1A00]              		mov	es, [zeroseg]
 11822                                  		;mov	es:78h,	di
 11823 0000104D 26893E7800              		mov	[es:DSKADR], di
 11824                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11825 00001052 268F067A00              		pop	word [es:DSKADR+2]
 11826 00001057 C606[3806]01            		mov	byte [media_set_for_format], 1
 11827                                  skip_disk_base_setting:			
 11828 0000105C 30C0                    		xor	al, al		; Legal	combination + rom support code
 11829                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11830 0000105E A2[3906]                		mov	[had_format_error], al
 11831 00001061 EB0E                    		jmp	short PopStatRet
 11832                                  ; ---------------------------------------------------------------------------
 11833                                  
 11834                                  FormaStatErr:
 11835                                  		; 10/12/2022
 11836 00001063 B003                    		mov	al, 3
 11837                                  				
 11838 00001065 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11839                                  					; Illegal combination =	0Ch
 11840 00001068 7406                    		jz	short FormatStatIllegalComb
 11841 0000106A 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11842 0000106D 7402                    		jz	short FormatStatTimeOut
 11843                                  		; 10/12/2022
 11844                                  		;dec	al
 11845                                  		; 18/12/2022
 11846 0000106F 48                      		dec	ax
 11847                                  		; al = 2
 11848                                  		;mov	al, 1		; Function not supported.
 11849                                  		;jmp	short PopStatRet
 11850                                  ; ---------------------------------------------------------------------------
 11851                                  
 11852                                  FormatStatIllegalComb:
 11853                                  		; 10/12/2022
 11854                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11855                                  		; 18/12/2022
 11856 00001070 48                      		dec	ax
 11857                                  		; al = 2				
 11858                                  		;mov	al, 2		; Function supported, but
 11859                                  					; Illegal sect/trk,trk combination.
 11860                                  		; 10/12/2022
 11861                                  		;jmp	short PopStatRet
 11862                                  ; ---------------------------------------------------------------------------
 11863                                  
 11864                                  FormatStatTimeOut:			
 11865                                  		; 10/12/2022
 11866                                  		; al = 3
 11867                                  		;mov	al, 3		; Function supported, but
 11868                                  					; Media	not present.
 11869                                  PopStatRet:				
 11870 00001071 5F                      		pop	di
 11871 00001072 5E                      		pop	si
 11872 00001073 1F                      		pop	ds
 11873 00001074 07                      		pop	es
 11874                                  SetMediaRet:				
 11875 00001075 5A                      		pop	dx
 11876 00001076 59                      		pop	cx
 11877 00001077 C3                      		retn
 11878                                  
 11879                                  ; =============== S U B	R O U T	I N E =======================================
 11880                                  
 11881                                  ; 16/10/2022
 11882                                  
 11883                                  ; ---------------------------------------------------------------------------
 11884                                  ;
 11885                                  ; RESET THE DRIVE
 11886                                  ;
 11887                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11888                                  ; slow head settle time for the next operation. this is because the reset
 11889                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11890                                  ; time around - there is a problem with 3.5" drives in that the head does
 11891                                  ; not settle down in time,even for read operations!!
 11892                                  ;
 11893                                  ; ---------------------------------------------------------------------------
 11894                                  
 11895                                  ResetDisk:	
 11896 00001078 50                      		push	ax
 11897 00001079 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11898                                  					; Reset while formatting?
 11899 0000107E 7505                    		jnz	short ResetDisk_cont
 11900                                  					; Then verify operation in "fmt & vrfy"
 11901 00001080 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11902                                  ResetDisk_cont:				
 11903 00001085 30E4                    		xor	ah, ah		; So signals that we had a format error
 11904 00001087 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11905                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11906 00001089 C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11907                                  					; Zap up the speed
 11908 0000108E 58                      		pop	ax
 11909 0000108F C3                      		retn
 11910                                  
 11911                                  ; =============== S U B	R O U T	I N E =======================================
 11912                                  
 11913                                  ; 16/10/2022
 11914                                  
 11915                                  ; ---------------------------------------------------------------------------
 11916                                  ;
 11917                                  ; This routine sets up the drive parameter table with the values needed for
 11918                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11919                                  ;
 11920                                  ; on entry  -	ES:DI - points to bds for the drive
 11921                                  ;		Xfer_Seg:BX - points to trkbuf
 11922                                  ;		AL    - number of sectors
 11923                                  ;		AH    - int 13 function code
 11924                                  ;		CL    - sector number for verify
 11925                                  ;		DS    - Bios_Data
 11926                                  ;
 11927                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11928                                  ;		AX and flags are the results of the int 13
 11929                                  ;
 11930                                  ; ---------------------------------------------------------------------------
 11931                                  
 11932                                  		; 19/10/2022
 11933                                  ToRom:	
 11934 00001090 53                      		push	bx
 11935 00001091 56                      		push	si
 11936                                  
 11937                                  		; Compaq bug fix - check whether we are using new ROM
 11938                                  		; functionality to set up format, not merely if it exists.
 11939                                  		; This was formerly a check against [new_rom]
 11940                                  
 11941 00001092 F606[3806]01            		test	byte [media_set_for_format], 1
 11942 00001097 7536                    		jnz	short GotValidDpt
 11943 00001099 50                      		push	ax
 11944 0000109A 06                      		push	es		; Save bds segment
 11945 0000109B 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11946                                  					; ffSmall ; is it a 3.5" drive?
 11947 000010A0 9C                      		pushf			; (Save	the cmp	result)
 11948 000010A1 8E06[1A00]              		mov	es, [zeroseg]
 11949                                  		;les	si, es:78h	; Get pointer to disk base table
 11950 000010A5 26C4367800              		les	si, [es:DSKADR]
 11951                                  		;mov	word ptr ds:dpt, si
 11952                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11953 000010AA 8936[2D01]              		mov	[dpt], si
 11954 000010AE 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11955                                  		
 11956 000010B2 A0[3701]                		mov	al, [formt_eot]
 11957 000010B5 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11958 000010B9 A0[3B01]                		mov	al, [gap_patch]
 11959 000010BC 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11960                                  					; Important for	format
 11961 000010C0 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11962                                  					; Assume we are	doing a	seek operation
 11963                                  					; Setup	motor start correctly for 3.5" drives
 11964 000010C5 9D                      		popf			; Get result of	earlier	cmp
 11965 000010C6 7505                    		jnz	short MotorStrtOK
 11966 000010C8 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11967                                  MotorStrtOK:				
 11968 000010CD 07                      		pop	es		; Restore bds segment
 11969 000010CE 58                      		pop	ax
 11970                                  GotValidDpt:				
 11971 000010CF 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11972 000010D3 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11973 000010D5 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11974 000010D9 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11975 000010DD 06                      		push	es		; Save bds segment
 11976 000010DE 8E06[3705]              		mov	es, [xfer_seg]
 11977 000010E2 CD13                    		int	13h		; DISK -
 11978 000010E4 07                      		pop	es		; Restore bds segment
 11979 000010E5 5E                      		pop	si
 11980 000010E6 5B                      		pop	bx
 11981 000010E7 C3                      		retn
 11982                                  
 11983                                  ; ---------------------------------------------------------------------------
 11984                                  
 11985                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11986                                  
 11987                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11988                                  
 11989                                  ; ==========================================================================
 11990                                  ;
 11991                                  ; get the owner of the physical drive represented by the logical drive in al.
 11992                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11993                                  ; if this is not the case, the system may hang, just following the linked list.
 11994                                  ;
 11995                                  ; ==========================================================================
 11996                                  
 11997                                  		; 19/10/2022
 11998                                  ioctl_getown:
 11999 000010E8 E8E0F3                  		call	SetDrive
 12000 000010EB 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12001                                  					; Get physical drive number
 12002 000010EF C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12003                                  ownloop:				
 12004 000010F3 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12005 000010F7 7507                    		jnz	short getnextBDS
 12006                                  		; 10/12/2022
 12007 000010F9 26F6452320              		test	byte [es:di+23h], 20h
 12008                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12009                                  					; fi_own_physical
 12010 000010FE 7515                    		jnz	short exitown
 12011                                  getnextBDS:				
 12012 00001100 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12013 00001103 EBEE                    		jmp	short ownloop
 12014                                  ; ---------------------------------------------------------------------------
 12015                                  
 12016                                  ; ==========================================================================
 12017                                  ;
 12018                                  ; set the ownership of the physical drive represented by the logical drive
 12019                                  ; in al to al.
 12020                                  ;
 12021                                  ; ==========================================================================
 12022                                  
 12023                                  		; 19/10/2022
 12024                                  ioctl_setown:
 12025 00001105 E8C3F3                  		call	SetDrive
 12026 00001108 C606[7A00]01            		mov	byte [fsetowner], 1
 12027                                  					; set flag for CheckSingle to look at.
 12028 0000110D E829F7                  		call	checksingle
 12029 00001110 C606[7A00]00            		mov	byte [fsetowner], 0
 12030                                  					; set ownership	of drive reset flag
 12031                                  		; Fall into ExitOwn
 12032                                  
 12033                                  ; ==========================================================================
 12034                                  ;
 12035                                  ; if there is only one logical drive assigned to this physical drive, return
 12036                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12037                                  ;
 12038                                  ; ==========================================================================
 12039                                  
 12040                                  exitown:				
 12041 00001115 30C9                    		xor	cl, cl
 12042                                  		; 12/12/2022
 12043 00001117 26F6452310              		test	byte [es:di+23h], 10h
 12044                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12045                                  					; fi_am_mult
 12046 0000111C 7406                    		jz	short exitnomult
 12047 0000111E 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12048                                  					; Get logical drive number
 12049                                  					; Get it 1-based
 12050 00001122 FEC1                    		inc	cl
 12051                                  exitnomult:				
 12052 00001124 C51E[1200]              		lds	bx, [ptrsav]
 12053 00001128 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12054                                  					; Exit normal termination
 12055                                  		; 12/12/2022
 12056                                  		; cf=0
 12057                                  		;clc
 12058 0000112B C3                      		retn
 12059                                  
 12060                                  ; =============== S U B	R O U T	I N E =======================================
 12061                                  
 12062                                  ; 16/10/2022
 12063                                  
 12064                                  ; ---------------------------------------------------------------------------
 12065                                  ;
 12066                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12067                                  ; only if the first byte of TempDpt is not -1.
 12068                                  ; all registers (including flags) are preserved.
 12069                                  ;
 12070                                  ; ---------------------------------------------------------------------------
 12071                                  
 12072                                  		; 24/12/2023
 12073                                  		; 19/10/2022
 12074                                  RestoreOldDpt:
 12075                                  		; if we have already restored the disk base table earlier,
 12076                                  		; do not do it again.
 12077                                  
 12078 0000112C 50                      		push	ax
 12079 0000112D 30C0                    		xor	al, al
 12080 0000112F A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 12081 00001132 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 12082 00001136 08C0                    		or	al, al
 12083 00001138 7418                    		jz	short DontRestore
 12084 0000113A 56                      		push	si
 12085 0000113B 1E                      		push	ds
 12086 0000113C 06                      		push	es
 12087 0000113D C536[3A06]              		lds	si, [tempdpt]
 12088                                  
 12089                                  		; 17/10/2022
 12090                                  		;mov	es, [cs:BIOSDATAWORD]
 12091                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12092                                  		;mov	es, [es:zeroseg]
 12093                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 12094                                  
 12095                                  		; 24/12/2023
 12096 00001141 31C0                    		xor	ax, ax
 12097 00001143 8EC0                    		mov	es, ax ; 0
 12098                                  
 12099                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 12100 00001145 2689367800              		mov	[es:DSKADR], si
 12101                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12102 0000114A 268C1E7A00              		mov	[es:DSKADR+2], ds
 12103 0000114F 07                      		pop	es
 12104 00001150 1F                      		pop	ds
 12105 00001151 5E                      		pop	si
 12106                                  DontRestore:
 12107 00001152 58                      		pop	ax
 12108                                  		; 12/12/2022
 12109                                  		; cf=0
 12110                                  		;clc			;  Clear carry
 12111 00001153 C3                      		retn
 12112                                  
 12113                                  ; ---------------------------------------------------------------------------
 12114                                  
 12115                                  ; 16/10/2022
 12116                                  
 12117                                  ; ==========================================================================
 12118                                  ;	get media id
 12119                                  ; ==========================================================================
 12120                                  ;
 12121                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12122                                  ;	    the media that has the extended boot record.
 12123                                  ;	    for the conventional media,this routine will return "unknown
 12124                                  ;	    media type" error to dos.
 12125                                  ;
 12126                                  ; INPUT :   ES:di -> bds table for this drive.
 12127                                  ;
 12128                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12129                                  ;	    if carry set,then al contains the device driver error number
 12130                                  ;	    that will be returned to dos.
 12131                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12132                                  ;
 12133                                  ; SUBROUTINES TO BE CALLED:
 12134                                  ;	BootIo:NEAR
 12135                                  ;
 12136                                  ; LOGIC:
 12137                                  ;	to recognize the extended boot record,this logic will actually
 12138                                  ;	access the boot sector even if it is a hard disk.
 12139                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12140                                  ;	field of bpb and the extended boot signature.
 12141                                  ;
 12142                                  ; {
 12143                                  ;	get logical drive number from bds table;
 12144                                  ;	rFlag = read operation;
 12145                                  ;	BootIo;		 /*get the media boot record into the buffer
 12146                                  ;	if (no error) then
 12147                                  ;	     if (extended boot record) then
 12148                                  ;		{ set volume label,volume serial number and system id
 12149                                  ;		  of the request packet to those of the boot record;
 12150                                  ;		};
 12151                                  ;	     else		  /*not an extended bpb */
 12152                                  ;		{ set register al to "unknown media.." error code;
 12153                                  ;		  set carry bit;
 12154                                  ;		};
 12155                                  ;	else
 12156                                  ;	     ret;	/*already error code is set in the register al
 12157                                  ;
 12158                                  ; ==========================================================================
 12159                                  
 12160                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12161                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12162                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12163                                  
 12164                                  		; 19/10/2022
 12165                                  GetMediaId:
 12166 00001154 E89F00                  		call	ChangeLineChk
 12167 00001157 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12168 0000115B C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12169 00001160 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12170 00001163 7224                    		jb	short IOCtl_If1
 12171                                  					; Valid? (0F0h-0FFh?)
 12172 00001165 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12173                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12174 0000116A 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12175                                  		; 10/12/2022
 12176 0000116C BE[7401]                		mov	si, disksector+26h
 12177 0000116F 803C29                  		cmp	byte [si], 29h
 12178                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12179                                  					; EXT_BOOT_SIGNATURE
 12180 00001172 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12181 00001174 C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12182 00001178 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12183                                  		; 10/12/2022
 12184 0000117C 46                      		inc	si
 12185                                  		; si = disksector+27h 
 12186                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12187 0000117D 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12188 00001180 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12189                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12190                                  					; +size_of_EXT_SYSTEM_ID
 12191 00001183 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12192                                  	
 12193                                  		; 10/12/2022
 12194                                  		; cf = 0
 12195                                  		;clc
 12196                                  
 12197 00001185 C3                      		retn
 12198                                  ; ---------------------------------------------------------------------------
 12199                                  
 12200                                  IOCtl_If2:				
 12201 00001186 B007                    		mov	al, 7		; error_unknown_media
 12202 00001188 F9                      		stc
 12203                                  IOCtl_If1:				
 12204 00001189 C3                      		retn
 12205                                  ; ---------------------------------------------------------------------------
 12206                                  
 12207                                  ; 16/10/2022
 12208                                  
 12209                                  ; ==========================================================================
 12210                                  ;  set media id
 12211                                  ; ==========================================================================
 12212                                  
 12213                                  ; function: set the volume label, the system id and the serial number of
 12214                                  ;	    the media that has the extended boot record.
 12215                                  ;	    for the conventional media, this routine will return "unknown
 12216                                  ;	    media.." error to dos.
 12217                                  ;	    this routine will also set the corresponding informations in
 12218                                  ;	    the bds table.
 12219                                  ;
 12220                                  ; input :   ES:di -> bds table for this drive.
 12221                                  ;
 12222                                  ; output:   the extended boot record in the media will be set according to
 12223                                  ;	    the request packet.
 12224                                  ;	    if carry set, then al contains the device driver error number
 12225                                  ;	    that will be returned to dos.
 12226                                  ;
 12227                                  ; subroutines to be called:
 12228                                  ;	BootIo:NEAR
 12229                                  ;
 12230                                  ; logic:
 12231                                  ;
 12232                                  ; {
 12233                                  ;	get drive_number from bds;
 12234                                  ;	rFlag = "read operation";
 12235                                  ;	BootIo;
 12236                                  ;	if (no error) then
 12237                                  ;	     if (extended boot record) then
 12238                                  ;		{ set volume label,volume serial number and system id
 12239                                  ;		  of the boot record to those of the request packet;
 12240                                  ;		  rFlag = "write operation";
 12241                                  ;		  get drive number from bds;
 12242                                  ;		  BootIo;	  /*write it back*/
 12243                                  ;		};
 12244                                  ;	     else		  /*not an extended bpb */
 12245                                  ;		{ set register al to "unknown media.." error code;
 12246                                  ;		  set carry bit;
 12247                                  ;		  ret;	 /*return back to caller */
 12248                                  ;		};
 12249                                  ;	else
 12250                                  ;	     ret;		 /*already error code is set */
 12251                                  ;
 12252                                  ; ==========================================================================
 12253                                  
 12254                                  		; 19/10/2022
 12255                                  SetMediaId:
 12256 0000118A E86900                  		call	ChangeLineChk
 12257 0000118D 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12258                                  					; Logical drive	number
 12259 00001191 88C2                    		mov	dl, al
 12260 00001193 C606[2001]02            		mov	byte [rflag], 2	; romread
 12261 00001198 52                      		push	dx
 12262 00001199 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12263 0000119C 5A                      		pop	dx
 12264 0000119D 723E                    		jb	short IOCtl_If6
 12265                                  					; Valid? (0F0h-0FFh?)
 12266 0000119F 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12267                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12268 000011A4 7234                    		jb	short IOCtl_If7	; Brif not
 12269 000011A6 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12270                                  					; EXT_BOOT_SIGNATURE
 12271 000011AB 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12272 000011AD 06                      		push	es		; Save BDS pointer
 12273 000011AE 57                      		push	di
 12274 000011AF 1E                      		push	ds		; Point	ES To boot record
 12275 000011B0 07                      		pop	es
 12276 000011B1 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12277 000011B4 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12278 000011B8 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12279 000011BB 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12280 000011BE B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12281                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12282                                  					; +size_of_EXT_SYSTEM_ID
 12283 000011C1 F3A4                    		rep movsb
 12284 000011C3 06                      		push	es		; point	ds back	to Bios_Data
 12285 000011C4 1F                      		pop	ds
 12286 000011C5 5F                      		pop	di		; restore bds pointer
 12287 000011C6 07                      		pop	es
 12288 000011C7 E86BF5                  		call	mov_media_ids	; update the bds media id info.
 12289 000011CA 88D0                    		mov	al, dl
 12290 000011CC C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12291 000011D1 E80A00                  		call	BootIo		; write	it back.
 12292 000011D4 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12293                                  					; make sure chk_media check the driver
 12294                                  					; return with error code from BootIo
 12295 000011D9 C3                      		retn
 12296                                  ; ---------------------------------------------------------------------------
 12297                                  
 12298                                  IOCtl_If7:				
 12299 000011DA B007                    		mov	al, 7		; error_unknown_media
 12300 000011DC F9                      		stc
 12301                                  IOCtl_If6:				
 12302 000011DD C3                      		retn
 12303                                  
 12304                                  ; =============== S U B	R O U T	I N E =======================================
 12305                                  
 12306                                  ; 16/10/2022
 12307                                  
 12308                                  ; ---------------------------------------------------------------------------
 12309                                  ;	BootIo
 12310                                  ; ---------------------------------------------------------------------------
 12311                                  ;
 12312                                  ; function: read/write the boot record into boot sector.
 12313                                  ;
 12314                                  ; input :
 12315                                  ;	    al=logical drive number
 12316                                  ;	    rFlag = operation (read/write)
 12317                                  ;
 12318                                  ; output:   for read operation,the boot record of the drive specified in bds
 12319                                  ;	    be read into the DiskSector buffer.
 12320                                  ;	    for write operation,the DiskSector buffer image will be written
 12321                                  ;	    to the drive specified in bds.
 12322                                  ;	    if carry set,then al contains the device driver error number
 12323                                  ;	    that will be returned to dos.
 12324                                  ;	    AX,CX,DX register destroyed.
 12325                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12326                                  ;
 12327                                  ; subroutines to be called:
 12328                                  ;	DiskIO:NEAR
 12329                                  ;
 12330                                  ; logic:
 12331                                  ;
 12332                                  ; {
 12333                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12334                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12335                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12336                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12337                                  ; }
 12338                                  ; ==========================================================================
 12339                                  
 12340                                  		; 19/10/2022
 12341                                  BootIo:	
 12342 000011DE 06                      		push	es
 12343 000011DF 57                      		push	di
 12344 000011E0 53                      		push	bx
 12345 000011E1 1E                      		push	ds
 12346 000011E2 07                      		pop	es		; Point ES: to Bios_Data
 12347                                  
 12348                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12349                                  		; need to be initialized for this subroutine out here are
 12350                                  		; - Transfer address to Bios_Data:DiskSector
 12351                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12352                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12353                                  		; - Number of sectors <-- 1
 12354                                  
 12355 000011E3 BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12356 000011E6 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12357 000011E8 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12358 000011EC B90100                  		mov	cx, 1
 12359 000011EF E8D5F6                  		call	diskio
 12360 000011F2 5B                      		pop	bx
 12361 000011F3 5F                      		pop	di
 12362 000011F4 07                      		pop	es
 12363 000011F5 C3                      		retn
 12364                                  
 12365                                  ; =============== S U B	R O U T	I N E =======================================
 12366                                  
 12367                                  ; 16/10/2022
 12368                                  
 12369                                  ; ---------------------------------------------------------------------------
 12370                                  ;	ChangeLineChk
 12371                                  ; ---------------------------------------------------------------------------
 12372                                  ;
 12373                                  ; when the user calls get/set media id call before dos establishes the media
 12374                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12375                                  ; lost.	this routine will check the change line activity and will save the
 12376                                  ; history in the flags.
 12377                                  ;
 12378                                  ; FUNCTION: check the change line error activity
 12379                                  ;
 12380                                  ; INPUT :  ES:di -> bds table.
 12381                                  ;
 12382                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12383                                  ;
 12384                                  ; SUBROUTINES TO BE CALLED:
 12385                                  ;	Set_Changed_DL
 12386                                  ;
 12387                                  ; ---------------------------------------------------------------------------
 12388                                  
 12389                                  ChangeLineChk:	
 12390 000011F6 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12391 000011FA 08D2                    		or	dl, dl		; Fixed	disk?
 12392 000011FC 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12393                                  		; 12/12/2022
 12394 000011FE 26F6452304              		test	byte [es:di+23h], 4
 12395                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12396                                  					; return_fake_bpb
 12397 00001203 751A                    		jnz	short ChangeLnChkRet
 12398 00001205 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12399 0000120A 7513                    		jnz	short ChangeLnChkRet
 12400 0000120C E8F806                  		call	haschange	; This drive support change line?
 12401 0000120F 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12402                                  
 12403                                  		; Execute the rom disk interrupt to check changeline activity.
 12404                                  
 12405 00001211 B416                    		mov	ah, 16h
 12406 00001213 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12407                                  					; DL = drive to	check
 12408                                  					; Return: AH = disk change status
 12409 00001215 7308                    		jnb	short ChangeLnChkRet
 12410 00001217 53                      		push	bx
 12411 00001218 BB4000                  		mov	bx, 40h		; fchanged
 12412                                  					; Update flag in BDS for this
 12413                                  					; physical drive
 12414 0000121B E8C206                  		call	set_changed_dl
 12415 0000121E 5B                      		pop	bx
 12416                                  ChangeLnChkRet:				
 12417 0000121F C3                      		retn
 12418                                  
 12419                                  ; ---------------------------------------------------------------------------
 12420                                  
 12421                                  ; 16/10/2022
 12422                                  
 12423                                  ; ==========================================================================
 12424                                  ;	GetAccessFlag
 12425                                  ; ==========================================================================
 12426                                  ;
 12427                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12428                                  ;
 12429                                  ; INPUT :
 12430                                  ;	    ES:di -> bds table
 12431                                  ;
 12432                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12433                                  ;						 = 1 if disk i/o allowed.
 12434                                  ; ==========================================================================
 12435                                  
 12436                                  		; 19/10/2022
 12437                                  GetAccessFlag:				
 12438 00001220 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12439 00001224 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12440                                  		;mov	al, 0		; Assume result	is unformatted
 12441                                  		; 10/12/2022
 12442 00001227 28C0                    		sub	al, al
 12443                                  		; 10/12/2022
 12444 00001229 26F6452402              		test	byte [es:di+36], 02h
 12445                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12446                                  					; unformatted_media
 12447 0000122E 7502                    		jnz	short GafDone	; Done if unformatted
 12448 00001230 FEC0                    		inc	al		; Return true for formatted
 12449                                  
 12450                                  GafDone:				
 12451 00001232 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12452 00001235 C3                      		retn
 12453                                  ; ---------------------------------------------------------------------------
 12454                                  
 12455                                  ; 16/10/2022
 12456                                  
 12457                                  ; ==========================================================================
 12458                                  ;	SetAccessFlag
 12459                                  ; ==========================================================================
 12460                                  ;
 12461                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12462                                  ;
 12463                                  ; input :
 12464                                  ;	    ES:di -> bds table
 12465                                  ;
 12466                                  ; output:   unformtted_media bit modified according to the user request
 12467                                  ; ==========================================================================
 12468                                  
 12469                                  		; 19/10/2022
 12470                                  SetAccessFlag:				
 12471 00001236 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12472 0000123A C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12473                                  		; 10/12/2022
 12474 0000123D 26806524FD              		and	byte [es:di+36], 0FDh
 12475                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12476                                  					; ~unformatted_media
 12477 00001242 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12478 00001246 7505                    		jnz	short saf_Done
 12479                                  		; 10/12/2022
 12480 00001248 26804D2402              		or	byte [es:di+36], 02h
 12481                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12482                                  					; unformatted_media
 12483                                  saf_Done:				
 12484 0000124D C3                      		retn
 12485                                  ; ---------------------------------------------------------------------------
 12486                                  
 12487                                  ; 16/10/2022
 12488                                  
 12489                                  ; ==========================================================================
 12490                                  ; Ioctl_Support_Query
 12491                                  ; ==========================================================================
 12492                                  ;
 12493                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12494                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12495                                  ; device attributes specifies if this function is supported.
 12496                                  ;
 12497                                  ; ==========================================================================
 12498                                  
 12499                                  		; 19/10/2022
 12500                                  ioctl_support_query:
 12501 0000124E 06                      		push	es
 12502 0000124F C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12503 00001253 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12504                                  					; AL ==	Major, AH == Minor
 12505 00001257 3C08                    		cmp	al, 8		; IOC_DC
 12506                                  					; See if major code is 8
 12507 00001259 7513                    		jnz	short nosupport
 12508 0000125B 0E                      		push	cs
 12509 0000125C 07                      		pop	es
 12510 0000125D B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12511                                  		; 10/12/2022
 12512 00001260 BF[370C]                		mov	di, IOC_DC_Table
 12513                                  		;mov	di, 0C60h	; IOC_DC_Table
 12514                                  					; at 2C7h:0C60h	= 70h:31D0h
 12515 00001263 86C4                    		xchg	al, ah		; Put minor code in AL
 12516 00001265 F2AE                    		repne scasb		; Scan for minor code in AL
 12517 00001267 7505                    		jnz	short nosupport	; it was not found
 12518 00001269 B80001                  		mov	ax, 100h
 12519                                  		; 10/12/2022
 12520                                  		; (jump to ioctlsupexit is not required)
 12521                                  		;jmp	short $+2	; ioctlsupexit
 12522                                  					; Signal ioctl is supported
 12523                                  		;;jmp	short ioctlsupexit
 12524                                  ; ---------------------------------------------------------------------------
 12525                                  ioctlsupexit:				
 12526 0000126C 07                      		pop	es
 12527                                  		; 10/12/2022
 12528                                  		; cf = 0
 12529                                  		;clc
 12530 0000126D C3                      		retn
 12531                                  ; ---------------------------------------------------------------------------
 12532                                  nosupport:				
 12533 0000126E 07                      		pop	es
 12534 0000126F E963EE                  		jmp	bc_cmderr
 12535                                  ; ---------------------------------------------------------------------------
 12536                                  
 12537                                  ; 16/10/2022
 12538                                  
 12539                                  ; ==========================================================================
 12540                                  ;	GetMediaSenseStatus
 12541                                  ; ==========================================================================
 12542                                  ;
 12543                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12544                                  ;	    diskette drive and whether the media is the default type
 12545                                  ;	    for that drive. (default type means the max size for that
 12546                                  ;	    drive)
 12547                                  ;
 12548                                  ; INPUT :   ES:DI -> BDS table
 12549                                  ; OUTPUT:   If carry clear
 12550                                  ;	    DS:BX -> Updated IOCtlPacket
 12551                                  ;
 12552                                  ;			 Special Function at offset 0:
 12553                                  ;				0	- Media detected is not default type
 12554                                  ;				1	- Media detected is default type
 12555                                  ;
 12556                                  ;			 Device Type at offset 1:
 12557                                  ;				2       - 720K 3.5" 80 tracks
 12558                                  ;				7	- 1.44M 3.5" 80 tracks
 12559                                  ;				9	- 2.88M 3.5" 80 tracks
 12560                                  ;
 12561                                  ; Error Codes returned in AX if carry set:
 12562                                  ;
 12563                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12564                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12565                                  ;				  the media is really unkown, any error
 12566                                  ;				  other than "media not present"
 12567                                  ; 
 12568                                  ; ==========================================================================
 12569                                  
 12570                                  		; 19/10/2022
 12571                                  SenseMediaType:				
 12572 00001272 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12573 00001276 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12574                                  		; 10/10/2022
 12575                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12576 00001279 31D2                    		xor	dx, dx
 12577 0000127B 8917                    		mov	[bx], dx ; 0
 12578                                  		;
 12579 0000127D 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12580                                  					; Get int 13h drive number from	BDS
 12581                                  		; 10/12/2022
 12582                                  		;xor	dh, dh		; DX = physical	drive number
 12583 00001281 B420                    		mov	ah, 20h		; Get Media Type function
 12584                                  					; If no	carry media type in AL
 12585 00001283 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12586 00001285 7216                    		jb	short MediaSenseEr ; error code	in AH
 12587 00001287 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12588                                  DetermineMediaType:			
 12589 00001289 FEC8                    		dec	al
 12590 0000128B 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12591 0000128D 740A                    		jz	short GotMediaType
 12592 0000128F 0404                    		add	al, 4
 12593 00001291 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12594 00001293 7404                    		jz	short GotMediaType
 12595 00001295 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12596 00001297 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12597                                  GotMediaType:				
 12598 00001299 884701                  		mov	[bx+1],	al	; Save the return value
 12599                                  		; 10/12/2022
 12600                                  		; cf = 0
 12601                                  		;clc			; Signal success
 12602 0000129C C3                      		retn
 12603                                  ; ---------------------------------------------------------------------------
 12604                                  
 12605                                  MediaSenseEr:				
 12606 0000129D 80FC32                  		cmp	ah, 32h		; See if not default media error
 12607 000012A0 74E7                    		jz	short DetermineMediaType ; Not really an error
 12608 000012A2 B002                    		mov	al, 2		; Now assume drive not ready
 12609 000012A4 80FC31                  		cmp	ah, 31h		; See if media was present
 12610 000012A7 7402                    		jz	short SenseErrExit ; Return drive not ready
 12611                                  UnknownMediaType:			
 12612 000012A9 B007                    		mov	al, 7		; Just don't know the media type
 12613                                  SenseErrExit:				
 12614 000012AB B481                    		mov	ah, 81h		; Signal error return
 12615 000012AD F9                      		stc
 12616 000012AE C3                      		retn
 12617                                  
 12618                                  ; ---------------------------------------------------------------------------
 12619                                  		; 10/12/2022
 12620                                  		;db    0
 12621                                  ; ---------------------------------------------------------------------------
 12622                                  
 12623                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12624                                  
 12625                                  ;-----------------------------------------------------------------------------
 12626                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12627                                  ;-----------------------------------------------------------------------------
 12628                                  ; 16/03/2019 - Retro DOS v4.0
 12629                                  
 12630                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12631                                  ;	after booting. this allows testing and implementation of custom int_13
 12632                                  ;	handlers, without giving up ms-dos error recovery
 12633                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12634                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12635                                  ;	exit:	orig13	== address of new int_13 handler
 12636                                  ;		ds:dx	== old orig13 value
 12637                                  ;		es:bx	== old old13  value
 12638                                  ;
 12639                                  ; int 2f handler for external block drivers to communicate with the internal
 12640                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12641                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12642                                  ; dsk_entry, the entry point for all disk requests.
 12643                                  ;
 12644                                  ; on exit from this driver, we will return to the external driver
 12645                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12646                                  ; this scheme allows us to have a small external device driver, and makes
 12647                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12648                                  ; since we only need to make changes in one place (most of the time).
 12649                                  ;
 12650                                  ;   ax=800h - check for installed handler - reserved
 12651                                  ;   ax=801h - install the bds into the linked list
 12652                                  ;   ax=802h - dos request
 12653                                  ;   ax=803h - return bds table starting pointer in ds:di
 12654                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12655                                  ;	    problem. bds table is going to be used to get head/sector
 12656                                  ;	    informations without calling generic ioctl get device parm call.)
 12657                                  
 12658                                  ;BIOSSEGMENT equ 70h
 12659                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12660                                  
 12661                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12662                                  
 12663                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12664 000012AF 80FC13                  		cmp	ah, 13h
 12665 000012B2 7413                    		jz	short int2f_replace_int13
 12666 000012B4 80FC08                  		cmp	ah, 8
 12667 000012B7 743B                    		jz	short mine
 12668                                  
 12669                                  ; Check for WIN386 startup and return the BIOS instance data
 12670                                  
 12671 000012B9 80FC16                  		cmp	ah, 16h		; MultWin386
 12672 000012BC 7479                    		jz	short win386call
 12673 000012BE 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12674 000012C1 7503                    		jnz	short i2f_handler_iret
 12675 000012C3 E9A500                  		jmp	handle_multmult
 12676                                  ; ---------------------------------------------------------------------------
 12677                                  
 12678                                  i2f_handler_iret:			
 12679 000012C6 CF                      		iret
 12680                                  ; ---------------------------------------------------------------------------
 12681                                  
 12682                                  int2f_replace_int13:			
 12683 000012C7 50                      		push	ax	; free up a register for caller's ds
 12684 000012C8 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12685                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12686                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12687                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12688 000012CA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12689                                  		; 19/10/2022
 12690                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12691                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12692                                  		;push	word ptr ds:Old13	; return them to caller
 12693                                  		;push	word ptr ds:Old13+2
 12694 000012CF FF36[B400]              		push	word [Orig13]
 12695 000012D3 FF36[B600]              		push	word [Orig13+2]
 12696 000012D7 FF36[0601]              		push	word [Old13]
 12697 000012DB FF36[0801]              		push	word [Old13+2]
 12698                                  
 12699                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12700                                  		;mov	word ptr ds:Orig13+2, ax
 12701                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12702                                  		;mov	word ptr ds:Old13+2, es
 12703 000012DF 8916[B400]              		mov	[Orig13], dx
 12704 000012E3 A3[B600]                		mov	[Orig13+2], ax
 12705 000012E6 891E[0601]              		mov	[Old13], bx
 12706 000012EA 8C06[0801]              		mov	[Old13+2], es
 12707                                  
 12708 000012EE 07                      		pop	es			; es:bx := old old13 vector
 12709 000012EF 5B                      		pop	bx
 12710 000012F0 1F                      		pop	ds			; ds:dx := old orig13 vector
 12711 000012F1 5A                      		pop	dx
 12712 000012F2 58                      		pop	ax
 12713                                  i2f_iret:				
 12714 000012F3 CF                      		iret
 12715                                  ; ---------------------------------------------------------------------------
 12716                                  
 12717                                  mine:					
 12718 000012F4 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12719 000012F6 73FB                    		jnb	short i2f_iret
 12720 000012F8 08C0                    		or	al, al			; a get installed state request?
 12721 000012FA 7504                    		jnz	short disp_func
 12722 000012FC B0FF                    		mov	al, 0FFh
 12723 000012FE EBF3                    		jmp	short i2f_iret
 12724                                  ; ---------------------------------------------------------------------------
 12725                                  
 12726                                  disp_func:				
 12727 00001300 3C01                    		cmp	al, 1			; request for installing bds?
 12728 00001302 7418                    		jz	short do_subfun_01
 12729 00001304 3C03                    		cmp	al, 3			; get bds vector?
 12730 00001306 7424                    		jz	short do_get_bds_vector
 12731                                  
 12732                                  ; set up pointer to request packet
 12733                                  
 12734 00001308 1E                      		push	ds
 12735 00001309 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12736                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12737                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12738                                  		; 19/10/2022
 12739                                  		;mov	word ptr ds:ptrsav, bx
 12740                                  		;mov	word ptr ds:ptrsav+2, es
 12741 0000130E 891E[1200]              		mov	[ptrsav], bx
 12742 00001312 8C06[1400]              		mov	[ptrsav+2], es
 12743 00001316 1F                      		pop	ds
 12744                                  		;jmp	far ptr	i2f_dskentry
 12745                                  		; 17/10/2022
 12746                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12747 00001317 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12748                                  					; NOTE: jump to a FAR function, not an
 12749                                  					;  IRET type function. Callers of
 12750                                  					;  this int2f subfunction will have
 12751                                  					;  to be careful to do a popf
 12752                                  
 12753                                  ; ---------------------------------------------------------------------------
 12754                                  
 12755                                  do_subfun_01:				
 12756 0000131C 06                      		push	es
 12757 0000131D 1E                      		push	ds
 12758 0000131E 1E                      		push	ds
 12759 0000131F 07                      		pop	es
 12760                                  		; 17/10/2022
 12761 00001320 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12762                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12763                                  					; point	ds: -> Bios_Data
 12764 00001325 E8C303                  		call	install_bds
 12765 00001328 1F                      		pop	ds
 12766 00001329 07                      		pop	es
 12767 0000132A EBC7                    		jmp	short i2f_iret
 12768                                  ; ---------------------------------------------------------------------------
 12769                                  
 12770                                  do_get_bds_vector:
 12771                                  		; 17/10/2022
 12772 0000132C 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12773                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12774 00001331 C53E[1901]              		lds	di, [start_bds]
 12775                                  		;lds	di, ds:start_bds
 12776                                  ;ii2f_iret:	; 10/12/2022				
 12777 00001335 EBBC                    		jmp	short i2f_iret
 12778                                  ; ---------------------------------------------------------------------------
 12779                                  
 12780                                  ; 17/10/2022
 12781                                  ; 16/10/2022
 12782                                  
 12783                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12784                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12785                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12786                                  
 12787                                  win386call:				
 12788 00001337 1E                      		push	ds
 12789 00001338 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12790                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12791                                  					; at 2C7h:30h =	70h:25A0h
 12792 0000133D 3C05                    		cmp	al, 5		; Win386_Init
 12793                                  					; is it	win386 initializing?
 12794 0000133F 7410                    		jz	short Win386Init
 12795 00001341 3C06                    		cmp	al, 6		; Win386_Exit
 12796                                  					; is it	win386 exiting?
 12797 00001343 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12798                                  		; 12/12/2022
 12799 00001345 F6C201                  		test	dl, 1
 12800                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12801 00001348 751E                    		jnz	short win_iret	; if not win386, then continue
 12802                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12803 0000134A 8026[CE08]00            		and	byte [IsWin386], 0 
 12804 0000134F EB17                    		jmp	short win_iret
 12805                                  ; ---------------------------------------------------------------------------
 12806                                  
 12807                                  Win386Init:	
 12808                                  		; 12/12/2022
 12809 00001351 F6C201                  		test	dl, 1			
 12810                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12811 00001354 7512                    		jnz	short win_iret	; if not win386, then continue
 12812                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12813 00001356 800E[CE08]01            		or	byte [IsWin386], 1
 12814                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12815                                  		;mov	word ptr ds:SI_Next+2, es
 12816 0000135B 891E[9C08]              		mov	[SI_Next], bx
 12817 0000135F 8C06[9E08]              		mov	[SI_Next+2], es
 12818                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12819 00001363 BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12820 00001366 1E                      		push	ds
 12821 00001367 07                      		pop	es
 12822                                  win_iret:				
 12823 00001368 1F                      		pop	ds
 12824                                  ii2f_iret:	; 10/12/2022	
 12825 00001369 EB88                    		jmp	short i2f_iret	; return back up the chain
 12826                                  ; ---------------------------------------------------------------------------
 12827                                  
 12828                                  handle_multmult:			
 12829 0000136B 3C01                    		cmp	al, 1
 12830 0000136D 7515                    		jnz	short try_2
 12831 0000136F 1E                      		push	ds
 12832 00001370 E84700                  		call	HMAPtr		; get offset of free HMA
 12833                                  		; 10/12/2022
 12834                                  		;xor	bx, bx
 12835                                  		;dec	bx
 12836 00001373 BBFFFF                  		mov	bx, 0FFFFh
 12837 00001376 8EC3                    		mov	es, bx		; seg of HMA
 12838 00001378 89FB                    		mov	bx, di
 12839 0000137A F7D3                    		not	bx
 12840 0000137C 09DB                    		or	bx, bx
 12841 0000137E 7401                    		jz	short try_1
 12842 00001380 43                      		inc	bx
 12843                                  try_1:					
 12844 00001381 1F                      		pop	ds
 12845 00001382 EBE5                    		jmp	short ii2f_iret
 12846                                  ; ---------------------------------------------------------------------------
 12847                                  
 12848                                  try_2:					
 12849 00001384 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12850 00001386 7530                    		jnz	short try_3
 12851 00001388 1E                      		push	ds
 12852                                  		; 10/12/2022
 12853                                  		;xor	di, di
 12854                                  		;dec	di
 12855 00001389 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12856 0000138C 8EC7                    		mov	es, di
 12857 0000138E E82900                  		call	HMAPtr		; get offset of free HMA
 12858 00001391 83FFFF                  		cmp	di, 0FFFFh
 12859 00001394 7421                    		jz	short InsuffHMA
 12860 00001396 F7DF                    		neg	di		; free space in HMA
 12861 00001398 39FB                    		cmp	bx, di
 12862 0000139A 7605                    		jbe	short try_4
 12863                                  		; 10/12/2022
 12864                                  		;sub	di, di
 12865                                  		;dec	di
 12866 0000139C BFFFFF                  		mov	di, 0FFFFh
 12867 0000139F EB16                    		jmp	short InsuffHMA
 12868                                  ; ---------------------------------------------------------------------------
 12869                                  
 12870                                  try_4:					
 12871                                  		;mov	di, ds:FreeHMAPtr
 12872 000013A1 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12873 000013A5 83C30F                  		add	bx, 15
 12874                                  		;and	bx, 0FFF0h
 12875                                  		; 10/12/2022
 12876 000013A8 80E3F0                  		and	bl, 0F0h
 12877                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12878 000013AB 011E[F508]              		add	[FreeHMAPtr], bx
 12879 000013AF 7506                    		jnz	short InsuffHMA
 12880 000013B1 C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12881                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12882                                  					; no more HMA if we have wrapped
 12883                                  InsuffHMA:				
 12884 000013B7 1F                      		pop	ds
 12885                                  		; 10/12/2022
 12886                                  try_3:		
 12887 000013B8 EBAF                    		jmp	short ii2f_iret
 12888                                  ; ---------------------------------------------------------------------------
 12889                                  
 12890                                  		; 10/12/2022
 12891                                  ;try_3:					
 12892                                  		;jmp	ii2f_iret
 12893                                  
 12894                                  ; =============== S U B	R O U T	I N E =======================================
 12895                                  
 12896                                  ; 16/10/2022
 12897                                  
 12898                                  ;--------------------------------------------------------------------------
 12899                                  ;
 12900                                  ; procedure : HMAPtr
 12901                                  ;
 12902                                  ;		Gets the offset of the free HMA area ( with respect to
 12903                                  ;							seg ffff )
 12904                                  ;		If DOS has not moved high, tries to move DOS high.
 12905                                  ;		In the course of doing this, it will allocate all the HMA
 12906                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12907                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12908                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12909                                  ;
 12910                                  ;	RETURNS : offset of free HMA in DI
 12911                                  ;		  BIOS_DATA, seg in DS
 12912                                  ;
 12913                                  ;--------------------------------------------------------------------------
 12914                                  
 12915                                  		; 17/10/2022
 12916                                  HMAPtr:
 12917 000013BA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12918                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12919 000013BF 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12920                                  		;mov	di, ds:FreeHMAPtr
 12921 000013C3 83FFFF                  		cmp	di, 0FFFFh
 12922 000013C6 750F                    		jnz	short HMAPtr_retn
 12923 000013C8 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12924                                  		;cmp	ds:SysinitPresent, 0
 12925 000013CD 7408                    		jz	short HMAPtr_retn
 12926 000013CF FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12927                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12928 000013D3 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12929                                  		;mov	di, ds:FreeHMAPtr
 12930                                  HMAPtr_retn:				
 12931 000013D7 C3                      		retn
 12932                                  
 12933                                  ; =============== S U B	R O U T	I N E =======================================
 12934                                  
 12935                                  ; 16/10/2022
 12936                                  
 12937                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12938                                  ; but go ahead and update direction flag, si, & di
 12939                                  
 12940                                  move_sector:
 12941                                  
 12942                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12943                                  ; any segment to be a fault. Theoretically, this could be handled
 12944                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12945                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12946                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12947                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12948                                  ; mode. Their fault handler was only designed to deal with one
 12949                                  ; special case which occurred in a magazine benchmark, but didn't
 12950                                  ; handle the general case worth beans.
 12951                                  ;
 12952                                  ; Simply changing this code to do a byte loop would work okay but
 12953                                  ; would involve a general case performance hit. Therefore, we'll
 12954                                  ; check for either source or destination offsets being within one
 12955                                  ; sector of the end of their segments and only in that case fall
 12956                                  ; back to a byte move.
 12957                                  
 12958 000013D8 FC                      		cld
 12959 000013D9 51                      		push	cx
 12960 000013DA B90001                  		mov	cx, 256
 12961 000013DD 81FE00FE                		cmp	si, 0FE00h
 12962 000013E1 770A                    		ja	short movsec_bytes
 12963 000013E3 81FF00FE                		cmp	di, 0FE00h
 12964 000013E7 7704                    		ja	short movsec_bytes
 12965 000013E9 F3A5                    		rep movsw
 12966 000013EB 59                      		pop	cx
 12967 000013EC C3                      		retn
 12968                                  ; ---------------------------------------------------------------------------
 12969                                  
 12970                                  movsec_bytes:				
 12971 000013ED D1E1                    		shl	cx, 1
 12972 000013EF F3A4                    		rep movsb
 12973 000013F1 59                      		pop	cx
 12974 000013F2 C3                      		retn
 12975                                  
 12976                                  ; =============== S U B	R O U T	I N E =======================================
 12977                                  
 12978                                  ; 16/10/2022
 12979                                  
 12980                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12981                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12982                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12983                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12984                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12985                                  ; but we break down a request when we get an ecc or dma error into several
 12986                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12987                                  ; number of sectors on a track on the medium, and the request would fail.
 12988                                  ;
 12989                                  ; input conditions:
 12990                                  ;	all registers set up for an int 13 request.
 12991                                  ;
 12992                                  ; output:
 12993                                  ;	dh - contains starting head number for request
 12994                                  ;	cx - contains starting sector and cylinder numbers
 12995                                  ;	(the above may or may not have been changed, and are 0-based)
 12996                                  ;	all other registers preserved.
 12997                                  
 12998                                  check_wrap:	
 12999 000013F3 50                      		push	ax
 13000 000013F4 53                      		push	bx
 13001 000013F5 06                      		push	es
 13002 000013F6 57                      		push	di
 13003 000013F7 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 13004 000013FA 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 13005                                  		; 12/12/2022
 13006 000013FC 26F6452301              		test	byte [es:di+23h], 1
 13007                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13008 00001401 7459                    		jz	short no_wrap	; no wrapping for removable media
 13009 00001403 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13010 00001407 89C8                    		mov	ax, cx
 13011 00001409 83E03F                  		and	ax, 3Fh		; extract sector number
 13012 0000140C 39D8                    		cmp	ax, bx		; are we going to wrap?
 13013 0000140E 764C                    		jbe	short no_wrap
 13014 00001410 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13015                                  
 13016                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13017                                  ; last sector on that track.
 13018                                  
 13019 00001412 08E4                    		or	ah, ah
 13020 00001414 7503                    		jnz	short not_on_bound
 13021                                  		; 18/12/2022
 13022 00001416 48                      		dec	ax ; *
 13023 00001417 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13024                                  					; if on	boundary
 13025                                  		;dec	al ; *		; also decrement # of head wraps
 13026                                  not_on_bound:				
 13027 00001419 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13028 0000141C 08E1                    		or	cl, ah		; or in	new sector #
 13029 0000141E 30E4                    		xor	ah, ah		; ax = # of head wraps
 13030 00001420 40                      		inc	ax
 13031 00001421 00F0                    		add	al, dh		; add in starting head #
 13032 00001423 80D400                  		adc	ah, 0		; catch	any carry
 13033 00001426 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13034                                  					; are we going to wrap around a	head?
 13035 0000142A 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13036 0000142C 52                      		push	dx		; preserve drive number and head number
 13037 0000142D 31D2                    		xor	dx, dx
 13038 0000142F 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13039 00001433 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13040                                  
 13041                                  ; careful here! if new head # is 0, then we are on the last head.
 13042                                  
 13043 00001435 09D2                    		or	dx, dx
 13044 00001437 7507                    		jnz	short no_head_bound
 13045 00001439 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13046                                  
 13047                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13048                                  
 13049 0000143B 09C0                    		or	ax, ax
 13050 0000143D 7401                    		jz	short no_head_bound
 13051 0000143F 48                      		dec	ax		; reduce number	of cylinder wraps
 13052                                  no_head_bound:				
 13053 00001440 88D7                    		mov	bh, dl		; bh has new head number
 13054 00001442 5A                      		pop	dx		; restore drive number and head number
 13055 00001443 FECF                    		dec	bh		; get it 0-based
 13056 00001445 88FE                    		mov	dh, bh		; set up new head number in dh
 13057 00001447 88CF                    		mov	bh, cl
 13058 00001449 80E73F                  		and	bh, 3Fh		; preserve sector number
 13059 0000144C B306                    		mov	bl, 6
 13060 0000144E 86CB                    		xchg	cl, bl
 13061 00001450 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13062 00001452 00C5                    		add	ch, al		; add in cylinder wrap
 13063 00001454 10E3                    		adc	bl, ah		; add in high byte
 13064 00001456 D2E3                    		shl	bl, cl		; move up to ms	end
 13065 00001458 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13066 0000145A 08F9                    		or	cl, bh		; or in	sector number
 13067                                  no_wrap:				
 13068 0000145C F8                      		clc
 13069 0000145D 5F                      		pop	di
 13070 0000145E 07                      		pop	es
 13071 0000145F 5B                      		pop	bx
 13072 00001460 58                      		pop	ax
 13073 00001461 C3                      		retn
 13074                                  ; ---------------------------------------------------------------------------
 13075                                  
 13076                                  no_wrap_head:				
 13077 00001462 88C6                    		mov	dh, al		; do not lose new head number
 13078 00001464 FECE                    		dec	dh		; get it 0-based
 13079 00001466 EBF4                    		jmp	short no_wrap
 13080                                  
 13081                                  ; =============== S U B	R O U T	I N E =======================================
 13082                                  
 13083                                  ; 16/10/2022
 13084                                  
 13085                                  ; this is a special version of the bds lookup code which is
 13086                                  ; based on physical drives rather than the usual logical drives
 13087                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13088                                  ; otherwise carry is clear
 13089                                  ;
 13090                                  ; guaranteed to trash no registers except es:di
 13091                                  
 13092                                  		; 19/10/2022
 13093                                  find_bds:	
 13094 00001468 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13095                                  fbds_1:					
 13096 0000146C 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13097 00001470 7409                    		jz	short fdbs_2
 13098 00001472 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13099                                  					; go to next bds
 13100 00001475 83FFFF                  		cmp	di, 0FFFFh
 13101 00001478 75F2                    		jnz	short fbds_1
 13102 0000147A F9                      		stc
 13103                                  fdbs_2:					
 13104 0000147B C3                      		retn
 13105                                  
 13106                                  ; =============== S U B	R O U T	I N E =======================================
 13107                                  
 13108                                  ; 16/10/2022
 13109                                  		; 17/10/2022
 13110                                  doint:
 13111                                  		; 10/12/2022
 13112 0000147C 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13113                                  					; get physical drive number
 13114                                  		; 19/10/2022 - Temporary !
 13115                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13116                                  		
 13117 0000147F 30E4                    		xor	ah, ah
 13118 00001481 08C0                    		or	al, al
 13119 00001483 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13120                                  		; 10/12/2022
 13121 00001485 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13122                                  					; get request code
 13123                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13124 00001488 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13125                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13126 0000148B 9D                      		popf
 13127                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13128                                  		; 17/10/2022
 13129 0000148C 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13130                                  		;;call	call_orig13	; call far 70h:797h
 13131                                  					; call far KERNEL_SEGMENT:call_orig13
 13132 00001491 9C                      		pushf
 13133                                  		; 10/12/2022
 13134 00001492 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13135                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13136                                  dointdone:				
 13137 00001495 C3                      		retn
 13138                                  
 13139                                  ;----------------------------------------------------------------------------
 13140                                  
 13141                                  ; 16/10/2022
 13142                                  
 13143                                  ; this is the true int 13 handler. we parse the request to see if there is
 13144                                  ; a dma violation. if so, depending on the function, we:
 13145                                  ;   read/write break the request into three pieces and move the middle one
 13146                                  ;	       into our internal buffer.
 13147                                  ;
 13148                                  ;   format     copy the format table into the buffer
 13149                                  ;   verify     point the transfer address into the buffer
 13150                                  ;
 13151                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13152                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13153                                  ; the offending sector into the buffer below and do the i/o from there.
 13154                                  
 13155                                  ;struc INT13FRAME
 13156                                  ;.oldbp: resw
 13157                                  ;.oldax: resw 
 13158                                  ;.oldbx: resw
 13159                                  ;.oldcx: resw
 13160                                  ;.olddx: resw
 13161                                  ;.oldds: resw	; now we save caller's ds, too
 13162                                  ;.olddd: resd
 13163                                  ;.oldf:	resw
 13164                                  ;end struc
 13165                                  
 13166                                  ;----------------------------------------------------------------------------
 13167                                  
 13168                                  ;   entry conditions:
 13169                                  ;	ah = function
 13170                                  ;	al = number of sectors
 13171                                  ;	es:bx = dma address
 13172                                  ;	cx = packed track and sector
 13173                                  ;	dx = head and drive
 13174                                  ;   output conditions:
 13175                                  ;	no dma violation.
 13176                                  
 13177                                  ;	use extreme caution when working with this code. In general,
 13178                                  ;	  all registers are hot at all times.
 13179                                  ;
 13180                                  ;	question:  does this code handle cases where dma errors
 13181                                  ;	  occur during ecc retries, and where ecc errors occur during
 13182                                  ;	  dma breakdowns???? Hmmmmm.
 13183                                  
 13184                                  ;----------------------------------------------------------------------------
 13185                                  
 13186                                  ; ---------------------------------------------------------------------------
 13187                                  
 13188 00001496 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13189                                  
 13190                                  ; 17/10/2022
 13191                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13192                                  ; 09/12/2022
 13193                                  DTYPEARRAY equ dtype_array
 13194                                  
 13195                                  ; ---------------------------------------------------------------------------
 13196                                  
 13197                                  ; stick some special stuff out of mainline
 13198                                  
 13199                                  ; we know we're doing a format command. if we have changeline
 13200                                  ; support, then flag some special changed stuff and set changed
 13201                                  ; by format bit for all logical drives using this physical drive
 13202                                  
 13203                                  format_special_stuff:			
 13204 0000149A 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13205 0000149F 7459                    		jz	short format_special_stuff_done ; brif not
 13206 000014A1 53                      		push	bx
 13207 000014A2 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13208 000014A5 E83804                  		call	set_changed_dl	; indicate that media changed by format
 13209 000014A8 5B                      		pop	bx
 13210 000014A9 EB4F                    		jmp	short format_special_stuff_done
 13211                                  ; ---------------------------------------------------------------------------
 13212                                  
 13213                                  ; 16/10/2022
 13214                                  
 13215                                  ; we know we've got ec35's on the system. Now see if we're doing
 13216                                  ; a floppy. If so, create a mask and see if this particular
 13217                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13218                                  
 13219                                  		; 19/10/2022
 13220                                  ec35_special_stuff:			
 13221 000014AB 84D2                    		test	dl, dl		; floppy or hard disk?
 13222 000014AD 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13223 000014AF 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13224 000014B0 51                      		push	cx
 13225 000014B1 88D1                    		mov	cl, dl		; turn drive number into bit map
 13226 000014B3 B001                    		mov	al, 1		; assume drive 0
 13227 000014B5 D2E0                    		shl	al, cl		; shift	over correct number of times
 13228 000014B7 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13229 000014BB 59                      		pop	cx
 13230 000014BC 58                      		pop	ax
 13231 000014BD 7442                    		jz	short ec35_special_stuff_done
 13232                                  					; done if this floppy is not an	ec35
 13233 000014BF 53                      		push	bx		; free up a far	pointer	(es:bx)
 13234 000014C0 06                      		push	es
 13235                                  		; 17/10/2022
 13236 000014C1 2EC41E[9614]            		les	bx, [cs:DTYPEARRAY]
 13237                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13238                                  					; 0070h:3A65h =	2C7h:14F5h
 13239 000014C6 00D3                    		add	bl, dl
 13240 000014C8 80D700                  		adc	bh, 0		; find entry for this drive
 13241 000014CB 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13242                                  					; (360k	disk in	360k drive,
 13243                                  					; no double-stepping, 250 kbs transfer rate)
 13244 000014CF 07                      		pop	es
 13245 000014D0 5B                      		pop	bx
 13246 000014D1 EB2E                    		jmp	short ec35_special_stuff_done
 13247                                  ; ---------------------------------------------------------------------------
 13248                                  
 13249                                  ; 16/10/2022
 13250                                  
 13251                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13252                                  ; this function does not reset the common buses after the execution.
 13253                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13254                                  ; will issue ah=1 (read status) call to reset the buses.
 13255                                  
 13256                                  ps2_special_stuff:			
 13257 000014D3 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13258                                  					; read driver parm ?
 13259 000014D8 7407                    		jz	short ps2_30_problem
 13260 000014DA 803E[1E00]15            		cmp	byte [prevoper], 15h
 13261                                  					; apparently function 15h fails, too
 13262 000014DF 752D                    		jnz	short ps2_special_stuff_done
 13263                                  ps2_30_problem:				
 13264 000014E1 50                      		push	ax
 13265 000014E2 B401                    		mov	ah, 1
 13266                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13267                                  		; 17/10/2022
 13268 000014E4 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13269                                  		;call	call_orig13	; call far 70:797h
 13270                                  					; call far KERNEL_SEGMENT:call_orig13
 13271 000014E9 58                      		pop	ax
 13272 000014EA EB22                    		jmp	short ps2_special_stuff_done
 13273                                  ; ---------------------------------------------------------------------------
 13274                                  
 13275                                  ; 17/10/2022
 13276                                  ; 16/10/2022
 13277                                  
 13278                                  ; here is the actual int13 handler
 13279                                  
 13280                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13281                                  
 13282                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13283                                  ; vectoring up here from Bios_Data
 13284                                  
 13285                                  		; 19/10/2022
 13286 000014EC 1E                      		push	ds		; save caller's ds register first thing
 13287                                  		;;mov	ds, word [cs:0030h]
 13288                                  					; and set up our own ds -> Bios_Data
 13289 000014ED 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13290                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13291                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13292                                  
 13293                                  ; let the operation proceed. if there is a dma violation, then we do things
 13294                                  
 13295 000014F2 A3[1E00]                		mov	[prevoper], ax	; save request
 13296 000014F5 80FC05                  		cmp	ah, 5		; romformat
 13297 000014F8 74A0                    		jz	short format_special_stuff
 13298                                  					; go do special stuff for format
 13299                                   format_special_stuff_done:		
 13300 000014FA 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13301 000014FF 75AA                    		jnz	short ec35_special_stuff
 13302                                  					; go handle it out of line if so
 13303                                  ec35_special_stuff_done:
 13304                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13305 00001501 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13306                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13307                                  		
 13308 00001506 9C                      		pushf			; save result flags
 13309                                  		
 13310 00001507 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13311                                  					; mdl_ps2_30
 13312 0000150C 74C5                    		jz	short ps2_special_stuff
 13313                                  					; exit mainline to address special
 13314                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13315 0000150E 9D                      		popf
 13316 0000150F 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13317                                  ret_from_i13:				
 13318 00001511 1F                      		pop	ds
 13319 00001512 CA0200                  		retf	2		; restore ds &	iret w/flags
 13320                                  ; ---------------------------------------------------------------------------
 13321                                  
 13322                                  ; most of our code exits through here. If carry isn't set, then
 13323                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13324                                  ; a changeline error.
 13325                                  
 13326                                  i13ret_ck_chglinerr:			
 13327 00001515 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13328                                  i13_ret_error:				
 13329 00001517 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13330 0000151A 7513                    		jnz	short int13b	; skip if wrong	error
 13331 0000151C 08D2                    		or	dl, dl		; is this for the hard disk?
 13332 0000151E 780F                    		js	short int13b	; yes, ignore
 13333 00001520 803E[7700]00            		cmp	byte [fhave96], 0
 13334 00001525 7408                    		jz	short int13b	; just in case ROM returned this
 13335                                  					; error	even though it told us it
 13336                                  					; never	would
 13337 00001527 53                      		push	bx
 13338 00001528 BB4000                  		mov	bx, 40h		; fchanged
 13339 0000152B E8B203                  		call	set_changed_dl
 13340 0000152E 5B                      		pop	bx
 13341                                  int13b:					
 13342 0000152F F9                      		stc			; now return the error
 13343 00001530 EBDF                    		jmp	short ret_from_i13
 13344                                  ; ---------------------------------------------------------------------------
 13345                                  
 13346                                  ; some kind of error occurred. see if it is dma violation
 13347                                  
 13348                                  goterr13:				
 13349 00001532 80FC09                  		cmp	ah, 9		; dma error?
 13350 00001535 747C                    		jz	short gotdmaerr
 13351                                  goterr13_xxxx:				
 13352 00001537 80FC11                  		cmp	ah, 11h		; ecc error?
 13353 0000153A 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13354 0000153C 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13355 00001541 74D4                    		jz	short i13_ret_error
 13356                                  
 13357 00001543 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13358                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13359                                  					; (2 = romread)
 13360                                  					; ECC correction only applies to reads
 13361 00001548 75CD                    		jnz	short i13_ret_error
 13362                                  
 13363 0000154A 30E4                    		xor	ah, ah
 13364                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13365                                  		; 17/10/2022
 13366 0000154C 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13367                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13368                                  					; call far 70:797h
 13369 00001551 A1[1E00]                		mov	ax, [prevoper]
 13370 00001554 30E4                    		xor	ah, ah		; return code =	no error
 13371 00001556 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13372 00001558 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13373 0000155A 53                      		push	bx
 13374 0000155B 51                      		push	cx
 13375 0000155C 52                      		push	dx
 13376 0000155D A2[2000]                		mov	[number_of_sec], al
 13377                                  loop_ecc:				
 13378 00001560 B80102                  		mov	ax, 201h	; read one sector
 13379                                  
 13380                                  ; we do reads one sector at a time. this ensures that we will eventually
 13381                                  ; finish the request since ecc errors on one sector do read in that sector.
 13382                                  ;
 13383                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13384                                  ; that attempt to read more sectors than are available on a particular
 13385                                  ; track.
 13386                                  ;
 13387                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13388                                  ; this request.
 13389                                  ;
 13390                                  ; at this point, all registers are set up for the call to orig13, except
 13391                                  ; that there may be a starting sector number that is bigger than the number
 13392                                  ; of sectors on a track.
 13393                                  ;
 13394 00001563 E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13395                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13396                                  		; 17/10/2022
 13397 00001566 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13398                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13399 0000156B 730C                    		jnb	short ok11_op
 13400 0000156D 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13401 00001570 741B                    		jz	short handle_dma_during_ecc
 13402 00001572 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13403 00001575 7510                    		jnz	short ok11_exit_err
 13404                                  		; 10/12/2022
 13405                                  		; xor ax ax -> ah = 0
 13406                                  		;mov	ah, 0		; ecc error. reset the system again.
 13407 00001577 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13408                                  					; was the last sector, no error	code
 13409                                  					; will be returned for the corrected
 13410                                  					; read.	(clear carry too.)
 13411                                  ok11_op:				
 13412 00001579 FE0E[2000]              		dec	byte [number_of_sec]
 13413 0000157D 7409                    		jz	short ok11_exit	; all done?
 13414 0000157F FEC1                    		inc	cl		; advance sector number
 13415                                  					; add 200h to address
 13416 00001581 FEC7                    		inc	bh
 13417 00001583 FEC7                    		inc	bh
 13418 00001585 EBD9                    		jmp	short loop_ecc
 13419                                  ; ---------------------------------------------------------------------------
 13420                                  
 13421                                  ; locate error returns centrally
 13422                                  
 13423                                  ok11_exit_err:				
 13424 00001587 F9                      		stc			; set carry bit again.
 13425                                  ok11_exit:				
 13426 00001588 5A                      		pop	dx
 13427 00001589 59                      		pop	cx
 13428 0000158A 5B                      		pop	bx
 13429 0000158B EB88                    		jmp	short i13ret_ck_chglinerr
 13430                                  ; ---------------------------------------------------------------------------
 13431                                  
 13432                                  ; do the single sector read again, this time into our temporary
 13433                                  ; buffer, which is guaranteed not to have a DMA error, then
 13434                                  ; move the data to its proper location and proceed
 13435                                  
 13436                                  handle_dma_during_ecc:			
 13437 0000158D 06                      		push	es
 13438 0000158E 53                      		push	bx
 13439 0000158F BB[4E01]                		mov	bx, disksector
 13440 00001592 1E                      		push	ds
 13441 00001593 07                      		pop	es		; point es:bx to buffer
 13442 00001594 B80102                  		mov	ax, 201h	; read one sector
 13443                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13444                                  		; 17/10/2022
 13445 00001597 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13446                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13447 0000159C 5B                      		pop	bx
 13448 0000159D 07                      		pop	es
 13449 0000159E 7305                    		jnb	short handle_dma_during_ecc_noerr
 13450 000015A0 80FC11                  		cmp	ah, 11h
 13451 000015A3 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13452                                  
 13453                                  ; now we're kosher. Copy the data to where it belongs and resume
 13454                                  ; the ECC looping code.
 13455                                  
 13456                                  handle_dma_during_ecc_noerr:		
 13457 000015A5 56                      		push	si
 13458 000015A6 57                      		push	di
 13459 000015A7 89DF                    		mov	di, bx
 13460 000015A9 BE[4E01]                		mov	si, disksector
 13461 000015AC E829FE                  		call	move_sector
 13462 000015AF 5F                      		pop	di
 13463 000015B0 5E                      		pop	si
 13464 000015B1 EBC6                    		jmp	short ok11_op
 13465                                  ; ---------------------------------------------------------------------------
 13466                                  
 13467                                  ; we truly have a dma violation. restore register ax and retry the
 13468                                  ; operation as best we can.
 13469                                  
 13470                                  gotdmaerr:				
 13471 000015B3 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13472 000015B6 FB                      		sti
 13473 000015B7 80FC02                  		cmp	ah, 2		; romread
 13474 000015BA 723B                    		jb	short i13_done_dmaerr
 13475                                  					; just pass dma error thru for
 13476                                  					; functions we don't handle
 13477 000015BC 80FC04                  		cmp	ah, 4		; romverify
 13478 000015BF 743C                    		jz	short intverify
 13479 000015C1 80FC05                  		cmp	ah, 5		; romformat
 13480 000015C4 7448                    		jz	short intformat
 13481 000015C6 772F                    		ja	short i13_done_dmaerr
 13482                                  
 13483                                  ; we are doing a read/write call. check for dma problems
 13484                                  
 13485                                  ;	******** set up stack frame here!!! ********
 13486                                  
 13487 000015C8 52                      		push	dx
 13488 000015C9 51                      		push	cx
 13489 000015CA 53                      		push	bx
 13490 000015CB 50                      		push	ax
 13491 000015CC 55                      		push	bp
 13492 000015CD 89E5                    		mov	bp, sp
 13493 000015CF 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13494 000015D1 D1E2                    		shl	dx, 1
 13495 000015D3 D1E2                    		shl	dx, 1
 13496 000015D5 D1E2                    		shl	dx, 1
 13497 000015D7 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13498 000015D9 01DA                    		add	dx, bx		; combine with offset
 13499 000015DB 81C2FF01                		add	dx, 511		; simulate a transfer
 13500                                  
 13501                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13502                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13503                                  
 13504 000015DF 7303                    		jnb	short no_skip_first
 13505 000015E1 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13506                                  ; ---------------------------------------------------------------------------
 13507                                  
 13508                                  no_skip_first:				
 13509 000015E4 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13510 000015E6 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13511 000015E8 28F4                    		sub	ah, dh
 13512                                  
 13513                                  ; ah is now the number of sectors that we can successfully write in this
 13514                                  ; segment. if this number is above or equal to the requested number, then we
 13515                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13516                                  ;
 13517                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13518                                  ; first place is because we got a dma error. so it's impossible
 13519                                  ; for the whole block to fit, unless the dma error was returned
 13520                                  ; in error.
 13521                                  
 13522 000015EA 38C4                    		cmp	ah, al		; can we fit it	in?
 13523 000015EC 7236                    		jb	short doblock	; no, perform blocking.
 13524                                  
 13525                                  ; yes, the request fits. let it happen.
 13526                                  
 13527 000015EE 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13528                                  					; set up head number
 13529 000015F1 E888FE                  		call	doint
 13530 000015F4 E9D900                  		jmp	bad13		; and return from this place
 13531                                  ; ---------------------------------------------------------------------------
 13532                                  
 13533                                  i13_done_dmaerr:			
 13534 000015F7 B409                    		mov	ah, 9		; pass dma error thru to caller
 13535 000015F9 F9                      		stc
 13536 000015FA E914FF                  		jmp	ret_from_i13	; return with error,
 13537                                  					; we know it's not a changeline error
 13538                                  ; ---------------------------------------------------------------------------
 13539                                  
 13540                                  ; verify the given sectors. place the buffer pointer into our space.
 13541                                  
 13542                                  intverify:				
 13543 000015FD 06                      		push	es		; save caller's dma address
 13544 000015FE 53                      		push	bx
 13545 000015FF 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13546 00001600 07                      		pop	es
 13547                                  dosimple:				
 13548 00001601 BB[4E01]                		mov	bx, disksector
 13549                                  					; do the i/o from Bios_Data:disksector
 13550                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13551                                  		; 17/10/2022
 13552 00001604 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13553                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13554 00001609 5B                      		pop	bx
 13555 0000160A 07                      		pop	es
 13556 0000160B E907FF                  		jmp	i13ret_ck_chglinerr
 13557                                  ; ---------------------------------------------------------------------------
 13558                                  
 13559                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13560                                  
 13561                                  intformat:				
 13562 0000160E 06                      		push	es
 13563 0000160F 53                      		push	bx
 13564 00001610 56                      		push	si
 13565 00001611 57                      		push	di
 13566 00001612 1E                      		push	ds
 13567                                  
 13568                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13569                                  ; in other words, swap (ds, es)
 13570                                  
 13571 00001613 06                      		push	es
 13572 00001614 1E                      		push	ds
 13573 00001615 07                      		pop	es
 13574 00001616 1F                      		pop	ds
 13575 00001617 89DE                    		mov	si, bx
 13576 00001619 BF[4E01]                		mov	di, disksector
 13577 0000161C E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13578 0000161F 1F                      		pop	ds
 13579 00001620 5F                      		pop	di
 13580 00001621 5E                      		pop	si		; do the i/o from
 13581 00001622 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13582                                  ; ---------------------------------------------------------------------------
 13583                                  
 13584                                  ; we can't fit the request into the entire block. perform the operation on
 13585                                  ; the first block.
 13586                                  ;
 13587                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13588                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13589                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13590                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13591                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13592                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13593                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13594                                  ; doblock will handle the first block of requested sectors within the
 13595                                  ; boundary of this safe value.
 13596                                  
 13597                                  doblock:
 13598                                  
 13599                                  ; try to get the # of sectors/track from bds via rom drive number.
 13600                                  ; for any mini disks installed, here we have to pray that they have the
 13601                                  ; same # of sector/track as the main dos partition disk drive.
 13602                                  				
 13603 00001624 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13604                                  					; get head #, drive #
 13605 00001627 51                      		push	cx
 13606 00001628 06                      		push	es
 13607 00001629 57                      		push	di		; ah - # of sectors before dma boundary
 13608                                  					; al - requested # of sectors for i/o.
 13609 0000162A E83BFE                  		call	find_bds
 13610 0000162D 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13611                                  		; 12/12/2022
 13612 00001631 26F6452301              		test	byte [es:di+23h], 1
 13613                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13614 00001636 5F                      		pop	di
 13615 00001637 07                      		pop	es
 13616 00001638 88E0                    		mov	al, ah		; set al=ah for	floppies
 13617 0000163A 7404                    		jz	short doblockflop ; they are track by track operation
 13618 0000163C B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13619 0000163E 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13620                                  doblockflop:				
 13621 00001640 59                      		pop	cx
 13622                                  doblockcontinue:			
 13623 00001641 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13624 00001643 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13625 00001645 50                      		push	ax
 13626 00001646 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13627 00001648 EB03                    		jmp	short doblockdoint
 13628                                  ; ---------------------------------------------------------------------------
 13629                                  
 13630                                  doblocklast:				
 13631 0000164A 88C4                    		mov	ah, al
 13632 0000164C 50                      		push	ax
 13633                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13634 0000164D E82CFE                  		call	doint
 13635 00001650 727E                    		jb	short bad13	; something happened, bye!
 13636 00001652 58                      		pop	ax
 13637 00001653 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13638                                  					; decrement by the successful operation
 13639 00001656 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13640 00001658 00E7                    		add	bh, ah		; advance dma addres
 13641 0000165A 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13642 0000165C 38C4                    		cmp	ah, al		; check	the previous value
 13643 0000165E 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13644                                  					; then we are done already.
 13645 00001660 28E0                    		sub	al, ah		; otherwise,
 13646                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13647 00001662 E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13648 00001665 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13649                                  ; ---------------------------------------------------------------------------
 13650                                  
 13651                                  bufferx:				
 13652 00001667 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13653                                  					; set up head number
 13654                                  buffer:					
 13655 0000166A 53                      		push	bx
 13656 0000166B 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13657 0000166E 80FC03                  		cmp	ah, 3		; romwrite
 13658 00001671 7525                    		jnz	short doread	;
 13659                                  					
 13660                                  ; copy the offending sector into local buffer
 13661                                  
 13662 00001673 06                      		push	es
 13663 00001674 1E                      		push	ds
 13664 00001675 56                      		push	si
 13665 00001676 57                      		push	di
 13666 00001677 1E                      		push	ds		; exchange segment registers
 13667 00001678 06                      		push	es
 13668 00001679 1F                      		pop	ds
 13669 0000167A 07                      		pop	es
 13670 0000167B BF[4E01]                		mov	di, disksector	; where to move
 13671 0000167E 57                      		push	di		; save it
 13672 0000167F 89DE                    		mov	si, bx		; source
 13673 00001681 E854FD                  		call	move_sector	; move sector into local buffer
 13674 00001684 5B                      		pop	bx		; new transfer address
 13675                                  					; (es:bx = Bios_Data:diskbuffer)
 13676 00001685 5F                      		pop	di		; restore caller's di & si
 13677 00001686 5E                      		pop	si
 13678 00001687 1F                      		pop	ds		; restore Bios_Data
 13679                                  
 13680                                  ; see if we are wrapping around a track or head
 13681                                  
 13682 00001688 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13683                                  					; get drive number
 13684 0000168A 8A5608                  		mov	dl, [bp+8]
 13685 0000168D E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13686                                  					;
 13687                                  					; ah is	function
 13688                                  					; al is	1 for single sector transfer
 13689                                  					; es:bx	is local transfer addres
 13690                                  					; cx is	track/sector number
 13691                                  					; dx is	head/drive number
 13692                                  					; si,di	unchanged
 13693 00001690 E8E9FD                  		call	doint
 13694 00001693 07                      		pop	es		; restore caller's dma segment
 13695 00001694 723A                    		jb	short bad13	; go clean up
 13696 00001696 EB22                    		jmp	short dotail
 13697                                  ; ---------------------------------------------------------------------------
 13698                                  
 13699                                  ; reading a sector. do int first, then move things around
 13700                                  
 13701                                  doread:					
 13702 00001698 06                      		push	es
 13703 00001699 53                      		push	bx
 13704 0000169A 1E                      		push	ds		; es = Bios_Code
 13705 0000169B 07                      		pop	es
 13706 0000169C BB[4E01]                		mov	bx, disksector
 13707 0000169F B001                    		mov	al, 1
 13708 000016A1 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13709                                  					; get drive number
 13710 000016A4 E84CFD                  		call	check_wrap	;
 13711                                  					; ah = function
 13712                                  					; al = 1 for single sector
 13713                                  					; es:bx	points to local	buffer
 13714                                  					; cx, dx are track/sector, head/drive
 13715 000016A7 E8D2FD                  		call	doint
 13716 000016AA 5B                      		pop	bx
 13717 000016AB 07                      		pop	es
 13718 000016AC 7222                    		jb	short bad13
 13719 000016AE 56                      		push	si
 13720 000016AF 57                      		push	di
 13721 000016B0 89DF                    		mov	di, bx
 13722 000016B2 BE[4E01]                		mov	si, disksector
 13723 000016B5 E820FD                  		call	move_sector
 13724 000016B8 5F                      		pop	di
 13725 000016B9 5E                      		pop	si
 13726                                  
 13727                                  ; note the fact that we've done 1 more sector
 13728                                  
 13729                                  dotail:					
 13730 000016BA 5B                      		pop	bx		; retrieve new dma area
 13731 000016BB 80C702                  		add	bh, 2		; advance over sector
 13732 000016BE 41                      		inc	cx
 13733 000016BF 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13734 000016C2 F8                      		clc
 13735 000016C3 FEC8                    		dec	al
 13736 000016C5 7409                    		jz	short bad13	; no more i/o
 13737                                  
 13738                                  ; see if we wrap around a track or head boundary with starting sector
 13739                                  ; we already have the correct head number to pass to check_wrap
 13740                                  
 13741 000016C7 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13742 000016CA E826FD                  		call	check_wrap
 13743 000016CD E8ACFD                  		call	doint
 13744                                  
 13745                                  ; we are done. ax has the final code; we throw away what we got before
 13746                                  
 13747                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13748                                  ;	   or we've finished. If carry is set now, our only
 13749                                  ;	   hope for salvation is that it was a read operation
 13750                                  ;	   and the error code is ECC error. In that case, we'll
 13751                                  ;	   just pop the registers and go do the old ECC thing.
 13752                                  ;	   When the DMA error that got us here in the first
 13753                                  ;	   place occurs, it'll handle it.
 13754                                  
 13755                                  bad13:					
 13756 000016D0 89EC                    		mov	sp, bp
 13757 000016D2 5D                      		pop	bp
 13758 000016D3 5B                      		pop	bx
 13759 000016D4 5B                      		pop	bx
 13760 000016D5 59                      		pop	cx
 13761 000016D6 5A                      		pop	dx
 13762 000016D7 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13763 000016D9 E935FE                  		jmp	ret_from_i13	; non-error exit
 13764                                  ; ---------------------------------------------------------------------------
 13765                                  
 13766                                  xgoterr13_xxxx:				
 13767 000016DC E958FE                  		jmp	goterr13_xxxx
 13768                                  
 13769                                  ; ---------------------------------------------------------------------------
 13770                                  		; 10/12/2022
 13771                                  		;db 	0
 13772                                  ; ---------------------------------------------------------------------------
 13773                                  
 13774                                  ;Bios_Code ends
 13775                                  
 13776                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13777                                  
 13778                                  ;-----------------------------------------------------------------------------
 13779                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13780                                  ;-----------------------------------------------------------------------------
 13781                                  ; 17/03/2019 - Retro DOS v4.0
 13782                                  
 13783                                  		; 19/10/2022
 13784                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13785 000016DF 8A26[7500]              		mov	ah, [drvmax]
 13786 000016E3 BF[8706]                		mov	di, dskdrvs
 13787 000016E6 1E                      		push	ds		; pass result in es:di
 13788 000016E7 07                      		pop	es
 13789 000016E8 E9CDEE                  		jmp	SetPtrSav
 13790                                  
 13791                                  ; =============== S U B	R O U T	I N E =======================================
 13792                                  
 13793                                  ;---------------------------------------------------------------------------
 13794                                  ; install_bds installs a bds at location es:di into the current linked list of
 13795                                  ; bds maintained by this device driver. it places the bds at the end of the
 13796                                  ; list. Trashes (at least) ax, bx, di, si
 13797                                  ;---------------------------------------------------------------------------
 13798                                  
 13799                                  install_bds:		
 13800 000016EB 1E                      		push	ds		; save Bios_Data segment
 13801 000016EC BE[1901]                		mov	si, start_bds	; beginning of chain
 13802                                  
 13803                                  		; ds:si now points to link to first bds
 13804                                  		; assume bds list is non-empty
 13805                                  loop_next_bds:				
 13806 000016EF C534                    		lds	si, [si]	; [si+BDS.link]
 13807                                  					; fetch	next bds
 13808 000016F1 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13809 000016F5 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13810                                  					; drive	with new one?
 13811 000016F8 7518                    		jnz	short next_bds
 13812 000016FA B310                    		mov	bl, 10h		; fi_am_mult
 13813 000016FC 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13814                                  					; set both of them to i_am_mult	if so
 13815 00001700 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13816 00001703 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13817                                  					; we don't own it
 13818 00001708 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13819                                  					; determine if changeline available
 13820 0000170B 80E302                  		and	bl, 2		; fchangeline
 13821 0000170E 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13822                                  next_bds:				
 13823 00001712 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13824                                  					; are we at end	of list?
 13825 00001715 75D8                    		jnz	short loop_next_bds
 13826 00001717 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13827                                  					; install bds
 13828 0000171A 893C                    		mov	[si], di
 13829 0000171C 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13830                                  					; set next pointer to null
 13831 00001721 1F                      		pop	ds
 13832                                  
 13833                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13834                                  ;
 13835                                  ; **** If the new drive has a higher EOT value, we must alter the
 13836                                  ;      'eot' variable appropriately.
 13837                                  ;
 13838                                  ;		; 01/06/2019
 13839                                  ;		;mov	al,[es:di+52]
 13840                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13841                                  ;
 13842                                  ;		cmp	al,[eot]
 13843                                  ;		jbe	short _eot_ok
 13844                                  ;		mov	[eot],al
 13845                                  
 13846 00001722 C3                      		retn
 13847                                  
 13848                                  ; ---------------------------------------------------------------------------
 13849                                  
 13850                                  ; 17/10/2022
 13851                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13852                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13853                                  ; 09/12/2022
 13854                                  DRVLET equ drvlet
 13855                                  SNGMSG equ sngmsg
 13856                                  
 13857                                  ; 16/10/2022
 13858                                  
 13859                                  ;---------------------------------------------------------------------------
 13860                                  ;  ask to swap the disk in drive a:
 13861                                  ;	es:di -> bds
 13862                                  ;	ds -> Bios_Data
 13863                                  ;---------------------------------------------------------------------------
 13864                                  
 13865                                  		; 19/10/2022
 13866 00001723 F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13867                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13868 00001728 7405                    		jz	short no_win386	; no, skip SetFocus
 13869                                  		
 13870                                  		; set focus to the correct VM
 13871                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13872                                  		; 17/10/2022
 13873 0000172A 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13874                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13875                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13876                                  no_win386:				
 13877 0000172F 51                      		push	cx
 13878 00001730 52                      		push	dx
 13879 00001731 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13880                                  					; get the drive	letter
 13881                                  
 13882                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13883                                  ;           then existing dsk is drive A & vice versa
 13884                                  
 13885 00001735 88D6                    		mov	dh, dl
 13886 00001737 80F601                  		xor	dh, 1
 13887 0000173A 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13888 0000173C B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13889                                  					; broad	cast code for swap disk
 13890                                  					; Broadcast it
 13891 0000173F CD2F                    		int	2Fh	
 13892 00001741 41                      		inc	cx		; cx == -1 ?
 13893 00001742 741E                    		jz	short swpdsk9	; somebody has handled it
 13894                                  
 13895                                  ; using a different drive in a one drive system so request the user change disks
 13896                                  
 13897 00001744 80C241                  		add	dl, 'A'
 13898                                  		; 17/10/2022
 13899 00001747 2E8816[8117]            		mov	[cs:DRVLET], dl
 13900                                  		; 16/10/2022
 13901                                  		;;mov	byte [cs:drvlet], dl
 13902                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13903                                  					; 0070h:3D54h =	2C7h:17E4h
 13904 0000174C BE[6517]                		mov	si, SNGMSG
 13905                                  		;mov	si, 17C8h	; sngmsg
 13906                                  					; 0070h:3D38h =	2C7h:17C8h
 13907 0000174F 53                      		push	bx
 13908 00001750 2E                      		cs
 13909 00001751 AC                      		lodsb			; get the next character of the message
 13910                                  		;lods	byte ptr cs:[si]
 13911                                  wrmsg_loop:				
 13912 00001752 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13913                                  					; AL = character to display
 13914 00001754 2E                      		cs
 13915 00001755 AC                      		lodsb
 13916                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13917                                  					; get the next character of the	message
 13918 00001756 08C0                    		or	al, al
 13919 00001758 75F8                    		jnz	short wrmsg_loop
 13920 0000175A E8AAEA                  		call	con_flush	; flush out keyboard queue
 13921                                  					; call rom-bios
 13922 0000175D 30E4                    		xor	ah, ah
 13923 0000175F CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13924                                  					; Return: AH = scan code, AL = character
 13925 00001761 5B                      		pop	bx
 13926                                  swpdsk9:				
 13927 00001762 5A                      		pop	dx
 13928 00001763 59                      		pop	cx
 13929 00001764 C3                      		retn
 13930                                  
 13931                                  ; ---------------------------------------------------------------------------
 13932                                  
 13933                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13934                                  
 13935                                  ;--------------------------------------------------------
 13936                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13937                                  ;--------------------------------------------------------
 13938                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13939                                  ;--------------------------------------------------------
 13940                                  ; 17/03/2019 - Retro DOS v4.0
 13941                                  
 13942                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13943 00001765 0D0A                    sngmsg:		db 0Dh,0Ah
 13944 00001767 496E73657274206469-     		db 'Insert diskette for drive '
 13944 00001770 736B6574746520666F-
 13944 00001779 7220647269766520   
 13945                                  
 13946                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13947 00001781 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13947 0000178A 65737320616E79206B-
 13947 00001793 6579207768656E2072-
 13947 0000179C 656164790D0A       
 13948 000017A2 0A00                    		db 0Ah,0
 13949                                  
 13950                                  ; =============== S U B	R O U T	I N E =======================================
 13951                                  
 13952                                  ;---------------------------------------------------------------------------
 13953                                  ; input : es:di points to current bds for drive.
 13954                                  ; return : zero set if no open files
 13955                                  ;	   zero reset if open files
 13956                                  ;---------------------------------------------------------------------------
 13957                                  
 13958                                  chkopcnt:		
 13959 000017A4 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13960 000017A9 C3                      		retn
 13961                                  
 13962                                  ; =============== S U B	R O U T	I N E =======================================
 13963                                  
 13964                                  ;---------------------------------------------------------------------------
 13965                                  ; at media check time, we need to really get down and check what the change is.
 13966                                  ; this is guaranteed to be expensive.
 13967                                  ;
 13968                                  ;	es:di -> bds, ds -> Bios_Data
 13969                                  ;---------------------------------------------------------------------------
 13970                                  
 13971                                  mediacheck:	
 13972 000017AA E88CF0                  		call	checksingle	; make sure correct disk is in place
 13973 000017AD 31F6                    		xor	si, si
 13974 000017AF E85501                  		call	haschange
 13975 000017B2 742F                    		jz	short mediaret
 13976 000017B4 E84401                  		call	checkromchange
 13977 000017B7 752B                    		jnz	short mediadovolid
 13978 000017B9 50                      		push	ax
 13979 000017BA 52                      		push	dx
 13980 000017BB 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13981                                  					; set logical drive number
 13982 000017BF B416                    		mov	ah, 16h
 13983 000017C1 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13984                                  					; DL = drive to	check
 13985                                  					; Return: AH = disk change status
 13986 000017C3 5A                      		pop	dx
 13987 000017C4 58                      		pop	ax
 13988 000017C5 721D                    		jb	short mediadovolid
 13989 000017C7 BE0100                  		mov	si, 1		; signal no change
 13990                                  
 13991                                  ; there are some drives with changeline that "lose" the changeline indication
 13992                                  ; if a different drive is accessed after the current one. in order to avoid
 13993                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13994                                  ; is not active and we are accessing a different drive from the last one.
 13995                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13996                                  ; status.
 13997                                  		; 19/10/2022
 13998 000017CA 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13999 000017CE 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14000                                  					; (If the last drive accessed is not current drive
 14001                                  					; media	change status may be incorrect.	So,
 14002                                  					; "I don't now" will be returned even if it is indicated
 14003                                  					; as media is not changed.)
 14004 000017D2 740F                    		jz	short mediaret	; (same	drive,
 14005                                  					; media	changeline indication is reliable)
 14006                                  
 14007                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14008                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14009                                  ; "not changed" here since the 2 second test said no change.)
 14010                                  
 14011 000017D4 50                      		push	ax
 14012 000017D5 51                      		push	cx
 14013 000017D6 52                      		push	dx
 14014 000017D7 E879ED                  		call	Check_Time_Of_Access
 14015 000017DA 5A                      		pop	dx
 14016 000017DB 59                      		pop	cx
 14017 000017DC 58                      		pop	ax
 14018 000017DD 09F6                    		or	si, si
 14019 000017DF 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14020                                  					; (volume id will be checked)
 14021 000017E1 31F6                    		xor	si, si		; return "i don't know"
 14022                                  mediaret:				
 14023 000017E3 C3                      		retn
 14024                                  ; ---------------------------------------------------------------------------
 14025                                  
 14026                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14027                                  ; because this may be different since we only set medbyt when doing a read
 14028                                  ; or write.
 14029                                  
 14030                                  mediadovolid:				
 14031 000017E4 E811EE                  		call	GetBp		; build	a new bpb in current bds
 14032 000017E7 72FA                    		jb	short mediaret
 14033 000017E9 E82D00                  		call	check_vid
 14034 000017EC 73F5                    		jnb	short mediaret
 14035 000017EE E9DCF3                  		jmp	maperror	; fix up al for	return to dos
 14036                                  ; ---------------------------------------------------------------------------
 14037                                  
 14038                                  ; simple, quick check of latched change. if no indication, then return
 14039                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14040                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14041                                  ; dos.
 14042                                  ;
 14043                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14044                                  
 14045                                  ;	call with es:di -> bds, ds -> Bios_Data
 14046                                  ;	***** warning:  this routine will return one level up on the stack
 14047                                  ;			if an error occurs!
 14048                                  
 14049                                  checklatchio:	
 14050                                  
 14051                                  ; if returning fake bpb then assume the disk has not changed
 14052                                  			
 14053 000017F1 E8B0FF                  		call	chkopcnt
 14054 000017F4 741B                    		jz	short checkret	; done if zero
 14055                                  
 14056                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14057                                  
 14058 000017F6 E80201                  		call	checkromchange
 14059 000017F9 7416                    		jz	short checkret
 14060                                  
 14061                                  ; we now see that a change line has been seen in the past. let's do the
 14062                                  ; expensive verification.
 14063                                  
 14064 000017FB E8FAED                  		call	GetBp		; build	bpb in current bds
 14065 000017FE 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14066 00001800 E81600                  		call	check_vid
 14067 00001803 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14068 00001805 09F6                    		or	si, si		; is changed for sure?
 14069 00001807 7908                    		jns	short checkret
 14070 00001809 E87D00                  		call	returnvid
 14071                                  checklatchret:				
 14072 0000180C E8BEF3                  		call	maperror	; fix up al for	return to dos
 14073                                  ret_no_error_map:			
 14074 0000180F F9                      		stc
 14075 00001810 5E                      		pop	si		; pop off return address
 14076                                  checkret:				
 14077 00001811 C3                      		retn
 14078                                  ; ---------------------------------------------------------------------------
 14079                                  
 14080                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14081                                  ; only if there was a disk error. return that error code in ax.
 14082                                  ;
 14083                                  ;	called with es:di -> bds, ds -> Bios_Data
 14084                                  
 14085                                  checkfatvid:				
 14086 00001812 E8CD01                  		call	fat_check	; check	the fat	and the	vid
 14087 00001815 09F6                    		or	si, si
 14088 00001817 7827                    		js	short changed_drv ;
 14089                                  
 14090                                  ; the fat was the same. fall into check_vid and check volume id.
 14091                                  
 14092                                  		; fall into check_vid
 14093                                  
 14094                                  ; =============== S U B	R O U T	I N E =======================================
 14095                                  
 14096                                  ; now with the extended boot record, the logic should be enhanced.
 14097                                  ;
 14098                                  ; if it is the extended boot record, then we check the volume serial
 14099                                  ; number instead of volume id. if it is different, then set si to -1.
 14100                                  ;
 14101                                  ; if it is same, then si= 1 (no change).
 14102                                  ;
 14103                                  ; if it is not the extended boot record, then just follows the old
 14104                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14105                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14106                                  ; should have already covered by extended boot structure checking.
 14107                                  ; so, we will return "i don't know" by setting si to 0.
 14108                                  ;
 14109                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14110                                  ; (this will be gauranteed by a successful getbp call right before this
 14111                                  ; routine.)
 14112                                  ;
 14113                                  ;	called with es:di -> bds, ds -> bds
 14114                                  
 14115                                  		; 19/10/2022
 14116                                  check_vid:
 14117                                  
 14118                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14119                                  ; boot signature. if it is set then go to do the extended
 14120                                  ; id check otherwise continue with code below
 14121                                  
 14122 00001819 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14123                                  					; [disksector+EXT_BOOT.SIG],
 14124                                  					; EXT_BOOT_SIGNATURE
 14125 0000181E 7427                    		jz	short do_ext_check_id
 14126 00001820 E8E400                  		call	haschange
 14127 00001823 74EC                    		jz	short checkret
 14128 00001825 31F6                    		xor	si, si
 14129 00001827 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14130                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14131 0000182C 7411                    		jz	short checkfatret ; don't read vol id
 14132                                  					; if not fat system
 14133 0000182E E8F600                  		call	read_volume_id
 14134 00001831 720C                    		jb	short checkfatret
 14135 00001833 E89B01                  		call	check_volume_id
 14136 00001836 BEFFFF                  		mov	si, 0FFFFh	; -1
 14137                                  					; definitely changed
 14138 00001839 7505                    		jnz	short changed_drv
 14139                                  
 14140 0000183B 46                      		inc	si		; not changed
 14141                                  vid_no_changed:				
 14142 0000183C E8C200                  		call	resetchanged
 14143                                  		; 12/12/2022
 14144                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14145                                  		;clc
 14146                                  checkfatret:				
 14147 0000183F C3                      		retn
 14148                                  ; ---------------------------------------------------------------------------
 14149                                  
 14150                                  		; 12/12/2022
 14151                                  changed_drv:
 14152 00001840 F8                      		clc			; cas -- return	no error
 14153 00001841 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14154                                  					; ensure that we ask rom for media
 14155 00001846 C3                      		retn			; check	next time round
 14156                                  ; ---------------------------------------------------------------------------
 14157                                  
 14158                                  ; extended id check
 14159                                  
 14160                                  ; 16/10/2022
 14161                                  
 14162                                  ; the code to check extended id is basically a check to see if the
 14163                                  ; volume serial number is still the same. the volume serial number
 14164                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14165                                  ; ds:di points to the bds of the drive under consideration.
 14166                                  ; the bds has fields containing the high and low words 
 14167                                  ; of the volume serial number of the media in the drive.
 14168                                  ; compare these fields to the fields mentioned above. if these fields
 14169                                  ; do not match the media has changed and so we should jump to the code
 14170                                  ; starting at ext_changed else return "i don't know" status
 14171                                  ; in the register used for the changeline status and continue executing
 14172                                  ; the code given below. for temporary storage use the register which
 14173                                  ; has been saved and restored around this block.
 14174                                  ;
 14175                                  ; bds fields in inc\msbds.inc
 14176                                  
 14177                                  		; 19/10/2022
 14178                                  do_ext_check_id:			
 14179 00001847 50                      		push	ax
 14180                                  		;mov	ax, word ptr ds:disksector+27h
 14181                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14182 00001848 A1[7501]                		mov	ax, [disksector+27h]
 14183 0000184B 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14184 0000184F 750E                    		jnz	short ext_changed
 14185 00001851 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14186 00001854 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14187 00001858 7505                    		jnz	short ext_changed
 14188 0000185A 31F6                    		xor	si, si		; 0
 14189                                  					; don't know
 14190 0000185C 58                      		pop	ax
 14191 0000185D EBDD                    		jmp	short vid_no_changed
 14192                                  					; reset the flag
 14193                                  ; ---------------------------------------------------------------------------
 14194                                  
 14195                                  ext_changed:				
 14196 0000185F 58                      		pop	ax
 14197 00001860 BEFFFF                  		mov	si, 0FFFFh	; -1
 14198                                  					; disk changed!
 14199                                  		; 12/12/2022
 14200                                  		; ('changed_drv' clears cf)
 14201                                  		;clc
 14202 00001863 EBDB                    		jmp	short changed_drv
 14203                                  
 14204                                  ; ---------------------------------------------------------------------------
 14205                                  
 14206                                  ; at i/o time, we detected the error. now we need to determine whether the
 14207                                  ; media was truly changed or not. we return normally if media change unknown.
 14208                                  ; and we pop off the call and jmp to harderr if we see an error.
 14209                                  ;
 14210                                  ; es:di -> bds
 14211                                  
 14212                                  checkio:				
 14213 00001865 80FC06                  		cmp	ah, 6
 14214 00001868 75D5                    		jnz	short checkfatret
 14215 0000186A E837FF                  		call	chkopcnt
 14216 0000186D 74D0                    		jz	short checkfatret
 14217 0000186F E886ED                  		call	GetBp
 14218 00001872 7212                    		jb	short no_error_map
 14219 00001874 E89BFF                  		call	checkfatvid
 14220 00001877 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14221 00001879 09F6                    		or	si, si		; is changed for sure?
 14222 0000187B 7802                    		js	short checkioerr ; yes changed
 14223 0000187D 45                      		inc	bp		; allow	a retry
 14224 0000187E C3                      		retn
 14225                                  ; ---------------------------------------------------------------------------
 14226                                  
 14227                                  checkioerr:				
 14228 0000187F E80700                  		call	returnvid
 14229                                  
 14230                                  checkioret:				
 14231 00001882 F9                      		stc			; make sure carry gets passed through
 14232 00001883 E9F7F2                  		jmp	harderr
 14233                                  ; ---------------------------------------------------------------------------
 14234                                  
 14235                                  no_error_map:				
 14236 00001886 E9F7F2                  		jmp	harderr2
 14237                                  
 14238                                  ; =============== S U B	R O U T	I N E =======================================
 14239                                  
 14240                                  ; return vid sets up the vid for a return to dos.
 14241                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14242                                  ;  **** trashes si! ****
 14243                                  
 14244                                  returnvid:		
 14245 00001889 BE1600                  		mov	si, 22		; extra
 14246                                  					; offset into pointer to return	value
 14247 0000188C E80700                  		call	vid_into_packet
 14248 0000188F B406                    		mov	ah, 6
 14249 00001891 F9                      		stc
 14250 00001892 C3                      		retn
 14251                                  
 14252                                  ; ---------------------------------------------------------------------------
 14253                                  
 14254                                  ; moves the pointer to the volid for the drive into the original request packet
 14255                                  ; no attempt is made to preserve registers.
 14256                                  ;
 14257                                  ; assumes es:di -> bds
 14258                                  ; **trashes si**
 14259                                  
 14260                                  media_set_vid:				
 14261 00001893 BE0F00                  		mov	si, 15		; trans+1
 14262                                  					; return the value here	in packet
 14263                                  
 14264                                  		; fall into vid_into_packet
 14265                                  
 14266                                  ; =============== S U B	R O U T	I N E =======================================
 14267                                  
 14268                                  ; return pointer to vid in bds at es:di in packet[si]
 14269                                  
 14270                                  		; 19/10/2022
 14271                                  vid_into_packet:
 14272 00001896 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14273 00001897 C51E[1200]              		lds	bx, [ptrsav]
 14274 0000189B 83C74B                  		add	di, 75		; BDS.volid
 14275 0000189E 8938                    		mov	[bx+si], di
 14276 000018A0 83EF4B                  		sub	di, 75		; BDS.volid
 14277 000018A3 8C4002                  		mov	[bx+si+2], es
 14278 000018A6 1F                      		pop	ds
 14279                                  dofloppy:	; 18/12/2022
 14280 000018A7 C3                      		retn
 14281                                  
 14282                                  ; ---------------------------------------------------------------------------
 14283                                  
 14284                                  ;----------------------------------------------------------------------------
 14285                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14286                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14287                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14288                                  ;   of getbp. for 3.5" media, we just return.
 14289                                  ;
 14290                                  ;   inputs:	es:di point to correct bds for this drive
 14291                                  ;		ah has media byte
 14292                                  ;
 14293                                  ;   outputs:	carry clear
 14294                                  ;		    no registers modified
 14295                                  ;		carry set
 14296                                  ;		    al = sectors/fat
 14297                                  ;		    bh = number of root directory entries
 14298                                  ;		    bl = sectors per track
 14299                                  ;		    cx = number of sectors
 14300                                  ;		    dh = sectors per allocation unit
 14301                                  ;		    dl = number of heads
 14302                                  ;
 14303                                  ;----------------------------------------------------------------------------
 14304                                  
 14305                                  hidensity:
 14306                                  
 14307                                  ; check for correct drive
 14308                                  		
 14309                                  		; 12/12/2022
 14310 000018A8 26F6452302              		test	byte [es:di+23h], 2		
 14311                                  		;test	word [es:di+23h], 2 ; is it special?	
 14312                                  					; [es:di+BDS.flags], fchangeline
 14313 000018AD 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14314                                  
 14315                                  ; we have a media byte that is pretty complex. examine drive information
 14316                                  ; table to see what kind it is.
 14317                                  
 14318 000018AF 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14319 000018B4 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14320                                  					; yes, use fatid...
 14321                                  ; 96 tpi drive?
 14322 000018B6 80FCF9                  		cmp	ah, 0F9h
 14323 000018B9 75EC                    		jnz	short dofloppy
 14324                                  
 14325                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14326                                  ;------ a 720K diskette
 14327                                  
 14328 000018BB 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14329                                  					; ffOther
 14330 000018C0 7418                    		jz	short Is720K
 14331 000018C2 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14332                                  					; ff288
 14333 000018C7 7411                    		jz	short Is720K
 14334 000018C9 B007                    		mov	al, 7		; seven	sectors	/ fat
 14335 000018CB BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14336                                  					; 224 root dir entries
 14337                                  					; & 0Fh sector max
 14338 000018CE B96009                  		mov	cx, 2400	; 80*15*2
 14339                                  					; 80 tracks, 15 sectors/track,
 14340                                  					; 2 sides
 14341 000018D1 BA0201                  		mov	dx, 258		; 1*256+2
 14342                                  					; sectors/allocation unit
 14343                                  					; & head max
 14344 000018D4 83C402                  		add	sp, 2		; pop off return address
 14345 000018D7 E98DED                  		jmp	Has1		; return to tail of getbp
 14346                                  ; ---------------------------------------------------------------------------
 14347                                  
 14348                                  Is720K:					
 14349 000018DA 83C402                  		add	sp, 2		; pop off return address
 14350 000018DD E94EED                  		jmp	Has720K		; return to 720K code
 14351                                  ; ---------------------------------------------------------------------------
 14352                                  
 14353                                  		; 18/12/2022
 14354                                  ;dofloppy:				
 14355                                  		;retn
 14356                                  
 14357                                  ; =============== S U B	R O U T	I N E =======================================
 14358                                  
 14359                                  ; 16/10/2022
 14360                                  
 14361                                  ;---------------------------------------------------------------------------
 14362                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14363                                  ;		   essentially used to indicate changeline, or format.
 14364                                  ;
 14365                                  ;   inputs:	dl contains physical drive number
 14366                                  ;		bx contains bits to set in the flag field in the bdss
 14367                                  ;   outputs:	none
 14368                                  ;   registers modified: flags
 14369                                  ;
 14370                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14371                                  ;
 14372                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14373                                  ;---------------------------------------------------------------------------
 14374                                  
 14375                                  set_changed_dl:	
 14376 000018E0 06                      		push	es
 14377 000018E1 57                      		push	di
 14378                                  		;les	di, ds:start_bds
 14379                                  		; 19/10/2022
 14380 000018E2 C43E[1901]              		les	di, [start_bds]
 14381                                  
 14382                                  ; note: we assume that the list is non-empty
 14383                                  
 14384                                  scan_bds:				
 14385 000018E6 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14386 000018EA 7504                    		jnz	short get_next_bds
 14387                                  
 14388                                  ; someone may complain, but this *always* must be done when a disk change is
 14389                                  ; noted. there are *no* other compromising circumstances.
 14390                                  
 14391 000018EC 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14392                                  					; signal change	on other drive
 14393                                  get_next_bds:				
 14394 000018F0 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14395                                  					; go to	next bds
 14396 000018F3 83FFFF                  		cmp	di, 0FFFFh
 14397 000018F6 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14398 000018F8 5F                      		pop	di
 14399 000018F9 07                      		pop	es
 14400 000018FA C3                      		retn
 14401                                  
 14402                                  ; =============== S U B	R O U T	I N E =======================================
 14403                                  
 14404                                  ;---------------------------------------------------------------------------
 14405                                  ; checkromchange - see if external program has diddled rom change line.
 14406                                  ;
 14407                                  ;   inputs:	es:di points to current bds.
 14408                                  ;   outputs:	zero set - no change
 14409                                  ;		zero reset - change
 14410                                  ;   registers modified: none
 14411                                  ;---------------------------------------------------------------------------
 14412                                  
 14413                                  checkromchange:	
 14414                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14415                                  		; 10/12/2022
 14416 000018FB 26F6452340              		test	byte [es:di+23h], 40h
 14417                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14418                                  					; fchanged
 14419 00001900 C3                      		retn
 14420                                  
 14421                                  ; =============== S U B	R O U T	I N E =======================================
 14422                                  
 14423                                  ;---------------------------------------------------------------------------
 14424                                  ; resetchanged - restore value of change line
 14425                                  ;
 14426                                  ;   inputs:	es:di points to current bds
 14427                                  ;   outputs:	none
 14428                                  ;   registers modified: none
 14429                                  ;---------------------------------------------------------------------------
 14430                                  
 14431                                  resetchanged:	
 14432                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14433                                  		; 10/12/2022
 14434 00001901 26806523BF              		and	byte [es:di+23h], 0BFh
 14435                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14436                                  					; ~fchanged
 14437 00001906 C3                      		retn
 14438                                  
 14439                                  ; =============== S U B	R O U T	I N E =======================================
 14440                                  
 14441                                  ;---------------------------------------------------------------------------
 14442                                  ; haschange - see if drive can supply change line
 14443                                  ;
 14444                                  ;   inputs:	es:di points to current bds
 14445                                  ;   outputs:	zero set - no change line available
 14446                                  ;		zero reset - change line available
 14447                                  ;   registers modified: none
 14448                                  ;---------------------------------------------------------------------------
 14449                                  
 14450                                  haschange:
 14451                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14452                                  		; 10/12/2022
 14453 00001907 26F6452302              		test	byte [es:di+23h], 2		
 14454                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14455                                  					; fchangeline
 14456 0000190C C3                      		retn
 14457                                  
 14458                                  ; ---------------------------------------------------------------------------
 14459                                  
 14460                                  ; 16/10/2022
 14461                                  
 14462                                  ;-------------------------------------------------------------------------
 14463                                  ; set_volume_id      -	main routine, calls other routines.
 14464                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14465                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14466                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14467                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14468                                  ;-------------------------------------------------------------------------
 14469                                  
 14470                                  ; set_volume_id
 14471                                  ;   if drive has changeline support, read in and set the volume_id
 14472                                  ; and the last fat_id byte. if no change line support then do nothing.
 14473                                  ;
 14474                                  ;   on entry:
 14475                                  ;	es:di points to the bds for this disk.
 14476                                  ;	ah contains media byte
 14477                                  ;
 14478                                  ;   on exit:
 14479                                  ;	carry clear:
 14480                                  ;	   successful call
 14481                                  ;	carry set
 14482                                  ;	   error and ax has error code
 14483                                  
 14484                                  set_volume_id:				
 14485 0000190D 52                      		push	dx		; save registers
 14486 0000190E 50                      		push	ax
 14487 0000190F E8F5FF                  		call	haschange	; does drive have changeline support?
 14488 00001912 740B                    		jz	short setvret	; no, get out
 14489 00001914 E81000                  		call	read_volume_id
 14490 00001917 7209                    		jb	short seterr
 14491 00001919 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14492 0000191C E8E2FF                  		call	resetchanged	; restore value	of change line
 14493                                  setvret:				
 14494                                  		; 10/12/2022
 14495                                  		; cf = 0
 14496                                  		;clc			; no error, clear carry flag
 14497 0000191F 58                      		pop	ax		; restore registers
 14498 00001920 5A                      		pop	dx
 14499 00001921 C3                      		retn
 14500                                  ; ---------------------------------------------------------------------------
 14501                                  
 14502                                  seterr:					
 14503 00001922 5A                      		pop	dx		; pop stack but don't overwrite ax
 14504 00001923 5A                      		pop	dx		; restore dx
 14505 00001924 C3                      		retn
 14506                                  ; ---------------------------------------------------------------------------
 14507 00001925 0000                    root_sec:	dw 0			; root sector #
 14508                                  
 14509                                  ; 16/10/2022
 14510                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14511                                  ; 09/12/2022
 14512                                  ROOTSEC equ root_sec
 14513                                  
 14514                                  ; =============== S U B	R O U T	I N E =======================================
 14515                                  
 14516                                  ; 16/10/2022
 14517                                  
 14518                                  ; read_volume_id read the volume id and tells if it has been changed.
 14519                                  ;
 14520                                  ;   on entry:
 14521                                  ;	es:di points to current bds for drive.
 14522                                  ;
 14523                                  ;   on exit:
 14524                                  ;	carry clear
 14525                                  ;	    si = 1  no change
 14526                                  ;	    si = 0  ?
 14527                                  ;	    si = -1 change
 14528                                  ;
 14529                                  ;	carry set:
 14530                                  ;	    error and ax has error code.
 14531                                  
 14532                                  read_volume_id:
 14533 00001927 52                      		push	dx		; preserve registers
 14534 00001928 51                      		push	cx
 14535 00001929 53                      		push	bx
 14536 0000192A 50                      		push	ax
 14537 0000192B 06                      		push	es		; stack the bds last
 14538 0000192C 57                      		push	di
 14539 0000192D 1E                      		push	ds		; point es to Bios_Data
 14540 0000192E 07                      		pop	es
 14541 0000192F BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14542 00001932 BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14543 00001935 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14544 00001938 F3A4                    		rep movsb
 14545 0000193A 5F                      		pop	di
 14546 0000193B 07                      		pop	es
 14547 0000193C 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14548                                  					; # of fats
 14549 00001940 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14550                                  					; sectors / fat
 14551 00001944 F6E1                    		mul	cl		; size taken by	fats
 14552 00001946 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14553                                  					; add on reserved sectors
 14554                                  					;
 14555                                  					; ax is	now sector # (0	based)
 14556                                  		; 17/10/2022
 14557 0000194A 2EA3[2519]              		mov	[cs:ROOTSEC], ax
 14558                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14559                                  					; 0070h:3EFFh =	2C7h:198Fh
 14560 0000194E 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14561                                  					; # root dir entries
 14562 00001952 B104                    		mov	cl, 4		; 16 entries/sector
 14563 00001954 D3E8                    		shr	ax, cl		; divide by 16
 14564 00001956 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14565                                  next_sec:				
 14566 00001958 51                      		push	cx		; save outer loop counter
 14567 00001959 2EA1[2519]              		mov	ax, [cs:ROOTSEC]
 14568                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14569                                  					; get sector #
 14570 0000195D 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14571                                  					; sectors / track
 14572 00001961 31D2                    		xor	dx, dx
 14573 00001963 F7F1                    		div	cx
 14574                                  
 14575                                  ; set up registers for call to read_sector
 14576                                  
 14577 00001965 42                      		inc	dx		; dx= sectors into track
 14578                                  					; ax= track count from 0
 14579 00001966 88D1                    		mov	cl, dl		; sector to read
 14580 00001968 31D2                    		xor	dx, dx
 14581 0000196A 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14582                                  					; # heads on this disc
 14583 0000196E 88D6                    		mov	dh, dl		; head number
 14584 00001970 88C5                    		mov	ch, al		; track	#
 14585 00001972 E802EE                  		call	read_sector	; get first sector of the root directory,
 14586                                  					; ds:bx	-> directory sector
 14587 00001975 7243                    		jb	short readviderr
 14588 00001977 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14589 0000197A B008                    		mov	al, 8		; volume label bit
 14590                                  fvid_loop:				
 14591 0000197C 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14592 0000197F 7436                    		jz	short no_vid	; yes, no vol id
 14593 00001981 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14594 00001984 7405                    		jz	short ent_loop	; yes, skip
 14595 00001986 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14596 00001989 7511                    		jnz	short found_vid	; jmp yes
 14597                                  ent_loop:				
 14598 0000198B 83C320                  		add	bx, 32		; add length of	directory entry
 14599 0000198E E2EC                    		loop	fvid_loop
 14600 00001990 59                      		pop	cx		; outer loop
 14601 00001991 2EFF06[2519]            		inc	word [cs:ROOTSEC]
 14602                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14603                                  					; next sector
 14604 00001996 E2C0                    		loop	next_sec	; continue
 14605                                  notfound:				
 14606 00001998 31F6                    		xor	si, si
 14607 0000199A EB16                    		jmp	short fvid_ret
 14608                                  ; ---------------------------------------------------------------------------
 14609                                  
 14610                                  found_vid:				
 14611 0000199C 59                      		pop	cx		; clean stack of outer loop counter
 14612 0000199D 89DE                    		mov	si, bx		; point	to volume_id
 14613 0000199F 06                      		push	es		; preserve current bds
 14614 000019A0 57                      		push	di
 14615 000019A1 1E                      		push	ds
 14616 000019A2 07                      		pop	es		; point es to Bios_Data
 14617 000019A3 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14618 000019A6 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14619                                  					; length of string minus nul
 14620 000019A9 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14621 000019AB 30C0                    		xor	al, al
 14622 000019AD AA                      		stosb			; null terminate
 14623 000019AE 31F6                    		xor	si, si
 14624 000019B0 5F                      		pop	di		; restore current bds
 14625 000019B1 07                      		pop	es
 14626                                  fvid_ret:				
 14627 000019B2 58                      		pop	ax
 14628                                  		; 10/12/2022
 14629                                  		; cf = 0
 14630                                  		;clc
 14631                                  rvidret:				
 14632 000019B3 5B                      		pop	bx		; restore registers
 14633 000019B4 59                      		pop	cx
 14634 000019B5 5A                      		pop	dx
 14635 000019B6 C3                      		retn
 14636                                  ; ---------------------------------------------------------------------------
 14637                                  
 14638                                  no_vid:					
 14639 000019B7 59                      		pop	cx		; clean stack of outer loop counter
 14640 000019B8 EBDE                    		jmp	short notfound	; not found
 14641                                  ; ---------------------------------------------------------------------------
 14642                                  
 14643                                  readviderr:				
 14644 000019BA 5E                      		pop	si		; trash the outer loop counter
 14645 000019BB 5E                      		pop	si		; caller's ax, return error code instead 
 14646 000019BC EBF5                    		jmp	short rvidret
 14647                                  
 14648                                  ; =============== S U B	R O U T	I N E =======================================
 14649                                  
 14650                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14651                                  ;
 14652                                  ; inputs:	es:di has current bds
 14653                                  ; outputs:	bds for drive has volume id from tmp
 14654                                  
 14655                                  transfer_volume_id:	
 14656 000019BE 57                      		push	di		; copy the volume id from tmp to special drive
 14657 000019BF 56                      		push	si
 14658 000019C0 51                      		push	cx
 14659 000019C1 BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14660                                  		;add	di, BDS.volid
 14661 000019C4 83C74B                  		add	di, 75		; BDS.volid
 14662                                  		;mov	cx, VOLID_SIZ
 14663 000019C7 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14664 000019CA FC                      		cld
 14665 000019CB F3A4                    		rep movsb
 14666 000019CD 59                      		pop	cx
 14667 000019CE 5E                      		pop	si
 14668 000019CF 5F                      		pop	di
 14669 000019D0 C3                      		retn
 14670                                  
 14671                                  ; =============== S U B	R O U T	I N E =======================================
 14672                                  
 14673                                  ;  check_volume_id - compare volume id in tmp area with
 14674                                  ;		     one expected for drive
 14675                                  ;
 14676                                  ;   inputs:	es:di has current bds for drive
 14677                                  ;   outputs:	zero true means it matched
 14678                                  
 14679                                  check_volume_id:	
 14680 000019D1 57                      		push	di
 14681 000019D2 51                      		push	cx
 14682 000019D3 BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14683                                  		;add	di, BDS.volid
 14684 000019D6 83C74B                  		add	di, 75		; BDS.volid
 14685                                  		;mov	cx, VOLID_SIZ
 14686 000019D9 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14687 000019DC FC                      		cld
 14688 000019DD F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14689 000019DF 59                      		pop	cx
 14690 000019E0 5F                      		pop	di
 14691 000019E1 C3                      		retn
 14692                                  
 14693                                  ; =============== S U B	R O U T	I N E =======================================
 14694                                  
 14695                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14696                                  ;	      - uses the fat id obtained from the boot sector.
 14697                                  ;
 14698                                  ;   inputs:	medbyt is expected fat id
 14699                                  ;		es:di points to current bds
 14700                                  ;
 14701                                  ;   output:	si = -1 if fat id different,
 14702                                  ;		si = 0 otherwise
 14703                                  ;
 14704                                  ;   no other registers changed.
 14705                                  
 14706                                  fat_check:		
 14707 000019E2 50                      		push	ax
 14708 000019E3 31F6                    		xor	si, si		; say fat id's are same.
 14709 000019E5 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14710 000019E8 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14711                                  					; compare it with the bds medbyte
 14712 000019EC 7401                    		jz	short okret1	; carry	clear
 14713 000019EE 4E                      		dec	si
 14714                                  okret1:					
 14715 000019EF 58                      		pop	ax
 14716 000019F0 C3                      		retn
 14717                                  
 14718                                  ; ---------------------------------------------------------------------------
 14719                                  
 14720                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14721                                  		;times 7 db 0
 14722                                  
 14723                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14724                                  
 14725                                  		; 09/12/2022
 14726                                  		;times 4 db 0	; 17/10/2022
 14727                                  		;db 4 dup(0)	; times 4 db 0
 14728                                  
 14729                                  ; ---------------------------------------------------------------------------
 14730                                  
 14731                                  		; 09/12/2022
 14732                                  		;db 0
 14733                                  
 14734                                  number2div	equ ($-BCode_start)
 14735                                  number2mod	equ (number2div % 16)
 14736                                  
 14737                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 14738 000019F1 00<rep Fh>              		times (16-number2mod) db 0
 14739                                  %endif
 14740                                  
 14741                                  ;align 16
 14742                                  
 14743                                  ; 09/12/2022
 14744                                  BCODE_END	equ $ - BCode_start
 14745                                  ; 29/09/2023
 14746                                  BCODEEND:
 14747                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14748                                  ; 13/12/2022
 14749                                  SYSINITOFFSET	equ BCODE_END
 14750                                  ; 29/09/2023
 14751                                  ;SYSINITOFFSET	equ $-$$
 14752                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14753                                  
 14754                                  ; 28/09/2023
 14755                                  S2SIZE equ $-$$
 14756                                  
 14757                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14758                                  
 14759                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14760                                  ; 01/05/2019 - Retro DOS v4.0 
 14761                                  ; ============================================================================
 14762                                  ; end of BIOSCODE
 14763                                  
 14764                                  ; ----------------------------------------------------------------------------
 14765                                  ; %include sysinit5.s	; 09/12/2022
 14766                                  ; ----------------------------------------------------------------------------
 14767                                  
 14768                                  ;=============================================================================
 14769                                  ; (IO.SYS) SYSINIT SEGMENT 
 14770                                  ;=============================================================================
 14771                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14772                                  
 14773                                  section .SYSINIT vstart=0
 14774                                  
 14775                                  ; ****************************************************************************
 14776                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14777                                  ; ----------------------------------------------------------------------------
 14778                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14779                                  ; ----------------------------------------------------------------------------
 14780                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14781                                  ; ----------------------------------------------------------------------------
 14782                                  ; Assembler: NASM version 2.15
 14783                                  ; ----------------------------------------------------------------------------
 14784                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14785                                  ; ----------------------------------------------------------------------------
 14786                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14787                                  ; ----------------------------------------------------------------------------
 14788                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14789                                  ; source code by Microsoft, 1991 
 14790                                  ; ----------------------------------------------------------------------------
 14791                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14792                                  ; by Microsoft, 12/10/1983
 14793                                  ; ****************************************************************************
 14794                                  ; main file: 'retrodos4.s'
 14795                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14796                                  
 14797                                  ; 21/10/2022
 14798                                  ; ----------------------------------------------------------------------------
 14799                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14800                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14801                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14802                                  ; ----------------------------------------------------------------------------
 14803                                  ; Binary file splitter & joiner: FFSJ v3.3
 14804                                  
 14805                                  ;--------------------------------------------------------------
 14806                                  ; SYSINIT.TXT (27/01/1983)
 14807                                  ;--------------------------------------------------------------
 14808                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14809                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14810                                  ;performed any  initialization  it  needs  to  do.   Control is
 14811                                  ;transfered with a long jump to the external  variable  SYSINIT
 14812                                  ;
 14813                                  ;
 14814                                  ;   The OEM  has  the  following  variables declared external:
 14815                                  ;
 14816                                  ;   CURRENT_DOS_LOCATION    WORD
 14817                                  ;
 14818                                  ;This word  contains  the  segment  number of the DOS before it
 14819                                  ;is relocated.  The OEM bios must set this value.
 14820                                  ;
 14821                                  ;   FINAL_DOS_LOCATION      WORD
 14822                                  ;
 14823                                  ;This word contains the segment number of the DOS after SYSINIT
 14824                                  ;moves it.  The OEM bios must set this value.
 14825                                  ;
 14826                                  ;   DEVICE_LIST             DWORD
 14827                                  ;
 14828                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14829                                  ;character and block device drivers.  The  OEM  must  set  this
 14830                                  ;value.
 14831                                  ;
 14832                                  ;   MEMORY_SIZE             WORD
 14833                                  ;
 14834                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14835                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14836                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14837                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14838                                  ;and read it back until it gets a mismatch.
 14839                                  ;
 14840                                  ;   DEFAULT_DRIVE           BYTE
 14841                                  ;
 14842                                  ;This is  the initial default drive when the system first comes
 14843                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14844                                  ;it then drive a is assumed.
 14845                                  ;
 14846                                  ;   BUFFERS                 BYTE
 14847                                  ;
 14848                                  ;This is  the  default  number of buffers for the system.  This
 14849                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14850                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14851                                  ;
 14852                                  ;   FILES                   BYTE
 14853                                  ;
 14854                                  ;This is  the  default  number  of  files for the system.  This
 14855                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14856                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14857                                  ;
 14858                                  ;   SYSINIT                 FAR
 14859                                  ;
 14860                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14861                                  ;this label at the end of its INIT code.
 14862                                  ;
 14863                                  ;   The OEM  has  the  following  variables declared public:
 14864                                  ;
 14865                                  ;   RE_INIT                 FAR
 14866                                  ;
 14867                                  ;This is an entry point which allows the BIOS to do some INIT
 14868                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14869                                  ;PRESERVED.  On entry DS points to the first available memory
 14870                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14871                                  ;prefix which represents  the  "program"  currently  running.
 14872                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14873                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14874                                  ;that  no  memory  is  allocated to it, it is running in free
 14875                                  ;memory.
 14876                                  ;NOTES:
 14877                                  ;     At the time this routine is called SYSINIT occupies the
 14878                                  ;highest 10K of memory ("highest" is determined by the  value
 14879                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14880                                  ;     Since this is called AFTER DOS is initialized, you can
 14881                                  ;make system calls.  This also implies that the code for this
 14882                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14883                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14884                                  ;     If you don't want  anything done just set this to point
 14885                                  ;at a FAR RET instruction.
 14886                                  
 14887                                  ; ----------------------------------------------------------------------
 14888                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14889                                  ; ----------------------------------------------------------------------
 14890                                  
 14891                                  ;include version.inc
 14892                                  ; ----------------------------------------------------------------------
 14893                                  
 14894                                  ;FALSE   EQU     0
 14895                                  ;TRUE    EQU     0FFFFh
 14896                                  
 14897                                  ;IBMVER	    EQU     TRUE
 14898                                  ;IBMCOPYRIGHT EQU   FALSE
 14899                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14900                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14901                                  ;MSVER      EQU     FALSE
 14902                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14903                                  ;KANJI      EQU     FALSE
 14904                                  
 14905                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14906                                  ; ----------------------------------------------------------------------
 14907                                  ;MAJOR_VERSION  EQU	6
 14908                                  ;;MINOR_VERSION	EQU	0	;6.00
 14909                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14910                                  
 14911                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14912                                  ; ----------------------------------------------------------------------
 14913                                  MAJOR_VERSION   EQU	5
 14914                                  MINOR_VERSION   EQU	0
 14915                                  
 14916                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14917                                  
 14918                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14919                                  				; currently 0.
 14920                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14921                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14922                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14923                                  
 14924                                  ;      if1
 14925                                  ;      %OUT  ... for DOS Version 5.00 ...
 14926                                  ;      endif
 14927                                  
 14928                                         ;******************************
 14929                                         ;Each assembler program should:
 14930                                         ;  mov ah,030h                   ;DOS Get Version function
 14931                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14932                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14933                                         ;  jne error_handler             ; EXACT version match.
 14934                                         ;******************************
 14935                                  
 14936                                  ; ----------------------------------------------------------------------
 14937                                  ; device definitions
 14938                                  
 14939                                  ;Attribute bit masks
 14940                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14941                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14942                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14943                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14944                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14945                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14946                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14947                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14948                                  
 14949                                  ; The device table list has the form:
 14950                                  struc	SYSDEV
 14951 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14952 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14953 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14954 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14955 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14956                                  .size:
 14957                                  endstruc
 14958                                  
 14959                                  ;Static Reguest Header
 14960                                  struc	SRHEAD
 14961 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14962 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14963 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14964 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14965 00000005 ????????????????                	resb 8		;Reserved for queue links
 14966                                  .size:
 14967                                  endstruc
 14968                                  
 14969                                  ;Status word masks
 14970                                  STERR   EQU     8000H           ;Bit 15 - Error
 14971                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14972                                  STDON   EQU     0100H           ;Bit 8 - Done
 14973                                  STECODE EQU     00FFH           ;Error code
 14974                                  WRECODE EQU     0
 14975                                  
 14976                                  ;Function codes
 14977                                  DEVINIT EQU     0               ;Initialization
 14978                                  DINITHL EQU     26              ;Size of init header
 14979                                  DEVMDCH EQU     1               ;Media check
 14980                                  DMEDHL  EQU     15              ;Size of media check header
 14981                                  DEVBPB  EQU     2               ;Get BPB
 14982                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14983                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14984                                  DEVRD   EQU     4               ;Read
 14985                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14986                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14987                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14988                                  DEVIST  EQU     6               ;Input status
 14989                                  DSTATHL EQU     13              ;Size of status header
 14990                                  DEVIFL  EQU     7               ;Input flush
 14991                                  DFLSHL  EQU     15              ;Size of flush header
 14992                                  DEVWRT  EQU     8               ;Write
 14993                                  DEVWRTV EQU     9               ;Write with verify
 14994                                  DEVOST  EQU     10              ;Output status
 14995                                  DEVOFL  EQU     11              ;Output flush
 14996                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14997                                  
 14998                                  ; ----------------------------------------------------------------------
 14999                                  struc	SYS_FCB
 15000 00000000 ??                      .fcb_drive:	resb 1
 15001 00000001 ????????????????        .fcb_name:	resb 8
 15002 00000009 ??????                  .fcb_ext:	resb 3
 15003 0000000C ????                    .fcb_EXTENT:	resw 1
 15004 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15005 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15006                                                          ; word
 15007 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15008 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15009 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15010 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15011                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15012                                                          ; If file, bit 6=0 if dirty
 15013                                                          ; If I/O device, bit 6=0 if EOF (input)
 15014                                                          ;               Bit 5=1 if Raw mode
 15015                                                          ;               Bit 0=1 if console input device
 15016                                                          ;               Bit 1=1 if console output device
 15017                                                          ;               Bit 2=1 if null device
 15018                                                          ;               Bit 3=1 if clock device
 15019 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15020 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15021 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15022 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15023 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15024 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15025                                  .size:
 15026                                  endstruc
 15027                                  
 15028                                  ; ----------------------------------------------------------------------
 15029                                  ; Field definition for I/O buffer information
 15030                                  
 15031                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15032                                  
 15033                                  struc buffinfo
 15034 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15035 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15036 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15037                                  			; SFT table index (bit 7 = 1)
 15038                                  			; = FFh if buffer free
 15039 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15040                                  			;	= 0 if Local device buffer
 15041                                  			; Bit 6 = 1 if buffer dirty
 15042                                  			; Bit 5 = Reserved
 15043                                  			; Bit 4 = Search bit (bit 7 = 1)
 15044                                  			; Bit 3 = 1 if buffer is DATA
 15045                                  			; Bit 2 = 1 if buffer is DIR
 15046                                  			; Bit 1 = 1 if buffer is FAT
 15047                                  			; Bit 0 = Reserved
 15048 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15049                                  ; The next two items are often refed as a word (bit 7 = 0)
 15050 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15051 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15052 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15053 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15054 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15055                                  .size:
 15056                                  endstruc
 15057                                  
 15058                                  %define buf_offset	dword [buf_sector]
 15059                                  			;For bit 7 = 1, this is the byte
 15060                                  			;offset of the start of the buffer in
 15061                                  			;the file pointed to by buf_ID.  Thus
 15062                                  			;the buffer starts at location
 15063                                  			;buf_offset in the file and contains
 15064                                  			;buf_fill bytes.
 15065                                  
 15066                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15067                                  
 15068                                  
 15069                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15070                                  
 15071                                  ;Flag byte masks
 15072                                  buf_isnet	EQU	10000000B
 15073                                  buf_dirty	EQU	01000000B
 15074                                  ;***
 15075                                  buf_visit	EQU	00100000B
 15076                                  ;***
 15077                                  buf_snbuf	EQU	00010000B
 15078                                  
 15079                                  buf_isDATA	EQU	00001000B
 15080                                  buf_isDIR	EQU	00000100B
 15081                                  buf_isFAT	EQU	00000010B
 15082                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15083                                  
 15084                                  buf_NetID	EQU	bufinsiz
 15085                                  
 15086                                  ; ----------------------------------------------------------------------
 15087                                  
 15088                                  ; ----------------------------------------------------------------------
 15089                                  ;**	DPB - Drive Parameter Block
 15090                                  
 15091                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15092                                  
 15093                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15094                                  ;	possibly inaccurate deductions from code study... - jgl
 15095                                  ;
 15096                                  ;	The DPB is DOS's main structure for describing block devices.
 15097                                  ;	It contains info about the "Drive" intermingled with info about
 15098                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15099                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15100                                  ;
 15101                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15102                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15103                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15104                                  
 15105                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15106                                  
 15107                                  ; 12/05/2019 - Retro DOS v4.0
 15108                                  
 15109                                  struc	DPB
 15110 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15111 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15112 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15113 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15114 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15115 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15116 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15117 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15118 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15119 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15120                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15121 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15122 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15123 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15124 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15125 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15126                                  				; check the first time this DPB is used
 15127 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15128 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15129 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15130                                  .size:
 15131                                  endstruc
 15132                                  
 15133                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15134                                  
 15135                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15136                                  
 15137                                  ; ----------------------------------------------------------------------
 15138                                  ; 26/03/2018
 15139                                  
 15140                                  ; IOCTL SUB-FUNCTIONS
 15141                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15142                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15143                                  IOCTL_READ_HANDLE	EQU	2
 15144                                  IOCTL_WRITE_HANDLE	EQU	3
 15145                                  IOCTL_READ_DRIVE	EQU	4
 15146                                  IOCTL_WRITE_DRIVE	EQU	5
 15147                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15148                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15149                                  IOCTL_CHANGEABLE?	EQU	8
 15150                                  IOCTL_SHARING_RETRY	EQU	11
 15151                                  GENERIC_IOCTL_HANDLE	EQU	12
 15152                                  GENERIC_IOCTL		EQU	13
 15153                                  
 15154                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15155                                  RAWIO			EQU	8
 15156                                  
 15157                                  ; RAWIO SUB-FUNCTIONS
 15158                                  GET_DEVICE_PARAMETERS	EQU	60H
 15159                                  SET_DEVICE_PARAMETERS	EQU	40H
 15160                                  READ_TRACK		EQU	61H
 15161                                  WRITE_TRACK		EQU	41H
 15162                                  VERIFY_TRACK		EQU	62H
 15163                                  FORMAT_TRACK		EQU	42H
 15164                                  
 15165                                  ; DEVICETYPE VALUES
 15166                                  MAX_SECTORS_IN_TRACK	EQU	63
 15167                                  DEV_5INCH		EQU	0
 15168                                  DEV_5INCH96TPI		EQU	1
 15169                                  DEV_3INCH720KB		EQU	2
 15170                                  DEV_8INCHSS		EQU	3
 15171                                  DEV_8INCHDS		EQU	4
 15172                                  DEV_HARDDISK		EQU	5
 15173                                  DEV_OTHER		EQU	7
 15174                                  ;DEV_3INCH1440KB	EQU	7
 15175                                  DEV_3INCH2880KB		EQU	9
 15176                                  ; Retro DOS v2.0 - 26/03/2018
 15177                                  ;;DEV_TAPE		EQU	6
 15178                                  ;;DEV_ERIMO		EQU	8
 15179                                  ;DEV_3INCH2880KB	EQU	9
 15180                                  DEV_3INCH1440KB		EQU	10
 15181                                  
 15182                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15183                                  					; CURRENTLY SUPPORT.
 15184                                  MAX_DEV_TYPE		EQU	10
 15185                                  
 15186                                  struc A_SECTORTABLE
 15187 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15188 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15189                                  .size:
 15190                                  endstruc
 15191                                  
 15192                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15193                                  
 15194                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15195                                  ;
 15196                                  ;	The BPB contains information about the disk structure.  It dates
 15197                                  ;	back to the earliest FAT systems and so FAT information is
 15198                                  ;	intermingled with physical driver information.
 15199                                  ;
 15200                                  ;	A boot sector contains a BPB for its device; for other disks
 15201                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15202                                  ;	information in the DPB.
 15203                                  ;
 15204                                  ;	The BDS structure contains a BPB within it.
 15205                                  
 15206                                  struc A_BPB
 15207 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15208 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15209 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15210 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15211 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15212 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15213 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15214 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15215 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15216 0000000F ????                    .BPB_HEADS:		resw	1
 15217 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15218 00000013 ????                    			resw	1
 15219 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15220 00000017 ????                    			resw	1
 15221 00000019 ????????????            			resb	6	; NOTE:  many times these
 15222                                  ;					; 	 6 bytes are omitted
 15223                                  ;					;	 when BPB manipulations
 15224                                  ;					;	 are performed!
 15225                                  .size:
 15226                                  endstruc
 15227                                  
 15228                                  struc A_DEVICEPARAMETERS
 15229 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15230 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15231 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15232 00000004 ????                    .DP_CYLINDERS:		resw	1
 15233 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15234 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15235 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15236 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15237                                  endstruc
 15238                                  
 15239                                  ; ----------------------------------------------------------------------
 15240                                  ; structure, equates for devmark for mem command.
 15241                                  
 15242                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15243                                  
 15244                                  struc devmark
 15245 00000000 ??                       .id:	    resb 1
 15246 00000001 ????                     .seg:	    resw 1
 15247 00000003 ????                     .size:	    resw 1
 15248 00000005 ??????                   .dum:	    resb 3
 15249 00000008 ????????????????         .filename: resb 8
 15250                                  endstruc
 15251                                  
 15252                                  devmark_stk	equ	'S'
 15253                                  devmark_device	equ	'D'
 15254                                  devmark_ifs	equ	'I'
 15255                                  devmark_buf	equ	'B'
 15256                                  devmark_cds	equ	'L' ; lastdrive
 15257                                  devmark_files	equ	'F'
 15258                                  devmark_fcbs	equ	'X'
 15259                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15260                                  devmark_ems_stub equ	'E'
 15261                                  
 15262                                  setbrkdone	equ	00000001b
 15263                                  for_devmark	equ	00000010b
 15264                                  not_for_devmark equ	11111101b
 15265                                  
 15266                                  ; ----------------------------------------------------------------------
 15267                                  ; Memory arena structure
 15268                                  
 15269                                  ; 24/03/2019 - Retro DOS v4.0 
 15270                                  ; (MSDOS 6.0, ARENA.INC)
 15271                                  
 15272                                  ;** Arena Header
 15273                                  
 15274                                  struc ARENA
 15275 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15276 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15277 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15278 00000005 ??????                  .RESERVED	resb 3		; reserved
 15279 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15280                                  endstruc
 15281                                  
 15282                                  ; 12/04/2019
 15283                                  
 15284                                  arena_owner_system	EQU 0	; free block indication
 15285                                  
 15286                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15287                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15288                                  
 15289                                  ; ----------------------------------------------------------------------
 15290                                  ; Process data block (otherwise known as program header)
 15291                                  
 15292                                  ; 23/03/2019 - Retro DOS v4.0
 15293                                  
 15294                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15295                                  
 15296                                  FILPERPROC	EQU     20
 15297                                  
 15298                                  struc PDB	; Process_data_block
 15299 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15300 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15301 00000004 ??                                      resb 1
 15302 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15303 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15304 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15305 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15306 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15307 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15308 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15309 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15310 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15311 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15312 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15313 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15314 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15315 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15316 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15317 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15318 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15319 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15320 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15321 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15322 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15323 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15324                                  ;.size:
 15325                                  endstruc
 15326                                  
 15327                                  ; ----------------------------------------------------------------------
 15328                                  ; <system call definitions>
 15329                                  
 15330                                  ; 23/03/2019 - Retro DOS v4.0
 15331                                  
 15332                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15333                                  
 15334                                  ABORT                           EQU 0   ;  0      0
 15335                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15336                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15337                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15338                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15339                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15340                                  RAW_CON_IO                      EQU 6   ;  6      6
 15341                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15342                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15343                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15344                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15345                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15346                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15347                                  DISK_RESET                      EQU 13  ; 13      D
 15348                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15349                                  FCB_OPEN                        EQU 15  ; 15      F
 15350                                  FCB_CLOSE                       EQU 16  ; 16     10
 15351                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15352                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15353                                  FCB_DELETE                      EQU 19  ; 19     13
 15354                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15355                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15356                                  FCB_CREATE                      EQU 22  ; 22     16
 15357                                  FCB_RENAME                      EQU 23  ; 23     17
 15358                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15359                                  SET_DMA                         EQU 26  ; 26     1A
 15360                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15361                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15362                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15363                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15364                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15365                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15366                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15367                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15368                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15369                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15370                                  GET_DATE                        EQU 42  ; 42     2A
 15371                                  SET_DATE                        EQU 43  ; 43     2B
 15372                                  GET_TIME                        EQU 44  ; 44     2C
 15373                                  SET_TIME                        EQU 45  ; 45     2D
 15374                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15375                                  ; Extended functionality group
 15376                                  GET_DMA                         EQU 47  ; 47     2F
 15377                                  GET_VERSION                     EQU 48  ; 48     30
 15378                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15379                                  GET_DPB                         EQU 50  ; 50     32
 15380                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15381                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15382                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15383                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15384                                  CHAR_OPER                       EQU 55  ; 55     37
 15385                                  INTERNATIONAL                   EQU 56  ; 56     38
 15386                                  ;   Directory Group
 15387                                  MKDIR                           EQU 57  ; 57     39
 15388                                  RMDIR                           EQU 58  ; 58     3A
 15389                                  CHDIR                           EQU 59  ; 59     3B
 15390                                  ;   File Group
 15391                                  CREAT                           EQU 60  ; 60     3C
 15392                                  OPEN                            EQU 61  ; 61     3D
 15393                                  CLOSE                           EQU 62  ; 62     3E
 15394                                  READ                            EQU 63  ; 63     3F
 15395                                  WRITE                           EQU 64  ; 64     40
 15396                                  UNLINK                          EQU 65  ; 65     41
 15397                                  LSEEK                           EQU 66  ; 66     42
 15398                                  CHMOD                           EQU 67  ; 67     43
 15399                                  IOCTL                           EQU 68  ; 68     44
 15400                                  XDUP                            EQU 69  ; 69     45
 15401                                  XDUP2                           EQU 70  ; 70     46
 15402                                  CURRENT_DIR                     EQU 71  ; 71     47
 15403                                  ;    Memory Group
 15404                                  ALLOC                           EQU 72  ; 72     48
 15405                                  DEALLOC                         EQU 73  ; 73     49
 15406                                  SETBLOCK                        EQU 74  ; 74     4A
 15407                                  ;    Process Group
 15408                                  EXEC                            EQU 75  ; 75     4B
 15409                                  EXIT                            EQU 76  ; 76     4C
 15410                                  WAITPROCESS			EQU 77  ; 77     4D
 15411                                  FIND_FIRST                      EQU 78  ; 78     4E
 15412                                  ;   Special Group
 15413                                  FIND_NEXT                       EQU 79  ; 79     4F
 15414                                  ; SPECIAL SYSTEM GROUP
 15415                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15416                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15417                                  GET_IN_VARS                     EQU 82  ; 82     52
 15418                                  SETDPB                          EQU 83  ; 83     53
 15419                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15420                                  DUP_PDB                         EQU 85  ; 85     55
 15421                                  RENAME                          EQU 86  ; 86     56
 15422                                  FILE_TIMES                      EQU 87  ; 87     57
 15423                                  ;
 15424                                  ALLOCOPER			EQU 88	; 88     58	
 15425                                  ; Network extention system calls
 15426                                  GetExtendedError		EQU 89	; 89	 59
 15427                                  CreateTempFile			EQU 90	; 90	 5A
 15428                                  CreateNewFile			EQU 91	; 91	 5B
 15429                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15430                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15431                                  					;	    CloseByName, CloseUser,
 15432                                  					;	    CloseUserProcess,
 15433                                  					;	    GetOpenFileList
 15434                                  UserOper			EQU 94	; 94	 5E Get and Set
 15435                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15436                                  xNameTrans			EQU 96	; 96	 60
 15437                                  PathParse			EQU 97	; 97	 61
 15438                                  GetCurrentPSP			EQU 98	; 98	 62
 15439                                  Hongeul 			EQU 99	; 99	 63
 15440                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15441                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15442                                  GetExtCntry			EQU 101 ; 101	 65
 15443                                  GetSetCdPg			EQU 102 ; 102	 66
 15444                                  ExtHandle			EQU 103 ; 103	 67
 15445                                  Commit				EQU 104 ; 104	 68
 15446                                  GetSetMediaID			EQU 105 ; 105	 69
 15447                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15448                                  ExtOpen 			EQU 108 ; 108	 6C
 15449                                  ;
 15450                                  ;ifdef ROMEXEC
 15451                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15452                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15453                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15454                                  ;endif
 15455                                  ;
 15456                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15457                                  OEM_C1				EQU 249 ; 249	 F9
 15458                                  OEM_C2				EQU 250 ; 250	 FA
 15459                                  OEM_C3				EQU 251 ; 251	 FB
 15460                                  OEM_C4				EQU 252 ; 252	 FC
 15461                                  OEM_C5				EQU 253 ; 253	 FD
 15462                                  OEM_C6				EQU 254 ; 254	 FE
 15463                                  OEM_C7				EQU 255 ; 255	 FF
 15464                                  
 15465                                  ; ----------------------------------------------------------------------
 15466                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15467                                  ; ----------------------------------------------------------------------
 15468                                  
 15469                                  ;;	IF	STACKSW
 15470                                  
 15471                                  ;;
 15472                                  ;; Internal Stack Parameters
 15473                                  ;EntrySize		equ	8
 15474                                  ;
 15475                                  ;MinCount		equ	8
 15476                                  ;DefaultCount		equ	9
 15477                                  ;MaxCount		equ	64
 15478                                  ;
 15479                                  ;MinSize 		equ	32
 15480                                  ;DefaultSize		equ	128
 15481                                  ;MaxSize 		equ	512
 15482                                  
 15483                                  ;;	ENDIF
 15484                                  
 15485                                  ; ----------------------------------------------------------------------
 15486                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15487                                  ; ----------------------------------------------------------------------
 15488                                  					  ;;Rev 3.30 Modification
 15489                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15490                                  									  
 15491                                  ;*******************************					  
 15492                                  ;System Service call ( Int 15h )					  
 15493                                  ;*******************************					  
 15494                                  ;Function AH = 0C0h, Return system configuration			  
 15495                                  ;For PC and PCJR on return:						  
 15496                                  ;	(AH)	= 80h							  
 15497                                  ;	(CY)	= 1							  
 15498                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15499                                  ;	(AH)	= 86h							  
 15500                                  ;	(CY)	= 1							  
 15501                                  ;For all others:							  
 15502                                  ;	(AH)	= 0							  
 15503                                  ;	(CY)	= 0							  
 15504                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15505                                  ; System descriptor :							  
 15506                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15507                                  ;				minimum length = 8			  
 15508                                  ;	DB	xx		model byte				  
 15509                                  ;				0FFh	= PC				  
 15510                                  ;				0FEh	= PC/XT, Portable		  
 15511                                  ;				0FDh	= PC/JR 			  
 15512                                  ;				0FCh	= PC/AT				  
 15513                                  ;				0F9h	= Convertable			  
 15514                                  ;				0F8h	= Model 80			  
 15515                                  ;				0E0 thru 0EFh = reserved		  
 15516                                  ;									  
 15517                                  ;	DB	xx		secondary model byte			  
 15518                                  ;				000h	= PC1				  
 15519                                  ;				000h	= PC/XT, Portable		  
 15520                                  ;				000h	= PC/JR 			  
 15521                                  ;				000h	= PC/AT 			  
 15522                                  ;				001h	= PC/AT Model 339		  
 15523                                  ;				003h	= PC/RT				  
 15524                                  ;				000h	= Convertable			  
 15525                                  ;									  
 15526                                  ;	DB	xx		bios revision level			  
 15527                                  ;				00 for first release, subsequent release  
 15528                                  ;				of code with same model byte and	  
 15529                                  ;				secondary model byte require revison level
 15530                                  ;				to increase by one.			  
 15531                                  ;									  
 15532                                  ;	DB	xx		feature information byte 1		  
 15533                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15534                                  ;					 = 0, DMA channel 3 not used	  
 15535                                  ;									  
 15536                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15537                                  ;					 = 0, 2nd Interrupt chip not present
 15538                                  ;									  
 15539                                  ;				00X00000 = 1, Real Time Clock present	  
 15540                                  ;					 = 0, Real Time Clock not present 
 15541                                  ;									  
 15542                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15543                                  ;						called in keyboard interrupt
 15544                                  ;						(Int 09h).		  
 15545                                  ;					 = 0, Keyboard escape sequence not
 15546                                  ;						called. 		  
 15547                                  ;				0000XXXX reserved			  
 15548                                  ;									  
 15549                                  ;	DB	xx		feature information byte 2 - reserved	  
 15550                                  ;									  
 15551                                  ;	DB	xx		feature information byte 2 - reserved	  
 15552                                  ;									  
 15553                                  ;	DB	xx		feature information byte 2 - reserved	  
 15554                                  ;									  
 15555                                  ;	DB	xx		feature information byte 2 - reserved	  
 15556                                  ;									  
 15557                                  
 15558                                  ; 22/03/2019									  
 15559                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15560 00000000 ????                    .bios_sd_leng:		resw 1				  
 15561 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15562                                  .bios_sd_scnd_modelbyte: 
 15563 00000003 ??                      			resb 1					  
 15564 00000004 ??                      			resb 1					  
 15565 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15566 00000006 ????????                			resb 4					  
 15567                                  endstruc					  
 15568                                  									  
 15569                                  ;FeatureByte1	bit map equates 					  
 15570                                  DMAchannel3		equ 10000000b					  
 15571                                  ScndIntController	equ 01000000b					  
 15572                                  RealTimeClock		equ 00100000b					  
 15573                                  KeyEscapeSeq		equ 00010000b					  
 15574                                  					;;End of Modification
 15575                                  
 15576                                  ; ----------------------------------------------------------------------
 15577                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15578                                  ; ----------------------------------------------------------------------
 15579                                  ; 22/03/2019 - Retro DOS v4.0
 15580                                  
 15581                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15582                                  
 15583                                  struc SysInitVars
 15584                                  ; MSDOS 3.3
 15585 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15586 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15587 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15588 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15589 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15590 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15591 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15592 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15593 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15594 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15595 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15596 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15597                                  ; MSDOS 6.0
 15598 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15599 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15600 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15601 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15602                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15603 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15604 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15605 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15606 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15607 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15608 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15609 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15610                                  .size:
 15611                                  endstruc
 15612                                  
 15613                                  ;This is added for more information exchage between DOS, BIOS.
 15614                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15615                                  
 15616                                  ; 22/03/2019
 15617                                  struc SysInitVars_Ext
 15618 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15619 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15620                                  endstruc
 15621                                  
 15622                                  ; 09/06/2018
 15623                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15624                                  SYSI_DPB    equ	0
 15625                                  SYSI_SFT    equ 4
 15626                                  SYSI_CLOCK  equ 8
 15627                                  SYSI_CON    equ 12
 15628                                  SYSI_MAXSEC equ 16
 15629                                  SYSI_BUF    equ 18 		
 15630                                  SYSI_CDS    equ 22
 15631                                  SYSI_FCB    equ 26
 15632                                  SYSI_KEEP   equ 30
 15633                                  SYSI_NUMIO  equ	32
 15634                                  SYSI_NCDS   equ	33
 15635                                  SYSI_DEV    equ 34
 15636                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15637                                  SYSI_ATTR	  equ 38
 15638                                  SYSI_STRAT	  equ 40
 15639                                  SYSI_INTER	  equ 42
 15640                                  SYSI_NAME	  equ 44
 15641                                  SYSI_SPLICE	  equ 52
 15642                                  SYSI_IBMDOS_SIZE  equ 53
 15643                                  SYSI_IFS_DOSCALL@ equ 55
 15644                                  SYSI_IFS	  equ 59
 15645                                  SYSI_BUFFERS	  equ 63
 15646                                  SYSI_BOOT_DRIVE   equ 67
 15647                                  SYSI_DWMOVE	  equ 68
 15648                                  SYSI_EXT_MEM	  equ 69
 15649                                  
 15650                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15651                                  
 15652                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15653                                  
 15654                                  struc BUFFINF 	; BUFFINFO
 15655 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15656 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15657 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15658 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15659                                  
 15660 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15661                                  				; are in HMA
 15662 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15663                                  				;  used to read/write on disks
 15664 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15665 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15666 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15667 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15668 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15669 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15670 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15671 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15672 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15673                                  .size:
 15674                                  endstruc
 15675                                  
 15676                                  ; ----------------------------------------------------------------------
 15677                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15678                                  ; ----------------------------------------------------------------------
 15679                                  ; 22/03/2019 - Retro DOS v4.0
 15680                                  
 15681                                  ;**	CDS - Current Directory Structure
 15682                                  ;
 15683                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15684                                  ; network identifiers for each logical name.  The ID field is used dually,
 15685                                  ; both as net ID and for a cluster number for local devices. In the case
 15686                                  ; of local devices, the cluster number will be -1 if there is a potential
 15687                                  ; of the disk being changed or if the path must be recracked.
 15688                                  ;
 15689                                  ;	Some pathnames have special preambles, such as
 15690                                  ;
 15691                                  ;		\\machine\sharename\...
 15692                                  ;	For these pathnames we can't allow ".." processing to back us
 15693                                  ;	up into the special front part of the name.  The CURDIR_END field
 15694                                  ;	holds the address of the seperator character which marks
 15695                                  ;	the split between the special preamble and the regular
 15696                                  ;	path list; ".." processing isn't allowed to back us up past
 15697                                  ;	(i.e., before) CURDIR_END
 15698                                  ;	For the root, it points at the leading /. For net
 15699                                  ;	assignments it points at the end (nul) of the initial assignment:
 15700                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15701                                  ;	  ^		 ^		     ^
 15702                                  
 15703                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15704                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15705                                  
 15706                                  struc 		curdir_list
 15707                                  ; MSDOS 3.3
 15708 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15709 00000043 ????                    .cdir_flags	resw	1		; various flags
 15710 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15711 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15712 0000004D ????                    .cdir_usr_word	resw	1
 15713 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15714                                  ; MSDOS 6.0
 15715 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15716 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15717 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15718                                  .size:
 15719                                  endstruc
 15720                                  
 15721                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15722                                  						; ASM87 which doesn't allow
 15723                                  						; Size directive as a macro
 15724                                  						; argument
 15725                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15726                                  
 15727                                  ;**	Flag values for CURDIR_FLAGS
 15728                                  
 15729                                  ;Flag word masks
 15730                                  curdir_isnet	EQU	1000000000000000B
 15731                                  curdir_isifs	EQU	1000000000000000B
 15732                                  curdir_inuse	EQU	0100000000000000B
 15733                                  curdir_splice	EQU	0010000000000000B
 15734                                  curdir_local	EQU	0001000000000000B
 15735                                  
 15736                                  ; ----------------------------------------------------------------------
 15737                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15738                                  ; ----------------------------------------------------------------------
 15739                                  ; 25/03/2019 - Retro DOS v4.0
 15740                                  
 15741                                  ; system file table
 15742                                  
 15743                                  ;**	System File Table SuperStructure
 15744                                  ;
 15745                                  ;	The system file table entries are allocated in contiguous groups.
 15746                                  ;	There may be more than one such groups; the SF "superstructure"
 15747                                  ;	tracks the groups.
 15748                                  
 15749                                  struc	SF
 15750 00000000 ????????                .SFLink:	resd	1
 15751 00000004 ????                    .SFCount:	resw	1		; number of entries
 15752 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15753                                  .size:
 15754                                  endstruc
 15755                                  
 15756                                  ;**	System file table entry
 15757                                  ;
 15758                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15759                                  
 15760                                  struc	SF_ENTRY
 15761 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15762                                  					;   if FCB then ref count
 15763 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15764 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15765 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15766                                  					; Bit 15 = 1 if remote file
 15767                                  					;	 = 0 if local file or device
 15768                                  					; Bit 14 = 1 if date/time is not to be
 15769                                  					;   set from clock at CLOSE.  Set by
 15770                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15771                                  					;   other reseters of the dirty bit
 15772                                  					;   (WRITE)
 15773                                  					; Bit 13 = Pipe bit (reserved)
 15774                                  					;
 15775                                  					; Bits 0-7 (old FCB_devid bits)
 15776                                  					; If remote file or local file, bit
 15777                                  					; 6=0 if dirty Device ID number, bits
 15778                                  					; 0-5 if local file.
 15779                                  					; bit 7=0 for local file, bit 7
 15780                                  					;      =1 for local I/O device
 15781                                  					; If local I/O device, bit 6=0 if EOF (input)
 15782                                  					;		Bit 5=1 if Raw mode
 15783                                  					;		Bit 0=1 if console input device
 15784                                  					;		Bit 1=1 if console output device
 15785                                  					;		Bit 2=1 if null device
 15786                                  					;		Bit 3=1 if clock device
 15787 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15788                                  					; to device header if local device,
 15789                                  					; points to net device header if
 15790                                  					; remote
 15791 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15792                                  ;.sf_lstclus:	resw	1 ; *	
 15793 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15794 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15795 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15796 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15797                                  ;
 15798                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15799                                  ; ID
 15800                                  ;
 15801 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15802 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15803 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15804                                  ;
 15805                                  ; End of 7 bytes of file-system specific info.
 15806                                  ;
 15807 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15808                                  					; directory entry.  This is used by
 15809                                  					; close to detect file deleted and
 15810                                  					; disk changed errors.
 15811                                  ; SHARING INFO
 15812 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15813 0000002D ????                    .sf_UID:	resw	1
 15814 0000002F ????                    .sf_PID:	resw	1
 15815 00000031 ????                    .sf_MFT:	resw	1
 15816 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15817 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15818                                  .size:
 15819                                  endstruc
 15820                                  
 15821                                  ; ----------------------------------------------------------------------
 15822                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15823                                  ; ----------------------------------------------------------------------
 15824                                  ; 11/06/2018 - Retro DOS v3.0
 15825                                  
 15826                                  ;Equates for COUNTRY INFORMATION.
 15827                                  SetCountryInfo		EQU	1	;country info
 15828                                  SetUcase		EQU	2	;uppercase table
 15829                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15830                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15831                                  SetFileList		EQU	5	;valid file character list
 15832                                  SetCollate		EQU	6	;collating sequence
 15833                                  SetDBCS 		EQU	7	;double byte character set
 15834                                  SetALL			EQU	-1	;all the entries
 15835                                  
 15836                                  ;DOS country and code page information table structure.
 15837                                  ;Internally, IBMDOS gives a pointer to this table.
 15838                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15839                                  ;this structure.
 15840                                  
 15841                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15842 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15843 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15844 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15845 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15846 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15847 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15848                                  
 15849 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15850 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15851                                  
 15852 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15853 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15854                                  
 15855 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15856 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15857                                  
 15858 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15859 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15860 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15861 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15862 00000067 ????                    .ccDFormat:		resw	1	;date format
 15863 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15864                                  					;5 byte of (currency symbol+0)
 15865 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15866 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15867 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15868 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15869 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15870 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15871 00000078 ??                      .ccTFormat:		resb	1	;time format
 15872 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15873 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15874 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15875                                  .size:
 15876                                  endstruc
 15877                                  
 15878                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15879                                  
 15880                                  ; ======================================================================
 15881                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15882                                  ; ======================================================================
 15883                                  ; 21/03/2019 - Retro DOS v4.0
 15884                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15885                                  
 15886                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15887                                  ; 21/10/2022
 15888                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15889                                  ; 22/10/2022
 15890                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15891                                  ; 09/12/2022
 15892                                  DOSBIOCODESEG equ IOSYSCODESEG
 15893                                  
 15894                                  ; Note: These offset addresses must be chanqed when the code 
 15895                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15896                                  
 15897                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15898                                  
 15899                                  ; 09/12/2022
 15900                                  %if 0
 15901                                  
 15902                                  ; 13/05/2019
 15903                                  
 15904                                  ;IsWin386         equ 08CFh
 15905                                  ;V86_Crit_SetFocus equ 08D0h
 15906                                  ; 21/10/2022
 15907                                  IsWin386          equ 08D0h
 15908                                  V86_Crit_SetFocus equ 08D1h 
 15909                                  
 15910                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15911                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15912                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15913                                  
 15914                                  ;SysinitPresent	  equ 08FCh
 15915                                  ; 21/10/2022
 15916                                  SysinitPresent	  equ 08FDh
 15917                                  
 15918                                  inHMA		  equ 000Dh
 15919                                  xms		  equ 000Eh
 15920                                  ;FreeHMAPtr	  equ 08F6h
 15921                                  ;multrk_flag	  equ 0533h
 15922                                  ;ec35_flag	  equ 0535h
 15923                                  ;EOT		  equ 012Eh
 15924                                  ; 21/10/2022
 15925                                  FreeHMAPtr	  equ 08F7h
 15926                                  multrk_flag	  equ 052Fh
 15927                                  ec35_flag	  equ 0531h
 15928                                  EOT		  equ 012Ch
 15929                                  
 15930                                  ;NextStack	  equ 08BFh
 15931                                  ;IT_StackLoc	  equ 08C5h
 15932                                  ;IT_StackSize	  equ 08C9h
 15933                                  ; 21/10/2022
 15934                                  NextStack	  equ 08C0h
 15935                                  IT_StackLoc	  equ 08C6h
 15936                                  IT_StackSize	  equ 08CAh
 15937                                  
 15938                                  ;MoveDOSIntoHMA	  equ 08F8h
 15939                                  ; 21/10/2022
 15940                                  MoveDOSIntoHMA	  equ 08F9h
 15941                                  
 15942                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15943                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15944                                  ; 21/10/2022
 15945                                  INT19SEM equ 0640h ; (iosys5.txt)
 15946                                  I19_LST  equ 0641h ; (iosys5.txt)
 15947                                  
 15948                                  %endif
 15949                                  
 15950                                  ; 09/12/2022
 15951                                  seg_reinit equ _seg_reinit
 15952                                  ec35_flag  equ ec35flag		
 15953                                  INT19SEM   equ int19sem
 15954                                  I19_LST    equ i19_lst
 15955                                  
 15956                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15957                                  INT19OLD08 equ I19_LST+6
 15958                                  INT19OLD09 equ I19_LST+11
 15959                                  INT19OLD0A equ I19_LST+16
 15960                                  INT19OLD0B equ I19_LST+21
 15961                                  INT19OLD0C equ I19_LST+26
 15962                                  INT19OLD0D equ I19_LST+31
 15963                                  INT19OLD0E equ I19_LST+36
 15964                                  INT19OLD70 equ I19_LST+41
 15965                                  INT19OLD72 equ I19_LST+46
 15966                                  INT19OLD73 equ I19_LST+51
 15967                                  INT19OLD74 equ I19_LST+56
 15968                                  INT19OLD76 equ I19_LST+61
 15969                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15970                                  
 15971                                  ; 09/12/2022
 15972                                  %if 0
 15973                                  
 15974                                  ;keyrd_func	equ 04E9h
 15975                                  ;keysts_func	equ 04EAh
 15976                                  ;t_switch	equ 04F6h
 15977                                  ; 21/10/2022
 15978                                  keyrd_func	equ 04E5h
 15979                                  keysts_func	equ 04E6h
 15980                                  t_switch	equ 04F2h
 15981                                  
 15982                                  ; 22/10/2022
 15983                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15984                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15985                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15986                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15987                                  
 15988                                  %endif
 15989                                  
 15990                                  ; 09/12/2022
 15991                                  BCODESTART	equ BIOSDATAWORD
 15992                                  RE_INIT		equ re_init
 15993                                  
 15994                                  ; ----------------------------------------------------------------------
 15995                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15996                                  ; ----------------------------------------------------------------------
 15997                                  ; 15/04/2019 - Retro DOS v4.0
 15998                                  
 15999                                  CONFIG_BEGIN        equ  '['
 16000                                  CONFIG_BREAK        equ  'C'
 16001                                  CONFIG_BUFFERS      equ  'B'
 16002                                  CONFIG_COMMENT      equ  'Y'
 16003                                  CONFIG_COUNTRY      equ  'Q'
 16004                                  CONFIG_DEVICE       equ  'D'
 16005                                  CONFIG_DEVICEHIGH   equ  'U'
 16006                                  CONFIG_DOS          equ  'H'
 16007                                  CONFIG_DRIVPARM     equ  'P'
 16008                                  CONFIG_FCBS         equ  'X'
 16009                                  CONFIG_FILES        equ  'F'
 16010                                  CONFIG_INCLUDE      equ  'J'
 16011                                  CONFIG_INSTALL      equ  'I'
 16012                                  CONFIG_INSTALLHIGH  equ  'W'
 16013                                  CONFIG_LASTDRIVE    equ  'L'
 16014                                  CONFIG_MENUCOLOR    equ  'R'
 16015                                  CONFIG_MENUDEFAULT  equ  'A'
 16016                                  CONFIG_MENUITEM     equ  'E'
 16017                                  CONFIG_MULTITRACK   equ  'M'
 16018                                  CONFIG_NUMLOCK      equ  'N'
 16019                                  CONFIG_REM          equ  '0'
 16020                                  CONFIG_SEMICOLON    equ  ';'
 16021                                  CONFIG_SET          equ  'V'
 16022                                  CONFIG_SHELL        equ  'S'
 16023                                  CONFIG_STACKS       equ  'K'
 16024                                  CONFIG_SUBMENU      equ  'O'
 16025                                  CONFIG_SWITCHES     equ  '1'
 16026                                  
 16027                                  CONFIG_UNKNOWN      equ  'Z'
 16028                                  
 16029                                  CONFIG_OPTION_QUERY equ 80h
 16030                                  
 16031                                  ; ----------------------------------------------------------------------
 16032                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16033                                  ; ----------------------------------------------------------------------
 16034                                  ; 21/03/2019 - Retro DOS v4.0
 16035                                  
 16036                                  true	equ	0FFFFh
 16037                                  false	equ	0
 16038                                  cr	equ	13
 16039                                  lf	equ	10
 16040                                  tab	equ	9
 16041                                  
 16042                                  multMULT	   equ	4Ah
 16043                                  multMULTGETHMAPTR  equ	1
 16044                                  multMULTALLOCHMA   equ	2
 16045                                  
 16046                                  ;NOEXEC    equ	FALSE
 16047                                  
 16048                                  stacksw    equ	true	;include switchable hardware stacks
 16049                                  mycds_size equ	88	;size of curdir_list. if it is not
 16050                                  			;the same, then will generate compile error.
 16051                                  
 16052                                  entrysize   equ     8
 16053                                  
 16054                                  mincount    equ     8
 16055                                  defaultcount equ    9
 16056                                  maxcount    equ     64
 16057                                  
 16058                                  minsize     equ     32
 16059                                  defaultsize equ     128
 16060                                  maxsize     equ     512
 16061                                  
 16062                                  ;%define allocbyte  byte [es:bp+0]
 16063                                  ;%define intlevel   byte [es:bp+1]
 16064                                  ;%define savedsp    word [es:bp+2]
 16065                                  ;%define savedss    word [es:bp+4]
 16066                                  ;%define newsp	    word [es:bp+6]
 16067                                  
 16068                                  allocbyte   equ     0
 16069                                  intlevel    equ     1
 16070                                  savedsp     equ     2
 16071                                  savedss     equ     4
 16072                                  newsp       equ     6
 16073                                  
 16074                                  free	    equ     0
 16075                                  allocated   equ     1
 16076                                  overflowed  equ     2
 16077                                  clobbered   equ     3
 16078                                  
 16079                                  ;---------------------------------------
 16080                                  ; external variable defined in ibmbio module for multi-track
 16081                                  
 16082                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16083                                  			  ; it on after handling config.sys file as a
 16084                                  			  ; default value,if multrk_flag = multrk_off1.
 16085                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16086                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16087                                  
 16088                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16089                                  
 16090                                  SYSINIT$:
 16091                                  	;IF	STACKSW 
 16092                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16093                                  	; include STKMES.INC	;Fatal stack error message
 16094                                  	;   public Endstackcode
 16095                                  ;Endstackcode	label byte
 16096                                  	;ENDIF
 16097                                  
 16098                                  ; 05/07/2018
 16099                                  ; ----------------------------------------------------------------------
 16100                                  ; 04/06/2018 - Retro DOS v3.0
 16101                                  
 16102                                  ; ----------------------------------------------------------------------
 16103                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16104                                  ; ----------------------------------------------------------------------
 16105                                  
 16106                                  ;	MSStack.inc
 16107                                  ;
 16108                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16109                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16110                                  ;	a standard header structure.
 16111                                  ;	Fyi, the following shows the relations between
 16112                                  ;	the interrupt vector and interrupt level.
 16113                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16114                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16115                                  ;	MSSTACK module modifies the following interrupt vectors
 16116                                  ;	to meet the standard Interrupt Sharing standard;
 16117                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16118                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16119                                  ;	should be initialized to indicat whether this interrupt handler is
 16120                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16121                                  ;	program header is initialized in STKINIT.INC module.
 16122                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16123                                  ;
 16124                                  
 16125                                  ;  User specifies the number of stack elements - default = 9
 16126                                  ;						 minimum = 8
 16127                                  ;						 maximum = 64
 16128                                  ;
 16129                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16130                                  ;
 16131                                  ;  Picks a stack from pool of stacks and switches to it
 16132                                  ;
 16133                                  ;  Calls the previously saved interrupt vector after pushing flags
 16134                                  ;
 16135                                  ;  On return, returns the stack to the stack pool
 16136                                  ;
 16137                                  
 16138                                  ; This is a modification of STACKS:
 16139                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16140                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16141                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16142                                  ;    . Allows system to work if the only stack that got too big was the most
 16143                                  ;      deeply nested one
 16144                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16145                                  ; 4. Does not intercept any interupts on a PCjr.
 16146                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16147                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16148                                  
 16149                                  		;EVEN
 16150                                  ;align 2
 16151                                  		; 21/10/2022
 16152                                  
 16153 00000000 0000                    		dw	0	; spare field but leave these in order
 16154 00000002 0000                    stackcount:	dw	0
 16155 00000004 0000                    stackat: 	dw	0
 16156 00000006 0000                    stacksize:	dw	0
 16157 00000008 0000                    stacks:		dw	0
 16158 0000000A 0000                    		dw	0
 16159                                  
 16160 0000000C [0800]                  firstentry:	dw	stacks
 16161 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16162 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16163                                  
 16164                                  ;***********************************************************************
 16165                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16166                                  
 16167                                  ; ----------------------------------------------------------------------
 16168                                  
 16169 00000012 00000000                old02:	dd	0
 16170                                  
 16171                                  int02:
 16172                                  
 16173                                  ; *********************************************************************
 16174                                  ;
 16175                                  ; this is special support for the pc convertible / nmi handler
 16176                                  ;
 16177                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16178                                  ;	caused by using the "out" instructions to certain ports. when this
 16179                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16180                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16181                                  ;	includes other type of interrupts (hardware and software), and
 16182                                  ;	also includes other type of nmi's. when any nmi has occured,
 16183                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16184                                  ;	the software takes specific steps to allow further interrupting.
 16185                                  ;
 16186                                  ;	for pc convertible, the situation where the nmi is generated by the
 16187                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16188                                  ;	otherwords, it is actually a "restartable exception". in this
 16189                                  ;	case, the software handler must be able to get to the stack in
 16190                                  ;	order to figure out what instruction caused the problem, where
 16191                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16192                                  ;	we will not switch stacks in this situation. this situation is
 16193                                  ;	detected by interrogating port 62h, and checking for a bit value
 16194                                  ;	of 80h. if set, *****do not switch stacks*****.
 16195                                  ;
 16196                                  ; *********************************************************************
 16197                                  
 16198 00000016 50                      	push	ax
 16199 00000017 06                      	push	es
 16200 00000018 B800F0                  	mov	ax,0F000h
 16201 0000001B 8EC0                    	mov	es,ax
 16202                                  	; 02/11/2022
 16203 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16204 00000023 07                      	pop	es
 16205 00000024 750C                    	jne	short normal02
 16206                                  
 16207 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16208                                  				; 0-3: values of DIP switches
 16209                                  				; 5: 1=Timer 2 channel out
 16210                                  				; 6: 1=I/O channel check
 16211                                  				; 7: 1=RAM parity check error occurred.
 16212 00000028 A880                    	test	al,80h
 16213 0000002A 7406                    	jz	short normal02
 16214                                  special02:
 16215 0000002C 58                      	pop	ax
 16216 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16217                                  normal02:
 16218 00000032 58                      	pop	ax
 16219 00000033 E81101                  	call	do_int_stacks
 16220 00000036 [1200]                  	dw	old02
 16221                                  
 16222                                  ; ----------------------------------------------------------------------
 16223                                  
 16224 00000038 00000000                old08:	dd	0
 16225                                  
 16226                                  int08:
 16227 0000003C E80801                  	call	do_int_stacks
 16228 0000003F [3800]                  	dw	old08
 16229                                  
 16230                                  ; ----------------------------------------------------------------------
 16231                                  
 16232 00000041 00000000                old09:	dd	0
 16233                                  
 16234                                  int09:
 16235                                  
 16236                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16237                                  ; as its first instruction for compatibility reasons
 16238                                  
 16239 00000045 EB02                    	jmp	short keyboard_lbl
 16240 00000047 90                      	nop
 16241 00000048 00                      	db	0
 16242                                  
 16243                                  keyboard_lbl:
 16244 00000049 E8FB00                  	call	do_int_stacks
 16245 0000004C [4100]                  	dw	old09
 16246                                  
 16247                                  ; ----------------------------------------------------------------------
 16248                                  
 16249 0000004E 00000000                old70:	dd	0
 16250                                  
 16251                                  int70:
 16252 00000052 E8F200                  	call	do_int_stacks
 16253 00000055 [4E00]                  	dw	old70
 16254                                  
 16255                                  ; ----------------------------------------------------------------------
 16256                                  
 16257                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16258                                  ;public	int&a
 16259                                  ;public	old&a
 16260                                  ;public	firstflag&a
 16261                                  ;int&a	proc	far
 16262                                  ;	jmp	short entry_int&a&_stk
 16263                                  ;old&a	dd	  0		;forward pointer
 16264                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16265                                  ;firstflag&a db   0		;the firstly hooked.
 16266                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16267                                  ;	db	7 dup (0)	;reserved for future.
 16268                                  ;entry_int&a&_stk:
 16269                                  ;	call	do_int_stacks
 16270                                  ;	dw	old&a
 16271                                  ;intret_&a:
 16272                                  ;	iret
 16273                                  ;int&a	endp
 16274                                  ;	endm
 16275                                  
 16276                                  ; ----------------------------------------------------------------------
 16277                                  
 16278                                  int0A:
 16279 00000057 EB10                    	jmp	short entry_int0A_stk
 16280 00000059 00000000                old0A:	dd	0	
 16281 0000005D 4B42                    	dw	424Bh
 16282                                  firstflag0A:
 16283 0000005F 00                      	db	0
 16284 00000060 EB0C                    	jmp	short intret_0A
 16285 00000062 00<rep 7h>              	times	7 db 0
 16286                                  
 16287                                  entry_int0A_stk:
 16288 00000069 E8DB00                  	call	do_int_stacks
 16289 0000006C [5900]                  	dw	old0A
 16290                                  intret_0A:
 16291 0000006E CF                      	iret
 16292                                  
 16293                                  ; ----------------------------------------------------------------------
 16294                                  
 16295                                  int0B:
 16296 0000006F EB10                    	jmp	short entry_int0B_stk
 16297 00000071 00000000                old0B:	dd	0	
 16298 00000075 4B42                    	dw	424Bh
 16299                                  firstflag0B:
 16300 00000077 00                      	db	0
 16301 00000078 EB0C                    	jmp	short intret_0B
 16302 0000007A 00<rep 7h>              	times	7 db 0
 16303                                  
 16304                                  entry_int0B_stk:
 16305 00000081 E8C300                  	call	do_int_stacks
 16306 00000084 [7100]                  	dw	old0B
 16307                                  intret_0B:
 16308 00000086 CF                      	iret
 16309                                  
 16310                                  ; ----------------------------------------------------------------------
 16311                                  
 16312                                  int0C:
 16313 00000087 EB10                    	jmp	short entry_int0C_stk
 16314 00000089 00000000                old0C:	dd	0	
 16315 0000008D 4B42                    	dw	424Bh
 16316                                  firstflag0C:
 16317 0000008F 00                      	db	0
 16318 00000090 EB0C                    	jmp	short intret_0C
 16319 00000092 00<rep 7h>              	times	7 db 0
 16320                                  
 16321                                  entry_int0C_stk:
 16322 00000099 E8AB00                  	call	do_int_stacks
 16323 0000009C [8900]                  	dw	old0C
 16324                                  intret_0C:
 16325 0000009E CF                      	iret
 16326                                  
 16327                                  ; ----------------------------------------------------------------------
 16328                                  
 16329                                  int0D:
 16330 0000009F EB10                    	jmp	short entry_int0D_stk
 16331 000000A1 00000000                old0D:	dd	0	
 16332 000000A5 4B42                    	dw	424Bh
 16333                                  firstflag0D:
 16334 000000A7 00                      	db	0
 16335 000000A8 EB0C                    	jmp	short intret_0D
 16336 000000AA 00<rep 7h>              	times	7 db 0
 16337                                  
 16338                                  entry_int0D_stk:
 16339 000000B1 E89300                  	call	do_int_stacks
 16340 000000B4 [A100]                  	dw	old0D
 16341                                  intret_0D:
 16342 000000B6 CF                      	iret
 16343                                  
 16344                                  ; ----------------------------------------------------------------------
 16345                                  
 16346                                  int0E:
 16347 000000B7 EB10                    	jmp	short entry_int0E_stk
 16348 000000B9 00000000                old0E:	dd	0	
 16349 000000BD 4B42                    	dw	424Bh
 16350                                  firstflag0E:
 16351 000000BF 00                      	db	0
 16352 000000C0 EB0C                    	jmp	short intret_0E
 16353 000000C2 00<rep 7h>              	times	7 db 0
 16354                                  
 16355                                  entry_int0E_stk:
 16356 000000C9 E87B00                  	call	do_int_stacks
 16357 000000CC [B900]                  	dw	old0E
 16358                                  intret_0E:
 16359 000000CE CF                      	iret
 16360                                  
 16361                                  ; ----------------------------------------------------------------------
 16362                                  
 16363                                  int72:
 16364 000000CF EB10                    	jmp	short entry_int72_stk
 16365 000000D1 00000000                old72:	dd	0	
 16366 000000D5 4B42                    	dw	424Bh
 16367                                  firstflag72:
 16368 000000D7 00                      	db	0
 16369 000000D8 EB0C                    	jmp	short intret_72
 16370 000000DA 00<rep 7h>              	times	7 db 0
 16371                                  
 16372                                  entry_int72_stk:
 16373 000000E1 E86300                  	call	do_int_stacks
 16374 000000E4 [D100]                  	dw	old72
 16375                                  intret_72:
 16376 000000E6 CF                      	iret
 16377                                  
 16378                                  ; ----------------------------------------------------------------------
 16379                                  
 16380                                  int73:
 16381 000000E7 EB10                    	jmp	short entry_int73_stk
 16382 000000E9 00000000                old73:	dd	0	
 16383 000000ED 4B42                    	dw	424Bh
 16384                                  firstflag73:
 16385 000000EF 00                      	db	0
 16386 000000F0 EB0C                    	jmp	short intret_73
 16387 000000F2 00<rep 7h>              	times	7 db 0
 16388                                  
 16389                                  entry_int73_stk:
 16390 000000F9 E84B00                  	call	do_int_stacks
 16391 000000FC [E900]                  	dw	old73
 16392                                  intret_73:
 16393 000000FE CF                      	iret
 16394                                  
 16395                                  ; ----------------------------------------------------------------------
 16396                                  
 16397                                  int74:
 16398 000000FF EB10                    	jmp	short entry_int74_stk
 16399 00000101 00000000                old74:	dd	0	
 16400 00000105 4B42                    	dw	424Bh
 16401                                  firstflag74:
 16402 00000107 00                      	db	0
 16403 00000108 EB0C                    	jmp	short intret_74
 16404 0000010A 00<rep 7h>              	times	7 db 0
 16405                                  
 16406                                  entry_int74_stk:
 16407 00000111 E83300                  	call	do_int_stacks
 16408 00000114 [0101]                  	dw	old74
 16409                                  intret_74:
 16410 00000116 CF                      	iret
 16411                                  
 16412                                  ; ----------------------------------------------------------------------
 16413                                  
 16414                                  int76:
 16415 00000117 EB10                    	jmp	short entry_int76_stk
 16416 00000119 00000000                old76:	dd	0	
 16417 0000011D 4B42                    	dw	424Bh
 16418                                  firstflag76:
 16419 0000011F 00                      	db	0
 16420 00000120 EB0C                    	jmp	short intret_76
 16421 00000122 00<rep 7h>              	times	7 db 0
 16422                                  
 16423                                  entry_int76_stk:
 16424 00000129 E81B00                  	call	do_int_stacks
 16425 0000012C [1901]                  	dw	old76
 16426                                  intret_76:
 16427 0000012E CF                      	iret
 16428                                  
 16429                                  ; ----------------------------------------------------------------------
 16430                                  
 16431                                  int77:
 16432 0000012F EB10                    	jmp	short entry_int77_stk
 16433 00000131 00000000                old77:	dd	0	
 16434 00000135 4B42                    	dw	424Bh
 16435                                  firstflag77:
 16436 00000137 00                      	db	0
 16437 00000138 EB0C                    	jmp	short intret_77
 16438 0000013A 00<rep 7h>              	times	7 db 0
 16439                                  
 16440                                  entry_int77_stk:
 16441 00000141 E80300                  	call	do_int_stacks
 16442 00000144 [3101]                  	dw	old77
 16443                                  intret_77:
 16444 00000146 CF                      	iret
 16445                                  
 16446                                  ; ----------------------------------------------------------------------
 16447                                  
 16448                                  ;********************************************************************
 16449                                  ;common routines
 16450                                  ;********************************************************************
 16451                                  
 16452                                  ; do interrupt stack switching. the fake return address holds
 16453                                  ; a pointer to the far-pointer of the actual interrupt
 16454                                  ; service routine
 16455                                  
 16456                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16457                                  ; 21/03/2019 - Retro DOS v4.0
 16458                                  
 16459                                  ;allocbyte   equ 0
 16460                                  ;intlevel    equ 1
 16461                                  ;savedsp     equ 2
 16462                                  ;savedss     equ 4
 16463                                  ;newsp       equ 6
 16464                                  
 16465                                  do_int_stacks:
 16466 00000147 50                      	push	ax
 16467 00000148 55                      	push	bp
 16468 00000149 06                      	push	es
 16469 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16470 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16471 00000154 B001                    	mov	al,allocated ; 1
 16472                                  	; 21/10/2022
 16473                                  	;xchg	[es:bp+allocbyte],al 
 16474                                  	; 11/12/2022
 16475 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16476 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16477 0000015C 754F                    	jne	short notfree02
 16478                                  
 16479 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16480                                  
 16481                                  found02:
 16482 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16483 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16484                                  
 16485 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16486                                  
 16487 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16488                                  	; 21/10/2022
 16489                                  	;mov	bp,[es:bp+6]
 16490                                  	; 11/12/2022
 16491                                  	;cmp	[es:bp+0],ax	
 16492 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16493 00000176 7542                    	jne	short foundbad02
 16494                                  
 16495                                  	;mov	ax,es			; point ss,sp to the new stack
 16496                                  	;mov	es,bp
 16497                                  	;mov	bp,sp
 16498                                  	;mov	bp,[bp+6]
 16499                                  	;mov	ss,ax
 16500                                  	;mov	sp,es
 16501                                  	;mov	es,ax
 16502                                  	;mov	bp,[cs:bp]
 16503                                  
 16504                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16505 00000178 55                      	push    bp
 16506 00000179 89E5                    	mov     bp,sp
 16507 0000017B 8B4608                  	mov     ax,[bp+8]
 16508 0000017E 5D                      	pop     bp
 16509 0000017F 06                      	push    es
 16510 00000180 17                      	pop     ss
 16511 00000181 89EC                    	mov     sp,bp
 16512 00000183 89C5                    	mov     bp,ax
 16513                                  	; 11/12/2022
 16514                                  	;mov	bp,[cs:bp+0]	
 16515 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16516                                  
 16517 00000189 9C                      	pushf				; go execute the real interrupt handler
 16518                                  	; 11/12/2022
 16519 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16520                                  	; 21/10/2022
 16521                                  	;call	far [cs:bp+0]
 16522                                  
 16523 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16524                                  	; 11/12/2022
 16525 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16526                                  	; 21/10/2022
 16527                                  	;mov	bp,[es:bp+0]
 16528 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16529 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16530                                  
 16531                                  	; 11/12/2022
 16532                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16533                                  	; 21/10/2022
 16534 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16535 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16536                                  
 16537 000001A6 07                      	pop	es
 16538 000001A7 5D                      	pop	bp			; saved on entry
 16539 000001A8 58                      	pop	ax			; saved on entry
 16540 000001A9 83C402                  	add	sp,2
 16541 000001AC CF                      	iret				; done with this interrupt
 16542                                  
 16543                                  notfree02:
 16544 000001AD 3C01                    	cmp	al,allocated		; error flag
 16545 000001AF 7404                    	je	short findnext02	;  no, continue
 16546                                  	; 11/12/2022
 16547                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16548                                  	; 21/10/2022
 16549 000001B1 26864600                	xchg	[es:bp],al
 16550                                  
 16551                                  findnext02:
 16552 000001B5 E81200                  	call	longpath
 16553 000001B8 EBAA                    	jmp	short found02
 16554                                  
 16555                                  foundbad02:
 16556 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16557 000001BF 72F4                    	jc	short findnext02
 16558 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16559                                  	; 11/12/2022
 16560                                  	;mov	byte [es:bp+allocbyte],clobbered
 16561                                  	; 21/10/2022
 16562 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16563 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16564                                  
 16565                                  ; ----------------------------------------------------------------------
 16566                                  
 16567                                  ; Common routines
 16568                                  
 16569                                  longpath:
 16570                                  	; 21/03/2019
 16571 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16572                                  lploopp:
 16573                                  	; 11/12/2022
 16574                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16575                                  	; 21/10/2022
 16576 000001CF 26807E0000              	cmp	byte [es:bp],free
 16577 000001D4 7512                    	jne	short inuse		;  no, try next one
 16578                                  
 16579 000001D6 B001                    	mov	al,allocated
 16580                                  	; 11/12/2022
 16581                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16582                                  	; 21/10/2022
 16583 000001D8 26864600                	xchg	[es:bp],al
 16584 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16585 000001DE 7414                    	je	short found		;  yes, go use it
 16586                                  
 16587 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16588 000001E2 7404                    	je	short inuse		;  no, check the next one
 16589                                  
 16590                                  	; 11/12/2022
 16591                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16592                                  	; 21/10/2022
 16593 000001E4 26884600                	mov	[es:bp],al
 16594                                  inuse:
 16595 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16596 000001ED 7406                    	je	short fatal
 16597 000001EF 83ED08                  	sub	bp,entrysize
 16598 000001F2 EBDB                    	jmp	short lploopp
 16599                                  found:
 16600 000001F4 C3                      	retn
 16601                                  fatal:
 16602 000001F5 1E                      	push	ds
 16603 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16604 000001F9 8ED8                    	mov	ds,ax
 16605 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16606 00000200 1F                      	pop	ds
 16607 00000201 7504                    	jne	short skip_nmis
 16608                                  
 16609 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16610 00000205 E672                    	out	72h,al
 16611                                  
 16612                                  skip_nmis:
 16613 00000207 FA                      	cli				; disable and mask
 16614 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16615 0000020A E621                    	out	021h,al
 16616 0000020C E6A1                    	out	0A1h,al
 16617                                  
 16618 0000020E 8CCE                    	mov	si,cs
 16619 00000210 8EDE                    	mov	ds,si
 16620 00000212 BE[3902]                	mov	si,fatal_msg
 16621                                  ;SR;
 16622                                  ;   We set all foci to this VM to issue the stack failure message
 16623                                  ;
 16624 00000215 50                      	push	ax
 16625 00000216 1E                      	push	ds
 16626                                  	;;mov	ax,Bios_Data ; 0070h
 16627                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16628                                  	; 21/10/2022
 16629 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16630 0000021A 8ED8                    	mov	ds,ax
 16631                                  
 16632                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16633 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16634 00000221 1F                      	pop	ds
 16635 00000222 58                      	pop	ax
 16636 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16637                                  
 16638                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16639                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16640                                  	; 21/10/2022
 16641 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16642                                  ;
 16643                                  ;SR; We do not bother about the returned status of this call. 
 16644                                  ;
 16645                                  fatal_loop:
 16646 0000022A AC                      	lodsb
 16647 0000022B 3C24                    	cmp	al,'$'
 16648 0000022D 7408                    	je	short fatal_done
 16649                                  
 16650 0000022F B307                    	mov	bl,7
 16651 00000231 B40E                    	mov	ah,14
 16652 00000233 CD10                    	int	10h			; whoops, this enables ints
 16653 00000235 EBF3                    	jmp	short fatal_loop
 16654                                  
 16655                                  fatal_done:
 16656 00000237 EBFE                    	jmp	short fatal_done
 16657                                  
 16658                                  
 16659                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16660                                  ; ----------------------------------------------------------------------
 16661                                  ;	include msbio.cl5		; fatal stack error message
 16662                                  
 16663                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16664                                  
 16665                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16666                                  ; ----------------------------------------------------------------------
 16667                                  ; 04/06/2018 - Retro DOS v3.0
 16668                                  
 16669                                  fatal_msg:
 16670 00000239 0D0A                    	db	0Dh,0Ah
 16671 0000023B 070D0A                  	db	7,0Dh,0Ah
 16672 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16672 00000247 737461636B206F7665-
 16672 00000250 72666C6F770D0A     
 16673 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16673 00000260 6C7465640D0A24     
 16674                                  
 16675                                  endstackcode:
 16676                                  
 16677                                  ; ----------------------------------------------------------------------
 16678                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16679                                  ; ----------------------------------------------------------------------
 16680                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16681                                  
 16682                                  ; 22/03/2019 - Retro DOS v4.0
 16683                                  
 16684                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16685                                  
 16686                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16687                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16688                                  
 16689                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16690                                  ; ----------------------------------------------------------------------
 16691                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16692                                  
 16693                                  SYSINIT:	
 16694 00000267 E91C02                          JMP	GOINIT
 16695                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16696                                  
 16697                                  ; ----------------------------------------------------------------------
 16698                                  
 16699                                  struc DDHighInfo
 16700 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16701 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16702 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16703                                  endstruc
 16704                                  
 16705                                  ; 22/03/2019 - Retro DOS v4.0
 16706                                  
 16707 0000026A 00                      runhigh: db	0
 16708                                  
 16709                                  ; 02/11/2022
 16710                                  ;align 4
 16711                                  
 16712                                  DOSINFO: 
 16713 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16714                                  ;MSDOS:
 16715                                  dos_temp_location: ; dword ; MSDOS 6.0
 16716                                  dosinit:		; MSDOS 6.0
 16717 0000026F 0000                    	dw	0
 16718                                  
 16719                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16720                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16721                                  ;	dw	0
 16722                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16723                                  
 16724                                  CURRENT_DOS_LOCATION:
 16725 00000271 0000                    	dw	0
 16726                                  
 16727                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16728                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16729                                  
 16730                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16731                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16732                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16733                                  
 16734                                  DEVICE_LIST:
 16735 00000273 00000000                	dd	0
 16736                                  
 16737                                  ; 04/06/2018 - Retro DOS v3.0
 16738                                  ; 28/03/2018
 16739                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16740                                  ;
 16741                                  sysi_country:	
 16742 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16743                                  
 16744                                  ; MSDOS 6.0
 16745 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16746                                  
 16747 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16748 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16749                                  
 16750 00000283 0000                    def_php:	dw	0
 16751                                  
 16752                                  ; M022--
 16753                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16754                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16755                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16756                                  ;  the new home.
 16757                                  
 16758                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16759                                  ; 21/10/2022
 16760                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16761                                  
 16762                                  ; 22/10/2022
 16763                                  seg_reinit_ptr:	; label dword
 16764 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16765                                  temp_bcode_seg:
 16766                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16767                                  		; 22/10/2022
 16768 00000287 9F02                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16769                                  
 16770                                  fake_floppy_drv:
 16771 00000289 00                      		db	0	; set to 1 if this machine
 16772                                  				; does not have any floppies!!!
 16773                                  
 16774                                  ; Internal Stack Parameters
 16775                                  
 16776 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16777 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16778 0000028E 00000000                stack_addr:	dd	0	
 16779                                  
 16780                                  ; 05/06/2018 - Retro DOS v3.0
 16781                                  
 16782                                  ; various default values
 16783                                  
 16784 00000292 0100                    MEMORY_SIZE:	dw	1
 16785                                  
 16786                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16787                                  
 16788 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16789 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16790 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16791 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16792 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16793                                  
 16794 0000029D 08                      FILES:	db	8	; enough files for pipe
 16795 0000029E 04                      FCBS:	db	4	; performance for recycling
 16796 0000029F 00                      KEEP:	db	0	; keep original set
 16797 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16798                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16799                                  ;CONFBOT: dw	0
 16800                                  ;ALLOCLIM: dw	0
 16801                                  CONFBOT: ; 02/11/2022
 16802 000002A1 0000                    top_of_cdss: dw 0
 16803                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16804 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16805                                  
 16806 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16807                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16808                                  ; (SYSINIT:02A9h)
 16809                                  command_line:
 16810 000002A9 0200                    	db	2,0
 16811 000002AB 50                      	db	'P'
 16812 000002AC 00                      	db	0
 16813 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16814                                  ; (SYSINIT:0329h)
 16815 00000329 00                      ZERO:	db	0
 16816 0000032A 00                      sepchr:	db	0
 16817 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16818 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16819 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16820                                  
 16821 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16822 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16823                                  
 16824 00000339 0000                    buf_prev_off:	dw	0
 16825                                  
 16826                                          ;IF      NOT NOEXEC
 16827                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16828                                          ;ENDIF
 16829                                  
 16830                                  ; 01/05/2018
 16831                                  COMEXE:
 16832 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16833 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16834 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16835 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16836 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16837 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16838 00000347 0000                    		dw	0
 16839                                  
 16840                                  ; variables for install= command.
 16841                                  
 16842 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16843                                  					;  indicating the pass number
 16844                                  					; 0 - do scan for DOS=HIGH/LOW
 16845                                  					; 1 - load device drivers
 16846                                  					; 2 - was to load IFS
 16847                                  					;      now it is unused
 16848                                  					; 3 - do install=
 16849                                  					; >3 - nop
 16850 0000034A 0000                    install_flag:	dw	0
 16851                                  
 16852                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16853                                  has_installed	equ	00000010b	; sysinit_base installed.
 16854                                  
 16855 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16856 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16857 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16858 00000356 0000                    checksum:	dw	0		; used by sum_up
 16859                                  
 16860 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16861 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16862 0000036D 20                      ldexec_start:	db	' '
 16863 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16864                                  
 16865                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16866                                  
 16867                                  instexe:
 16868 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16869 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16870 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16871 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16872 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16873 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16874 000003CA 0000                    		dw	0
 16875                                  
 16876                                  ; variables for comment=
 16877                                  
 16878 000003CC 00                      com_level:	db	0		; level of " " in command line
 16879 000003CD 00                      cmmt:		db	0		; length of comment string token
 16880 000003CE 00                      cmmt1:		db	0		; token
 16881 000003CF 00                      cmmt2:		db	0		; token
 16882 000003D0 00                      cmd_indicator:	db	0
 16883 000003D1 00                      donotshownum:	db	0
 16884                                  
 16885 000003D2 0000                    count:		dw	0
 16886 000003D4 0000                    org_count:	dw	0
 16887 000003D6 0000                    chrptr:		dw	0
 16888 000003D8 0000                    cntryfilehandle: dw	0
 16889 000003DA 0000                    old_area:	dw	0
 16890 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16891                                  
 16892                                  bucketptr: ; label dword
 16893                                  bufptr:	   ; label dword		; leave this stuff in order!
 16894 000003DE 0000                    memlo:	dw	0
 16895                                  prmblk:	   ; label word
 16896 000003E0 0000                    memhi:	dw	0
 16897 000003E2 0000                    ldoff:	dw	0
 16898 000003E4 0000                    area:	dw	0
 16899                                  
 16900                                  ; Following is the request packet used to call INIT routines for 
 16901                                  ; all device drivers. Some fields may be accessed individually in
 16902                                  ; the code, and hence have individual labels, but they should not
 16903                                  ; be separated.
 16904                                  
 16905 000003E6 18                      packet:	db	24			; was 22
 16906 000003E7 00                      	db	0
 16907 000003E8 00                      	db	0			; initialize code
 16908 000003E9 0000                    	dw	0
 16909 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16910                                  
 16911 000003F3 00                      unitcount:	db	0
 16912 000003F4 00000000                break_addr:	dd	0
 16913 000003F8 00000000                bpb_addr:	dd	0
 16914                                  drivenumber:	; 22/10/2022
 16915 000003FC 00                      devdrivenum:	db	0 
 16916 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16917                                  
 16918                                  ; end of request packet
 16919                                  
 16920                                  ;drivenumber:	db	0  ; 22/03/2019
 16921                                  
 16922                                  toomanydrivesflag:
 16923 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16924                                  align 2
 16925                                  
 16926                                  BCodeSeg:	; 21/10/2022
 16927 00000400 9F02                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16928                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16929                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16930                                  
 16931                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16932                                  ;; 19/04/2019
 16933                                  ;_timer_lw_:
 16934                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16935                                  	
 16936                                  ;SR;
 16937                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16938                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16939                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16940                                  ;is passed to DOS as part of the DOSINIT call.
 16941                                  ;
 16942                                  
 16943                                  BiosComBlock:
 16944                                  	;dd	Bios_Data:SysinitPresent 
 16945                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16946 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16947                                  	;dw	KERNEL_SEGMENT ; 0070h
 16948                                  	; 21/10/2022
 16949 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16950                                  
 16951                                  ;align 2
 16952                                  
 16953                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16954                                  tempstack:	
 16955 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16956                                  
 16957                                  ; ----------------------------------------------------------------------------
 16958                                  
 16959                                  	; 22/10/2022 - Retro DOS v4.0
 16960                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16961                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16962                                  	; 12/12/2022
 16963                                  	; 22/03/2019 - Retro DOS v4.0
 16964                                  	; 06/07/2018
 16965                                  	; 04/06/2018 - Retro DOS v3.0
 16966                                  ; before doing anything else, let's set the model byte
 16967 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16968 00000488 CD15                    	int	15h			; *
 16969 0000048A 7217                    	jc	short no_rom_config
 16970                                  
 16971 0000048C 80FC00                  	cmp	ah,0			; double check
 16972 0000048F 7512                    	jne	short no_rom_config
 16973 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16974 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16975 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16976 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16977                                  	;jmp	short SYSIN
 16978                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16979 000004A1 EB2D                    	jmp	short move_myself
 16980                                  
 16981                                  no_rom_config:				; Old ROM
 16982 000004A3 B800F0                  	mov	ax,0F000h
 16983 000004A6 8ED8                    	mov	ds,ax
 16984 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16985 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16986                                  
 16987                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16988                                  ; execute the equipment determination interrupt and then
 16989                                  ; check the returned value to see if we have any floppy drives
 16990                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16991                                  ; see the at tech ref bios listings for help on the equipment
 16992                                  ; flag interrupt (11h)	
 16993                                  
 16994                                  	; 22/10/2022
 16995                                  check_for_fake_floppy:			; entry point for rom_config above
 16996 000004AF CD11                    	int	11h			; check equipment flag
 16997                                  
 16998                                  	; 12/12/2022
 16999 000004B1 A801                    	test	al,1		
 17000                                  	;test	ax,1			; have any floppies?
 17001 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 17002                                  
 17003                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17004                                  ; whether it is an old ROM BIOS or a new one
 17005                                  ;
 17006                                  ; WARNING !!!
 17007                                  ;
 17008                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17009                                  ; here will require an equivalent modification in MSINIT.ASM also
 17010                                  
 17011 000004B5 06                      	push	es
 17012                                  
 17013 000004B6 30C9                    	xor	cl,cl	
 17014 000004B8 B408                    	mov	ah,8			; get disk parameters
 17015 000004BA B200                    	mov	dl,0			; of drive 0
 17016 000004BC CD13                    	int	13h
 17017                                  
 17018 000004BE 07                      	pop	es
 17019                                  
 17020 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 17021                                  					;  ROM BIOS lied
 17022 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 17023 000004C4 740A                    	je	short move_myself
 17024                                  
 17025 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17026 000004C8 7506                    	jnz	short move_myself
 17027                                  
 17028 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17029                                  
 17030                                  move_myself:
 17031 000004D0 FC                      	cld				; set up move
 17032 000004D1 31F6                    	xor	si,si
 17033 000004D3 89F7                    	mov	di,si
 17034                                  
 17035                                  	; 12/12/2022
 17036 000004D5 0E                      	push	cs
 17037 000004D6 1F                      	pop	ds
 17038                                  
 17039                                  	;mov	cx,[cs:MEMORY_SIZE]
 17040 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17041                                  
 17042                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17043                                  ;;;	if	msver
 17044                                  ;	cmp	cx,1		; 1 means do scan
 17045                                  ;	jnz	short noscan
 17046                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17047                                  ;	xor	bx,bx
 17048                                  ;
 17049                                  ;memscan:inc	cx
 17050                                  ;	jz	setend
 17051                                  ;	mov	ds,cx
 17052                                  ;	mov	al,[bx]
 17053                                  ;	not	al
 17054                                  ;	mov	[bx],al
 17055                                  ;	cmp	al,[bx]
 17056                                  ;	not	al
 17057                                  ;	mov	[bx],al
 17058                                  ;	jz	short memscan
 17059                                  ;setend:
 17060                                  ;	mov	cs:[memory_size],cx
 17061                                  ;;;	endif
 17062                                  
 17063                                  ;noscan: 				; cx is mem size in para
 17064                                  ;;
 17065                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17066                                  ;;		  before we try to run.
 17067                                  ;;	       b) in any case, we should check for sufficient memory and give
 17068                                  ;;		  an appropriate error diagnostic if there isn't enough
 17069                                  ;
 17070                                  ;	push	cs
 17071                                  ;	pop	ds
 17072                                  ;
 17073                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17074                                  ;;	  that way it would be easier to slide them down home in a minimal
 17075                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17076                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17077                                  ;;	  temporary home and the final one.  the problem with doing that
 17078                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17079                                  ;
 17080                                  ;	dec	cx			; one para for an arena at end of mem
 17081                                  ;					; in case of UMBs
 17082                                  
 17083                                  	; 22/10/2022
 17084                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17085                                  
 17086                                  	; 12/12/2022
 17087                                  	;push	cs
 17088                                  	;pop	ds
 17089                                  
 17090 000004DB 49                      	dec	cx
 17091                                  
 17092                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17093                                  
 17094 000004DC 31DB                    	xor	bx,bx
 17095 000004DE 8EC3                    	mov	es,bx	; 0
 17096                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17097                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17098                                  	; 29/09/2023
 17099 000004E0 26C41EBC00              	les	bx,[es:(2Fh*4)]
 17100 000004E5 26817F035250            	cmp	word [es:bx+3],'RP'
 17101 000004EB 751B                    	jne	short NoRPL
 17102 000004ED 26807F054C              	cmp	byte [es:bx+5],'L'
 17103 000004F2 7514                    	jne	short NoRPL
 17104                                  
 17105 000004F4 89CA                    	mov	dx,cx			; get TOM into DX
 17106 000004F6 52                      	push	dx
 17107 000004F7 B8064A                  	mov	ax,4A06h
 17108                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17109 000004FA CD2F                    	int	2Fh			; Get new TOM from any RPL
 17110 000004FC 58                      	pop	ax
 17111 000004FD 89D1                    	mov	cx,dx
 17112 000004FF 39C2                    	cmp	dx,ax
 17113 00000501 7405                    	je	short NoRPL
 17114                                  	
 17115                                  	; 11/12/2022
 17116                                  	; ds = cs
 17117 00000503 8916[9402]              	mov	[RPLMemTop],dx
 17118                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17119                                  	;mov	[cs:RPLMemTop],dx
 17120                                  	
 17121 00000507 49                      	dec	cx
 17122                                  NoRPL:
 17123 00000508 B8[E038]                	mov	ax,SI_end		; need this much room for sysinit
 17124                                  					; (SI_end == sysinit code size)
 17125 0000050B E8B806                  	call	off_to_para
 17126 0000050E 29C1                    	sub	cx,ax
 17127                                  
 17128                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17129                                  ; code above sysinit in memory
 17130                                  ;
 17131 00000510 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17132                                  
 17133 00000514 B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17134 00000517 E8AC06                  	call	off_to_para		; leave this much room for BIOS code
 17135 0000051A 29C1                    	sub	cx,ax
 17136 0000051C 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17137                                  
 17138 0000051E B9[E038]                	mov	cx,SI_end		; (sysinit code size)
 17139 00000521 D1E9                    	shr	cx,1			; divide by 2 to get words
 17140 00000523 F3A5                    	rep	movsw			; relocate sysinit
 17141                                  
 17142 00000525 06                      	push	es			; push relocated segment
 17143 00000526 B8[2B05]                	mov	ax,SYSIN
 17144 00000529 50                      	push	ax			; push relocated entry point
 17145                                  
 17146 0000052A CB                      	retf				; far jump to relocated sysinit
 17147                                  
 17148                                  ; ----------------------------------------------------------------------------
 17149                                  
 17150                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17151                                  
 17152                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17153                                  	; (SYSINIT:0533h)
 17154                                  SYSIN:
 17155                                  	; Retro DOS 4.0 - 22/03/2019
 17156                                  	; Retro DOS 2.0 - 25/02/2018
 17157                                  
 17158                                  	; 23/04/2019
 17159                                  	;;mov	ax,Bios_Data
 17160                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17161                                  	; 21/10/2022
 17162 0000052B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17163 0000052E 8ED8                    	mov	ds,ax
 17164 00000530 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17165 00000534 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17166                                  
 17167                                  ; first move the MSDOS.SYS image up to a harmless place 
 17168                                  ; on top of our new sysinitseg
 17169                                  
 17170                                  	; 22/10/2022
 17171 00000539 B8[E038]                	mov	ax,SI_end		; how big is sysinitseg?
 17172 0000053C E88706                  	call	off_to_para
 17173 0000053F 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17174 00000541 01C8                    	add	ax,cx
 17175 00000543 8EC0                    	mov	es,ax
 17176                                  	
 17177 00000545 31F6                    	xor	si,si
 17178 00000547 89F7                    	mov	di,si
 17179                                  
 17180 00000549 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17181                                  
 17182                                  	;mov	ax,cs	
 17183                                  	;mov	ds,ax
 17184                                  
 17185                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17186                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17187                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17188                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17189                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17190                                  
 17191                                  	; 22/10/2022
 17192 0000054E B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17193 00000551 F3A5                    	rep     movsw
 17194 00000553 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17195                                  
 17196                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17197                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17198                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17199                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17200                                  
 17201                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17202                                  	;mov	ax,cs
 17203                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17204                                  	;mov	ds,ax
 17205                                  
 17206                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17207                                  
 17208                                  ;	; 24/04/2019 
 17209                                  ;;ifndef ROMDOS
 17210                                  ;	mov	ax,[es:3] 		; get offset of dos
 17211                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17212                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17213                                  ;	call	off_to_para		; subtract this much from segment
 17214                                  ;	; 23/04/2019
 17215                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17216                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17217                                  ;;else
 17218                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17219                                  ;;
 17220                                  ;;endif ; ROMDOS
 17221                                  
 17222                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17223                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17224                                  
 17225                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17226                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17227                                  
 17228                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17229                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17230 00000558 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17231                                  
 17232 0000055B 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17233                                  	; 02/11/2022
 17234 0000055F E86406                  	call	off_to_para		; subtract this much from segment
 17235 00000562 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17236                                  
 17237                                  	; Current DOSCODE start address = dword [dosinit]
 17238                                  
 17239                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17240                                  ;; until it is determined whether it will be running in HIMEM or not.
 17241                                  
 17242                                  ;ifndef ROMDOS
 17243                                  
 17244                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17245                                  
 17246                                  	; 22/10/2022
 17247 00000567 8CC0                    	mov	ax,es
 17248 00000569 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17249 0000056C 8EC0                    	mov	es,ax
 17250 0000056E 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17251 00000573 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17252                                  
 17253                                  	;mov	si,BCODE_START ; mov si,30h
 17254                                  	; 09/12/2022
 17255 00000575 BE[3000]                	mov	si,BCODESTART
 17256                                  	; 02/11/2022
 17257 00000578 89F7                    	mov	di,si
 17258                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 17259                                  	;sub	cx,si
 17260                                  	; 29/09/2023
 17261                                  	BCODESIZE equ BCODEEND-BCODESTART
 17262 0000057A B9D019                  	mov	cx,BCODESIZE
 17263 0000057D D1E9                    	shr	cx,1
 17264 0000057F F3A5                    	rep	movsw			; move Bios_Code into place
 17265                                  
 17266 00000581 8CC0                    	mov	ax,es			; tell it what segment it's in
 17267 00000583 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17268                                  
 17269                                  ;endif	; not ROMDOS
 17270                                  
 17271                                  ; now call dosinit while it's in its temporary home
 17272                                  
 17273                                  	;mov	ax,cs
 17274                                  	;mov	ds,ax	 
 17275                                  
 17276                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17277                                  
 17278                                  	; 22/10/2022
 17279                                  
 17280 00000588 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17281                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17282 0000058D 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17283                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17284                                  
 17285 00000592 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17286                                  
 17287 00000597 FA                      	cli
 17288 00000598 8CC8                    	mov	ax,cs
 17289 0000059A 8ED0                    	mov	ss,ax
 17290                                  
 17291                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17292                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17293                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17294                                  ;SYSINIT:0532h:
 17295                                  
 17296                                  ; 22/10/2022
 17297                                  ; ----------------------------------------------------------------------------
 17298                                  ;SYSINIT:05A6h:
 17299                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17300                                  
 17301                                  	;mov	sp, 05A6h
 17302 0000059C BC9C05                  	mov     sp,locstack		; set stack
 17303                                  
 17304 0000059F FB                      	sti
 17305                                  
 17306                                  ;align 2
 17307                                  	; 30/03/2018
 17308                                  ;LOCSTACK:
 17309                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17310                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17311                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17312                                  
 17313                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17314                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17315                                  
 17316                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17317                                  ; at the top of memory, to its final location in low memory just above the
 17318                                  ; BIOS data. It will then build important DOS data structures in low 
 17319                                  ; memory following the DOS data. It returns (among many other things) the
 17320                                  ; new starting address of free memory.
 17321                                  
 17322 000005A0 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17323                                  			 ; es:di -> sysinitvars_ext
 17324                                  
 17325 000005A5 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17326                                  	
 17327                                  	; 11/12/2022
 17328                                  	; 22/03/2019
 17329 000005AA 0E                      	push	cs
 17330 000005AB 1F                      	pop	ds
 17331                                  	; 22/10/2022
 17332 000005AC A3[8102]                	mov	[hi_doscod_size],ax
 17333 000005AF 890E[7F02]              	mov	[lo_doscod_size],cx
 17334 000005B3 8916[7B02]              	mov	[dos_segreinit],dx
 17335                                  	
 17336                                  	; 11/12/2022
 17337                                  	; ds = cs
 17338                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17339                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17340                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17341                                  
 17342                                  	; 05/06/2018 - Retro DOS v3.0
 17343                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17344                                  
 17345                                  	; 11/12/2022
 17346                                  	; ds = cs
 17347                                  	; 22/10/2022
 17348                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17349 000005B7 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17350                                  	;mov	[cs:DOSINFO],ax
 17351 000005BA A3[6B02]                	mov	[DOSINFO],ax
 17352                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17353 000005BD 268B4502                	mov	ax,[es:di+2]
 17354                                  	;mov	[cs:DOSINFO+2],ax
 17355 000005C1 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17356                                  
 17357                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17358 000005C4 268B4504                	mov	ax,[es:di+4]
 17359                                  	;mov	[cs:sysi_country],ax
 17360 000005C8 A3[7702]                	mov	[sysi_country],ax
 17361                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17362 000005CB 268B4506                	mov	ax,[es:di+6]
 17363                                  	;mov	[cs:sysi_country+2],ax
 17364 000005CF A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17365                                  
 17366                                  	; 20/04/2019
 17367                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17368                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17369                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17370                                  	; 22/10/2022
 17371                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17372                                  	;;;mov	[dos_segreinit+2],es
 17373                                  	;;mov	[dos_segreinit+2],ax
 17374                                  	;mov	[cs:dos_segreinit+2],ax
 17375                                  	; 11/12/2022
 17376                                  	; ds = cs
 17377 000005D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17378 000005D6 8C06[7D02]              	mov	[dos_segreinit+2],es
 17379                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17380                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17381                                  	;mov	[cs:dos_segreinit+2],es
 17382                                  
 17383                                  ; ----------------------------------------------------------------------------
 17384                                  
 17385                                  ;SYSINIT:0577h:
 17386                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17387                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17388                                  
 17389                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17390                                  ;------ Cover up RPL code with an arena
 17391                                  ;SYSINIT:05EBh:
 17392                                  	; 11/12/2022
 17393                                  	; ds = cs
 17394 000005DA 31DB                    	xor	bx,bx
 17395 000005DC 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17396                                  	;cmp	word [RPLMemTop],0
 17397                                  	;;cmp	word [cs:RPLMemTop],0
 17398 000005E0 7450                    	je	short NoRPLArena
 17399                                  
 17400                                  ;------ alloc all memory
 17401                                  
 17402                                  	; 11/12/2022
 17403                                  	;mov	bx,0FFFFh
 17404 000005E2 4B                      	dec	bx
 17405                                  	; bx = 0FFFFh
 17406 000005E3 B448                    	mov	ah,48h
 17407 000005E5 CD21                    	int	21h
 17408                                  			; DOS - 2+ - ALLOCATE MEMORY
 17409                                  			; BX = number of 16-byte paragraphs desired
 17410 000005E7 B448                    	mov	ah,48h
 17411 000005E9 CD21                    	int	21h
 17412                                  
 17413 000005EB 8EC0                    	mov	es,ax			; get it into ES and save it
 17414 000005ED 06                      	push	es
 17415                                  
 17416                                  ;------ resize upto RPL mem
 17417                                  
 17418                                  	; 11/12/2022
 17419                                  	; ds = cs
 17420                                  	;sub	ax,[cs:RPLMemTop]
 17421 000005EE 2B06[9402]              	sub	ax,[RPLMemTop]
 17422 000005F2 F7D8                    	neg	ax
 17423 000005F4 48                      	dec	ax
 17424 000005F5 89C3                    	mov	bx,ax
 17425 000005F7 B44A                    	mov	ah,4Ah
 17426 000005F9 CD21                    	int	21h
 17427                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17428                                  			; ES = segment address of block to change
 17429                                  			; BX = new size in paragraphs
 17430                                  
 17431                                  ;------ allocate the free (RPL MEM)
 17432                                  
 17433 000005FB BBFFFF                  	mov	bx,0FFFFh
 17434 000005FE B448                    	mov	ah,48h
 17435 00000600 CD21                    	int	21h
 17436 00000602 B448                    	mov	ah,48h
 17437 00000604 CD21                    	int	21h
 17438                                  
 17439                                  ;----- mark that it belongs to RPL
 17440                                  
 17441 00000606 48                      	dec	ax
 17442 00000607 8EC0                    	mov	es,ax
 17443                                  	;mov	word [es:arena_owner],8
 17444 00000609 26C70601000800          	mov	word [es:1],8
 17445                                  	;mov	word [es:arena_name],'RP'
 17446 00000610 26C70608005250          	mov	word [es:8],'RP'
 17447                                  	;mov	word [es:arena_name+2],'L'
 17448 00000617 26C7060A004C00          	mov	word [es:10],'L'
 17449                                  	;mov	word [es:arena_name+4],0
 17450 0000061E 26C7060C000000          	mov	word [es:12],0
 17451                                  	;mov	word [es:arena_name+6],0
 17452 00000625 26C7060E000000          	mov	word [es:14],0	
 17453                                  
 17454 0000062C 07                              pop     es                      ; get back ptr to first block
 17455 0000062D B449                            mov     ah,49h	; Dealloc	; and free it
 17456 0000062F CD21                    	int	21h		
 17457                                  					; DOS - 2+ - FREE MEMORY
 17458                                  					; ES = segment address of area to be freed
 17459                                  	; 11/12/2022
 17460 00000631 F8                      	clc
 17461                                  
 17462                                  ; ----------------------------------------------------------------------------
 17463                                  
 17464                                  NoRPLArena:
 17465                                  	; 11/12/2022
 17466                                  	; ds = cs
 17467                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17468 00000632 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17469                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17470                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17471                                  
 17472                                  	; 11/12/2022
 17473                                  	;clc				; get the extended memory size
 17474                                  
 17475                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17476                                  ;	if the function reports an error do nothing else store the extended
 17477                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17478                                  ;	currently pointed to by es:di. use the offsets specified in the
 17479                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17480                                  
 17481 00000636 B488                    	mov	ah,88h
 17482 00000638 CD15                    	int	15h			; check extended memory size
 17483 0000063A 720B                    	jc	short no_ext_memory
 17484                                  			; Get Extended Memory Size
 17485                                  			; Return: CF clear on success
 17486                                  			; AX = size of memory above 1M in K	
 17487                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17488                                  	; 22/10/2022
 17489 0000063C 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17490 00000640 09C0                    	or	ax,ax
 17491 00000642 7403                    	jz	short no_ext_memory
 17492 00000644 E8F504                  	call	ClrVDISKHeader
 17493                                  no_ext_memory:
 17494                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17495 00000647 268B4510                	mov	ax,[es:di+10h]
 17496                                  	;add	ax,bufinsiz
 17497 0000064B 83C014                  	add	ax,20			; size of buffer header
 17498                                  	; 11/12/2022
 17499                                  	; ds = cs
 17500 0000064E A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17501                                  	;mov	[cs:singlebuffersize],ax	
 17502                                  	; 11/12/2022
 17503 00000651 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17504                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17505                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17506 00000654 26884543                	mov	[es:di+43h],al
 17507                                  
 17508                                  ; determine if 386 system...
 17509                                  
 17510                                  	;get_cpu_type			; macro to determine cpu type
 17511                                  
 17512                                  get_cpu_type:
 17513                                  	; 11/12/2022
 17514 00000658 9C                      	pushf
 17515                                  	;push	bx
 17516                                  	;xor	bx,bx
 17517                                  	; 11/12/2022
 17518                                  	;xor	cx,cx
 17519                                  	;
 17520 00000659 31C0                    	xor	ax,ax
 17521                                  	; ax = 0
 17522 0000065B 50                      	push    ax
 17523 0000065C 9D                      	popf
 17524 0000065D 9C                      	pushf
 17525 0000065E 58                      	pop	ax
 17526 0000065F 2500F0                  	and	ax,0F000h
 17527                                  	;cmp	ax,0F000h
 17528 00000662 80FCF0                  	cmp	ah,0F0h 
 17529 00000665 7410                    	je	short cpu_8086
 17530                                  	;mov	ax,0F000h
 17531 00000667 B4F0                    	mov	ah,0F0h
 17532                                  	; ax = 0F000h
 17533 00000669 50                      	push	ax
 17534 0000066A 9D                      	popf
 17535 0000066B 9C                      	pushf
 17536 0000066C 58                      	pop	ax
 17537                                  	;and	ax,0F000h
 17538 0000066D 80E4F0                  	and	ah,0F0h
 17539 00000670 7405                    	jz	short cpu_286
 17540                                  cpu_386:
 17541                                  	; 11/12/2022
 17542                                  	;;inc	bx
 17543                                  	;inc	cx
 17544                                  	; 11/12/2022
 17545                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17546 00000672 26C6454401              	mov	byte [es:di+44h],1
 17547                                  cpu_286:
 17548                                  	;;;inc	bx
 17549                                  	;;inc	cx
 17550                                  cpu_8086:
 17551                                  	; 11/12/2022
 17552                                  	;;mov	ax,bx	
 17553                                  	;pop	bx
 17554 00000677 9D                      	popf
 17555                                  
 17556                                  	;...
 17557                                  
 17558                                  	; 11/12/2022
 17559                                  	;or	cl,cl
 17560                                  	;jz	short not_386_system
 17561                                  	; 11/12/202
 17562                                  	;cmp	cl,2
 17563                                  	;;cmp	ax,2			; is it a 386?
 17564                                  	;jne	short not_386_system	; no: don't mess with flag
 17565                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17566                                  	; 11/12/2022
 17567                                  	; 22/10/2022
 17568                                  	;mov	byte [es:di+44h],1
 17569                                  not_386_system:
 17570                                  	;mov	al,[es:di+SYSI_NUMIO]
 17571 00000678 268A4520                	mov	al,[es:di+20h]
 17572                                  	; 11/12/2022
 17573                                  	; ds = cs
 17574 0000067C A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17575                                  	;mov	[cs:drivenumber],al
 17576                                  
 17577 0000067F 8CC8                    	mov	ax,cs
 17578 00000681 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17579                                  	; 11/12/2022
 17580                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17581                                  	;;mov	cx,[cs:singlebuffersize]
 17582                                  	;shr	cx,1			
 17583                                  	;shr	cx,1			; divide size by 16...
 17584                                  	;shr	cx,1
 17585                                  	;shr	cx,1			; ...to get paragraphs...
 17586                                  	;inc	cx			; ... and round up
 17587                                  	; 11/12/2022
 17588 00000684 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17589 00000688 B104                    	mov	cl,4
 17590 0000068A D3EB                    	shr	bx,cl
 17591 0000068C 43                      	inc	bx
 17592                                  
 17593                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17594                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17595                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17596                                  ;	  it is probably safe to assume that the sector size always will be.
 17597                                  ;
 17598                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17599                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17600                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17601                                  ;	  other code from ever causing a problem???
 17602                                  
 17603                                  	; 11/12/2022
 17604 0000068D 29D8                    	sub	ax,bx
 17605                                  	;sub	ax,cx
 17606 0000068F A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17607                                  	; 22/10/2022
 17608                                  	;mov	[cs:top_of_cdss],ax
 17609                                  
 17610                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17611                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17612                                  ;	for allocating memory for MagicDrv.
 17613                                  
 17614 00000692 06                      	push	es			; preserve pointer to dosinfo
 17615 00000693 57                      	push	di
 17616                                  
 17617                                  	; 22/10/2022
 17618                                  ;	mov	cx,ax			; save pointer for buffer
 17619                                  ;
 17620                                  ;;	now allocate space for 26 CDSs
 17621                                  ;
 17622                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17623                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17624                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17625                                  
 17626                                  ; setup and initialize the temporary buffer at cx
 17627                                  
 17628                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17629 00000694 26C47D12                	les	di,[es:di+12h]
 17630                                  	; 11/12/2022
 17631 00000698 31DB                    	xor	bx,bx
 17632                                  	;xor	ax,ax
 17633                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17634                                  	;mov	word [es:di+4],0
 17635 0000069A 26895D04                	mov	[es:di+4],bx ; 0
 17636                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17637                                  	;mov	word [es:di],0
 17638 0000069E 26891D                  	mov	[es:di],bx ; 0
 17639                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17640                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17641 000006A1 26894502                	mov	[es:di+2],ax
 17642                                  
 17643                                  	;mov	es,cx
 17644 000006A5 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17645                                  
 17646                                  	; 11/12/2022
 17647                                  	;xor	ax,ax
 17648                                  	;mov	di,ax			; es:di -> single buffer
 17649 000006A7 89DF                    	mov	di,bx
 17650                                  	; di = 0
 17651                                  
 17652                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17653                                  	; 11/12/2022
 17654                                  	;mov	[es:di],ax ; 0
 17655 000006A9 26891D                  	mov	[es:di],bx ; 0
 17656                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17657                                  	; 11/12/2022
 17658                                  	;mov	[es:di+2],ax ; 0
 17659 000006AC 26895D02                	mov	[es:di+2],bx ; 0 
 17660                                  
 17661                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17662                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17663                                  
 17664                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17665 000006B0 26C74504FF00            	mov	word [es:di+4],00FFh
 17666                                  ;SYSINIT:06E6h
 17667                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17668                                  	;mov	word [es:di+6],0
 17669                                  	; 11/12/2022
 17670                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17671 000006B6 26895D06                	mov	[es:di+6],bx ; 0
 17672                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17673                                  	;mov	word [es:di+8],0
 17674                                  	; 11/12/2022
 17675                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17676 000006BA 26895D08                	mov	[es:di+8],bx ; 0
 17677                                  
 17678 000006BE 5F                      	pop	di			; restore pointer to DOSINFO data
 17679 000006BF 07                      	pop	es
 17680                                  
 17681                                  	; 11/12/2022
 17682                                  	; ds = cs
 17683                                  	; 22/10/2022
 17684                                  	;push	cs
 17685                                  	;pop	ds
 17686                                  
 17687 000006C0 E80C05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17688                                  					;  can make disk system calls
 17689                                  					; tempcds trashes ds
 17690                                  	; 10/05/2019
 17691 000006C3 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17692                                  
 17693                                  	;if not ibmjapver
 17694                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17695                                  	;endif
 17696                                  
 17697                                  	; 22/10/2022
 17698                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17699                                  	;call	far ptr 70h:89Bh
 17700 000006C8 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17701                                  
 17702 000006CD FB                      	sti				; ints ok
 17703 000006CE FC                      	cld				; make sure
 17704                                  
 17705                                  ; 23/03/2019
 17706                                  
 17707                                  ;SYSINIT:069Ch
 17708                                  
 17709                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17710                                  ; of the way by putting it just below sysinit at end of memory.
 17711                                  
 17712 000006CF 8CCB                    	mov	bx,cs
 17713 000006D1 83EB10                  	sub	bx,10h
 17714 000006D4 8EC3                    	mov	es,bx
 17715 000006D6 31F6                    	xor	si,si
 17716 000006D8 89F7                    	mov	di,si
 17717 000006DA B98000                  	mov	cx,128
 17718 000006DD F3A5                    	rep	movsw
 17719                                  
 17720                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17721                                  	; 22/10/2022
 17722 000006DF 268C063600              	mov	[es:36h],es
 17723                                  
 17724                                   	; Set Process Data Block - Program Segment Prefix address
 17725                                  	; BX = PDB/PSP segment
 17726 000006E4 B450                            mov	ah,50h ; SET_CURRENT_PDB
 17727 000006E6 CD21                    	int	21h			; tell DOS we moved it
 17728                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17729                                  			; BX = segment address of new PSP
 17730                                  	; 22/10/2022
 17731                                  	; 27/03/2019
 17732 000006E8 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17733                                  
 17734 000006E9 0E                      	push	cs	
 17735 000006EA 1F                      	pop	ds
 17736                                  
 17737                                  	; set up temp. critical error handler
 17738 000006EB BA[A433]                	mov	dx,int24		; set up int 24 handler
 17739                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17740                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17741 000006EE B82425                  	mov	ax,2524h
 17742 000006F1 CD21                    	int	21h
 17743                                  
 17744 000006F3 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17745 000006F8 7405                            je      short no_err		   ;  N: continue            M029
 17746 000006FA BA[A238]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17747                                          ; 22/10/2022
 17748                                  	;call	print 			   ;		             M029
 17749                                  	; 12/12/2022
 17750 000006FD EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17751                                  no_err:
 17752                                  	; 12/05/2019
 17753                                  	;----------------------------------------------
 17754                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17755                                  	; 22/10/2022 - Retro DOS v4.0
 17756                                  	; 12/12/2022
 17757 000006FF BA[A833]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17758                                  p_dosinit_msg:
 17759 00000702 E87A2C                  	call	print			; Print message
 17760                                  	;----------------------------------------------
 17761                                  	
 17762                                  	; 11/12/2022
 17763                                  	; 22/10/2022
 17764                                  	; 23/03/2019 - Retro DOS v4.0
 17765                                  	;pop	ds			; start of free memory
 17766                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17767                                  	
 17768                                  	; 11/12/2022
 17769                                  	; 27/03/2019
 17770 00000705 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17771 00000709 1F                      	pop	ds ; */
 17772                                  
 17773 0000070A 08D2                    	or	dl,dl
 17774                                  	;jz	short nodrvset		; bios didn't say
 17775 0000070C 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17776                                  	;dec	dl			; A = 0
 17777                                  	; 18/12/2022
 17778 0000070E 4A                      	dec	dx
 17779 0000070F B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17780 00000711 CD21                    	int	21h			; select the disk
 17781                                  			; DOS - SELECT DISK
 17782                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17783                                  			; Return: AL = number of logical drives
 17784                                  nodrvset:
 17785                                  	;ifdef	dblspace_hooks
 17786                                  	;	....
 17787                                  	;	....
 17788                                  	;endif	
 17789                                  
 17790                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17791                                  
 17792                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17793                                  ; ----------------------------------------------------------------------------
 17794                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17795                                  
 17796                                  ProcessConfig:
 17797                                  	;; ds = cs ; 27/03/2019
 17798                                  	; 11/12/2022
 17799                                  	; ds <> cs	
 17800                                  
 17801                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17802                                  
 17803 00000713 E8FF17                  	call	doconf			; do pre-scan for dos=high/low
 17804                                  
 17805                                  	; 11/12/2022
 17806                                  	; 27/03/2019
 17807                                  	; ds = cs (at return from doconf)
 17808                                  
 17809                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17810                                  ; It will either be relocated to low memory, above the DOS data structures,
 17811                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17812                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17813                                  ; to tell the DOS data where the code has been placed, and to install the
 17814                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17815                                  ; must first initialize it in its present location and load the installable
 17816                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17817                                  ; relocate the DOS code into HiMem.
 17818                                  ;
 17819                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17820                                  ; to install the low memory stub (this must be done before allowing any
 17821                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17822                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17823                                  ; been patched.
 17824                                  
 17825                                  	; 22/10/2022 - Retro DOS v4.0
 17826                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17827                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17828                                  	; 11/12/2022
 17829 00000716 803E[6A02]00            	cmp	byte [runhigh],0
 17830 0000071B 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17831                                  
 17832                                  ;------ user chose to load high
 17833                                  
 17834                                  	; 22/10/2022
 17835                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17836                                  	; 11/12/2022
 17837                                  	; ds = cs
 17838 0000071D 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17839                                  
 17840                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17841                                  	; 27/03/2019
 17842                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17843                                  
 17844 00000721 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17845                                  	; 11/12/2022
 17846                                  	; ds = cs
 17847                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17848 00000723 FF1E[7B02]              	call	far [dos_segreinit]
 17849                                  
 17850 00000727 EB10                    	jmp	short do_multi_pass
 17851                                  
 17852                                  ;------ User chose to load dos low
 17853                                  
 17854                                  dont_install_stub:
 17855                                  	; 22/10/2022
 17856 00000729 31DB                    	xor	bx,bx			; M012
 17857                                  					; don't use int 21 call to alloc mem
 17858 0000072B E8D701                  	call	MovDOSLo		; move it !
 17859                                  
 17860 0000072E B80100                  	mov	ax,1			; dont install stub
 17861                                  	; 11/12/2022
 17862                                  	; ds = cs
 17863 00000731 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17864                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17865                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17866                                  	; 27/03/2019
 17867                                  ;do_multi_pass:
 17868                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17869                                  
 17870                                  	; 11/12/2022
 17871                                  	; ds =cs
 17872                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17873 00000735 FF1E[7B02]              	call	far [dos_segreinit]
 17874                                  do_multi_pass:
 17875 00000739 E81301                  	call	AllocFreeMem		; allocate all the free mem
 17876                                  					; & update [memhi] & [area]
 17877                                  					; start of free memory.
 17878                                  	;ifdef	dblspace_hooks
 17879                                  	;mov	bx,0			; magic backdoor to place int hooks
 17880                                  	;call	cs:MagicBackdoor
 17881                                  	;endif
 17882                                  
 17883                                  ; Now, process config.sys some more.  
 17884                                  ; Load the device drivers and install programs
 17885                                  
 17886                                  	; 22/10/2022
 17887                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17888                                  	; 11/12/2022
 17889                                  	; ds = cs
 17890 0000073C FE06[4903]              	inc	byte [multi_pass_id]
 17891 00000740 E86518                  	call	multi_pass		; load device drivers
 17892 00000743 E82825                  	call	ShrinkUMB
 17893 00000746 E84E25                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17894                                  	; 02/11/2022
 17895                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17896                                  	; 11/12/2022
 17897                                  	; ds = cs
 17898 00000749 FE06[4903]              	inc	byte [multi_pass_id]
 17899 0000074D E85818                  	call	multi_pass		; was load ifs (now does nothing)
 17900                                  
 17901                                  	;ifdef	dblspace_hooks
 17902                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17903                                  	;endif
 17904                                  
 17905                                  	; ds = cs
 17906                                  	
 17907 00000750 E81405                  	call	endfile			; setup fcbs, files, buffers etc
 17908                                  
 17909                                  	;ifdef	dblspace_hooks
 17910                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17911                                  	;endif
 17912                                  
 17913                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17914                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17915                                  ;with overlays called from installed programs
 17916                                  
 17917                                  	; 11/12/2022
 17918                                  	; ds = cs
 17919                                  
 17920                                  	;;mov	ax,Bios_Data ; 0070h
 17921                                  	;mov	ax,KERNEL_SEGMENT
 17922                                  	; 21/10/2022
 17923 00000753 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17924 00000756 8EC0                    	mov	es,ax			; point ES to bios data
 17925                                  
 17926 00000758 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17927                                  
 17928                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17929                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17930                                  	;test	byte [cs:install_flag],1
 17931                                  	; 11/12/2022
 17932                                  	; ds = cs
 17933 0000075E F606[4A03]01            	test	byte [install_flag],1
 17934                                  	;test	byte [cs:install_flag],have_install_cmd
 17935                                  					; are there install commands?
 17936 00000763 7407                    	jz	short dolast		; no, no need for further processing
 17937                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17938                                  	; 11/12/2022
 17939                                  	; ds =cs
 17940 00000765 FE06[4903]              	inc	byte [multi_pass_id]
 17941 00000769 E83C18                  	call	multi_pass		; execute install= commands
 17942                                  
 17943                                  dolast:
 17944                                  	
 17945                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17946                                  ;  free the confbot area used for config.sys and sysinit itself.
 17947                                  
 17948                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17949                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17950                                  ; anything, but just set up the ROM area for suballocation (or print
 17951                                  ; a message if HiMem is not available).
 17952                                  ;
 17953                                  ; There is also this little hack for CPM style DOS calls that needs to
 17954                                  ; be done when A20 is set...
 17955                                  
 17956                                  	; 11/12/2022
 17957                                  	; ds = cs
 17958                                  
 17959                                  	; 22/10/2022
 17960                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17961                                  	; 11/12/2022
 17962 0000076C 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17963 00000771 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17964 00000773 E83E01                  	call	LoadDOSHiOrLo
 17965                                  _@@_:
 17966                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17967                                  	; 11/12/2022
 17968                                  	; ds = cs
 17969 00000776 803E[6A02]00            	cmp	byte [runhigh],0
 17970                                  	;je	short _@@@
 17971 0000077B 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17972 0000077D E83004                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17973                                  _@@@:
 17974                                  
 17975                                  ; We are now done with CONFIG.SYS processing
 17976                                  
 17977                                  ConfigDone:
 17978                                  	; 12/12/2022
 17979                                  	; 22/10/2022
 17980                                  	;mov	byte [cs:donotshownum],1 
 17981                                  					; done with config.sys.
 17982                                  					; do not show line number message.
 17983                                  	;mov	es,[cs:area]
 17984                                  	; 12/12/2022
 17985                                  	; ds = cs
 17986                                  	; 27/03/2019
 17987 00000780 C606[D103]01            	mov	byte [donotshownum],1
 17988 00000785 8E06[E403]              	mov	es,[area]
 17989                                  
 17990 00000789 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17991 0000078B CD21                    	int	21h
 17992                                  			; DOS - 2+ - FREE MEMORY
 17993                                  			; ES = segment address of area to be freed
 17994                                  
 17995                                  	; 22/10/2022
 17996                                  	;test	word [cs:install_flag],2
 17997                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17998                                  	;test	byte [cs:install_flag],has_installed
 17999                                  	; 11/12/2022
 18000                                  	; ds = cs
 18001 0000078D F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18002                                  	;test	byte [install_flag],has_installed
 18003 00000792 741F                    	jz	short skip_free_sysinitbase ; no.
 18004                                  
 18005                                  ; set block from the old_area with impossible_owner_size.
 18006                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18007                                  ; handle install= command.
 18008                                  
 18009                                  	; 12/12/2022
 18010                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18011                                  	;push	bx
 18012                                  	
 18013                                  	; 22/10/2022
 18014                                  	;mov	es,[cs:old_area]
 18015                                  	;mov	bx,[cs:impossible_owner_size]
 18016                                  	; 12/12/2022
 18017                                  	; ds = cs
 18018 00000794 8E06[DA03]              	mov	es,[old_area]
 18019 00000798 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18020                                  	
 18021 0000079C B44A                    	mov	ah,4Ah ; SETBLOCK
 18022 0000079E CD21                    	int	21h
 18023                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18024                                  			; ES = segment address of block to change
 18025                                  			; BX = new size in paragraphs
 18026 000007A0 8CC0                    	mov	ax,es
 18027 000007A2 48                      	dec	ax
 18028 000007A3 8EC0                    	mov	es,ax			; point to arena
 18029                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18030 000007A5 26C70601000800          	mov	word [es:1],8
 18031                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18032 000007AC 26C70608005344          	mov	word [es:8],'SD'
 18033                                  	
 18034                                  	; 12/12/2022
 18035                                  	;pop	bx
 18036                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18037                                  
 18038                                  skip_free_sysinitbase:
 18039                                  	; 22/10/2022
 18040                                  	;cmp	byte [cs:runhigh],0
 18041                                  	; 12/12/2022
 18042                                  	; ds = cs
 18043 000007B3 803E[6A02]00            	cmp	byte [runhigh],0	
 18044 000007B8 7403                    	je	short _@@@@
 18045                                  
 18046 000007BA E8D502                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18047                                  
 18048                                  ; ----------------------------------------------------------------------------
 18049                                  
 18050                                  _@@@@:
 18051                                  	; 12/12/2022
 18052                                  	; ds = cs
 18053                                  	; 22/10/2022
 18054                                  	; 27/03/2019
 18055                                  	;push	cs
 18056                                  	;pop	ds			; point DS to sysinitseg
 18057                                  
 18058                                  ; set up the parameters for command
 18059                                  
 18060                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18061                                  ;;ifdef  MULTI_CONFIG
 18062                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18063                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18064                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18065                                  ;	; !!!
 18066                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18067                                  ;       ; !!!
 18068                                  ;	call    disable_autoexec        ; no, we should disable it
 18069                                  ;process_autoexec:
 18070                                  ;;endif	; !!!
 18071                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18072                                  ;	; !!!
 18073                                  
 18074                                  	; 22/10/2022 
 18075                                  	;mov     cl,[command_line]
 18076                                          ;mov     ch,0
 18077                                          ;inc     cx
 18078                                          ;mov     si,command_line	
 18079                                  	;add     si,cx
 18080                                          ;mov     byte [si],cr	; cr-terminate command line
 18081                                  
 18082                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18083                                  	; (SYSINIT:0809h)
 18084                                  	
 18085                                  	;mov	si,(offset command_line+1)
 18086 000007BD BE[AA02]                	mov	si,command_line+1
 18087 000007C0 1E                      	push    ds
 18088 000007C1 07                      	pop     es
 18089 000007C2 89F7                    	mov     di,si
 18090 000007C4 B1FF                    	mov     cl,0FFh ; -1
 18091                                  _@_loop:
 18092 000007C6 FEC1                    	inc     cl ; +1
 18093 000007C8 AC                      	lodsb
 18094 000007C9 AA                      	stosb
 18095 000007CA 08C0                    	or      al,al
 18096 000007CC 75F8                    	jnz     short _@_loop
 18097 000007CE 4F                      	dec     di
 18098 000007CF B00D                    	mov     al,0Dh
 18099 000007D1 AA                      	stosb			; cr-terminate command line
 18100 000007D2 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18101                                  
 18102                                  ; ----------------------------------------------------------------------------
 18103                                  
 18104                                  ;   Once we get to this point, the above code, which is below "retry"
 18105                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18106                                  ;   which follow....)
 18107                                  
 18108                                  retry:
 18109 000007D6 BA[5534]                	mov	dx,commnd	; now pointing to file description
 18110                                  
 18111                                  ; we are going to open the command interpreter and size it as is done in
 18112                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18113                                  ; there is not enough room for the command interpreter,exec will probably
 18114                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18115                                  ; here to catch it. this code is not perfect (for instance .exe command
 18116                                  ; interpreters are possible) because it does its sizing based on the
 18117                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18118                                  ; correctness to be usable.
 18119                                  
 18120                                  ; first, find out where the command interpreter is going to go.
 18121                                  
 18122 000007D9 52                      	push	dx		; save pointer to name
 18123 000007DA BBFFFF                  	mov	bx,0FFFFh
 18124 000007DD B448                    	mov	ah,48h	; ALLOC
 18125 000007DF CD21                            int     21h             ; get biggest piece
 18126 000007E1 B448                    	mov	ah,48h	; ALLOC
 18127 000007E3 CD21                    	int	21h		; second time gets it
 18128 000007E5 7243                    	jc	short memerrjx	; oooops
 18129                                  
 18130 000007E7 8EC0                    	mov	es,ax
 18131 000007E9 B449                    	mov	ah,49h	; DEALLOC
 18132 000007EB CD21                    	int	21h		; give it right back
 18133 000007ED 89DD                    	mov	bp,bx
 18134                                  
 18135                                  ; es:0 points to block,and bp is the size of the block in para.
 18136                                  
 18137                                  ; we will now adjust the size in bp down by the size of sysinit.
 18138                                  ; we need to do this because exec might get upset if some of the exec
 18139                                  ; data in sysinit is overlayed during the exec.
 18140                                  
 18141                                  	; 22/10/2022
 18142                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18143 000007EF 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18144 000007F3 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18145                                  
 18146                                  ; Note that the "config_wrkseg" environment data is a segment in
 18147                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18148                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18149                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18150                                  ; we need to make sure that there's no way Exec will stomp on that data
 18151                                  ; before it can copy it, and one way to do that is to make the available
 18152                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18153                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18154                                  ; of the current sysinit CS....
 18155                                  ;
 18156                                  ; The reason I use the term "paranoid" is because this code should have
 18157                                  ; slid the data required by Exec up to the very top of memory, because as
 18158                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18159                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18160                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18161                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18162                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18163                                  
 18164                                  	; 22/10/2022
 18165                                  	;mov	cx,[config_envlen]
 18166                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18167                                          ;mov	ax,[config_wrkseg]
 18168                                  ;no_env:
 18169                                  	; 22/10/2022
 18170                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18171 000007F5 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18172 000007F7 83C311                  	add	bx,11h		; add the sysinit php
 18173 000007FA 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18174 000007FC 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18175                                  
 18176                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18177 000007FE B8003D                          mov	ax,3D00h
 18178 00000801 F9                      	stc                     ; in case of int 24
 18179 00000802 CD21                    	int	21h
 18180 00000804 7241                    	jc	short comerr	; ooops
 18181                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18182                                  			; DS:DX -> ASCIZ filename
 18183                                  			; AL = access mode
 18184                                  			; 0 - read
 18185                                  	; 22/10/2022
 18186                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18187 00000806 89C3                            mov     bx,ax           ; handle in bx
 18188                                  
 18189                                  ;   If the standard command interpreter is being used, verify it is correct
 18190                                  
 18191                                  	; 22/10/2022
 18192                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18193                                  	;jne	short skip_validation ; yes
 18194                                  	;mov	dx,retry-4
 18195                                  	;mov	cx,4		;
 18196                                  	;mov	ah,READ		;
 18197                                  	;int	21h		;
 18198                                  	;cmp	byte [retry-4],0E9h
 18199                                  	;jne	short comerr
 18200                                  	;; 20/04/2019 - Retro DOS v4.0
 18201                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18202                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18203                                  	;jne	short comerr	;
 18204                                  
 18205                                  ;skip_validation:
 18206                                  	; 22/10/2022
 18207                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18208 00000808 31C9                    	xor	cx,cx
 18209 0000080A 31D2                    	xor	dx,dx
 18210                                  	;mov	ax,(LSEEK<<8)|2
 18211 0000080C B80242                  	mov	ax,4202h
 18212 0000080F F9                      	stc			;in case of int 24
 18213 00000810 CD21                    	int	21h		; get file size in dx:ax
 18214 00000812 7233                    	jc	short comerr
 18215                                  				; convert size in dx:ax to para in ax
 18216 00000814 83C00F                  	add	ax,15		; round up size for conversion to para
 18217 00000817 83D200                  	adc	dx,0
 18218 0000081A E8A903                  	call	off_to_para
 18219 0000081D B10C                    	mov	cl,12
 18220 0000081F D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18221 00000821 09D0                    	or	ax,dx		; ax is now # of para for file
 18222 00000823 83C010                  	add	ax,10h		; 100h byte php
 18223 00000826 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18224 00000828 7203                    	jb	short okld	; jump if yes.
 18225                                  
 18226                                  	; 22/10/2022
 18227                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18228                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18229                                  	; 02/11/2022
 18230                                  	;jmp	mem_err
 18231                                  	; 11/12/2022
 18232                                  	; ds = cs
 18233 0000082A E9D628                  	jmp	mem_err2
 18234                                  
 18235                                  ;memerrjx:
 18236                                  ;	mov	dx,badmem
 18237                                  ;	call	print
 18238                                  ;       jmp     short continue
 18239                                  
 18240                                  okld:
 18241 0000082D B43E                    	mov	ah,3Eh ; CLOSE
 18242 0000082F CD21                    	int	21h		; close file
 18243                                  
 18244                                  	; 22/10/2022
 18245 00000831 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18246                                  
 18247                                  	; 24/03/2019
 18248                                  
 18249 00000832 0E                      	push	cs		; point es to sysinitseg
 18250 00000833 07                      	pop	es
 18251 00000834 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18252                                  	; 22/10/2022
 18253                                  	;pop	dx              ; recover pointer to name
 18254                                  
 18255                                  ;;ifdef	MULTI_CONFIG
 18256                                  
 18257                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18258                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18259                                  ;   selection was made (in which case the CONFIG environment variable will be
 18260                                  ;   set to that selection).
 18261                                  
 18262                                  	; 23/10/2022
 18263                                  	;mov	cx,[config_envlen]
 18264                                  	;jcxz	no_envdata
 18265                                          ;mov	cx,[config_wrkseg]
 18266                                  ;no_envdata:
 18267                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18268                                  	;mov	[bx],cx
 18269                                  
 18270                                  ;;endif	;MULTI_CONFIG
 18271                                  
 18272                                  	; 23/10/2022
 18273                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18274                                  
 18275                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18276 00000837 8C4F04                  	mov	[bx+4],cs
 18277                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18278 0000083A 8C4F08                  	mov	[bx+8],cs
 18279                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18280 0000083D 8C4F0C                  	mov	[bx+12],cs
 18281                                  
 18282                                  	;mov	ax,(EXEC<<8) + 0
 18283                                  	; 23/10/2022
 18284 00000840 31C0                    	xor	ax,ax
 18285 00000842 B44B                    	mov	ah,4Bh        
 18286                                  
 18287 00000844 F9                      	stc                     ; in case of int 24
 18288 00000845 CD21                            int     21h             ; go start up command
 18289                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18290                                  			; DS:DX -> ASCIZ filename
 18291                                  			; ES:BX -> parameter block
 18292                                  			; AL = subfunc: load & execute program
 18293                                  	;push	cs
 18294                                  	;pop	ds
 18295                                  
 18296                                  	; 23/10/2022
 18297                                  	;push	dx		; push to balance fall-through pop
 18298                                  
 18299                                  ; note fall through if exec returns (an error)
 18300                                  comerr:
 18301                                  	; 23/10/2022
 18302                                  ;;ifdef	MULTI_CONFIG
 18303                                  	;cmp	byte [commnd4],0
 18304                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18305                                  	;cmp	byte [newcmd],0
 18306                                  	;je	short continue	; don't print err msg for defaults just yet
 18307                                  ;comerr2:
 18308                                  ;;endif
 18309 00000847 BA[A537]                        mov     dx,badcom	; want to print command error
 18310 0000084A E8062B                  	call	badfil
 18311                                  continue:
 18312                                  	; 23/10/2022
 18313                                  	;pop	dx
 18314                                  
 18315                                  ;;ifndef MULTI_CONFIG
 18316                                  	;jmp	stall
 18317                                  	; 24/10/2022
 18318                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18319 0000084D EBFE                    	jmp	short stall
 18320                                  ;;else
 18321                                  	; 23/10/2022
 18322                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18323                                  	;int	21h             ;
 18324                                  	;add	al,'A'          ;
 18325                                  	;mov	dl,al           ; DL == default drive letter
 18326                                  	;mov	si,commnd2
 18327                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18328                                  	;jne	short do_def2	; then try the 2nd alternate;
 18329                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18330                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18331                                  ;do_def2:			
 18332                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18333                                          ;jne	short do_alt    ; no
 18334                                  ;do_def3:
 18335                                  	;mov	si,commnd3
 18336                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18337                                  	;jne	short do_alt	; no
 18338                                  	;mov	si,commnd4
 18339                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18340                                  	;jne	short do_alt	; no
 18341                                  	;push	dx              ;
 18342                                  	;mov	dx,badcomprmpt
 18343                                  	;call	print		;
 18344                                  	;pop	dx              ; recover default drive letter in DL
 18345                                  ;request_input:			;
 18346                                  	;mov	ah,STD_CON_OUTPUT
 18347                                  	;int	21h             ;
 18348                                  	;push	dx              ;
 18349                                  	;mov	dl,'>'          ;
 18350                                  	;int	21h             ;
 18351                                  	;mov	bl,[tmplate+1]	;
 18352                                  	;mov	bh,0            ;
 18353                                  	;mov	byte [commnd+bx],0Dh
 18354                                  	;mov	dx,tmplate
 18355                                  	;mov	ah,STD_CON_STRING_INPUT
 18356                                  	;int	21h             ; read a line of input
 18357                                  	;mov	dx,crlfm	;
 18358                                  	;call	print           ;
 18359                                  	;pop	dx              ;
 18360                                  	;mov	bl,[tmplate+1]	;
 18361                                  	;or	bl,bl           ; was anything typed?
 18362                                  	;jz	short request_input ;
 18363                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18364                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18365                                  	;mov	word [command_line],0D00h
 18366                                  	;jmp	short do_exec   ;
 18367                                  ;do_alt:
 18368                                  	;push	ds
 18369                                  	;pop	es
 18370                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18371                                  	;mov	di,commnd	;
 18372                                  ;do_alt1:
 18373                                  	;lodsb			; copy the alternate, zapping it as we go,
 18374                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18375                                  	;stosb 			;
 18376                                  	;or	al,al		;
 18377                                  	;jnz	short do_alt1	;
 18378                                  	;mov	di,command_line
 18379                                  	;cmp	byte [si+2],':'
 18380                                  	;jne	short do_alt2	;
 18381                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18382                                  ;do_alt2:			;
 18383                                  	;lodsb			;
 18384                                  	;stosb			;
 18385                                  	;or	al,al           ;
 18386                                  	;jnz	short do_alt2   ;
 18387                                  	;mov	byte [di-1],cr
 18388                                  
 18389                                  ;;   Last but not least, see if we need to call disable_autoexec
 18390                                  
 18391                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18392                                  	;;cmp	[command_line-1],0
 18393                                          ;;jne	short do_exec   ;
 18394                                          ;;mov	[command_line-1],'/'
 18395                                  	;;call	disable_autoexec ;
 18396                                  
 18397                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18398                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18399                                  	;call	disable_autoexec
 18400                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18401                                  ;do_exec:
 18402                                  	;jmp     retry		;
 18403                                  
 18404                                  ;;endif	;MULTI_CONFIG
 18405                                  
 18406                                  ; 24/03/2019 - Retro DOS v4.0
 18407                                  
 18408                                  ; ----------------------------------------------------------------------
 18409                                  ; procedure : AllocFreeMem
 18410                                  ;
 18411                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18412                                  ; DOS is at temporary location when this call is being made
 18413                                  ;
 18414                                  ; Inputs : None
 18415                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18416                                  ;	   [area] & [memhi] set to the para value of the start of the
 18417                                  ;	   free memory.
 18418                                  ;
 18419                                  ; Uses   : AX, BX
 18420                                  ;
 18421                                  ; ----------------------------------------------------------------------
 18422                                  
 18423                                  	; 23/10/2022
 18424                                  AllocFreeMem:
 18425 0000084F BBFFFF                  	mov	bx,0FFFFh
 18426 00000852 B448                    	mov	ah,48h ; ALLOC
 18427 00000854 CD21                    	int	21h			; first time fails
 18428 00000856 B448                    	mov	ah,48h ; ALLOC
 18429 00000858 CD21                    	int	21h			; second time gets it
 18430                                  	; 11/12/2022
 18431                                  	; ds = cs
 18432                                  	;mov	[cs:area],ax
 18433                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18434 0000085A A3[E403]                	mov	[area],ax
 18435 0000085D A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18436 00000860 C3                      	retn				; start of free memory
 18437                                  				
 18438                                  	; include msbio.cl6
 18439                                  ; ----------------------------------------------------------------------
 18440                                  DOSLOMSG:
 18441 00000861 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18441 0000086A 7661696C61626C653A-
 18441 00000873 204C6F6164696E6720-
 18441 0000087C 444F53206C6F770D0A-
 18441 00000885 24                 
 18442                                  FEmsg:
 18443 00000886 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18443 0000088F 6F723A2043616E6E6F-
 18443 00000898 7420616C6C6F636174-
 18443 000008A1 65204D656D6F727920-
 18443 000008AA 666F7220444F530D0A-
 18443 000008B3 24                 
 18444                                  
 18445                                  ; ----------------------------------------------------------------------
 18446                                  ;
 18447                                  ; procedure : LoadDOSHiOrLo
 18448                                  ;
 18449                                  ;		Tries to move DOS into HMA. If it fails then loads
 18450                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18451                                  ;		moved; this just tries to allocate the HMA, and prints
 18452                                  ;		a message if this is not possible.
 18453                                  ;
 18454                                  ; ----------------------------------------------------------------------
 18455                                  
 18456                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18457                                  LoadDOSHiOrLo:
 18458                                  	; 27/03/2019 - Retro DOS v4.0
 18459                                  	; ds = cs
 18460 000008B4 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18461                                  	;jc	short LdngLo		; If that don't work...
 18462                                  	;retn
 18463                                  	; 18/12/2022
 18464 000008B7 731C                    	jnc	short LoadDosHi_ok
 18465                                  LdngLo:
 18466                                  	; 23/10/2022
 18467                                  	;push	cs
 18468                                  	;pop	ds
 18469                                  	; 11/12/2022
 18470                                  	; ds = cs
 18471 000008B9 B409                    	mov	ah,9
 18472 000008BB BA[6108]                	mov	dx,DOSLOMSG		; inform user that we are
 18473 000008BE CD21                    	int	21h			; loading low
 18474                                  
 18475                                  ;ifndef ROMDOS
 18476                                  	; actually move the dos, and reinitialize it.
 18477                                  
 18478 000008C0 BB0100                  	mov	bx,1				; M012
 18479                                  						;  use int 21 alloc for mem
 18480 000008C3 E83F00                  	call	MovDOSLo
 18481                                  	; 11/12/2022
 18482                                  	; ds = cs
 18483                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18484                                  	; 23/10/2022
 18485 000008C6 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18486                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18487                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18488 000008CA 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18489                                  	; 11/12/2022
 18490                                  	; ds = cs
 18491                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18492 000008CC FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18493                                  	
 18494                                  ;endif ; ROMDOS
 18495                                  	; 23/10/2022
 18496                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18497                                  	; 11/12/2022
 18498                                  	; ds = cs
 18499 000008D0 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18500                                  LoadDosHi_ok:	; 18/12/2022
 18501 000008D5 C3                      	retn
 18502                                  
 18503                                  ; ----------------------------------------------------------------------
 18504                                  ;
 18505                                  ; procedure : TryToMovDOSHi
 18506                                  ;
 18507                                  ;		This tries to move DOS into HMA.
 18508                                  ;		Returns CY if it failed.
 18509                                  ;		If it succeeds returns with carry cleared.
 18510                                  ;
 18511                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18512                                  ;		the A20 switching code in the low mem stub to be installed.
 18513                                  ; 
 18514                                  ; ----------------------------------------------------------------------
 18515                                  
 18516                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18517                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18518                                  TryToMovDOSHi:
 18519                                  	; 11/12/2022
 18520                                  	; 27/03/2019 - Retro DOS v4.0
 18521                                  	; ds = cs
 18522 000008D6 E81300                  	call	MovDOSHi
 18523 000008D9 7210                    	jc	short ttldhx
 18524                                  
 18525                                  ;ifndef ROMDOS
 18526                                  	; 23/10/2022
 18527                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18528                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18529                                  	; 11/12/2022
 18530                                  	; ds = cs
 18531 000008DB 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18532                                  ;else
 18533                                  ;	..
 18534                                  ;endif ; ROMDOS
 18535                                  
 18536                                  	; 11/12/2022
 18537                                  	; ds = cs
 18538 000008DF 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18539                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18540 000008E1 FF1E[7B02]              	call	far [dos_segreinit]
 18541                                  	;mov	byte [cs:runhigh],1
 18542 000008E5 C606[6A02]01            	mov	byte [runhigh],1
 18543 000008EA F8                      	clc
 18544                                  ttldhx:
 18545 000008EB C3                      	retn
 18546                                  
 18547                                  ; ----------------------------------------------------------------------
 18548                                  ;
 18549                                  ; procedure : MovDOSHi
 18550                                  ;
 18551                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18552                                  ;		For ROMDOS, the code is not actually moved, but the
 18553                                  ;		HMA is allocated and prepared for sub-allocation.
 18554                                  ;
 18555                                  ;		Returns : CY if it failed
 18556                                  ;
 18557                                  ; ----------------------------------------------------------------------
 18558                                  
 18559                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18560                                  MovDOSHi:
 18561                                  	; 14/05/2019
 18562                                  	; 27/03/2019 - Retro DOS v4.0
 18563                                  	; ds = cs
 18564 000008EC E8D700                  	call	AllocHMA
 18565 000008EF 7213                    	jc	short mdhx			; did we get HMA?
 18566 000008F1 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18567 000008F4 8EC0                    	mov	es,ax
 18568                                  
 18569                                  ;ifndef ROMDOS
 18570                                  	; actually move the BIOS and DOS
 18571                                  
 18572                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18573                                  	; 24/03/2019
 18574                                  	
 18575                                  	; 23/10/2022
 18576 000008F6 E83400                  	call	MovBIOS				; First move BIOS into HMA
 18577                                  
 18578                                  	; ES:DI points to free HMA after BIOS
 18579                                  	
 18580                                  	; 14/05/2019
 18581                                  	; 24/03/2019 - Retro DOS v4.0
 18582                                  	;xor	di,di
 18583                                  	
 18584                                  	; 23/10/2022
 18585                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18586                                  	; 11/12/2022
 18587                                  	; ds = cs
 18588 000008F9 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18589 000008FD E81100                  	call	MovDOS				; and move it
 18590                                  
 18591                                  	; ES:DI points to free HMA after DOS
 18592                                  ;else
 18593                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18594                                  ;
 18595                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18596                                  ;
 18597                                  ;endif ; ROMDOS
 18598                                  
 18599 00000900 E86102                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18600 00000903 F8                      	clc
 18601                                  mdhx:
 18602 00000904 C3                      	retn
 18603                                  
 18604                                  ; ----------------------------------------------------------------------
 18605                                  ;
 18606                                  ; procedure : MovDOSLo
 18607                                  ;
 18608                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18609                                  ;
 18610                                  ; ----------------------------------------------------------------------
 18611                                  
 18612                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18613                                  
 18614                                  ;ifndef ROMDOS
 18615                                  
 18616                                  MovDOSLo:
 18617                                  	; 14/05/2019
 18618                                  	; 27/03/2019 - Retro DOS v4.0
 18619                                  	; ds = cs
 18620 00000905 E84700                  	call	AllocMemForDOS			; incestuosly!!!
 18621                                  	
 18622                                  	; 23/10/2022
 18623                                  	; 14/05/2019
 18624                                  	;inc	ax  ; skip MCB
 18625                                  	
 18626 00000908 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18627                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18628                                  	; 24/03/2019
 18629                                  	
 18630                                  	; 23/10/2022
 18631 0000090A E82000                  	call	MovBIOS
 18632                                  
 18633                                  ;------ ES:DI points memory immediately after BIOS
 18634                                  
 18635                                  	; 14/05/2019
 18636                                  	; NOTE: 
 18637                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18638                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18639                                  
 18640                                  	; 24/03/2019 - Retro DOS v4.0
 18641                                  	;xor	di,di	
 18642                                  
 18643                                  	; 23/10/2022
 18644                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18645                                  	; 11/12/2022
 18646                                  	; ds = cs
 18647 0000090D 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18648                                  	;call	MovDOS
 18649                                  	;retn
 18650                                  	; 11/12/2022
 18651                                  	;jmp	short MovDOS
 18652                                  
 18653                                  ;endif ; ROMDOS
 18654                                  
 18655                                  ; 11/12/2022
 18656                                  
 18657                                  ; ----------------------------------------------------------------------
 18658                                  ;
 18659                                  ; procedure : MovDOS
 18660                                  ;
 18661                                  ;		Moves DOS code into requested area
 18662                                  ;
 18663                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18664                                  ;	     CX    - size of DOS code to be moved
 18665                                  ;
 18666                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18667                                  ;
 18668                                  ; ----------------------------------------------------------------------
 18669                                  
 18670                                  	; 11/12/2022
 18671                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18672                                  
 18673                                  ;ifndef ROMDOS
 18674                                  
 18675                                  MovDOS:
 18676                                  	; 14/05/2019
 18677                                  	; 27/03/2019 - Retro DOS v4.0
 18678                                  
 18679                                  	; 11/12/2022
 18680                                  	; ds = cs
 18681                                  
 18682                                  	; 23/10/2022
 18683                                  	;push	ds ; *//
 18684                                  	
 18685 00000911 06                      	push	es
 18686 00000912 57                      	push	di
 18687                                  
 18688                                  	; 11/12/2022
 18689 00000913 1E                      	push	ds ; *// ; 11/12/202
 18690                                  
 18691                                  	; 29/04/2019
 18692 00000914 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18693                                  	; 23/10/2022
 18694                                  	;lds	si,[cs:dosinit]
 18695                                  	;;mov	ax,si
 18696                                  
 18697 00000918 F3A4                    	rep	movsb
 18698                                  
 18699 0000091A 1F                      	pop	ds ; *// ; 11/12/2022
 18700                                  
 18701 0000091B 5B                      	pop	bx				; get back offset into which
 18702                                  						;  DOS was moved
 18703                                  
 18704 0000091C 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18705                                  						;  wants to run
 18706 00000920 29D8                    	sub	ax,bx
 18707 00000922 E8A102                  	call	off_to_para
 18708 00000925 5B                      	pop	bx				; get the segment at which
 18709                                  						;  we moved DOS into
 18710 00000926 29C3                    	sub	bx,ax				; Adjust segment
 18711                                  	
 18712                                  	; 11/12/2022
 18713                                  	; 23/10/2022
 18714                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18715                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18716                                  	; 11/12/2022
 18717 00000928 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18718                                  		
 18719                                  	; 27/03/2019
 18720                                  	;pop	ds ; *//
 18721                                  	; ds = cs
 18722                                  	;mov	[FINAL_DOS_LOCATION],bx
 18723                                  
 18724 0000092C C3                      	retn
 18725                                  
 18726                                  ;endif ;ROMDOS
 18727                                  
 18728                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18729                                  ; 24/03/2019
 18730                                  ; ----------------------------------------------------------------------
 18731                                  ;
 18732                                  ; procedure : MovBIOS
 18733                                  ;
 18734                                  ;		Moves BIOS code into requested segment
 18735                                  ;
 18736                                  ;	In : ES - segment to which BIOS is to be moved
 18737                                  ;		  ( it moves always into offset BCode_Start)
 18738                                  ;
 18739                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18740                                  ;
 18741                                  ; ----------------------------------------------------------------------
 18742                                  
 18743                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18744                                  
 18745                                  ;ifndef ROMDOS
 18746                                  
 18747                                  MovBIOS: ; proc	near
 18748                                  	; 11/12/2022
 18749 0000092D 1E                      	push	ds ; ds = cs	
 18750                                  	;
 18751                                  	; 23/10/2022
 18752                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18753                                  	; 17/09/2023
 18754 0000092E 8E1E[8702]              	mov	ds,[temp_bcode_seg]	
 18755                                  	;mov	si,BCODE_START ; mov si,30h
 18756                                  	; 09/12/2022
 18757 00000932 BE[3000]                	mov	si,BCODESTART
 18758 00000935 89F7                    	mov	di,si
 18759 00000937 B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18760 0000093A 29F1                    	sub	cx,si				; size of BIOS
 18761 0000093C D1E9                    	shr	cx,1				; Both the labels are para
 18762                                  						;  aligned
 18763 0000093E F3A5                    	rep	movsw
 18764                                  	
 18765                                  	; 11/12/2022
 18766 00000940 1F                      	pop	ds ; ds = cs
 18767                                  	;
 18768 00000941 06                      	push	es
 18769 00000942 57                      	push	di				; save end of BIOS
 18770 00000943 8CC0                    	mov	ax,es
 18771                                  	;
 18772                                  	; 11/12/2022
 18773                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18774                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18775                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18776                                  	; ds = cs
 18777 00000945 A3[0004]                	mov	[BCodeSeg],ax
 18778 00000948 FF1E[8502]              	call	far [seg_reinit_ptr]
 18779                                  	;
 18780 0000094C 5F                      	pop	di
 18781 0000094D 07                      	pop	es				; get back end of BIOS
 18782 0000094E C3                      	retn
 18783                                  
 18784                                  ;MovBIOS endp
 18785                                  
 18786                                  ;endif ; ROMDOS
 18787                                  
 18788                                  ; 11/12/2022
 18789                                  %if 0
 18790                                  
 18791                                  ; 24/03/2019
 18792                                  
 18793                                  ; ----------------------------------------------------------------------
 18794                                  ;
 18795                                  ; procedure : MovDOS
 18796                                  ;
 18797                                  ;		Moves DOS code into requested area
 18798                                  ;
 18799                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18800                                  ;	     CX    - size of DOS code to be moved
 18801                                  ;
 18802                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18803                                  ;
 18804                                  ; ----------------------------------------------------------------------
 18805                                  
 18806                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18807                                  
 18808                                  ;ifndef ROMDOS
 18809                                  
 18810                                  MovDOS:
 18811                                  	; 14/05/2019
 18812                                  	; 27/03/2019 - Retro DOS v4.0
 18813                                  
 18814                                  	; 11/12/2022
 18815                                  	; ds = cs
 18816                                  
 18817                                  	; 23/10/2022
 18818                                  	;push	ds ; *//
 18819                                  	
 18820                                  	push	es
 18821                                  	push	di
 18822                                  
 18823                                  	; 11/12/2022
 18824                                  	push	ds ; *// ; 11/12/202
 18825                                  
 18826                                  	; 29/04/2019
 18827                                  	lds	si,[dosinit] ; 11/12/2022
 18828                                  	; 23/10/2022
 18829                                  	;lds	si,[cs:dosinit]
 18830                                  	;;mov	ax,si
 18831                                  
 18832                                  	rep	movsb
 18833                                  
 18834                                  	pop	ds ; *// ; 11/12/2022
 18835                                  
 18836                                  	pop	bx				; get back offset into which
 18837                                  						;  DOS was moved
 18838                                  
 18839                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18840                                  						;  wants to run
 18841                                  	sub	ax,bx
 18842                                  	call	off_to_para
 18843                                  	pop	bx				; get the segment at which
 18844                                  						;  we moved DOS into
 18845                                  	sub	bx,ax				; Adjust segment
 18846                                  	
 18847                                  	; 11/12/2022
 18848                                  	; 23/10/2022
 18849                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18850                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18851                                  	; 11/12/2022
 18852                                  	mov	[CURRENT_DOS_LOCATION],bx
 18853                                  		
 18854                                  	; 27/03/2019
 18855                                  	;pop	ds ; *//
 18856                                  	; ds = cs
 18857                                  	;mov	[FINAL_DOS_LOCATION],bx
 18858                                  
 18859                                  	retn
 18860                                  
 18861                                  ;endif ;ROMDOS
 18862                                  
 18863                                  %endif
 18864                                  
 18865                                  ; ----------------------------------------------------------------------
 18866                                  ;
 18867                                  ; procedure : AllocMemForDOS
 18868                                  ;
 18869                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18870                                  ;
 18871                                  ;	Out : AX - seg of allocated memoryblock
 18872                                  ;
 18873                                  ; ----------------------------------------------------------------------
 18874                                  
 18875                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18876                                  
 18877                                  ;ifndef ROMDOS
 18878                                  
 18879                                  AllocMemForDOS:
 18880                                  	; 11/12/2022
 18881                                  	; 14/05/2019
 18882                                  	; 27/03/2019 - Retro DOS v4.0
 18883                                  	; ds = cs
 18884                                  	;mov	ax,BCode_end
 18885                                  	;sub	ax,BCode_start		; BIOS code size
 18886                                  	; 23/10/2022
 18887 0000094F B8001A                  	mov	ax,BCODE_END ; 1A60h
 18888                                  	;sub	ax,BCODE_START ; 30h
 18889                                  	; 09/12/2022
 18890 00000952 2D[3000]                	sub	ax,BCODESTART 
 18891                                  	; 24/03/2019 - Retro DOS v4.0 
 18892                                  	; 02/11/2022
 18893                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18894                                  	; 11/12/2022
 18895                                  	; ds = cs
 18896 00000955 0306[7F02]              	add	ax,[lo_doscod_size]
 18897 00000959 83C00F                  	add	ax,15
 18898 0000095C E86702                  	call	off_to_para			; convert to para
 18899                                  	; 23/10/2022
 18900                                  	; 14/05/2019
 18901                                  	;inc	ax ; + 1 paragraph for MCB
 18902 0000095F 09DB                    	or	bx,bx				; M012
 18903 00000961 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18904 00000963 741A                    	jz	short update_arena		; M012
 18905 00000965 B448                    	mov	ah,48h				; request DOS
 18906 00000967 CD21                    	int	21h
 18907 00000969 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18908                                   	; 23/10/2022
 18909                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18910 0000096B 83E803                  	sub	ax,3				; Take care ORG 30h of
 18911                                  						;  BIOS code
 18912 0000096E 8EC0                    	mov	es,ax
 18913                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18914                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18915                                  	; 14/05/2019
 18916                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18917                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18918                                  	; 23/10/2022
 18919 00000970 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18920 00000977 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18921                                  
 18922 0000097E C3                      	retn
 18923                                  
 18924                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18925                                  ;	  using DOS itself causes an arena to be generated.
 18926                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18927                                  ;	  assume that the device drivers are loaded into
 18928                                  ;	  the first arena. For this reason, MagicDrv's
 18929                                  ;	  main device driver header arena is manually
 18930                                  ;	  truncated from the arena chain, and the space
 18931                                  ;	  for DOS is allocated using the following
 18932                                  ;	  simple code, which also assumes that the
 18933                                  ;	  first arena is the free one where DOS's low
 18934                                  ;	  stub will go.
 18935                                  ;
 18936                                  ; M012 : BEGIN
 18937                                  
 18938                                  	; 23/10/2022
 18939                                  update_arena:
 18940 0000097F 1E                      	push	ds ; ds = cs
 18941 00000980 57                      	push	di
 18942 00000981 51                      	push	cx
 18943 00000982 52                      	push	dx
 18944                                  	; 23/10/2022
 18945                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18946                                  	; 11/12/2022
 18947                                  	; ds = cs 
 18948 00000983 C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18949 00000987 4F                      	dec	di
 18950 00000988 4F                      	dec	di				; Arena head is immediately
 18951                                  						;  before sysvar
 18952 00000989 8E05                    	mov	es,[di]				; es = arena head
 18953                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18954 0000098B 268B0E0300              	mov	cx,[es:3]
 18955 00000990 39D9                    	cmp	cx,bx				; is it sufficient ?
 18956 00000992 7227                    	jb	short FatalErr			; no, fatal error
 18957                                  
 18958                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18959 00000994 268A160000              	mov	dl,[es:0]
 18960 00000999 8CC0                    	mov	ax,es
 18961 0000099B 01D8                    	add	ax,bx				; ax = new arena head
 18962 0000099D 8905                    	mov	[di],ax				; store it in DOS data area
 18963 0000099F 8ED8                    	mov	ds,ax
 18964                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18965 000009A1 88160000                	mov	[0],dl
 18966                                  	;mov	word [ARENA.OWNER],0		; free
 18967 000009A5 C70601000000            	mov	word [1],0
 18968 000009AB 29D9                    	sub	cx,bx				; size of the new block
 18969                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18970 000009AD 890E0300                	mov	[3],cx
 18971 000009B1 8CC0                    	mov	ax,es				; return seg to the caller
 18972                                  	; 23/10/2022
 18973                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18974 000009B3 83E803                  	sub	ax,3				;  BIOS code
 18975 000009B6 5A                      	pop	dx
 18976 000009B7 59                      	pop	cx
 18977 000009B8 5F                      	pop	di
 18978 000009B9 1F                      	pop	ds ; ds = cs
 18979 000009BA C3                      	retn
 18980                                  ;
 18981                                  ; M012 : END
 18982                                  ;
 18983                                  FatalErr:
 18984 000009BB 0E                      	push	cs
 18985 000009BC 1F                      	pop	ds
 18986 000009BD BA[8608]                	mov	dx,FEmsg
 18987 000009C0 B409                    	mov	ah,9
 18988 000009C2 CD21                    	int	21h 		; DOS - PRINT STRING
 18989                                  				; DS:DX -> string terminated by "$"
 18990                                          ;jmp	stall
 18991                                  	; 23/10/2022
 18992 000009C4 FA                      	cli
 18993 000009C5 F4                      	hlt
 18994                                  
 18995                                  ;endif ;ROMDOS
 18996                                  
 18997                                  ; 25/03/2019 - Retro DOS v4.0
 18998                                  
 18999                                  ; ----------------------------------------------------------------------
 19000                                  ;
 19001                                  ; procedure : AllocHMA
 19002                                  ;
 19003                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19004                                  ;	  up there. If it gets any sort of error, it will return with
 19005                                  ;	  carry set so that we can resort to running low.
 19006                                  ;
 19007                                  ;	It also returns ES: -> 0ffffh if it returns success
 19008                                  ;
 19009                                  ; ----------------------------------------------------------------------
 19010                                  
 19011                                  AllocHMA:
 19012                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19013                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19014                                  ;		   been deleted because it can be recycled for skipping the
 19015                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19016                                  ;		   in the case of a pre-286.
 19017                                  
 19018                                  ;;	see if we're running on a pre-286. If not, force low.
 19019                                  ;
 19020                                  ;	xor	ax,ax
 19021                                  ;	pushf			; save flags (like int)
 19022                                  ;	push	ax
 19023                                  ;	popf
 19024                                  ;	pushf
 19025                                  ;	pop	ax
 19026                                  ;	popf			; restore original flags (like int)
 19027                                  ;	and	ax,0F000h
 19028                                  ;	cmp	ax,0F000h	; 8088/8086?
 19029                                  ;	jz	short grab_hma_error
 19030                                  
 19031                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19032                                  	; (SYSINIT:0A26h)
 19033                                  
 19034 000009C6 1E                      	push	ds
 19035                                  	;;mov	ax,Bios_Data
 19036                                  	;mov	ax,KERNEL_SEGMENT
 19037                                  	; 21/10/2022
 19038 000009C7 B87000                  	mov	ax,DOSBIODATASEG
 19039 000009CA 8ED8                    	mov	ds,ax
 19040                                  
 19041 000009CC E84A00                  	call	IsXMSLoaded
 19042 000009CF 7545                    	jnz	short grabhma_error
 19043                                  
 19044 000009D1 B81043                  	mov	ax,4310h
 19045 000009D4 CD2F                    	int	2Fh		; get the vector into es:bx
 19046                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19047                                  		; Return: ES:BX -> driver entry point
 19048                                  
 19049 000009D6 891E[0E00]              	mov	[xms],bx
 19050                                  	;mov	[0Eh], bx
 19051 000009DA 8C06[1000]              	mov	[xms+2],es
 19052                                  	;mov	[10h],es
 19053                                  
 19054 000009DE B401                    	mov	ah,1		; request HMA
 19055 000009E0 BAFFFF                  	mov	dx,0FFFFh
 19056                                  	;call	dword ptr ds:0Eh
 19057 000009E3 FF1E[0E00]              	call	far [xms]
 19058 000009E7 48                      	dec	ax
 19059 000009E8 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19060                                  
 19061                                  ;------ Himem may be lying because it has allocated mem for int 15
 19062                                  
 19063 000009EA B488                    	mov	ah,88h
 19064 000009EC CD15                    	int	15h
 19065                                  		; Get Extended Memory Size
 19066                                  		; Return: CF clear on success
 19067                                  		; AX = size of memory above 1M in K
 19068 000009EE 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19069                                  	;jb	short grabhma_error
 19070                                  	; 11/12/2022
 19071 000009F1 7224                    	jb	short grabhma_err ; cf=1
 19072                                  allocHMA_1:
 19073 000009F3 B405                    	mov	ah,5		; localenableA20
 19074                                  	;call	dword ptr ds:0Eh
 19075 000009F5 FF1E[0E00]              	call	far [xms]
 19076 000009F9 48                      	dec	ax
 19077 000009FA 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19078                                  
 19079 000009FC E88901                  	call	IsVDiskInstalled
 19080 000009FF 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19081                                  
 19082 00000A01 B8FFFF                  	mov	ax,0FFFFh
 19083 00000A04 8EC0                    	mov	es,ax
 19084 00000A06 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19085 00000A0D 26813E10003412          	cmp	word [es:10h],1234h
 19086                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19087                                  	; 11/12/2022
 19088 00000A14 7401                    	je	short allocHMA_ok	
 19089                                  
 19090                                  ; 11/12/2022
 19091                                  ;	; 11/12/2022
 19092                                  ;	; cf=0
 19093                                  ;	;clc
 19094                                  ;	pop	ds
 19095                                  ;	retn
 19096                                  
 19097                                  grabhma_error:
 19098 00000A16 F9                      	stc
 19099                                  	; 11/12/022
 19100                                  grabhma_err:	; cf=1
 19101                                  allocHMA_ok:	; cf=0
 19102 00000A17 1F                      	pop	ds
 19103 00000A18 C3                      	retn
 19104                                  
 19105                                  ; ----------------------------------------------------------------------
 19106                                  ;
 19107                                  ; procedure : IsXMSLoaded
 19108                                  ;
 19109                                  ;             Checks whether a XMS driver is loaded
 19110                                  ;
 19111                                  ; Returns : Z flag set if XMS driver loaded
 19112                                  ;           Z flag reset if no XMS drivers are present
 19113                                  ;
 19114                                  ; ----------------------------------------------------------------------
 19115                                  
 19116                                  IsXMSLoaded:
 19117 00000A19 B80043                  	mov	ax,4300h
 19118 00000A1C CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19119                                  				; Return: AL = 80h XMS driver installed
 19120                                  				; AL <> 80h no driver
 19121 00000A1E 3C80                    	cmp	al,80h		; XMS installed?
 19122 00000A20 C3                      	retn
 19123                                  
 19124                                  ; ----------------------------------------------------------------------
 19125                                  ; procedure : FTryToMovDOSHi
 19126                                  ;
 19127                                  ;		Called from HMA suballoc calls
 19128                                  ;	
 19129                                  ; ----------------------------------------------------------------------
 19130                                  
 19131                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19132                                  	; (SYSINIT:0A84h)
 19133                                  
 19134                                  FTryToMovDOSHi:	; proc	far
 19135                                  
 19136 00000A21 50                      	push	ax
 19137 00000A22 53                      	push	bx
 19138 00000A23 51                      	push	cx
 19139 00000A24 52                      	push	dx
 19140 00000A25 56                      	push	si
 19141 00000A26 57                      	push	di
 19142 00000A27 1E                      	push	ds
 19143 00000A28 06                      	push	es
 19144                                  
 19145                                  	; 23/10/2022
 19146                                  	; 27/03/2019 - Retro DOS v4.0
 19147                                  	; 11/12/2022
 19148 00000A29 0E                      	push	cs
 19149 00000A2A 1F                      	pop	ds
 19150                                  
 19151                                  	;cmp	byte [cs:runhigh],0FFh
 19152                                  	; 11/12/2022
 19153 00000A2B 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19154 00000A30 7503                    	jne	short _ftymdh_1
 19155                                  
 19156                                  	; ds = cs
 19157 00000A32 E8A1FE                  	call	TryToMovDOSHi
 19158                                  _ftymdh_1:
 19159 00000A35 07                      	pop	es
 19160 00000A36 1F                      	pop	ds
 19161 00000A37 5F                      	pop	di
 19162 00000A38 5E                      	pop	si
 19163 00000A39 5A                      	pop	dx
 19164 00000A3A 59                      	pop	cx
 19165 00000A3B 5B                      	pop	bx
 19166 00000A3C 58                      	pop	ax
 19167                                  
 19168 00000A3D CB                      	retf
 19169                                  
 19170                                  ; ----------------------------------------------------------------------
 19171                                  ;
 19172                                  ; following piece of code will be moved into a para boundary. And the para
 19173                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19174                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19175                                  ; to determine free extended memory.
 19176                                  ;
 19177                                  ; For more details read "power programming" column by Ray Duncan in the
 19178                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19179                                  ;
 19180                                  ; ----------------------------------------------------------------------
 19181                                  
 19182                                  StartVDHead:
 19183                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19184                                  
 19185 00000A3E 00000000                	dd	0		; link to next device driver
 19186 00000A42 0080                    	dw	8000h		; device attribute
 19187 00000A44 0000                    	dw	0		; strategy routine offset
 19188 00000A46 0000                    	dw	0		; interrupt routine offset
 19189 00000A48 01                      	db	1		; number of units
 19190                                  	;db	7 dup(0) 
 19191 00000A49 00<rep 7h>              	times	7 db 0 		; reserved area
 19192                                  VDiskSig1:
 19193 00000A50 564449534B              	db	'VDISK'
 19194                                  
 19195                                  VLEN1	equ	($-VDiskSig1)
 19196                                  
 19197 00000A55 202056332E33            	db	'  V3.3'	; vdisk label
 19198                                  	;db	15 dup (0)	; pad
 19199 00000A5B 00<rep Fh>              	times	15 db 0
 19200 00000A6A 0000                    	dw	0		; bits 0-15 of free HMA
 19201 00000A6C 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19202                                  VDInt19:
 19203 00000A6D EA                      	db	0EAh		; jmp to old vector
 19204                                  OldVDInt19:
 19205 00000A6E 00000000                	dd	0		; Saved int 19 vector
 19206                                  
 19207                                  EndVDHead: ; label byte
 19208                                  
 19209                                  VDiskHMAHead:	
 19210 00000A72 000000                  	db	0,0,0		; non-bootable disk
 19211                                  VDiskSig2:
 19212 00000A75 564449534B              	db	'VDISK'
 19213                                  
 19214                                  VLEN2	equ	($-VDiskSig2)
 19215                                  
 19216 00000A7A 332E33                  	db	'3.3'		; OEM - signature
 19217 00000A7D 8000                    	dw	128		; number of bytes/sector
 19218 00000A7F 01                      	db	1		; sectors/cluster
 19219 00000A80 0100                    	dw	1		; reserved sectors
 19220 00000A82 01                      	db	1		; number of FAT copies
 19221 00000A83 4000                    	dw	64		; number of root dir entries
 19222 00000A85 0002                    	dw	512		; number of sectors
 19223 00000A87 FE                      	db	0FEh		; media descriptor
 19224 00000A88 0600                    	dw	6		; number of sectors/FAT
 19225 00000A8A 0800                    	dw	8		; sectors per track
 19226 00000A8C 0100                    	dw	1		; number of heads
 19227 00000A8E 0000                    	dw	0		; number of hidden sectors
 19228 00000A90 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19229                                  
 19230                                  EndVDiskHMAHead: ; label byte
 19231                                  
 19232                                  ; ----------------------------------------------------------------------
 19233                                  ;
 19234                                  ; procedure : InstVDiskHeader
 19235                                  ;
 19236                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19237                                  ;	      It puts a 32 byte header at 10000:0 and
 19238                                  ;	      another header at (seg of int19):0
 19239                                  ;
 19240                                  ; Inputs : None
 19241                                  ;
 19242                                  ; Outputs : None
 19243                                  ;
 19244                                  ; USES : DS,SI,AX,CX,DX
 19245                                  ;
 19246                                  ; ----------------------------------------------------------------------
 19247                                  
 19248                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19249                                  
 19250                                  InstVDiskHeader:
 19251 00000A92 31C0                    	xor	ax,ax
 19252 00000A94 8ED8                    	mov	ds,ax			; seg of int vect table
 19253                                  
 19254                                  ;-------------- save old int 19 vector
 19255                                  
 19256                                  	; 23/10/2022
 19257 00000A96 A16400                  	mov	ax,[19h*4]
 19258                                  	;mov	[OldVDInt19],ax
 19259 00000A99 2EA3[6E0A]              	mov	[cs:OldVDInt19],ax
 19260 00000A9D A16600                  	mov	ax,[19h*4+2]
 19261                                  	;mov	[OldVDInt19+2],ax
 19262 00000AA0 2EA3[700A]              	mov	[cs:OldVDInt19+2],ax
 19263                                  
 19264                                  ;-------------- calculate seg of new int 19 handler
 19265                                  
 19266 00000AA4 B448                    	mov	ah,48h			; allocate memory
 19267                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19268                                  	; 23/10/2022
 19269 00000AA6 BB0400                  	mov	bx,4
 19270 00000AA9 CD21                    	int	21h
 19271                                  
 19272                                  ;	if carry, fatal hanging error!!!!!
 19273                                  
 19274 00000AAB 48                      	dec	ax			; point to arena
 19275 00000AAC 8EC0                    	mov	es,ax
 19276                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19277 00000AAE 26C70601000800          	mov	word [es:1],8
 19278                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19279 00000AB5 26C70608005343          	mov	word [es:8],'SC'
 19280 00000ABC 40                      	inc	ax
 19281 00000ABD 8EC0                    	mov	es,ax			; get back to allocated memory
 19282                                  
 19283                                  ;-------------- install new int 19 vector
 19284                                  
 19285 00000ABF FA                      	cli				; no reboots at this time
 19286                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19287 00000AC0 C70664002F00            	mov	word [19h*4],47
 19288 00000AC6 A36600                  	mov	[19h*4+2],ax
 19289                                  
 19290                                  ;-------------- move the code into proper place
 19291                                  
 19292                                  	;mov	cx,(EndVDHead-StartVDHead)
 19293 00000AC9 B93400                  	mov	cx,52
 19294 00000ACC BE[3E0A]                	mov	si,StartVDHead
 19295 00000ACF 31FF                    	xor	di,di
 19296 00000AD1 0E                      	push	cs
 19297 00000AD2 1F                      	pop	ds
 19298 00000AD3 FC                      	cld
 19299 00000AD4 F3A4                    	rep	movsb
 19300 00000AD6 FB                      	sti				; BUGBUG is sti OK now?
 19301                                  
 19302                                  ;-------------- mov the HMA VDisk head into HMA
 19303                                  
 19304                                  	; 23/10/2022
 19305 00000AD7 57                      	push	di
 19306 00000AD8 06                      	push	es
 19307                                  
 19308 00000AD9 B8FFFF                  	mov	ax,0FFFFh
 19309 00000ADC 8EC0                    	mov	es,ax
 19310 00000ADE BF1000                  	mov	di,10h
 19311                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19312 00000AE1 B92000                  	mov	cx,32
 19313 00000AE4 BE[720A]                	mov	si,VDiskHMAHead
 19314 00000AE7 F3A4                    	rep	movsb			; ds already set to cs
 19315                                  
 19316 00000AE9 5F                      	pop	di
 19317 00000AEA 07                      	pop	es
 19318                                  
 19319 00000AEB C3                      	retn
 19320                                  
 19321                                  ; ----------------------------------------------------------------------
 19322                                  ; procedure : ClrVDISKHeader
 19323                                  ;
 19324                                  ;		Clears the first 32 bytes at 1MB boundary
 19325                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19326                                  ;		left by previous DOS=HIGH session
 19327                                  ;
 19328                                  ; ----------------------------------------------------------------------
 19329                                  
 19330                                  struc desc
 19331 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19332 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19333 00000004 ??                       .hi_byte:	resb 	1		; address
 19334 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19335 00000006 ????                     .reserved:	resw	1		;
 19336                                   .size:
 19337                                  endstruc
 19338                                  
 19339                                  		; 23/10/2022
 19340                                  bmove:		;label byte
 19341                                  
 19342                                  dummy:		;times desc.size db 0	; desc	<>
 19343 00000AEC 00<rep 8h>              		times 8 db 0		 
 19344                                  gdt:		;times desc.size db 0	; desc	<>
 19345 00000AF4 00<rep 8h>              		times 8 db 0
 19346 00000AFC FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19347 00000AFE 0000                    		dw	0
 19348 00000B00 00                      		db	0
 19349 00000B01 93                      		db	93h
 19350 00000B02 0000                    		dw	0
 19351 00000B04 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19352 00000B06 0000                    		dw	0
 19353 00000B08 10                      		db	10h
 19354 00000B09 93                      		db	93h
 19355 00000B0A 0000                    		dw	0
 19356                                  
 19357                                  rombios_code:	;times desc.size db 0	; desc	<>
 19358 00000B0C 00<rep 8h>              		times 8 db 0
 19359                                  temp_stack:	;times desc.size db 0	; desc	<>
 19360 00000B14 00<rep 8h>              		times 8 db 0
 19361                                  
 19362 00000B1C 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19363                                  
 19364                                  
 19365                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19366                                  
 19367                                  ClrVDISKHeader:	; proc	near
 19368                                  
 19369                                  ;;-----------------------------------------------------------	      ;I070
 19370                                  ;; The following workaround get around a problem with the	      ;I070
 19371                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19372                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19373                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19374                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19375                                  ;; move crashes the system. We can do this because these	      ;I070
 19376                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19377                                  ;								      ;I070
 19378                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19379                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19380                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19381                                  ;                                      ; Check for Tortugas...	      ;I070
 19382                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19383                                  ;               je      short ClrVDISKno                              ;I070
 19384                                  ;                                      ; Check for mod 30-286	      ;I070
 19385                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19386                                  ;               jne     short ClrVDISKok			      ;I070
 19387                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19388                                  ;								      ;I070
 19389                                  ;ClrVDISKok:							      ;I070
 19390                                  ;-----------------------------------------------------------	      ;I070
 19391                                  
 19392                                  	; 12/12/2022
 19393                                  	; ds = cs
 19394                                  
 19395 00000B3C 06                      	push	es
 19396 00000B3D 8CC8                    	mov	ax,cs
 19397 00000B3F 89C2                    	mov	dx,ax
 19398 00000B41 B10C                    	mov	cl,12
 19399 00000B43 D3EA                    	shr	dx,cl
 19400 00000B45 B104                    	mov	cl,4
 19401 00000B47 D3E0                    	shl	ax,cl
 19402 00000B49 05[1C0B]                	add	ax,ClrdVDISKHead
 19403 00000B4C 80D200                  	adc	dl,0
 19404                                  
 19405                                  	;; 23/10/2022
 19406                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19407                                  	;mov	[cs:src_desc+2],ax
 19408                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19409                                  	;mov	[cs:src_desc+4],dl
 19410                                  	; 12/12/2022
 19411                                  	;mov	[src_desc+desc.lo_word],ax
 19412 00000B4F A3[FE0A]                	mov	[src_desc+2],ax
 19413                                  	;mov	[src_desc+desc.hi_byte],dl
 19414 00000B52 8816[000B]              	mov	[src_desc+4],dl
 19415                                  
 19416 00000B56 B91000                  	mov	cx,16	; 16 words
 19417 00000B59 0E                      	push	cs
 19418 00000B5A 07                      	pop	es
 19419 00000B5B BE[EC0A]                	mov	si,bmove
 19420 00000B5E B487                    	mov	ah,87h
 19421 00000B60 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19422                                  			; CX = number of words to move 
 19423                                  			; ES:SI -> global descriptor table
 19424                                  			; Return: CF set on error, AH = status
 19425 00000B62 07                      	pop	es
 19426 00000B63 C3                      	retn
 19427                                  
 19428                                  ; ----------------------------------------------------------------------
 19429                                  ;
 19430                                  ; procedure : SaveFreeHMAPtr
 19431                                  ;
 19432                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19433                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19434                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19435                                  ;		the offset.
 19436                                  ;
 19437                                  ; Inputs : ES:DI - pointer to free HMA
 19438                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19439                                  ;
 19440                                  ; ----------------------------------------------------------------------
 19441                                  
 19442                                  SaveFreeHMAPtr:
 19443 00000B64 8CC3                    	mov	bx,es
 19444 00000B66 B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19445 00000B69 29D8                    	sub	ax,bx
 19446 00000B6B 83C70F                  	add	di,15			; para round
 19447 00000B6E 83E7F0                  	and	di,0FFF0h
 19448 00000B71 B104                    	mov	cl,4
 19449 00000B73 D3E0                    	shl	ax,cl
 19450 00000B75 29C7                    	sub	di,ax
 19451 00000B77 1E                      	push	ds
 19452                                  	;;mov	ax,Bios_Data ; 0070h
 19453                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19454                                  	; 21/10/2022
 19455 00000B78 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19456 00000B7B 8ED8                    	mov	ds,ax
 19457 00000B7D 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19458 00000B81 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19459 00000B86 1F                      	pop	ds
 19460 00000B87 C3                      	retn
 19461                                  
 19462                                  ; ----------------------------------------------------------------------
 19463                                  ;
 19464                                  ; procedure : IsVDiskInstalled
 19465                                  ;
 19466                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19467                                  ;		& INT 19 vector
 19468                                  ;
 19469                                  ; Inputs  : A20 flag should be ON
 19470                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19471                                  ;
 19472                                  ; ----------------------------------------------------------------------
 19473                                  
 19474                                  IsVDiskInstalled:
 19475 00000B88 31C0                    	xor	ax,ax
 19476 00000B8A 8ED8                    	mov	ds,ax
 19477 00000B8C 8E1E4E00                	mov	ds,[19*4+2]
 19478                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19479                                  	; 23/10/2022
 19480 00000B90 BE1200                  	mov	si,18
 19481                                  	;mov	cx,VLEN1 ; 5
 19482 00000B93 B90500                  	mov	cx,5
 19483 00000B96 0E                      	push	cs
 19484 00000B97 07                      	pop	es
 19485 00000B98 BF[500A]                	mov	di,VDiskSig1
 19486 00000B9B F3A6                    	rep	cmpsb
 19487 00000B9D 7410                    	je	short ivdins_retn
 19488 00000B9F B8FFFF                  	mov	ax,0FFFFh
 19489 00000BA2 8ED8                    	mov	ds,ax
 19490                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19491 00000BA4 BE1300                  	mov	si,13h
 19492 00000BA7 BF[750A]                	mov	di,VDiskSig2
 19493                                  	;mov	cx,VLEN2  ; 5
 19494 00000BAA B90500                  	mov	cx,5
 19495 00000BAD F3A6                    	rep	cmpsb
 19496                                  ivdins_retn: 
 19497 00000BAF C3                      	retn			; returns the Zero flag
 19498                                  
 19499                                  ; ----------------------------------------------------------------------
 19500                                  ;
 19501                                  ; procedure : CPMHack
 19502                                  ;
 19503                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19504                                  ;		for CPM compatibility
 19505                                  ;
 19506                                  ; ----------------------------------------------------------------------
 19507                                  
 19508                                  	; 11/12/2022
 19509                                  CPMHack:
 19510 00000BB0 1E                      	push	ds
 19511 00000BB1 B9FFFF                  	mov	cx,0FFFFh
 19512 00000BB4 8EC1                    	mov	es,cx		; ES = FFFF
 19513                                  	;xor	cx,cx
 19514                                  	; 11/12/2022
 19515 00000BB6 41                      	inc	cx  ; cx = 0
 19516 00000BB7 8ED9                    	mov	ds,cx		; DS = 0
 19517 00000BB9 BEC000                  	mov	si,0C0h
 19518 00000BBC BFD000                  	mov	di,0D0h
 19519                                  	;mov	cx,5
 19520 00000BBF B105                    	mov	cl,5
 19521 00000BC1 FC                      	cld
 19522 00000BC2 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19523 00000BC4 1F                      	pop	ds
 19524 00000BC5 C3                      	retn
 19525                                  
 19526                                  ; ----------------------------------------------------------------------
 19527                                  ;
 19528                                  ; procedure : off_to_para
 19529                                  ;
 19530                                  ; ----------------------------------------------------------------------
 19531                                  off_to_para:
 19532 00000BC6 D1E8                    	shr	ax,1
 19533 00000BC8 D1E8                    	shr	ax,1
 19534 00000BCA D1E8                    	shr	ax,1
 19535 00000BCC D1E8                    	shr	ax,1
 19536 00000BCE C3                      	retn
 19537                                  
 19538                                  ; ----------------------------------------------------------------------
 19539                                  ;**	TempCDS - Create (Temporary?) CDS
 19540                                  ;
 19541                                  ;	ENTRY	?? BUGBUG
 19542                                  ;		(DS) = SysInitSeg
 19543                                  ;	EXIT	?? BUGBUG
 19544                                  ;	USES	?? BUGBUG
 19545                                  ; ----------------------------------------------------------------------
 19546                                  
 19547                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19548                                  TempCDS:
 19549 00000BCF C43E[6B02]              	les	di,[DOSINFO]
 19550 00000BD3 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19551                                  	;mov	cl,[es:di+20h]
 19552 00000BD7 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19553                                  
 19554 00000BD9 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19555                                  	;mov	[es:di+21h],cl	
 19556                                  
 19557 00000BDD 88C8                    	mov	al,cl
 19558 00000BDF B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19559                                  	;mov	ah,88
 19560 00000BE1 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19561 00000BE3 E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19562 00000BE6 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19563                                  
 19564                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19565                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19566                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19567                                  ;		   variable which has the top of free memory for
 19568                                  ;		   device driver loads, etc.
 19569                                  
 19570 00000BEA 29C6                    	sub	si,ax
 19571                                  
 19572                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19573                                  ;		that automatically updates alloclim every time we
 19574                                  ;		set up some new CDSs. Instead, I've added code
 19575                                  ;		which pre-allocates space for 26 CDSs. This
 19576                                  ;	        way we've got room for worst case CDSs before
 19577                                  ;		we place MagicDrv.sys
 19578                                  ;
 19579                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19580                                  
 19581                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19582                                  	; (SYSINIT:0C52h)
 19583 00000BEC 8936[A302]              	mov	[ALLOCLIM],si
 19584                                  
 19585 00000BF0 26897518                	mov	[es:di+SYSI_CDS+2],si
 19586                                  	;mov	[es:di+18h],si
 19587 00000BF4 89F0                    	mov	ax,si
 19588 00000BF6 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19589                                  	;mov	[word es:di+16h],0
 19590                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19591 00000BFC 26C535                  	lds	si,[es:di]
 19592 00000BFF 8EC0                    	mov	es,ax
 19593 00000C01 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19594                                  
 19595                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19596                                  ;	info from the corresponding DPB.
 19597                                  ;
 19598                                  ;	(cx) = count of CDSs left to process
 19599                                  ;	(es:di) = address of next CDS
 19600                                  
 19601                                  fooset:
 19602                                  	; 23/10/2022
 19603 00000C03 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19604 00000C07 AB                      	stosw				; setup the root as the curdir
 19605                                  
 19606                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19607                                  
 19608                                  ;	(ds:si) = address of DPB
 19609                                  ;		 (si) = -1 if no drive
 19610                                  
 19611 00000C08 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19612 00000C0C AB                      	stosw
 19613 00000C0D 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19614 00000C12 31C0                    	xor	ax,ax
 19615 00000C14 51                      	push	cx
 19616                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19617 00000C15 B93F00                  	mov	cx,63	; 23/10/2022
 19618 00000C18 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19619                                  
 19620                                  ;	should handle the system that does not have any floppies.
 19621                                  ;	in this case,we are going to pretended there are two dummy floppies
 19622                                  ;	in the system. still they have dpb and cds,but we are going to
 19623                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19624                                  ;	"invalid drive specification" message when the user try to
 19625                                  ;	access them.
 19626                                  ;
 19627                                  ;	(ax) = 0
 19628                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19629                                  ;	(ds:si) = Next DPB (-1 if none)
 19630                                  
 19631 00000C1A 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19632 00000C1D 7414                    	je	short fooset_zero	; don't have any physical drive.
 19633                                  
 19634                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19635                                  ;	if we are faking floppy drives then see if this cds being initialised
 19636                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19637                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19638                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19639                                  ;	for dpb offsets look at inc\dpb.inc.
 19640                                  
 19641 00000C1F 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19642 00000C25 7513                    	jne	short normcds 		; machine has floppy drives
 19643                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19644 00000C27 803C01                  	cmp	byte [si],1
 19645 00000C2A 770E                    	ja	short normcds
 19646 00000C2C B103                    	mov	cl,3			; the next dbp pointer
 19647                                  					; AX should be zero here
 19648 00000C2E F3AB                    	rep	stosw
 19649 00000C30 59                      	pop	cx
 19650 00000C31 EB18                    	jmp	short get_next_dpb
 19651                                  
 19652                                  ;	(ax) = 0
 19653                                  
 19654                                  fooset_zero:
 19655 00000C33 B103                    	mov	cl,3
 19656 00000C35 F3AB                    	rep	stosw
 19657 00000C37 59                      	pop	cx
 19658 00000C38 EB14                    	jmp	short fincds
 19659                                  
 19660                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19661                                  ;
 19662                                  ;	(ax) = 0
 19663                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19664                                  ;	(ds:si) = Next DPB (-1 if none)
 19665                                  
 19666                                  normcds:
 19667 00000C3A 59                      	pop	cx
 19668                                  
 19669                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19670                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19671                                  ;	this media is a non-fat based one.
 19672                                  
 19673                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19674                                  	; 23/10/2022
 19675 00000C3B 807C0800                	cmp	byte [si+8],0
 19676 00000C3F 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19677 00000C41 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19678                                  	;mov	ax,4000h
 19679                                  setnormcds:
 19680 00000C44 AB                      	stosw				; curdir_flags
 19681 00000C45 89F0                    	mov	ax,si
 19682 00000C47 AB                      	stosw				; curdir_devptr
 19683 00000C48 8CD8                    	mov	ax,ds
 19684 00000C4A AB                      	stosw
 19685                                  
 19686                                  get_next_dpb:				; entry point for fake_fooset_zero
 19687                                  	; 23/10/2022
 19688 00000C4B C57419                  	lds	si,[si+19h]
 19689                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19690                                  fincds:
 19691 00000C4E B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19692 00000C51 AB                      	stosw				; curdir_id
 19693 00000C52 AB                      	stosw				; curdir_id
 19694 00000C53 AB                      	stosw				; curdir_user_word
 19695 00000C54 B80200                  	mov	ax,2
 19696 00000C57 AB                      	stosw				; curdir_end
 19697 00000C58 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19698 00000C5A AA                      	stosb
 19699 00000C5B AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19700 00000C5C AB                      	stosw
 19701 00000C5D AB                      	stosw
 19702                                  
 19703 00000C5E E2A3                    	loop	fooset
 19704                                  	
 19705 00000C60 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19706                                  	
 19707 00000C66 C3                      	retn
 19708                                  
 19709                                  ; ----------------------------------------------------------------------
 19710                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19711                                  ;
 19712                                  ;	entry:
 19713                                  ;	   al == ASCII CAPS drive letter
 19714                                  ;
 19715                                  ;	exit:
 19716                                  ;	   ds:si -> DPB, or si = -1 if not found
 19717                                  ; ----------------------------------------------------------------------
 19718                                  
 19719                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19720                                  ;
 19721                                  ;get_dpb_for_drive_al:
 19722                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19723                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19724                                  ;	lds	si,[si]
 19725                                  ;	sub	al,'A'
 19726                                  ;
 19727                                  ;get_dpb_for_drive_1:
 19728                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19729                                  ;	cmp	al,[si]
 19730                                  ;	je	short got_dpb_for_drive	;  done if so
 19731                                  ;
 19732                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19733                                  ;	cmp	si,-1
 19734                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19735                                  ;
 19736                                  ;got_dpb_for_drive:
 19737                                  ;	retn
 19738                                  
 19739                                  ;=======================================================================
 19740                                  
 19741                                  ;**	EndFile - Build DOS structures
 19742                                  ;
 19743                                  ; This procedure is called after the config.sys has been processed and
 19744                                  ; installable device drivers have been loaded (but before "install="
 19745                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19746                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19747                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19748                                  ; above these structures is deallocated back to DOS.
 19749                                  ;
 19750                                  ;	ENTRY	?? BUGBUG
 19751                                  ;	EXIT	?? BUGBUG
 19752                                  ;	USES	?? BUGBUG
 19753                                  
 19754                                  ;=======================================================================
 19755                                  ; allocate files
 19756                                  ; ----------------------------------------------------------------------
 19757                                  
 19758                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19759                                  	; (SYSINIT:0CCDh)
 19760                                  
 19761                                  endfile:
 19762                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19763                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19764                                  ; to confbot.
 19765                                  
 19766                                  ;	if this procedure has been called to take care of install= command,
 19767                                  ;	   then we have to save es,si registers.
 19768                                  
 19769                                  	; 11/12/2022
 19770                                  	; ds = cs
 19771                                  
 19772                                  	; 23/10/2022
 19773                                  	; 31/03/2019
 19774 00000C67 1E                      	push	ds
 19775                                  
 19776                                  	;;mov	ax,Bios_Data ; 0070h
 19777                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19778                                  	; 21/10/2022
 19779 00000C68 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19780 00000C6B 8ED8                    	mov	ds,ax
 19781                                  
 19782                                  	;cmp	word [052Fh],0
 19783 00000C6D 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19784 00000C72 7505                    	jne	short multrk_flag_done
 19785                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19786                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19787                                  	; 12/12/2022
 19788 00000C74 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19789                                  multrk_flag_done:
 19790                                  	; 23/10/2022
 19791                                  	; 31/03/2019
 19792 00000C79 1F                      	pop	ds
 19793                                  
 19794                                  	; 11/12/2022
 19795                                  	; ds = cs
 19796 00000C7A A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19797 00000C7D A3[A302]                	mov	[ALLOCLIM],ax
 19798                                  	; 23/10/2022
 19799                                  	;mov	ax, [cs:top_of_cdss]
 19800                                  	;mov	[cs:ALLOCLIM], ax 
 19801                                  
 19802                                  	; 11/12/2022
 19803                                  	; ds = cs
 19804                                  	;push	cs
 19805                                  	;pop	ds
 19806                                  	
 19807                                  	;mov	ax,[CONFBOT]
 19808                                  	;mov	[ALLOCLIM],ax
 19809                                  
 19810 00000C80 E83D24                  	call	round
 19811                                  	; 11/12/2022
 19812                                  	; ds = cs
 19813 00000C83 A0[9D02]                	mov	al,[FILES]
 19814                                  	; 23/10/2022
 19815                                  	;mov	al,[cs:FILES]
 19816 00000C86 2C05                    	sub	al,5
 19817 00000C88 764B                    	jbe	short dofcbs
 19818                                  
 19819 00000C8A 50                      	push	ax
 19820                                  	;mov	al,devmark_files ; 'F'
 19821 00000C8B B046                    	mov	al,'F'
 19822 00000C8D E87B07                  	call	setdevmark		; set devmark for sfts (files)
 19823 00000C90 58                      	pop	ax
 19824 00000C91 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19825                                  					;  it does sign extend.
 19826                                  	; 11/12/2022
 19827                                  	; ds = cs
 19828 00000C93 8B1E[DE03]              	mov	bx,[memlo]
 19829 00000C97 8B16[E003]              	mov	dx,[memhi]
 19830 00000C9B C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19831                                  	; 23/10/2022
 19832                                  	;mov	bx,[cs:memlo]
 19833                                  	;mov	dx,[cs:memhi]
 19834                                  	;lds	di,[cs:DOSINFO]		
 19835                                  
 19836                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19837 00000C9F C57D04                  	lds	di,[di+4]
 19838                                  
 19839                                  	;mov	[di+SF.SFLink],bx
 19840 00000CA2 891D                    	mov	[di],bx
 19841 00000CA4 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19842                                  
 19843 00000CA7 0E                      	push	cs
 19844 00000CA8 1F                      	pop	ds
 19845                                  
 19846                                  	; 11/12/2022
 19847                                  	; ds = cs
 19848 00000CA9 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19849                                  	; 23/10/2022
 19850                                  	;les	di,[cs:memlo]
 19851                                  
 19852                                  	;mov	word [es:di+SF.SFLink],-1
 19853 00000CAD 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19854                                  	;mov	[es:di+SF.SFCount],ax
 19855 00000CB2 26894504                	mov	[es:di+4],ax
 19856                                  	;mov	bl,SF_ENTRY.size ; 59
 19857 00000CB6 B33B                    	mov	bl,59
 19858 00000CB8 F6E3                    	mul	bl			;ax = number of bytes to clear
 19859 00000CBA 89C1                    	mov	cx,ax
 19860                                  	; 11/12/2022
 19861                                  	; ds = cs
 19862 00000CBC 0106[DE03]              	add	[memlo],ax		;allocate memory
 19863                                  	; 23/10/2022
 19864                                  	;add	[cs:memlo],ax
 19865 00000CC0 B80600                  	mov	ax,6
 19866                                  	; 11/12/2022
 19867 00000CC3 0106[DE03]              	add	[memlo],ax		;remember the header too
 19868                                  	;add	[cs:memlo],ax
 19869                                  	; 11/12/2022
 19870 00000CC7 800E[2E14]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19871                                  	; 23/10/2022
 19872                                  	;or	byte [cs:setdevmarkflag],2
 19873 00000CCC E8F123                  	call	round			; check for mem error before the stosb
 19874 00000CCF 01C7                    	add	di,ax
 19875 00000CD1 31C0                    	xor	ax,ax
 19876 00000CD3 F3AA                    	rep	stosb			;clean out the stuff
 19877                                  
 19878                                  ; allocate fcbs
 19879                                  ; ----------------------------------------------------------------------
 19880                                  
 19881                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19882                                  	; (SYSINIT:0D48h)
 19883                                  dofcbs:
 19884                                  	; 11/12/2022
 19885                                  	; ds = cs
 19886                                  	;push	cs
 19887                                  	;pop	ds
 19888 00000CD5 E8E823                  	call	round
 19889                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19890 00000CD8 B058                    	mov	al,'X'
 19891 00000CDA E82E07                  	call	setdevmark
 19892                                  	; 11/12/2022
 19893                                  	; ds = cs
 19894 00000CDD A0[9E02]                	mov	al,[FCBS]
 19895                                  	;mov	al,[cs:FCBS]
 19896 00000CE0 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19897                                  					;  it does sign extend.
 19898                                  	; 11/12/2022
 19899 00000CE2 8B1E[DE03]              	mov	bx,[memlo]
 19900 00000CE6 8B16[E003]              	mov	dx,[memhi]
 19901 00000CEA C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19902                                  	; 23/10/2022
 19903                                  	;mov	bx,[cs:memlo]
 19904                                  	;mov	dx,[cs:memhi]
 19905                                  	;lds	di,[cs:DOSINFO]
 19906                                  
 19907                                  	;mov	[di+SYSI_FCB],bx
 19908                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19909                                  	; 23/10/2022
 19910 00000CEE 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19911 00000CF1 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19912                                  
 19913 00000CF4 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19914 00000CF9 30FF                    	xor	bh,bh
 19915                                  	;mov	[di+SYSI_KEEP],bx
 19916 00000CFB 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19917                                  
 19918 00000CFE 0E                      	push	cs
 19919 00000CFF 1F                      	pop	ds
 19920                                  	
 19921 00000D00 C43E[DE03]              	les	di,[memlo]		;point to new table
 19922                                  	;mov	word [es:di+SF.SFLink],-1
 19923 00000D04 26C705FFFF              	mov	word [es:di],-1
 19924                                  	;mov	[es:di+SF.SFCount],ax
 19925                                  	; 02/11/2022
 19926 00000D09 26894504                	mov	[es:di+4],ax
 19927 00000D0D B339                    	mov	bl,SF_ENTRY.size ; 59
 19928 00000D0F 89C1                    	mov	cx,ax
 19929 00000D11 F6E3                    	mul	bl			;ax = number of bytes to clear
 19930 00000D13 0106[DE03]              	add	[memlo],ax		;allocate memory
 19931                                  	;mov	ax,6
 19932 00000D17 B80600                  	mov	ax,SF.size-2 ; 6
 19933 00000D1A 0106[DE03]              	add	[memlo],ax		;remember the header too
 19934                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19935 00000D1E 800E[2E14]02            	or	byte [setdevmarkflag],2
 19936 00000D23 E89A23                  	call	round			; check for mem error before the stosb
 19937 00000D26 01C7                    	add	di,ax			;skip over header
 19938 00000D28 B041                    	mov	al,'A'
 19939                                  fillloop:
 19940 00000D2A 51                      	push	cx			; save count
 19941 00000D2B B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19942 00000D2E FC                      	cld
 19943 00000D2F F3AA                    	rep	stosb			; filled
 19944                                  
 19945                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19946                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19947                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19948                                  
 19949                                  	; 18/12/2022
 19950                                  	;cx = 0
 19951 00000D31 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19952 00000D35 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19953 00000D39 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19954                                  	
 19955                                  	; 23/10/2022	
 19956                                  	;mov     word [es:di-3Bh],0
 19957                                  	;mov     word [es:di-26h],0
 19958                                  	;mov     word [es:di-24h],0
 19959                                  
 19960 00000D3D 59                      	pop	cx
 19961 00000D3E E2EA                    	loop	fillloop
 19962                                  
 19963                                  ; allocate buffers
 19964                                  ; ----------------------------------------------------------------------
 19965                                  
 19966                                  ; search through the list of media supported and allocate 3 buffers if the
 19967                                  ; capacity of the drive is > 360kb
 19968                                  
 19969                                  	; 18/12/2022
 19970                                  	; cx = 0
 19971 00000D40 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19972 00000D45 7403                    	je	short dodefaultbuff
 19973 00000D47 E98700                  	jmp	dobuff			; the user entered the buffers=.
 19974                                  
 19975                                  dodefaultbuff:
 19976                                  	; 18/12/2022
 19977 00000D4A 890E[9902]              	mov	[h_buffers],cx ; 0
 19978 00000D4E 41                      	inc	cx
 19979 00000D4F 41                      	inc	cx
 19980 00000D50 890E[9702]              	mov	[buffers],cx ; 2	
 19981                                  	
 19982                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19983                                  	;mov	word [buffers],2	; default to 2 buffers
 19984                                  
 19985                                  	; 23/10/2022	
 19986 00000D54 50                      	push	ax
 19987 00000D55 1E                      	push	ds ; 26/03/2019
 19988                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19989 00000D56 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19990                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19991                                  	; 11/12/2022
 19992 00000D5B 26C46E00                	les	bp,[es:bp]
 19993                                  	; 23/10/2022
 19994                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19995                                  
 19996 00000D5F 0E                      	push	cs
 19997 00000D60 1F                      	pop	ds
 19998                                  ;SYSINIT:0DE2h:
 19999                                  nextdpb:				; test if the drive supports removeable media
 20000                                  	;mov	bl,[es:bp+DPB.drive]
 20001                                  	; 11/12/2022
 20002 00000D61 268A5E00                	mov	bl,[es:bp]
 20003                                  	; 23/10/2022
 20004                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20005                                  
 20006                                  	;inc	bl
 20007                                  	; 18/12/2022
 20008 00000D65 43                      	inc	bx
 20009                                  
 20010                                  	;mov	ax,(IOCTL<<8)|8
 20011 00000D66 B80844                  	mov	ax,4408h
 20012 00000D69 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20013                                  
 20014                                  ; ignore fixed disks
 20015                                  
 20016 00000D6B 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20017 00000D6D 7534                    	jnz	short nosetbuf
 20018                                  
 20019                                  ; get parameters of drive
 20020                                  
 20021 00000D6F 31DB                    	xor	bx,bx
 20022                                  	;;mov	bl,[es:bp+DPB.drive]
 20023                                  	; 11/12/2022
 20024 00000D71 268A5E00                	mov	bl,[es:bp]
 20025                                  	; 23/10/2022
 20026                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20027                                  	
 20028                                  	;inc	bl
 20029                                  	; 18/12/2022
 20030 00000D75 43                      	inc	bx
 20031                                  
 20032 00000D76 BA[6635]                	mov	dx,deviceparameters
 20033                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20034 00000D79 B80D44                  	mov	ax,440Dh
 20035                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20036 00000D7C B96008                  	mov	cx,860h
 20037 00000D7F CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20038 00000D81 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20039                                  					; generic ioctl
 20040                                  ; determine capacity of drive
 20041                                  ; media capacity = #sectors * bytes/sector
 20042                                  
 20043                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20044                                  	; 23/10/2022
 20045 00000D83 8B1E[7535]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20046                                  	
 20047                                  ; to keep the magnitude of the media capacity within a word,
 20048                                  ; scale the sector size
 20049                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20050                                  
 20051                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20052                                  	; 23/10/2022
 20053 00000D87 A1[6D35]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20054 00000D8A 31D2                    	xor	dx,dx
 20055 00000D8C B90002                  	mov	cx,512
 20056 00000D8F F7F1                    	div	cx			; scale sector size in factor of
 20057                                  					; 512 bytes
 20058 00000D91 F7E3                    	mul	bx			; ax = #sectors * size factor
 20059 00000D93 09D2                    	or	dx,dx			; just in case of large floppies
 20060 00000D95 7505                    	jnz	short setbuf
 20061 00000D97 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20062 00000D9A 7607                    	jbe	short nosetbuf
 20063                                  setbuf:
 20064                                  	; 18/12/2022
 20065                                  	; word [buffers] = 2
 20066 00000D9C C606[9702]03            	mov	byte [buffers],3
 20067                                  	;mov	word [buffers],3
 20068 00000DA1 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20069                                  					; for default buffer count
 20070                                  nosetbuf:
 20071                                  	; 23/10/2022
 20072                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20073 00000DA3 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20074 00000DA8 7406                    	je	short chk_memsize_for_buffers
 20075                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20076 00000DAA 26C46E19                	les	bp,[es:bp+19h]
 20077 00000DAE EBB1                    	jmp	short nextdpb
 20078                                  
 20079                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20080                                  ;memory size too.
 20081                                  ; default buffers = 2
 20082                                  ; if diskette media > 360 kb,then default buffers = 3
 20083                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20084                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20085                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20086                                  
 20087                                  chk_memsize_for_buffers:
 20088                                  	; 18/12/2022
 20089                                  	;cmp	word [MEMORY_SIZE],2000h
 20090                                  	;jbe	short bufset
 20091                                  	;mov	word [buffers],5
 20092                                  	;cmp	word [MEMORY_SIZE],4000h
 20093                                  	;jbe	short bufset
 20094                                  	;mov	word [buffers],10
 20095                                  	;cmp	word [MEMORY_SIZE],8000h
 20096                                  	;jbe	short bufset
 20097                                  	;mov	word [buffers],15
 20098                                  
 20099                                  	; 18/12/2022
 20100                                  	; word [buffers] = 3 or 2
 20101 00000DB0 BB[9702]                	mov	bx,buffers
 20102 00000DB3 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20103 00000DB6 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20104                                  
 20105 00000DB7 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20106 00000DBA 7213                    	jb	short bufset
 20107 00000DBC C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20108 00000DBF 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20109 00000DC2 730B                    	jnb	short bufset
 20110 00000DC4 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20111 00000DC7 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20112 00000DCA 7303                    	jnb	short bufset
 20113 00000DCC C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20114                                  bufset:
 20115                                  	; 23/10/2022
 20116                                  	; 26/03/2019
 20117 00000DCF 1F                      	pop	ds
 20118 00000DD0 58                      	pop	ax
 20119                                  
 20120                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20121                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20122                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20123                                  
 20124                                  ; 26/03/2019
 20125                                  
 20126                                  ;*******************************************************************************
 20127                                  ;									       *
 20128                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20129                                  ; input :								       *
 20130                                  ;    memhi:memlo - start of the next available memory			       *
 20131                                  ;    buffers = number of buffers					       *
 20132                                  ;    h_buffers = number of secondary buffers				       *
 20133                                  ;									       *
 20134                                  ; output:								       *
 20135                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20136                                  ;	buffinfo set.							       *
 20137                                  ;	bufferqueue set.						       *
 20138                                  ;									       *
 20139                                  ; subroutines to be called:						       *
 20140                                  ;									       *
 20141                                  ;*******************************************************************************
 20142                                  
 20143                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20144                                  	; (SYSINIT:0E60h)
 20145                                  dobuff:
 20146                                  	; ds = cs ; 31/03/2019
 20147                                  	; 23/10/2022
 20148 00000DD1 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20149                                  	;mov	ax,[buffers] ; 31/03/2019
 20150                                  	;lds	bx,[DOSINFO]
 20151 00000DD6 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 20152                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20153 00000DDA 89473F                  	mov	[bx+3Fh],ax
 20154 00000DDD 2EA1[9902]              	mov	ax,[cs:h_buffers]
 20155                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20156 00000DE1 894741                  	mov	[bx+41h],ax
 20157 00000DE4 C55F12                  	lds	bx,[bx+12h]
 20158                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20159 00000DE7 E8D622                  	call	round		; get [memhi]:[memlo]
 20160                                  	;mov	al,devmark_buf	; ='B'
 20161 00000DEA B042                    	mov	al,'B'	
 20162 00000DEC E81C06                  	call	setdevmark
 20163                                  
 20164                                  ;allocate buffers
 20165                                  
 20166 00000DEF 1E                      	push	ds			; save buffer info. ptr.
 20167 00000DF0 53                      	push	bx
 20168                                  
 20169 00000DF1 E85203                  	call	set_buffer
 20170                                  
 20171 00000DF4 5B                      	pop	bx
 20172 00000DF5 1F                      	pop	ds
 20173                                  
 20174                                  ;now set the secondary buffer if specified.
 20175                                  
 20176 00000DF6 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20177 00000DFC 742D                    	je	short xif16
 20178 00000DFE E8BF22                  	call	round
 20179                                  	; 23/10/2022
 20180 00000E01 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20181                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20182 00000E06 894F06                  	mov	[bx+6],cx
 20183 00000E09 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20184                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20185 00000E0E 894F08                  	mov	[bx+8],cx
 20186 00000E11 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20187                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20188 00000E16 894F0A                  	mov	[bx+10],cx
 20189 00000E19 B80002                  	mov	ax,512			; 512 byte
 20190 00000E1C F7E1                    	mul	cx
 20191 00000E1E 2EA3[DE03]              	mov	[cs:memlo],ax
 20192                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20193 00000E22 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 20194 00000E28 E89522                  	call	round
 20195                                  xif16:
 20196                                  
 20197                                  ; ----------------------------------------------------------------------
 20198                                  ; allocate cdss
 20199                                  ; ----------------------------------------------------------------------
 20200                                  
 20201                                  buf1:
 20202 00000E2B E89222                  	call	round
 20203                                  
 20204 00000E2E 50                      	push	ax
 20205                                  	; 23/10/2022
 20206                                  	;mov	ax,devmark_cds		;='L'
 20207 00000E2F B84C00                  	mov	ax, 'L'
 20208 00000E32 E8D605                  	call	setdevmark
 20209 00000E35 58                      	pop	ax
 20210                                  
 20211 00000E36 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20212                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20213 00000E3B 268A4D20                	mov	cl,[es:di+20h]
 20214 00000E3F 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20215 00000E44 7305                    	jae	short gotncds 		; user setting must be at least numio
 20216 00000E46 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20217                                  gotncds:
 20218 00000E4B 30ED                    	xor	ch,ch
 20219                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20220 00000E4D 26884D21                	mov	[es:di+21h],cl
 20221 00000E51 2EA1[E003]              	mov	ax,[cs:memhi]
 20222                                  	;mov	[es:di+SYSI_CDS+2],ax
 20223 00000E55 26894518                	mov	[es:di+18h],ax
 20224 00000E59 2EA1[DE03]              	mov	ax,[cs:memlo]
 20225                                  	;mov	[es:di+SYSI_CDS],ax
 20226 00000E5D 26894516                	mov	[es:di+16h],ax
 20227 00000E61 88C8                    	mov	al,cl
 20228                                  	;mov	ah,curdirlen ; curdir_list.size
 20229 00000E63 B458                    	mov	ah,88
 20230 00000E65 F6E4                    	mul	ah
 20231 00000E67 E84F02                  	call	ParaRound
 20232 00000E6A 2E0106[E003]            	add	[cs:memhi],ax
 20233                                  
 20234                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20235 00000E6F 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 20236 00000E75 E84822                  	call	round			; check for mem error before initializing
 20237                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20238 00000E78 26C535                  	lds	si,[es:di]
 20239                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20240 00000E7B 26C47D16                	les	di,[es:di+16h]
 20241 00000E7F E881FD                  	call	fooset
 20242                                  
 20243                                  ; ----------------------------------------------------------------------
 20244                                  ; allocate space for internal stack
 20245                                  ; ----------------------------------------------------------------------
 20246                                  
 20247 00000E82 0E                      	push	cs
 20248 00000E83 1F                      	pop	ds
 20249                                  
 20250                                  ;	if the user did not entered stacks= command, as a default, do not install
 20251                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20252                                  ;	otherwise,install it to the user specified value or to the default
 20253                                  ;	value of 9,128 for other systems.
 20254                                  
 20255 00000E84 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20256 00000E89 740E                    	je	short doinstallstack	; then install as specified by the user
 20257 00000E8B 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20258 00000E90 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20259 00000E92 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20260 00000E97 736D                    	jae	short skipstack
 20261                                  doinstallstack:
 20262 00000E99 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20263 00000E9C 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20264 00000E9E 7466                    	jz	short skipstack		; don't install stack.
 20265                                  
 20266                                  ;	dynamic relocation of stack code.
 20267                                  
 20268 00000EA0 E81D22                  	call	round			;[memhi] = seg. for stack code
 20269                                  					;[memlo] = 0
 20270                                  
 20271                                  ; set devmark block into memory for mem command
 20272                                  ; devmark_id = 's' for stack
 20273                                  
 20274                                  	;mov	al,devmark_stk	;='S'
 20275                                  	; 23/10/2022
 20276 00000EA3 B053                    	mov	al,'S'
 20277 00000EA5 E86305                  	call	setdevmark
 20278                                  
 20279 00000EA8 A1[E003]                	mov	ax,[memhi]
 20280 00000EAB 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20281                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20282                                  	; 11/12/2022
 20283                                  	; ds = cs
 20284                                  	;push	cs
 20285                                  	;pop	ds
 20286 00000EAD 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20287 00000EAF 31FF                    	xor	di,di
 20288 00000EB1 B9[6702]                	mov	cx,endstackcode
 20289 00000EB4 890E[DE03]              	mov	[memlo],cx
 20290 00000EB8 E80522                  	call	round		;have enough space for relocation?
 20291 00000EBB F3A4                    	rep	movsb
 20292                                  
 20293 00000EBD 1E                      	push	ds		; stick the location of the NextStack entry
 20294                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20295                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20296                                  	; 21/10/2022
 20297 00000EBE B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20298 00000EC1 8ED8                    	mov	ds,ax
 20299 00000EC3 C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20300 00000EC9 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20301                                  
 20302 00000ECD 2EA1[DE03]              	mov	ax,[cs:memlo]
 20303 00000ED1 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20304 00000ED5 A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20305 00000ED8 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20306 00000EDC 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20307 00000EE0 A3[C608]                	mov	[IT_StackLoc+2],ax
 20308                                  
 20309                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20310                                  
 20311                                  	;mov	ax,entrysize ; mov ax,8
 20312                                  	; 23/10/2022
 20313 00000EE3 B80800                  	mov	ax,8
 20314 00000EE6 2E0306[8C02]            	add	ax,[cs:stack_size]
 20315 00000EEB 2EF726[8A02]            	mul	word [cs:stack_count]
 20316                                  
 20317 00000EF0 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20318                                  
 20319 00000EF3 1F                      	pop	ds		; no more need to access Instance Table
 20320                                  
 20321 00000EF4 E8C201                  	call	ParaRound	; convert size to paragraphs
 20322                                  	
 20323                                  	; 11/12/2022
 20324                                  	; ds = cs
 20325                                  	;add	[cs:memhi],ax
 20326 00000EF7 0106[E003]              	add	[memhi],ax
 20327                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20328                                  	;or	byte [cs:setdevmarkflag],2
 20329 00000EFB 800E[2E14]02            	or	byte [setdevmarkflag],2
 20330                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20331                                  				;to set the devmark_size for stack by round routine.
 20332 00000F00 E8BD21                  	call	round		; check for memory error before
 20333                                  				; continuing
 20334 00000F03 E8E902                  	call	stackinit	; initialize hardware stack. 
 20335                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20336                                  skipstack:
 20337                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20338                                  	; (SYSINIT:0F99h)
 20339                                  
 20340                                  	; 11/12/2022
 20341                                  	; ds = cs
 20342                                  	;push	cs
 20343                                  	;pop	ds
 20344                                  
 20345 00000F06 A0[9D02]                	mov	al,[FILES]
 20346 00000F09 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20347                                  				;  it does sign extend.
 20348 00000F0B 89C1                    	mov	cx,ax
 20349 00000F0D 31DB                    	xor	bx,bx		;close standard input
 20350 00000F0F B43E                    	mov	ah,3Eh ; CLOSE
 20351 00000F11 CD21                    	int	21h
 20352 00000F13 BB0200                  	mov	bx,2
 20353                                  rcclloop:			;close everybody but standard output
 20354 00000F16 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20355 00000F18 CD21                    	int	21h		; in case we can't get new one open.
 20356 00000F1A 43                      	inc	bx
 20357 00000F1B E2F9                    	loop	rcclloop
 20358                                  
 20359 00000F1D BA[F033]                	mov	dx,condev
 20360 00000F20 B002                    	mov	al,2
 20361 00000F22 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20362 00000F24 F9                      	stc			; set for possible int 24
 20363 00000F25 CD21                    	int	21h
 20364 00000F27 7305                    	jnc	short goaux
 20365 00000F29 E82724                  	call	badfil
 20366 00000F2C EB13                    	jmp	short goaux2
 20367                                  goaux:	
 20368 00000F2E 50                      	push	ax
 20369 00000F2F BB0100                  	mov	bx,1		;close standard output
 20370 00000F32 B43E                    	mov	ah,3Eh ; CLOSE
 20371 00000F34 CD21                    	int	21h
 20372 00000F36 58                      	pop	ax
 20373                                  
 20374 00000F37 89C3                    	mov	bx,ax		;new device handle
 20375 00000F39 B445                    	mov	ah,45h ; XDUP
 20376 00000F3B CD21                    	int	21h		;dup to 1,stdout
 20377 00000F3D B445                    	mov	ah,45h ; XDUP
 20378 00000F3F CD21                    	int	21h		;dup to 2,stderr
 20379                                  goaux2: 
 20380 00000F41 BA[F433]                	mov	dx,auxdev
 20381 00000F44 B002                    	mov	al,2		;read/write access
 20382 00000F46 E83B24                  	call	open_dev
 20383                                  
 20384 00000F49 BA[F833]                	mov	dx,prndev
 20385 00000F4C B001                    	mov	al,1		;write only
 20386 00000F4E E83324                  	call	open_dev
 20387                                  
 20388                                  ;global rearm command for shared interrupt devices attached in the system;
 20389                                  ;shared interrupt attachment has some problem when it issues interrupt
 20390                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20391                                  ;no further interrupts on that level will be presented until a global rearm
 20392                                  ;is issued. by the request of the system architecture group, msbio will
 20393                                  ;issue a global rearm after every device driver is loaded.
 20394                                  ;to issue a global rearm:	;for pc1,xt,palace
 20395                                  ;
 20396                                  ;			  out 02f2h,xx  ; interrupt level 2
 20397                                  ;			  out 02f3h,xx  ; interrupt level 3
 20398                                  ;			  out 02f4h,xx  ; interrupt level 4
 20399                                  ;			  out 02f5h,xx  ; interrupt level 5
 20400                                  ;			  out 02f6h,xx  ; interrupt level 6
 20401                                  ;			  out 02f7h,xx  ; interrupt level 7
 20402                                  ;
 20403                                  ;	for pc at,in addition to the above commands,
 20404                                  ;	need to handle the secondary interrupt handler
 20405                                  ;
 20406                                  ;			  out 06f2h,xx  ; interrupt level 10
 20407                                  ;			  out 06f3h,xx  ; interrupt level 11
 20408                                  ;			  out 06f4h,xx  ; interrupt level 12
 20409                                  ;			  out 06f6h,xx  ; interrupt level 14
 20410                                  ;			  out 06f7h,xx  ; interrupt level 15
 20411                                  ;
 20412                                  ;	for round-up machine
 20413                                  ;
 20414                                  ;			  none.
 20415                                  
 20416                                  ; where xx stands for any value.
 20417                                  ;
 20418                                  ; for your information,after naples level machine,the system service bios
 20419                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20420                                  
 20421                                  	; 24/10/2022
 20422                                  
 20423 00000F51 50                      	push	ax
 20424 00000F52 53                      	push	bx
 20425 00000F53 52                      	push	dx
 20426 00000F54 06                      	push	es
 20427                                  
 20428 00000F55 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20429 00000F57 BAF202                  	mov	dx,2F2h 		;get starting address
 20430 00000F5A EE                      	out	dx,al			; out 02f2h,0ffh
 20431 00000F5B 42                      	inc	dx
 20432 00000F5C EE                      	out	dx,al			; out 02f3h,0ffh
 20433 00000F5D 42                      	inc	dx
 20434 00000F5E EE                      	out	dx,al			; out 02f4h,0ffh
 20435 00000F5F 42                      	inc	dx
 20436 00000F60 EE                      	out	dx,al			; out 02f5h,0ffh
 20437 00000F61 42                      	inc	dx
 20438 00000F62 EE                      	out	dx,al			; out 02f6h,0ffh
 20439 00000F63 42                      	inc	dx
 20440 00000F64 EE                      	out	dx,al			; out 02f7h,0ffh
 20441                                  
 20442                                  ;sb secondary global rearm
 20443                                  
 20444 00000F65 B800F0                  	mov	ax,0F000h		;get machine type
 20445 00000F68 8EC0                    	mov	es,ax
 20446 00000F6A 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20447 00000F70 740D                    	je	short startrearm	; *if at no need to check
 20448                                  
 20449 00000F72 B4C0                    	mov	ah,0C0h 		;get system configuration
 20450 00000F74 CD15                    	int	15h			; *
 20451 00000F76 7216                    	jc	short finishrearm	; *jmp if old rom
 20452                                  
 20453                                  ; test feature byte for secondary interrupt controller
 20454                                  
 20455 00000F78 26F6470540              	test	byte [es:bx+5],40h
 20456                                  	; 24/10/2022
 20457                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20458 00000F7D 740F                    	je	short finishrearm	;jmp if it is there
 20459                                  
 20460                                  startrearm:
 20461 00000F7F B0FF                    	mov	al,0FFh 		;write any pattern to port
 20462 00000F81 BAF206                  	mov	dx,6F2h 		;get starting address
 20463 00000F84 EE                      	out	dx,al			;out 06f2h,0ffh
 20464 00000F85 42                      	inc	dx			;bump address
 20465 00000F86 EE                      	out	dx,al			;out 06f3h,0ffh
 20466 00000F87 42                      	inc	dx			;bump address
 20467 00000F88 EE                      	out	dx,al			;out 06f4h,0ffh
 20468 00000F89 42                      	inc	dx			;bump address
 20469 00000F8A 42                      	inc	dx			;bump address
 20470 00000F8B EE                      	out	dx,al			;out 06f6h,0ffh
 20471 00000F8C 42                      	inc	dx			;bump address
 20472 00000F8D EE                      	out	dx,al			;out 06f7h,0ffh
 20473                                  
 20474                                  finishrearm:
 20475 00000F8E 07                      	pop	es
 20476 00000F8F 5A                      	pop	dx
 20477 00000F90 5B                      	pop	bx
 20478 00000F91 58                      	pop	ax
 20479                                  
 20480                                  ;    global rearm end *******************
 20481                                  
 20482                                  ; ----------------------------------------------------------------------
 20483                                  ; allocate sysinit_base for install= command
 20484                                  ; ----------------------------------------------------------------------
 20485                                  ; sysinit_base allocation.
 20486                                  ;   check if endfile has been called to handle install= command.
 20487                                  
 20488                                  set_sysinit_base:
 20489                                  
 20490                                  ; ----------------------------------------------------------------------
 20491                                  ;sysinit_base will be established in the secure area of
 20492                                  ;lower memory when it handles the first install= command.
 20493                                  ;sysinit_base is the place where the actual exec function will be called and
 20494                                  ;will check sysinit module in high memory if it is damaged by the application
 20495                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20496                                  ;is displayed by sysinit_base.
 20497                                  ; ----------------------------------------------------------------------
 20498                                  
 20499                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20500                                  	; (SYSINIT:1028h)
 20501                                  
 20502                                  	; 11/12/2022
 20503                                  	; ds = cs
 20504 00000F92 50                      	push	ax			; set devmark for mem command
 20505 00000F93 A1[E003]                	mov	ax,[memhi]
 20506 00000F96 2B06[E403]              	sub	ax,[area]
 20507 00000F9A A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20508                                  	;mov	al,devmark_inst ; 'T'
 20509 00000F9D B054                    	mov	al,'T'
 20510 00000F9F E86904                  	call	setdevmark
 20511 00000FA2 58                      	pop	ax
 20512                                  
 20513 00000FA3 8B3E[E003]              	mov	di,[memhi]
 20514 00000FA7 8EC7                    	mov	es,di
 20515 00000FA9 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20516 00000FAD 31FF                    	xor	di,di
 20517 00000FAF 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20518 00000FB3 BE[C510]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20519 00000FB6 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20520                                  	; 24/10/2022 
 20521                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20522 00000FB9 010E[DE03]              	add	[memlo],cx
 20523                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20524                                  	; 11/12/2022
 20525                                  	; ds = cs
 20526                                  	;or	byte [cs:setdevmarkflag],2
 20527 00000FBD 800E[2E14]02            	or	byte [setdevmarkflag],2
 20528                                  	;or	byte [setdevmarkflag],for_devmark
 20529 00000FC2 E8FB20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20530 00000FC5 F3A4                    	rep	movsb			; reallocate it.
 20531                                  
 20532 00000FC7 C706[5203][9E10]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20533 00000FCD 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20534                                  	;or	word [install_flag],has_installed ; set the flag.
 20535                                  	;or	byte [install_flag],has_installed ; 2
 20536                                  	; 11/12/2022
 20537 00000FD1 800E[4A03]02            	or	byte [install_flag],2
 20538                                  	; 24/10/2022
 20539                                  	;or	word [install_flag],2	
 20540                                  
 20541                                  ; ----------------------------------------------------------------------
 20542                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20543                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20544                                  ; have_install_cmd.
 20545                                  ; ----------------------------------------------------------------------
 20546                                  
 20547 00000FD6 E8E720                  	call	round
 20548 00000FD9 8B1E[E003]              	mov	bx,[memhi]
 20549 00000FDD A1[E403]                	mov	ax,[area]
 20550 00000FE0 A3[DA03]                	mov	[old_area],ax		; save [area]
 20551 00000FE3 8EC0                    	mov	es,ax			;calc what we needed
 20552 00000FE5 29C3                    	sub	bx,ax
 20553                                  	; 24/10/2022
 20554 00000FE7 B44A                    	mov	ah,4Ah ; SETBLOCK
 20555 00000FE9 CD21                    	int	21h			;give the rest back
 20556                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20557                                  		; ES = segment address of block to change
 20558                                  		; BX = new size in paragraphs
 20559 00000FEB 06                      	push	es
 20560 00000FEC 8CC0                    	mov	ax,es
 20561 00000FEE 48                      	dec	ax
 20562 00000FEF 8EC0                    	mov	es,ax			;point to arena
 20563                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20564                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20565                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20566                                  	; 24/10/2022
 20567 00000FF1 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20568 00000FF8 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20569 00000FFF 07                      	pop	es
 20570                                  
 20571 00001000 BBFFFF                  	mov	bx,0FFFFh
 20572 00001003 B448                    	mov	ah,48h ; ALLOC
 20573 00001005 CD21                    	int	21h
 20574 00001007 B448                    	mov	ah,48h ; ALLOC
 20575 00001009 CD21                    	int	21h			; allocate the rest of the memory
 20576                                  		; DOS - 2+ - ALLOCATE MEMORY
 20577                                  		; BX = number of 16-byte paragraphs desired
 20578 0000100B A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20579 0000100E C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20580                                  
 20581                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20582                                  ;;;; allocated.
 20583                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20584                                  ;;;; this time) to the top-of-the memory),here we are going to
 20585                                  ;;;; 1). "setblock" from memhi to confbot.
 20586                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20587                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20588                                  
 20589                                  ;memory allocation for sysinit,confbot module.
 20590                                  
 20591 00001014 8EC0                    	mov	es,ax
 20592                                  	;mov	bx,[CONFBOT]
 20593                                  	; 24/10/2022
 20594 00001016 8B1E[A102]              	mov	bx,[top_of_cdss]
 20595 0000101A 29C3                    	sub	bx,ax			; confbot - memhi
 20596 0000101C 4B                      	dec	bx			; make a room for the memory block id.
 20597 0000101D 4B                      	dec	bx			; make sure!!!.
 20598 0000101E B44A                    	mov	ah,4Ah ; SETBLOCK
 20599 00001020 CD21                    	int	21h			; this will free (confbot to top of memory)
 20600                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20601                                  		; ES = segment address of block to change
 20602                                  		; BX = new size in paragraphs
 20603 00001022 BBFFFF                  	mov	bx,0FFFFh
 20604 00001025 B448                    	mov	ah,48h ; ALLOC
 20605 00001027 CD21                    	int	21h
 20606 00001029 B448                    	mov	ah,48h ; ALLOC
 20607 0000102B CD21                    	int	21h			; allocate (confbot to top of memory)
 20608                                  		; DOS - 2+ - ALLOCATE MEMORY
 20609                                  		; BX = number of 16-byte paragraphs desired
 20610 0000102D A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20611                                  					; need this to free this area for command.com.
 20612 00001030 8E06[E003]              	mov	es,[memhi]
 20613 00001034 B449                    	mov	ah,49h			; free allocated memory.
 20614 00001036 CD21                    	int	21h			; free (memhi to confbot(=area))
 20615                                  		; DOS - 2+ - FREE MEMORY
 20616                                  		; ES = segment address of area to be freed
 20617                                  endfile_ret:
 20618 00001038 C3                      	retn
 20619                                  
 20620                                  ; End of "EndFile" DOS structure configuration.
 20621                                  
 20622                                  ; ----------------------------------------------------------------------
 20623                                  ; 26/03/2019 - Retro DOS v4.0
 20624                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20625                                  ; ----------------------------------------------------------------------
 20626                                  ; Do_Install_Exec
 20627                                  ;
 20628                                  ; This procedure is used to EXEC a program being loaded via the 
 20629                                  ; "install=" mechanism in config.sys. It does this by setting up
 20630                                  ; the parameters, and then jumping to sysinit_base, which has been
 20631                                  ; setup in low memory. When complete, sysinit_base will jump back
 20632                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20633                                  ; program).
 20634                                  
 20635                                  ;SYSINIT:10CFh:
 20636                                  
 20637                                  do_install_exec:			; now,handles install= command.
 20638                                  
 20639 00001039 56                      	push	si			; save si for config.sys again.
 20640                                  
 20641                                  ; we are going to call load/exec function.
 20642                                  ; set es:bx to the parameter block here;;;;;;;
 20643                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20644                                  ; after the filename. so parameter starts after that. if next
 20645                                  ; character is a line feed (i.e. 10),then assume that the 0
 20646                                  ; we already encountered used to be a carrage return. in this
 20647                                  ; case,let's set the length to 0 which will be followed by
 20648                                  ; carridge return.
 20649                                  
 20650                                  ; es:si -> command line in config.sys. points to the first non blank
 20651                                  ;character after =.
 20652                                  
 20653 0000103A 06                      	push	es
 20654 0000103B 1E                      	push	ds
 20655 0000103C 07                      	pop	es
 20656 0000103D 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20657 0000103E 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20658                                  
 20659 00001040 31C9                    	xor	cx,cx
 20660 00001042 FC                      	cld
 20661 00001043 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20662 00001049 BF[6E03]                	mov	di,ldexec_parm
 20663                                  installfilename:			; skip the file name
 20664 0000104C AC                      	lodsb				; al = ds:si; si++
 20665 0000104D 3C00                    	cmp	al,0
 20666 0000104F 7402                    	je	short got_installparm
 20667 00001051 EBF9                    	jmp	short installfilename
 20668                                  got_installparm:			; copy the parameters to ldexec_parm
 20669 00001053 AC                      	lodsb
 20670 00001054 268805                  	mov	[es:di],al
 20671 00001057 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20672 00001059 7405                    	je	short done_installparm
 20673 0000105B FEC1                    	inc	cl			; # of char. in the parm.
 20674 0000105D 47                      	inc	di
 20675 0000105E EBF3                    	jmp	short got_installparm
 20676                                  done_installparm:
 20677 00001060 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20678 00001065 80F900                  	cmp	cl,0			; if no parm,then
 20679 00001068 7506                    	jne	short install_seg_set 	; let the parm area
 20680 0000106A 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20681                                  					; starts with cr.
 20682                                  install_seg_set:
 20683 00001070 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20684 00001077 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20685                                  
 20686                                  ;---------------------------------------------------M067----------------
 20687                                  ;
 20688                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20689                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20690                                  ;
 20691                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20692                                  ;
 20693                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20694                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20695                                  ; 	was fixed. 
 20696                                  ;
 20697                                  ; ----------------------------------------------------------------------
 20698                                  
 20699                                  ;;ifdef   MULTI_CONFIG
 20700                                  
 20701                                  ; If there's any environment data in "config_wrkseg", pass to app
 20702                                  
 20703                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20704                                          ;mov     cx,ax
 20705                                          ;cmp     word [cs:config_envlen],0
 20706                                          ;je      short no_envdata2
 20707                                          ;mov     cx,[cs:config_wrkseg]
 20708                                  ;no_envdata2:
 20709                                  ;;endif  ;MULTI_CONFIG
 20710                                  
 20711                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20712                                  	; 24/10/2022
 20713                                  	;mov	[cs:iexec.environ],cx
 20714                                  	; 02/11/2022
 20715 00001079 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20716                                  
 20717                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20718 0000107D 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20719                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20720 00001081 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20721                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20722 00001085 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20723 00001089 E86E00                  	call	sum_up
 20724 0000108C 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20725 00001090 31C0                    	xor	ax,ax
 20726 00001092 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20727 00001094 BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20728 00001097 06                      	push	es			; save es,ds for load/exec
 20729 00001098 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20730 00001099 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20731                                  					; load/exec function and check sum.
 20732                                  
 20733                                  ;----------------------------------------
 20734                                  
 20735                                  ;j.k. this is the returning address from sysinit_base.
 20736                                  
 20737                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20738                                  
 20739                                  sysinitptr:				; returning far address from sysinit_base
 20740 0000109E 5E                      	pop	si			; restore si for config.sys file.
 20741 0000109F 06                      	push	es
 20742 000010A0 1E                      	push	ds
 20743 000010A1 07                      	pop	es
 20744 000010A2 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20745 000010A3 7306                            jnc     short install_exit_ret
 20746                                  
 20747 000010A5 56                      	push	si			; error in loading the file for install=.
 20748 000010A6 E8AE22                  	call	badload 		; es:si-> path,filename,0.
 20749 000010A9 5E                      	pop	si
 20750                                  
 20751                                  	; 24/10/2022
 20752                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20753                                  	; 11/12/2022
 20754                                  	; ds = cs
 20755 000010AA C3                      	retn
 20756                                  
 20757                                  install_exit_ret:
 20758                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20759                                  
 20760                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20761                                  ;SYSINIT:1142h:
 20762 000010AB B44D                    	mov     ah,4Dh
 20763 000010AD CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20764 000010AF 80FC03                  	cmp     ah,3
 20765 000010B2 7404                    	jz      short sysinitptr_retn
 20766 000010B4 E89316                  	call    error_line
 20767 000010B7 F9                      	stc
 20768                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20769 000010B8 C3                      	retn		
 20770                                  
 20771                                  ; ----------------------------------------------------------------------
 20772                                  
 20773                                  ;**	ParaRound - Round Up length to paragraph multiple
 20774                                  ;
 20775                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20776                                  ;	by 16 yielding a "length in paragraphs" value.
 20777                                  ;
 20778                                  ;	ENTRY	(ax) = byte length
 20779                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20780                                  ;	USES	ax, flags
 20781                                  
 20782                                  ParaRound:
 20783 000010B9 83C00F                  	add	ax,15
 20784 000010BC D1D8                    	rcr	ax,1
 20785 000010BE D1E8                    	shr	ax,1
 20786 000010C0 D1E8                    	shr	ax,1
 20787 000010C2 D1E8                    	shr	ax,1
 20788 000010C4 C3                      	retn
 20789                                  
 20790                                  ; ----------------------------------------------------------------------
 20791                                  ; sysinit_base module.
 20792                                  ;
 20793                                  ; This module is relocated by the routine EndFile to a location in low
 20794                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20795                                  ; that are being loaded by the "install=" command. After the EXEC call
 20796                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20797                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20798                                  ; If it did, then this module will print an error message and stop the
 20799                                  ; system. Otherwise, it returns control to SYSINIT.
 20800                                  ;
 20801                                  ;in: after relocation,
 20802                                  ;    ax = 4b00h - load and execute the program dos function.
 20803                                  ;    ds = confbot. segment of config.sys file image
 20804                                  ;    es = sysinitseg. segment of sysinit module itself.
 20805                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20806                                  ;    es:bx = pointer to a parameter block for load.
 20807                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20808                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20809                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20810                                  ;			word boundary moduler form.
 20811                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20812                                  ;
 20813                                  ;note: sysinit should save necessary registers and when the control is back
 20814                                  
 20815                                  	; 24/10/2022
 20816                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20817                                  sysinit_base:				
 20818 000010C5 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20819 000010CA 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20820 000010CF CD21                    	int	21h			; load/exec dos call.
 20821 000010D1 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20822 000010D6 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20823 000010DB 1F                      	pop	ds			; restore confbot seg
 20824 000010DC 07                      	pop	es			; restore sysinitseg
 20825 000010DD 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20826                                  					; at this time,i don't have to worry about
 20827                                  					; that sysinit module has been broken or not.
 20828 000010DF E81800                  	call	sum_up			; otherwise,check if it is good.
 20829 000010E2 263906[5603]            	cmp	[es:checksum],ax
 20830 000010E7 740C                    	je	short sysinit_base_end
 20831                                  
 20832                                  ;	memory broken. show "memory allocation error" message and stall.
 20833                                  
 20834 000010E9 B409                    	mov	ah,9
 20835 000010EB 0E                      	push	cs
 20836 000010EC 1F                      	pop	ds
 20837 000010ED BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20838 000010F0 CD21                    	int	21h
 20839                                  		; DOS - PRINT STRING
 20840                                  		; DS:DX -> string terminated by "$"
 20841                                  	; 24/10/2022
 20842                                  _stall: 
 20843                                  	; 11/12/2022
 20844 000010F2 F4                      	hlt 
 20845                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20846                                  	;hlt				;use HLT to minimize energy consumption
 20847 000010F3 EBFD                            jmp	short _stall
 20848                                  
 20849                                  sysinit_base_end: 
 20850 000010F5 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20851                                  
 20852                                  ;-------------------------------------
 20853                                  
 20854                                  sum_up:
 20855                                  
 20856                                  ;in:   es - sysinitseg.
 20857                                  ;out:  ax - result
 20858                                  ;
 20859                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20860                                  ;	 sysinit segment,the data area, and the current stack area are not
 20861                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20862                                  ;	 gaurantee to be safe.
 20863                                  ;
 20864                                  ;first sum up confbot seg.
 20865                                  
 20866 000010FA 1E                      	push	ds
 20867                                  	;mov	ax,[es:CONFBOT]
 20868                                  	; 24/10/2022
 20869 000010FB 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20870 000010FF 8ED8                    	mov	ds,ax
 20871 00001101 31F6                    	xor	si,si
 20872 00001103 31C0                    	xor	ax,ax
 20873 00001105 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20874                                  					;whole test better fail.
 20875 0000110A D1E9                    	shr	cx,1			; make it a word count
 20876 0000110C 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20877                                  sum1:
 20878 0000110E 0304                    	add	ax,[si]
 20879 00001110 46                      	inc	si
 20880 00001111 46                      	inc	si
 20881 00001112 E2FA                    	loop	sum1
 20882                                  ;now,sum up sysinit module.
 20883                                  sum_sys_code:
 20884                                  	; 24/10/2022
 20885 00001114 BE1411                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20886                                  				        ; starting after the stack.  M069
 20887                                  					;  this does not cover the possible stack code!!!
 20888                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20889                                  	; 02/11/2022
 20890                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20891                                  	; 30/12/2022 (BugFix)
 20892                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20893 00001117 B9[E038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20894 0000111A 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20895 0000111C D1E9                    	shr	cx,1
 20896                                  sum2:
 20897 0000111E 260304                  	add	ax,[es:si]
 20898 00001121 46                      	inc	si
 20899 00001122 46                      	inc	si
 20900 00001123 E2F9                    	loop	sum2
 20901 00001125 1F                      	pop	ds
 20902 00001126 C3                      	retn
 20903                                  
 20904                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20905                                  
 20906                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20907                                  ;SYSINIT:11BDh:
 20908 00001127 0000                    	dw	0
 20909                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20910                                  ;SYSINIT:11BFh:
 20911 00001129 0000                    	dw	0
 20912                                  
 20913                                  mem_alloc_err_msgx:
 20914                                  
 20915                                         ;include msbio.cl4		; memory allocation error message
 20916                                  
 20917                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20918 0000112B 0D0A                    	db	0Dh,0Ah
 20919 0000112D 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20919 00001136 6C6F636174696F6E20-
 20919 0000113F 6572726F722024     
 20920                                  
 20921                                  end_sysinit_base: ; label byte
 20922                                  	; 24/10/2022
 20923                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20924                                  
 20925                                  ; ----------------------------------------------------------------------
 20926                                  ; Set_Buffer
 20927                                  ;
 20928                                  ;function: set buffers in the real memory.				  
 20929                                  ;	   lastly set the memhi,memlo for the next available free address.
 20930                                  ;
 20931                                  ;input:    ds:bx -> buffinfo.
 20932                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20933                                  ;	   singlebuffersize = buffer header size + sector size		  
 20934                                  ;
 20935                                  ;output:   buffers Queue established.	       				   
 20936                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20937                                  ; ----------------------------------------------------------------------
 20938                                  
 20939                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20940                                  	; (SYSINIT:11DCh)
 20941                                  
 20942                                  set_buffer:
 20943 00001146 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20944 00001148 E85500                  	call	GetBufferAddr
 20945 0000114B 7402                    	jz	short set_buff_1
 20946 0000114D B201                    	mov	dl,1				; buffers in HMA
 20947                                  set_buff_1:
 20948                                  	; 25/10/2022
 20949                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20950 0000114F 893F                    	mov	[bx],di
 20951                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20952 00001151 8C4702                  	mov	[bx+2],es
 20953                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20954 00001154 C747040000              	mov	word [bx+4],0
 20955                                  
 20956 00001159 89F8                    	mov	ax,di
 20957 0000115B 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20958 00001160 57                      	push	di				; remember first buffer
 20959                                  
 20960                                  ;	for each buffer
 20961                                  
 20962                                  nxt_buff:
 20963 00001161 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20964 00001164 89C7                    	mov	di,ax
 20965 00001166 E2F9                    	loop	nxt_buff
 20966                                  
 20967 00001168 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20968                                  
 20969 0000116D 59                      	pop	cx				; get first buffer
 20970                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20971 0000116E 26890D                  	mov	[es:di],cx
 20972 00001171 87CF                    	xchg	cx,di
 20973                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20974                                  	; 25/10/2022
 20975 00001173 26894D02                	mov	[es:di+2],cx
 20976                                  
 20977 00001177 08D2                    	or	dl,dl				; In HMa ?
 20978 00001179 7417                    	jz	short set_buff_2		; no
 20979                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20980 0000117B C6470C01                	mov	byte [bx+12],1
 20981 0000117F 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20982                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20983 00001183 C7470D0000              	mov	word [bx+13],0
 20984                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20985 00001188 89470F                  	mov	word [bx+15],ax
 20986 0000118B 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20987                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20988 0000118F 83E814                  	sub	ax,20
 20989                                  set_buff_2:
 20990 00001192 2E0106[DE03]            	add	[cs:memlo],ax
 20991                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20992 00001197 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 20993                                  	;call	round
 20994                                  	;retn
 20995                                  	; 12/12/2022
 20996 0000119D E9201F                  	jmp	round
 20997                                  
 20998                                  ; ----------------------------------------------------------------------
 20999                                  ; procedure : GetBufferAddr
 21000                                  ;
 21001                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21002                                  ;
 21003                                  ; returns in es:di the buffer adress
 21004                                  ; returns NZ if allocated in HMA
 21005                                  ; ----------------------------------------------------------------------
 21006                                  
 21007                                  	; 25/10/2022 
 21008                                  GetBufferAddr:
 21009 000011A0 53                      	push	bx
 21010 000011A1 52                      	push	dx
 21011 000011A2 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21012 000011A6 2EF726[9702]            	mul	word [cs:buffers]
 21013                                  	;add	ax,0Fh
 21014 000011AB 83C00F                  	add	ax,15 
 21015                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21016                                  	;and	ax,~15	; 0FFF0h	; para round
 21017                                  	; 12/12/2022
 21018 000011AE 24F0                    	and	al,~15	; 0F0h
 21019 000011B0 89C3                    	mov	bx,ax
 21020 000011B2 B8024A                  	mov	ax,4A02h
 21021                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21022 000011B5 CD2F                    	int	2Fh
 21023 000011B7 83FFFF                  	cmp	di,0FFFFh
 21024 000011BA 7508                    	jne	short got_hma
 21025 000011BC BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 21026                                  	;zf=1
 21027                                  	;xor	di,di	; 25/10/2022
 21028                                  	;zf=1
 21029 000011BF 2E8E06[E003]            	mov	es,[cs:memhi]
 21030                                  got_hma:
 21031 000011C4 5A                      	pop	dx
 21032 000011C5 5B                      	pop	bx
 21033 000011C6 C3                      	retn
 21034                                  
 21035                                  ; ----------------------------------------------------------------------
 21036                                  
 21037                                  set_buffer_info:
 21038                                  
 21039                                  ;function: set buf_link,buf_id,buf_sector
 21040                                  ;
 21041                                  ;in: es:di -> buffer header to be set.
 21042                                  ;    ax = di
 21043                                  ;
 21044                                  ;out:
 21045                                  ;    above entries set.
 21046                                  
 21047                                  	; 25/10/2022 
 21048 000011C7 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21049                                  	;pop	word [es:di+buffinfo.buf_prev]
 21050 000011CC 268F4502                	pop	word [es:di+2]
 21051 000011D0 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21052 000011D4 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21053                                  	;mov	[es:di+buffinfo.buf_next],ax
 21054 000011D9 268905                  	mov	[es:di],ax
 21055                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21056 000011DC 26C74504FF00            	mov	word [es:di+4],00FFh
 21057                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21058 000011E2 26C745060000            	mov	word [es:di+6],0
 21059                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21060 000011E8 26C745080000            	mov	word [es:di+8],0
 21061 000011EE C3                      	retn
 21062                                  
 21063                                  ; ======================================================================
 21064                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21065                                  ; ----------------------------------------------------------------------
 21066                                  ; 27/03/2019 - Retro DOS v4.0
 21067                                  
 21068                                  ; ----------------------------------------------------------------------
 21069                                  ; ibmstack initialization routine.
 21070                                  ;
 21071                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21072                                  ;	has been modified. this initialization routine also has to
 21073                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21074                                  ;	should be set to signal that this interrupt handler is the
 21075                                  ;	first handler hooked to this interrupt vector.
 21076                                  ;	we determine this by looking at the instruction pointed by
 21077                                  ;	this vector. if it is iret, then this handler should be the
 21078                                  ;	first one. in our case, only the interrupt vector 77h is the
 21079                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21080                                  ;
 21081                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21082                                  ;	some design changes are needed to the above interrupt sharing
 21083                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21084                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21085                                  ;	interrupts would only be generated on levels 7 and 15.
 21086                                  ;	these assumptions are not true any more. we have to use the firstflag
 21087                                  ;	for every level of interrupt. we will set the firstflag on the following
 21088                                  ;	conditions:
 21089                                  ;
 21090                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21091                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21092                                  ;	 c. else if cs:ip points to an iret, then "first"
 21093                                  ;	 d. else if cs:ip points to dummy, then "first"
 21094                                  ;
 21095                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21096                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21097                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21098                                  ;	the bioses for all of the machines.
 21099                                  ;
 21100                                  ;	system design group requests bios to handle the phantom interrupts.
 21101                                  ;
 21102                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21103                                  ;	produced by the bogus adapter card even without interrupt request is
 21104                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21105                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21106                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21107                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21108                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21109                                  ;	interrupt line.
 21110                                  ;
 21111                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21112                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21113                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21114                                  ;	control. if it is the first, then the following action should be
 21115                                  ;	taken. we don't have to implement skack logic in this case.
 21116                                  ;
 21117                                  ;	to implement this logic, we rather choose a simple method.
 21118                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21119                                  ;	going to hook this interrupt vector. the reason is if the original
 21120                                  ;	vector points to "iret" and do nothing, we don't need
 21121                                  ;	to implement the stack logic for it. this will simplify implementation
 21122                                  ;	while maintaining compatibility with the old version of dos.
 21123                                  ;	this implies that in the main stack code, there might be a stack code
 21124                                  ;	that will never be used, a dead code.
 21125                                  ;
 21126                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21127                                  
 21128                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21129                                  	; (SYSINIT:1287h)
 21130                                  
 21131                                  	; 14/12/2022
 21132                                  stackinit:
 21133 000011EF 50                      	push	ax
 21134 000011F0 1E                      	push	ds
 21135 000011F1 06                      	push	es
 21136 000011F2 53                      	push	bx
 21137 000011F3 51                      	push	cx
 21138 000011F4 52                      	push	dx
 21139 000011F5 57                      	push	di
 21140 000011F6 56                      	push	si
 21141 000011F7 55                      	push	bp
 21142                                  
 21143                                  ;currently es -> stack code area
 21144                                  
 21145                                  	; 12/12/2022
 21146                                  	; ds = cs
 21147 000011F8 A1[8A02]                	mov	ax,[stack_count]
 21148 000011FB 89C1                    	mov	cx,ax  ; *!*!*  
 21149                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21150                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21151                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21152 000011FD 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21153                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21154 00001201 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21155 00001204 26A3[0600]              	mov	[es:stacksize],ax
 21156                                  	; 12/12/2022
 21157 00001208 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21158                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21159                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21160                                  	;mov	ax,[cs:stack_addr]  ; !!
 21161 0000120B 26A3[0800]              	mov	[es:stacks],ax
 21162                                  	; 12/12/2022
 21163 0000120F 89C5                    	mov	bp,ax ; *!*
 21164 00001211 A1[9002]                	mov	ax,[stack_addr+2]
 21165                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21166                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21167                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21168 00001214 26A3[0A00]              	mov	[es:stacks+2],ax
 21169                                  
 21170                                  ; initialize the data fields with the parameters
 21171                                  
 21172                                  ; "firstentry" will always be at stacks
 21173                                  
 21174                                  	;mov	bp,[es:stacks]			; get offset of stack
 21175                                  	; 12/12/2022
 21176                                  	; bp = [es:stacks] ; *!*
 21177 00001218 26892E[0C00]            	mov	[es:firstentry],bp
 21178                                  
 21179                                  ; the stacks will always immediately follow the table entries
 21180                                  
 21181 0000121D B80800                  	mov	ax,entrysize ; 8
 21182                                  	;mov	cx,[es:stackcount]
 21183                                  	; 12/12/2022
 21184                                  	; cx = [es:stackcount] ; *!*!*
 21185 00001220 F7E1                    	mul	cx
 21186 00001222 01E8                    	add	ax,bp
 21187 00001224 26A3[0400]              	mov	[es:stackat],ax
 21188 00001228 89C3                    	mov	bx,ax
 21189 0000122A 83EB02                  	sub	bx,2
 21190                                  
 21191                                  ; zero the entire stack area to start with
 21192                                  
 21193 0000122D 268B3E[0400]            	mov	di,[es:stackat]
 21194 00001232 26A1[0600]              	mov	ax,[es:stacksize]
 21195 00001236 F7E1                    	mul	cx
 21196 00001238 89C1                    	mov	cx,ax
 21197 0000123A 31C0                    	xor	ax,ax
 21198 0000123C 06                      	push	es
 21199 0000123D 1F                      	pop	ds				;ds = relocated stack code seg.
 21200                                  
 21201                                  ;now, ds -> stack code area
 21202                                  
 21203 0000123E 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21204 00001242 FC                      	cld
 21205 00001243 F3AA                    	rep	stosb
 21206                                  
 21207 00001245 8B0E[0200]              	mov	cx,[stackcount]
 21208                                  
 21209                                  ; loop for "count" times, building a table entry
 21210                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21211                                  ;  cx = number of entries
 21212                                  ;  es:bp => base of stacks - 2
 21213                                  ;  es:bx => first table entry
 21214                                  
 21215                                  buildloop:
 21216                                  	; 11/12/2022
 21217                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21218                                  	; 25/10/2022
 21219 00001249 26C6460000              	mov	byte [es:bp],free
 21220 0000124E 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21221                                  	;mov	[es:bp+1],al
 21222 00001252 26894602                	mov	[es:bp+savedsp],ax
 21223                                  	;mov	[es:bp2],ax
 21224 00001256 26894604                	mov	[es:bp+savedss],ax
 21225                                  	;mov	[es:bp+4],ax
 21226 0000125A 031E[0600]              	add	bx,[stacksize]
 21227 0000125E 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21228                                  	;mov	[es:bp+6],bx
 21229 00001262 26892F                  	mov	[es:bx],bp
 21230 00001265 83C508                  	add	bp,entrysize ; 8
 21231                                  
 21232 00001268 E2DF                    	loop	buildloop
 21233                                  
 21234 0000126A 83ED08                  	sub	bp,entrysize ; 8
 21235 0000126D 892E[0E00]              	mov	[lastentry],bp
 21236 00001271 892E[1000]              	mov	[nextentry],bp
 21237                                  
 21238 00001275 1E                      	push	ds
 21239 00001276 B800F0                  	mov	ax,0F000h		;look at the model byte
 21240 00001279 8ED8                    	mov	ds,ax
 21241 0000127B 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21242 00001280 1F                      	pop	ds
 21243 00001281 7504                    	jne	short skip_disablenmis
 21244                                  
 21245 00001283 B007                    	mov	al,07h			; disable convertible nmis
 21246 00001285 E672                    	out	72h,al
 21247                                  
 21248                                  skip_disablenmis:
 21249 00001287 31C0                    	xor	ax,ax
 21250 00001289 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21251                                  					;ds - relocated stack code segment
 21252 0000128B FA                      	cli
 21253                                  
 21254                                  	;irp	aa,<02,08,09,70>
 21255                                  	;
 21256                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21257                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21258                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21259                                  	;mov	dx,offset int&aa	;pass where new handler is
 21260                                  	;call	new_init_loop		;adjust the vector to new handler,
 21261                                  	;				;saving pointer to original owner
 21262                                  	;endm
 21263                                  
 21264                                  stkinit_02:
 21265 0000128C BE0800                  	mov	si,02h*4 ; 8
 21266 0000128F BF[4206]                	mov	di,INT19OLD02
 21267 00001292 BB[1200]                	mov	bx,old02
 21268 00001295 BA[1600]                	mov	dx,int02
 21269 00001298 E84901                  	call	new_init_loop
 21270                                  stkinit_08:
 21271 0000129B BE2000                  	mov	si,08h*4 ; 32
 21272 0000129E BF[4706]                	mov	di,INT19OLD08
 21273 000012A1 BB[3800]                	mov	bx,old08
 21274 000012A4 BA[3C00]                	mov	dx,int08
 21275 000012A7 E83A01                  	call	new_init_loop
 21276                                  stkinit_09:
 21277 000012AA BE2400                  	mov	si,09h*4 ; 36
 21278 000012AD BF[4C06]                	mov	di,INT19OLD09
 21279 000012B0 BB[4100]                	mov	bx,old09
 21280 000012B3 BA[4500]                	mov	dx,int09
 21281 000012B6 E82B01                  	call	new_init_loop
 21282                                  stkinit_70:
 21283 000012B9 BEC001                  	mov	si,70h*4 ; 448
 21284 000012BC BF[6A06]                	mov	di,INT19OLD70
 21285 000012BF BB[4E00]                	mov	bx,old70
 21286 000012C2 BA[5200]                	mov	dx,int70
 21287 000012C5 E81C01                  	call	new_init_loop
 21288                                  
 21289                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21290                                  	;
 21291                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21292                                  	;push	ds			;save relocated stack code segment
 21293                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21294                                  	;push	ds
 21295                                  	;pop	dx			;dx = segment value
 21296                                  	;	
 21297                                  	;cmp	dx,0
 21298                                  	;jz	int&aa&_first
 21299                                  	;
 21300                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21301                                  	;jz	int&aa&_first
 21302                                  	;
 21303                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21304                                  	;jz	int&aa&_not_first
 21305                                  	;
 21306                                  	;cmp	dx,0f000h		;rom bios segment
 21307                                  	;jnz	int&aa&_not_first
 21308                                  	;
 21309                                  	;push	es
 21310                                  	;push	dx
 21311                                  	;mov	dx,0f000h
 21312                                  	;mov	es,dx
 21313                                  	;cmp	bx,word ptr es:0ff01h
 21314                                         	;pop	dx
 21315                                  	;pop	es
 21316                                  	;jz	int&aa&_first
 21317                                  	;
 21318                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21319                                  	;pop	ds
 21320                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21321                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21322                                  	;mov	dx, offset int&aa	;pass where new handler is
 21323                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21324                                  	;				;pointer to original owner.
 21325                                  	;jmp	short int&aa&_end
 21326                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21327                                  	;pop	ds
 21328                                  ;int&aa&_end:
 21329                                  	;
 21330                                  	;endm
 21331                                  
 21332                                  stkinit_0A:
 21333 000012C8 BE2800                  	mov	si,0Ah*4 ; 40
 21334                                  	
 21335                                  ; 14/12/2022
 21336                                  %if 0	
 21337                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21338                                  	push	ds
 21339                                  	
 21340                                  	lds	bx,[es:si]
 21341                                  	push	ds
 21342                                  	pop	dx
 21343                                  		
 21344                                  	cmp	dx,0
 21345                                  	je	short int_0A_first
 21346                                  	
 21347                                  	cmp	byte [bx],0CFh
 21348                                  	je	short int_0A_first
 21349                                  	
 21350                                  	cmp	word [bx+6],424Bh
 21351                                  	je	short int_0A_not_first
 21352                                  	
 21353                                  	cmp	dx,0F000h
 21354                                  	jne	short int_0A_not_first
 21355                                  	
 21356                                  	push	es
 21357                                  	push	dx
 21358                                  	mov	dx,0F000h
 21359                                  	mov	es,dx
 21360                                  	cmp	bx,[es:0FF01h]
 21361                                         	pop	dx
 21362                                  	pop	es
 21363                                  	je	short int_0A_first
 21364                                  %Endif
 21365                                  
 21366                                  	; 14/12/2022
 21367                                  	; 25/10/2022
 21368 000012CB E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21369 000012CE 730C                    	jnc	short int_0A_first
 21370                                  	
 21371                                  int_0A_not_first:
 21372                                  	; 14/12/2022
 21373                                  	; 25/10/2022
 21374                                  	;pop	ds
 21375 000012D0 BF[5106]                	mov	di,INT19OLD0A
 21376 000012D3 BB[5900]                	mov	bx,old0A
 21377 000012D6 BA[5700]                	mov	dx,int0A
 21378 000012D9 E80801                  	call	new_init_loop
 21379                                  	
 21380                                  	; 14/12/2022	
 21381                                  	;jmp	short int_0A_end
 21382                                  ;int_0A_first:
 21383                                  	; 25/10/2022
 21384                                  	;pop	ds
 21385                                  
 21386                                  	; 14/12/2022
 21387                                  int_0A_first:
 21388                                  int_0A_end:
 21389                                  
 21390                                  stkinit_0B:
 21391 000012DC BE2C00                  	mov	si,0Bh*4 ; 44
 21392                                  	
 21393                                  	; 14/12/2022
 21394                                  	; 25/10/2022
 21395 000012DF E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21396 000012E2 730C                    	jnc	short int_0B_end ; int_0B_first
 21397                                  
 21398                                  ; 14/12/2022
 21399                                  %if 0	
 21400                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21401                                  	push	ds
 21402                                  	lds	bx,[es:si]
 21403                                  	push	ds
 21404                                  	pop	dx
 21405                                  		
 21406                                  	cmp	dx,0
 21407                                  	je	short int_0B_first
 21408                                  
 21409                                  	cmp	byte [bx],0CFh
 21410                                  	je	short int_0B_first
 21411                                  	
 21412                                  	cmp	word [bx+6],424Bh
 21413                                  	je	short int_0B_not_first
 21414                                  	
 21415                                  	cmp	dx,0F000h
 21416                                  	jne	short int_0B_not_first
 21417                                  
 21418                                  	push	es
 21419                                  	push	dx
 21420                                  	mov	dx,0F000h
 21421                                  	mov	es,dx
 21422                                  	cmp	bx,[es:0FF01h]
 21423                                  	pop	dx
 21424                                  	pop	es
 21425                                  	je	short int_0B_first
 21426                                  %endif
 21427                                  
 21428                                  int_0B_not_first:
 21429                                  	; 14/12/2022
 21430                                  	; 25/10/2022
 21431                                  	;pop	ds
 21432 000012E4 BF[5606]                	mov	di,INT19OLD0B
 21433 000012E7 BB[7100]                	mov	bx,old0B
 21434 000012EA BA[6F00]                	mov	dx,int0B
 21435 000012ED E8F400                  	call	new_init_loop
 21436                                  
 21437                                  	; 14/12/2022
 21438                                  	;jmp	short int_0B_end
 21439                                  ;int_0B_first:
 21440                                  	; 25/10/2022
 21441                                  	;pop	ds
 21442                                  
 21443                                  int_0B_end:
 21444                                  	
 21445                                  stkinit_0C:
 21446 000012F0 BE3000                  	mov	si,0Ch*4 ; 48
 21447                                  	
 21448                                  	; 14/12/2022
 21449                                  	; 25/10/2022
 21450 000012F3 E8C300                  	call	int_xx_first_check
 21451 000012F6 730C                    	jnc	short int_0C_end ; int_0C_first
 21452                                  
 21453                                  ; 14/12/2022
 21454                                  %if 0	
 21455                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21456                                  	push	ds
 21457                                  	lds	bx,[es:si]
 21458                                  	push	ds
 21459                                  	pop	dx
 21460                                  		
 21461                                  	cmp	dx,0
 21462                                  	je	short int_0C_first
 21463                                  
 21464                                  	cmp	byte [bx],0CFh
 21465                                  	je	short int_0C_first
 21466                                  	
 21467                                  	cmp	word [bx+6],424Bh
 21468                                  	je	short int_0C_not_first
 21469                                  	
 21470                                  	cmp	dx,0F000h
 21471                                  	jne	short int_0C_not_first
 21472                                  
 21473                                  	push	es
 21474                                  	push	dx
 21475                                  	mov	dx,0F000h
 21476                                  	mov	es,dx
 21477                                  	cmp	bx,[es:0FF01h]
 21478                                  	pop	dx
 21479                                  	pop	es
 21480                                  	je	short int_0C_first
 21481                                  %endif
 21482                                  	
 21483                                  int_0C_not_first:
 21484                                  	; 14/12/2022
 21485                                  	; 25/10/2022
 21486                                  	;pop	ds
 21487 000012F8 BF[5B06]                	mov	di,INT19OLD0C
 21488 000012FB BB[8900]                	mov	bx,old0C
 21489 000012FE BA[8700]                	mov	dx,int0C
 21490 00001301 E8E000                  	call	new_init_loop
 21491                                  
 21492                                  	; 14/12/2022
 21493                                  	;jmp	short int_0C_end
 21494                                  ;int_0C_first:
 21495                                  	; 25/10/2022
 21496                                  	;pop	ds
 21497                                  
 21498                                  int_0C_end:
 21499                                  
 21500                                  stkinit_0D:
 21501 00001304 BE3400                  	mov	si,0Dh*4 ; 52
 21502                                  
 21503                                  	; 14/12/2022	
 21504                                  	; 25/10/2022
 21505 00001307 E8AF00                  	call	int_xx_first_check
 21506 0000130A 730C                    	jnc	short int_0D_end ; int_0D_first
 21507                                  
 21508                                  ; 14/12/2022
 21509                                  %if 0	
 21510                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21511                                  	push	ds
 21512                                  	lds	bx,[es:si]
 21513                                  	push	ds
 21514                                  	pop	dx
 21515                                  		
 21516                                  	cmp	dx,0
 21517                                  	je	short int_0D_first
 21518                                  
 21519                                  	cmp	byte [bx],0CFh
 21520                                  	je	short int_0D_first
 21521                                  	
 21522                                  	cmp	word [bx+6],424Bh
 21523                                  	je	short int_0D_not_first
 21524                                  	
 21525                                  	cmp	dx,0F000h
 21526                                  	jne	short int_0D_not_first
 21527                                  
 21528                                  	push	es
 21529                                  	push	dx
 21530                                  	mov	dx,0F000h
 21531                                  	mov	es,dx
 21532                                  	cmp	bx,[es:0FF01h]
 21533                                  	pop	dx
 21534                                  	pop	es
 21535                                  	je	short int_0D_first
 21536                                  %endif
 21537                                  	
 21538                                  int_0D_not_first:
 21539                                  	; 14/12/2022
 21540                                  	; 25/10/2022
 21541                                  	;pop	ds
 21542 0000130C BF[6006]                	mov	di,INT19OLD0D
 21543 0000130F BB[A100]                	mov	bx,old0D
 21544 00001312 BA[9F00]                	mov	dx,int0D
 21545 00001315 E8CC00                  	call	new_init_loop
 21546                                  
 21547                                  	; 14/12/2022
 21548                                  	;jmp	short int_0D_end
 21549                                  	; 02/11/2022
 21550                                  ;int_0D_first:
 21551                                  	;pop	ds
 21552                                  
 21553                                  int_0D_end:
 21554                                  
 21555                                  stkinit_0E:
 21556 00001318 BE3800                  	mov	si,0Eh*4 ; 56
 21557                                  
 21558                                  	; 14/12/2022	
 21559                                  	; 25/10/2022
 21560 0000131B E89B00                  	call	int_xx_first_check
 21561 0000131E 730C                    	jnc	short int_0E_end ; int_0E_first
 21562                                  
 21563                                  ; 14/12/2022
 21564                                  %if 0	
 21565                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21566                                  	push	ds
 21567                                  	lds	bx,[es:si]
 21568                                  	push	ds
 21569                                  	pop	dx
 21570                                  		
 21571                                  	cmp	dx,0
 21572                                  	je	short int_0E_first
 21573                                  
 21574                                  	cmp	byte [bx],0CFh
 21575                                  	je	short int_0E_first
 21576                                  	
 21577                                  	cmp	word [bx+6],424Bh
 21578                                  	je	short int_0E_not_first
 21579                                  	
 21580                                  	cmp	dx,0F000h
 21581                                  	jne	short int_0E_not_first
 21582                                  
 21583                                  	push	es
 21584                                  	push	dx
 21585                                  	mov	dx,0F000h
 21586                                  	mov	es,dx
 21587                                  	cmp	bx,[es:0FF01h]
 21588                                  	pop	dx
 21589                                  	pop	es
 21590                                  	je	short int_0E_first
 21591                                  %endif
 21592                                  	
 21593                                  int_0E_not_first:
 21594                                  	; 14/12/2022
 21595                                  	; 25/10/2022
 21596                                  	;pop	ds
 21597 00001320 BF[6506]                	mov	di,INT19OLD0E
 21598 00001323 BB[B900]                	mov	bx,old0E
 21599 00001326 BA[B700]                	mov	dx,int0E
 21600 00001329 E8B800                  	call	new_init_loop
 21601                                  
 21602                                  	; 14/12/2022
 21603                                  	;jmp	short int_0E_end
 21604                                  ;int_0E_first:
 21605                                  	; 25/10/2022
 21606                                  	;pop	ds	
 21607                                  
 21608                                  int_0E_end:
 21609                                  
 21610                                  stkinit_72:
 21611 0000132C BEC801                  	mov	si,72h*4 ; 456
 21612                                  	
 21613                                  	; 14/12/2022
 21614                                  	; 25/10/2022
 21615 0000132F E88700                  	call	int_xx_first_check
 21616 00001332 730C                    	jnc	short int_72_end ; int_72_first
 21617                                  
 21618                                  ; 14/12/2022
 21619                                  %if 0	
 21620                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21621                                  	push	ds
 21622                                  	lds	bx,[es:si]
 21623                                  	push	ds
 21624                                  	pop	dx
 21625                                  		
 21626                                  	cmp	dx,0
 21627                                  	je	short int_72_first
 21628                                  
 21629                                  	cmp	byte [bx],0CFh
 21630                                  	je	short int_72_first
 21631                                  	
 21632                                  	cmp	word [bx+6],424Bh
 21633                                  	je	short int_72_not_first
 21634                                  	
 21635                                  	cmp	dx,0F000h
 21636                                  	jne	short int_72_not_first
 21637                                  
 21638                                  	push	es
 21639                                  	push	dx
 21640                                  	mov	dx,0F000h
 21641                                  	mov	es,dx
 21642                                  	cmp	bx,[es:0FF01h]
 21643                                  	pop	dx
 21644                                  	pop	es
 21645                                  	je	short int_72_first
 21646                                  %endif
 21647                                  	
 21648                                  int_72_not_first:
 21649                                  	; 14/12/2022
 21650                                  	; 25/10/2022
 21651                                  	;pop	ds
 21652 00001334 BF[6F06]                	mov	di,INT19OLD72
 21653 00001337 BB[D100]                	mov	bx,old72
 21654 0000133A BA[CF00]                	mov	dx,int72
 21655 0000133D E8A400                  	call	new_init_loop
 21656                                  
 21657                                  	; 14/12/2022
 21658                                  	;jmp	short int_72_end
 21659                                  ;int_72_first:
 21660                                  	; 25/10/2022
 21661                                  	;pop	ds
 21662                                  
 21663                                  int_72_end:
 21664                                  
 21665                                  stkinit_73:
 21666 00001340 BECC01                  	mov	si,73h*4 ; 460
 21667                                  	
 21668                                  	; 14/12/2022
 21669                                  	; 25/10/2022
 21670 00001343 E87300                  	call	int_xx_first_check
 21671 00001346 730C                    	jnc	short int_73_end ; int_73_first
 21672                                  
 21673                                  ; 14/12/2022
 21674                                  %if 0	
 21675                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21676                                  	push	ds
 21677                                  	lds	bx,[es:si]
 21678                                  	push	ds
 21679                                  	pop	dx
 21680                                  		
 21681                                  	cmp	dx,0
 21682                                  	je	short int_73_first
 21683                                  
 21684                                  	cmp	byte [bx],0CFh
 21685                                  	je	short int_73_first
 21686                                  	
 21687                                  	cmp	word [bx+6],424Bh
 21688                                  	je	short int_73_not_first
 21689                                  	
 21690                                  	cmp	dx,0F000h
 21691                                  	jne	short int_73_not_first
 21692                                  
 21693                                  	push	es
 21694                                  	push	dx
 21695                                  	mov	dx,0F000h
 21696                                  	mov	es,dx
 21697                                  	cmp	bx,[es:0FF01h]
 21698                                  	pop	dx
 21699                                  	pop	es
 21700                                  	je	short int_73_first
 21701                                  %endif	
 21702                                  	
 21703                                  int_73_not_first:
 21704                                  	; 14/12/2022
 21705                                  	; 25/10/2022
 21706                                  	;pop	ds
 21707 00001348 BF[7406]                	mov	di,INT19OLD73
 21708 0000134B BB[E900]                	mov	bx,old73
 21709 0000134E BA[E700]                	mov	dx,int73
 21710 00001351 E89000                  	call	new_init_loop
 21711                                  
 21712                                  	; 14/12/2022
 21713                                  	;jmp	short int_73_end
 21714                                  ;int_73_first:
 21715                                  	; 25/10/2022
 21716                                  	;pop	ds
 21717                                  
 21718                                  int_73_end:
 21719                                  
 21720                                  stkinit_74:
 21721 00001354 BED001                  	mov	si,74h*4 ; 464
 21722                                  	
 21723                                  	; 14/12/2022
 21724                                  	; 25/10/2022
 21725 00001357 E85F00                  	call	int_xx_first_check
 21726 0000135A 730C                    	jnc	short int_74_end ; int_74_first
 21727                                  
 21728                                  ; 14/12/2022
 21729                                  %if 0		
 21730                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21731                                  	push	ds
 21732                                  	lds	bx,[es:si]
 21733                                  	push	ds
 21734                                  	pop	dx
 21735                                  		
 21736                                  	cmp	dx,0
 21737                                  	je	short int_74_first
 21738                                  
 21739                                  	cmp	byte [bx],0CFh
 21740                                  	je	short int_74_first
 21741                                  	
 21742                                  	cmp	word [bx+6],424Bh
 21743                                  	je	short int_74_not_first
 21744                                  	
 21745                                  	cmp	dx,0F000h
 21746                                  	jne	short int_74_not_first
 21747                                  
 21748                                  	push	es
 21749                                  	push	dx
 21750                                  	mov	dx,0F000h
 21751                                  	mov	es,dx
 21752                                  	cmp	bx,[es:0FF01h]
 21753                                  	pop	dx
 21754                                  	pop	es
 21755                                  	je	short int_74_first
 21756                                  %endif
 21757                                  
 21758                                  int_74_not_first:
 21759                                  	; 14/12/2022
 21760                                  	; 25/10/2022
 21761                                  	;pop	ds
 21762 0000135C BF[7906]                	mov	di,INT19OLD74
 21763 0000135F BB[0101]                	mov	bx,old74
 21764 00001362 BA[FF00]                	mov	dx,int74
 21765 00001365 E87C00                  	call	new_init_loop
 21766                                  	
 21767                                  	; 14/12/2022
 21768                                  	;jmp	short int_74_end
 21769                                  ;int_74_first:
 21770                                  	; 25/10/2022
 21771                                  	;pop	ds
 21772                                  
 21773                                  int_74_end:
 21774                                  
 21775                                  stkinit_76:
 21776 00001368 BED801                  	mov	si,76h*4 ; 472
 21777                                  	
 21778                                  	; 14/12/2022
 21779                                  	; 25/10/2022
 21780 0000136B E84B00                  	call	int_xx_first_check
 21781 0000136E 730E                    	jnc	short int_76_end ; int_76_first
 21782                                  
 21783                                  ; 14/12/2022
 21784                                  %if 0	
 21785                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21786                                  	push	ds
 21787                                  	lds	bx,[es:si]
 21788                                  	push	ds
 21789                                  	pop	dx
 21790                                  		
 21791                                  	cmp	dx,0
 21792                                  	je	short int_76_first
 21793                                  
 21794                                  	cmp	byte [bx],0CFh
 21795                                  	je	short int_76_first
 21796                                  	
 21797                                  	cmp	word [bx+6],424Bh
 21798                                  	je	short int_76_not_first
 21799                                  	
 21800                                  	cmp	dx,0F000h
 21801                                  	jne	short int_76_not_first
 21802                                  
 21803                                  	push	es
 21804                                  	push	dx
 21805                                  	mov	dx,0F000h
 21806                                  	mov	es,dx
 21807                                  	cmp	bx,[es:0FF01h]
 21808                                  	pop	dx
 21809                                  	pop	es
 21810                                  	je	short int_76_first
 21811                                  %endif
 21812                                  	
 21813                                  int_76_not_first:
 21814                                  	; 14/12/2022
 21815                                  	; 25/10/2022
 21816                                  	;pop	ds
 21817 00001370 BF[7E06]                	mov	di,INT19OLD76
 21818 00001373 BB[1901]                	mov	bx,old76
 21819 00001376 BA[1701]                	mov	dx,int76
 21820 00001379 E86800                  	call	new_init_loop
 21821                                  
 21822                                  	; 14/12/2022
 21823 0000137C EB00                    	jmp	short int_76_end
 21824                                  ;int_76_first:
 21825                                  	; 25/10/2022
 21826                                  	;pop	ds
 21827                                  
 21828                                  int_76_end:
 21829                                  
 21830                                  stkinit_77:
 21831 0000137E BEDC01                  	mov	si,77h*4 ; 476
 21832                                  	
 21833                                  	; 14/12/2022
 21834                                  	; 25/10/2022
 21835 00001381 E83500                  	call	int_xx_first_check
 21836 00001384 730C                    	jnc	short int_77_end ; int_77_first
 21837                                  
 21838                                  ; 14/12/2022
 21839                                  %if 0	
 21840                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21841                                  	push	ds
 21842                                  	lds	bx,[es:si]
 21843                                  	push	ds
 21844                                  	pop	dx
 21845                                  		
 21846                                  	cmp	dx,0
 21847                                  	je	short int_77_first
 21848                                  
 21849                                  	cmp	byte [bx],0CFh
 21850                                  	je	short int_77_first
 21851                                  	
 21852                                  	cmp	word [bx+6],424Bh
 21853                                  	je	short int_77_not_first
 21854                                  	
 21855                                  	cmp	dx,0F000h
 21856                                  	jne	short int_77_not_first
 21857                                  
 21858                                  	push	es
 21859                                  	push	dx
 21860                                  	mov	dx,0F000h
 21861                                  	mov	es,dx
 21862                                  	cmp	bx,[es:0FF01h]
 21863                                  	pop	dx
 21864                                  	pop	es
 21865                                  	je	short int_77_first
 21866                                  %endif
 21867                                  	
 21868                                  int_77_not_first:
 21869                                  	; 14/12/2022
 21870                                  	; 25/10/2022
 21871                                  	;pop	ds
 21872 00001386 BF[8306]                	mov	di,INT19OLD77
 21873 00001389 BB[3101]                	mov	bx,old77
 21874 0000138C BA[2F01]                	mov	dx,int77
 21875 0000138F E85200                  	call	new_init_loop
 21876                                  
 21877                                  	; 14/12/2022
 21878                                  	;jmp	short int_77_end
 21879                                  ;int_77_first:
 21880                                  	; 25/10/2022
 21881                                  	;pop	ds
 21882                                  
 21883                                  int_77_end:
 21884 00001392 1E                      	push	ds
 21885 00001393 B800F0                  	mov	ax,0F000h		; look at the model byte
 21886 00001396 8ED8                    	mov	ds,ax
 21887 00001398 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21888 0000139D 1F                      	pop	ds
 21889 0000139E 7504                    	jne	short skip_enablenmis
 21890                                  
 21891 000013A0 B027                    	mov	al,27h			; enable convertible nmis
 21892 000013A2 E672                    	out	72h,al
 21893                                  
 21894                                  ; 25/10/2022
 21895                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21896                                  
 21897                                  skip_enablenmis:
 21898 000013A4 FB                      	sti
 21899                                  	;;mov	ax,Bios_Data ; 70h
 21900                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21901                                  	; 21/10/2022
 21902 000013A5 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21903 000013A8 8ED8                    	mov	ds,ax
 21904                                  
 21905                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21906                                  
 21907 000013AA C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21908                                  					; initialization is complete
 21909                                  
 21910 000013AF 5D                      	pop	bp			; restore all
 21911 000013B0 5E                      	pop	si
 21912 000013B1 5F                      	pop	di
 21913 000013B2 5A                      	pop	dx
 21914 000013B3 59                      	pop	cx
 21915 000013B4 5B                      	pop	bx
 21916 000013B5 07                      	pop	es
 21917 000013B6 1F                      	pop	ds
 21918 000013B7 58                      	pop	ax
 21919 000013B8 C3                      	retn
 21920                                  
 21921                                  ; 14/12/2022
 21922                                  ; ----------------------------------------------------------------------
 21923                                  
 21924                                  	; 14/12/2022
 21925                                  	; 25/10/2022
 21926                                  ;%if 0
 21927                                  	; 27/03/2019 - Retro DOS v4.0
 21928                                  int_xx_first_check:
 21929 000013B9 1E                      	push	ds
 21930 000013BA 26C51C                  	lds	bx,[es:si]
 21931 000013BD 1E                      	push	ds
 21932 000013BE 5A                      	pop	dx
 21933                                  		
 21934 000013BF 83FA00                  	cmp	dx,0
 21935 000013C2 741E                    	je	short int_xx_first
 21936                                  	
 21937 000013C4 803FCF                  	cmp	byte [bx],0CFh
 21938 000013C7 7419                    	je	short int_xx_first
 21939                                  	
 21940 000013C9 817F064B42              	cmp	word [bx+6],424Bh
 21941 000013CE 7411                    	je	short int_xx_not_first
 21942                                  	
 21943 000013D0 81FA00F0                	cmp	dx,0F000h
 21944 000013D4 750B                    	jne	short int_xx_not_first
 21945                                  
 21946 000013D6 06                      	push	es
 21947                                  	;push	dx
 21948                                  	;mov	dx,0F000h
 21949 000013D7 8EC2                    	mov	es,dx
 21950 000013D9 263B1E01FF              	cmp	bx,[es:0FF01h]
 21951                                        	;pop	dx
 21952 000013DE 07                      	pop	es
 21953 000013DF 7401                    	je	short int_xx_first
 21954                                  
 21955                                  int_xx_not_first:
 21956 000013E1 F9                      	stc
 21957                                  int_xx_first:
 21958 000013E2 1F                      	pop	ds
 21959 000013E3 C3                      	retn
 21960                                  
 21961                                  ;%endif
 21962                                  
 21963                                  ; ----------------------------------------------------------------------
 21964                                  ; 27/03/2019 - Retro DOS v4.0
 21965                                  
 21966                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21967                                  ; (SYSINIT:1610h)
 21968                                  
 21969                                  new_init_loop:
 21970                                  
 21971                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21972                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21973                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21974                                  ;	di=offset value of int19old&aa variable in bios.
 21975                                  ;	es=zero, segid of vector table
 21976                                  ;	ds=relocated stack code segment
 21977                                  
 21978 000013E4 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21979 000013E7 8907                    	mov	[bx],ax			; to original owner in ds
 21980 000013E9 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21981 000013ED 894702                  	mov	[bx+2],ax		; to original owner in ds
 21982                                  
 21983 000013F0 1E                      	push	ds
 21984                                  	;;mov	ax,Bios_Data ; 70h
 21985                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21986                                  	; 21/10/2022
 21987 000013F1 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21988 000013F4 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21989 000013F6 268B04                  	mov	ax,[es:si]		;int 19 handler
 21990 000013F9 8905                    	mov	[di],ax
 21991 000013FB 268B4402                	mov	ax,[es:si+2]
 21992 000013FF 894502                  	mov	word [di+2],ax
 21993 00001402 1F                      	pop	ds
 21994                                  
 21995 00001403 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21996 00001406 268C5C02                	mov	[es:si+2],ds
 21997 0000140A C3                      	retn
 21998                                  
 21999                                  ; End of STACK initialization routine
 22000                                  ; ----------------------------------------------------------------------
 22001                                  
 22002                                  ; ----------------------------------------------------------------------
 22003                                  ;set the devmark for mem command.
 22004                                  ;in: [memhi] - the address to place devmark
 22005                                  ;    [memlo] = 0
 22006                                  ;    al = id for devmark_id
 22007                                  ;out: devmark established.
 22008                                  ;     the address saved in cs:[devmark_addr]
 22009                                  ;     [memhi] increase by 1.
 22010                                  ; ----------------------------------------------------------------------
 22011                                  
 22012                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22013                                  ; (SYSINIT:1637h)
 22014                                  
 22015                                  setdevmark:
 22016                                  
 22017 0000140B 06                      	push	es
 22018 0000140C 51                      	push	cx
 22019                                  
 22020 0000140D 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22021 00001412 2E890E[2C14]            	mov	[cs:devmark_addr],cx
 22022 00001417 8EC1                    	mov	es,cx
 22023                                  	; 25/10/2022
 22024                                  	;mov	[es:devmark.id],al
 22025 00001419 26A20000                	mov	[es:0],al
 22026 0000141D 41                      	inc	cx
 22027                                  	;mov	[es:devmark.seg],cx
 22028 0000141E 26890E0100              	mov	[es:1],cx
 22029                                  
 22030 00001423 59                      	pop	cx
 22031 00001424 07                      	pop	es
 22032 00001425 2EFF06[E003]            	inc	word [cs:memhi]
 22033 0000142A C3                      	retn
 22034                                  
 22035                                  ; ----------------------------------------------------------------------
 22036                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22037                                  ; ----------------------------------------------------------------------
 22038                                  ; 27/03/2019 - Retro DOS v4.0
 22039                                  
 22040                                  ;MULTI_CONFIG	equ 1
 22041                                  
 22042                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22043                                                                          ; allocation strategy call
 22044                                  
 22045                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22046                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22047                                  
 22048                                  default_filenum equ 8
 22049                                  
 22050                                  ;stacksw	equ true		; include switchable hardware stacks
 22051                                  
 22052                                  ; external variable defined in ibmbio module for multi-track
 22053                                  
 22054                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22055                                  					; it on after handling config.sys file as a
 22056                                  					; default value,if multrk_flag = multrk_off1.
 22057                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22058                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22059                                  
 22060                                  ; if stacksw
 22061                                  
 22062                                  ; internal stack parameters
 22063                                  
 22064                                  ;entrysize	equ 8
 22065                                  
 22066                                  ;mincount	equ 8
 22067                                  ;defaultcount	equ 9
 22068                                  ;maxcount	equ 64
 22069                                  
 22070                                  ;minsize 	equ 32
 22071                                  ;defaultsize	equ 128
 22072                                  ;maxsize 	equ 512
 22073                                  
 22074                                  DOS_FLAG_OFFSET	equ 86h
 22075                                  
 22076                                  ;ifdef MULTI_CONFIG
 22077                                  ;
 22078                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22079                                  ;   may be loaded as a dword ptr
 22080                                  
 22081                                  ; 25/10/2022
 22082                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22083                                  ;               			;  a scratch env, this is its length
 22084                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22085                                  ;                   			;  segment of work area
 22086                                  ;
 22087                                  ;config_cmd:	db  0  			; current config cmd
 22088                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22089                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22090                                  
 22091                                  ;endif ; MULTI_CONFIG
 22092                                  
 22093 0000142B 00                      multdeviceflag:	db  0
 22094                                  
 22095 0000142C 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22096                                  
 22097 0000142E 00                      setdevmarkflag: db  0			;flag used for devmark
 22098                                  
 22099                                  ; 12/12/2022
 22100                                  ;driver_units:	db  0			;total unitcount for driver
 22101                                  
 22102                                  ; 12/12/2022
 22103                                  ;ems_stub_installed:
 22104                                  ;		db  0
 22105                                  
 22106                                  ; 12/12/2022	
 22107                                  ;align 2
 22108                                  
 22109                                  badparm_ptr:	; label	dword
 22110 0000142F 0000                    badparm_off:	dw  0
 22111 00001431 0000                    badparm_seg:	dw  0
 22112                                  
 22113                                  ;******************************************************************************
 22114                                  ;take care of config.sys file.
 22115                                  ;system parser data and code.
 22116                                  ;******************************************************************************
 22117                                  
 22118                                  ;*******************************************************************
 22119                                  ; parser options set for msbio sysconf module
 22120                                  ;*******************************************************************
 22121                                  ;
 22122                                  ;**** default assemble swiches definition **************************
 22123                                  
 22124                                  ;farsw	equ 0		; near call expected
 22125                                  ;datesw	equ 0		; check date format
 22126                                  ;timesw	equ 0		; check time format
 22127                                  ;filesw	equ 1		; check file specification
 22128                                  ;capsw	equ 0		; perform caps if specified
 22129                                  ;cmpxsw	equ 0		; check complex list
 22130                                  ;numsw	equ 1		; check numeric value
 22131                                  ;keysw	equ 0		; support keywords
 22132                                  ;swsw	equ 1		; support switches
 22133                                  ;val1sw	equ 1		; support value definition 1
 22134                                  ;val2sw	equ 0		; support value definition 2
 22135                                  ;val3sw	equ 1		; support value definition 3
 22136                                  ;drvsw	equ 1		; support drive only format
 22137                                  ;qussw	equ 0		; support quoted string format
 22138                                  
 22139                                  ; psdata_seg equ cs
 22140                                  
 22141                                  	;.xlist
 22142                                  	;include parse.asm		;together with psdata.inc
 22143                                  	;.list
 22144                                  
 22145                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22146                                  ; ======================================================================
 22147                                  ; 27/03/2019 - Retro DOS v4.0
 22148                                  
 22149                                  ; 30/03/2019
 22150                                  ; VERSION.INC (MSDOS 6.0) 
 22151                                  ; Set DBCS Blank constant
 22152                                  
 22153                                  ; ifndef DBCS
 22154                                  DB_SPACE EQU 2020h
 22155                                  DB_SP_HI EQU 20h
 22156                                  DB_SP_LO EQU 20h
 22157                                  ; else
 22158                                  
 22159                                  ;*******************************************************************
 22160                                  ; Parser include file
 22161                                  ;*******************************************************************
 22162                                  
 22163                                  ;**** Equation field
 22164                                  ;-------- Character code definition
 22165                                  
 22166                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22167                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22168                                  _$P_Period	   equ	"."             ;AN020;
 22169                                  _$P_Slash	   equ	"/"             ;AN020;
 22170                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22171                                  _$P_Comma	   equ	","             ;AN000;
 22172                                  _$P_Switch	   equ	"/"             ;AN000;
 22173                                  _$P_Keyword	   equ	"="             ;AN000;
 22174                                  _$P_Colon	   equ	":"             ;AN000;
 22175                                  _$P_Plus 	   equ	"+"             ;AN000;
 22176                                  _$P_Minus	   equ	"-"             ;AN000;
 22177                                  _$P_Rparen	   equ	")"             ;AN000;
 22178                                  _$P_Lparen	   equ	"("             ;AN000;
 22179                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22180                                  _$P_DQuote	   equ	'"'             ;AN000;
 22181                                  _$P_NULL 	   equ	0		;AN000;
 22182                                  _$P_TAB		   equ	9		;AN000;
 22183                                  _$P_CR		   equ	0Dh		;AN000;
 22184                                  _$P_LF		   equ	0Ah		;AN000;
 22185                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22186                                  
 22187                                  ;-------- Masks
 22188                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22189                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22190                                  
 22191                                  ;-------- DOS function call related equs
 22192                                  
 22193                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22194                                  					; by this call, following information
 22195                                  struc _$P_CDI	
 22196 00000000 ????                     .DateF: resw 1
 22197 00000002 ??????????               .Money: resb 5
 22198 00000007 ????                     .1000:	 resb 2
 22199 00000009 ????                     .Dec:	 resb 2
 22200 0000000B ????                     .DateS: resb 2
 22201 0000000D ????                     .TimeS: resb 2
 22202 0000000F ??                          	 resb 1
 22203 00000010 ??                      	 resb 1
 22204 00000011 ??                       .TimeF: resb 1	 
 22205 00000012 ????????                	 resw 2
 22206 00000016 ????                    	 resb 2
 22207 00000018 <res Ah>                	 resw 5
 22208                                   .size:
 22209                                  endstruc
 22210                                  
 22211                                  _$P_Date_MDY	   equ	0		;AN000;
 22212                                  _$P_Date_DMY	   equ	1		;AN000;
 22213                                  _$P_Date_YMD	   equ	2		;AN000;
 22214                                  ;-------------
 22215                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22216                                  					;AN000; DS:SI will points to DBCS EV
 22217                                  ;-------------
 22218                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22219                                  					;AN000; following parameters are set
 22220                                  					;AN000; to get casemap table.
 22221                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22222                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22223                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22224                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22225                                  					; By this call following information
 22226                                  					; is returned.
 22227                                  struc _$P_DOS_TBL
 22228 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22229 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22230 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22231                                  endstruc
 22232                                  
 22233                                  ; ----------------------------------------------------------------------------
 22234                                  ; PARMS 	LABEL	BYTE
 22235                                  ;		DW	PARMSX
 22236                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22237                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22238                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22239                                  ;					; TYPICAL ARE ";", "="
 22240                                  ;					; "," & WHITESPACE ALWAYS
 22241                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22242                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22243                                  ; ----------------------------------------------------------------------------
 22244                                  
 22245                                  ;-------------------------------- PARMS block structure
 22246                                  struc _$P_PARMS_Blk
 22247 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22248 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22249 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22250                                  endstruc
 22251                                  
 22252                                  _$P_Len_PARMS	   equ	4		;AN000;
 22253                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22254                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22255                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22256                                  
 22257                                  ; ----------------------------------------------------------------------------
 22258                                  ; PARMSX	LABEL	BYTE
 22259                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22260                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22261                                  ;		:			; REPEATS maxp-1 TIMES
 22262                                  ;		DB	maxs		; # OF SWITCHES
 22263                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22264                                  ;		:			; REPEATS maxs-1 TIMES
 22265                                  ;		DB	maxk		; # OF KEYWORD
 22266                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22267                                  ;		:			; REPEATS maxk-1 TIMES
 22268                                  ; ----------------------------------------------------------------------------
 22269                                  
 22270                                  ;-------------------------------- PARMSX block structure
 22271                                  struc _$P_PARMSX_Blk		;AN000;
 22272 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22273 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22274 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22275                                  endstruc
 22276                                  
 22277                                  ; ----------------------------------------------------------------------------
 22278                                  ; << Control field definition  >>
 22279                                  ;
 22280                                  ;
 22281                                  ;CONTROL   LABEL   BYTE
 22282                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22283                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22284                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22285                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22286                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22287                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22288                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22289                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22290                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22291                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22292                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22293                                  ;				   ; 0002H=REPEATS ALLOWED
 22294                                  ;				   ; 0001H=OPTIONAL
 22295                                  ;	   DW	   FUNCTION_FLAGS
 22296                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22297                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22298                                  ;				   ; 0010H=REMOVE ":" AT END
 22299                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22300                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22301                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22302                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22303                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22304                                  ;	   :
 22305                                  ;
 22306                                  ;Note:
 22307                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22308                                  ;      DATE bit simalteniously.
 22309                                  ;
 22310                                  ;      The parser examins each bit along with the following priority.
 22311                                  ;
 22312                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22313                                  ;      FILE SPEC -> SIMPLE STRING.
 22314                                  ;
 22315                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22316                                  ;      in the result buffer is capitalized.
 22317                                  ;
 22318                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22319                                  ;
 22320                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22321                                  ;      switch, for example, '/A', then STRING points to;
 22322                                  ;
 22323                                  ;			DB    1 	; number of following synonyms
 22324                                  ;			DB   '/A',0
 22325                                  ;
 22326                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22327                                  ;
 22328                                  ;			DB    1 	; number of following synonyms
 22329                                  ;			DB   'CODEPAGE=',0
 22330                                  ;
 22331                                  ;    - "..." must consist of upper case characters only because the parser
 22332                                  ;      performs pattern matching after converting input to upper case (by
 22333                                  ;      using the current country upper case table)
 22334                                  ;
 22335                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22336                                  ;      example /A and /B, the format will be;
 22337                                  ;
 22338                                  ;			DB    2 	; number of following synonyms
 22339                                  ;			DB    '/A',0
 22340                                  ;			DB    '/B',0
 22341                                  ; ----------------------------------------------------------------------------
 22342                                  
 22343                                  ;**** Match_Flags
 22344                                  
 22345                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22346                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22347                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22348                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22349                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22350                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22351                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22352                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22353                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22354                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22355                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22356                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22357                                  
 22358                                  ;**** Function flags
 22359                                  
 22360                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22361                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22362                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22363                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22364                                  
 22365                                  ;-------------------------------- Control block structure
 22366                                  struc _$P_Control_Blk
 22367 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22368 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22369 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22370 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22371 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22372 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22373                                  endstruc
 22374                                  
 22375                                  ; ----------------------------------------------------------------------------
 22376                                  ; << Value List Definition >>
 22377                                  ;
 22378                                  ;VALUES 	LABEL	BYTE
 22379                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22380                                  ;	     +-
 22381                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22382                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22383                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22384                                  ;	     |	:
 22385                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22386                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22387                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22388                                  ;	     |	:
 22389                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22390                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22391                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22392                                  ;	     +-	:
 22393                                  ;
 22394                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22395                                  ;
 22396                                  ;Note:
 22397                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22398                                  ;      when no choice lists are provided.
 22399                                  ;
 22400                                  ;    - STRING must consist of upper case characters only because the parser
 22401                                  ;      performs pattern matching after converting input to upper case (by
 22402                                  ;      using the current country upper case table)
 22403                                  ; ----------------------------------------------------------------------------
 22404                                  
 22405                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22406                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22407                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22408                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22409                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22410                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22411                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22412                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22413                                  
 22414                                  struc _$P_Val_List
 22415 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22416 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22417 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22418 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22419 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22420                                  endstruc
 22421                                  
 22422                                  ; ----------------------------------------------------------------------------
 22423                                  ; << Result Buffer Definition  >>
 22424                                  ;
 22425                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22426                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22427                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22428                                  ;						;	3=STRING, 4=COMPLEX,
 22429                                  ;						;	5=FILESPEC, 6=DRIVE
 22430                                  ;						;	7=DATE, 8=TIME
 22431                                  ;						;	9=QUOTED STRING
 22432                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22433                                  ;
 22434                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22435                                  ;
 22436                                  ;            +-
 22437                                  ;	    | DD	n			; VALUE IF NUMBER
 22438                                  ;	    | or
 22439                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22440                                  ;	    |					; (ES presents Segment address)
 22441                                  ;	    | or
 22442                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22443                                  ;	    | or
 22444                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22445                                  ;	    | or
 22446                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22447                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22448                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22449                                  ;	    | or
 22450                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22451                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22452                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22453                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22454                                  ;	    +-
 22455                                  ;
 22456                                  ;
 22457                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22458                                  ;      list.
 22459                                  ;
 22460                                  ;      YEAR: If the input value for the year is less than 100, parser
 22461                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22462                                  ;	     the year value, he returns 1987.
 22463                                  ; ----------------------------------------------------------------------------
 22464                                  
 22465                                  ;-------------------------------- Result block structure
 22466                                  struc _$P_Result_Blk
 22467 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22468 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22469 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22470 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22471                                  endstruc
 22472                                  
 22473                                  ;--------------------------------
 22474                                  ;**** values for the type field in the result block
 22475                                  
 22476                                  _$P_EOL		   equ	0		;AN000; End of line
 22477                                  _$P_Number	   equ	1		;AN000; Number
 22478                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22479                                  _$P_String	   equ	3		;AN000; String
 22480                                  _$P_Complex	   equ	4		;AN000; Complex
 22481                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22482                                  _$P_Drive	   equ	6		;AN000; Drive
 22483                                  _$P_Date_F	   equ	7		;AN000; Date
 22484                                  _$P_Time_F	   equ	8		;AN000; Time
 22485                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22486                                  
 22487                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22488                                  
 22489                                  ;**** Return code
 22490                                  ;
 22491                                  ; following return code will be returned in the AX register.
 22492                                  
 22493                                  _$P_No_Error	   equ	0		;AN000; No error
 22494                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22495                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22496                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22497                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22498                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22499                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22500                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22501                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22502                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22503                                  
 22504                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22505                                  
 22506                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22507                                  
 22508                                  ;********************** Local Data *************************************
 22509 00001433 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22510 00001435 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22511 00001437 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22512 00001439 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22513 0000143B 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22514 0000143C 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22515 0000143E 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22516 00001440 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22517                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22518                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22519                                  
 22520                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22521                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22522                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22523                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22524                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22525                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22526                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22527                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22528                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22529                                  
 22530                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22531                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22532                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22533                                  
 22534 00001442 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22535 00001444 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22536 00001446 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22537 00001448 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22538                                  
 22539 0000144A 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22540                                  _$P_STRING_BUF_END equ	$		;AN000;
 22541                                  
 22542                                  ; 25/10/2022
 22543                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22544                                  
 22545 000014CA FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22546 000014CB 0000                    		   dw	0		;AN000; offset	of char case map table
 22547 000014CD 0000                    		   dw	0		;AN000; segment of char case map table
 22548                                  ; 25/10/2022
 22549                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22550                                  ;		   dw	0		;AN000; offset	of file case map table
 22551                                  ;		   dw	0		;AN000; segment of file case map table
 22552                                  
 22553                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22554                                  ;
 22555                                  
 22556                                  ;M029
 22557                                  ;!!!WARNING!!!
 22558                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22559                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22560                                  ;changes need to be made in SYSPARSE
 22561                                  
 22562                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22563                                  
 22564                                  ; 25/10/2022
 22565                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22566                                  
 22567 000014CF 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22568                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22569                                  
 22570                                  ;ENDIF					;AN000;(of FileSW)
 22571                                  
 22572                                  ; delimiter parsing
 22573                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22574                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22575                                  
 22576                                  ;filespec error flag
 22577 000014D8 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22578                                  					;AN033;  was detected.
 22579                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22580                                  
 22581                                  
 22582                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22583                                  ; ======================================================================
 22584                                  ; 27/03/2019 - Retro DOS v4.0
 22585                                  
 22586                                  ;***********************************************************************
 22587                                  ; SysParse;
 22588                                  ;
 22589                                  ;  Function : Parser Entry
 22590                                  ;
 22591                                  ;  Input: DS:SI -> command line
 22592                                  ;	  ES:DI -> parameter block
 22593                                  ;	  cs -> psdata.inc
 22594                                  ;	  CX = operand ordinal
 22595                                  ;
 22596                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22597                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22598                                  ;		 is in DS.
 22599                                  ;
 22600                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22601                                  ;		    invalid value list. But this parser does NOT implement
 22602                                  ;		    this feature. Therefore CY always zero.
 22603                                  ;
 22604                                  ;	   CY = 0   AX = return code
 22605                                  ;		    BL = terminated delimiter code
 22606                                  ;		    CX = new operand ordinal
 22607                                  ;		    SI = set past scaned operand
 22608                                  ;		    DX = selected result buffer
 22609                                  ;
 22610                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22611                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22612                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22613                                  ;
 22614                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22615                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22616                                  ;
 22617                                  ;-------- Modification History -----------------------------------------
 22618                                  ;
 22619                                  ;  4/04/87 : Created by K. K,
 22620                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22621                                  ;	   : JMP SHORT assemble error (tm02)
 22622                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22623                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22624                                  ;	     DateSW equ 1)	      (tm04)
 22625                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22626                                  ;				      (tm05) in PSDATA.INC
 22627                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22628                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22629                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22630                                  ;	     value-list block	      (tm07)
 22631                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22632                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22633                                  ;	     (tm08)
 22634                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22635                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22636                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22637                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22638                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22639                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22640                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22641                                  ;					  (tm12)
 22642                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22643                                  ;					  (tm13)
 22644                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22645                                  ;					  (tm14)
 22646                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22647                                  ;					  (tm15)
 22648                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22649                                  
 22650                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22651                                  
 22652                                  ;  7/28/87 : Kerry S (;AN018;)
 22653                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22654                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22655                                  ;	     affected: _$P_Chk_SW_Control.
 22656                                  
 22657                                  ;  7/29/87 : Kerry S (;AN019;)
 22658                                  ;	     Now allow the optional bit in match flags for switches.  This
 22659                                  ;	     allows the switch to be encountered with a value or without a
 22660                                  ;	     value and no error is returned.
 22661                                  ;
 22662                                  
 22663                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22664                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22665                                  ;	     within a date response, instead of checking just for the one
 22666                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22667                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22668                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22669                                  
 22670                                  ;  9/1/87  : Kerry S (;AN021)
 22671                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22672                                  ;	     the command line with the string in the control block the
 22673                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22674                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22675                                  ;	     string on the command line than in the synonym list in the control
 22676                                  ;	     block.  I put in a test for a null in the control block so the
 22677                                  ;	     string in the control block must be the same length as the string
 22678                                  ;	     preceeding the colon or equal on the command line.
 22679                                  
 22680                                  ;  8/28/87 : Kerry S (;AN022;)
 22681                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22682                                  ;	     problems for people who included it themselves in a segment other
 22683                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22684                                  ;	     segment.
 22685                                  
 22686                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22687                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22688                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22689                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22690                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22691                                  ;	     BL be used if TIME is being parsed.
 22692                                  
 22693                                  ;  9/24/87 : Ed K
 22694                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22695                                  ;	     invocations with their normally expanded code; made comments
 22696                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22697                                  
 22698                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22699                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22700                                  ;	     pointed to by non-existant CONTROL.
 22701                                  
 22702                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22703                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22704                                  ;	     support to frame quoted text string with single quote.
 22705                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22706                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22707                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22708                                  
 22709                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22710                                  ;	     quote chars within a quoted string is supposed to be reported as
 22711                                  ;	     one quote character, but is reported as two quotes.  This changed
 22712                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22713                                  
 22714                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22715                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22716                                  
 22717                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22718                                  
 22719                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22720                                  ;	     psdata buffer should have cs.
 22721                                  
 22722                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22723                                  ;	     positional missing.
 22724                                  
 22725                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22726                                  ;	     as a line delimiter, should use carriage return.
 22727                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22728                                  
 22729                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22730                                  
 22731                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22732                                  ;	     endless loop since SI is returned still pointing to start
 22733                                  ;	     of that parm.
 22734                                  
 22735                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22736                                  ;	     Vector to returned string has CS instead of cs, but
 22737                                  ;	     when tried to fix it on previous version, changed similar
 22738                                  ;	     but wrong place.
 22739                                  
 22740                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22741                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22742                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22743                                  
 22744                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22745                                  ;	     in a filespec, then flag an error.
 22746                                  
 22747                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22748                                  ;	     indexed off of the cs equate instead of the DS register.
 22749                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22750                                  ;  -->	     local parser data. Why were some references to local data changed
 22751                                  ;	     to do this before, but not all ?????
 22752                                  
 22753                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22754                                  
 22755                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22756                                  ;
 22757                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22758                                  
 22759                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22760                                  
 22761                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22762                                  ;	     separator in TIME before hundredths field.
 22763                                  ;
 22764                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22765                                  ;			strings as keywords.
 22766                                  ;
 22767                                  ;***********************************************************************
 22768                                  
 22769                                  ;IF FarSW				;AN000;(Check if need far return)
 22770                                  ;SysParse proc far			;AN000;
 22771                                  ;ELSE					;AN000;
 22772                                  ;SysParse proc near			;AN000;
 22773                                  ;ENDIF					;AN000;(of FarSW)
 22774                                  
 22775                                  ; 27/03/2019 - Retro DOS v4.0
 22776                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22777                                  
 22778                                  ; 25/10/2022 - Retro DOS v4.0
 22779                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22780                                  
 22781                                  SysParse:
 22782 000014D9 2EC706[4014]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22783 000014E0 FC                      	cld				;AN000; confirm forward direction
 22784 000014E1 2E890E[3314]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22785 000014E6 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22786 000014ED 2EC706[4814]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22787                                  
 22788 000014F4 2EC706[3914]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22789                                  
 22790                                  ;M029 -- Begin changes
 22791                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22792                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22793                                  ;corrupts this table but does not corrupt the checksum region will leave
 22794                                  ;command.com parsing in an inconsistent state.
 22795                                  ; NB: The special characters string has been hardcoded here. If any change
 22796                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22797                                  
 22798                                  ;IF FileSW + DrvSW
 22799 000014FB 2EC706[CF14]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22800 00001502 2EC706[D114]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22801 00001509 2EC706[D314]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22802 00001510 2EC706[D514]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22803                                  ;ENDIFtHHH
 22804                                  
 22805                                  ;M029 -- End of changes
 22806                                  
 22807 00001517 E8BC06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22808 0000151A 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22809                                  ;--------------------------- End of Line
 22810 0000151C B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22811 0000151F 53                      	push	bx			;AN000;
 22812                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22813                                  					;AN000; Get the PARMSX address to
 22814 00001520 268B1D                  	mov	bx,[es:di]
 22815                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22816                                  					;AN000; check ORDINAL to see if the minimum
 22817 00001523 263A0F                  	cmp	cl,[es:bx]	
 22818 00001526 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22819                                  
 22820 00001528 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22821                                  _$P_Fin: 				;AN000;
 22822 0000152B 5B                      	pop	bx			;AN000;
 22823 0000152C E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22824                                  ;---------------------------
 22825                                  _$P_Start:				;AN000;
 22826 0000152F 2E8936[4214]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22827 00001534 53                      	push	bx			;AN000; quoted string or file spec.
 22828 00001535 57                      	push	di			;AN000;
 22829 00001536 55                      	push	bp			;AN000;
 22830                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22831                                  	; 02/11/2022
 22832 00001537 8D1E[4A14]              	lea	bx,[_$P_STRING_BUF]
 22833 0000153B 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22834 00001541 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22835                                  
 22836                                  _$P_Pack_Loop:				;AN000;
 22837 00001543 AC                      	lodsb				;AN000; Pick a operand from buffer
 22838 00001544 E84907                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22839 00001547 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22840                                  
 22841 00001549 E8AD06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22842 0000154C 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22843                                  
 22844 0000154E E8DE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22845 00001551 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22846                                  
 22847 00001553 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22848                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22849 00001559 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22850                                  
 22851 0000155B E87806                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22852 0000155E EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22853                                  
 22854                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22855 00001560 2EF606[4114]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22856 00001566 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22857                                  
 22858 00001568 4E                      	dec	si			;AN000; (tm08)
 22859 00001569 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22860                                  
 22861                                  _$P_PL01:				;AN000;
 22862 0000156B 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22863 0000156E 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22864 00001570 7506                    	jne	short _$P_PL00 		;AN000; then
 22865                                  
 22866 00001572 2E800E[4114]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22867                                  _$P_PL00:				;AN000;
 22868 00001578 43                      	inc	bx			;AN000; ready to see next byte
 22869 00001579 E82E07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22870 0000157C 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22871                                  
 22872 0000157E AC                      	lodsb				;AN000; if yes, store
 22873 0000157F 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22874 00001582 43                      	inc	bx			;AN000; update pointer
 22875 00001583 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22876                                  
 22877                                  _$P_Pack_End_BY_EOL:			;AN000;
 22878 00001585 4E                      	dec	si			;AN000; backup si pointer
 22879                                  _$P_Pack_End:				;AN000;
 22880 00001586 2E8936[3714]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22881 0000158B 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22882 0000158F 2E891E[4614]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22883                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22884 00001594 268B1D                  	mov	bx,[es:di]
 22885                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22886                                  	; 02/11/2022
 22887 00001597 8D36[4A14]              	lea	si,[_$P_STRING_BUF]
 22888 0000159B 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22889 0000159F 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22890                                  
 22891 000015A1 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22892 000015A5 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22893                                  
 22894 000015A7 2EF606[4114]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22895 000015AD 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22896                                  
 22897                                  _$P_Positional_Manager:			;AN000; else process as positional
 22898 000015AF 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22899 000015B3 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22900 000015B5 2E3906[3314]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22901 000015BA 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22902                                  
 22903 000015BC 2EA1[3314]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22904 000015C0 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22905 000015C2 43                      	inc	bx			;AC035; add '2' to
 22906 000015C3 43                      	inc	bx			;AC035;  BX reg
 22907                                  					;AN000; now bx points to 1st CONTROL
 22908 000015C4 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22909 000015C6 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22910 000015C9 E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22911 000015CC EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22912                                  
 22913                                  _$P_Too_Many_Error:			;AN000;
 22914 000015CE 2EC706[3514]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22915 000015D5 EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22916                                  
 22917                                  _$P_SW_Manager:				;AN000;
 22918 000015D7 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22919 000015DB 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22920 000015DD 40                      	inc	ax			;AN000;
 22921 000015DE D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22922 000015E0 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22923 000015E2 268A0F                  	mov	cl,[es:bx]		;AN000;
 22924 000015E5 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22925 000015E7 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22926 000015E9 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22927                                  
 22928 000015EB 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22929                                  
 22930                                  _$P_SW_Mgr_Loop: 			;AN000;
 22931 000015EC 53                      	push	bx			;AN000;
 22932 000015ED 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22933 000015F0 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22934 000015F3 5B                      	pop	bx			;AN000;
 22935 000015F4 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22936                                  
 22937 000015F6 43                      	inc	bx			;AC035; add '2' to
 22938 000015F7 43                      	inc	bx			;AC035;  BX reg
 22939                                  					;AN000; else bx points to the next CONTROL
 22940 000015F8 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22941                                  
 22942                                  _$P_SW_Not_Found:			;AN000;
 22943 000015FA 2EC706[3514]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22944 00001601 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22945                                  
 22946                                  _$P_Key_Manager: 			;AN000;
 22947 00001603 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22948 00001607 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22949 00001609 40                      	inc	ax			;AN000;
 22950 0000160A D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22951 0000160C 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22952 0000160E 268A07                  	mov	al,[es:bx]		;AN000;
 22953 00001611 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22954 00001613 D1E0                    	shl	ax,1			;AN000;
 22955 00001615 40                      	inc	ax			;AN000; ax = ax*2+1
 22956 00001616 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22957 00001618 268A0F                  	mov	cl,[es:bx]		;AN000;
 22958 0000161B 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22959 0000161D 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22960 0000161F 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22961                                  
 22962 00001621 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22963                                  
 22964                                  _$P_Key_Mgr_Loop:			;AN000;
 22965 00001622 53                      	push	bx			;AN000;
 22966 00001623 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22967 00001626 E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22968 00001629 5B                      	pop	bx			;AN000;
 22969 0000162A 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22970                                  
 22971 0000162C 43                      	inc	bx			;AC035; add '2' to
 22972 0000162D 43                      	inc	bx			;AC035;  BX reg
 22973                                  					;AN000; else bx points to the next CONTROL
 22974 0000162E E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22975                                  
 22976                                  _$P_Key_Not_Found:			;AN000;
 22977 00001630 2EC706[3514]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22978                                  _$P_Return_to_Caller:			;AN000;
 22979 00001637 5D                      	pop	bp			;AN000;
 22980 00001638 5F                      	pop	di			;AN000;
 22981 00001639 5B                      	pop	bx			;AN000;
 22982 0000163A 2E8B0E[3314]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22983 0000163F 2EA1[3514]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22984 00001643 2E8B36[3714]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22985 00001648 2E8B16[3914]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22986 0000164D 2E8A1E[3B14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22987                                  _$P_Single_Exit: 			;AN000;
 22988 00001652 F8                      	clc				;AN000;
 22989 00001653 C3                      	retn				;AN000;
 22990                                  
 22991                                  ;***********************************************************************
 22992                                  ; _$P_Chk_Pos_Control
 22993                                  ;
 22994                                  ; Function: Parse CONTROL block for a positional
 22995                                  ;
 22996                                  ; Input:     ES:BX -> CONTROL block
 22997                                  ;	     cs:SI -> _$P_STRING_BUF
 22998                                  ;
 22999                                  ; Output:    None
 23000                                  ;
 23001                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23002                                  ;
 23003                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23004                                  ;***********************************************************************
 23005                                  
 23006                                  _$P_Chk_Pos_Control:
 23007 00001654 50                      	push	ax			;AN000;
 23008                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23009 00001655 268B07                  	mov	ax,[es:bx]
 23010                                  	; 12/12/2022
 23011 00001658 A802                    	test	al,_$P_Repeat
 23012                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23013 0000165A 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23014                                  
 23015 0000165C 2EFF06[3314]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23016                                  _$P_CPC00:				;AN000;
 23017 00001661 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23018 00001665 7518                    	jne	short _$P_CPC01		;AN000;
 23019                                  
 23020                                  	; 12/12/2022
 23021 00001667 A801                    	test	al,_$P_Optional
 23022                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23023 00001669 7509                    	jnz	short _$P_CPC02		;AN000;
 23024                                  
 23025 0000166B 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23026 00001672 EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 23027                                  
 23028                                  _$P_CPC02:				;AN000;
 23029 00001674 50                      	push	ax			;AN000;
 23030 00001675 B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 23031 00001677 B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23032 00001679 E89B00                  	call	_$P_Fill_Result		;AN000;
 23033 0000167C 58                      	pop	ax			;AN000;
 23034 0000167D EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23035                                  
 23036                                  _$P_CPC01:				;AN000;
 23037 0000167F E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 23038                                  _$P_CPC_Exit:				;AN000;
 23039 00001682 58                      	pop	ax			;AN000;
 23040 00001683 C3                      	retn				;AN000;
 23041                                  
 23042                                  ;***********************************************************************
 23043                                  ; _$P_Chk_Key_Control
 23044                                  ;
 23045                                  ; Function: Parse CONTROL block for a keyword
 23046                                  ;
 23047                                  ; Input:     ES:BX -> CONTROL block
 23048                                  ;	     cs:SI -> _$P_STRING_BUF
 23049                                  ;
 23050                                  ; Output:    CY = 1 : not match
 23051                                  ;
 23052                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23053                                  ;
 23054                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23055                                  ;***********************************************************************
 23056                                  
 23057                                  _$P_Chk_Key_Control:
 23058 00001684 F9                      	stc				;AN000; this logic works when the KeySW
 23059 00001685 C3                      	retn				;AN000; is reset.
 23060                                  
 23061                                  ;***********************************************************************
 23062                                  ; _$P_Search_KEYorSW:
 23063                                  ;
 23064                                  ; Function: Seach specified keyword or switch from CONTROL
 23065                                  ;
 23066                                  ; Input:     ES:BX -> CONTROL block
 23067                                  ;	     cs:SI -> _$P_STRING_BUF
 23068                                  ;
 23069                                  ; Output:    CY = 1 : not match
 23070                                  ;
 23071                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23072                                  ;***********************************************************************
 23073                                  
 23074                                  	; 25/10/2022 - Retro DOS v4.0
 23075                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23076                                  
 23077                                  _$P_Search_KEYorSW:			;AN000;
 23078 00001686 55                      	push	bp			;AN000;
 23079 00001687 51                      	push	cx			;AN000;
 23080 00001688 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23081 0000168C 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23082 0000168E 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 23083 00001690 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23084                                  
 23085                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23086                                  	; 25/10/2022
 23087 00001692 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23088                                  	;lea	bp,[bx+9]
 23089                                  _$P_KEYorSW_Loop:			;AN000;
 23090 00001695 E8D803                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23091 00001698 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23092                                  
 23093 0000169A E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23094 0000169D E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23095                                  _$P_KEYorSW_Not_Found:			;AN000;
 23096 0000169F F9                      	stc				;AN000; indicate not found in synonym list
 23097 000016A0 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23098                                  
 23099                                  _$P_KEYorSW_Found:			;AN000;
 23100 000016A2 2E892E[4814]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23101 000016A7 F8                      	clc				;AN000; indicate found
 23102                                  _$P_KEYorSW_Exit:			;AN000;
 23103 000016A8 59                      	pop	cx			;AN000;
 23104 000016A9 5D                      	pop	bp			;AN000;
 23105 000016AA C3                      	retn				;AN000;
 23106                                   
 23107                                  ;***********************************************************************
 23108                                  ; _$P_MoveBP_NUL
 23109                                  ;***********************************************************************
 23110                                  
 23111                                  _$P_MoveBP_NUL:
 23112                                  _$P_MBP_Loop:				;AN000;
 23113                                  	; 11/12/2022
 23114 000016AB 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23115                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23116                                  	; (SYSINIT:18DBh)
 23117                                   	;cmp     byte [es:bp+0],0
 23118 000016B0 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23119                                  
 23120 000016B2 45                      	inc	bp			;AN000; until
 23121 000016B3 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23122                                  
 23123                                  _$P_MBP_Exit:				;AN000;
 23124 000016B5 45                      	inc	bp			;AN000; bp points to next to NULL
 23125 000016B6 C3                      	retn				;AN000;
 23126                                  
 23127                                  ;***********************************************************************
 23128                                  ; _$P_Chk_SW_Control
 23129                                  ;
 23130                                  ; Function: Parse CONTROL block for a switch
 23131                                  ;
 23132                                  ; Input:     ES:BX -> CONTROL block
 23133                                  ;	     cs:SI -> _$P_STRING_BUF
 23134                                  ;
 23135                                  ; Output:    CY = 1 : not match
 23136                                  ;
 23137                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23138                                  ;
 23139                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23140                                  ;***********************************************************************
 23141                                  
 23142                                  _$P_Chk_SW_Control:
 23143                                  
 23144                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23145                                  	;or	byte [cs:_$P_Flags+1],10h
 23146 000016B7 2E800E[4114]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23147 000016BD E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23148 000016C0 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23149                                  
 23150                                  	;and	[cs:_$P_Flags+],0EFh
 23151 000016C2 2E8026[4114]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23152                                  					;AC034; reset the indicator previously set
 23153 000016C8 50                      	push	ax			;AN000; 	      /switch:
 23154 000016C9 2EA1[4414]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23155 000016CD 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23156 000016CF 2E0106[4214]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23157 000016D4 58                      	pop	ax			;AN000;
 23158                                  
 23159 000016D5 2E8B36[4414]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23160 000016DA 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23161 000016DE 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23162                                  
 23163 000016E0 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23164 000016E5 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23165                                  
 23166 000016E7 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23167 000016EE EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23168                                  
 23169                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23170                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23171 000016F0 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23172 000016F4 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23173                                  
 23174                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23175                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23176                                  	;test	word [es:bx],1
 23177                                  	; 12/12/2022
 23178                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23179 000016F6 26F60701                	test	byte [es:bx],_$P_Optional
 23180 000016FA 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23181                                  
 23182 000016FC 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23183 00001703 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23184                                  
 23185                                  _$P_CSW00:				;AN000;
 23186 00001705 E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23187 00001708 F8                      	clc				;AN000; indicate match
 23188                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23189                                  	; 12/12/2022
 23190 00001709 C3                      	retn
 23191                                  
 23192                                  _$P_Chk_SW_Err0: 			;AN000;
 23193 0000170A F9                      	stc				;AN000; not found in switch synonym list
 23194                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23195                                  	; 12/12/2022
 23196 0000170B C3                      	retn	
 23197                                  
 23198                                  _$P_Chk_SW_Exit: 			;AN000;
 23199 0000170C 50                      	push	ax			;AN000;
 23200 0000170D B003                    	mov	al,_$P_String		;AN000; set
 23201 0000170F B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 23202 00001711 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23203 00001714 58                      	pop	ax			;AN000;
 23204 00001715 F8                      	clc				;AN000;
 23205                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23206 00001716 C3                      	retn				;AN000;
 23207                                  ;ELSE					;AN000;(of IF SwSW)
 23208                                  ;	stc				;AN000; this logic works when the SwSW
 23209                                  ;	retn				;AN000; is reset.
 23210                                  
 23211                                  ;***********************************************************************
 23212                                  ; _$P_Fill_Result
 23213                                  ;
 23214                                  ; Function: Fill the result buffer
 23215                                  ;
 23216                                  ; Input:    AH = Item tag
 23217                                  ;	    AL = type
 23218                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23219                                  ;		  AL = 2: DX has index(offset) into value list
 23220                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23221                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23222                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23223                                  ;			  amd CH has hundredths
 23224                                  ;		  AL = else: cs:SI points to returned string buffer
 23225                                  ;	    ES:BX -> CONTROL block
 23226                                  ;
 23227                                  ; Output:   None
 23228                                  ;
 23229                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23230                                  ;
 23231                                  ; Vars: _$P_DX(W)
 23232                                  ;***********************************************************************
 23233                                  
 23234                                  _$P_Fill_Result:
 23235 00001717 57                      	push	di			;AN000;
 23236 00001718 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23237                                  					;AN000; di points to result buffer
 23238 0000171C 2E893E[3914]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23239 00001721 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23240 00001724 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23241 00001728 50                      	push	ax			;AN000;
 23242 00001729 2EA1[4814]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23243 0000172D 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23244                                  					;AN000;   then set it to the result
 23245 00001731 58                      	pop	ax			;AN000;
 23246                                  _$P_RLT04:				;AN000;
 23247 00001732 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23248 00001734 750A                    	jne	short _$P_RLT00		;AN000;
 23249                                  
 23250                                  _$P_RLT02:				;AN000;
 23251 00001736 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23252 0000173A 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23253 0000173E EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23254                                  
 23255                                  _$P_RLT00:				;AN000;
 23256 00001740 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23257 00001742 7506                    	jne	short _$P_RLT01		;AN000;
 23258                                  
 23259 00001744 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23260                                  					;AN000; then store list index
 23261 00001748 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23262                                  
 23263                                  _$P_RLT01:				;AN000;
 23264 0000174A 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23265 0000174C 74E8                    	je	short _$P_RLT02		;AN000;
 23266                                  
 23267 0000174E 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23268 00001750 74E4                    	je	short _$P_RLT02		;AN000;
 23269                                  
 23270 00001752 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23271 00001754 7506                    	jne	short _$P_RLT03		;AN000;
 23272                                  
 23273 00001756 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23274 0000175A EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23275                                  
 23276                                  _$P_RLT03:				;AN000;
 23277 0000175C 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23278 0000175E 750F                    	jne	short _$P_RLT05		;AN000;
 23279                                  
 23280 00001760 2EA1[4214]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23281 00001764 40                      	inc	ax			;AN000; skip left Parentheses
 23282 00001765 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23283 00001769 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23284 0000176D EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23285                                  
 23286                                  _$P_RLT05:				;AN000;
 23287                                  ;------------------------  AL = 3, 5, or 9
 23288 0000176F 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23289                                  					;AN000; store offset of STRING_BUF
 23290 00001773 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23291                                  					;AN031; store segment of STRING_BUF
 23292 00001777 50                      	push	ax			;AN000;
 23293 00001778 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23294                                  					;AN000; need CAPS by file table?
 23295 0000177D 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23296                                  
 23297 0000177F B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23298 00001781 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23299                                  
 23300                                  _$P_RLT_CAP00:				;AN000;
 23301 00001783 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23302                                  					;AN000; need CAPS by char table ?
 23303 00001788 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23304                                  
 23305 0000178A B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23306                                  _$P_RLT_CAP02:				;AN000;
 23307 0000178C E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23308                                  _$P_RLT_CAP01:				;AN000;
 23309 0000178F 58                      	pop	ax			;AN000;
 23310 00001790 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23311                                  					;AN000; removing colon at end ?
 23312 00001795 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23313                                  
 23314 00001797 E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23315                                  _$P_RLT_Exit:				;AN000;
 23316 0000179A 5F                      	pop	di			;AN000;
 23317 0000179B C3                      	retn				;AN000;
 23318                                  
 23319                                  ;***********************************************************************
 23320                                  ; _$P_Check_Match_Flags
 23321                                  ;
 23322                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23323                                  ;	     result buffer
 23324                                  ;
 23325                                  ;	    Check for types in this order:
 23326                                  ;		Complex
 23327                                  ;		Date
 23328                                  ;		Time
 23329                                  ;		Drive
 23330                                  ;		Filespec
 23331                                  ;		Quoted String
 23332                                  ;		Simple String
 23333                                  ;
 23334                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23335                                  ;	     ES:BX -> CONTROL block
 23336                                  ;
 23337                                  ; Output:    None
 23338                                  ;
 23339                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23340                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23341                                  ;	     _$P_Drive_Format
 23342                                  ;***********************************************************************
 23343                                  
 23344                                  	; 25/10/2022 - Retro DOS v4.0
 23345                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23346                                  
 23347                                  	; 12/12/2022
 23348                                  _$P_Check_Match_Flags:
 23349 0000179C 2EC606[D814]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23350                                  					;AN033;AC034;; clear filespec error flag.
 23351 000017A2 50                      	push	ax			;AN000;
 23352                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23353 000017A3 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23354 000017A6 09C0                    	or	ax,ax			;AC035; test ax for zero
 23355 000017A8 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23356 000017AA 50                      	push	ax			;AN000; (tm12)
 23357 000017AB 53                      	push	bx			;AN000; (tm12)
 23358 000017AC 52                      	push	dx			;AN000; (tm12)
 23359 000017AD 57                      	push	di			;AN000; (tm12)
 23360 000017AE 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23361 000017B5 B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23362 000017B7 B003                    	mov	al,_$P_String		;AN000; (tm12)
 23363 000017B9 E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23364 000017BC 5F                      	pop	di			;AN000; (tm12)
 23365 000017BD 5A                      	pop	dx			;AN000; (tm12)
 23366 000017BE 5B                      	pop	bx			;AN000; (tm12)
 23367 000017BF 58                      	pop	ax			;AN000; (tm12)
 23368                                  	; 12/12/2022
 23369                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23370                                  	; 12/12/2022
 23371                                  ;_$P_Mat: 				;AN000; (tm12)
 23372                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23373                                  _$P_Bridge:
 23374 000017C0 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23375                                  	
 23376                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23377                                  	; (SYSINIT:19F9h)
 23378                                  	; 12/12/2022
 23379                                  	;nop	; db 90h
 23380                                  
 23381                                  ; 12/12/2022
 23382                                  _$P_Mat:
 23383                                  _$P_Match03:				;AN000;
 23384 000017C2 A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23385 000017C5 7412                    	jz	short _$P_Match04	;AN000;
 23386                                  
 23387 000017C7 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23388 000017CE E82601                  	call	_$P_Value		;AN000; do process
 23389 000017D1 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23390 000017D7 7557                    	jne	short _$P_Match_Exit	;AN000;
 23391                                  _$P_Match04:				;AN000;
 23392 000017D9 A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23393 000017DC 7412                    	jz	short _$P_Match05	;AN000;
 23394                                  
 23395 000017DE 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23396 000017E5 E8EB00                  	call	_$P_SValue		;AN000; do process
 23397 000017E8 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23398 000017EE 7540                    	jne	short _$P_Match_Exit	;AN000;
 23399                                  _$P_Match05:				;AN000;
 23400 000017F0 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23401 000017F3 7415                    	jz	short _$P_Match06	;AN000;
 23402                                  
 23403 000017F5 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23404 000017FC E80F03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23405 000017FF E89103                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23406 00001802 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23407 00001808 7526                    	jne	short _$P_Match_Exit	;AN000;
 23408                                  _$P_Match06:				;AN000;
 23409 0000180A A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23410 0000180D 7412                    	jz	short _$P_Match07	;AN000;
 23411                                  
 23412 0000180F 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23413 00001816 E8F502                  	call	_$P_File_Format		;AN000; do process
 23414 00001819 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23415 0000181F 750F                    	jne	short _$P_Match_Exit	;AN000;
 23416                                  _$P_Match07:				;AN000;
 23417 00001821 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23418 00001824 740A                    	jz	short _$P_Match09	;AN000;
 23419                                  
 23420 00001826 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23421 0000182D E8D701                  	call	_$P_Simple_String	;AN000; do process
 23422                                  _$P_Match09:				;AN000;
 23423                                  _$P_Match_Exit:				;AN000;
 23424 00001830 2E833E[D814]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23425 00001836 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23426 00001838 2E833E[3514]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23427 0000183E 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23428 00001840 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23429                                  _$P_Match2_Exit: 			;AN033;
 23430 00001847 58                      	pop	ax			;AN000;
 23431 00001848 C3                      	retn				;AN000;
 23432                                  
 23433                                  ;***********************************************************************
 23434                                  ; _$P_Remove_Colon;
 23435                                  ;
 23436                                  ; Function: Remove colon at end
 23437                                  ;
 23438                                  ; Input:    cs:SI points to string buffer to be examineed
 23439                                  ;
 23440                                  ; Output:   None
 23441                                  ;
 23442                                  ; Use:	_$P_Chk_DBCS
 23443                                  ;***********************************************************************
 23444                                  
 23445                                  _$P_Remove_Colon:
 23446 00001849 50                      	push	ax			;AN000;
 23447 0000184A 56                      	push	si			;AN000;
 23448                                  _$P_RCOL_Loop:				;AN000;
 23449 0000184B 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23450 0000184E 08C0                    	or	al,al			;AN000; end of string ?
 23451 00001850 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23452                                  
 23453 00001852 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23454 00001854 750D                    	jne	short _$P_RCOL00	;AN000;
 23455                                  
 23456 00001856 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23457 0000185B 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23458                                  
 23459 0000185D 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23460 00001861 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23461                                  
 23462                                  _$P_RCOL00:				;AN000;
 23463 00001863 E84404                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23464 00001866 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23465                                  
 23466 00001868 46                      	inc	si			;AN000; if yes, skip trailing byte
 23467                                  _$P_RCOL01:				;AN000;
 23468 00001869 46                      	inc	si			;AN000; si points to next byte
 23469 0000186A EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23470                                  
 23471                                  _$P_RCOL_Exit:				;AN000;
 23472 0000186C 5E                      	pop	si			;AN000;
 23473 0000186D 58                      	pop	ax			;AN000;
 23474 0000186E C3                      	retn				;AN000;
 23475                                  
 23476                                  ;***********************************************************************
 23477                                  ; _$P_Do_CAPS_String;
 23478                                  ;
 23479                                  ; Function: Perform capitalization along with the file case map table
 23480                                  ;	    or character case map table.
 23481                                  ;
 23482                                  ; Input:    AL = 2 : Use character table
 23483                                  ;	    AL = 4 : Use file table
 23484                                  ;	    cs:SI points to string buffer to be capitalized
 23485                                  ;
 23486                                  ; Output:   None
 23487                                  ;
 23488                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23489                                  ;***********************************************************************
 23490                                  
 23491                                  _$P_Do_CAPS_String:
 23492 0000186F 56                      	push	si			;AN000;
 23493 00001870 52                      	push	dx			;AN000;
 23494 00001871 88C2                    	mov	dl,al			;AN000; save info id
 23495                                  
 23496                                  _$P_DCS_Loop:				;AN000;
 23497 00001873 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23498 00001876 E83104                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23499 00001879 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23500                                  
 23501 0000187B 08C0                    	or	al,al			;AN000; end of string ?
 23502 0000187D 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23503                                  
 23504 0000187F E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23505 00001882 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23506 00001885 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23507                                  _$P_DCS00:				;AN000;
 23508 00001887 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23509                                  _$P_DCS01:				;AN000;
 23510 00001888 46                      	inc	si			;AN000; si point to next byte
 23511 00001889 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23512                                  _$P_DCS_Exit:				;AN000;
 23513 0000188B 5A                      	pop	dx			;AN000;
 23514 0000188C 5E                      	pop	si			;AN000;
 23515 0000188D C3                      	retn
 23516                                  
 23517                                  ;***********************************************************************
 23518                                  ; _$P_Do_CAPS_Char;
 23519                                  ;
 23520                                  ; Function: Perform capitalization along with the file case map table
 23521                                  ;	    or character case map table.
 23522                                  ;
 23523                                  ; Input:    DL = 2 : Use character table
 23524                                  ;	    DL = 4 : Use file table
 23525                                  ;	    AL = character to be capitalized
 23526                                  ;
 23527                                  ; Output:   None
 23528                                  ;
 23529                                  ; Use:	INT 21h /w AH=65h
 23530                                  ;***********************************************************************
 23531                                  
 23532                                  _$P_Do_CAPS_Char:
 23533 0000188E 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23534 00001890 730C                    	jae	short _$P_DCC_Go	;AN000;
 23535                                  
 23536 00001892 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23537 00001894 723C                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23538                                  
 23539 00001896 3C7A                    	cmp	al,"z"                  ;AN000;
 23540 00001898 7738                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23541                                  
 23542 0000189A 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23543 0000189C EB34                    	jmp	short _$P_CAPS_Ret	;AN000;
 23544                                  
 23545                                  _$P_DCC_Go:				;AN000;
 23546 0000189E 53                      	push	bx			;AN000;
 23547 0000189F 06                      	push	es			;AN000;
 23548 000018A0 57                      	push	di			;AN000;
 23549                                  
 23550                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23551 000018A1 8D3E[CA14]              	lea	di,[_$P_Char_CAP_Ptr]
 23552                                  _$P_DCC00:				;AN000;
 23553 000018A5 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23554 000018A8 7417                    	je	short _$P_DCC01		;AN000; if no,
 23555                                  
 23556                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23557                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23558                                  ; call, regardless of what base register is currently be defined as cs.
 23559                                  
 23560 000018AA 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23561 000018AB 51                      	push	cx			;AN000;
 23562 000018AC 52                      	push	dx			;AN000;
 23563                                  
 23564 000018AD 0E                      	push	cs			;AC036; pass current base seg into
 23565                                  					;(Note: this used to push CS.  BUG...
 23566 000018AE 07                      	pop	es			;AN000;   ES reg, required for
 23567                                  					;get extended country information
 23568 000018AF B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23569 000018B1 88D0                    	mov	al,dl			;AN000; upper case table
 23570 000018B3 BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23571 000018B6 B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23572 000018B9 BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23573                                  					;DI already set to point to buffer
 23574 000018BC CD21                    	int	21h			;AN000; es:di point to buffer that
 23575                                  					;now has been filled in with info
 23576 000018BE 5A                      	pop	dx			;AN000;
 23577 000018BF 59                      	pop	cx			;AN000;
 23578 000018C0 58                      	pop	ax			;AN000;
 23579                                  
 23580                                  _$P_DCC01:				;AN000;
 23581                                  
 23582                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23583                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23584                                  ; regardless of which base reg is currently the cs reg.
 23585                                  
 23586 000018C1 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23587 000018C5 2E8E4503                	mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23588 000018C9 43                      	inc	bx			;AC035; add '2' to
 23589 000018CA 43                      	inc	bx			;AC035;  BX reg
 23590                                  					;AN000; skip length field
 23591 000018CB 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23592                                  	;xlat	es:[bx] 		;AN000; perform case map
 23593 000018CD 26                      	es
 23594 000018CE D7                      	xlat
 23595 000018CF 5F                      	pop	di			;AN000;
 23596 000018D0 07                      	pop	es			;AN000;
 23597 000018D1 5B                      	pop	bx			;AN000;
 23598                                  _$P_CAPS_Ret:				;AN000;
 23599 000018D2 C3                      	retn				;AN000;
 23600                                  
 23601                                  ;***********************************************************************
 23602                                  ; _$P_Value / _$P_SValue
 23603                                  ;
 23604                                  ; Function:  Make 32bit value from cs:SI and see value list
 23605                                  ;	     and make result buffer.
 23606                                  ;	     _$P_SValue is an entry point for the signed value
 23607                                  ;	     and this will simply call _$P_Value after the handling
 23608                                  ;	     of the sign character, "+" or "-"
 23609                                  ;
 23610                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23611                                  ;	     ES:BX -> CONTROL block
 23612                                  ;
 23613                                  ; Output:    None
 23614                                  ;
 23615                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23616                                  ;
 23617                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23618                                  ;***********************************************************************
 23619                                  
 23620                                  	; 26/10/2022 - Retro DOS v4.0
 23621                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23622                                  
 23623                                  _$P_SValue:				;AN000; when signed value here
 23624 000018D3 50                      	push	ax			;AN000;
 23625 000018D4 2E800E[4114]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23626 000018DA 2E8026[4114]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23627 000018E0 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23628 000018E3 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23629 000018E5 740A                    	je	short _$P_SVal00	;AN000;
 23630                                  
 23631 000018E7 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23632 000018E9 7507                    	jne	short _$P_Sval01	;AN000; else
 23633                                  
 23634 000018EB 2E800E[4114]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23635                                  _$P_SVal00:				;AN000;
 23636 000018F1 46                      	inc	si			;AN000; skip sign char
 23637                                  _$P_Sval01:				;AN000;
 23638 000018F2 E80200                  	call	_$P_Value		;AN000; and process value
 23639 000018F5 58                      	pop	ax			;AN000;
 23640 000018F6 C3                      	retn
 23641                                  
 23642                                  ;***********************************************************************
 23643                                  
 23644                                  	; 26/10/2022
 23645                                  _$P_Value:				;AN000;
 23646 000018F7 50                      	push	ax			;AN000;
 23647 000018F8 51                      	push	cx			;AN000;
 23648 000018F9 52                      	push	dx			;AN000;
 23649 000018FA 56                      	push	si			;AN000;
 23650 000018FB 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23651 000018FD 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23652 000018FF 53                      	push	bx			;AN000; save control pointer
 23653                                  _$P_Value_Loop:				;AN000;
 23654 00001900 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23655 00001903 08C0                    	or	al,al			;AN000; end of line ?
 23656 00001905 7442                    	jz	short _$P_Value00	;AN000;
 23657                                  
 23658 00001907 E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23659 0000190A 7239                    	jc	short _$P_Value_Err0	;AN000;
 23660                                  
 23661 0000190C 30E4                    	xor	ah,ah			;AN000;
 23662 0000190E 89C5                    	mov	bp,ax			;AN000; save binary number
 23663 00001910 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23664 00001912 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23665 00001914 E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23666 00001917 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23667                                  
 23668 00001919 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23669 0000191B 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23670 0000191D D1E2                    	shl	dx,1			;AN000; to have 4*x
 23671 0000191F D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23672 00001921 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23673 00001924 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23674                                  
 23675 00001926 D1E2                    	shl	dx,1			;AN000; to have 8*x
 23676 00001928 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23677 0000192A E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23678 0000192D 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23679                                  
 23680 0000192F 01DA                    	add	dx,bx			;AN000; now have 10*x
 23681 00001931 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23682 00001933 E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23683 00001936 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23684                                  
 23685 00001938 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23686 0000193A 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23687 0000193D E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23688 00001940 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23689                                  
 23690 00001942 46                      	inc	si			;AN000; update pointer
 23691 00001943 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23692                                  ;
 23693                                  _$P_Value_Err0:				;AN000;
 23694 00001945 5B                      	pop	bx			;AN000;
 23695 00001946 E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23696                                  ;
 23697                                  _$P_Value00:				;AN000;
 23698 00001949 5B                      	pop	bx			;AN000; restore control pointer
 23699 0000194A 2EF606[4114]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23700 00001950 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23701                                  
 23702 00001952 F7D1                    	not	cx			;AN000; +
 23703 00001954 F7D2                    	not	dx			;AN000; |- Make 2's complement
 23704 00001956 83C201                  	add	dx,1			;AN000; |
 23705 00001959 83D100                  	adc	cx,0			;AN000; +
 23706                                  
 23707                                  _$P_Value01:				;AN000; / nval =0
 23708 0000195C 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23709 00001960 268A04                  	mov	al,[es:si]		;AN000; get nval
 23710 00001963 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23711 00001965 7506                    	jne	short _$P_Value02	;AN000;
 23712                                  
 23713 00001967 B001                    	mov	al,_$P_Number		;AN000; Set type
 23714 00001969 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23715 0000196B EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23716                                  
 23717                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23718                                  	; (SYSINIT:1BA5h)
 23719                                  	; 12/12/2022
 23720                                  	;nop	; db  90h
 23721                                  
 23722                                  _$P_Value02:				;AN000; / nval = 1
 23723                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23724                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23725                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23726                                  
 23727 0000196D 46                      	inc	si			;AN000;
 23728 0000196E 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23729 00001971 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23730 00001973 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23731                                  
 23732 00001975 46                      	inc	si			;AN000; si points to 1st item_tag
 23733                                  _$P_Val02_Loop:				;AN000;
 23734 00001976 2EF606[4114]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23735 0000197C 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23736                                  
 23737 0000197E 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23738 00001982 7236                    	jb	short _$P_Val02_Next	;AN000;
 23739 00001984 7706                    	ja	short _$P_Val_In	;AN000;
 23740                                  
 23741 00001986 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23742 0000198A 722E                    	jb	short _$P_Val02_Next	;AN000;
 23743                                  
 23744                                  _$P_Val_In:				;AN000;
 23745 0000198C 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23746 00001990 7728                    	ja	short _$P_Val02_Next	;AN000;
 23747 00001992 723A                    	jb	short _$P_Val_Found	;AN000;
 23748                                  
 23749 00001994 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23750 00001998 7720                    	ja	short _$P_Val02_Next	;AN000;
 23751                                  
 23752 0000199A EB32                    	jmp	short _$P_Val_Found	;AN000;
 23753                                  
 23754                                  _$P_Val02_Sign:				;AN000;
 23755 0000199C 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23756 000019A0 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23757 000019A2 7F06                    	jg	short _$P_SVal_In	;AN000;
 23758                                  
 23759 000019A4 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23760 000019A8 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23761                                  
 23762                                  _$P_SVal_In:				;AN000;
 23763 000019AA 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23764 000019AE 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23765                                  
 23766 000019B0 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23767                                  
 23768 000019B2 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23769 000019B6 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23770                                  
 23771 000019B8 EB14                    	jmp	short _$P_Val_Found	;AN000;
 23772                                  
 23773                                  _$P_Val02_Next:				;AN000;
 23774 000019BA 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23775 000019BD FEC8                    	dec	al			;AN000; loop nrng times in AL
 23776 000019BF 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23777                                  					; / Not found
 23778 000019C1 2EC706[3514]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23779 000019C8 B001                    	mov	al,_$P_Number		;AN000;
 23780 000019CA B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23781 000019CC EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23782                                  
 23783                                  _$P_Val_Found:				;AN000;
 23784 000019CE B001                    	mov	al,_$P_Number		;AN000;
 23785 000019D0 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23786 000019D3 EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23787                                  
 23788                                  _$P_Value03:				;AN000; / nval = 2
 23789                                  
 23790                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23791                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23792                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23793                                  ;(tm07) inc	si			;AN000;
 23794                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23795                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23796                                  ;	mul	ah			;AN000;  Skip nrng field
 23797                                  ;	inc	ax			;AN000;
 23798                                  ;	add	si,ax			;AN000; si points to nnval
 23799                                  ;	mov	al,es:[si]		;AN000; get nnval
 23800                                  ;	inc	si			;AN000; si points to 1st item_tag
 23801                                  ;$P_Val03_Loop:				;AN000;
 23802                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23803                                  ;	jne	$P_Val03_Next		;AN000;
 23804                                  ;
 23805                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23806                                  ;	je	$P_Val_Found		;AN000;
 23807                                  ;
 23808                                  ;$P_Val03_Next:				;AN000;
 23809                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23810                                  ;	dec	al			;AN000; loop nval times in AL
 23811                                  ;	jne	$P_Val03_Loop		;AN000;
 23812                                  ;					;AN000; / Not found
 23813                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23814                                  ;	mov	al,$P_Number		;AN000;
 23815                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23816                                  ;	jmp	short $P_Value_Exit	;AN000;
 23817                                  ;
 23818                                  ;ENDIF					;AN000;(of Val2SW)
 23819                                  ;$P_Value04:
 23820                                  
 23821                                  _$P_Value_Err:				;AN000;
 23822 000019D5 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23823 000019DC B003                    	mov	al,_$P_String		;AN000; Set type
 23824 000019DE B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23825                                  _$P_Value_Exit:				;AN000;
 23826 000019E0 E834FD                  	call	_$P_Fill_Result		;AN000;
 23827 000019E3 5E                      	pop	si			;AN000;
 23828 000019E4 5A                      	pop	dx			;AN000;
 23829 000019E5 59                      	pop	cx			;AN000;
 23830 000019E6 58                      	pop	ax			;AN000;
 23831 000019E7 C3                      	retn				;AN000;
 23832                                  
 23833                                  ; 28/03/2019 - Retro DOS v4.0
 23834                                  
 23835                                  ;***********************************************************************
 23836                                  ; _$P_Check_OVF
 23837                                  ;
 23838                                  ; Function:  Check if overflow is occurred with consideration of
 23839                                  ;	     signed or un-signed numeric value
 23840                                  ;
 23841                                  ; Input:     Flag register
 23842                                  ;
 23843                                  ; Output:    CY = 1  :	Overflow
 23844                                  ;
 23845                                  ; Vars:     _$P_Flags(R)
 23846                                  ;***********************************************************************
 23847                                  
 23848                                  	; 26/10/2022
 23849                                  _$P_Check_OVF:
 23850 000019E8 9C                      	pushf				;AN000;
 23851 000019E9 2EF606[4114]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23852 000019EF 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23853                                  
 23854 000019F1 9D                      	popf				;AN000; by the CY bit
 23855 000019F2 C3                      	retn				;AN000;
 23856                                  
 23857                                  _$P_COVF:				;AN000;
 23858 000019F3 9D                      	popf				;AN000; else,
 23859 000019F4 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23860                                  
 23861 000019F6 F8                      	clc				;AN000; indicate it with CY bit
 23862 000019F7 C3                      	retn				;AN000; CY=0 means no overflow
 23863                                  
 23864                                  _$P_COVF00:				;AN000;
 23865 000019F8 F9                      	stc				;AN000; and CY=1 means overflow
 23866 000019F9 C3                      	retn				;AN000;
 23867                                  
 23868                                  ;***********************************************************************
 23869                                  ; _$P_0099;
 23870                                  ;
 23871                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23872                                  ;
 23873                                  ; Input:     AL = character code
 23874                                  ;
 23875                                  ; Output:    CY = 1 : AL is not number
 23876                                  ;	     CY = 0 : AL contains binary value
 23877                                  ;***********************************************************************
 23878                                  
 23879                                  _$P_0099:
 23880 000019FA 3C30                    	cmp	al,"0"                  ;AN000;
 23881                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23882                                  	; 12/12/2022
 23883 000019FC 7208                    	jb	short _$P_0099Err2  ; cf=1
 23884                                  
 23885 000019FE 3C39                    	cmp	al,"9"                  ;AN000;
 23886 00001A00 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23887                                  
 23888 00001A02 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23889                                  	; 12/12/2022
 23890                                  	; cf=0	
 23891                                  	;clc				;AN000; indicate no error
 23892 00001A04 C3                      	retn				;AN000;
 23893                                  
 23894                                  _$P_0099Err:				;AN000;
 23895 00001A05 F9                      	stc				;AN000; indicate error
 23896                                  _$P_0099Err2: ; 12/12/2022	
 23897 00001A06 C3                      	retn				;AN000;
 23898                                  
 23899                                  ;***********************************************************************
 23900                                  ; _$P_Simple_String
 23901                                  ;
 23902                                  ; Function:  See value list for the simple string
 23903                                  ;	     and make result buffer.
 23904                                  ;
 23905                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23906                                  ;	     ES:BX -> CONTROL block
 23907                                  ;
 23908                                  ; Output:    None
 23909                                  ;
 23910                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23911                                  ;
 23912                                  ; Vars: _$P_RC(W)
 23913                                  ;***********************************************************************
 23914                                  
 23915                                  _$P_Simple_String:
 23916 00001A07 50                      	push	ax			;AN000;
 23917 00001A08 53                      	push	bx			;AN000;
 23918 00001A09 52                      	push	dx			;AN000;
 23919 00001A0A 57                      	push	di			;AN000;
 23920 00001A0B 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23921 00001A0F 268A05                  	mov	al,[es:di]		;AN000; get nval
 23922 00001A12 08C0                    	or	al,al			;AN000; no value list ?
 23923 00001A14 7504                    	jnz	short _$P_Sim00		;AN000; then
 23924                                  
 23925 00001A16 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23926 00001A18 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23927                                  
 23928                                  _$P_Sim00:				;AN000;
 23929                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23930 00001A1A 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23931 00001A1C 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23932                                  
 23933 00001A1E 47                      	inc	di			;AN000;
 23934 00001A1F 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23935 00001A22 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23936 00001A24 F6E4                    	mul	ah			;AN000; Skip nrng field
 23937 00001A26 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23938 00001A27 01C7                    	add	di,ax			;AN000; di points to nnval
 23939 00001A29 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23940 00001A2C B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23941 00001A2E F6E4                    	mul	ah			;AN000; Skip nnval field
 23942 00001A30 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23943 00001A31 01C7                    	add	di,ax			;AN000; di points to nstrval
 23944 00001A33 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23945 00001A36 47                      	inc	di			;AC035; add '2' to
 23946 00001A37 47                      	inc	di			;AC035;  DI reg
 23947                                  					;AN000; di points to 1st string in list
 23948                                  _$P_Sim_Loop:				;AN000;
 23949 00001A38 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23950 00001A3B E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23951 00001A3E 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23952                                  
 23953 00001A40 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23954 00001A43 FEC8                    	dec	al			;AN000; loop nstval times in AL
 23955 00001A45 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23956                                  					;AN000; / Not found
 23957 00001A47 2EC706[3514]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23958 00001A4E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23959 00001A50 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23960                                  
 23961                                  _$P_Sim_Found:				;AN000;
 23962 00001A52 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23963 00001A56 B002                    	mov	al,_$P_List_Idx		;AN000;
 23964 00001A58 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23965 00001A5B EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23966                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23967                                  _$P_Sim01:				;AN000;
 23968 00001A5D 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23969 00001A64 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23970                                  _$P_Sim_Exit:				;AN000;
 23971 00001A66 B003                    	mov	al,_$P_String		;AN000; Set type
 23972                                  _$P_Sim_Exit0:				;AN000;
 23973 00001A68 E8ACFC                  	call	_$P_Fill_Result		;AN000;
 23974 00001A6B 5F                      	pop	di			;AN000;
 23975 00001A6C 5A                      	pop	dx			;AN000;
 23976 00001A6D 5B                      	pop	bx			;AN000;
 23977 00001A6E 58                      	pop	ax			;AN000;
 23978 00001A6F C3                      	retn				;AN000;
 23979                                  
 23980                                  ;***********************************************************************
 23981                                  ; _$P_String_Comp:
 23982                                  ;
 23983                                  ; Function:  Compare two string
 23984                                  ;
 23985                                  ; Input:     cs:SI -> 1st string
 23986                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23987                                  ;	     ES:BX -> CONTROL block
 23988                                  ;
 23989                                  ; Output:    CY = 1 if not match
 23990                                  ;
 23991                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23992                                  ;
 23993                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23994                                  ;***********************************************************************
 23995                                  
 23996                                  _$P_String_Comp:
 23997 00001A70 50                      	push	ax			;AN000;
 23998 00001A71 55                      	push	bp			;AN000;
 23999 00001A72 52                      	push	dx			;AN000;
 24000 00001A73 56                      	push	si			;AN000;
 24001 00001A74 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24002                                  _$P_SCOM_Loop:				;AN000;
 24003 00001A76 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24004 00001A79 E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24005 00001A7C 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24006                                  
 24007 00001A7E E80DFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24008                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24009 00001A81 2EF606[4114]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24010 00001A87 740D                    	jz	short _$P_SCOM04	;AN000;
 24011                                  
 24012 00001A89 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24013 00001A8B 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24014                                  
 24015 00001A8D 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24016 00001A92 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24017                                  
 24018 00001A94 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24019                                  
 24020                                  _$P_SCOM04:				;AN000;
 24021 00001A96 2EF606[4114]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24022 00001A9C 740E                    	jz	short _$P_SCOM03	;AN000;
 24023                                  
 24024 00001A9E 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24025 00001AA0 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24026                                  
 24027                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24028                                  	;cmp	byte [es:bp+0],_$P_NULL
 24029                                  	; 11/12/2022
 24030 00001AA2 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24031 00001AA7 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24032                                  
 24033                                  _$P_SCOM05:				;AN000;   found a match
 24034 00001AA9 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24035 00001AAA EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24036                                  
 24037                                  _$P_SCOM03:				;AN000;
 24038                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24039                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24040                                  	;cmp	al,[es:bp+0]
 24041                                  	; 11/12/2022
 24042 00001AAC 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24043 00001AB0 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24044                                  
 24045 00001AB2 08C0                    	or	al,al			;AN000; end of line
 24046 00001AB4 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24047                                  
 24048                                  	; 12/12/2022
 24049                                  	;inc	si			;AN000; update operand pointer
 24050                                  	;inc	bp			;AN000;    and synonym pointer
 24051                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24052 00001AB6 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24053                                  
 24054                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24055                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24056                                  	;cmp	al,[es:bp+0]
 24057                                  	; 11/12/2022
 24058 00001AB8 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24059 00001ABC 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24060                                  
 24061 00001ABE 46                      	inc	si			;AN000; else, load next byte
 24062 00001ABF 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24063 00001AC2 45                      	inc	bp			;AN000;
 24064                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24065                                  	;cmp	al,[es:bp+0]
 24066                                  	; 11/12/2022
 24067 00001AC3 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24068 00001AC7 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24069                                  
 24070                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24071                                  	; 12/12/2022
 24072                                  _$P_SCOM01:
 24073 00001AC9 46                      	inc	si			;AN000; else update operand pointer
 24074 00001ACA 45                      	inc	bp			;AN000; 		and synonym pointer
 24075                                  ;_$P_SCOM01:				;AN000;
 24076 00001ACB EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24077                                  
 24078                                  _$P_SCOM_Differ0:			;AN000;
 24079                                  ;IF SwSW				;AN000;(tm10)
 24080 00001ACD 2EF606[4114]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24081 00001AD3 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24082                                  
 24083                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24084                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24085                                  	; 12/12/2022
 24086 00001AD5 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24087 00001ADA 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24088                                  
 24089                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24090                                  	;cmp	byte [es:bp+0],_$P_NULL
 24091                                  	; 11/12/2022
 24092 00001ADC 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24093                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24094 00001AE1 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24095                                  
 24096                                  _$P_not_applicable:			;AN000;(tm10)
 24097                                  ;ENDIF					;AN000;(tm10)
 24098                                  
 24099                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24100                                  					;AN000; ignore colon option specified ?
 24101                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24102                                  	; 12/12/2022
 24103 00001AE3 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24104                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24105                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24106 00001AE7 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24107                                  
 24108 00001AE9 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24109 00001AEB 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24110                                  
 24111                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24112                                  	;cmp	byte [es:bp+0],_$P_NULL
 24113                                  	; 11/12/2022
 24114 00001AED 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24115 00001AF2 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24116                                  
 24117 00001AF4 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24118                                  
 24119                                  _$P_SCOM02:				;AN000;
 24120 00001AF6 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24121 00001AF8 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24122                                  
 24123                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24124                                  	;cmp	byte [es:bp+0],_$P_Colon
 24125                                  	; 11/12/2022
 24126 00001AFA 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24127 00001AFF 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24128                                  
 24129                                  _$P_SCOM_Differ: 			;AN000;
 24130 00001B01 F9                      	stc				;AN000; indicate not found
 24131 00001B02 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24132                                  
 24133                                  _$P_SCOM_Same:				;AN000;
 24134                                  	; 12/12/2022
 24135                                  	; cf=0
 24136 00001B04 2E8936[4414]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24137                                  	; 12/12/2022
 24138                                  	;clc				;AN000; indicate found
 24139                                  _$P_SCOM_Exit:				;AN000;
 24140 00001B09 5E                      	pop	si			;AN000;
 24141 00001B0A 5A                      	pop	dx			;AN000;
 24142 00001B0B 5D                      	pop	bp			;AN000;
 24143 00001B0C 58                      	pop	ax			;AN000;
 24144 00001B0D C3                      	retn
 24145                                  
 24146                                  ; 30/03/2019
 24147                                  
 24148                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24149                                  
 24150                                  ;***********************************************************************
 24151                                  ; _$P_File_Format;
 24152                                  ;
 24153                                  ; Function:  Check if the input string is valid file spec format.
 24154                                  ;	     And set the result buffer.
 24155                                  ;
 24156                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24157                                  ;	     ES:BX -> CONTROL block
 24158                                  ;
 24159                                  ; Output:    None
 24160                                  ;
 24161                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24162                                  ;
 24163                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24164                                  ;	_$P_SaveSI_Cmpx(R)
 24165                                  ;***********************************************************************
 24166                                  
 24167                                  _$P_File_Format:
 24168 00001B0E 50                      	push	ax			;AN000;
 24169 00001B0F 57                      	push	di			;AN000;
 24170 00001B10 56                      	push	si			;AN000;
 24171 00001B11 2E8B3E[4214]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24172                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24173 00001B16 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24174 00001B19 08C0                    	or	al,al			;AN000; end of line ?
 24175 00001B1B 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24176                                  
 24177 00001B1D E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24178 00001B20 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24179                                  
 24180 00001B22 2EC606[D814]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24181                                  					;AN033;AC034;; set error flag- bad char.
 24182 00001B28 5E                      	pop	si			;AN033;
 24183 00001B29 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24184 00001B2D 5F                      	pop	di			;AN033;
 24185 00001B2E EB3E                    	jmp	short _$P_FileF02	;AN033;
 24186                                  
 24187                                  _$P_FileF_Err:				;AN000;
 24188 00001B30 5E                      	pop	si			;AN000;
 24189 00001B31 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24190 00001B35 5F                      	pop	di			;AN000;
 24191                                  
 24192                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24193                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24194                                  	; 12/12/2022
 24195 00001B36 26F60701                	test	byte [es:bx],_$P_Optional
 24196                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24197                                  	;test	word [es:bx],_$P_Optional
 24198 00001B3A 7532                    	jnz	short _$P_FileF02	;AN000;
 24199                                  
 24200 00001B3C 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24201 00001B43 EB29                    	jmp	short _$P_FileF02	;AN000;
 24202                                  
 24203                                  _$P_FileF03:				;AN000;
 24204 00001B45 58                      	pop	ax			;AN000; discard save si
 24205 00001B46 56                      	push	si			;AN000; save new si
 24206                                  _$P_FileF_Loop1: 			;AN000;
 24207 00001B47 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24208 00001B4A 08C0                    	or	al,al			;AN000; end of line ?
 24209 00001B4C 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24210                                  
 24211 00001B4E E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24212 00001B51 740B                    	je	short _$P_FileF00	;AN000;
 24213                                  
 24214 00001B53 E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24215 00001B56 7302                    	jnc	short _$P_FileF01	;AN000;
 24216 00001B58 47                      	inc	di			;AN000; if yes, skip next byte
 24217 00001B59 46                      	inc	si			;AN000;
 24218                                  _$P_FileF01:				;AN000;
 24219 00001B5A 47                      	inc	di			;AN000;
 24220 00001B5B 46                      	inc	si			;AN000;
 24221 00001B5C EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24222                                  ;
 24223                                  _$P_FileF00:				;AN000;
 24224 00001B5E 2EA2[3B14]              	mov	[cs:_$P_Terminator],al	;AC034;
 24225 00001B62 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24226 00001B66 47                      	inc	di			;AN000;
 24227 00001B67 2E893E[3714]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24228                                  _$P_FileF_RLT:				;AN000;
 24229 00001B6C 5E                      	pop	si			;AN000;
 24230 00001B6D 5F                      	pop	di			;AN000;
 24231                                  _$P_FileF02:				;AN000;
 24232 00001B6E 58                      	pop	ax			;AN000; (tm14)
 24233 00001B6F A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 24234 00001B72 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24235                                  
 24236 00001B74 50                      	push	ax			;AN000;  (tm14)
 24237                                  
 24238 00001B75 B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 24239 00001B77 B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 24240 00001B79 E89BFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 24241 00001B7C 58                      	pop	ax			;AN000;
 24242                                  
 24243                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24244 00001B7D C3                      	retn				;AN000;
 24245                                  
 24246                                  ;***********************************************************************
 24247                                  ; _$P_FileSp_Chk
 24248                                  ;
 24249                                  ; Function:  Check if the input byte is one of file special characters
 24250                                  ;
 24251                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24252                                  ;	     AL = character code to be examineed
 24253                                  ;
 24254                                  ; Output:    ZF = 1 , AL is one of special characters
 24255                                  ;***********************************************************************
 24256                                  
 24257                                  _$P_FileSp_Chk:
 24258 00001B7E 53                      	push	bx			;AN000;
 24259 00001B7F 51                      	push	cx			;AN000;
 24260                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24261 00001B80 8D1E[CF14]              	lea	bx,[_$P_FileSp_Char]
 24262 00001B84 B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 24263                                  _$P_FileSp_Loop: 			;AN000;
 24264 00001B87 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24265 00001B8A 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24266                                  
 24267 00001B8C 43                      	inc	bx			;AN000;
 24268 00001B8D E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24269                                  
 24270 00001B8F 41                      	inc	cx			;AN000; reset ZF
 24271                                  _$P_FileSp_Exit: 			;AN000;
 24272 00001B90 59                      	pop	cx			;AN000;
 24273 00001B91 5B                      	pop	bx			;AN000;
 24274 00001B92 C3                      	retn
 24275                                  
 24276                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24277                                  
 24278                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24279                                  
 24280                                  ;***********************************************************************
 24281                                  ; _$P_Drive_Format;
 24282                                  ;
 24283                                  ; Function:  Check if the input string is valid drive only format.
 24284                                  ;	     And set the result buffer.
 24285                                  ;
 24286                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24287                                  ;	     ES:BX -> CONTROL block
 24288                                  ;
 24289                                  ; Output:    None
 24290                                  ;
 24291                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24292                                  ;
 24293                                  ; Vars: _$P_RC(W)
 24294                                  ;***********************************************************************
 24295                                  
 24296                                  _$P_Drive_Format:
 24297 00001B93 50                      	push	ax			;AN000;
 24298 00001B94 52                      	push	dx			;AN000;
 24299 00001B95 2E8A04                  	mov	al,[cs:si]		;AN000;
 24300 00001B98 08C0                    	or	al,al			;AN000; if null string
 24301 00001B9A 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24302                                  
 24303 00001B9C E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24304 00001B9F 722B                    	jc	short _$P_Drv_Err	;AN000;
 24305                                  
 24306 00001BA1 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24307 00001BA6 740D                    	je	short _$P_DrvF00	;AN000;
 24308                                  
 24309                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24310                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24311                                  	; 12/12/2022
 24312 00001BA8 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24313                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24314                                  	;test	word [es:bx],_$P_Ig_Colon
 24315 00001BAC 741E                    	jz	short _$P_Drv_Err	;AN000;
 24316                                  
 24317 00001BAE 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24318 00001BB3 7517                    	jne	short _$P_Drv_Err	;AN000;
 24319                                  
 24320                                  _$P_DrvF00:				;AN000;
 24321 00001BB5 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24322 00001BB7 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24323 00001BB9 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24324                                  
 24325 00001BBB 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24326 00001BBD 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24327                                  
 24328 00001BBF 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24329 00001BC1 88C2                    	mov	dl,al			;AN000; set
 24330 00001BC3 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24331 00001BC5 B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24332 00001BC7 E84DFB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24333 00001BCA EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24334                                  
 24335                                  _$P_Drv_Err:				;AN000;
 24336 00001BCC 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24337                                  _$P_Drv_Exit:				;AN000;
 24338 00001BD3 5A                      	pop	dx			;AN000;
 24339 00001BD4 58                      	pop	ax			;AN000;
 24340 00001BD5 C3                      	retn				;AN000;
 24341                                  
 24342                                  ;ENDIF					;AN000;(of DrvSW)
 24343                                  
 24344                                  ;***********************************************************************
 24345                                  ; _$P_Skip_Delim;
 24346                                  ;
 24347                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24348                                  ;	    and comma.
 24349                                  ;
 24350                                  ; Input:    DS:SI -> Command String
 24351                                  ;	    ES:DI -> Parameter List
 24352                                  ;
 24353                                  ; Output:   CY = 1 if the end of line encounterd
 24354                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24355                                  ;	    AL = Last examineed character
 24356                                  ;
 24357                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24358                                  ;
 24359                                  ; Vars:     _$P_Flags(R)
 24360                                  ;***********************************************************************
 24361                                  
 24362                                  _$P_Skip_Delim:
 24363                                  _$P_Skip_Delim_Loop:			;AN000;
 24364 00001BD6 AC                      	lodsb				;AN000;
 24365 00001BD7 E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24366 00001BDA 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24367                                  
 24368 00001BDC E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24369 00001BDF 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24370                                  
 24371 00001BE1 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24372 00001BE7 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24373                                  
 24374 00001BE9 2EF606[4114]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24375 00001BEF 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24376                                  
 24377                                  	;dec	si			;AN000; backup si for next call (tm08)
 24378                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24379                                  	; 12/12/2022
 24380                                  	; cf=0
 24381 00001BF1 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24382                                  
 24383                                  _$P_Skip_Delim_CY:			;AN000;
 24384 00001BF3 F9                      	stc				;AN000; indicate EOL
 24385 00001BF4 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24386                                  
 24387                                  _$P_Skip_Delim_NCY:			;AN000;
 24388 00001BF6 F8                      	clc				;AN000; indicate non delim
 24389                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24390 00001BF7 4E                      	dec	si			;AN000;  backup index pointer
 24391                                  	; 12/12/2022
 24392                                  _$P_Exit_At_Extra:	 ; cf=0
 24393 00001BF8 C3                      	retn				;AN000;
 24394                                  
 24395                                  	; 12/12/2022
 24396                                  ;_$P_Exit_At_Extra:			;AN000;
 24397                                  	;clc				;AN000; indicate extra delim
 24398                                  	;retn				;AN000;
 24399                                  
 24400                                  ;***********************************************************************
 24401                                  ; _$P_Chk_EOL;
 24402                                  ;
 24403                                  ; Function: Check if AL is one of End of Line characters.
 24404                                  ;
 24405                                  ; Input:    AL = character code
 24406                                  ;	    ES:DI -> Parameter List
 24407                                  ;
 24408                                  ; Output:   ZF = 1 if one of End of Line characters
 24409                                  ;**********************************************************************
 24410                                  
 24411                                  _$P_Chk_EOL:
 24412 00001BF9 53                      	push	bx			;AN000;
 24413 00001BFA 51                      	push	cx			;AN000;
 24414 00001BFB 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24415 00001BFD 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24416                                  
 24417 00001BFF 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24418 00001C01 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24419                                  
 24420                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24421 00001C03 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24422 00001C05 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24423                                  ;ENDIF					;AN028;
 24424                                  
 24425 00001C07 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24426                                  					;AN000; EOL character specified ?
 24427 00001C0C 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24428                                  
 24429 00001C0E 31DB                    	xor	bx,bx			;AN000;
 24430 00001C10 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24431                                  					;AN000; get length of delimiter list
 24432 00001C14 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24433 00001C17 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24434 00001C1B 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24435                                  
 24436                                  	;xor	cx,cx			;AN000; Get number of extra character
 24437 00001C1D 30ED                    	xor	ch,ch
 24438 00001C1F 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24439                                  _$P_Chk_EOL_Loop:			;AN000;
 24440 00001C22 43                      	inc	bx			;AN000;
 24441 00001C23 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24442 00001C26 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24443                                  
 24444 00001C28 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24445                                  
 24446                                  _$P_Chk_EOL_NZ:				;AN000;
 24447 00001C2A 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24448                                  _$P_Chk_EOL_Exit:			;AN000;
 24449 00001C2C 59                      	pop	cx			;AN000;
 24450 00001C2D 5B                      	pop	bx			;AN000;
 24451 00001C2E C3                      	retn
 24452                                  
 24453                                  ;***********************************************************************
 24454                                  ; _$P_Chk_Delim;
 24455                                  ;
 24456                                  ; Function: Check if AL is one of delimiter characters.
 24457                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24458                                  ;	    blanks.
 24459                                  ;
 24460                                  ; Input:    AL = character code
 24461                                  ;	    DS:SI -> Next Character
 24462                                  ;	    ES:DI -> Parameter List
 24463                                  ;
 24464                                  ; Output:   ZF = 1 if one of delimiter characters
 24465                                  ;	    SI points to the next character
 24466                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24467                                  ;***********************************************************************
 24468                                  
 24469                                  _$P_Chk_Delim:
 24470 00001C2F 53                      	push	bx			;AN000;
 24471 00001C30 51                      	push	cx			;AN000;
 24472 00001C31 2EC606[3B14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24473                                  					;AC034; Assume terminated by space
 24474                                  	;and	byte [cs:_$P_Flags20,0DFh
 24475 00001C37 2E8026[4114]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24476 00001C3D 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24477 00001C3F 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24478                                  
 24479 00001C41 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24480 00001C43 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24481                                  
 24482 00001C45 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24483 00001C47 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24484                                  
 24485                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24486                                  _$P_Chk_Delim00: 			;AN000;
 24487 00001C49 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24488 00001C4B 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24489                                  
 24490 00001C4D 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24491 00001C50 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24492                                  
 24493 00001C52 B020                    	mov	al,_$P_Space		;AN000;
 24494 00001C54 46                      	inc	si			;AN000; make si point to next character
 24495 00001C55 38C0                    	cmp	al,al			;AN000; Set ZF
 24496 00001C57 EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24497                                  
 24498                                  _$P_Chk_Delim01: 			;AN000;
 24499 00001C59 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24500                                  					;AN000; delimiter character specified ?
 24501 00001C5E 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24502                                  
 24503                                  	;xor	cx,cx			;AN000;
 24504 00001C60 30ED                    	xor	ch,ch
 24505                                  	;mov	cl,[es:di+3]
 24506 00001C62 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24507                                  					;AN000; get length of delimiter list
 24508 00001C66 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24509 00001C68 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24510                                  
 24511 00001C6A BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24512                                  _$P_Chk_Delim_Loop:			;AN000;
 24513 00001C6D 43                      	inc	bx			;AN000;
 24514 00001C6E 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24515 00001C71 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24516                                  
 24517 00001C73 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24518                                  
 24519                                  _$P_Chk_Delim_NZ:			;AN000;
 24520 00001C75 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24521                                  _$P_Chk_Delim_Exit:			;AN000;
 24522                                  _$P_ChkDfin:				;AN000;
 24523 00001C77 59                      	pop	cx			;AN000;
 24524 00001C78 5B                      	pop	bx			;AN000;
 24525 00001C79 C3                      	retn				;AN000;
 24526                                  
 24527                                  _$P_Chk_Delim_Exit0:			;AN000;
 24528 00001C7A 2EA2[3B14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24529 00001C7E 2EF606[4114]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24530 00001C84 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24531                                  
 24532 00001C86 2E800E[4114]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24533                                  					;AC034; flag terminated extra delimiter or comma
 24534                                  _$P_No_Set_Extra:			;AN027;
 24535 00001C8C 38C0                    	cmp	al,al			;AN000; set ZF
 24536 00001C8E EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24537                                  
 24538                                  
 24539                                  ;***********************************************************************
 24540                                  ; _$P_Chk_Switch;
 24541                                  ;
 24542                                  ; Function: Check if AL is the switch character not in first position of
 24543                                  ;	    _$P_STRING_BUF
 24544                                  ;
 24545                                  ; Input:    AL = character code
 24546                                  ;	    BX = current pointer within _$P_String_Buf
 24547                                  ;	    SI =>next char on command line (following the one in AL)
 24548                                  ;
 24549                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24550                                  ;		 position, and has no chance of being part of a date string,
 24551                                  ;		 i.e. should be treated as a delimiter.
 24552                                  
 24553                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24554                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24555                                  ;		 should not be treated as a delimiter.
 24556                                  ;
 24557                                  ; Vars:  _$P_Terminator(W)
 24558                                  
 24559                                  ; Use:	 _$P_0099
 24560                                  ;***********************************************************************
 24561                                  
 24562                                  _$P_Chk_Switch:
 24563                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24564 00001C90 8D2E[4A14]              	lea	bp,[_$P_STRING_BUF]	; BP=OFFSET of _$P_String_Buf even in group addressing
 24565                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24566 00001C94 39EB                    	cmp	bx,bp			;AN000;
 24567 00001C96 7406                    	je	short _$P_STRUC_L2	;AN000;
 24568                                  
 24569                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24570 00001C98 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24571 00001C9A 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24572                                  
 24573 00001C9C F9                      	stc				;AN020;not in first position and is slash
 24574                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24575                                  	; 12/12/2022
 24576 00001C9D C3                      	retn
 24577                                  
 24578                                  ; 12/12/2022
 24579                                  ;_$P_STRUC_L5:				;AN000;
 24580                                  ;	CLC				;AN020;not a slash
 24581                                  ;;	    .ENDIF			;AN020;
 24582                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24583                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24584                                  
 24585                                  _$P_STRUC_L2:				;AN000;
 24586                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24587 00001C9E 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24588 00001CA0 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24589                                  
 24590 00001CA2 2E800E[4114]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24591                                  ;	    .ENDIF			;AN020;
 24592                                  
 24593                                  	; 12/12/2022
 24594                                  	; cf=0
 24595                                  	;retn
 24596                                  
 24597                                  _$P_STRUC_L5:
 24598                                  	; 12/12/2022
 24599                                  _$P_STRUC_L12:				;AN000;
 24600 00001CA8 F8                      	clc				;AN020;CF=0 indicating first char
 24601                                  ;	.ENDIF				;AN020;
 24602                                  _$P_STRUC_L1:				;AN000;
 24603 00001CA9 C3                      	retn				;AN000;
 24604                                  
 24605                                  ;**************************************************************************
 24606                                  ; _$P_Chk_DBCS:
 24607                                  ;
 24608                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24609                                  ;
 24610                                  ;  Input:
 24611                                  ;	  AL	= Code to be examineed
 24612                                  ;
 24613                                  ;  Output:
 24614                                  ;	  If CF is on then a lead byte of DBCS
 24615                                  ;
 24616                                  ; Use: INT 21h w/AH=63
 24617                                  ;
 24618                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24619                                  ;***************************************************************************
 24620                                  
 24621                                  _$P_Chk_DBCS:
 24622 00001CAA 1E                      	push	ds			;AN000;
 24623 00001CAB 56                      	push	si			;AN000;
 24624 00001CAC 53                      	push	bx			;AN000; (tm11)
 24625                                  	
 24626 00001CAD 2E833E[3E14]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24627 00001CB3 7527                    	jne	short _$P_DBCS00	;AN000;
 24628                                  
 24629 00001CB5 50                      	push	ax			;AN000;
 24630 00001CB6 1E                      	push	ds			;AN000; (tm11)
 24631 00001CB7 51                      	push	cx			;AN000;
 24632 00001CB8 52                      	push	dx			;AN000;
 24633 00001CB9 57                      	push	di			;AN000;
 24634 00001CBA 55                      	push	bp			;AN000;
 24635 00001CBB 06                      	push	es			;AN000;
 24636 00001CBC 31F6                    	xor	si,si			;AN000;
 24637 00001CBE 8EDE                    	mov	ds,si			;AN000;
 24638 00001CC0 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24639 00001CC3 CD21                    	int	21h			;AN000;
 24640                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24641 00001CC5 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24642 00001CC7 09DB                    	or	bx,bx			;AN000; (tm11)
 24643 00001CC9 07                      	pop	es			;AN000;
 24644 00001CCA 5D                      	pop	bp			;AN000;
 24645 00001CCB 5F                      	pop	di			;AN000;
 24646 00001CCC 5A                      	pop	dx			;AN000;
 24647 00001CCD 59                      	pop	cx			;AN000;
 24648 00001CCE 1F                      	pop	ds			;AN000; (tm11)
 24649 00001CCF 58                      	pop	ax			;AN000;
 24650 00001CD0 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24651                                  
 24652                                  _$P_DBCS02:				;AN000;
 24653 00001CD2 2E8936[3C14]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24654 00001CD7 2E891E[3E14]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24655                                  _$P_DBCS00:				;AN000;
 24656 00001CDC 2E8B36[3C14]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24657 00001CE1 2E8E1E[3E14]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24658                                  
 24659                                  _$P_DBCS_LOOP:				;AN000;
 24660 00001CE6 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24661 00001CE9 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24662                                  
 24663 00001CEB 3A04                    	cmp	al,[si] 		;AN000;
 24664 00001CED 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24665                                  
 24666 00001CEF 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24667 00001CF2 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24668                                  
 24669 00001CF4 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24670 00001CF5 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24671                                  
 24672                                  _$P_DBCS01:				;AN000;
 24673 00001CF7 46                      	inc	si			;AC035; add '2' to
 24674 00001CF8 46                      	inc	si			;AC035;  SI reg
 24675                                  					;AN000; get next vector
 24676 00001CF9 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24677                                  
 24678                                  _$P_NON_DBCS:				;AN000;
 24679                                  	; 12/12/2022
 24680                                  	; cf=0
 24681                                  	;clc				;AN000; indicate SBCS
 24682                                  _$P_DBCS_EXIT:				;AN000;
 24683 00001CFB 5B                      	pop	bx			;AN000; (tm11)
 24684 00001CFC 5E                      	pop	si			;AN000;
 24685 00001CFD 1F                      	pop	ds			;AN000;
 24686 00001CFE C3                      	retn				;AN000;
 24687                                  
 24688                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24689                                  ; ======================================================================
 24690                                  ; 27/03/2019 - Retro DOS v4.0
 24691                                  
 24692                                  ;control block definitions for parser.
 24693                                  ;-----------------------------------------------------------------------
 24694                                  ; buffer = [n | n,m] {/e}
 24695                                  
 24696                                  ; 30/03/2019
 24697                                  
 24698                                  struc p_parms
 24699 00000000 ????                    	resw	1	; dw ?
 24700 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24701 00000003 ??                      	resb	1	; db 1	; length is 1
 24702 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24703                                  .size:
 24704                                  endstruc
 24705                                  
 24706                                  struc p_pos
 24707 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24708 00000002 ????                    	resw	1	; dw ?	; function
 24709 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24710                                  
 24711                                  ; note: by defining result_val before this structure, we could remove
 24712                                  ;  the "result_val" from every structure invocation
 24713                                  
 24714 00000006 ????                    	resw	1	; dw ?	; value list
 24715 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24716                                  .size:
 24717                                  endstruc
 24718                                  
 24719                                  struc	p_range
 24720 00000000 ??                      	resb	1	; db 1	; range definition
 24721 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24722 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24723 00000003 ????????                	resd	1	; dd ?	; numeric min
 24724 00000007 ????????                	resd	1	; dd ?	; numeric max
 24725                                  .size:
 24726                                  endstruc
 24727                                  
 24728                                  ;-----------------------------------------------------------------------
 24729                                  
 24730                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24731                                  	; (SYSINIT:1F48h)
 24732                                  
 24733                                  ; buffer = [n | n,m] {/e}
 24734                                  
 24735                                  ;buf_parms p_parms <buf_parmsx>
 24736                                  buf_parms: 
 24737 00001CFF [041D]                  	dw	buf_parmsx
 24738 00001D01 01                      	db	1	; an extra delimiter list
 24739 00001D02 01                      	db	1	; length is 1
 24740 00001D03 3B                      	db	';'	; delimiter
 24741                                  
 24742                                  buf_parmsx:
 24743 00001D04 0102[0E1D][221D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24744 00001D0A 01                      	db	1			; one switch
 24745 00001D0B [361D]                  	dw	sw_x_ctrl
 24746 00001D0D 00                      	db	0			; no keywords
 24747                                  
 24748                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24749                                  buf_pos1:
 24750 00001D0E 0080                    	dw	8000h	; numeric value??
 24751 00001D10 0000                    	dw	0	; function
 24752 00001D12 [481D]                  	dw	result_val ; result value buffer	
 24753 00001D14 [171D]                  	dw	buf_range_1 ; value list
 24754 00001D16 00                      	db	0  	; no switches/keywords
 24755                                  
 24756                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24757                                  buf_range_1:
 24758 00001D17 01                      	db	1	; range definition
 24759 00001D18 01                      	db	1	; 1 definition of range
 24760 00001D19 01                      	db	1	; item tag for this range
 24761 00001D1A 01000000                	dd	1	; numeric min
 24762 00001D1E 63000000                	dd	99	; numeric max
 24763                                  
 24764                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24765                                  buf_pos2:
 24766 00001D22 0180                    	dw	8001h
 24767 00001D24 0000                    	dw	0
 24768 00001D26 [481D]                  	dw	result_val	
 24769 00001D28 [2B1D]                  	dw	buf_range_2
 24770 00001D2A 00                      	db	0
 24771                                  
 24772                                  ;buf_range_2 p_range <,,,0,8>
 24773                                  buf_range_2:
 24774 00001D2B 01                      	db	1
 24775 00001D2C 01                      	db	1
 24776 00001D2D 01                      	db	1
 24777 00001D2E 00000000                	dd	0
 24778 00001D32 08000000                	dd	8
 24779                                  
 24780                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24781                                  sw_x_ctrl:
 24782 00001D36 0000                    	dw	0
 24783 00001D38 0000                    	dw	0
 24784 00001D3A [481D]                  	dw	result_val	
 24785 00001D3C [471D]                  	dw	noval
 24786 00001D3E 01                      	db	1	; 1 switch
 24787                                  	
 24788                                  switch_x:
 24789 00001D3F 2F5800                  	db	'/X',0		; M016
 24790                                  
 24791                                  p_buffers:
 24792 00001D42 0000                    	dw	0	; local variables
 24793                                  p_h_buffers:
 24794 00001D44 0000                    	dw	0
 24795                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24796                                  p_buffer_slash_x:
 24797 00001D46 00                      	db	0 ; 31/03/2019
 24798                                  
 24799                                  ;-- common definitions -------------------------------------------------
 24800                                  
 24801 00001D47 00                      noval:	db	0
 24802                                  
 24803                                  result_val: 	;label	byte
 24804 00001D48 00                      	db	0		; type returned
 24805                                  result_val_itag:
 24806 00001D49 00                      	db	0		; item tag returned
 24807                                  result_val_swoff:
 24808 00001D4A 0000                    	dw	0		; es:offset of the switch defined
 24809                                  rv_byte:	;label	byte
 24810 00001D4C 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24811                                  
 24812                                  ;-----------------------------------------------------------------------
 24813                                  
 24814                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24815                                  	; (SYSINIT:1F99h)
 24816                                  
 24817                                  ; break = [ on | off ]
 24818                                  
 24819                                  ;brk_parms p_parms  <brk_parmsx>
 24820                                  brk_parms:
 24821 00001D50 [551D]                  	dw	brk_parmsx
 24822 00001D52 01                      	db	1	; an extra delimiter list
 24823 00001D53 01                      	db	1	; length is 1
 24824 00001D54 3B                      	db	';'	; delimiter
 24825                                  
 24826                                  brk_parmsx:
 24827 00001D55 0101[5B1D]              	dw	101h,brk_pos	; min,max = 1 positional
 24828 00001D59 00                      	db	0		; no switches
 24829 00001D5A 00                      	db	0		; no keywords
 24830                                  
 24831                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24832                                  brk_pos:
 24833 00001D5B 0020                    	dw	2000h
 24834 00001D5D 0000                    	dw	0
 24835 00001D5F [481D]                  	dw	result_val	
 24836 00001D61 [641D]                  	dw	on_off_string
 24837 00001D63 00                      	db	0
 24838                                  
 24839                                  on_off_string:	;label	byte
 24840 00001D64 03                      	db	3		; signals that there is a string choice
 24841 00001D65 00                      	db	0		; no range definition
 24842 00001D66 00                      	db	0		; no numeric values choice
 24843 00001D67 02                      	db	2		; 2 strings for choice
 24844 00001D68 01                      	db	1		; the 1st string tag
 24845 00001D69 [6E1D]                  	dw	on_string
 24846 00001D6B 02                      	db	2		; the 2nd string tag
 24847 00001D6C [711D]                  	dw	off_string
 24848                                  
 24849                                  on_string:
 24850 00001D6E 4F4E00                  	db	"ON",0
 24851                                  off_string:
 24852 00001D71 4F464600                	db	"OFF",0
 24853                                  
 24854                                  p_ctrl_break:
 24855 00001D75 00                      	db	0	; local variable
 24856                                  
 24857                                  ;-----------------------------------------------------------------------
 24858                                  
 24859                                  	; 27/10/2022
 24860                                  
 24861                                  ; country = n {m {path}}
 24862                                  ; or
 24863                                  ; country = n,,path
 24864                                  
 24865                                  ;cntry_parms p_parms <cntry_parmsx>
 24866                                  cntry_parms:
 24867 00001D76 [7B1D]                  	dw	cntry_parmsx
 24868 00001D78 01                      	db	1
 24869 00001D79 01                      	db	1
 24870 00001D7A 3B                      	db	';'
 24871                                  	
 24872                                  cntry_parmsx:
 24873 00001D7B 0103[851D][991D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24873 00001D81 [A21D]             
 24874 00001D83 00                      	db	0		; no switches
 24875 00001D84 00                      	db	0		; no keywords
 24876                                  
 24877                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24878                                  cntry_pos1:
 24879 00001D85 0080                    	dw	8000h
 24880 00001D87 0000                    	dw	0
 24881 00001D89 [481D]                  	dw	result_val	
 24882 00001D8B [8E1D]                  	dw	cc_range
 24883 00001D8D 00                      	db	0
 24884                                  
 24885                                  ;cc_range p_range <,,,1,999>
 24886                                  cc_range:
 24887 00001D8E 01                      	db	1
 24888 00001D8F 01                      	db	1
 24889 00001D90 01                      	db	1
 24890 00001D91 01000000                	dd	1
 24891 00001D95 E7030000                	dd	999
 24892                                  
 24893                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24894                                  cntry_pos2:
 24895 00001D99 0180                    	dw	8001h
 24896 00001D9B 0000                    	dw	0
 24897 00001D9D [481D]                  	dw	result_val	
 24898 00001D9F [8E1D]                  	dw	cc_range
 24899 00001DA1 00                      	db	0
 24900                                  
 24901                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24902                                  cntry_pos3:
 24903 00001DA2 0102                    	dw	201h
 24904 00001DA4 0000                    	dw	0
 24905 00001DA6 [481D]                  	dw	result_val	
 24906 00001DA8 [471D]                  	dw	noval
 24907 00001DAA 00                      	db	0	
 24908                                  
 24909                                  p_cntry_code:
 24910 00001DAB 0000                    	dw	0	; local variable
 24911                                  p_code_page:
 24912 00001DAD 0000                    	dw	0	; local variable
 24913                                  
 24914                                  ;-----------------------------------------------------------------------
 24915                                  
 24916                                  	; 27/10/2022
 24917                                  
 24918                                  ; files = n
 24919                                  
 24920                                  ;files_parms p_parms <files_parmsx>
 24921                                  files_parms:
 24922 00001DAF [B41D]                  	dw	files_parmsx
 24923 00001DB1 01                      	db	1
 24924 00001DB2 01                      	db	1
 24925 00001DB3 3B                      	db	';'
 24926                                  
 24927                                  files_parmsx:
 24928 00001DB4 0101[BA1D]              	dw	101h,files_pos	; min,max 1 positional
 24929 00001DB8 00                      	db	0		; no switches
 24930 00001DB9 00                      	db	0		; no keywords
 24931                                  
 24932                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24933                                  files_pos:
 24934 00001DBA 0080                    	dw	8000h
 24935 00001DBC 0000                    	dw	0
 24936 00001DBE [481D]                  	dw	result_val	
 24937 00001DC0 [C31D]                  	dw	files_range
 24938 00001DC2 00                      	db	0
 24939                                  
 24940                                  ;files_range p_range <,,,8,255>
 24941                                  files_range:
 24942 00001DC3 01                      	db	1
 24943 00001DC4 01                      	db	1
 24944 00001DC5 01                      	db	1
 24945 00001DC6 08000000                	dd	8
 24946 00001DCA FF000000                	dd	255
 24947                                  
 24948                                  p_files:
 24949 00001DCE 00                      	db	0		; local variable
 24950                                  
 24951                                  ;-----------------------------------------------------------------------
 24952                                  
 24953                                  	; 27/10/2022
 24954                                  
 24955                                  ; fcbs = n,m
 24956                                  
 24957                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24958                                  fcbs_parms:
 24959 00001DCF [D41D]                  	dw	fcbs_parmsx
 24960 00001DD1 01                      	db	1
 24961 00001DD2 01                      	db	1
 24962 00001DD3 3B                      	db	';'
 24963                                  
 24964                                  fcbs_parmsx:
 24965 00001DD4 0102[DC1D][F01D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24966 00001DDA 00                      	db	0		; no switches
 24967 00001DDB 00                      	db	0		; no keywords
 24968                                  
 24969                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24970                                  fcbs_pos_1:
 24971 00001DDC 0080                    	dw	8000h
 24972 00001DDE 0000                    	dw	0
 24973 00001DE0 [481D]                  	dw	result_val	
 24974 00001DE2 [E51D]                  	dw	fcbs_range
 24975 00001DE4 00                      	db	0
 24976                                  
 24977                                  ;fcbs_range p_range <,,,1,255>
 24978                                  fcbs_range:
 24979 00001DE5 01                      	db	1
 24980 00001DE6 01                      	db	1
 24981 00001DE7 01                      	db	1
 24982 00001DE8 01000000                	dd	1
 24983 00001DEC FF000000                	dd	255
 24984                                  
 24985                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24986                                  fcbs_pos_2:
 24987 00001DF0 0080                    	dw	8000h
 24988 00001DF2 0000                    	dw	0
 24989 00001DF4 [481D]                  	dw	result_val	
 24990 00001DF6 [F91D]                  	dw	fcbs_keep_range
 24991 00001DF8 00                      	db	0
 24992                                  
 24993                                  ;fcbs_keep_range p_range <,,,0,255>
 24994                                  fcbs_keep_range:
 24995 00001DF9 01                      	db	1
 24996 00001DFA 01                      	db	1
 24997 00001DFB 01                      	db	1
 24998 00001DFC 00000000                	dd	0
 24999 00001E00 FF000000                	dd	255
 25000                                  
 25001 00001E04 00                      p_fcbs:	db	0		; local variable
 25002 00001E05 00                      p_keep:	db	0		; local variable
 25003                                  
 25004                                  ;-----------------------------------------------------------------------
 25005                                  
 25006                                  	; 27/10/2022
 25007                                  
 25008                                  ; lastdrive = x
 25009                                  
 25010                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25011                                  ldrv_parms:
 25012 00001E06 [0B1E]                  	dw	ldrv_parmsx
 25013 00001E08 01                      	db	1
 25014 00001E09 01                      	db	1
 25015 00001E0A 3B                      	db	';'
 25016                                  
 25017                                  ldrv_parmsx:
 25018 00001E0B 0101[111E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25019 00001E0F 00                      	db	0		; no switches
 25020 00001E10 00                      	db	0		; no keywords
 25021                                  
 25022                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25023                                  ldrv_pos:				    ; remove colon at end
 25024 00001E11 1001                    	dw	110h
 25025 00001E13 1000                    	dw	10h
 25026 00001E15 [481D]                  	dw	result_val	
 25027 00001E17 [471D]                  	dw	noval
 25028 00001E19 00                      	db	0
 25029                                  	
 25030 00001E1A 00                      p_ldrv:	db	0		; local variable
 25031                                  
 25032                                  ;-----------------------------------------------------------------------
 25033                                  
 25034                                  	; 27/10/2022
 25035                                  
 25036                                  ; stacks = n,m
 25037                                  
 25038                                  ;stks_parms p_parms <stks_parmsx>
 25039                                  stks_parms:
 25040 00001E1B [201E]                  	dw	stks_parmsx
 25041 00001E1D 01                      	db	1
 25042 00001E1E 01                      	db	1
 25043 00001E1F 3B                      	db	';'
 25044                                  
 25045                                  stks_parmsx:
 25046 00001E20 0202[281E][3C1E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25047 00001E26 00                      	db	0		; no switches
 25048 00001E27 00                      	db	0		; no keywords
 25049                                  
 25050                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25051                                  stks_pos_1:
 25052 00001E28 0080                    	dw	8000h
 25053 00001E2A 0000                    	dw	0
 25054 00001E2C [481D]                  	dw	result_val	
 25055 00001E2E [311E]                  	dw	stks_range
 25056 00001E30 00                      	db	0
 25057                                  
 25058                                  ;stks_range p_range <,,,0,64>
 25059                                  stks_range:
 25060 00001E31 01                      	db	1
 25061 00001E32 01                      	db	1
 25062 00001E33 01                      	db	1
 25063 00001E34 00000000                	dd	0
 25064 00001E38 40000000                	dd	64
 25065                                  
 25066                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25067                                  stks_pos_2:
 25068 00001E3C 0080                    	dw	8000h
 25069 00001E3E 0000                    	dw	0
 25070 00001E40 [481D]                  	dw	result_val	
 25071 00001E42 [451E]                  	dw	stk_size_range
 25072 00001E44 00                      	db	0
 25073                                  
 25074                                  ;stk_size_range p_range <,,,0,512>
 25075                                  stk_size_range:
 25076 00001E45 01                      	db	1
 25077 00001E46 01                      	db	1
 25078 00001E47 01                      	db	1
 25079 00001E48 00000000                	dd	0
 25080 00001E4C 00020000                	dd	512	
 25081                                  
 25082                                  p_stack_count:
 25083 00001E50 0000                    	dw	0	; local variable
 25084                                  p_stack_size:
 25085 00001E52 0000                    	dw	0	; local variable
 25086                                  
 25087                                  ;-----------------------------------------------------------------------
 25088                                  
 25089                                  	; 27/10/2022
 25090                                  
 25091                                  ; multitrack = [ on | off ]
 25092                                  
 25093                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25094                                  mtrk_parms:
 25095 00001E54 [591E]                  	dw	mtrk_parmsx
 25096 00001E56 01                      	db	1
 25097 00001E57 01                      	db	1
 25098 00001E58 3B                      	db	';'
 25099                                  
 25100                                  mtrk_parmsx:
 25101 00001E59 0101[5F1E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25102 00001E5D 00                      	db	0		; no switches
 25103 00001E5E 00                      	db	0		; no keywords
 25104                                  
 25105                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25106                                  mtrk_pos:
 25107 00001E5F 0020                    	dw	2000h
 25108 00001E61 0000                    	dw	0
 25109 00001E63 [481D]                  	dw	result_val	
 25110 00001E65 [641D]                  	dw	on_off_string
 25111 00001E67 00                      	db	0
 25112                                  
 25113 00001E68 00                      p_mtrk:	db	0		; local variable
 25114                                  
 25115                                  ;-----------------------------------------------------------------------
 25116                                  
 25117                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25118                                  	; (SYSINIT:20B2h)
 25119                                  
 25120                                  ; switches=/k
 25121                                  
 25122                                  ;swit_parms p_parms <swit_parmsx>
 25123                                  swit_parms:
 25124 00001E69 [6E1E]                  	dw	swit_parmsx
 25125 00001E6B 01                      	db	1
 25126 00001E6C 01                      	db	1
 25127 00001E6D 3B                      	db	';'
 25128                                  
 25129                                  swit_parmsx:
 25130 00001E6E 0000                    	dw	0		; no positionals
 25131                                  	;db	5               ; # of switches
 25132                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25133 00001E70 03                      	db	3
 25134 00001E71 [781E]                  	dw	swit_k_ctrl	; /k control
 25135                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 25136                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 25137 00001E73 [841E]                  	dw	swit_t_ctrl     ; /t control
 25138 00001E75 [901E]                  	dw	swit_w_ctrl     ; /w control
 25139 00001E77 00                      	db	0		; no keywords
 25140                                  
 25141                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25142                                  swit_k_ctrl:
 25143 00001E78 00000000[481D]-         	dw	0,0,result_val,noval
 25143 00001E7E [471D]             
 25144 00001E80 01                      	db	1
 25145 00001E81 2F4B00                  swit_k:	db	'/K',0
 25146                                  
 25147                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25148                                  ;
 25149                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25150                                  ;swit_n_ctrl:
 25151                                  ;	dw	0,0,result_val,noval
 25152                                  ;	db	1
 25153                                  ;swit_n: db	'/N',0
 25154                                  ;
 25155                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25156                                  ;swit_f_ctrl:
 25157                                  ;	dw	0,0,result_val,noval
 25158                                  ;	db	1
 25159                                  ;swit_f: db 	'/F',0
 25160                                  
 25161                                  	; 27/10/2022
 25162                                  
 25163                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25164                                  swit_t_ctrl:
 25165 00001E84 00000000[481D]-         	dw	0,0,result_val,noval
 25165 00001E8A [471D]             
 25166 00001E8C 01                      	db	1
 25167 00001E8D 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25168                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25169                                  swit_w_ctrl:
 25170 00001E90 00000000[481D]-         	dw	0,0,result_val,noval
 25170 00001E96 [471D]             
 25171 00001E98 01                      	db	1
 25172 00001E99 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25173                                  
 25174                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25175                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25176                                  ;   in the above table to prevent the parsing code from complaining about them
 25177                                  
 25178 00001E9C 00                      p_swit_k:	db     0	; local variable
 25179 00001E9D 00                      p_swit_t:	db     0	; local variable			M059
 25180 00001E9E 00                      p_swit_w:	db     0	; local variable			M063
 25181                                  
 25182                                  ;-----------------------------------------------------------------------
 25183                                  
 25184                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25185                                  	; (SYSINIT:20E8h)
 25186                                  
 25187                                  ; DOS = [ high | low ]
 25188                                  
 25189                                  ;dos_parms p_parms  <dos_parmsx>
 25190                                  dos_parms:
 25191 00001E9F [A41E]                  	dw	dos_parmsx
 25192 00001EA1 01                      	db	1
 25193 00001EA2 01                      	db	1
 25194 00001EA3 3B                      	db	';'
 25195                                  dos_parmsx:
 25196 00001EA4 01                      	db	1		; min parameters
 25197 00001EA5 02                      	db	2		; max parameters
 25198 00001EA6 [AC1E]                  	dw	dos_pos		; 
 25199 00001EA8 [AC1E]                  	dw	dos_pos		; 
 25200 00001EAA 00                      	db	0		; no switches
 25201 00001EAB 00                      	db	0		; no keywords
 25202                                  
 25203                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25204                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25205                                  dos_pos:
 25206 00001EAC 00200000[481D]-         	dw	2000h,0,result_val,dos_strings
 25206 00001EB2 [BE1E]             
 25207 00001EB4 00                      	db	0
 25208 00001EB5 00200000[481D]-         	dw	2000h,0,result_val,dos_strings
 25208 00001EBB [BE1E]             
 25209 00001EBD 00                      	db	0	
 25210                                  
 25211                                  dos_strings:	;label	byte
 25212 00001EBE 03                      	db	3		; signals that there is a string choice
 25213 00001EBF 00                      	db	0		; no range definition
 25214 00001EC0 00                      	db	0		; no numeric values choice
 25215 00001EC1 04                      	db	4		; 4 strings for choice
 25216 00001EC2 01                      	db	1		; the 1st string tag
 25217 00001EC3 [CE1E]                  	dw	hi_string
 25218 00001EC5 02                      	db	2		; the 2nd string tag
 25219 00001EC6 [D31E]                  	dw	lo_string
 25220 00001EC8 03                      	db	3
 25221 00001EC9 [D71E]                  	dw	umb_string
 25222 00001ECB 04                      	db	4
 25223 00001ECC [DB1E]                  	dw	noumb_string
 25224                                  
 25225 00001ECE 4849474800              hi_string:	db	"HIGH",0
 25226 00001ED3 4C4F5700                lo_string:	db	"LOW",0
 25227 00001ED7 554D4200                umb_string:	db	"UMB",0
 25228 00001EDB 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25229                                  
 25230 00001EE1 00                      p_dos_hi:	db	0	; local variable
 25231                                  				; BUGBUG : I dont know whether PARSER uses
 25232                                  				;          this variable or not
 25233                                  
 25234                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25235                                  
 25236                                  %if 0
 25237                                  
 25238                                  ;****************************************************************** RICHID ****
 25239                                  
 25240                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25241                                  
 25242                                  ; 30/03/2019 - Retro DOS v4.0
 25243                                  ;------------------------------------------------------------------------------
 25244                                  
 25245                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25246                                  ;
 25247                                  ;   Date:     May 14, 1992
 25248                                  ;
 25249                                  ;******************************************************************************
 25250                                  ;
 25251                                  ;   Modification log:
 25252                                  ;
 25253                                  ;     DATE    WHO      DESCRIPTION
 25254                                  ;   --------  -------  --------------------------------------------------------
 25255                                  ;   05/14/92  t-richj  Original
 25256                                  ;   06/21/92  t-richj  Final revisions before check-in
 25257                                  ;
 25258                                  ;******************************************************************************
 25259                                  ;
 25260                                  ; There are two primary definitions which need to be made, selectively, before
 25261                                  ; this include file should be used.  These are:
 25262                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25263                                  ;                declared as external.  Otherwise, variables will be declared
 25264                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25265                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25266                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25267                                  ;                (as only one module, sysconf.asm, includes this file).
 25268                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25269                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25270                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25271                                  ;
 25272                                  ;******************************************************************************
 25273                                  
 25274                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25275                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25276                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25277                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25278                                  ; space problem (it's just such a nice round number, eh?).
 25279                                  
 25280                                  MAXUMB	equ	16
 25281                                  
 25282                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25283                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25284                                  
 25285                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25286                                  SystemPSPOwner	equ	8
 25287                                  ;JapanPSPOwner	equ	9
 25288                                  
 25289                                  ; for LoadHigh and DeviceHigh:
 25290                                  ;
 25291                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25292                                  ;	          UnHideUMBs().
 25293                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25294                                  ;	           line.
 25295                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25296                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25297                                  ;	          given a command-line like "/L:3,500;4"
 25298                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25299                                  ;	          matching its index number was specified on the command-line;
 25300                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25301                                  ;	          will be set to 1.  All others will be set to 0.
 25302                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25303                                  ;	          specified by the user for a UMB (in the above example, all
 25304                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25305                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25306                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25307                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25308                                  ;	           for details).
 25309                                  
 25310                                  fInHigh:  db	0
 25311                                  fUmbTiny: db	0
 25312                                  SegLoad:  dw	0
 25313                                  UmbLoad:  db	0
 25314                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25315                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25316                                  fm_umb:   db	0
 25317                                  fm_strat: db	0
 25318                                  fm_argc:  db	0	
 25319                                  
 25320                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25321                                  ; UmbLoad is set to the UMB number given.
 25322                                  
 25323                                  UNSPECIFIED	equ	-1
 25324                                  
 25325                                  %endif
 25326                                  
 25327                                  ;****************************************************************** RICHID ****
 25328                                  
 25329                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25330                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25331                                  
 25332                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25333                                  ; (SYSINIT:212Bh)	
 25334                                  
 25335                                  		;public	DevEntry
 25336                                  
 25337 00001EE2 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25338 00001EE4 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25339 00001EE6 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25340 00001EE8 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25341 00001EEC 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25342                                  ; 27/10/2022 
 25343                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25344                                  ;
 25345 00001EF0 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25346 00001EF1 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25347 00001EF3 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25348 00001EF5 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25349                                  ;
 25350 00001EF7 00000000                DevXMSAddr:	dd	0
 25351                                  ;
 25352 00001EFB 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25353 00001EFD 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25354                                  ;
 25355 00001EFF 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25356                                  				;  is being loaded into UMB
 25357 00001F00 0000                    DevSizeOption:	dw	0	; SIZE= option
 25358                                  ;
 25359 00001F02 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25360 00001F03 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25361 00001F05 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25362                                  ;
 25363 00001F0D 00                      FirstUMBLinked:	db	0
 25364 00001F0E 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25365 00001F10 00000000                DevCmdLine:	dd	0	; Current Command line
 25366 00001F14 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25367                                  				; to use the file name in the command line
 25368                                  ;
 25369                                  ;	ifdef	dblspace_hooks
 25370                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25371                                  ;	endif
 25372                                  
 25373                                  ; ===========================================================================
 25374                                  
 25375                                  ; 31/03/2019 - Retro DOS v4.0
 25376                                  
 25377                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25378                                  ; (SYSINIT:215Eh)
 25379                                  
 25380                                  ;----------------------------------------------------------------------------
 25381                                  ;
 25382                                  ; procedure : doconf
 25383                                  ;
 25384                                  ;             Config file is parsed initially with this routine. For the
 25385                                  ;             Subsequent passes 'multi_pass' entry is used .
 25386                                  ;
 25387                                  ;----------------------------------------------------------------------------
 25388                                  
 25389                                  	; 27/10/2022
 25390                                  doconf:
 25391 00001F15 0E                      	push	cs
 25392 00001F16 1F                      	pop	ds
 25393                                  
 25394 00001F17 B80037                  	mov	ax,3700h
 25395                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25396 00001F1A CD21                    	int	21h
 25397 00001F1C 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25398                                  
 25399                                  ; 27/10/2022
 25400                                  ;;ifdef	MULTI_CONFIG
 25401                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25402                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25403                                  ;;endif	;MULTI_CONFIG
 25404                                  
 25405 00001F20 BA[FC33]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25406 00001F23 B8003D                  	mov	ax,3D00h
 25407                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25408 00001F26 F9                      	stc				;in case of int 24
 25409 00001F27 CD21                    	int	21h			;function request
 25410 00001F29 7306                    	jnc	short noprob		; brif opened okay
 25411                                  
 25412                                  ; 27/10/2022
 25413                                  ;;ifdef	MULTI_CONFIG
 25414                                  ;      	call	kbd_read		; we still want to give the guy
 25415                                  ;					; a chance to select clean boot!
 25416                                  ;;endif					; (ie, no autoexec.bat processing)
 25417 00001F2B C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25418 00001F30 C3                      	retn
 25419                                  noprob: 				;get file size (note < 64k!!)
 25420 00001F31 89C3                    	mov	bx,ax  ; File handle
 25421 00001F33 31C9                    	xor	cx,cx
 25422 00001F35 31D2                    	xor	dx,dx
 25423                                  	;mov	ax,4202h
 25424 00001F37 B80242                  	mov	ax,(LSEEK<<8)|2
 25425 00001F3A CD21                    	int	21h
 25426 00001F3C A3[D203]                	mov	[count],ax
 25427                                  
 25428 00001F3F 31D2                    	xor	dx,dx
 25429                                  	;mov	ax,4200h
 25430 00001F41 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25431 00001F44 CD21                    	int	21h
 25432                                  
 25433                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25434                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25435 00001F46 8B16[A102]              	mov	dx,[top_of_cdss] 
 25436                                  
 25437 00001F4A A1[D203]                	mov	ax,[count]
 25438 00001F4D A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25439 00001F50 E866F1                  	call	ParaRound
 25440 00001F53 29C2                    	sub	dx,ax
 25441                                  
 25442                                  ; 27/10/2022
 25443                                  ;;ifdef	MULTI_CONFIG
 25444                                  ;;
 25445                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25446                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25447                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25448                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25449                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25450                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25451                                  ;;  of extra space, so here we account for it (the worst case of course is
 25452                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25453                                  ;;
 25454                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25455                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25456                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25457                                  ;;endif	;MULTI_CONFIG
 25458                                  
 25459 00001F55 83EA11                  	sub	dx,11h			;room for header
 25460                                  	
 25461                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25462                                  	;mov	[CONFBOT],dx
 25463                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25464 00001F58 8916[A102]              	mov	[top_of_cdss],dx
 25465 00001F5C E870EC                  	call    TempCDS 
 25466                                  	; 11/12/2022
 25467                                  	; ds <> cs 
 25468 00001F5F 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25469                                   
 25470 00001F64 8EDA                    	mov	ds,dx
 25471 00001F66 8EC2                    	mov	es,dx
 25472                                  
 25473 00001F68 31D2                    	xor	dx,dx
 25474 00001F6A 2E8B0E[D203]            	mov	cx,[cs:count]
 25475 00001F6F B43F                    	mov	ah,3Fh
 25476                                  	;mov	ah,READ  ; 3Fh
 25477 00001F71 F9                      	stc				;in case of int 24
 25478 00001F72 CD21                    	int	21h			;function request
 25479 00001F74 9C                      	pushf
 25480                                  
 25481                                  ; find the eof mark in the file. if present,then trim length.
 25482                                  
 25483 00001F75 50                      	push	ax
 25484 00001F76 57                      	push	di
 25485 00001F77 51                      	push	cx
 25486 00001F78 B01A                    	mov	al,1Ah			; eof mark
 25487 00001F7A 89D7                    	mov	di,dx			; point to buffer
 25488 00001F7C E305                    	jcxz	puteol			; no chars
 25489 00001F7E F2AE                    	repnz	scasb			; find end
 25490 00001F80 7501                    	jnz	short puteol		; none found and count exhausted
 25491                                  
 25492                                  ; we found a 1a. back up
 25493                                  
 25494 00001F82 4F                      	dec	di			; backup past 1Ah
 25495                                  
 25496                                  ;  just for the halibut, stick in an extra eol
 25497                                  
 25498                                  puteol:
 25499 00001F83 B00D                    	mov	al,cr ; 0Dh
 25500 00001F85 AA                      	stosb
 25501 00001F86 B00A                    	mov	al,lf  ;0Ah
 25502 00001F88 AA                      	stosb
 25503 00001F89 29D7                    	sub	di,dx			; difference moved
 25504                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25505                                  	;mov	[cs:count],di		; new count
 25506                                  
 25507                                  	; 11/12/2022	
 25508                                  	; 31/03/2019 - Retro DOS v4.0
 25509 00001F8B 0E                      	push	cs
 25510 00001F8C 1F                      	pop	ds
 25511                                  
 25512 00001F8D 893E[D203]              	mov	[count],di		; new count
 25513                                  
 25514 00001F91 59                      	pop	cx
 25515 00001F92 5F                      	pop	di
 25516 00001F93 58                      	pop	ax
 25517                                  
 25518                                  	; 11/12/2022
 25519                                  	; 27/10/2022
 25520                                  	;push	cs
 25521                                  	;pop	ds
 25522                                  
 25523 00001F94 50                      	push	ax
 25524                                  	;mov	ah,CLOSE
 25525 00001F95 B43E                    	mov	ah,3Eh
 25526 00001F97 CD21                    	int	21h
 25527 00001F99 58                      	pop	ax
 25528 00001F9A 9D                      	popf
 25529 00001F9B 7204                    	jc	short conferr 		;if not we've got a problem
 25530 00001F9D 39C1                    	cmp	cx,ax
 25531 00001F9F 742C                    	jz	short getcom		;couldn't read the file
 25532                                  conferr:
 25533 00001FA1 BA[FC33]                	mov	dx,config		;want to print config error
 25534 00001FA4 E8AC13                  	call	badfil
 25535                                  endconv:
 25536 00001FA7 C3                      	retn
 25537                                  
 25538                                  ;----------------------------------------------------------------------------
 25539                                  ;
 25540                                  ; entry : multi_pass
 25541                                  ;
 25542                                  ;             called to execute device=,install= commands
 25543                                  ;
 25544                                  ;----------------------------------------------------------------------------
 25545                                  
 25546                                  	; 27/10/2022
 25547                                  multi_pass:
 25548 00001FA8 0E                      	push	cs
 25549 00001FA9 1F                      	pop	ds
 25550                                  
 25551 00001FAA 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25552                                  ;jae_endconv:
 25553 00001FAF 73F6                    	jae	short endconv 		; do nothing. just return.
 25554                                  
 25555                                  	;push	word [CONFBOT]
 25556                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25557 00001FB1 FF36[A102]              	push	word [top_of_cdss]
 25558 00001FB5 07                      	pop	es			; es -> confbot
 25559                                  
 25560 00001FB6 8B36[D403]              	mov	si,[org_count]
 25561 00001FBA 8936[D203]              	mov	[count],si		; set count
 25562 00001FBE 31F6                    	xor	si,si ; 0
 25563 00001FC0 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25564 00001FC4 8936[2B03]                      mov     [linecount],si		; reset linecount
 25565                                  
 25566 00001FC8 E86807                  	call	getchr
 25567 00001FCB EB06                    	jmp	short conflp
 25568                                  
 25569                                  getcom:
 25570 00001FCD E8B10E                          call    organize                ; organize the file
 25571 00001FD0 E86007                  	call	getchr
 25572                                  conflp: 
 25573 00001FD3 72D2                    	jc	short endconv
 25574                                  
 25575 00001FD5 FF06[2B03]                      inc     word [linecount]	; increase linecount
 25576                                  
 25577 00001FD9 C606[2B14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25578 00001FDE C606[2E14]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25579 00001FE3 3C0A                    	cmp	al,lf			; linefeed?
 25580 00001FE5 7416                    	je	short blank_line	;  then ignore this line.
 25581                                  
 25582                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25583                                  %if 0
 25584                                  
 25585                                  ;ifdef	MULTI_CONFIG
 25586                                  
 25587                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25588                                  ;   number immediately following it....
 25589                                  
 25590                                          mov     [config_cmd],al         ; save original command code
 25591                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25592                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25593                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25594                                          je      short not_final		; no, line number is not embedded
 25595                                  
 25596                                          push    ax                      ;
 25597                                          call    getchr                  ; ignore end-of-image errors,
 25598                                          mov     ah,al                   ; because if there's an error
 25599                                          call    getchr                  ; fetching the line number that's
 25600                                          xchg    al,ah                   ; supposed to be there, the next
 25601                                          mov     [linecount],ax          ; getchr call will get the same error
 25602                                          pop     ax
 25603                                  ;
 25604                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25605                                  ;   which to obtain its original program name, it grovels through all of
 25606                                  ;   memory to find the filename that was used to exec it; it wants to find
 25607                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25608                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25609                                  ;   immediately before the filename, but since we are now storing line # info
 25610                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25611                                  ;   spot.
 25612                                  ;
 25613                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25614                                  ;   over the line number info, since we no longer need that info anyway. This
 25615                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25616                                  ;   retrieved.
 25617                                  ;
 25618                                          cmp	byte [multi_pass_id],2	; final pass?
 25619                                          jb	short not_final		; no
 25620                                          ;test	word [install_flag],have_install_cmd
 25621                                  	test	byte [install_flag],have_install_cmd ; 1
 25622                                          jz	short final		; no install cmds, so yes it is
 25623                                          cmp	byte [multi_pass_id],3	; final pass?
 25624                                          jb	short not_final		; no
 25625                                  final:                                  ;
 25626                                  	mov	[es:si],al		; save backward-compatible command code
 25627                                  not_final:                              ;
 25628                                  ;endif
 25629                                  
 25630                                  %endif
 25631 00001FE7 88C4                    	mov	ah,al
 25632 00001FE9 E84707                  	call	getchr
 25633 00001FEC 7314                    	jnc	short tryi
 25634                                  
 25635 00001FEE 803E[4903]02            	cmp	byte [multi_pass_id],2
 25636                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25637                                  	; 27/10/2022
 25638 00001FF3 73B2                    	jnb	short endconv	
 25639 00001FF5 E90707                  	jmp	badop
 25640                                  	
 25641                                  coff:	
 25642                                  	; 11/12/2022
 25643                                  	; ds = cs
 25644                                  	;push	cs
 25645                                  	;pop	ds
 25646 00001FF8 E89D10                  	call	newline
 25647 00001FFB EBD6                    	jmp	short conflp	; 13/05/2019
 25648                                  
 25649                                  blank_line:
 25650 00001FFD E83307                  	call	getchr
 25651 00002000 EBD1                    	jmp	short conflp
 25652                                  
 25653                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25654                                  ; 11/12/2022
 25655                                  ; (there is not a jump or call to here from anywhere!)
 25656                                  ;coff_p:
 25657                                  	;push	cs
 25658                                  	;pop	ds
 25659                                  
 25660                                  ;to handle install= commands,we are going to use multi-pass.
 25661                                  ;the first pass handles the other commands and only set install_flag when
 25662                                  ;it finds any install command. the second pass will only handle the
 25663                                  ;install= command.
 25664                                  
 25665                                  ;------------------------------------------------------------------------------
 25666                                  ;install command
 25667                                  ;------------------------------------------------------------------------------
 25668                                  
 25669                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25670                                  	; (SYSINIT:2250h)
 25671                                  tryi:
 25672 00002002 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25673 00002007 7503                    	jne	short not_init_pass
 25674 00002009 E92301                  	jmp	multi_try_doshi
 25675                                  not_init_pass:
 25676 0000200C 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25677                                          ; 11/12/2022
 25678                                  	;je	short multi_pass_coff2	; now it is NOPs
 25679 00002011 74E5                    	je	short coff
 25680                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25681                                  	;je	short multi_pass_coff	
 25682                                  					; This pass can be made use of if
 25683                                  					; we want do some config.sys process
 25684                                  					; after device drivers are loaded
 25685                                  					; and before install= commands
 25686                                  					; are processed
 25687                                  
 25688 00002013 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25689 00002018 7411                    	je	short multi_try_i
 25690 0000201A 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25691                                  	; 11/12/2022
 25692                                  	;je	short multi_pass_coff2
 25693 0000201D 74D9                    	je	short coff
 25694                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25695                                  	;je	short multi_pass_coff	
 25696                                  
 25697                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25698                                  ;       but don't process them now.        
 25699                                          
 25700 0000201F 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25701                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25702                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25703 00002022 752A                    	jne	short tryb	
 25704                                  	
 25705                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25706 00002024 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25707                                  multi_pass_coff2:
 25708 00002029 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25709                                  
 25710                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25711                                  ;precheck_installhigh:
 25712                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25713                                  ;       jne     short tryb		; carry on with normal processing
 25714                                  ;	;or	word [install_flag],have_install_cmd
 25715                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25716                                  ;       jmp	short coff
 25717                                  
 25718                                  multi_try_i:
 25719 0000202B 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25720                                  	;jne	short multi_try_n	; no, check for installhigh
 25721                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25722 0000202E 7505                    	jne	short multi_pass_filter
 25723                                  
 25724                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25725                                  ;;ifdef	MULTI_CONFIG
 25726                                  ;       call    query_user              ; query the user if config_cmd
 25727                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25728                                  ;;endif
 25729                                  
 25730 00002030 E806F0                  	call	do_install_exec 	;install it.
 25731 00002033 EBC3                    	jmp	short coff		;to handle next install= command.
 25732                                  
 25733                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25734                                  %if 0
 25735                                  
 25736                                  multi_try_n:
 25737                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25738                                          jne	short multi_pass_filter	; no. ignore this.
 25739                                  ;ifdef	MULTI_CONFIG
 25740                                          call    query_user              ; query the user if config_cmd
 25741                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25742                                  ;endif
 25743                                  
 25744                                  ;       The memory environment is in its normal DOS state, so do
 25745                                  ;       the standard calls to set the alloc strategy for loading high
 25746                                  
 25747                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25748                                  	int	21h			;get alloc strategy
 25749                                  	mov	bx,ax
 25750                                          push    bx                      ; save for the return
 25751                                  
 25752                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25753                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25754                                  	int	21h			;set alloc strategy
 25755                                  
 25756                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25757                                          int     21h                     ; get link state
 25758                                          xor     ah,ah                   ; clear top byte
 25759                                          push    ax                      ; save for return
 25760                                  
 25761                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25762                                  	mov	bx,1
 25763                                  	int	21h			;link in UMBs
 25764                                  
 25765                                  	call	do_install_exec 	;install it.
 25766                                  
 25767                                          mov     ax,(ALLOCOPER<<8)|3
 25768                                          pop     bx                      ; recover original link state
 25769                                          int     21h
 25770                                          pop     bx                      ; recover original alloc strategy
 25771                                          mov     ax,(ALLOCOPER<<8)|1
 25772                                          int     21h
 25773                                  
 25774                                  	jmp	coff			;to handle next install= command.
 25775                                  
 25776                                  %endif
 25777                                  
 25778                                  multi_pass_filter:
 25779 00002035 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25780 00002038 740A                    	je	short multi_pass_adjust
 25781 0000203A 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25782 0000203D 7405                    	je	short multi_pass_adjust
 25783 0000203F 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25784 00002042 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25785                                  
 25786                                  multi_pass_adjust:			; these commands need to
 25787 00002044 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25788 00002048 FF06[D203]              	inc	word [count]		;  for newline proc.
 25789                                  
 25790                                  multi_pass_coff:
 25791                                  	; 11/12/2022
 25792 0000204C EBAA                    	jmp	short coff		; to handle next install= commands.
 25793                                  
 25794                                  ;------------------------------------------------------------------------------
 25795                                  ; buffer command
 25796                                  ;------------------------------------------------------------------------------
 25797                                  
 25798                                  ;******************************************************************************
 25799                                  ;									      *
 25800                                  ; function: parse the parameters of buffers= command.			      *
 25801                                  ;									      *
 25802                                  ; input :								      *
 25803                                  ;	es:si -> parameters in command line.				      *
 25804                                  ; output:								      *
 25805                                  ;	buffers set							      *
 25806                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25807                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25808                                  ;									      *
 25809                                  ; subroutines to be called:						      *
 25810                                  ;	sysinit_parse							      *
 25811                                  ; logic:								      *
 25812                                  ; {									      *
 25813                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25814                                  ;	set dx,cx to 0; 						      *
 25815                                  ;	reset buffer_slash_x;						      *
 25816                                  ;	while (end of command line)					      *
 25817                                  ;	{ sysinit_parse;						      *
 25818                                  ;	  if (no error) then						      *
 25819                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25820                                  ;		    buffer_slash_x = 1					      *
 25821                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25822                                  ;			  buffers = result_val._$P_picked_val;		      *
 25823                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25824                                  ;	  else	{show error message;error exit} 			      *
 25825                                  ;	};								      *
 25826                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25827                                  ; };									      *
 25828                                  ;									      *
 25829                                  ;******************************************************************************
 25830                                  
 25831                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25832                                  	; (SYSINIT:229Ch)
 25833                                  tryb:
 25834 0000204E 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25835 00002051 7557                    	jne	short tryc
 25836                                  
 25837                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25838                                  ;;ifdef	MULTI_CONFIG
 25839                                  ;       call    query_user              ; query the user if config_cmd
 25840                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25841                                  ;;endif
 25842                                  
 25843                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25844                                  	; 18/12/2022
 25845 00002053 31C9                    	xor	cx,cx
 25846                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25847 00002055 880E[461D]              	mov	[p_buffer_slash_x],cl ; 0
 25848                                  
 25849 00002059 BF[FF1C]                	mov	di,buf_parms
 25850                                  	;xor	cx,cx	; 18/12/2022
 25851                                  	; 04/01/2023
 25852                                  	;mov	dx,cx
 25853                                  do7:
 25854 0000205C E87D06                  	call	sysinit_parse
 25855 0000205F 7303                    	jnc	short if7		; parse error,
 25856                                  	; 04/01/2023
 25857                                  	;call	badparm_p		;  and show messages and end the search loop.
 25858                                  	;;jmp	short sr7
 25859                                  	; 31/12/2022
 25860                                  ;sr7:
 25861                                  	;jmp	coff
 25862                                  	; 04/01/2023
 25863 00002061 E9F605                  	jmp	badparm_p_coff
 25864                                  if7:
 25865 00002064 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25866 00002067 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25867                                  	;cmp	word [result_val_swoff],switch_x
 25868 00002069 813E[4A1D][3F1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25869                                  	;jne	short if11
 25870                                  	; 31/12/2022
 25871 0000206F 74EB                    	je	short do7 ;je short en11
 25872                                  
 25873                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25874                                  	;jmp	short en11 ; 31/12/2022
 25875                                  if11:
 25876                                  	;mov	ax,[rv_dword]
 25877 00002071 A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25878 00002074 83F901                  	cmp	cx,1
 25879 00002077 7505                    	jne	short if13
 25880                                  
 25881 00002079 A3[421D]                	mov	[p_buffers],ax
 25882                                  	;jmp	short en11
 25883                                  	; 31/12/2022
 25884 0000207C EBDE                    	jmp	short do7
 25885                                  if13:
 25886 0000207E A3[441D]                	mov	[p_h_buffers],ax
 25887                                  en11:
 25888 00002081 EBD9                    	jmp	short do7
 25889                                  en7:
 25890 00002083 833E[421D]63            	cmp	word [p_buffers],99
 25891 00002088 760B                    	jbe	short if18
 25892                                  
 25893                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25894                                  ;	jne	short if18
 25895                                  
 25896 0000208A E87E06                  	call	badparm_p
 25897 0000208D C706[441D]0000          	mov	word [p_h_buffers],0
 25898 00002093 EB12                    	jmp	short sr7
 25899                                  if18:
 25900 00002095 A1[421D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25901 00002098 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25902                                  
 25903 0000209B A1[441D]                	mov	ax,[p_h_buffers]
 25904 0000209E A3[9902]                	mov	[h_buffers],ax
 25905                                  
 25906                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25907                                  ;	mov	[buffer_slash_x],al
 25908                                  
 25909 000020A1 A1[2B03]                	mov	ax,[linecount]
 25910 000020A4 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25911                                  	; 31/12/2022
 25912                                  	;jmp	short sr7
 25913                                  	; 04/01/2023
 25914                                  sr7:
 25915 000020A7 E94EFF                  	jmp	coff
 25916                                  
 25917                                  ;------------------------------------------------------------------------------
 25918                                  ; break command
 25919                                  ;------------------------------------------------------------------------------
 25920                                  
 25921                                  ;****************************************************************************
 25922                                  ;									    *
 25923                                  ; function: parse the parameters of break = command.			    *
 25924                                  ;									    *
 25925                                  ; input :								    *
 25926                                  ;	es:si -> parameters in command line.				    *
 25927                                  ; output:								    *
 25928                                  ;	turn the control-c check on or off.				    *
 25929                                  ;									    *
 25930                                  ; subroutines to be called:						    *
 25931                                  ;	sysinit_parse							    *
 25932                                  ; logic:								    *
 25933                                  ; {									    *
 25934                                  ;	set di to brk_parms;						    *
 25935                                  ;	set dx,cx to 0; 						    *
 25936                                  ;	while (end of command line)					    *
 25937                                  ;	{ sysinit_parse;						    *
 25938                                  ;	  if (no error) then						    *
 25939                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25940                                  ;		   set p_ctrl_break,on;					    *
 25941                                  ;	       else					  /*off 	 */ *
 25942                                  ;		   set p_ctrl_break,off;				    *
 25943                                  ;	  else {show message;error_exit};				    *
 25944                                  ;	};								    *
 25945                                  ;	if (no error) then						    *
 25946                                  ;	   dos function call to set ctrl_break check according to	    *
 25947                                  ; };									    *
 25948                                  ;									    *
 25949                                  ;****************************************************************************
 25950                                  
 25951                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25952                                  	; (SYSINIT:22FFh)
 25953                                  tryc:
 25954 000020AA 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25955 000020AD 7534                    	jne	short trym
 25956                                  
 25957                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25958                                  ;;ifdef MULTI_CONFIG
 25959                                  ;       call    query_user              ; query the user if config_cmd
 25960                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25961                                  ;;endif
 25962 000020AF BF[501D]                	mov	di,brk_parms
 25963 000020B2 31C9                    	xor	cx,cx
 25964                                  	; 04/01/2023
 25965                                  	;mov	dx,cx
 25966                                  do22:
 25967 000020B4 E82506                  	call	sysinit_parse
 25968 000020B7 7303                    	jnc	short if22		; parse error
 25969                                  	;call	badparm_p		;  show message and end the search loop.
 25970                                  	;;jmp	short sr22
 25971                                  	; 31/12/2022
 25972                                  ;sr22:
 25973                                  	;jmp	coff
 25974                                  	; 04/01/2023
 25975 000020B9 E99E05                  	jmp	badparm_p_coff
 25976                                  if22:
 25977 000020BC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25978 000020BF 7415                    	je	short en22		; then end the $endloop
 25979                                  
 25980                                  	;cmp	byte [result_val_itag],1
 25981 000020C1 803E[491D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25982 000020C6 7507                    	jne	short if26
 25983                                  
 25984 000020C8 C606[751D]01            	mov	byte [p_ctrl_break],1	; turn it on
 25985                                  	;jmp	short en26
 25986                                  	; 31/12/2022
 25987 000020CD EBE5                    	jmp	short do22
 25988                                  if26:
 25989 000020CF C606[751D]00            	mov	byte [p_ctrl_break],0	; turn it off
 25990                                  en26:
 25991 000020D4 EBDE                    	jmp	short do22		; we actually set the ctrl break
 25992                                  en22:
 25993 000020D6 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25994 000020D8 B001                    	mov	al,1
 25995 000020DA 8A16[751D]              	mov	dl,[p_ctrl_break]
 25996 000020DE CD21                    	int	21h
 25997                                  	; 31/12/2022
 25998                                  	;jmp	short sr22
 25999                                  	; 04/01/2023
 26000                                  sr22:
 26001 000020E0 E915FF                  	jmp	coff
 26002                                  
 26003                                  ;------------------------------------------------------------------------------
 26004                                  ; multitrack command
 26005                                  ;------------------------------------------------------------------------------
 26006                                  
 26007                                  ;******************************************************************************
 26008                                  ;									      *
 26009                                  ; function: parse the parameters of multitrack= command.		      *
 26010                                  ;									      *
 26011                                  ; input :								      *
 26012                                  ;	es:si -> parameters in command line.				      *
 26013                                  ; output:								      *
 26014                                  ;	turn multrk_flag on or off.					      *
 26015                                  ;									      *
 26016                                  ; subroutines to be called:						      *
 26017                                  ;	sysinit_parse							      *
 26018                                  ; logic:								      *
 26019                                  ; {									      *
 26020                                  ;	set di to brk_parms;						      *
 26021                                  ;	set dx,cx to 0; 						      *
 26022                                  ;	while (end of command line)					      *
 26023                                  ;	{ sysinit_parse;						      *
 26024                                  ;	  if (no error) then						      *
 26025                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26026                                  ;		   set p_mtrk,on;					      *
 26027                                  ;	       else					  /*off 	 */   *
 26028                                  ;		   set p_mtrk,off;					      *
 26029                                  ;	  else {show message;error_exit};				      *
 26030                                  ;	};								      *
 26031                                  ;	if (no error) then						      *
 26032                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26033                                  ;									      *
 26034                                  ; };									      *
 26035                                  ;									      *
 26036                                  ;******************************************************************************
 26037                                  
 26038                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26039                                  trym:
 26040 000020E3 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26041 000020E6 7569                    	jne	short tryu
 26042                                  
 26043                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26044                                  ;;ifdef	MULTI_CONFIG
 26045                                  ;       call    query_user      ; query the user if config_cmd
 26046                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 26047                                  ;;endif
 26048 000020E8 BF[541E]                	mov	di,mtrk_parms
 26049 000020EB 31C9                    	xor	cx,cx
 26050                                  	; 04/01/2023
 26051                                  	;mov	dx,cx
 26052                                  do31:
 26053 000020ED E8EC05                  	call	sysinit_parse
 26054 000020F0 7303                    	jnc	short if31	; parse error
 26055                                  	;call	badparm_p	;  show message and end the search loop.
 26056                                  	;;jmp	short sr31
 26057                                  	; 31/12/2022
 26058                                  ;sr31:
 26059                                  	;jmp	coff
 26060                                  	; 04/01/2023
 26061 000020F2 E96505                  	jmp	badparm_p_coff
 26062                                  if31:
 26063 000020F5 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26064 000020F8 7415                    	je	short en31	; then end the $endloop
 26065                                  
 26066                                  	;cmp	byte [result_val_itag],1
 26067 000020FA 803E[491D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26068 000020FF 7507                    	jne	short if35
 26069                                  
 26070 00002101 C606[681E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26071                                  	;jmp	short en35
 26072                                  	; 31/12/2022
 26073 00002106 EBE5                    	jmp	short do31
 26074                                  if35:
 26075 00002108 C606[681E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26076                                  en35:
 26077 0000210D EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26078                                  en31:
 26079 0000210F 1E                      	push	ds
 26080                                  	;;mov	ax,Bios_Data ; 70h
 26081                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26082                                  	; 21/10/2022
 26083 00002110 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26084 00002113 8ED8                    	mov	ds,ax
 26085                                  
 26086 00002115 2E803E[681E]00          	cmp	byte [cs:p_mtrk],0
 26087 0000211B 7508                    	jne	short if39
 26088                                  
 26089 0000211D C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26090 00002123 EB06                    	jmp	short en39
 26091                                  if39:
 26092 00002125 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26093                                  en39:
 26094 0000212B 1F                      	pop	ds
 26095                                  	; 31/12/2022
 26096                                  	;jmp	short sr31
 26097                                  	; 04/01/2023
 26098                                  sr31:
 26099 0000212C E9C9FE                  	jmp	coff
 26100                                  
 26101                                  ;----------------------------------------------------------------------------
 26102                                  ; DOS=HIGH/LOW command
 26103                                  ;----------------------------------------------------------------------------
 26104                                  
 26105                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26106                                  multi_try_doshi:
 26107 0000212F 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26108 00002132 7403                    	je	short it_is_h
 26109                                  skip_it:
 26110 00002134 E9FEFE                  	jmp	multi_pass_filter
 26111                                  it_is_h:				; M003 - removed initing DevUMB
 26112                                  					;	 & runhigh
 26113                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26114                                  ;;ifdef	MULTI_CONFIG
 26115                                  ;       call    query_user              ; query the user if config_cmd
 26116                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26117                                  ;;endif
 26118 00002137 BF[9F1E]                	mov	di,dos_parms
 26119 0000213A 31C9                    	xor	cx,cx
 26120                                  	; 04/01/2023
 26121                                  	;mov	dx,cx
 26122                                  h_do_parse:
 26123 0000213C E89D05                  	call	sysinit_parse
 26124 0000213F 7303                    	jnc	short h_parse_ok	; parse error
 26125                                  h_badparm:
 26126                                  	; 04/01/2023
 26127                                  	;call	badparm_p		; show message and end the search loop.
 26128                                  	;;jmp	short h_end
 26129                                  	; 11/12/2022
 26130                                  ;h_end:
 26131                                  	;jmp	coff
 26132                                  	; 04/01/2023
 26133 00002141 E91605                  	jmp	badparm_p_coff	
 26134                                  h_parse_ok:
 26135 00002144 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26136 00002147 7405                    	je	short h_end		; then end the $endloop
 26137 00002149 E82D06                  	call	ProcDOS
 26138 0000214C EBEE                    	jmp	short h_do_parse
 26139                                  	; 11/12/2022
 26140                                  	; 04/01/2023
 26141                                  h_end:
 26142 0000214E E9A7FE                  	jmp	coff
 26143                                  
 26144                                  ;-----------------------------------------------------------------------------
 26145                                  ; devicehigh command
 26146                                  ;-----------------------------------------------------------------------------
 26147                                  
 26148                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26149                                  tryu:
 26150 00002151 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26151 00002154 7539                    	jne	short tryd
 26152                                  
 26153                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26154                                  ;;ifdef	MULTI_CONFIG
 26155                                  ;       call    query_user              ; query the user if config_cmd
 26156                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26157                                  ;;endif
 26158                                  
 26159                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26160                                  ;	call	InitVar
 26161                                  ;	call	ParseSize		; process the size= option
 26162                                  ;	;jnc	short tryu_0
 26163                                  	
 26164                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26165                                  
 26166                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26167                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26168                                  	;mov	[cs:badparm_seg], es
 26169                                  	; 11/12/2022
 26170                                  	; ds = cs
 26171 00002156 8936[2F14]              	mov	[badparm_off], si
 26172 0000215A 8C06[3114]              	mov	[badparm_seg], es
 26173                                  	;
 26174 0000215E E88A08                  	call	ParseSize
 26175 00002161 7303                    	jnc	short tryu_2	; 28/10/2022
 26176                                  
 26177                                  	;call	badparm_p
 26178                                  	;jmp	coff
 26179                                  	; 04/01/2023
 26180 00002163 E9F404                  	jmp	badparm_p_coff
 26181                                  
 26182                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26183                                  ;tryu_0:
 26184                                  ;	mov	ax,[cs:DevSizeOption]
 26185                                  ;	or	ax,ax
 26186                                  ;	jnz	short tryu_2
 26187                                  ;
 26188                                  ;	call	ParseVar
 26189                                  ;	jnc	short tryu_2
 26190                                  ;tryu_1:
 26191                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26192                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26193                                  ;	call	badparm_p		; so all we have to do is choke and
 26194                                  ;	jmp	coff			; die, rather verbosely.
 26195                                  
 26196                                  tryu_2:	
 26197 00002166 56                      	push	si
 26198 00002167 06                      	push	es
 26199                                  tryu_3:
 26200 00002168 268A04                  	mov	al,[es:si]
 26201 0000216B 3C0D                    	cmp	al,cr
 26202 0000216D 740C                    	je	short tryu_4
 26203 0000216F 3C0A                    	cmp	al,lf
 26204 00002171 7408                    	je	short tryu_4
 26205 00002173 E8070F                  	call	delim
 26206 00002176 7403                    	jz	short tryu_4
 26207 00002178 46                      	inc	si
 26208 00002179 EBED                    	jmp	short tryu_3
 26209                                  tryu_4:	
 26210                                  	; 11/12/2022
 26211                                  	; ds = cs
 26212 0000217B A2[141F]                	mov	[DevSavedDelim],al
 26213                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26214                                  					;  it with null
 26215                                  	; 18/12/2022
 26216 0000217E 29DB                    	sub	bx,bx
 26217 00002180 26881C                  	mov	[es:si],bl ; 0
 26218                                   	;mov	byte [es:si],0
 26219                                  
 26220 00002183 07                      	pop	es
 26221 00002184 5E                      	pop	si
 26222                                  
 26223                                  ;------------------------------------------------------------------------------
 26224                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26225                                  ;------------------------------------------------------------------------------
 26226                                  
 26227                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26228                                  ;
 26229                                  ;	call	UmbTest			; See if UMBs are around...
 26230                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26231                                  ;
 26232                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26233                                  ;	jmp	short LoadDevice
 26234                                  
 26235                                  ;------------------------------------------------------------------------------
 26236                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26237                                  ;------------------------------------------------------------------------------
 26238                                  
 26239                                  NrmTst:
 26240                                  	; 11/12/2022
 26241                                  	; ds = cs
 26242                                  	;;mov	byte [cs:DeviceHi],0
 26243                                  	;mov	byte [DeviceHi],0
 26244                                  	; 18/12/2022
 26245                                  	; bx = 0
 26246 00002185 381E[F01E]              	cmp	[DevUMB],bl ; 0
 26247                                  	;cmp	byte [DevUMB],0
 26248                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26249 00002189 7417                    	je	short LoadDevice	; no, we don't
 26250                                  	;mov	byte [cs:DeviceHi],1
 26251                                  	; 11/12/2022
 26252                                  	;mov	byte [DeviceHi],1
 26253                                  	; 18/12/2022
 26254 0000218B FEC3                    	inc	bl ; mov bl,1 ; (*)
 26255                                  	; 11/12/2022
 26256                                  	;jmp	short LoadDevice2	; 11/12/2022
 26257 0000218D EB13                    	jmp	short LoadDevice
 26258                                  
 26259                                  ;------------------------------------------------------------------------------
 26260                                  ; device command
 26261                                  ;------------------------------------------------------------------------------
 26262                                  
 26263                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26264                                  	; (SYSINIT:2401h)
 26265                                  tryd:
 26266                                  	; 11/12/2022
 26267 0000218F 31DB                    	xor 	bx, bx
 26268                                  	;
 26269 00002191 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26270 00002194 7403                    	je	short gotd
 26271                                  skip_it2:
 26272 00002196 E93502                  	jmp	tryq
 26273                                  gotd:
 26274                                  
 26275                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26276                                  ;;ifdef	MULTI_CONFIG
 26277                                  ;       call    query_user              ; query the user if config_cmd
 26278                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26279                                  ;;endif
 26280                                  	; 11/12/2022
 26281                                  	; ds = cs
 26282                                  	;mov	byte [DeviceHi],0
 26283                                  	;mov	word [DevSizeOption],0
 26284 00002199 891E[001F]              	mov	[DevSizeOption],bx ; 0
 26285 0000219D C606[141F]20            	mov	byte [DevSavedDelim],' '
 26286                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26287                                  	;mov	word [cs:DevSizeOption],0
 26288                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26289                                  					;  be replaced with a ' '
 26290                                  LoadDevice:                             ; device= or devicehigh= command.
 26291                                  	; 11/12/2022
 26292                                  	;mov	byte [DeviceHi],0
 26293 000021A2 881E[FF1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26294                                  LoadDevice2:
 26295                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26296                                  	;
 26297                                  	;push    cs
 26298                                          ;pop     ds
 26299                                  	;
 26300                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26301                                  	;mov	[bpb_addr+2],es
 26302                                  	;
 26303                                  	;mov	[DevCmdLine],si		; save it for ourself
 26304                                  	;mov	[DevCmdLine+2],es
 26305                                  	;
 26306                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26307                                  
 26308                                  	; 11/12/2022
 26309                                  	; ds = cs
 26310                                  	;mov	bx,cs
 26311                                  	;mov	ds,bx
 26312                                  
 26313                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26314 000021A6 8936[F803]              	mov	[bpb_addr],si
 26315                                  	;mov	[cs:bpb_addr+2],es
 26316 000021AA 8C06[FA03]              	mov	[bpb_addr+2],es
 26317                                  
 26318                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26319 000021AE 8936[101F]              	mov	[DevCmdLine],si
 26320                                  	;mov	[cs:DevCmdLine+2],es	
 26321 000021B2 8C06[121F]              	mov	[DevCmdLine+2],es	
 26322                                  
 26323 000021B6 E8070F                  	call	round
 26324                                  	
 26325 000021B9 E83F07                  	call	SizeDevice
 26326 000021BC 7215                    	jc	short BadFile
 26327                                  
 26328                                  	; 11/12/2022
 26329                                  	; ds = cs
 26330                                  
 26331                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26332                                  
 26333                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26334                                  ;
 26335                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26336                                  ;
 26337                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26338                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26339                                  ;	jz	short DevConvLoad	; the actual load.
 26340                                  ;
 26341                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26342                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26343                                  ;
 26344                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26345                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26346                                  ;
 26347                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26348                                  ;
 26349                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26350                                  ;	or	ax,ax
 26351                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26352                                  ;
 26353                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26354                                  ;	jge	short DevConvLoad
 26355                                  ;
 26356                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26357                                  ;	call	StoLoadSize		; minsize for load UMB.
 26358                                  
 26359                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26360                                  
 26361                                  DevConvLoad:
 26362                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26363 000021BE E84F06                  	call	InitDevLoad
 26364                                  
 26365                                  	; 11/12/2022
 26366                                  	; ds = cs
 26367 000021C1 A1[E41E]                	mov	ax,[DevLoadAddr]
 26368 000021C4 0306[E21E]              	add	ax,[DevSize]
 26369 000021C8 7206                    	jc	short NoMem
 26370 000021CA 3906[E61E]              	cmp	[DevLoadEnd],ax
 26371 000021CE 7312                    	jae	short LoadDev
 26372                                  	
 26373                                  	; 11/12/2022
 26374                                  	;mov	ax,[cs:DevLoadAddr]
 26375                                  	;add	ax,[cs:DevSize]
 26376                                  	;jc	short NoMem
 26377                                  	;cmp	[cs:DevLoadEnd],ax
 26378                                  	;jae	short LoadDev
 26379                                  NoMem:
 26380                                  	; 11/12/2022
 26381                                  	; ds = cs
 26382                                  	;jmp	mem_err
 26383 000021D0 E9300F                  	jmp	mem_err2
 26384                                  
 26385                                  BadFile:
 26386                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26387                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26388                                  	;cmp    byte [es:si],' '
 26389                                          ;jae	short tryd_2
 26390 000021D3 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26391 000021D7 7503                            jne	short tryd_2
 26392 000021D9 E92305                  	jmp	badop
 26393                                  tryd_2:
 26394 000021DC E87811                  	call	badload
 26395 000021DF E916FE                  	jmp	coff
 26396                                  
 26397                                  LoadDev:
 26398 000021E2 06                      	push	es
 26399 000021E3 1F                      	pop	ds
 26400                                  
 26401 000021E4 89F2                    	mov	dx,si			;ds:dx points to file name
 26402 000021E6 E86307                  	call	ExecDev			; load device driver using exec call
 26403                                  badldreset:
 26404 000021E9 1E                      	push	ds
 26405 000021EA 07                      	pop	es			;es:si back to config.sys
 26406 000021EB 0E                      	push	cs
 26407 000021EC 1F                      	pop	ds			;ds back to sysinit
 26408 000021ED 72E4                    	jc	short BadFile
 26409                                  goodld:
 26410                                  	; 11/12/2022
 26411                                  	; ds = cs
 26412                                  
 26413 000021EF 06                      	push	es
 26414 000021F0 56                      	push	si
 26415 000021F1 E87507                  	call	RemoveNull
 26416 000021F4 06                      	push	es
 26417 000021F5 56                      	push	si
 26418                                  
 26419 000021F6 0E                      	push	cs
 26420 000021F7 07                      	pop	es
 26421                                  
 26422 000021F8 1E                      	push	ds
 26423 000021F9 56                      	push	si
 26424                                  
 26425                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26426                                  	; 31/12/2022
 26427                                  	; ds = cs
 26428 000021FA C536[E81E]              	lds	si,[DevEntry]
 26429                                  	
 26430                                  	;test	word [si+4],8000h
 26431                                  	; 11/12/2022
 26432 000021FE F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26433                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26434 00002202 7511                    	jnz	short got_device_com_cont   ; no.
 26435                                  
 26436 00002204 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26437                                  	;cmp	byte [si+32],26
 26438 00002209 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26439 0000220D 7206                    	jb	short got_device_com_cont
 26440                                  
 26441 0000220F 5E                      	pop	si
 26442 00002210 1F                      	pop	ds
 26443                                  
 26444 00002211 5E                      	pop	si			; clear the stack
 26445 00002212 07                      	pop	es
 26446                                  
 26447                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26448                                  	;call	RetFromUM		; Do this before we leave
 26449                                  
 26450 00002213 EB57                    	jmp	short badnumblock
 26451                                  
 26452                                  got_device_com_cont:
 26453 00002215 5E                      	pop	si
 26454 00002216 1F                      	pop	ds
 26455                                  
 26456                                  	; 11/12/2022
 26457                                  	; ds = cs
 26458                                  
 26459 00002217 E88205                  	call	LieInt12Mem
 26460 0000221A E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26461                                  
 26462                                  	; 11/12/2022
 26463                                  	; ds = cs
 26464 0000221D 803E[2B14]00            	cmp	byte [multdeviceflag],0
 26465                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26466                                  					;  driver in the file ; M027
 26467 00002222 750E                    	jne	short skip_pass_limit	;		      ; M027
 26468                                  
 26469                                  	; 11/12/2022
 26470                                  	; ds = cs
 26471                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26472                                  	;mov	bx,[cs:DevLoadEnd]
 26473                                  	;mov	[cs:break_addr+2],bx
 26474                                  
 26475 00002224 C706[F403]0000          	mov	word [break_addr],0
 26476 0000222A 8B1E[E61E]              	mov	bx,[DevLoadEnd]
 26477 0000222E 891E[F603]              	mov	[break_addr+2],bx
 26478                                  
 26479                                  skip_pass_limit:
 26480                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26481                                  ;	number of installed devices (including DblSpace drives) where
 26482                                  ;	"drivenumber" is the number that the next block device will
 26483                                  ;	be assigned to. Because some naughty device drivers (like
 26484                                  ;	interlnk) look at the internal DOS variable instead of the
 26485                                  ;	value we pass it, we'll temporarily stick our value into
 26486                                  ;	DOS DATA while we're initializing the device drivers.
 26487                                  ;
 26488                                  ;	Note that this will make it impossible for this device
 26489                                  ;	driver to access the DblSpace drive letters, whether
 26490                                  ;	they are swapped-hosts or unswapped compressed drives,
 26491                                  ;	during its initialization phase.
 26492                                  
 26493                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26494                                  	;push	ds
 26495                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26496                                  	;
 26497                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26498                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26499                                  	;mov	ah,al
 26500                                  	;
 26501                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26502                                  	;pop	ds
 26503                                  	;
 26504                                  	;push	ax			; save real sysi_numio/ncds in ax
 26505                                  
 26506                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26507                                  	; (SYSINIT:24B9h)
 26508                                  
 26509 00002232 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26510 00002235 E8D40E                  	call	calldev 		; calldev (sdevstrat);
 26511 00002238 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26512 0000223B E8CE0E                  	call	calldev 		; calldev (sdevint);
 26513                                  
 26514                                  	; 11/12/2022
 26515                                  	; ds <> cs
 26516                                  
 26517                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26518                                  	;pop	ax			; get real sysi_numio value
 26519                                  	;push	ds
 26520                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26521                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26522                                  	;pop	ds
 26523                                  
 26524                                  	; 11/12/2022
 26525 0000223E 0E                      	push	cs
 26526 0000223F 1F                      	pop	ds
 26527                                  
 26528 00002240 E88905                  	call	TrueInt12Mem
 26529                                  
 26530                                  	; 11/12/2022
 26531                                  	; ds = cs
 26532                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26533                                  	;mov	[cs:DevBrkAddr],ax
 26534                                  	;mov	ax,[cs:break_addr+2]
 26535                                  	;mov	[cs:DevBrkAddr+2],ax
 26536 00002243 A1[F403]                	mov	ax,[break_addr]	
 26537 00002246 A3[EC1E]                	mov	[DevBrkAddr],ax
 26538 00002249 A1[F603]                	mov	ax,[break_addr+2]
 26539 0000224C A3[EE1E]                	mov	[DevBrkAddr+2],ax
 26540                                  
 26541                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26542                                  	;call	RetFromUM		; There we go... all done.
 26543                                  
 26544                                  	; 11/12/2022
 26545 0000224F 803E[F01E]00            	cmp	byte [DevUMB],0	
 26546                                  	;cmp	byte [cs:DevUMB],0
 26547 00002254 7403                    	je	short tryd_3
 26548 00002256 E83608                  	call	AllocUMB
 26549                                  	; 31/12/2022
 26550                                  	; ds= cs
 26551                                  tryd_3:
 26552                                  
 26553                                  ;ifndef ROMDOS
 26554                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26555                                  
 26556                                  	; 11/12/2022
 26557                                  	; ds = cs
 26558                                  	
 26559                                  	;cmp	byte [cs:runhigh],0FFh
 26560 00002259 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26561 0000225E 7503                    	jne	short tryd_4
 26562                                  	
 26563                                  	; 11/12/2022
 26564                                  	; ds = cs
 26565 00002260 E873E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26566                                  tryd_4:
 26567                                  ;endif ; ROMDOS
 26568                                  
 26569 00002263 5E                      	pop	si
 26570 00002264 1F                      	pop	ds
 26571 00002265 C60400                  	mov	byte [si],0		; *p = 0;
 26572                                  
 26573 00002268 0E                      	push	cs
 26574 00002269 1F                      	pop	ds
 26575                                  
 26576 0000226A EB1F                    	jmp	short was_device_com
 26577                                  
 26578                                  ;----------------------------------------------------------------------------
 26579                                  
 26580                                  ;02/04/2019 - Retro DOS v4.0
 26581                                  
 26582                                  badnumblock:
 26583 0000226C 0E                      	push	cs
 26584 0000226D 1F                      	pop	ds
 26585 0000226E BA[5038]                	mov	dx,badblock
 26586 00002271 E80B11                  	call	print
 26587                                  
 26588                                  ;------ fall thru -----------------------------------------------------------
 26589                                  
 26590                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26591                                  	
 26592                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26593                                  	
 26594 00002274 5E                      	pop	si
 26595 00002275 07                      	pop	es
 26596                                  
 26597 00002276 0E                      	push	cs
 26598 00002277 1F                      	pop	ds
 26599                                  
 26600                                  skip1_resetmemhi:
 26601                                  	; 11/12/2022
 26602                                  	; ds = cs
 26603 00002278 833E[FD03]00            	cmp	word [configmsgflag],0
 26604                                  	;cmp	word [cs:configmsgflag],0
 26605 0000227D 7409                    	je	short no_error_line_msg
 26606                                  
 26607 0000227F E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26608                                  	; 11/12/2022
 26609                                  	; ds = cs
 26610                                  	;mov	word [cs:configmsgflag],0
 26611 00002282 C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26612                                  
 26613                                  no_error_line_msg:
 26614 00002288 E96DFD                  	jmp	coff
 26615                                  
 26616                                  ;----------------------------------------------------------------------------
 26617                                  
 26618                                  was_device_com:
 26619                                  	; 14/12/2022
 26620                                  	; ds = cs
 26621 0000228B A1[EE1E]                	mov	ax,[DevBrkAddr+2]
 26622                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26623 0000228E 3B06[E61E]              	cmp	ax,[DevLoadEnd]
 26624                                  	;cmp	ax,[cs:DevLoadEnd]
 26625 00002292 7605                    	jbe	short breakok
 26626                                  
 26627 00002294 5E                      	pop	si
 26628 00002295 07                      	pop	es
 26629 00002296 E93AFF                  	jmp	BadFile
 26630                                  
 26631                                  breakok:
 26632                                  	; 14/12/2022
 26633                                  	; ds = cs
 26634 00002299 C43E[6B02]              	les	di,[DOSINFO] 
 26635 0000229D C516[E81E]              	lds	dx,[DevEntry]
 26636                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26637 000022A1 89D6                    	mov	si,dx
 26638                                  
 26639                                  	; 14/11/2022
 26640                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26641                                  
 26642                                  	; 14/12/2022
 26643                                  	; ds <> cs
 26644                                  	
 26645                                  	;mov	ax,[si+4]
 26646 000022A3 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26647                                  	; 12/12/2022
 26648 000022A6 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26649                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26650 000022A9 7426                    	jz	short isblock
 26651                                  
 26652                                  ;------ lets deal with character devices
 26653                                  
 26654 000022AB 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26655 000022B1 E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26656                                  jc_edd:
 26657 000022B4 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26658                                  
 26659                                  	; 12/12/2022
 26660 000022B6 A801                    	test	al,ISCIN
 26661                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26662 000022B8 7408                    	jz	short tryclk
 26663                                  
 26664 000022BA 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26665 000022BE 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26666                                  tryclk: 
 26667                                  	; 12/12/2022
 26668 000022C2 A808                    	test	al,ISCLOCK
 26669                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26670 000022C4 7408                    	jz	short golink
 26671                                  
 26672 000022C6 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26673 000022CA 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26674                                  golink: 
 26675 000022CE E9B000                  	jmp	linkit
 26676                                  
 26677                                  ;------ deal with block device drivers
 26678                                  
 26679                                  isblock:
 26680 000022D1 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26681 000022D5 08C0                    	or	al,al
 26682 000022D7 749B                    	jz	short erase_dev_do
 26683                                  	;mov	[si+10],al
 26684 000022D9 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26685                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26686                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26687                                  perdrv:
 26688 000022DC 98                      	cbw				; warning no device > 127 units
 26689 000022DD 89C1                    	mov	cx,ax
 26690 000022DF 88E6                    	mov	dh,ah
 26691                                  	;mov	dl,[es:di+32]
 26692 000022E1 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26693 000022E5 88D4                    	mov	ah,dl
 26694 000022E7 00C4                    	add	ah,al			; check for too many devices
 26695 000022E9 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26696 000022EC 7603                    	jbe	short ok_block
 26697 000022EE E97BFF                  	jmp	badnumblock
 26698                                  
 26699                                  ok_block:
 26700 000022F1 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26701 000022F7 E8A206                  	call	DevSetBreak		; alloc the device
 26702 000022FA 72B8                    	jc	short jc_edd
 26703 000022FC 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26704                                  
 26705 00002300 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26706 00002305 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26707                                  perunit:
 26708 0000230A 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26709                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26710                                  	; 11/12/2022
 26711 0000230F 26C46E00                	les	bp,[es:bp]
 26712                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26713                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26714                                  scandpb:
 26715                                  	;cmp	word [es:bp+25],-1
 26716 00002313 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26717 00002318 7406                    	je	short foundpb
 26718                                  	;les	bp,[es:bp+25]
 26719 0000231A 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26720 0000231E EBF3                    	jmp	short scandpb
 26721                                  foundpb:
 26722 00002320 2EA1[EC1E]              	mov	ax,[cs:DevBrkAddr]
 26723 00002324 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26724 00002328 2EA1[EE1E]              	mov	ax,[cs:DevBrkAddr+2]
 26725 0000232C 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26726                                  
 26727 00002330 2EC42E[EC1E]            	les	bp,[cs:DevBrkAddr]
 26728 00002335 2E8306[EC1E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26729                                  
 26730 0000233B E83D06                  	call	RoundBreakAddr
 26731                                  
 26732 0000233E 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26733 00002344 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26734                                  
 26735 00002349 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26736 0000234B 43                      	inc	bx
 26737 0000234C 43                      	inc	bx			;point to next guy
 26738                                  	;mov	[es:bp+DPB.DRIVE],dx
 26739                                  	; 11/12/2022
 26740 0000234D 26895600                	mov	[es:bp],dx ; 13/05/2019
 26741                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26742                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26743                                  	
 26744 00002351 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26745 00002353 CD21                    	int	21h
 26746                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26747                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26748                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26749                                  
 26750                                  	;mov	ax,[es:bp+2]
 26751 00002355 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26752 00002359 06                      	push	es
 26753 0000235A 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26754                                  	;cmp	ax,[es:di+10h]
 26755 0000235F 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26756 00002363 07                      	pop	es
 26757                                  	;jna	short iblk_1
 26758                                  	;jmp	short bad_bpb_size_sector
 26759                                  	; 29/10/2022
 26760 00002364 775A                    	ja	short bad_bpb_size_sector
 26761                                  iblk_1:
 26762 00002366 1E                      	push	ds
 26763 00002367 52                      	push	dx
 26764                                  
 26765 00002368 2EC516[E81E]            	lds	dx,[cs:DevEntry]
 26766                                  	;mov	[es:bp+13h],dx
 26767 0000236D 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26768                                  	;mov	[es:bp+15h],ds
 26769 00002371 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26770                                  
 26771 00002375 5A                      	pop	dx
 26772 00002376 1F                      	pop	ds
 26773                                  
 26774 00002377 42                      	inc	dx
 26775 00002378 FEC6                    	inc	dh
 26776 0000237A E28E                    	loop	perunit
 26777                                  
 26778 0000237C 0E                      	push	cs
 26779 0000237D 1F                      	pop	ds
 26780                                  
 26781 0000237E E84EE8                  	call	TempCDS 		; set cds for new drives
 26782                                  linkit:
 26783 00002381 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26784 00002386 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26785 0000238A 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26786                                  
 26787 0000238E 2EC536[E81E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26788 00002393 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26789 00002397 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26790 0000239B 8B04                    	mov	ax,[si]			;get pointer to next device
 26791 0000239D 2EA3[E81E]              	mov	[cs:DevEntry],ax	;and save it
 26792                                  
 26793 000023A1 890C                    	mov	[si],cx			;link in the driver
 26794 000023A3 895402                  	mov	[si+2],dx
 26795                                  enddev:
 26796 000023A6 5E                      	pop	si
 26797 000023A7 07                      	pop	es
 26798 000023A8 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26799 000023A9 740B                    	jz	short coffj3
 26800                                  
 26801 000023AB 2EFE06[2B14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26802 000023B0 E80B06                  	call	DevBreak		; M009
 26803                                  	; 11/12/2022
 26804                                  	; ds = cs (DevBreak)
 26805                                  
 26806                                  	; 03/04/2019 - Retro DOS v4.0
 26807                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26808 000023B3 E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26809                                  coffj3: 
 26810                                  	; 18/12/2022
 26811                                  	; ax = 0
 26812 000023B6 2EA2[2B14]              	mov	[cs:multdeviceflag],al ; 0
 26813                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26814 000023BA E80106                  	call	DevBreak
 26815                                  	; 11/12/2022
 26816                                  	; ds = cs (DevBreak)
 26817                                  	
 26818                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26819                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26820                                  ;					;  created a bogus arena to try
 26821                                  ;					;  to protect some of its resident-
 26822                                  ;					;  init code.
 26823                                  	;call	CheckDoubleSpace
 26824 000023BD E938FC                  	jmp	coff
 26825                                  
 26826                                  ;----------------------------------------------------------------------------
 26827                                  
 26828                                  ;CheckDoubleSpace:
 26829                                  ;;;;	ifdef	dblspace_hooks
 26830                                  ;
 26831                                  ;;	Now check for two special MagicDrv cases:
 26832                                  ;;
 26833                                  ;;       a) the last driver load was MagicDrv final placement:
 26834                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26835                                  ;;
 26836                                  ;;       b) MagicDrv is currently in temporary home:
 26837                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26838                                  ;
 26839                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26840                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26841                                  ;
 26842                                  ;;	Now inquire of driver whether it is present, and final located
 26843                                  ;
 26844                                  ;	mov	ax,multMagicdrv ; 4A11h
 26845                                  ;	mov	bx,MD_VERSION ; 0
 26846                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26847                                  ;	or	ax,ax			; is it there?
 26848                                  ;	jnz	short no_more_magic_calls ; done if not
 26849                                  ;
 26850                                  ;	test	dx,8000h		; is it final placed?
 26851                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26852                                  ;
 26853                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26854                                  ;;	don't keep checking it, and add its number of drive letters
 26855                                  ;;	to drivenumber.
 26856                                  ;
 26857                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26858                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26859                                  ;;					;  the drive number we'll pass to the
 26860                                  ;;					;  next loadable block device.
 26861                                  ;
 26862                                  ;	jmp	short no_more_magic_calls ; and finished.
 26863                                  ;
 26864                                  ;magic_not_yet_home:
 26865                                  ;	push	es
 26866                                  ;	push	si
 26867                                  ;
 26868                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26869                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26870                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26871                                  ;
 26872                                  ;	mov	bx,2
 26873                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26874                                  ;;					;   by this many units
 26875                                  ;
 26876                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26877                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26878                                  ;;					;  sees this, to prevent bad things
 26879                                  ;;					;  from happening if people run the
 26880                                  ;;					;  new driver with an old BIOS
 26881                                  ;	call	far [cs:MagicBackdoor]
 26882                                  ;
 26883                                  ;	pop	si
 26884                                  ;	pop	es
 26885                                  ;
 26886                                  ;no_more_magic_calls:
 26887                                  ;
 26888                                  ;;;;	endif
 26889                                  ;	retn
 26890                                  
 26891                                  ; 03/04/2019 - Retro DOS v4.0
 26892                                  
 26893                                  bad_bpb_size_sector:
 26894 000023C0 5E                      	pop	si
 26895 000023C1 07                      	pop	es
 26896 000023C2 BA[7237]                	mov	dx,badsiz_pre
 26897 000023C5 BB[5037]                	mov	bx,crlfm
 26898 000023C8 E8920F                  	call	prnerr
 26899                                  
 26900 000023CB E92AFC                  	jmp	coff
 26901                                  
 26902                                  ;------------------------------------------------------------------------------
 26903                                  ; country command
 26904                                  ;      the syntax is:
 26905                                  ;	country=country id {,codepage {,path}}
 26906                                  ;	country=country id {,,path}	:default codepage id in dos
 26907                                  ;------------------------------------------------------------------------------
 26908                                  
 26909                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26910                                  	; (SYSINIT:2663h)
 26911                                  tryq:
 26912 000023CE 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26913 000023D1 7403                    	je	short tryq_cont
 26914                                  skip_it3:
 26915 000023D3 E90801                  	jmp	tryf
 26916                                  tryq_cont:
 26917                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26918                                  ;;ifdef	MULTI_CONFIG
 26919                                  ;       call    query_user		; query the user if config_cmd
 26920                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26921                                  ;;endif
 26922                                  	; 14/12/2022
 26923                                  	; ds = cs
 26924                                  	; bx = 0
 26925                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26926                                  	;mov	word [cs:p_code_page],0
 26927 000023D6 881E[0834]              	mov	[cntry_drv],bl ; 0
 26928 000023DA 891E[AD1D]              	mov	[p_code_page],bx ; 0
 26929                                  	
 26930 000023DE BF[761D]                	mov	di,cntry_parms
 26931 000023E1 31C9                    	xor	cx,cx
 26932                                  	; 04/01/2023
 26933                                  	;mov	dx,cx
 26934                                  do52:
 26935 000023E3 E8F602                  	call	sysinit_parse
 26936 000023E6 730B                    	jnc	short if52		; parse error,check error code and
 26937                                  
 26938 000023E8 E8E000                  	call	cntry_error		; show message and end the search loop.
 26939                                  	; 14/12/2022
 26940                                  	; ds = cs
 26941 000023EB C706[AB1D]FFFF          	mov	word [p_cntry_code],-1
 26942                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26943 000023F1 EB34                    	jmp	short sr52
 26944                                  if52:
 26945 000023F3 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26946 000023F6 742F                    	jz	short sr52		; then end the search loop
 26947                                  
 26948                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26949                                  	; 14/12/2022
 26950                                  	; ds = cs
 26951 000023F8 803E[481D]01            	cmp	byte [result_val],_$P_Number	
 26952                                  	;cmp	byte [cs:result_val],_$P_Number
 26953 000023FD 7512                    	jnz	short if56
 26954                                  
 26955                                  	;;mov	ax,[cs:rw_dword]
 26956                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26957                                  	; 14/12/2022
 26958 000023FF A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26959 00002402 83F901                  	cmp	cx,1
 26960 00002405 7505                    	jne	short if57
 26961                                  
 26962                                  	;mov	[cs:p_cntry_code],ax
 26963                                  	; 14/12/2022
 26964 00002407 A3[AB1D]                	mov	[p_cntry_code],ax
 26965                                  
 26966                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26967                                  	;jmp	short en57
 26968                                  	; 12/12/2022
 26969                                  	;jmp	short en56
 26970 0000240A EBD7                    	jmp	short do52
 26971                                  
 26972                                  if57:
 26973                                  	;mov	[cs:p_code_page],ax
 26974                                  	; 14/12/2022
 26975                                  	; ds = cs
 26976 0000240C A3[AD1D]                	mov	[p_code_page],ax
 26977                                  en57:
 26978                                  	;jmp	short en56		; path entered
 26979                                  	; 12/12/2022
 26980 0000240F EBD2                    	jmp	short do52
 26981                                  
 26982                                  if56:
 26983 00002411 1E                      	push	ds
 26984 00002412 06                      	push	es
 26985 00002413 56                      	push	si
 26986 00002414 57                      	push	di
 26987                                  
 26988 00002415 0E                      	push	cs
 26989 00002416 07                      	pop	es
 26990                                  
 26991                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 26992                                  	; 14/12/2022
 26993 00002417 C536[4C1D]              	lds	si,[rv_dword]
 26994 0000241B BF[0834]                	mov	di,cntry_drv
 26995 0000241E E82A0F                  	call	move_asciiz
 26996                                  
 26997 00002421 5F                      	pop	di
 26998 00002422 5E                      	pop	si
 26999 00002423 07                      	pop	es
 27000 00002424 1F                      	pop	ds
 27001                                  
 27002                                  en56:
 27003 00002425 EBBC                    	jmp	short do52
 27004                                  
 27005                                  sr52:
 27006                                  	; 14/12/2022
 27007                                  	; ds = cs
 27008 00002427 833E[AB1D]FF            	cmp	word [p_cntry_code],-1
 27009                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27010 0000242C 7509                    	jne	short tryq_open
 27011 0000242E E9C7FB                  	jmp	coff
 27012                                  
 27013                                  tryqbad:				;"invalid country code or code page"
 27014 00002431 F9                      	stc
 27015 00002432 BA[B937]                	mov     dx,badcountry
 27016 00002435 EB79                    	jmp     tryqchkerr
 27017                                  
 27018                                  tryq_open:
 27019                                  	; 14/12/2022
 27020                                  	; ds = cs
 27021 00002437 803E[0834]00            	cmp	byte [cntry_drv],0
 27022                                  	;cmp	byte [cs:cntry_drv],0
 27023 0000243C 7405                    	je	short tryq_def
 27024 0000243E BA[0834]                	mov	dx,cntry_drv
 27025 00002441 EB03                    	jmp	short tryq_openit
 27026                                  
 27027                                  tryq_def:
 27028 00002443 BA[0A34]                	mov	dx,cntry_root
 27029                                  tryq_openit:
 27030 00002446 B8003D                  	mov	ax,3D00h		;open a file
 27031 00002449 F9                      	stc
 27032 0000244A CD21                    	int	21h
 27033 0000244C 7242                    	jc	short tryqfilebad	;open failure
 27034                                  
 27035                                  	; 14/12/2022
 27036                                  	; ds = cs
 27037 0000244E A3[D803]                	mov	[cntryfilehandle],ax
 27038                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27039 00002451 89C3                    	mov	bx,ax
 27040 00002453 A1[AB1D]                	mov	ax,[p_cntry_code]
 27041 00002456 8B16[AD1D]              	mov	dx,[p_code_page]
 27042                                  	;mov	ax,[cs:p_cntry_code]
 27043                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 27044                                  	;mov	cx,[cs:memhi]
 27045 0000245A 8B0E[E003]              	mov	cx,[memhi]
 27046 0000245E 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 27047                                  					; M023
 27048                                  	; 14/12/2022
 27049                                  	; ds = cs
 27050 00002462 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27051                                  	;cmp	cx,[cs:ALLOCLIM]
 27052 00002466 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27053                                  
 27054 00002468 BE[0834]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27055 0000246B 803C00                  	cmp	byte [si],0 		;default path?
 27056 0000246E 7502                    	jne	short tryq_set_for_dos
 27057                                  
 27058 00002470 46                      	inc	si
 27059 00002471 46                      	inc	si			;ds:si -> cntry_root
 27060                                  
 27061                                  tryq_set_for_dos:
 27062                                  	; 14/12/2022
 27063                                  	; ds = cs
 27064 00002472 C43E[7702]              	les	di,[sysi_country]
 27065                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27066 00002476 57                      	push	di			;save di
 27067                                  	;add	di,8
 27068 00002477 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27069 0000247A E8CE0E                  	call	move_asciiz		;set the path to country.sys in dos.
 27070 0000247D 5F                      	pop	di			;es:di -> country info tab again.
 27071                                  
 27072                                  	; 14/12/2022	
 27073 0000247E 8B0E[E003]              	mov	cx,[memhi]
 27074                                  	;mov	cx,[cs:memhi]
 27075 00002482 8ED9                    	mov	ds,cx
 27076 00002484 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27077 00002486 E8060D                  	call	setdoscountryinfo	;now do the job!!!
 27078                                  	; ds <> cs ; 14/12/2022
 27079 00002489 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27080                                  
 27081 0000248B 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27082 0000248E 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27083                                  
 27084                                  tryqfilebad:
 27085 00002490 0E                      	push	cs
 27086 00002491 07                      	pop	es
 27087 00002492 2E803E[0834]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27088 00002498 7405                    	je	short tryqdefbad
 27089                                  
 27090 0000249A BE[0834]                	mov	si,cntry_drv
 27091 0000249D EB03                    	jmp	short tryqbadload
 27092                                  
 27093                                  tryqdefbad:				;default file has been used.
 27094 0000249F BE[0A34]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27095                                  tryqbadload:
 27096 000024A2 E8B20E                  	call	badload 		;ds will be restored to sysinit_seg
 27097                                  	;mov	cx,[cs:CONFBOT]
 27098                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27099                                  	;mov	cx,[cs:top_of_cdss]
 27100                                  	; 11/12/2022
 27101                                  	; ds = cs
 27102 000024A5 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27103 000024A9 8EC1                    	mov	es,cx			;restore es -> confbot.
 27104 000024AB EB13                    	jmp	short coffj4
 27105                                  
 27106                                  tryqmemory:
 27107 000024AD BA[FC37]                	mov	dx,insufmemory
 27108                                  tryqchkerr:
 27109                                  	;mov	cx,[cs:CONFBOT]
 27110                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27111                                  	;mov	cx,[cs:top_of_cdss]
 27112                                  	; 12/12/2022
 27113 000024B0 0E                      	push	cs
 27114 000024B1 1F                      	pop	ds
 27115 000024B2 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27116 000024B6 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27117                                  	;push	cs
 27118                                  	;pop	ds			;restore ds to sysinit_seg
 27119 000024B8 7306                    	jnc	short coffj4		;if no error,then exit
 27120                                  
 27121 000024BA E8C20E                  	call	print			;else show error message
 27122 000024BD E88A02                  	call	error_line
 27123                                  coffj4:
 27124                                  	;mov	bx,[cs:cntryfilehandle]
 27125                                  	; 11/12/2022
 27126                                  	; ds = cs
 27127 000024C0 8B1E[D803]              	mov	bx,[cntryfilehandle]
 27128 000024C4 B43E                    	mov	ah,3Eh
 27129 000024C6 CD21                    	int	21h			;close a file. don't care even if it fails.
 27130 000024C8 E92DFB                  	jmp	coff
 27131                                  
 27132                                  ;--------------------------------------------
 27133                                  
 27134                                  cntry_error:
 27135                                  
 27136                                  ;function: show "invalid country code or code page" messages,or
 27137                                  ;		"error in country command" depending on the error code
 27138                                  ;		in ax returned by sysparse;
 27139                                  ;in:	ax - error code
 27140                                  ;	ds - sysinitseg
 27141                                  ;	es - confbot
 27142                                  ;out:	show message.  dx destroyed.
 27143                                  
 27144 000024CB 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27145 000024CE 7505                    	jne	short if64
 27146 000024D0 BA[B937]                	mov	dx,badcountry		;"invalid country code or code page"
 27147 000024D3 EB03                    	jmp	short en64
 27148                                  if64:
 27149 000024D5 BA[DF37]                	mov	dx,badcountrycom	;"error in contry command"
 27150                                  en64:
 27151 000024D8 E8A40E                  	call	print
 27152                                  	;call	error_line
 27153                                  	;retn
 27154                                  	; 11/12/2022
 27155 000024DB E96C02                  	jmp	error_line
 27156                                  
 27157                                  ;------------------------------------------------------------------------------
 27158                                  ; files command
 27159                                  ;------------------------------------------------------------------------------
 27160                                  
 27161                                  ;******************************************************************************
 27162                                  ; function: parse the parameters of files= command.			      *
 27163                                  ;									      *
 27164                                  ; input :								      *
 27165                                  ;	es:si -> parameters in command line.				      *
 27166                                  ; output:								      *
 27167                                  ;	variable files set.						      *
 27168                                  ;									      *
 27169                                  ; subroutines to be called:						      *
 27170                                  ;	sysinit_parse							      *
 27171                                  ; logic:								      *
 27172                                  ; {									      *
 27173                                  ;	set di points to files_parms;					      *
 27174                                  ;	set dx,cx to 0; 						      *
 27175                                  ;	while (end of command line)					      *
 27176                                  ;	{ sysinit_parse;						      *
 27177                                  ;	  if (no error) then						      *
 27178                                  ;	     files = result_val._$P_picked_val				      *
 27179                                  ;	  else								      *
 27180                                  ;	     error exit;						      *
 27181                                  ;	};								      *
 27182                                  ; };									      *
 27183                                  ;									      *
 27184                                  ;******************************************************************************
 27185                                  
 27186                                  tryf:
 27187 000024DE 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27188 000024E1 7523                    	jne	short tryl
 27189                                  
 27190                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27191                                  ;;ifdef	MULTI_CONFIG
 27192                                  ;       call    query_user              ; query the user if config_cmd
 27193                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27194                                  ;;endif
 27195                                  
 27196                                  	; 14/12/2022
 27197                                  	; ds = cs
 27198                                  
 27199 000024E3 BF[AF1D]                	mov	di,files_parms
 27200 000024E6 31C9                    	xor	cx,cx
 27201                                  	; 04/01/2023
 27202                                  	;mov	dx,cx
 27203                                  do67:
 27204 000024E8 E8F101                  	call	sysinit_parse
 27205 000024EB 7303                    	jnc	short if67		; parse error
 27206                                  	;call	badparm_p		;  and show messages and end the search loop.
 27207                                  	;jmp	short sr67
 27208                                  	; 04/01/2023
 27209 000024ED E96A01                  	jmp	badparm_p_coff
 27210                                  if67:
 27211 000024F0 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27212 000024F3 7408                    	je	short en67		; then end the $endloop
 27213                                  
 27214                                  	; 14/12/2022
 27215                                  	; ds = cs
 27216                                  	;;mov	al,[cs:rv_dword]
 27217                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27218                                  	;mov	[cs:p_files],al		; save it temporarily
 27219                                  	;mov	al,[rv_dword]
 27220 000024F5 A0[4C1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27221 000024F8 A2[CE1D]                	mov	[p_files],al
 27222                                  
 27223 000024FB EBEB                    	jmp	short do67
 27224                                  en67:
 27225                                  	; 14/12/2022
 27226                                  	; ds = cs
 27227 000024FD A0[CE1D]                	mov	al,[p_files]
 27228 00002500 A2[9D02]                	mov	[FILES],al	
 27229                                  	;mov	al,[cs:p_files]
 27230                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27231                                  sr67:
 27232 00002503 E9F2FA                  	jmp	coff
 27233                                  
 27234                                  ; 04/04/2019 - Retro DOS v4.0
 27235                                  
 27236                                  ;------------------------------------------------------------------------------
 27237                                  ; lastdrive command
 27238                                  ;------------------------------------------------------------------------------
 27239                                  
 27240                                  ;******************************************************************************
 27241                                  ; function: parse the parameters of lastdrive= command. 		      *
 27242                                  ;									      *
 27243                                  ; input :								      *
 27244                                  ;	es:si -> parameters in command line.				      *
 27245                                  ; output:								      *
 27246                                  ;	set the variable num_cds.					      *
 27247                                  ;									      *
 27248                                  ; subroutines to be called:						      *
 27249                                  ;	sysinit_parse							      *
 27250                                  ; logic:								      *
 27251                                  ; {									      *
 27252                                  ;	set di points to ldrv_parms;					      *
 27253                                  ;	set dx,cx to 0; 						      *
 27254                                  ;	while (end of command line)					      *
 27255                                  ;	{ sysinit_parse;						      *
 27256                                  ;	  if (no error) then						      *
 27257                                  ;	     set num_cds to the returned value; 			      *
 27258                                  ;	  else	/*error exit*/						      *
 27259                                  ;	     error exit;						      *
 27260                                  ;	};								      *
 27261                                  ; };									      *
 27262                                  ;									      *
 27263                                  ;******************************************************************************
 27264                                  
 27265                                  tryl:
 27266 00002506 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27267 00002509 7523                    	jne	short tryp
 27268                                  
 27269                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27270                                  ;;ifdef	MULTI_CONFIG
 27271                                  ;       call    query_user      ; query the user if config_cmd
 27272                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27273                                  ;;endif
 27274                                  	; 14/12/2022
 27275                                  	; ds = cs
 27276                                  
 27277 0000250B BF[061E]                	mov	di,ldrv_parms
 27278 0000250E 31C9                    	xor	cx,cx
 27279                                  	; 04/01/2023
 27280                                  	;mov	dx,cx
 27281                                  do73:
 27282 00002510 E8C901                  	call	sysinit_parse
 27283 00002513 7303                    	jnc	short if73	; parse error
 27284                                  	;call	badparm_p	;  and show messages and end the search loop.
 27285                                  	;jmp	short sr73
 27286                                  	; 04/01/2023
 27287 00002515 E94201                  	jmp	badparm_p_coff
 27288                                  if73:
 27289 00002518 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27290 0000251B 7408                    	je	short en73	; then end the $endloop
 27291                                  
 27292                                  	; 14/12/2022
 27293                                  	; ds = cs
 27294                                  	;;mov	al,[cs:rv_dword]
 27295                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27296                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27297                                  
 27298                                  	;mov	al,[rv_dword]
 27299 0000251D A0[4C1D]                	mov	al,[rv_byte]
 27300 00002520 A2[1A1E]                	mov	[p_ldrv],al
 27301                                  
 27302 00002523 EBEB                    	jmp	short do73
 27303                                  en73:
 27304                                  	; 14/12/2022
 27305                                  	; ds = cs
 27306 00002525 A0[1A1E]                	mov	al,[p_ldrv]
 27307 00002528 A2[A002]                	mov	[NUM_CDS],al
 27308                                  	;mov	al,[cs:p_ldrv]
 27309                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27310                                  sr73:
 27311 0000252B E9CAFA                  	jmp	coff
 27312                                  
 27313                                  ;--------------------------------------------------------------------------
 27314                                  ; setting drive parameters
 27315                                  ;--------------------------------------------------------------------------
 27316                                  
 27317                                  tryp:
 27318 0000252E 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27319 00002531 7511                    	jne	short tryk
 27320                                  
 27321                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27322                                  ;;ifdef	MULTI_CONFIG
 27323                                  ;       call    query_user      ; query the user if config_cmd
 27324                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27325                                  ;;endif
 27326                                  
 27327 00002533 E86908                  	call	parseline
 27328 00002536 7209                    	jc	short trypbad
 27329 00002538 E88907                  	call	setparms
 27330 0000253B E8BF07                  	call	diddleback
 27331                                  
 27332                                  ; No error check here, because setparms and diddleback have no error 
 27333                                  ; returns, and setparms as coded now can return with carry set. 
 27334                                  ;       jc	short trypbad
 27335                                  
 27336                                  	; 12/12/2022
 27337                                  	; cf = 0
 27338                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27339                                  	;jc	short trypbad
 27340                                  	
 27341 0000253E E9B7FA                  	jmp	coff
 27342                                  trypbad:
 27343 00002541 E9BB01                  	jmp	badop
 27344                                  
 27345                                  ;--------------------------------------------------------------------------
 27346                                  ; setting internal stack parameters
 27347                                  ; stacks=m,n where
 27348                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27349                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27350                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27351                                  ;	any combinations that are not within the specified limits will
 27352                                  ;	result in "unrecognized command" error.
 27353                                  ;--------------------------------------------------------------------------
 27354                                  
 27355                                  ;**************************************************************************
 27356                                  ;									  *
 27357                                  ; function: parse the parameters of stacks= command.			  *
 27358                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27359                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27360                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27361                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27362                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27363                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27364                                  ;	    (or if "0,0" pair has been entered.)			  *
 27365                                  ; input :								  *
 27366                                  ;	es:si -> parameters in command line.				  *
 27367                                  ; output:								  *
 27368                                  ;	set the variables stack_count,stack_size.			  *
 27369                                  ;									  *
 27370                                  ; subroutines to be called:						  *
 27371                                  ;	sysinit_parse							  *
 27372                                  ; logic:								  *
 27373                                  ; {									  *
 27374                                  ;	set di points to stks_parms;					  *
 27375                                  ;	set dx,cx to 0; 						  *
 27376                                  ;	while (end of command line)					  *
 27377                                  ;	{ sysinit_parse;						  *
 27378                                  ;	  if (no error) then						  *
 27379                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27380                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27381                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27382                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27383                                  ;	     }								  *
 27384                                  ;	  else	/*error exit*/						  *
 27385                                  ;	     error exit;						  *
 27386                                  ;	};								  *
 27387                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27388                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27389                                  ;	 else error_exit;						  *
 27390                                  ; };									  *
 27391                                  ;**************************************************************************
 27392                                  
 27393                                  tryk:
 27394                                          ;if      stacksw
 27395                                  
 27396 00002544 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27397 00002547 7402                    	je	short do_tryk
 27398                                  skip_it4:
 27399 00002549 EB74                    	jmp	short trys	; 15/12/2022
 27400                                  do_tryk:
 27401                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27402                                  ;;ifdef	MULTI_CONFIG
 27403                                  ;       call    query_user              ; query the user if config_cmd
 27404                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27405                                  ;;endif
 27406                                  	; 14/12/2022
 27407                                  	; ds = cs
 27408                                  
 27409 0000254B BF[1B1E]                	mov	di,stks_parms
 27410 0000254E 31C9                    	xor	cx,cx
 27411                                  	; 04/01/2023
 27412                                  	;mov	dx,cx
 27413                                  do79:
 27414 00002550 E88901                  	call	sysinit_parse
 27415 00002553 730B                    	jnc	short if79		; parse error
 27416                                  
 27417 00002555 BA[6B38]                	mov	dx,badstack		; "invalid stack parameter"
 27418 00002558 E8240E                  	call	print			;  and show messages and end the search loop.
 27419 0000255B E8EC01                  	call	error_line
 27420                                  	;jmp	sr79
 27421                                  	; 11/12/2022
 27422 0000255E EB39                    	jmp	short sr79
 27423                                  if79:
 27424 00002560 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27425 00002563 7412                    	je	short en79		; then end the $endloop
 27426                                  
 27427                                  	; 14/12/2022
 27428                                  	; ds = cs
 27429                                  
 27430                                  	;;mov	ax,[cs:rv_dword]
 27431                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27432                                  	;mov	ax,[rv_dword]
 27433 00002565 A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27434                                  
 27435 00002568 83F901                  	cmp	cx,1
 27436 0000256B 7505                    	jne	short if83
 27437                                  
 27438                                  	; 14/12/2022
 27439                                  	;mov	[cs:p_stack_count],ax
 27440                                  	;jmp	short en83
 27441 0000256D A3[501E]                	mov	[p_stack_count],ax
 27442 00002570 EBDE                    	jmp	short do79
 27443                                  if83:
 27444                                  	; 14/12/2022
 27445                                  	;mov	[cs:p_stack_size],ax
 27446 00002572 A3[521E]                	mov	[p_stack_size],ax
 27447                                  en83:
 27448 00002575 EBD9                    	jmp	short do79
 27449                                  en79:
 27450                                  	; 14/12/2022
 27451                                  	; ds = cs
 27452 00002577 A1[501E]                	mov	ax,[p_stack_count]
 27453 0000257A 09C0                    	or	ax,ax
 27454 0000257C 741E                    	jz	short if87		
 27455                                  
 27456                                  	; 14/12/2022
 27457                                  	;cmp	word [p_stack_count],0
 27458                                  	;;cmp	word [cs:p_stack_count],0
 27459                                  	;je	short if87
 27460                                  
 27461                                  	; 14/12/2022
 27462 0000257E 83F808                  	cmp	ax, mincount ; 8
 27463                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27464                                  	; 15/12/2022
 27465 00002581 721F                    	jb	short en87
 27466 00002583 833E[521E]20            	cmp	word [p_stack_size],minsize ; 32
 27467                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27468                                  	; 15/12/2022
 27469 00002588 7218                    	jb	short en87
 27470                                  if94:
 27471                                  	; 14/12/2022
 27472                                  	; ds = cs
 27473                                  	; ax = [p_stack_count]
 27474                                  	;mov	ax,[p_stack_count]
 27475                                  	;;mov	ax,[cs:p_stack_count]
 27476 0000258A A3[8A02]                	mov	[stack_count],ax
 27477                                  	;mov	[cs:stack_count],ax
 27478                                  	;mov	ax,[cs:p_stack_size]
 27479 0000258D A1[521E]                	mov	ax,[p_stack_size]
 27480                                  	;mov	[cs:stack_size],ax
 27481 00002590 A3[8C02]                	mov	[stack_size],ax
 27482                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27483 00002593 C706[8E02]FFFF          	mov	word [stack_addr],-1
 27484                                  sr79:
 27485 00002599 E95CFA                  	jmp	coff
 27486                                  
 27487                                  if87:
 27488                                  	; 14/12/2022
 27489 0000259C 3906[521E]              	cmp	[p_stack_size],ax ; 0
 27490 000025A0 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27491                                  	;cmp	word [cs:p_stack_size],0
 27492                                  	;je	short if94
 27493                                  en87:
 27494                                  	; 15/12/2022
 27495                                  	; ([p_stack_count] is invalid, use default values)
 27496                                  	; 14/12/2022
 27497                                  	; ds = cs
 27498 000025A2 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27499 000025A8 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27500 000025AE C706[8E02]0000          	mov	word [stack_addr],0
 27501                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27502                                  	;				; reset to default value.
 27503                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27504                                  	;mov	word [cs:stack_addr],0
 27505                                  
 27506 000025B4 BA[6B38]                	mov	dx,badstack
 27507 000025B7 E8C50D                  	call	print
 27508 000025BA E88D01                  	call	error_line
 27509 000025BD EBDA                    	jmp	short sr79
 27510                                  
 27511                                  ; 15/12/2022
 27512                                  %if 0
 27513                                  	mov	di,stks_parms
 27514                                  	xor	cx,cx
 27515                                  	; 04/01/2023
 27516                                  	;mov	dx,cx
 27517                                  do79:
 27518                                  	call	sysinit_parse
 27519                                  	jnc	short if79		; parse error
 27520                                  
 27521                                  	mov	dx,badstack		; "invalid stack parameter"
 27522                                  	call	print			;  and show messages and end the search loop.
 27523                                  	call	error_line
 27524                                  	;jmp	sr79
 27525                                  	; 11/12/2022
 27526                                  	jmp	short sr79
 27527                                  if79:
 27528                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27529                                  	je	short en79		; then end the $endloop
 27530                                  
 27531                                  	;mov	ax,[cs:rv_dword]
 27532                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27533                                  	cmp	cx,1
 27534                                  	jne	short if83
 27535                                  
 27536                                  	mov	[cs:p_stack_count],ax
 27537                                  	jmp	short en83
 27538                                  if83:
 27539                                  	mov	[cs:p_stack_size],ax
 27540                                  en83:
 27541                                  	jmp	short do79
 27542                                  en79:
 27543                                  	cmp	word [cs:p_stack_count],0
 27544                                  	je	short if87
 27545                                  
 27546                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27547                                  	jb	short ll88
 27548                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27549                                  	jnb	short if88
 27550                                  ll88:
 27551                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27552                                  if88:
 27553                                  	jmp	short en87
 27554                                  
 27555                                  	; 11/12/2022
 27556                                  if94:
 27557                                  	mov	ax,[cs:p_stack_count]
 27558                                  	mov	[cs:stack_count],ax
 27559                                  	mov	ax,[cs:p_stack_size]
 27560                                  	mov	[cs:stack_size],ax
 27561                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27562                                  sr79:
 27563                                  	jmp	coff
 27564                                  
 27565                                  if87:
 27566                                  	cmp	word [cs:p_stack_size],0
 27567                                  	je	short en87
 27568                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27569                                  en87:
 27570                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27571                                  	jne	short if94
 27572                                  
 27573                                  	mov	word [cs:stack_count],defaultcount ; 9
 27574                                  					; reset to default value.
 27575                                  	mov	word [cs:stack_size],defaultsize ; 128
 27576                                  	mov	word [cs:stack_addr],0
 27577                                  
 27578                                  	mov	dx,badstack
 27579                                  	call	print
 27580                                  	call	error_line
 27581                                  	jmp	short sr79
 27582                                  
 27583                                  %endif
 27584                                  
 27585                                  ; 11/12/2022
 27586                                  %if 0 
 27587                                  
 27588                                  if94:
 27589                                  	mov	ax,[cs:p_stack_count]
 27590                                  	mov	[cs:stack_count],ax
 27591                                  	mov	ax,[cs:p_stack_size]
 27592                                  	mov	[cs:stack_size],ax
 27593                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27594                                  sr79:
 27595                                  	jmp	coff
 27596                                  
 27597                                  %endif
 27598                                  
 27599                                  	;endif
 27600                                  
 27601                                  ;------------------------------------------------------------------------
 27602                                  ; shell command
 27603                                  ;------------------------------------------------------------------------
 27604                                  
 27605                                  trys:
 27606 000025BF 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27607 000025C2 753C                    	jne	short tryx
 27608                                  
 27609                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27610                                  ;;ifdef	MULTI_CONFIG
 27611                                  ;       call    query_user              ; query the user if config_cmd
 27612                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27613                                  ;       mov	byte [cs:newcmd],1
 27614                                  ;;endif
 27615                                  
 27616                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27617                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27618                                  	;mov	byte [cs:command_line+1],0
 27619                                  	; 15/12/2022
 27620                                  	; ds = cs
 27621 000025C4 C606[AA02]00            	mov	byte [command_line+1],0
 27622                                  
 27623 000025C9 BF[5634]                        mov     di,commnd+1		; we already have the first char
 27624 000025CC 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27625                                  storeshell:
 27626 000025CF E86101                  	call	getchr
 27627 000025D2 08C0                            or      al,al                   ; this is the normal case: "organize"
 27628 000025D4 7419                            jz	short getshparms	; put a ZERO right after the filename
 27629                                  
 27630 000025D6 3C20                            cmp     al," "                  ; this may happen if there are no args
 27631 000025D8 7205                            jb	short endofshell	; I suppose...
 27632 000025DA 8805                    	mov	[di],al
 27633 000025DC 47                      	inc	di
 27634                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27635                                          ;jb	short storeshell	; commnd (the filename)
 27636                                          ;jmp	short endofshell
 27637                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27638 000025DD EBF0                    	jmp	short storeshell
 27639                                  
 27640                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27641                                  ;getshparms:
 27642                                  ;	mov     byte [di],0		; zero-terminate the filename
 27643                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27644                                  ;
 27645                                  ;parmloop:
 27646                                  ;	call	getchr
 27647                                  ;	cmp	al," "
 27648                                  ;	jb	short endofparms
 27649                                  ;	mov	[di],al
 27650                                  ;	inc	di
 27651                                  ;	cmp     di,command_line+126
 27652                                  ;	jb	short parmloop
 27653                                  ;endofparms:
 27654                                  ;	mov     cx,di
 27655                                  ;	sub     cx,command_line+1
 27656                                  ;	mov     [cs:command_line],cl
 27657                                  ;
 27658                                  ;endofshell:
 27659                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27660                                  ;					; the command-line as the case may be)
 27661                                  ;skipline:
 27662                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27663                                  ;       je	short endofline		; the line: watch for ever-present LF
 27664                                  ;call	getchr
 27665                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27666                                  ;
 27667                                  ;endofline:
 27668                                  ;       jmp     conflp
 27669                                  
 27670                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27671                                  endofshell:
 27672 000025DF C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27673                                  					; the command-line as the case may be)
 27674 000025E2 E84E01                  	call	getchr
 27675                                  skipline:
 27676 000025E5 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27677 000025E7 7403                    	je	short endofline		; the line: watch for ever-present LF
 27678 000025E9 E84701                  	call	getchr
 27679                                  endofline:
 27680 000025EC E9E4F9                  	jmp     conflp
 27681                                  
 27682                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27683                                  getshparms:
 27684                                  	; 18/12/2022
 27685                                  	; al = 0
 27686 000025EF 8805                    	mov	[di],al ; 0
 27687                                  	;mov	byte [di],0		; zero-terminate the filename
 27688 000025F1 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27689                                  parmloop:
 27690 000025F4 E83C01                  	call	getchr
 27691 000025F7 3C20                    	cmp	al," " ; 20h
 27692 000025F9 72E4                    	jb	short endofshell
 27693 000025FB 8805                    	mov	[di],al
 27694 000025FD 47                      	inc	di
 27695 000025FE EBF4                    	jmp	short parmloop
 27696                                  
 27697                                  ;------------------------------------------------------------------------
 27698                                  ; fcbs command
 27699                                  ;------------------------------------------------------------------------
 27700                                  
 27701                                  ;************************************************************************
 27702                                  ; function: parse the parameters of fcbs= command.			*
 27703                                  ;									*
 27704                                  ; input :								*
 27705                                  ;	es:si -> parameters in command line.				*
 27706                                  ; output:								*
 27707                                  ;	set the variables fcbs,keep.					*
 27708                                  ;									*
 27709                                  ; subroutines to be called:						*
 27710                                  ;	sysinit_parse							*
 27711                                  ; logic:								*
 27712                                  ; {									*
 27713                                  ;	set di points to fcbs_parms;					*
 27714                                  ;	set dx,cx to 0; 						*
 27715                                  ;	while (end of command line)					*
 27716                                  ;	{ sysparse;							*
 27717                                  ;	  if (no error) then						*
 27718                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27719                                  ;		   fcbs = result_val._$P_picked_val;			*
 27720                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27721                                  ;		   keep = result_val._$P_picked_val;			*
 27722                                  ;	     }								*
 27723                                  ;	  else	/*error exit*/						*
 27724                                  ;	     error exit;						*
 27725                                  ;	};								*
 27726                                  ; };									*
 27727                                  ;************************************************************************
 27728                                  
 27729                                  tryx:
 27730 00002600 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27731                                          ;jne	short try1
 27732                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27733 00002603 752F                    	jne	short tryy	; comment command
 27734                                  
 27735                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27736                                  ;;ifdef	MULTI_CONFIG
 27737                                  ;       call    query_user      ; query the user if config_cmd
 27738                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27739                                  ;;endif
 27740                                  
 27741 00002605 BF[CF1D]                	mov	di,fcbs_parms
 27742 00002608 31C9                    	xor	cx,cx
 27743                                  	; 04/01/2023
 27744                                  	;mov	dx,cx
 27745                                  do98:
 27746 0000260A E8CF00                  	call	sysinit_parse
 27747                                          ; 04/01/2023
 27748                                  	;jnc	short if98	; parse error
 27749                                          ;call	badparm_p	;  and show messages and end the search loop.
 27750                                  	;jmp	short sr98
 27751                                  	;------------------------
 27752                                  	; 04/01/2023
 27753 0000260D 724B                    	jc	short badparm_p_coff
 27754                                  if98:
 27755 0000260F 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27756 00002612 7412                    	je	short en98	; then end the $endloop
 27757                                  
 27758                                  	;;mov	al,[cs:rv_dword]
 27759                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27760                                  	; 15/12/2022
 27761                                  	; ds = cs
 27762 00002614 A0[4C1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27763 00002617 83F901                  	cmp	cx,1		; the first positional?
 27764 0000261A 7505                    	jne	short if102
 27765                                  	;mov	[cs:p_fcbs],al
 27766                                  	; 15/12/2022
 27767 0000261C A2[041E]                	mov	[p_fcbs],al
 27768                                  	;jmp	short en102
 27769 0000261F EBE9                    	jmp	short do98
 27770                                  if102:
 27771                                  	;mov	[cs:p_keep],al
 27772                                  	; 15/12/2022
 27773 00002621 A2[051E]                	mov	[p_keep],al
 27774                                  en102:
 27775 00002624 EBE4                    	jmp	short do98
 27776                                  en98:
 27777                                  	; 15/12/2022
 27778                                  	; ds = cs
 27779 00002626 A0[041E]                	mov	al,[p_fcbs]
 27780 00002629 A2[9E02]                	mov	[FCBS],al
 27781 0000262C C606[9F02]00            	mov	byte [KEEP],0
 27782                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27783                                  	;mov	[cs:FCBS],al	 ; M017
 27784                                  	;mov	byte [cs:KEEP],0 ; M017
 27785                                  sr98:
 27786 00002631 E9C4F9                  	jmp	coff
 27787                                  
 27788                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27789                                  ;-------------------------------------------------------------------------
 27790                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27791                                  ;		line number
 27792                                  ;-------------------------------------------------------------------------
 27793                                  
 27794                                  tryy:
 27795 00002634 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27796 00002637 750B                    	jne	short try0
 27797                                  
 27798                                  donothing:
 27799                                  	; 15/12/2022
 27800                                  	; ds = cs
 27801 00002639 FF0E[D603]              	dec	word [chrptr]
 27802 0000263D FF06[D203]              	inc	word [count]
 27803                                  	; 02/11/2022
 27804                                  	;dec	word [cs:chrptr]
 27805                                  	;inc	word [cs:count]
 27806                                  
 27807 00002641 E9B4F9                  	jmp	coff
 27808                                  
 27809                                  ;------------------------------------------------------------------------
 27810                                  ; rem command
 27811                                  ;------------------------------------------------------------------------
 27812                                  
 27813                                  try0:				; do nothing with this line.
 27814 00002644 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27815 00002647 74F0                    	je	short donothing
 27816                                  
 27817                                  ; 07/04/2019 - Retro DOS v4.0
 27818                                  
 27819                                  ;-----------------------------------------------------------------------
 27820                                  ; switches command
 27821                                  ;-----------------------------------------------------------------------
 27822                                  
 27823                                  ;***********************************************************************
 27824                                  ;								       *
 27825                                  ; function: parse the option switches specified.		       *
 27826                                  ; note - this command is intended for the future use also.	       *
 27827                                  ; when we need to set system data flag,use this command.	       *
 27828                                  ;								       *
 27829                                  ; input :							       *
 27830                                  ;	es:si -> parameters in command line.			       *
 27831                                  ; output:							       *
 27832                                  ;	p_swit_k set if /k option chosen.			       *
 27833                                  ;								       *
 27834                                  ; subroutines to be called:					       *
 27835                                  ;	sysinit_parse						       *
 27836                                  ; logic:							       *
 27837                                  ; {								       *
 27838                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27839                                  ;	set dx,cx to 0; 					       *
 27840                                  ;	while (end of command line)				       *
 27841                                  ;	{ sysinit_parse;					       *
 27842                                  ;	  if (no error) then					       *
 27843                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27844                                  ;		    p_swit_k = 1				       *
 27845                                  ;	       endif						       *
 27846                                  ;	  else {show error message;error exit}			       *
 27847                                  ;	};							       *
 27848                                  ; };								       *
 27849                                  ;								       *
 27850                                  ;***********************************************************************
 27851                                  
 27852                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27853                                  
 27854                                  try1:
 27855 00002649 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27856 0000264C 7402                    	je	short do_try1	; switches= command entered?
 27857                                  skip_it5:
 27858                                  	;jmp	tryv
 27859                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27860 0000264E EB7A                    	jmp	tryz
 27861                                  
 27862                                  do_try1:
 27863                                  
 27864                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27865                                  ;;ifdef	MULTI_CONFIG
 27866                                  ;       call    query_user      ; query the user if config_cmd
 27867                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27868                                  ;;endif
 27869                                  
 27870 00002650 BF[691E]                	mov	di,swit_parms
 27871 00002653 31C9                    	xor	cx,cx
 27872                                  	; 04/01/2023
 27873                                  	;mov	dx,cx
 27874                                  do110:
 27875 00002655 E88400                  	call	sysinit_parse
 27876 00002658 7306                    	jnc	short if110	; parse error
 27877                                  	;call	badparm_p	;  and show messages and end the search loop.
 27878                                  	;jmp	short sr110
 27879                                  	; -----------------------
 27880                                  	; 04/01/2023
 27881                                  badparm_p_coff:
 27882 0000265A E8AE00                  	call	badparm_p
 27883 0000265D E998F9                  	jmp	coff
 27884                                  	;------------------------
 27885                                  if110:
 27886 00002660 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27887 00002663 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27888                                  
 27889                                  	; 15/12/2022
 27890                                  	; ds = cs
 27891                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27892                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27893 00002665 813E[4A1D][811E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27894 0000266B 7507                    	jne	short if115	;				;M059
 27895                                  	; 15/12/2022
 27896 0000266D C606[9C1E]01            	mov	byte [p_swit_k],1
 27897                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27898 00002672 EBE1                    	jmp	short do110
 27899                                  if115:	
 27900                                  	; 15/12/2022							;M059
 27901                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27902                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27903 00002674 813E[4A1D][8D1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27904 0000267A 7507                    	jne	short if116					;M059 M063
 27905                                  	; 15/12/2022
 27906 0000267C C606[9D1E]01            	mov	byte [p_swit_t],1
 27907                                  	;mov	byte [cs:p_swit_t],1				;M059
 27908 00002681 EBD2                    	jmp	short do110					;M059
 27909                                  if116:
 27910                                  	; 15/12/2022
 27911                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27912                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27913 00002683 813E[4A1D][991E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27914 00002689 75CA                    	jne	short do110					;M063
 27915                                  	; 15/12/2022
 27916 0000268B C606[9E1E]01            	mov	byte [p_swit_w],1
 27917                                  	;mov	byte [cs:p_swit_w],1				;M063
 27918 00002690 EBC3                    	jmp	short do110					;M063
 27919                                  en110:
 27920                                  	; 15/12/2022
 27921                                  	; ds = cs
 27922 00002692 803E[9C1E]01            	cmp	byte [p_swit_k],1
 27923                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27924 00002697 1E                      	push	ds
 27925                                  	;;mov	ax,Bios_Data
 27926                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27927                                  	; 21/10/2022
 27928 00002698 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27929 0000269B 8ED8                    	mov	ds,ax
 27930 0000269D 750A                    	jne	short if117
 27931 0000269F C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27932 000026A4 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27933                                  if117:
 27934                                  	; 15/12/2022
 27935                                  	; ds <> cs
 27936 000026A9 2EA0[9D1E]              	mov	al,[cs:p_swit_t]				;M059
 27937 000026AD A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27938                                  
 27939 000026B0 2E803E[9E1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27940 000026B6 740E                    	je	short skip_dos_flag				;M063
 27941 000026B8 06                      	push	es
 27942 000026B9 53                      	push	bx
 27943 000026BA B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27944 000026BC CD21                    	int	21h						;M063
 27945                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27946                                  			; Return: ES:BX -> DOS list of lists
 27947                                  	;or	bytes [es:86h],2
 27948 000026BE 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27949 000026C4 5B                      	pop	bx
 27950 000026C5 07                      	pop	es
 27951                                  skip_dos_flag:							;M063
 27952 000026C6 1F                      	pop	ds
 27953                                  sr110:
 27954 000026C7 E92EF9                  	jmp	coff
 27955                                  
 27956                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27957                                  ;
 27958                                  ;tryv:
 27959                                  ;
 27960                                  ;;ifdef	MULTI_CONFIG
 27961                                  ;;------------------------------------------------------------------------
 27962                                  ;; set command (as in "set var=value<cr/lf>")
 27963                                  ;;------------------------------------------------------------------------
 27964                                  ;
 27965                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27966                                  ;       jne	short tryn
 27967                                  ;       call    query_user      ; query the user if config_cmd
 27968                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27969                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 27970                                  ;       jnc	short sr110	; no error
 27971                                  ;err:    
 27972                                  ;	call    error_line      ; whoops, display error in line XXX
 27973                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 27974                                  ;
 27975                                  ;;------------------------------------------------------------------------
 27976                                  ;; numlock command (as in "numlock=on|off")
 27977                                  ;;------------------------------------------------------------------------
 27978                                  ;tryn:
 27979                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 27980                                  ;       jne	short tryy            ;
 27981                                  ;       call    query_user      ; query thye user if config_cmd
 27982                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 27983                                  ;       call    set_numlock
 27984                                  ;       jc	short err
 27985                                  ;       jmp	short sr110	; all done
 27986                                  ;
 27987                                  ;;endif	;MULTI_CONFIG
 27988                                  
 27989                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27990                                  ;;-------------------------------------------------------------------------
 27991                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 27992                                  ;;		line number
 27993                                  ;;-------------------------------------------------------------------------
 27994                                  ;
 27995                                  ;tryy:
 27996                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 27997                                  ;	jne	short try0
 27998                                  ;donothing:
 27999                                  ;	dec	word [chrptr]
 28000                                  ;	inc	word [count]
 28001                                  ;	jmp	coff
 28002                                  ;
 28003                                  ;;------------------------------------------------------------------------
 28004                                  ;; rem command
 28005                                  ;;------------------------------------------------------------------------
 28006                                  ;
 28007                                  ;try0:				;do nothing with this line.
 28008                                  ;	cmp     ah,CONFIG_REM ; '0'
 28009                                  ;	je	short donothing
 28010                                  
 28011                                  ; 30/10/2022
 28012                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28013                                  
 28014                                  ;------------------------------------------------------------------------
 28015                                  ; bogus command
 28016                                  ;------------------------------------------------------------------------
 28017                                  
 28018                                  tryz:
 28019 000026CA 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28020                                  	;je	short donothing
 28021                                  	; 02/11/2022
 28022 000026CD 740A                    	je	short tryz_donothing
 28023                                  
 28024 000026CF FF0E[D603]              	dec	word [chrptr]
 28025 000026D3 FF06[D203]              	inc	word [count]
 28026 000026D7 EB26                    	jmp	short badop
 28027                                  
 28028                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28029                                  tryz_donothing:
 28030 000026D9 E95DFF                  	jmp	donothing
 28031                                  
 28032                                  ; 07/04/2019 - Retro DOS v4.0
 28033                                  
 28034                                  ;------------------------------------------------------------------------------
 28035                                  
 28036                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28037                                  ;
 28038                                  ;
 28039                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28040                                  ;;
 28041                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28042                                  ;
 28043                                  ;CheckProtmanArena:
 28044                                  ;	push	es
 28045                                  ;	mov	ax,[cs:area]	; get our arena header
 28046                                  ;	dec	ax
 28047                                  ;	mov	es,ax
 28048                                  ;	add	ax,[es:3]	; find end of arena
 28049                                  ;	inc	ax
 28050                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28051                                  ;	ja	short CheckProtmanDone
 28052                                  ;
 28053                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28054                                  ;CheckProtmanDone:
 28055                                  ;	pop	es
 28056                                  ;	retn
 28057                                  
 28058                                  ;------------------------------------------------------------------------------
 28059                                  
 28060                                  sysinit_parse:
 28061                                  
 28062                                  ;------------------------------------------------------------------------------
 28063                                  ;set up registers for sysparse
 28064                                  ;in)	es:si -> command line in confbot
 28065                                  ;	di -> offset of the parse control definition.
 28066                                  ;
 28067                                  ;out)	calls sysparse.
 28068                                  ;	carry will set if parse error.
 28069                                  ;	*** the caller should check the eol condition by looking at ax
 28070                                  ;	*** after each call.
 28071                                  ;	*** if no parameters are found,then ax will contain a error code.
 28072                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28073                                  ;	***  the caller should use cs:@ instead of es:@.
 28074                                  ;	cx register should be set to 0 at the first time the caller calls this
 28075                                  ;	 procedure.
 28076                                  ;	ax - exit code
 28077                                  ;	bl - terminated delimeter code
 28078                                  ;	cx - new positional ordinal
 28079                                  ;	si - set to pase scanned operand
 28080                                  ;	dx - selected result buffer
 28081                                  ;------------------------------------------------------------------------------
 28082                                  
 28083                                  	; 24/10/2022
 28084 000026DC 06                      	push	es			;save es,ds
 28085 000026DD 1E                      	push	ds
 28086                                  
 28087 000026DE 06                      	push	es
 28088 000026DF 1F                      	pop	ds			;now ds:si -> command line
 28089                                  
 28090 000026E0 0E                      	push	cs
 28091 000026E1 07                      	pop	es			;now es:di -> control definition
 28092                                  
 28093 000026E2 2E8C1E[3114]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28094 000026E7 2E8936[2F14]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28095                                  	;mov	dx,0
 28096                                  	; 04/01/2023
 28097 000026EC 29D2                    	sub	dx,dx ; 0
 28098 000026EE E8E8ED                  	call	SysParse
 28099 000026F1 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 28100                                  
 28101                                  ;**cas note:  when zero true after cmp, carry clear
 28102                                  
 28103                                  	;je	short ll4
 28104                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28105                                  	; 12/12/2022
 28106 000026F4 7406                    	je	short en4 ; cf=0
 28107 000026F6 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28108                                  	;jne	short if4
 28109                                  	; 12/12/2022
 28110 000026F9 7401                    	je	short en4 ; cf=0
 28111                                  
 28112                                  ; 12/12/2022
 28113                                  ;ll4:
 28114                                  ;	; 12/12/2022
 28115                                  ;	; cf=0
 28116                                  ;	;clc
 28117                                  ;	jmp	short en4
 28118                                  
 28119                                  if4:
 28120                                  	; 24/10/2022
 28121 000026FB F9                      	stc
 28122                                  en4:
 28123 000026FC 1F                      	pop	ds
 28124 000026FD 07                      	pop	es
 28125 000026FE C3                      	retn
 28126                                  
 28127                                  ; 11/12/2022
 28128                                  %if 0
 28129                                  
 28130                                  ;----------------------------------------------------------------------------
 28131                                  ;
 28132                                  ; procedure : badop_p
 28133                                  ;
 28134                                  ;             same thing as badop,but will make sure to set ds register back
 28135                                  ;             to sysinitseg and return back to the caller.
 28136                                  ;
 28137                                  ;----------------------------------------------------------------------------
 28138                                  
 28139                                  badop_p:
 28140                                  	push	cs
 28141                                  	pop	ds		;set ds to configsys seg.
 28142                                  	mov	dx,badopm
 28143                                  	call	print
 28144                                          ;call	error_line
 28145                                  	;retn
 28146                                  	; 11/12/2022
 28147                                  	jmp	error_line
 28148                                  
 28149                                  %endif
 28150                                  
 28151                                  ;----------------------------------------------------------------------------
 28152                                  ;
 28153                                  ; label : badop
 28154                                  ;
 28155                                  ;----------------------------------------------------------------------------
 28156                                  
 28157                                  badop:	
 28158 000026FF BA[2C37]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28159 00002702 E87A0C                  	call	print
 28160 00002705 E84200                  	call	error_line	;show "error in config.sys ..." .
 28161 00002708 E9EDF8                  	jmp	coff
 28162                                  
 28163                                  ;----------------------------------------------------------------------------
 28164                                  ;
 28165                                  ; procedure : badparm_p
 28166                                  ;
 28167                                  ;             show "bad command or parameters - xxxxxx"
 28168                                  ;             in badparm_seg,badparm_off -> xxxxx
 28169                                  ;
 28170                                  ;----------------------------------------------------------------------------
 28171                                  
 28172                                  	; 24/10/2022
 28173                                  badparm_p:
 28174                                  	; 11/12/2022
 28175                                  	; ds = cs
 28176                                  	; 11/12/2022
 28177                                  	;push	ds ; *
 28178 0000270B 52                      	push	dx
 28179 0000270C 56                      	push	si
 28180                                  
 28181                                  	; 11/12/2022
 28182                                  	; ds = cs
 28183                                  	;push	cs
 28184                                  	;pop	ds
 28185                                  
 28186 0000270D BA[5337]                	mov	dx,badparm
 28187 00002710 E86C0C                  	call	print			; "bad command or parameters - "
 28188 00002713 C536[2F14]              	lds	si,[badparm_ptr]
 28189                                  
 28190                                  ;	print "xxxx" until cr.
 28191                                  
 28192                                  do1:
 28193 00002717 8A14                    	mov	dl,[si]			; get next character
 28194 00002719 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28195 0000271C 7407                    	je	short en1		; exit loop if so
 28196                                  
 28197 0000271E B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28198 00002720 CD21                    	int	21h			; display character
 28199 00002722 46                      	inc	si			; next character
 28200 00002723 EBF2                    	jmp	short do1
 28201                                  en1:
 28202 00002725 0E                      	push	cs
 28203 00002726 1F                      	pop	ds
 28204                                  
 28205 00002727 BA[5037]                	mov	dx,crlfm
 28206 0000272A E8520C                  	call	print
 28207 0000272D E81A00                  	call	error_line
 28208                                  
 28209 00002730 5E                      	pop	si
 28210 00002731 5A                      	pop	dx
 28211                                  	; 11/12/2022
 28212                                  	;pop	ds ; *
 28213                                  badparmp_ret:
 28214 00002732 C3                      	retn
 28215                                  
 28216                                  ;----------------------------------------------------------------------------
 28217                                  ;
 28218                                  ; procedure : getchr
 28219                                  ;
 28220                                  ;----------------------------------------------------------------------------
 28221                                  
 28222                                  	; 24/10/2022
 28223                                  getchr:
 28224                                  	; 12/12/2022
 28225                                  	;push	cx
 28226                                  	;mov	cx,[count]
 28227                                  	;jcxz	nochar
 28228                                  	; 12/12/2022
 28229 00002733 833E[D203]01            	cmp	word [count],1 
 28230 00002738 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 28231                                  	
 28232 0000273A 8B36[D603]              	mov	si,[chrptr]
 28233 0000273E 268A04                  	mov	al,[es:si]
 28234 00002741 FF0E[D203]              	dec	word [count]
 28235 00002745 FF06[D603]              	inc	word [chrptr]
 28236                                  	; 12/12/202
 28237                                  	; cf=0
 28238                                  	;clc
 28239                                  ;get_ret:
 28240                                  	;pop	cx
 28241                                  	;retn
 28242                                  nochar: 
 28243                                  	; 12/12/2022
 28244                                  	; cf=1
 28245                                  	;stc
 28246                                  	;jmp	short get_ret
 28247                                  	
 28248 00002749 C3                      	retn
 28249                                  
 28250                                  ; 11/12/2022
 28251                                  %if 0
 28252                                  
 28253                                  ;----------------------------------------------------------------------------
 28254                                  ;
 28255                                  ; procedure : incorrect_order
 28256                                  ;
 28257                                  ;             show "incorrect order in config.sys ..." message.
 28258                                  ;
 28259                                  ;----------------------------------------------------------------------------
 28260                                  
 28261                                  incorrect_order:
 28262                                  	mov	dx,badorder
 28263                                  	call	print
 28264                                  	call	showlinenum
 28265                                  	retn
 28266                                  
 28267                                  %endif
 28268                                  
 28269                                  ;----------------------------------------------------------------------------
 28270                                  ;
 28271                                  ; procedure : error_line
 28272                                  ;
 28273                                  ;             show "error in config.sys ..." message.
 28274                                  ;
 28275                                  ;----------------------------------------------------------------------------
 28276                                  
 28277                                  	; 11/12/2022
 28278                                  	; 24/10/2022
 28279                                  error_line:
 28280                                  	; 11/12/2022
 28281                                  	; ds = cs
 28282                                  	;push	cs
 28283                                  	;pop	ds
 28284                                  
 28285 0000274A BA[8838]                	mov	dx,errorcmd
 28286 0000274D E82F0C                  	call	print
 28287                                  	;call	showlinenum
 28288                                  	;retn
 28289                                  	; 11/12/2022
 28290                                  	;jmp	short shortlinemum
 28291                                  
 28292                                  ;----------------------------------------------------------------------------
 28293                                  ;
 28294                                  ; procedure : showlinenum
 28295                                  ;
 28296                                  ; convert the binary linecount to decimal ascii string in showcount
 28297                                  ; and display showcount at the current curser position.
 28298                                  ; in.) linecount
 28299                                  ;
 28300                                  ; out) the number is printed.
 28301                                  ;
 28302                                  ;----------------------------------------------------------------------------
 28303                                  
 28304                                  	; 11/12/2022
 28305                                  	; ds = cs
 28306                                  	; 24/10/2022
 28307                                  showlinenum:
 28308 00002750 06                      	push	es
 28309                                  	; 11/12/2022
 28310                                  	;push	ds
 28311 00002751 57                      	push	di
 28312                                  
 28313 00002752 0E                      	push	cs
 28314 00002753 07                      	pop	es		; es=cs
 28315                                  
 28316                                  	; 11/12/2022
 28317                                  	;push	cs
 28318                                  	;pop	ds
 28319                                  
 28320 00002754 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28321 00002757 B90A00                  	mov	cx,10		; decimal divide factor
 28322                                  	;mov	ax,[cs:linecount]
 28323                                  	; 11/12/2022
 28324 0000275A A1[2B03]                	mov	ax,[linecount]
 28325                                  sln_loop:
 28326                                  	; 11/12/2022
 28327 0000275D 39C8                    	cmp	ax,cx ; < 10 ?
 28328                                  	;cmp	ax,10		; < 10?
 28329 0000275F 720C                    	jb	short sln_last
 28330                                  
 28331 00002761 31D2                    	xor	dx,dx
 28332 00002763 F7F1                    	div	cx	; cx = 10
 28333 00002765 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28334 00002768 8815                    	mov	[di],dl
 28335 0000276A 4F                      	dec	di
 28336 0000276B EBF0                    	jmp	short sln_loop
 28337                                  
 28338                                  sln_last:
 28339 0000276D 0C30                    	or	al,30h	; "0"
 28340 0000276F 8805                    	mov	[di],al
 28341 00002771 89FA                    	mov	dx,di
 28342 00002773 E8090C                  	call	print		; show it.
 28343 00002776 5F                      	pop	di
 28344                                  	; 11/12/2022
 28345                                  	;pop	ds
 28346 00002777 07                      	pop	es
 28347 00002778 C3                      	retn
 28348                                  
 28349                                  ; 07/04/2019 - Retro DOS v4.0
 28350                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28351                                  
 28352                                  ;----------------------------------------------------------------------------
 28353                                  ;
 28354                                  ; procedure : ProcDOS
 28355                                  ;
 28356                                  ;	Process the result of DOS= parsing
 28357                                  ;
 28358                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28359                                  ;				= 2 for DOS=LOW
 28360                                  ;				= 3 for DOS=UMB
 28361                                  ;				= 4 for DOS=NOUMB
 28362                                  ;----------------------------------------------------------------------------
 28363                                  
 28364                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28365                                  	; (SYTSINIT:2AB5h)
 28366                                  ProcDOS:
 28367                                  	; 01/01/2023
 28368                                  	; ds = cs
 28369 00002779 30E4                    	xor	ah,ah
 28370                                  	;;mov	al,[cs:result_val_itag]
 28371                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28372                                  	; 04/01/2023
 28373 0000277B A0[491D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28374 0000277E 48                      	dec	ax
 28375 0000277F 7415                    	jz	short pd_hi
 28376 00002781 48                      	dec	ax
 28377 00002782 740E                    	jz	short pd_lo
 28378 00002784 48                      	dec	ax
 28379 00002785 7405                    	jz	short pd_umb
 28380                                  	;;mov	byte [cs:DevUMB],0
 28381                                  	; 18/12/2022
 28382                                  	;mov	byte [cs:DevUMB],ah ; 0
 28383                                  	; 01/01/2023
 28384 00002787 8826[F01E]              	mov	byte [DevUMB],ah ; 0
 28385 0000278B C3                      	retn
 28386                                  pd_umb:
 28387                                  	; 04/01/2023
 28388 0000278C C606[F01E]FF            	mov	byte [DevUMB],0FFh
 28389                                  	;mov	byte [cs:DevUMB],0FFh
 28390 00002791 C3                      	retn
 28391                                  pd_lo:
 28392                                  	; 04/01/2023
 28393 00002792 A2[6A02]                	mov	[runhigh],al ; 0
 28394                                  	; 18/12/2022
 28395                                  	;mov	[cs:runhigh],al ; 0
 28396                                  	;;mov	byte [cs:runhigh],0
 28397 00002795 C3                      	retn
 28398                                  pd_hi:
 28399                                  	; 04/01/2023
 28400 00002796 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28401                                  	;mov	byte [cs:runhigh],0FFh
 28402                                  limx:	; 11/12/2022
 28403 0000279B C3                      	retn
 28404                                  
 28405                                  ;----------------------------------------------------------------------------
 28406                                  ;
 28407                                  ; procedure : LieInt12Mem
 28408                                  ;
 28409                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28410                                  ;		alloclim set to the limit of low memory.
 28411                                  ;
 28412                                  ;	Output : none
 28413                                  ;
 28414                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28415                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28416                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28417                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28418                                  ;	converted into Ks and stored in 40:13h
 28419                                  ;
 28420                                  ;----------------------------------------------------------------------------
 28421                                  
 28422                                  LieInt12Mem:
 28423                                  	; 11/12/2022
 28424                                  	; ds = cs
 28425 0000279C A1[A302]                	mov	ax,[ALLOCLIM]
 28426                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28427                                  					; assuming that it is 3Com
 28428 0000279F E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28429 000027A2 740A                    	jz	short lim_set		; yes, lie to him differently
 28430                                  	; 13/05/2019
 28431                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28432                                  	;je	short limx		; no, don't lie
 28433                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28434                                  	; 11/12/2022
 28435                                  	; ds = cs
 28436 000027A4 803E[FF1E]00            	cmp	byte [DeviceHi],0
 28437 000027A9 74F0                    	je	short limx
 28438 000027AB A1[E61E]                	mov	ax,[DevLoadEnd]
 28439                                  lim_set:
 28440                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28441                                  	; 11/12/2022
 28442                                  	;call	SetInt12Mem
 28443                                  ;limx:
 28444                                  	;retn
 28445                                  	
 28446                                  	;jmp	short SetInt12Mem 
 28447                                  
 28448                                  ;----------------------------------------------------------------------------
 28449                                  ;
 28450                                  ; procedure : SetInt12Mem
 28451                                  ;
 28452                                  ;	Input : AX = Memory size to be set (in paras)
 28453                                  ;	Output : none
 28454                                  ;
 28455                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28456                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28457                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28458                                  ;	restoring the value of 40:13
 28459                                  ;
 28460                                  ;----------------------------------------------------------------------------
 28461                                  
 28462                                  	; 01/11/2022
 28463                                  SetInt12Mem:
 28464 000027AE 1E                      	push	ds
 28465 000027AF BB4000                  	mov	bx,40h
 28466 000027B2 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28467 000027B4 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28468 000027B8 2E891E[031F]            	mov	[cs:OldInt12Mem],bx	; save it
 28469 000027BD B106                    	mov	cl,6
 28470 000027BF D3E8                    	shr	ax,cl			; convert paras into Ks
 28471 000027C1 A31300                  	mov	[13h],ax		; Lie
 28472 000027C4 2EC606[021F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28473 000027CA 1F                      	pop	ds
 28474                                  ;limx:
 28475 000027CB C3                      	retn
 28476                                  
 28477                                  ;----------------------------------------------------------------------------
 28478                                  ;
 28479                                  ; procedure : TrueInt12Mem
 28480                                  ;
 28481                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28482                                  ;			  = 0ffh if we are lying
 28483                                  ;		OldInt12Mem = Saved value of 40:13h
 28484                                  ;
 28485                                  ;	Output : none
 28486                                  ;
 28487                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28488                                  ;	and resets the flag which indicates that we were lying
 28489                                  ;
 28490                                  ;----------------------------------------------------------------------------
 28491                                  
 28492                                  TrueInt12Mem:
 28493                                  	; 11/12/2022
 28494                                  	; ds = cs
 28495 000027CC 803E[021F]00            	cmp	byte [Int12Lied],0
 28496                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28497                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28498                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28499 000027D1 7412                    	je	short timx		; no, we weren't
 28500                                  	; 18/12/2022
 28501 000027D3 B84000                  	mov	ax,40h
 28502 000027D6 8826[021F]              	mov	[Int12Lied],ah ; 0
 28503                                  	;mov	byte [Int12Lied],0
 28504                                  	;mov	byte [cs:Int12Lied],0
 28505 000027DA 1E                      	push	ds
 28506                                  	;mov	ax,40h
 28507 000027DB 8ED8                    	mov	ds,ax
 28508 000027DD 2EA1[031F]              	mov	ax,[cs:OldInt12Mem]
 28509 000027E1 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28510 000027E4 1F                      	pop	ds
 28511                                  timx:
 28512 000027E5 C3                      	retn
 28513                                  
 28514                                  ;----------------------------------------------------------------------------
 28515                                  ;
 28516                                  ; procedure : IsIt3Com?
 28517                                  ;
 28518                                  ;	Input : DevEntry = Seg:0 of device driver
 28519                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28520                                  ;		 else Zero flag is reset
 28521                                  ;
 28522                                  ;----------------------------------------------------------------------------
 28523                                  
 28524                                  IsIt3Com:
 28525                                  	; 11/12/2022
 28526                                  	; ds = cs
 28527 000027E6 1E                      	push	ds
 28528 000027E7 06                      	push	es
 28529 000027E8 56                      	push	si
 28530                                  	; 11/12/2022
 28531 000027E9 C536[E81E]              	lds	si,[DevEntry]
 28532                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28533 000027ED 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28534 000027F0 0E                      	push	cs
 28535 000027F1 07                      	pop	es
 28536 000027F2 BF[051F]                	mov	di,ThreeComName
 28537 000027F5 B90800                  	mov	cx,8			; name length
 28538 000027F8 F3A6                    	rep	cmpsb
 28539 000027FA 5E                      	pop	si
 28540 000027FB 07                      	pop	es
 28541 000027FC 1F                      	pop	ds
 28542 000027FD C3                      	retn
 28543                                  
 28544                                  ;M020 : BEGIN
 28545                                  ;----------------------------------------------------------------------------
 28546                                  
 28547                                  UpdatePDB:
 28548 000027FE 1E                      	push	ds
 28549 000027FF B462                    	mov	ah,62h
 28550 00002801 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28551 00002803 8EDB                    	mov	ds,bx
 28552 00002805 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28553                                  	;mov	[2],bx
 28554 0000280A 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28555 0000280E 1F                      	pop	ds
 28556 0000280F C3                      	retn
 28557                                  
 28558                                  ; M020 : END
 28559                                  
 28560                                  ;----------------------------------------------------------------------------
 28561                                  
 28562                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28563                                  
 28564                                  %if 0
 28565                                  
 28566                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28567                                  ;include highexit.inc	; umb's, etc
 28568                                  
 28569                                  ; ----------------------------------------------------------------------
 28570                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28571                                  ; ----------------------------------------------------------------------
 28572                                  ; 07/04/2019 - Retro DOS v4.0
 28573                                  
 28574                                  ;******************************************************************************
 28575                                  ;
 28576                                  ; This file contains routines needed to parse and implement user-given
 28577                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28578                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28579                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28580                                  ;
 28581                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28582                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28583                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28584                                  ;    DH/LH module opts
 28585                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28586                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28587                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28588                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28589                                  ; available during the load.
 28590                                  ;
 28591                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28592                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28593                                  ; upper-memory block which was not specified by the user... in addition, if
 28594                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28595                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28596                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28597                                  ; free any UMBs so allocated.
 28598                                  ;
 28599                                  ; When a device driver loads, there is the additional problem of allocating its
 28600                                  ; initial load site; this should be restricted to the first UMB specified on
 28601                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28602                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28603                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28604                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28605                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28606                                  ;
 28607                                  ;******************************************************************************
 28608                                  
 28609                                  SWTCH	equ	'/'		; Switch character
 28610                                  
 28611                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28612                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28613                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28614                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28615                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28616                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28617                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28618                                  
 28619                                  CR	equ	0Dh		; Carriage Return
 28620                                  LF	equ	0Ah		; Line Feed
 28621                                  TAB	equ	09h		; Tab character (^I)
 28622                                  
 28623                                  ; -----------------------------------------------------------------------------
 28624                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28625                                  ; -----------------------------------------------------------------------------
 28626                                  ; ENTRY:       None
 28627                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28628                                  ; ERROR EXIT:  None
 28629                                  ; USES:        Flags, variables in highvar.inc
 28630                                  ; -----------------------------------------------------------------------------
 28631                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28632                                  ; are largely ignored, but it is initialized nonetheless.
 28633                                  ; -----------------------------------------------------------------------------
 28634                                  
 28635                                  InitVar:
 28636                                  	;pushreg <ax, cx, di, es>
 28637                                  	push	ax
 28638                                  	push	cx
 28639                                  	push	di
 28640                                  	push	es
 28641                                  
 28642                                  	;dataseg es			;Point ES into appropriate data segment
 28643                                  	push	cs
 28644                                  	pop	es
 28645                                  
 28646                                  	xor	ax,ax
 28647                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28648                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28649                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28650                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28651                                  					;Later is the # of the 1st spec'd UMB
 28652                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28653                                  
 28654                                  	cld
 28655                                  
 28656                                  	mov	cx,MAXUMB ; 16		;For each entry
 28657                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28658                                  	rep	stosb			;	Store 0
 28659                                  
 28660                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28661                                  	mov	di,UmbSize		;on the UmbSize array,
 28662                                  	rep	stosw			;	Store 0
 28663                                  
 28664                                  	;normseg es			; Return ES
 28665                                  
 28666                                  	;popreg	<es, di, cx, ax>
 28667                                  	pop	es
 28668                                  	pop	di
 28669                                  	pop	cx
 28670                                  	pop	ax	 	
 28671                                  
 28672                                  	retn
 28673                                  
 28674                                  ; -----------------------------------------------------------------------------
 28675                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28676                                  ; -----------------------------------------------------------------------------
 28677                                  ; ENTRY   : None
 28678                                  ; EXIT    : None
 28679                                  ; ERROR   : None
 28680                                  ; USES    : Flags, fm_umb, fm_strat
 28681                                  ; -----------------------------------------------------------------------------
 28682                                  
 28683                                  FixMem:
 28684                                  	push	ax
 28685                                  	push	bx
 28686                                  	push	cx
 28687                                  	push	dx
 28688                                  	push	es
 28689                                  
 28690                                  	call	fm_link		; Link in UMBs
 28691                                  
 28692                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28693                                  	jc	short fmX	; (if couldn't get it, leave now).
 28694                                  
 28695                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28696                                  
 28697                                  ; - Walk MCB Chain ------------------------------------------------------------
 28698                                  
 28699                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28700                                  	mov 	cx,dx		; in CX... and the last owner
 28701                                  	inc	dx		; in dx as we go through the loop:
 28702                                  
 28703                                  ; ------------------------------------------
 28704                                  ; FM10--DX  = last MCB's owner's PSP address
 28705                                  ;       CX  = last MCB's address (segment)
 28706                                  ; ------------------------------------------
 28707                                  
 28708                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28709                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28710                                  	or	bx,dx			; dx was owner of previous MCB
 28711                                  	jnz	short fm30		; If not both zero, don't cat.
 28712                                  
 28713                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28714                                  
 28715                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28716                                  	mov	es,cx			; Go back to prev MCB's address
 28717                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28718                                  
 28719                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28720                                  	add	bx,1			; And add one for the header
 28721                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28722                                  
 28723                                  	; ---------------------------------------------------------------------
 28724                                  
 28725                                  fm30:	mov	cx,es			; Put this address on the stack
 28726                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28727                                  
 28728                                  	mov	bx,es			; Move to the next MCB
 28729                                  	add	bx,[es:ARENA.SIZE]
 28730                                  	inc	bx
 28731                                  	mov	es,bx
 28732                                  
 28733                                  	;cmp	al,'Z'
 28734                                  	cmp	al,arena_signature_end
 28735                                  	jne	short fm10		; If signature != 'Z', there are more.
 28736                                  fmX:	
 28737                                  	call	fm_unlink		; Unlink UMBs
 28738                                  
 28739                                  	pop	es
 28740                                  	pop	dx
 28741                                  	pop	cx
 28742                                  	pop	bx
 28743                                  	pop	ax
 28744                                  
 28745                                  	retn
 28746                                  
 28747                                  ; -----------------------------------------------------------------------------
 28748                                  ;*** fm_link - links UMBs not already linked in
 28749                                  ; -----------------------------------------------------------------------------
 28750                                  ; ENTRY:    None
 28751                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28752                                  ; ERROR:    None
 28753                                  ; USES:     AX, BX, fm_umb
 28754                                  ; -----------------------------------------------------------------------------
 28755                                  
 28756                                  fm_link:
 28757                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28758                                  	int	21h			; Current link-state is now in al
 28759                                  
 28760                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28761                                  	;
 28762                                  	;push	es
 28763                                  	;push	cs
 28764                                  	;pop	es
 28765                                  	;mov	[es:fm_umb],al
 28766                                  	;pop	es
 28767                                  	
 28768                                  	mov	[cs:fm_umb],al
 28769                                  
 28770                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28771                                  	mov	bx,1
 28772                                  	int	21h
 28773                                  	retn
 28774                                  
 28775                                  ; -----------------------------------------------------------------------------
 28776                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28777                                  ; -----------------------------------------------------------------------------
 28778                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28779                                  ; EXIT:     None
 28780                                  ; ERROR:    None
 28781                                  ; USES:     AX, BX
 28782                                  ; -----------------------------------------------------------------------------
 28783                                  
 28784                                  fm_unlink:
 28785                                  	xor	bx,bx
 28786                                  	
 28787                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28788                                  	;
 28789                                  	;push	ds
 28790                                  	;push	cs
 28791                                  	;pop	ds
 28792                                  	;mov	bl,[fm_umb]	
 28793                                  	;pop	ds
 28794                                  	
 28795                                  	mov	bl,[cs:fm_umb]
 28796                                  
 28797                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28798                                  	int	21h			; so just use that, and call int 21h
 28799                                  	retn
 28800                                  
 28801                                  ; 08/04/2019 - Retro DOS v4.0
 28802                                  
 28803                                  ; -----------------------------------------------------------------------------
 28804                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28805                                  ; laid out in highvar.inc
 28806                                  ; -----------------------------------------------------------------------------
 28807                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28808                                  ; EXIT:     ES:SI points to first character in child program name
 28809                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28810                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28811                                  ; -----------------------------------------------------------------------------
 28812                                  ; Error codes (in AX if carry set on return):
 28813                                  ;
 28814                                  PV_InvArg	equ	1	; Invalid argument passed
 28815                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28816                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28817                                  ;
 28818                                  ; This routine exects ES:SI to point to a string much like the following:
 28819                                  ;    "/S/L:1,200;2 module options"
 28820                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28821                                  ; required, though that's what this routine is supposed to parse.
 28822                                  ;
 28823                                  optS		equ	'S'	; /S
 28824                                  optL		equ	'L'	; /L:...
 28825                                  ;
 28826                                  ; -----------------------------------------------------------------------------
 28827                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28828                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28829                                  ;     lh /l:1,1000;2 print/d:lpt2
 28830                                  ; the arguments would look like (one per line):
 28831                                  ;     lh
 28832                                  ;     /l
 28833                                  ;     1
 28834                                  ;     1000
 28835                                  ;     2
 28836                                  ;     print
 28837                                  ;     /d
 28838                                  ;     :lpt2
 28839                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28840                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28841                                  ; of the number of arguments LH will need to skip in order to get to the
 28842                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28843                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28844                                  ; for:
 28845                                  ;    Each /L
 28846                                  ;    Each /S (there should be only one)
 28847                                  ;    Each UMB number (they follow ":" or ";")
 28848                                  ;    Each UMB size   (they follow ",")
 28849                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28850                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28851                                  ; -----------------------------------------------------------------------------
 28852                                  
 28853                                  ParseVar:
 28854                                  	;pushreg <di, ds, es>
 28855                                  	push	di
 28856                                  	push	ds
 28857                                  	push	es
 28858                                  
 28859                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28860                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28861                                  	cld
 28862                                  
 28863                                  ; ------------------------------------------------
 28864                                  ; PV10--ES:SI = any whitespace on the command-line
 28865                                  ; ------------------------------------------------
 28866                                  
 28867                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28868                                  	call	isWhite
 28869                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28870                                  	;cmp	al,'/'
 28871                                  	cmp	al,SWTCH
 28872                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28873                                  
 28874                                  	dec	si		; Backup--it's now "odule options", and we need
 28875                                  	clc			; that "m" we just read (or whatever it is).
 28876                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28877                                  
 28878                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28879                                  	;toUpper al		; So we make it upper-case, and...
 28880                                  	and	al,0DFh
 28881                                  	;cmp	al,'S'
 28882                                  	cmp	al,optS		; just read 'S'?
 28883                                  	jne	short pv30
 28884                                  
 28885                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28886                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28887                                  
 28888                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28889                                  	;
 28890                                  	;push	es
 28891                                  	;push	cs
 28892                                  	;pop	es
 28893                                  	;mov	[es:fUmbTiny],1	
 28894                                  	;pop	es
 28895                                  
 28896                                  	mov	byte [cs:fUmbTiny],1
 28897                                  
 28898                                  	jmp	short pv10	; possibly even "/L...".
 28899                                  
 28900                                  pv30:	;cmp	al,'L'
 28901                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28902                                  	jne	short pvE1		; switch!
 28903                                  
 28904                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28905                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28906                                  
 28907                                  	call	parseL
 28908                                  	jnc	short pv10	; If no carry, go back and look for more
 28909                                  
 28910                                  	dec	si		; Else, back up and exit.
 28911                                  	jmp	short pvErr	; AX has already been set by parseL
 28912                                  
 28913                                  pvE1:	;mov	ax,3
 28914                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28915                                  pvErr:	dec	si
 28916                                  	dec	si
 28917                                  	stc
 28918                                  pvX:	;popreg	<es, ds, di>
 28919                                  	pop	es
 28920                                  	pop	ds
 28921                                  	pop	di
 28922                                  	retn
 28923                                  
 28924                                  ; -----------------------------------------------------------------------------
 28925                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28926                                  ; -----------------------------------------------------------------------------
 28927                                  ; ENTRY:    ES:SI points to colon
 28928                                  ; EXIT:     ES:SI points to first character not parsed
 28929                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28930                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28931                                  ; -----------------------------------------------------------------------------
 28932                                  ; If the string here is terminated with anything other than whitespace or a
 28933                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28934                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28935                                  ; makes sure the app /L: is reported as being the culprit.
 28936                                  ; -----------------------------------------------------------------------------
 28937                                  
 28938                                  parseL:
 28939                                  	lodsb
 28940                                  	cmp	al,':'		; Make sure they did /L:
 28941                                  	jne	short plE1	; If they didn't, return with carry set.
 28942                                  
 28943                                  ; ------------------------------------------
 28944                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28945                                  ; ------------------------------------------
 28946                                  
 28947                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28948                                  	jc	short plE2	; And error if it's a bad number.
 28949                                  	call	convUMB		; Convert any address to a UMB number
 28950                                  
 28951                                  	mov	cl,al		; Remember the UMB number
 28952                                  	call	stowUMB		; Mark this UMB # as used;
 28953                                  	jc	short plE2	; If it was already marked, it'll error
 28954                                  
 28955                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28956                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28957                                  
 28958                                  	lodsb
 28959                                  	cmp	al,';'		; Did "umb;" ?
 28960                                  	je	short pl10	; Yep: go back and get another UMB.
 28961                                  
 28962                                  	call	isWhite		; Did "umb " ?
 28963                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28964                                  
 28965                                  	call	isEOL		; Did "umb" ?
 28966                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28967                                  
 28968                                  	;cmp	al,'/'
 28969                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 28970                                  	je	short plSwX	; If so, back up ES:SI one character and return
 28971                                  
 28972                                  	cmp	al,','		; Did "umb," ?
 28973                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 28974                                  
 28975                                  ; --- Read a size -------------------------------------------------------------
 28976                                  
 28977                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 28978                                  	jc	short plE1	; And error if it's a bad size.
 28979                                  
 28980                                  	call	toPara		; Convert from bytes to paragraphs
 28981                                  
 28982                                  	call	stowSiz		; CL still has the UMB number for this routine
 28983                                  
 28984                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 28985                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28986                                  
 28987                                  	lodsb
 28988                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 28989                                  	je	short pl10	;
 28990                                  
 28991                                  	call	isWhite		; Did it end with whitespace?
 28992                                  	jz	short plX	; If so, we're done here--go back.
 28993                                  
 28994                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 28995                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28996                                  
 28997                                  	;cmp	al,'/'
 28998                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 28999                                  	je	short plSwX	; If so, again, we're done here.
 29000                                  plE1:	
 29001                                  	;mov	ax,1
 29002                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29003                                  	dec	si
 29004                                  	stc
 29005                                  	retn
 29006                                  
 29007                                  plE2:	;mov	ax,2
 29008                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29009                                  	; 12/12/2022
 29010                                  	; cf=1
 29011                                  	;stc
 29012                                  	retn
 29013                                  plSwX:	
 29014                                  	dec	si		; If we hit a '/' character, back up one char
 29015                                  				; so the whitespace checker will see it too.
 29016                                  plX:	; 12/12/2022
 29017                                  	; cf=0
 29018                                  	;clc			; Then just return with carry clear, so
 29019                                  	retn			; ParseVar will go about its business.
 29020                                  
 29021                                  ; -----------------------------------------------------------------------------
 29022                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29023                                  ; -----------------------------------------------------------------------------
 29024                                  ; ENTRY:    None
 29025                                  ; EXIT:     None
 29026                                  ; ERROR:    None
 29027                                  ; USES:     fm_argc, flags
 29028                                  ; -----------------------------------------------------------------------------
 29029                                  
 29030                                  ;incArgc:
 29031                                  	;push	ax
 29032                                  
 29033                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29034                                  
 29035                                  	;mov	al,[cs:fm_argc]
 29036                                  
 29037                                  	;inc	al		; Increment it,
 29038                                  
 29039                                  	;;putdata fm_argc, al	; And store it right back.
 29040                                  
 29041                                  	;mov	[cs:fm_argc],al
 29042                                  
 29043                                  	;pop	ax
 29044                                  	;retn
 29045                                  
 29046                                  ; -----------------------------------------------------------------------------
 29047                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29048                                  ; -----------------------------------------------------------------------------
 29049                                  ; ENTRY:    AL contains character to test
 29050                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 29051                                  ; ERROR:    None
 29052                                  ; USES:     ZF
 29053                                  ; -----------------------------------------------------------------------------
 29054                                  
 29055                                  isEOL:
 29056                                  	cmp	al,0		; Null-terminator
 29057                                  	je	short ieX
 29058                                  	cmp	al,CR ; 0Dh	; Carriage Return
 29059                                  	je	short ieX
 29060                                  	cmp	al,LF ; 0Ah	; LineFeed
 29061                                  ieX:	
 29062                                  	retn
 29063                                  
 29064                                  ; -----------------------------------------------------------------------------
 29065                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29066                                  ; -----------------------------------------------------------------------------
 29067                                  ; ENTRY:    AL contains character to test
 29068                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 29069                                  ; ERROR:    None
 29070                                  ; USES:     ZF
 29071                                  ; -----------------------------------------------------------------------------
 29072                                  
 29073                                  isWhite:
 29074                                  	cmp	al,' '		; Space
 29075                                  	je	short iwX
 29076                                  	cmp	al,'='		; Equals (treat as whitespace)
 29077                                  	je	short iwX
 29078                                  	cmp	al,tab ; 9	; Tab
 29079                                  iwX:	
 29080                                  	retn
 29081                                  
 29082                                  ; -----------------------------------------------------------------------------
 29083                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29084                                  ; -----------------------------------------------------------------------------
 29085                                  ; ENTRY:    AL contains UMB number
 29086                                  ; EXIT:     None
 29087                                  ; ERROR:    None
 29088                                  ; USES:     Flags, variables in highvar.inc
 29089                                  ; -----------------------------------------------------------------------------
 29090                                  
 29091                                  unMarkUMB:
 29092                                  	push	ax
 29093                                  	push	bx
 29094                                  	push	di
 29095                                  	push	es
 29096                                  
 29097                                  	push	cs
 29098                                  	pop	es
 29099                                  
 29100                                  	xor	ah,ah
 29101                                  	mov	bx,ax
 29102                                  
 29103                                  	; 19/04/2019
 29104                                  	
 29105                                  	;mov	byte [es:bx+UmbUsed],0
 29106                                  	mov	[es:bx+UmbUsed],ah ; 0
 29107                                  
 29108                                  	cmp	[es:UmbLoad],al
 29109                                  	jne	short umu10
 29110                                  
 29111                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29112                                  	mov	[es:UmbLoad],ah ; 0
 29113                                  umu10:	
 29114                                  	pop	es
 29115                                  	pop	di
 29116                                  	pop	bx
 29117                                  	pop	ax
 29118                                  	retn
 29119                                  
 29120                                  ; -----------------------------------------------------------------------------
 29121                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29122                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29123                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29124                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29125                                  ; -----------------------------------------------------------------------------
 29126                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29127                                  ; EXIT:     None
 29128                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29129                                  ; USES:     AX, Flags, variables in highvar.inc
 29130                                  ; -----------------------------------------------------------------------------
 29131                                  
 29132                                  stowUMB:
 29133                                  	cmp	al,MAXUMB ; 16
 29134                                  	jb	short su10
 29135                                  	stc
 29136                                  	retn			; Ooops-- UMB>=MAXUMB
 29137                                  su10:	
 29138                                  	push	bx
 29139                                  	push	di
 29140                                  	push	si
 29141                                  	push	ds
 29142                                  	push	es
 29143                                  	push	cs
 29144                                  	pop	es
 29145                                  	push	cs
 29146                                  	pop	ds
 29147                                  	
 29148                                  	;cmp	byte [UmbLoad],0FFh
 29149                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29150                                  	jne	short su20
 29151                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29152                                  su20:	
 29153                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29154                                  	jz	short su30	; that we should do here.
 29155                                  
 29156                                  	mov	bl,al
 29157                                  	xor	bh,bh
 29158                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29159                                  
 29160                                  	xchg	[es:bx+UmbUsed],al
 29161                                  
 29162                                  	or	al,al		; If it was already 1, then al==1... and that
 29163                                  	jz	short su30	; means an error.
 29164                                  
 29165                                  	stc			; OOOPS!  This one's been used before.  :(
 29166                                  su30:	
 29167                                  	pop	es
 29168                                  	pop	ds
 29169                                  	pop	si
 29170                                  	pop	di
 29171                                  	pop	bx
 29172                                  	retn
 29173                                  
 29174                                  ; -----------------------------------------------------------------------------
 29175                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29176                                  ; -----------------------------------------------------------------------------
 29177                                  ; ENTRY:    CL contains UMB number, AX contains size
 29178                                  ; EXIT:     None
 29179                                  ; ERROR:    None
 29180                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29181                                  ; -----------------------------------------------------------------------------
 29182                                  
 29183                                  ; 13/05/2019
 29184                                  
 29185                                  stowSiz:
 29186                                  	push	bx
 29187                                  	;push	di ; ?
 29188                                  	push	es
 29189                                  
 29190                                  	push	cs
 29191                                  	pop	es	
 29192                                  
 29193                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29194                                  	mov	bh,0			;     bx==UMB number, AX==size
 29195                                  	shl	bl,1			;     bx==offset into array, AX=size
 29196                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29197                                  	
 29198                                  	pop	es
 29199                                  	;pop	di ; ?
 29200                                  	pop	bx
 29201                                  
 29202                                  	retn
 29203                                  
 29204                                  ; -----------------------------------------------------------------------------
 29205                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29206                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29207                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29208                                  ; A-F are considered valid iff gnradix is 16.
 29209                                  ; -----------------------------------------------------------------------------
 29210                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29211                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29212                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29213                                  ; USES:     CL, Flags
 29214                                  ; -----------------------------------------------------------------------------
 29215                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29216                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29217                                  ; will be 10 or 16.
 29218                                  ; -----------------------------------------------------------------------------
 29219                                  
 29220                                  gnradix:
 29221                                  	dw	0		; Must be a word--16x16 multiplication
 29222                                  
 29223                                  toDigit:
 29224                                  	cmp	word [cs:gnradix],16
 29225                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29226                                  
 29227                                  toDigit_hex:
 29228                                  	cmp	cl,'a'	; 61h
 29229                                  	jb	short td10
 29230                                  	cmp	cl,'f'	; 66h
 29231                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29232                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29233                                  	;clc			; <- CLC is implicit from last SUB
 29234                                  	retn
 29235                                  td10:	
 29236                                  	cmp	cl,'A'  ; 41h
 29237                                  	jb	short td20	; Below 'A'?  Not a letter...
 29238                                  	cmp	cl,'F'	; 46h
 29239                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29240                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29241                                  	;clc			; <- CLC is implicit from last SUB
 29242                                  	retn
 29243                                  toDigit_dec:
 29244                                  td20:	
 29245                                  	cmp	cl,'0'		; If less than zero,
 29246                                  	;jb	short tdE	; Done.
 29247                                  	jb	short tdEr ; 08/04/2019
 29248                                  	cmp	cl,'9'		; Or, if greater than nine,
 29249                                  	ja	short tdE	; Done.
 29250                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29251                                  	;clc			; <- CLC is implicit from last SUB
 29252                                  	retn
 29253                                  tdE:	
 29254                                  	stc
 29255                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29256                                  	retn
 29257                                  
 29258                                  ; -----------------------------------------------------------------------------
 29259                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29260                                  ; -----------------------------------------------------------------------------
 29261                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29262                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29263                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29264                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29265                                  ; -----------------------------------------------------------------------------
 29266                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29267                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29268                                  ; will be 10 or 16.
 29269                                  ; -----------------------------------------------------------------------------
 29270                                  
 29271                                  ; 08/04/2019 - Retro DOS v4.0
 29272                                  
 29273                                  GetXNum:
 29274                                  	;pushreg <bx, cx, ds>
 29275                                  	push	bx
 29276                                  	push	cx
 29277                                  	push	ds
 29278                                  
 29279                                  	cld
 29280                                  	xor	ax,ax
 29281                                  	xor	bx,bx
 29282                                  	xor	cx,cx
 29283                                  	xor	dx,dx			; Start with 0 (makes sense)
 29284                                  
 29285                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29286                                  
 29287                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29288                                  	;call	toDigit
 29289                                  	call	toDigit_dec
 29290                                  	jc	short gxnE		; If it's not a digit, leave now.
 29291                                  
 29292                                  	or	cl,cl
 29293                                  	jnz	short gxn20		; Doesn't have '0x'
 29294                                  	mov	cl,[es:si+1]
 29295                                  	cmp	cl,'x'			; Either 'x'...
 29296                                  	je	short gxn10
 29297                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29298                                  	jne	short gxn20
 29299                                  
 29300                                  gxn10:	
 29301                                  	mov	word [cs:gnradix], 16
 29302                                  	inc	si			; Since we read "0x", march over it.
 29303                                  	inc	si
 29304                                  
 29305                                  ; ------------------------------------------------------
 29306                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29307                                  ;        DX:AX = current total
 29308                                  ;        BX    = 0
 29309                                  ;        CH    = 0
 29310                                  ; ------------------------------------------------------
 29311                                  
 29312                                  gxn20:	
 29313                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29314                                  	inc	si
 29315                                  
 29316                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29317                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29318                                  
 29319                                  	call	mul32		; Multiply DX:AX by gnradix
 29320                                  	jc	short gxnX	; (if it's too big, error out)
 29321                                  
 29322                                  	add	ax,cx		; Add the digit
 29323                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29324                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29325                                  	;jmp	short gxn20
 29326                                  	jnc	short gxn20
 29327                                  gxnE:	
 29328                                  	;stc			; In this case, we need to set the carry
 29329                                  	jmp	short gxnX	; and leave--there were no digits given.
 29330                                  gxnQ:	
 29331                                  	dec	si		; Don't read in the offensive character.
 29332                                  	clc			; And clear carry, so they know it's okay.
 29333                                  gxnX:	
 29334                                  	pop	ds
 29335                                  	pop	cx
 29336                                  	pop	bx
 29337                                  	retn
 29338                                  
 29339                                  ; -----------------------------------------------------------------------------
 29340                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29341                                  ; -----------------------------------------------------------------------------
 29342                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29343                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29344                                  ; ERROR:   Carry set if number was too large
 29345                                  ; USES:    Flags, AX, DX
 29346                                  ; -----------------------------------------------------------------------------
 29347                                  
 29348                                  mul32:
 29349                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29350                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29351                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29352                                  	jc	short m32E	; Too big?
 29353                                  
 29354                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29355                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29356                                  
 29357                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29358                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29359                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29360                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29361                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29362                                  	retn
 29363                                  m32E:	
 29364                                  	pop	ax
 29365                                  	retn
 29366                                  
 29367                                  ; -----------------------------------------------------------------------------
 29368                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29369                                  ; -----------------------------------------------------------------------------
 29370                                  ; ENTRY:   DX:AX = the number to be divided
 29371                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29372                                  ; ERROR:   None
 29373                                  ; USES:    Flags, AX, DX
 29374                                  ; -----------------------------------------------------------------------------
 29375                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29376                                  ;       can't ensure a 386 host machine. Sorry.
 29377                                  ; -----------------------------------------------------------------------------
 29378                                  
 29379                                  toPara:
 29380                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29381                                  
 29382                                  	mov	cl,4		;
 29383                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29384                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29385                                  	mov	cl,12
 29386                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29387                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29388                                  
 29389                                  	pop	cx
 29390                                  	retn
 29391                                  
 29392                                  ; -----------------------------------------------------------------------------
 29393                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29394                                  ; -----------------------------------------------------------------------------
 29395                                  ; ENTRY:  Nothing
 29396                                  ; EXIT:   AX contains 0x9FFF for most systems
 29397                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29398                                  ; USES:   Flags, AX
 29399                                  ; -----------------------------------------------------------------------------
 29400                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29401                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29402                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29403                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29404                                  ; -----------------------------------------------------------------------------
 29405                                  
 29406                                  UmbHead:
 29407                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29408                                  
 29409                                  	;push	si ; ?
 29410                                  	;push	ds ; ? 
 29411                                  	;push	es
 29412                                  	;push	bx ; *	
 29413                                  
 29414                                  	; 09/04/2019
 29415                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29416                                  
 29417                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29418                                  	int	21h
 29419                                  
 29420                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29421                                  	cmp	ax,0FFFFh
 29422                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29423                                  
 29424                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29425                                  	;jmp	short uhX
 29426                                  	; 12/12/2022
 29427                                  	retn
 29428                                  uhE:	
 29429                                  	stc
 29430                                  uhX:	
 29431                                  	;pop	bx ; *
 29432                                  	;pop	es
 29433                                  	;pop	ds ; ?
 29434                                  	;pop	si ; ?
 29435                                  	retn
 29436                                  
 29437                                  ; -----------------------------------------------------------------------------
 29438                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29439                                  ; -----------------------------------------------------------------------------
 29440                                  ; ENTRY:  ES:0 should point to a valid MCB
 29441                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29442                                  ; USES:   Flags
 29443                                  ; -----------------------------------------------------------------------------
 29444                                  
 29445                                  isSysMCB:
 29446                                  	;push	ax
 29447                                  
 29448                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29449                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29450                                  	;je	short ism10
 29451                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29452                                  	;;je	short ism10
 29453                                  	;;jmp	short ismX		; Anything else isn't.
 29454                                  	;jne	short ismX
 29455                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29456                                  	jne	short ismX 
 29457                                  ism10:	
 29458                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29459                                  	;cmp	ax,'SC' ; 4353h
 29460                                  	cmp	word [es:ARENA.NAME],'SC'
 29461                                  ismX:	
 29462                                  	;pop	ax
 29463                                  	retn
 29464                                  
 29465                                  ; 09/04/2019 - Retro DOS v4.0
 29466                                  
 29467                                  ; -----------------------------------------------------------------------------
 29468                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29469                                  ; -----------------------------------------------------------------------------
 29470                                  ; ENTRY:  AX contains a segment address
 29471                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29472                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29473                                  ; USES:   Flags, AX
 29474                                  ; -----------------------------------------------------------------------------
 29475                                  ; An address in the following areas is treated as:
 29476                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29477                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29478                                  ;      ...
 29479                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29480                                  ; -----------------------------------------------------------------------------
 29481                                  
 29482                                  AddrToUmb:
 29483                                  	push	cx
 29484                                  	push	dx
 29485                                  	push	es
 29486                                  
 29487                                  	mov	dx,ax		; DX = address to search for
 29488                                  
 29489                                  	call	UmbHead		; AX = first segment
 29490                                  	jc	short atuE	; If it couldn't get it, error out.
 29491                                  
 29492                                  	mov	es,ax		; ES = first UMB segment
 29493                                  	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29494                                  
 29495                                  ; ----------------------------------------
 29496                                  ; ATU10--ES - Current MCB address
 29497                                  ;        DX - Address given for conversion
 29498                                  ;        CX - Current UMB #
 29499                                  ; ----------------------------------------
 29500                                  
 29501                                  atu10:	mov	ax,es
 29502                                          cmp	ax,dx		; Present segment >= given segment?
 29503                                  	jae	short atuX	; Yep--done.
 29504                                  
 29505                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29506                                  	jnz	short atu20
 29507                                  
 29508                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29509                                  atu20:	
 29510                                  	mov	al,[es:ARENA.SIGNATURE]
 29511                                  	cmp	al,arena_signature_end  ; 'Z'
 29512                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29513                                  
 29514                                  	;NextMCB es, ax
 29515                                  
 29516                                  	mov     ax,es
 29517                                  	;add	ax,[es:3]
 29518                                  	add     ax,[es:ARENA.SIZE]
 29519                                  	inc     ax
 29520                                  	mov     es,ax
 29521                                  	
 29522                                  	jmp	short atu10
 29523                                  
 29524                                  ; -----------------------------------------------------------------------------
 29525                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29526                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29527                                  ; -----------------------------------------------------------------------------
 29528                                  
 29529                                  atu30:	
 29530                                  	mov	ax,es
 29531                                  	add	ax,[es:ARENA.SIZE]
 29532                                  	cmp	ax,dx		; Present >= given?
 29533                                  	jae	short atuX	; Yep! It _was_ inside.
 29534                                  atuE:	
 29535                                  	xor	cx,cx		; Else, fall through with UMB # == -1
 29536                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29537                                  atuX:	
 29538                                  	mov	ax, cx		; Return the UMB number in AX
 29539                                  	
 29540                                  	pop	es	
 29541                                  	pop	dx
 29542                                  	pop	cx
 29543                                  	retn
 29544                                  
 29545                                  ; -----------------------------------------------------------------------------
 29546                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29547                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29548                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29549                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29550                                  ; -----------------------------------------------------------------------------
 29551                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29552                                  ; EXIT:   AX will contain a UMB number
 29553                                  ; ERROR:  None
 29554                                  ; USES:   Flags, AX
 29555                                  ; -----------------------------------------------------------------------------
 29556                                  
 29557                                  convUMB:
 29558                                  	cmp	word [cs:gnradix],16
 29559                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29560                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29561                                  	cmp	ax,0FFFFh
 29562                                  	jne	short cu10
 29563                                  	inc	ax		; If too high, ignore it (make it conventional)
 29564                                  cu10:	
 29565                                  	retn
 29566                                  
 29567                                  ; -----------------------------------------------------------------------------
 29568                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29569                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29570                                  ; of the usual HIGH_FIRST.  See the code.
 29571                                  ; -----------------------------------------------------------------------------
 29572                                  ; ENTRY:  None
 29573                                  ; EXIT:   None
 29574                                  ; ERROR:  None
 29575                                  ; USES:   Flags, fm_umb, fm_strat
 29576                                  ; -----------------------------------------------------------------------------
 29577                                  
 29578                                  setUMBs:
 29579                                  	push	ax
 29580                                  	push	bx
 29581                                  	call	fm_link
 29582                                  	pop	bx
 29583                                  	pop	ax
 29584                                  	retn
 29585                                  
 29586                                  ; -----------------------------------------------------------------------------
 29587                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29588                                  ; -----------------------------------------------------------------------------
 29589                                  ; ENTRY:  None
 29590                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29591                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29592                                  ; ERROR:  None
 29593                                  ; USES:   Flags, fm_strat, fm_umb
 29594                                  ; -----------------------------------------------------------------------------
 29595                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29596                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29597                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29598                                  ; such that the load UMB is too small, and shouldn't be used.
 29599                                  ; -----------------------------------------------------------------------------
 29600                                  
 29601                                  loadLow:
 29602                                  	;push	ds
 29603                                  	;push	cs		; Point DS into appropriate data segment
 29604                                  	;pop	ds	
 29605                                  
 29606                                  	;mov	al,[UmbLoad]
 29607                                  	mov	al,[cs:UmbLoad]
 29608                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29609                                  	jne	short ll10
 29610                                  
 29611                                  	stc
 29612                                  ll15:
 29613                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29614                                  	;stc
 29615                                  	;jmp	short llX
 29616                                  	retn
 29617                                  ll10:	
 29618                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29619                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29620                                  
 29621                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29622                                  	retn
 29623                                  
 29624                                  	;mov	al,1
 29625                                  	;clc
 29626                                  ;llX:
 29627                                  	;pop	ds		; Return DS to where it was
 29628                                  	;retn
 29629                                  
 29630                                  ; -----------------------------------------------------------------------------
 29631                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29632                                  ; -----------------------------------------------------------------------------
 29633                                  ; ENTRY:  None
 29634                                  ; EXIT:   None
 29635                                  ; ERROR:  None
 29636                                  ; USES:   Flags, fm_strat, fm_umb
 29637                                  ; -----------------------------------------------------------------------------
 29638                                  
 29639                                  HideUMBs:
 29640                                  	push	ax
 29641                                  	push	cx
 29642                                  	push	ds
 29643                                  	push	es
 29644                                  
 29645                                  	call	UmbTest		; See if we REALLY linked in anything...
 29646                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29647                                  
 29648                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29649                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29650                                  
 29651                                  	;putdata fInHigh,1	; Remember that we're now running high
 29652                                  	mov	byte [cs:fInHigh],1
 29653                                  
 29654                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29655                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29656                                  
 29657                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29658                                  	je	short husX	; then we shouldn't do this loop:
 29659                                  
 29660                                  	xor	cx,cx
 29661                                  
 29662                                  ; -----------------------------------------------
 29663                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29664                                  ; -----------------------------------------------
 29665                                  
 29666                                  hus10:	inc	cx		; For each UMB:
 29667                                  	cmp	cx,MAXUMB ; 16
 29668                                  	jae	short hus20
 29669                                  
 29670                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29671                                  	push	es
 29672                                  	call	findUMB		; valid range of UMBs)
 29673                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29674                                  	jc	short hus20
 29675                                  
 29676                                  	call	_hideUMB_	; hide what we need to hide.
 29677                                  
 29678                                  	jmp	short hus10
 29679                                  hus20:	
 29680                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29681                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29682                                  
 29683                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29684                                  	jnz	short husX	; If not, we're done.
 29685                                  
 29686                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29687                                  husX:	
 29688                                  	pop	es
 29689                                  	pop	ds
 29690                                  	pop	cx
 29691                                  	pop	ax
 29692                                  	retn
 29693                                  
 29694                                  ; -----------------------------------------------------------------------------
 29695                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29696                                  ; -----------------------------------------------------------------------------
 29697                                  ; ENTRY:  None
 29698                                  ; EXIT:   AL == load UMB
 29699                                  ; ERROR:  None
 29700                                  ; USES:   Flags, AX
 29701                                  ; -----------------------------------------------------------------------------
 29702                                  
 29703                                  ;GetLoadUMB:
 29704                                  ;	;getdata al, UmbLoad
 29705                                  ;	push	ds
 29706                                  ;	push	cs
 29707                                  ;	pop	ds
 29708                                  ;	mov	al,[UmLoad]
 29709                                  ;	pop	ds
 29710                                  ;	retn
 29711                                  
 29712                                  ; -----------------------------------------------------------------------------
 29713                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29714                                  ; -----------------------------------------------------------------------------
 29715                                  ; ENTRY:  None
 29716                                  ; EXIT:   AX == load UMB minimum size
 29717                                  ; ERROR:  None
 29718                                  ; USES:   Flags, AX
 29719                                  ; -----------------------------------------------------------------------------
 29720                                  
 29721                                  GetLoadSize:
 29722                                  	; 09/04/2019 - Retro DOS v4.0
 29723                                  	mov	al,[cs:UmbLoad]
 29724                                  	jmp	short GetSize
 29725                                  
 29726                                  	;push	bx
 29727                                  	;;push	si
 29728                                  	;push	ds
 29729                                  	;push	cs
 29730                                  	;pop	ds
 29731                                  
 29732                                  	;mov	al,[UmbLoad]
 29733                                  
 29734                                  	;xor	ah,ah			;    ax==UMB
 29735                                  	;mov	bx,UmbSize		;    bx==array
 29736                                  	;shl	al,1	                ;    ax==offset
 29737                                  	;;add	ax,bx			;    ax==element index
 29738                                  	;;mov	si,ax			; ds:si==element index
 29739                                  
 29740                                  	;;lodsw				;    ax==size
 29741                                  
 29742                                  	;add	bx,ax
 29743                                  	;mov	ax,[bx]
 29744                                  
 29745                                  	;pop	ds
 29746                                  	;;pop	si
 29747                                  	;pop	bx
 29748                                  	;retn
 29749                                  
 29750                                  ; -----------------------------------------------------------------------------
 29751                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29752                                  ; -----------------------------------------------------------------------------
 29753                                  ; ENTRY:  AL == a UMB number
 29754                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29755                                  ; ERROR:  None
 29756                                  ; USES:   Flags, AX
 29757                                  ; -----------------------------------------------------------------------------
 29758                                  
 29759                                  GetSize:
 29760                                  	; 09/04/2019 - Retro DOS v4.0
 29761                                  
 29762                                  	push	bx
 29763                                  	;push	si
 29764                                  	;push	ds
 29765                                  	;push	cs
 29766                                  	;pop	ds
 29767                                  
 29768                                  	xor	ah,ah			;    ax==UMB
 29769                                  	mov	bx,UmbSize		;    bx==array
 29770                                  	shl	al,1	                ;    ax==offset
 29771                                  	;add	ax,bx			;    ax==element index
 29772                                  	;mov	si,ax			; ds:si==element index
 29773                                  
 29774                                  	;lodsw				;    ax==size
 29775                                  
 29776                                  	add	bx,ax
 29777                                  	;mov	ax,[bx]
 29778                                  	mov	ax,[cs:bx]
 29779                                  
 29780                                  	;pop	ds
 29781                                  	;pop	si
 29782                                  	pop	bx
 29783                                  	retn
 29784                                  
 29785                                  ; -----------------------------------------------------------------------------
 29786                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29787                                  ; -----------------------------------------------------------------------------
 29788                                  ; ENTRY:   AL == new load UMB
 29789                                  ; EXIT:    None
 29790                                  ; ERROR:   None
 29791                                  ; USES:    Flags, AX
 29792                                  ; -----------------------------------------------------------------------------
 29793                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29794                                  ;          time you would ever need this, so that's okay.
 29795                                  ; -----------------------------------------------------------------------------
 29796                                  
 29797                                  ;StoLoadUMB:
 29798                                  ;	;putdata UmbLoad, al
 29799                                  ;	push	es
 29800                                  ;	push	cs
 29801                                  ;	pop	es
 29802                                  ;	mov	[es:UmbLoad],al
 29803                                  ;	pop	es
 29804                                  ;	retn
 29805                                  
 29806                                  ; -----------------------------------------------------------------------------
 29807                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29808                                  ; -----------------------------------------------------------------------------
 29809                                  ; ENTRY:  AL == new load size
 29810                                  ; EXIT:   None
 29811                                  ; ERROR:  None
 29812                                  ; USES:   Flags, AX
 29813                                  ; -----------------------------------------------------------------------------
 29814                                  
 29815                                  StoLoadSize:
 29816                                  	push	dx
 29817                                  
 29818                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29819                                  	;
 29820                                  	;push	ds
 29821                                  	;push	cs
 29822                                  	;pop	ds
 29823                                  	;mov	dl,[UmbLoad]
 29824                                  	;pop	ds	
 29825                                  
 29826                                  	mov	dl,[cs:UmbLoad]
 29827                                  
 29828                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29829                                  	je	short sls10
 29830                                  
 29831                                  	call	stowSiz			; We've got a function to do just this
 29832                                  sls10:	
 29833                                  	pop	dx
 29834                                  	retn
 29835                                  
 29836                                  ; -----------------------------------------------------------------------------
 29837                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29838                                  ; -----------------------------------------------------------------------------
 29839                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29840                                  ; EXIT:     None; free elements in UMB marked as hidden
 29841                                  ; ERROR:    None
 29842                                  ; USES:     Flags
 29843                                  ; -----------------------------------------------------------------------------
 29844                                  
 29845                                  hideUMB:
 29846                                  	push	ax
 29847                                  	push	es
 29848                                  
 29849                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29850                                  	jc	short huX
 29851                                  
 29852                                  ; ------------------------------------------------
 29853                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29854                                  ;            we're not in the same UMB, so exit.
 29855                                  ; ------------------------------------------------
 29856                                  
 29857                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29858                                  	jz	short huX	; If it is, we've finished the UMB.
 29859                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29860                                  	or	word [es:ARENA.OWNER],0
 29861                                  	jnz	short hu20
 29862                                  
 29863                                  	call	hideMCB
 29864                                  hu20:	
 29865                                  	mov	al,[es:ARENA.SIGNATURE]
 29866                                  	cmp	al,arena_signature_end  ;'Z'
 29867                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29868                                  
 29869                                  	;NextMCB es, ax		; Go on forward.
 29870                                  	mov     ax,es
 29871                                  	;add	ax,[es:3]
 29872                                  	add     ax,[es:ARENA.SIZE]
 29873                                  	inc     ax
 29874                                  	mov     es,ax
 29875                                  
 29876                                  	jmp	short hu10
 29877                                  huX:	
 29878                                  	pop	es
 29879                                  	pop	ax
 29880                                  	retn
 29881                                  
 29882                                  ; -----------------------------------------------------------------------------
 29883                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29884                                  ; -----------------------------------------------------------------------------
 29885                                  ; ENTRY:    None
 29886                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29887                                  ; ERROR:    None
 29888                                  ; USES:     Flags
 29889                                  ; -----------------------------------------------------------------------------
 29890                                  
 29891                                  isTiny:
 29892                                  	push	ax
 29893                                  
 29894                                  	;getdata al, fUmbTiny
 29895                                  	;
 29896                                  	;push	ds
 29897                                  	;push	cs
 29898                                  	;pop	ds
 29899                                  	;mov	al,[fUmbTiny]
 29900                                  	;pop	ds
 29901                                  
 29902                                  	mov	al,[cs:fUmbTiny]		
 29903                                  
 29904                                  	or	al,al
 29905                                  	pop	ax
 29906                                  	retn
 29907                                  
 29908                                  ; -----------------------------------------------------------------------------
 29909                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29910                                  ; -----------------------------------------------------------------------------
 29911                                  ; ENTRY:    ES:0 should point to an MCB
 29912                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29913                                  ; ERROR:    None
 29914                                  ; USES:     Flags
 29915                                  ; -----------------------------------------------------------------------------
 29916                                  
 29917                                  ;isFreeMCB:
 29918                                  ;	or	word [es:ARENA.OWNER],0
 29919                                  ;	retn
 29920                                  
 29921                                  ; -----------------------------------------------------------------------------
 29922                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29923                                  ; -----------------------------------------------------------------------------
 29924                                  ; ENTRY:    ES:0 should point to an MCB
 29925                                  ; EXIT:     None; MCB marked as HIDDEN
 29926                                  ; ERROR:    None
 29927                                  ; USES:     None
 29928                                  ; -----------------------------------------------------------------------------
 29929                                  
 29930                                  hideMCB:
 29931                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29932                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29933                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29934                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29935                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29936                                  	retn
 29937                                  
 29938                                  ; -----------------------------------------------------------------------------
 29939                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29940                                  ; -----------------------------------------------------------------------------
 29941                                  ; ENTRY:    ES:0 should point to an MCB
 29942                                  ; EXIT:     None; MCB marked as FREE
 29943                                  ; ERROR:    None
 29944                                  ; USES:     None
 29945                                  ; -----------------------------------------------------------------------------
 29946                                  
 29947                                  unHideMCB:
 29948                                  	push	ax
 29949                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29950                                  	mov	ax,'  ' ; 2020h
 29951                                  	mov	[es:ARENA.NAME+0],ax
 29952                                  	mov	[es:ARENA.NAME+2],ax
 29953                                  	mov	[es:ARENA.NAME+4],ax
 29954                                  	mov	[es:ARENA.NAME+6],ax
 29955                                  	pop	ax
 29956                                  	retn
 29957                                  
 29958                                  ; -----------------------------------------------------------------------------
 29959                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29960                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29961                                  ; -----------------------------------------------------------------------------
 29962                                  ; ENTRY:    AL should be to a valid UMB number
 29963                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29964                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29965                                  ; USES:     Flags, ES
 29966                                  ; -----------------------------------------------------------------------------
 29967                                  
 29968                                  findUMB:
 29969                                  	push	ax
 29970                                  	push	cx
 29971                                  	push	dx
 29972                                  
 29973                                  	xor	ah,ah		; Zap ah, so al==ax
 29974                                  
 29975                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 29976                                  
 29977                                  	call	UmbHead		; Returns first UMB segment in AX
 29978                                  	mov	es,ax
 29979                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 29980                                  
 29981                                  ; ---------------------------------------------
 29982                                  ; FU10--CX - This UMB number; 0 == conventional
 29983                                  ;       DX - The UMB number they're looking for
 29984                                  ;       ES - The current MCB address
 29985                                  ; ---------------------------------------------
 29986                                  
 29987                                  fu10:	
 29988                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 29989                                  	je	short fuX	; searching for--so exit.
 29990                                  
 29991                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29992                                  	jnz	short fu20
 29993                                  
 29994                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 29995                                  fu20:	
 29996                                  	mov	al,[es:ARENA.SIGNATURE]
 29997                                  	cmp	al,arena_signature_end ; 'Z'
 29998                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 29999                                  
 30000                                  	;NextMCB es, ax		; Go on forward.
 30001                                  	mov     ax,es
 30002                                  	;add	ax,[es:3]
 30003                                  	add     ax,[es:ARENA.SIZE]
 30004                                  	inc     ax
 30005                                  	mov     es,ax
 30006                                  
 30007                                  	jmp	short fu10
 30008                                  fuE:	
 30009                                  	stc
 30010                                  fuX:
 30011                                  	pop	dx
 30012                                  	pop	cx
 30013                                  	pop	ax		; The address is already in ES.
 30014                                  	retn
 30015                                  
 30016                                  ; -----------------------------------------------------------------------------
 30017                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 30018                                  ; -----------------------------------------------------------------------------
 30019                                  ; ENTRY:    AL should be to a valid UMB number
 30020                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 30021                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 30022                                  ; USES:     Flags, ES
 30023                                  ; -----------------------------------------------------------------------------
 30024                                  
 30025                                  BigFree:
 30026                                  	push	bx
 30027                                  	push	cx
 30028                                  
 30029                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 30030                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 30031                                  
 30032                                  	xor	bx,bx			; Segment address of largest free MCB
 30033                                  	xor	cx,cx			; Size of largest free MCB
 30034                                  
 30035                                  ; ---------------------------------------------
 30036                                  ; BF10--ES - Current MCB address
 30037                                  ;       BX - Address of largest free MCB so far
 30038                                  ;       CX - Size of largest free MCB so far
 30039                                  ; ---------------------------------------------
 30040                                  
 30041                                  bf10:	
 30042                                  	call	isSysMCB		; If we've left the MCB, we're done.
 30043                                  	jz	short bf30
 30044                                  
 30045                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 30046                                  	or	word [es:ARENA.OWNER],0
 30047                                  	jnz	short bf20
 30048                                  
 30049                                  	mov	ax,[es:ARENA.SIZE]
 30050                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 30051                                  	cmp	cx,ax
 30052                                  	jg	short bf20		; Unless we're bigger,
 30053                                  
 30054                                  	mov	bx,es			; Store this new element's address,
 30055                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 30056                                  	mov	cx,ax
 30057                                  
 30058                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 30059                                  	cmp	al,arena_signature_end	; 'Z'
 30060                                  	jz	short bf30		; 'Z' means this was the last MCB.
 30061                                  
 30062                                  	;NextMCB es,ax		; Go on forward.
 30063                                  	mov     ax,es
 30064                                  	;add	ax,[es:3]
 30065                                  	add     ax,[es:ARENA.SIZE]
 30066                                  	inc     ax
 30067                                  	mov     es,ax
 30068                                  
 30069                                  	jmp	short bf10
 30070                                  
 30071                                  bf30:	mov	es,bx			; Return the address
 30072                                  	mov	ax,cx			; Return the size
 30073                                  	or	bx,bx
 30074                                  	jnz	short bfX		; (if size==0, there's nothing free)
 30075                                  bfE:	
 30076                                  	stc
 30077                                  bfX:
 30078                                  	pop	cx
 30079                                  	pop	bx
 30080                                  	retn
 30081                                  
 30082                                  ; -----------------------------------------------------------------------------
 30083                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30084                                  ; -----------------------------------------------------------------------------
 30085                                  ; ENTRY:    AL should be to a valid UMB number
 30086                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30087                                  ; ERROR:    None
 30088                                  ; USES:     Flags
 30089                                  ; -----------------------------------------------------------------------------
 30090                                  
 30091                                  isSpecified:
 30092                                  	push	ax
 30093                                  
 30094                                  	xor	bh,bh
 30095                                  	mov	bl,al
 30096                                  
 30097                                  	;getdata al, DS:UmbUsed[bx]
 30098                                  	;
 30099                                  	;push	ds
 30100                                  	;push	cs
 30101                                  	;pop	ds
 30102                                  	;mov	al,[bx+UmbUsed]
 30103                                  	;pop	ds
 30104                                  	
 30105                                  	mov	al,[cs:bx+UmbUsed]
 30106                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30107                                  
 30108                                  	pop	ax
 30109                                  	retn
 30110                                  
 30111                                  ; -----------------------------------------------------------------------------
 30112                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30113                                  ; -----------------------------------------------------------------------------
 30114                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30115                                  ; EXIT:     None; MCB broken if carry clear
 30116                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30117                                  ; USES:     Flags
 30118                                  ; -----------------------------------------------------------------------------
 30119                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30120                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30121                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30122                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30123                                  ; minimum for performing a split.
 30124                                  ; -----------------------------------------------------------------------------
 30125                                  
 30126                                  MIN_SPLIT_SIZE	equ	20h
 30127                                  
 30128                                  shrinkMCB:
 30129                                  	;pushreg <bx, cx, es>
 30130                                  	push	bx
 30131                                  	push	cx
 30132                                  	push	es
 30133                                  
 30134                                  	mov	bx,ax			; Move things around... and
 30135                                  	mov	ax,es			; save this one for later.
 30136                                  
 30137                                  	mov	cx,[es:ARENA.SIZE]
 30138                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 30139                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30140                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30141                                  	; 18/12/2022
 30142                                  	cmp	cx,bx
 30143                                  	jb	short smE ; (*)
 30144                                  
 30145                                  	mov	dl,[es:ARENA.SIGNATURE]
 30146                                  	mov	cx,[es:ARENA.SIZE]
 30147                                  
 30148                                  	mov	[es:ARENA.SIZE],bx
 30149                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30150                                  
 30151                                  	add	ax,bx
 30152                                  	inc	ax
 30153                                  	mov	es,ax			; Move to new arena area
 30154                                  
 30155                                  	mov	ax,cx
 30156                                  	sub	ax,bx
 30157                                  	; 12/12/2022
 30158                                  	; ax > 0
 30159                                  	dec	ax			; And prepare the new size
 30160                                  
 30161                                  	; 18/12/2022
 30162                                  	mov	[es:ARENA.SIGNATURE],dl
 30163                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30164                                  	mov	[es:ARENA.SIZE],ax
 30165                                  	;mov	ax,'  ' ; 2020h
 30166                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30167                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30168                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30169                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30170                                  
 30171                                  	; 18/12/2022
 30172                                  	call	freeMCB	; (**)
 30173                                  
 30174                                  	; 12/12/2022
 30175                                  	; cf=0
 30176                                  	;clc
 30177                                  	; 18/12/2022
 30178                                  	;jmp	short smX
 30179                                  smE:	
 30180                                  	; 18/12/2022
 30181                                  	; cf=1 (*)
 30182                                  	;stc
 30183                                  smX:	
 30184                                  	;popreg	<es, cx, bx>
 30185                                  	pop	es
 30186                                  	pop	cx
 30187                                  	pop	bx
 30188                                  	retn
 30189                                  
 30190                                  ; -----------------------------------------------------------------------------
 30191                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30192                                  ; -----------------------------------------------------------------------------
 30193                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30194                                  ; EXIT:     None; UMB is hidden as necessary
 30195                                  ; ERROR:    None
 30196                                  ; USES:     Flags, AX, CX
 30197                                  ; -----------------------------------------------------------------------------
 30198                                  ; PRIMARY LOGIC:
 30199                                  ;
 30200                                  ; If the UMB is specified in the DH/LH statement, then:
 30201                                  ;    If the largest free segment is too small (check specified size), then:
 30202                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30203                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30204                                  ;       If /S was given on the command-line, then:
 30205                                  ;          Break that element into two pieces
 30206                                  ;          Set a flag that we're shrinking
 30207                                  ;       Endif
 30208                                  ;    Endif
 30209                                  ; Endif
 30210                                  ; If the UMB is NOT specified (or was removed by the above):
 30211                                  ;    Hide all free elements in the UMB
 30212                                  ;    If the flag that we're shrinking was set, then:
 30213                                  ;       UN-hide the lower portion of the shrunken UMB
 30214                                  ;    ENDIF
 30215                                  ; ENDIF
 30216                                  ; -----------------------------------------------------------------------------
 30217                                  
 30218                                  _hideUMB_:
 30219                                  	push	bx
 30220                                  	push	dx
 30221                                  	push	es
 30222                                  
 30223                                  	mov	al,cl
 30224                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30225                                  	jz	short hu_20
 30226                                  
 30227                                  	mov	al,cl		; Retrieve the size of the largest
 30228                                  	call	BigFree		; free element in AX; put its address in ES
 30229                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30230                                  
 30231                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30232                                  	mov	al,cl		; Retrieve the user's specified
 30233                                  	call	GetSize		; minimum size for this umb (into AX)
 30234                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30235                                  
 30236                                  	or	ax,ax		; If they didn't specify one,
 30237                                  	jz	short hu_20	; Skip over all this.
 30238                                  
 30239                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30240                                  	jbe	short hu_10
 30241                                  
 30242                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30243                                  	call	unMarkUMB
 30244                                  	jmp	short hu_20
 30245                                  hu_10:	
 30246                                  	call	isTiny		; Returns ZF clear if user specified /S
 30247                                  	jz	short hu_20
 30248                                  
 30249                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30250                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30251                                  
 30252                                  	mov	dx,es
 30253                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30254                                  
 30255                                  hu_20:	mov	ax,cx
 30256                                  	call	isSpecified	; If they specified this UMB, we're done...
 30257                                  	jnz	short hu_X	; so leave.
 30258                                  
 30259                                  	xor	dx,dx
 30260                                  hu_30:	
 30261                                  	mov	al,cl
 30262                                  
 30263                                  	call	hideUMB		; Hides everything in UMB #al
 30264                                  
 30265                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30266                                  	jz	short hu_X	; So we should leave.
 30267                                  
 30268                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30269                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30270                                  hu_X:	
 30271                                  	pop	es
 30272                                  	pop	dx
 30273                                  	pop	bx
 30274                                  	retn
 30275                                  
 30276                                  ; -----------------------------------------------------------------------------
 30277                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30278                                  ; -----------------------------------------------------------------------------
 30279                                  ; Entry:  None
 30280                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30281                                  ; Error:  None
 30282                                  ; Uses:   Flags
 30283                                  ; -----------------------------------------------------------------------------
 30284                                  
 30285                                  UnFreeze:
 30286                                  	push	ax
 30287                                  	push	es
 30288                                  
 30289                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30290                                  	jc	short ufX
 30291                                  
 30292                                  	mov	es,ax
 30293                                  
 30294                                  ; ------------------------------
 30295                                  ; UF10--ES - Current MCB address
 30296                                  ; ------------------------------
 30297                                  
 30298                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30299                                  	jnz	short uf20
 30300                                  	call	unHideMCB
 30301                                  uf20:	
 30302                                  	mov	al,[es:ARENA.SIGNATURE]
 30303                                  
 30304                                  	cmp	al,arena_signature_end ; 'Z'
 30305                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30306                                  
 30307                                  	;NextMCB es, ax		; Go on forward.
 30308                                  	mov     ax,es
 30309                                  	;add	ax,[es:3]
 30310                                  	add     ax,[es:ARENA.SIZE]
 30311                                  	inc     ax
 30312                                  	mov     es,ax
 30313                                  
 30314                                  	jmp	short uf10
 30315                                  ufX:	
 30316                                  	pop	es
 30317                                  	pop	ax
 30318                                  	retn
 30319                                  
 30320                                  ; -----------------------------------------------------------------------------
 30321                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30322                                  ; -----------------------------------------------------------------------------
 30323                                  ; ENTRY:    ES:0 should point to an MCB
 30324                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30325                                  ; ERROR:    None
 30326                                  ; USES:     Flags
 30327                                  ; -----------------------------------------------------------------------------
 30328                                  
 30329                                  isFrozMCB:
 30330                                  	;push	ax
 30331                                  
 30332                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30333                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30334                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30335                                  	jne	short ifmX
 30336                                  
 30337                                  	;mov	ax,[es:ARENA.NAME+0]
 30338                                  	;cmp	ax,'FR' ; 5246h
 30339                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30340                                  	jne	short ifmX
 30341                                  	;mov	ax,[es:ARENA.NAME+2]
 30342                                  	;cmp	ax,'OZ' ; 5A4Fh
 30343                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30344                                  	jne	short ifmX
 30345                                  	;mov	ax,[es:ARENA.NAME+4]
 30346                                  	;cmp	ax,'EN' ; 4E45h
 30347                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30348                                  	jne	short ifmX
 30349                                  	;mov	ax,[es:ARENA.NAME+6]
 30350                                  	;cmp	ax,'  ' ; 2020h
 30351                                  	cmp	word [es:ARENA.NAME+6],'  '
 30352                                  ifmX:	
 30353                                  	;pop	ax
 30354                                  	retn
 30355                                  
 30356                                  ; -----------------------------------------------------------------------------
 30357                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30358                                  ; -----------------------------------------------------------------------------
 30359                                  ; ENTRY:    ES:0 should point to an MCB
 30360                                  ; EXIT:     None; MCB frozen
 30361                                  ; ERROR:    None
 30362                                  ; USES:     None
 30363                                  ; -----------------------------------------------------------------------------
 30364                                  
 30365                                  frezMCB:
 30366                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30367                                  	mov	word [es:ARENA.NAME+0],'FR'
 30368                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30369                                  	mov	word [es:ARENA.NAME+4],'EN'
 30370                                  	mov	word [es:ARENA.NAME+6],'  '
 30371                                  	retn
 30372                                  
 30373                                  ; -----------------------------------------------------------------------------
 30374                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30375                                  ; -----------------------------------------------------------------------------
 30376                                  ; Entry:  None
 30377                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30378                                  ; Error:  None
 30379                                  ; Uses:   Flags
 30380                                  ; -----------------------------------------------------------------------------
 30381                                  
 30382                                  FreezeUM:
 30383                                  	push	ax
 30384                                  	push	cx
 30385                                  	push	dx
 30386                                  	push	es
 30387                                  
 30388                                  	;call	GetLoadUMB
 30389                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30390                                  
 30391                                  	xor	ah,ah		; Zap ah, so al==ax
 30392                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30393                                  
 30394                                  	call	UmbHead		; Returns first UMB segment in AX
 30395                                  	mov	es,ax
 30396                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30397                                  
 30398                                  ; -----------------------------------------
 30399                                  ; FUM10--ES - Current MCB address
 30400                                  ;        CX - Current UMB number
 30401                                  ;        DX - UMB number to skip (load UMB)
 30402                                  ; -----------------------------------------
 30403                                  
 30404                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30405                                  	jnz	short fum20
 30406                                  
 30407                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30408                                  fum20:	
 30409                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30410                                  	je	short fum30	; freeze anything... so skip that section.
 30411                                  
 30412                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30413                                  	or	word [es:ARENA.OWNER],0
 30414                                  	jnz	short fum30	; either.
 30415                                  
 30416                                  	call	frezMCB
 30417                                  fum30:	
 30418                                  	mov	al,[es:ARENA.SIGNATURE]
 30419                                  	cmp	al,arena_signature_end ; 'Z'
 30420                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30421                                  
 30422                                  	;NextMCB es, ax		; Go on forward.
 30423                                  	mov     ax,es
 30424                                  	;add	ax,[es:3]
 30425                                  	add     ax,[es:ARENA.SIZE]
 30426                                  	inc     ax
 30427                                  	mov     es,ax
 30428                                  	
 30429                                  	jmp	short fum10
 30430                                  
 30431                                  fumX:	pop	es
 30432                                  	pop	dx
 30433                                  	pop	cx
 30434                                  	pop	ax
 30435                                  	retn
 30436                                  
 30437                                  ; -----------------------------------------------------------------------------
 30438                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30439                                  ; -----------------------------------------------------------------------------
 30440                                  ; ENTRY:    None
 30441                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30442                                  ; ERROR:    None
 30443                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30444                                  ; -----------------------------------------------------------------------------
 30445                                  
 30446                                  UmbTest:
 30447                                  	push	ax
 30448                                  	push	bx
 30449                                  	push	ds
 30450                                  	push	es
 30451                                  
 30452                                  	call	fm_link			; Link in UMBs (if not already linked)
 30453                                  	call	WalkMem			; Check to see if they're really linked
 30454                                  	pushf				; And remember what we found out
 30455                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30456                                  	popf				; And restore what we found out.
 30457                                  
 30458                                  	pop	es
 30459                                  	pop	ds
 30460                                  	pop	bx
 30461                                  	pop	ax
 30462                                  	retn
 30463                                  
 30464                                  ; -----------------------------------------------------------------------------
 30465                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30466                                  ; -----------------------------------------------------------------------------
 30467                                  ; ENTRY:    None
 30468                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30469                                  ; ERROR:    None
 30470                                  ; USES:     Flags
 30471                                  ; -----------------------------------------------------------------------------
 30472                                  
 30473                                  WalkMem:
 30474                                  	push	ax ; ?
 30475                                  	push	bx ; ?
 30476                                  	push	es ; ? no need to save contents of these registers ?
 30477                                  		   	
 30478                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30479                                  	int	21h
 30480                                  
 30481                                  	mov	ax,[es:bx-2]
 30482                                  	mov	es,ax
 30483                                  
 30484                                  ; ------------------------------
 30485                                  ; UM10: ES = Current MCB pointer
 30486                                  ; ------------------------------
 30487                                  
 30488                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30489                                  	cmp	al,arena_signature_end ;  'Z'
 30490                                  	je	short um20		; If signature == 'Z', hay no more.
 30491                                  
 30492                                  	;NextMCB es, bx			; Move to the next MCB
 30493                                  
 30494                                  	mov     bx,es
 30495                                  	;add	bx,[es:3]
 30496                                  	add     bx,[es:ARENA.SIZE]
 30497                                  	inc     bx
 30498                                  	mov     es,bx
 30499                                  		
 30500                                  	jmp	short um10		; And restart the loop.
 30501                                  um20:	
 30502                                  	mov	ax,es
 30503                                  
 30504                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30505                                  
 30506                                  	pop	es ; ?
 30507                                  	pop	bx ; ?
 30508                                  	pop	ax ; ?
 30509                                  	retn
 30510                                  
 30511                                  ; -----------------------------------------------------------------------------
 30512                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30513                                  ; -----------------------------------------------------------------------------
 30514                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30515                                  ; EXIT:     None
 30516                                  ; ERROR:    None
 30517                                  ; USES:     AX, BX
 30518                                  ; -----------------------------------------------------------------------------
 30519                                  
 30520                                  hl_unlink:
 30521                                  	xor	bh,bh
 30522                                  
 30523                                  	;getdata bl,fm_umb		; Restore original link-state
 30524                                  	;
 30525                                  	;push	ds
 30526                                  	;push	cs
 30527                                  	;pop	ds
 30528                                  	;mov	bl,[fm_umb]
 30529                                  	;pop	ds
 30530                                  
 30531                                  	mov	bl,[cs:fm_umb]
 30532                                  
 30533                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30534                                  	int	21h
 30535                                  	retn
 30536                                  
 30537                                  ; ----------------------------------------------------------------------
 30538                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30539                                  ; ----------------------------------------------------------------------
 30540                                  ; 09/04/2019 - Retro DOS v4.0
 30541                                  
 30542                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30543                                  ;   Date:     May 14, 1992
 30544                                  
 30545                                  ;   Modification log:
 30546                                  ;
 30547                                  ;     DATE    WHO      DESCRIPTION
 30548                                  ;   --------  -------  --------------------------------------------------------
 30549                                  ;   05/14/92  t-richj  Original
 30550                                  ;   06/21/92  t-richj  Final revisions before check-in
 30551                                  
 30552                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30553                                  
 30554                                  ; -----------------------------------------------------------------------------
 30555                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30556                                  ; -----------------------------------------------------------------------------
 30557                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30558                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30559                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30560                                  ; ERROR:  None
 30561                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30562                                  ; -----------------------------------------------------------------------------
 30563                                  
 30564                                  UnHideUMBs:
 30565                                  	push	ax		; Save ax for what we're about to do
 30566                                  
 30567                                  ; -----------------------------------------------------------------------------
 30568                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30569                                  ;    length of time. Those six constitute a check of whether or not we should
 30570                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30571                                  ;    will destroy the current link-state and memory-allocation strategy after
 30572                                  ;    every command execution.
 30573                                  ; -----------------------------------------------------------------------------
 30574                                  
 30575                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30576                                  	;
 30577                                  	;push	ds
 30578                                  	;push	cs
 30579                                  	;pop	ds
 30580                                  	;mov	al,[fInHigh]
 30581                                  	;pop	ds	
 30582                                  
 30583                                  	mov	al,[cs:fInHigh]
 30584                                  
 30585                                  	or	al,al
 30586                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30587                                  
 30588                                  	pop	ax		; then there's nothing to do here... so
 30589                                  	stc			; restore everything and return. Just like
 30590                                  	retn			; that.
 30591                                  uhu10:	
 30592                                  	call	linkumb		; Make sure UMBs are linked in.
 30593                                  	call	FreeUMBs
 30594                                  
 30595                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30596                                  	;
 30597                                  	;push	es
 30598                                  	;push	cs
 30599                                  	;pop	es
 30600                                  	;mov	byte [es:fInHigh],0
 30601                                  	;pop	ds	
 30602                                  
 30603                                  	mov	byte [cs:fInHigh],0	
 30604                                  
 30605                                  	call	he_unlink	; Unlink UMBs
 30606                                  
 30607                                  	pop	ax
 30608                                  	; 12/12/2022
 30609                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30610                                  	retn
 30611                                  
 30612                                  ; -----------------------------------------------------------------------------
 30613                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30614                                  ; -----------------------------------------------------------------------------
 30615                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30616                                  ; EXIT:     None
 30617                                  ; ERROR:    None
 30618                                  ; USES:     AX, BX
 30619                                  ; -----------------------------------------------------------------------------
 30620                                  
 30621                                  he_unlink:
 30622                                  	xor	bh, bh
 30623                                  
 30624                                  	;getdata bl, fm_umb	; Restore original link-state
 30625                                  	mov	bl,[cs:fm_umb]	
 30626                                  
 30627                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30628                                  	int	21h
 30629                                  	retn
 30630                                  
 30631                                  ; -----------------------------------------------------------------------------
 30632                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30633                                  ; -----------------------------------------------------------------------------
 30634                                  ; ENTRY:    None
 30635                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30636                                  ; ERROR:    None (ignore CF)
 30637                                  ; USES:     Flags
 30638                                  ; -----------------------------------------------------------------------------
 30639                                  
 30640                                  FreeUMBs:
 30641                                  	push	ax
 30642                                  	push	es
 30643                                  
 30644                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30645                                  	jc	short fusX
 30646                                  
 30647                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30648                                  fus10:	
 30649                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30650                                  	jnz	short fus20
 30651                                  	call	freeMCB
 30652                                  fus20:	   
 30653                                  	mov	al,[es:ARENA.SIGNATURE]
 30654                                  	cmp	al,arena_signature_end ; 'Z'
 30655                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30656                                  
 30657                                  	mov	ax,es
 30658                                  	add	ax,[es:ARENA.SIZE]
 30659                                  	inc	ax
 30660                                  	mov	es,ax		; Go on forward.
 30661                                  
 30662                                  	jmp	short fus10
 30663                                  fusX:	
 30664                                  	pop	es
 30665                                  	pop	ax
 30666                                  	retn
 30667                                  
 30668                                  ; -----------------------------------------------------------------------------
 30669                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30670                                  ; -----------------------------------------------------------------------------
 30671                                  ; ENTRY:    ES:0 should point to an MCB
 30672                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30673                                  ; ERROR:    None
 30674                                  ; USES:     Flags
 30675                                  ; -----------------------------------------------------------------------------
 30676                                  
 30677                                  isHideMCB:
 30678                                  	;push	ax
 30679                                  
 30680                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30681                                  	jne	short ihm_x				; then check for HIDDEN
 30682                                  
 30683                                  	;mov	ax,[es:ARENA.NAME]
 30684                                  	;cmp	ax,'HI' ; 4948h
 30685                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30686                                  	jne	short ihm_x
 30687                                  	;mov	ax,[es:ARENA.NAME+2]
 30688                                  	;cmp	ax,'DD' ; 4444h
 30689                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30690                                  	jne	short ihm_x
 30691                                  	;mov	ax,[es:ARENA.NAME+4]
 30692                                  	;cmp	ax,'EN' ; 4E45h
 30693                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30694                                  	jne	short ihm_x
 30695                                  	;mov	ax,[es:ARENA.NAME+6]
 30696                                  	;cmp	ax,'  ' ; 2020h
 30697                                  	cmp	word [es:ARENA.NAME+6],'  '
 30698                                  ihm_x:	
 30699                                  	;pop	ax
 30700                                  	retn
 30701                                  
 30702                                  ; -----------------------------------------------------------------------------
 30703                                  ;*** freeMCB - marks as free the MCB at ES:0
 30704                                  ; -----------------------------------------------------------------------------
 30705                                  ; ENTRY:    ES:0 should point to an MCB
 30706                                  ; EXIT:     None; MCB free'd
 30707                                  ; ERROR:    None
 30708                                  ; USES:     AX
 30709                                  ; -----------------------------------------------------------------------------
 30710                                  
 30711                                  freeMCB:
 30712                                  	mov	word [es:ARENA.OWNER],0
 30713                                  	mov	ax,'  '
 30714                                  	mov	[es:ARENA.NAME+0],ax
 30715                                  	mov	[es:ARENA.NAME+2],ax
 30716                                  	mov	[es:ARENA.NAME+4],ax
 30717                                  	mov	[es:ARENA.NAME+6],ax
 30718                                  	retn
 30719                                  
 30720                                  ; -----------------------------------------------------------------------------
 30721                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30722                                  ; -----------------------------------------------------------------------------
 30723                                  ; ENTRY:  Nothing
 30724                                  ; EXIT:   AX contains 0x9FFF for most systems
 30725                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30726                                  ; USES:   Flags, AX
 30727                                  ; -----------------------------------------------------------------------------
 30728                                  
 30729                                  HeadUmb:
 30730                                  	; 13/05/2019
 30731                                  
 30732                                  	;push	si ; ?
 30733                                  	;push	ds ; ?
 30734                                  	;push	es
 30735                                  	;push	bx ; *
 30736                                  
 30737                                  	; 09/04/2019
 30738                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30739                                  
 30740                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30741                                  	int	21h
 30742                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30743                                  			; Return: ES:BX -> DOS list of lists
 30744                                  	;mov	ax,[es:8Ch]
 30745                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30746                                  	cmp	ax,0FFFFh
 30747                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30748                                  
 30749                                  	;clc				; Else, it isn't.
 30750                                  	;jmp	short xhu_x
 30751                                  xhu_e:	
 30752                                  	;stc
 30753                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30754                                  xhu_x:	
 30755                                  	;pop	bx ; *
 30756                                  	;pop	es	
 30757                                  	;pop	ds ; ?
 30758                                  	;pop	si ; ?
 30759                                  	retn
 30760                                  
 30761                                  ; -----------------------------------------------------------------------------
 30762                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30763                                  ; -----------------------------------------------------------------------------
 30764                                  ; ENTRY:    None
 30765                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30766                                  ; ERROR:    None
 30767                                  ; USES:     AX, BX, fm_umb
 30768                                  ; -----------------------------------------------------------------------------
 30769                                  
 30770                                  linkumb:
 30771                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30772                                  	int	21h			; Current link-state is now in al
 30773                                  
 30774                                  	or	al,al			; BUGBUG: proper check?
 30775                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30776                                  
 30777                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30778                                  	mov	bx,1
 30779                                  	int	21h
 30780                                  lumbX:
 30781                                  	retn
 30782                                  
 30783                                  %endif
 30784                                  
 30785                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30786                                  ; (SYSINIT:2B5Fh)
 30787                                  
 30788                                  ; ----------------------------------------------------------------------
 30789                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30790                                  ; ----------------------------------------------------------------------
 30791                                  ; 09/04/2019 - Retro DOS v4.0
 30792                                  
 30793                                  ;----------------------------------------------------------------------------
 30794                                  ;
 30795                                  ; procedure : InitDevLoad
 30796                                  ;
 30797                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30798                                  ;			 = 1 indicates load in UMB:
 30799                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30800                                  ;		                    = 1 indicates a DOS 5-style load
 30801                                  ;		DevSize  = Size of the device driver file in paras
 30802                                  ;
 30803                                  ;	Output : none
 30804                                  ;
 30805                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30806                                  ;	Also sets up a header for the Device driver entry for mem utility
 30807                                  ;
 30808                                  ;----------------------------------------------------------------------------
 30809                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30810                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30811                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30812                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30813                                  ;----------------------------------------------------------------------------
 30814                                  
 30815                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30816                                  InitDevLoad:
 30817                                  	; 11/12/2022
 30818                                  	; ds = cs
 30819 00002810 803E[FF1E]00            	cmp	byte [DeviceHi],0
 30820                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30821                                  	;je	short InitForLo		; no, init for lo mem
 30822 00002815 741F                    	je	short initforlo_x ; 09/04/2019
 30823                                  
 30824                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30825                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30826                                  ;	je	short InitForConv
 30827                                  ;
 30828                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30829                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30830                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30831                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30832                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30833                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30834                                  ;
 30835                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30836                                  ;
 30837                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30838                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30839                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30840                                  ;	pushf
 30841                                  ;	call	UnFreeze		; Then unhide everything frozen
 30842                                  ;	popf
 30843                                  ;
 30844                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30845                                  ;
 30846                                  ;	jmp	short InitForHi
 30847                                  
 30848                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30849                                  	; (SYSINIT:2B67h)
 30850                                  InitForConv:
 30851                                  	; 11/12/2022
 30852                                  	; ds = cs
 30853 00002817 E83700                  	call	SpaceInUMB		; Do we have space left in the
 30854                                  					;  current UMB ?
 30855 0000281A 7308                    	jnc	short InitForHi		; yes, we have
 30856 0000281C E84F04                  	call	ShrinkUMB		; shrink the current UMB in use
 30857 0000281F E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30858 00002822 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30859                                  					;  in low memory
 30860                                  InitForHi:
 30861                                  	; 11/12/2022
 30862                                  	; ds = cs
 30863                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30864                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30865                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30866 00002824 A1[F51E]                	mov	ax,[DevUMBFree]
 30867 00002827 8B16[F11E]              	mov	dx,[DevUMBAddr]
 30868 0000282B 0316[F31E]              	add	dx,[DevUMBSize]
 30869 0000282F EB0C                    	jmp	short idl1
 30870                                  
 30871                                  InitForLo:
 30872                                  	; 11/12/2022
 30873                                  	; ds = cs
 30874                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30875 00002831 C606[FF1E]00            	mov	byte [DeviceHi],0
 30876                                  initforlo_x:
 30877                                  	; 11/12/2022
 30878                                  	; ds = cs
 30879                                  					;  into UMB indicate that
 30880                                  					;  we are loading low
 30881                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30882                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30883 00002836 A1[E003]                	mov	ax,[memhi]
 30884 00002839 8B16[A302]              	mov	dx,[ALLOCLIM]
 30885                                  idl1:
 30886 0000283D E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30887                                  	; 11/12/2022
 30888                                  	; ds = cs
 30889                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30890                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30891                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30892                                  	;mov	[cs:DevEntry+2],ax
 30893 00002840 A3[E41E]                	mov	[DevLoadAddr],ax
 30894 00002843 8916[E61E]              	mov	[DevLoadEnd],dx
 30895 00002847 C706[E81E]0000          	mov	word [DevEntry],0
 30896 0000284D A3[EA1E]                	mov	[DevEntry+2],ax
 30897 00002850 C3                      	retn
 30898                                  
 30899                                  ;----------------------------------------------------------------------------
 30900                                  ;
 30901                                  ; procedure : SpaceInUMB?
 30902                                  ;
 30903                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30904                                  ;	Output : Carry set if no space in UMB
 30905                                  ;		 Carry clear if Space is available for the device in
 30906                                  ;		   current UMB
 30907                                  ;
 30908                                  ;----------------------------------------------------------------------------
 30909                                  
 30910                                  SpaceInUMB:
 30911                                  	; 11/12/2022
 30912                                  	; ds = cs
 30913                                  	;mov	ax,[cs:DevUMBSize]
 30914                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30915                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30916 00002851 A1[F31E]                	mov	ax,[DevUMBSize]
 30917 00002854 0306[F11E]              	add	ax,[DevUMBAddr]		; End of UMB
 30918 00002858 2B06[F51E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30919                                  	; 11/12/2022
 30920                                  	;or	ax,ax			; Nospace ?
 30921                                  	;jnz	short spcinumb1
 30922                                  	;stc
 30923                                  	;retn
 30924                                  	; 11/12/2022
 30925 0000285C 83F801                  	cmp	ax,1
 30926 0000285F 7205                    	jb	short spcinumb2	; cf=1
 30927                                  spcinumb1:
 30928 00002861 48                      	dec	ax			; space for sub-arena
 30929                                  	; 11/12/2022
 30930                                  	; ds = cs
 30931 00002862 3B06[E21E]              	cmp	ax,[DevSize]
 30932                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30933                                  spcinumb2:
 30934 00002866 C3                      	retn
 30935                                  
 30936                                  ;----------------------------------------------------------------------------
 30937                                  ;
 30938                                  ; procedure : PrepareMark
 30939                                  ;
 30940                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30941                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30942                                  ;
 30943                                  ;----------------------------------------------------------------------------
 30944                                  
 30945                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30946                                  ;
 30947                                  ;PrepareMark:
 30948                                  ;	push	ds
 30949                                  ;	mov	ds,ax
 30950                                  ;	mov	word [ARENA.OWNER],8
 30951                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30952                                  ;	pop	ds
 30953                                  ;
 30954                                  ;	inc	ax
 30955                                  ;	mov	[cs:DevUMBAddr],ax
 30956                                  ;	mov	[cs:DevUMBFree],ax
 30957                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30958                                  ;	retn
 30959                                  
 30960                                  ;----------------------------------------------------------------------------
 30961                                  ;
 30962                                  ; procedure : GetUMBForDev
 30963                                  ;
 30964                                  ;	Input : DevSize
 30965                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30966                                  ;		 the device.
 30967                                  ;		 If success carry clear
 30968                                  ;
 30969                                  ;	Allocates the biggest UMB for loading devices and updates
 30970                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 30971                                  ;	UMB.
 30972                                  ;
 30973                                  ;	This routine relies on the fact that all of the low memory
 30974                                  ;	is allocated, and any DOS alloc calls should return memory
 30975                                  ;	from the UMB pool.
 30976                                  ;
 30977                                  ;----------------------------------------------------------------------------
 30978                                  
 30979                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30980                                  	; (SYSINIT:2BC6h)
 30981                                  
 30982                                  GetUMBForDev:
 30983                                  	; 11/12/2022
 30984                                  	; ds = cs
 30985 00002867 BBFFFF                  	mov	bx,0FFFFh
 30986 0000286A B80048                  	mov	ax,4800h
 30987 0000286D CD21                    	int	21h
 30988                                  		; DOS - 2+ - ALLOCATE MEMORY
 30989                                  		; BX = number of 16-byte paragraphs desired
 30990                                  
 30991 0000286F 09DB                    	or	bx,bx
 30992 00002871 742C                    	jz	short gufd_err
 30993                                  
 30994 00002873 4B                      	dec	bx
 30995                                  	; 11/12/2022
 30996                                  	; ds = cs
 30997 00002874 391E[E21E]              	cmp	[DevSize],bx
 30998                                  	;cmp	[cs:DevSize],bx
 30999 00002878 7725                    	ja	short gufd_err
 31000 0000287A 43                      	inc	bx
 31001                                  
 31002 0000287B B80048                  	mov	ax,4800h
 31003 0000287E CD21                    	int	21h
 31004 00002880 721D                    	jc	short gufd_err
 31005                                  
 31006                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31007                                  	;dec	ax
 31008                                  	;call	PrepareMark
 31009                                  	;
 31010                                  PrepareMark:
 31011 00002882 1E                      	push	ds
 31012 00002883 48                      	dec	ax
 31013 00002884 8ED8                    	mov	ds,ax
 31014 00002886 C70601000800            	mov	word [ARENA.OWNER],8
 31015 0000288C C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 31016 00002892 40                      	inc	ax
 31017 00002893 1F                      	pop	ds
 31018                                  	; 11/12/2022
 31019                                  	; ds = cs
 31020                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31021                                  	;mov	[cs:DevUMBAddr],ax
 31022                                  	;mov	[cs:DevUMBFree],ax
 31023 00002894 891E[F31E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 31024 00002898 A3[F11E]                	mov	[DevUMBAddr],ax
 31025 0000289B A3[F51E]                	mov	[DevUMBFree],ax
 31026                                  	;
 31027                                  	; 11/12/2022
 31028                                  	; cf=0
 31029                                  	;clc				; mark no error
 31030 0000289E C3                      	retn
 31031                                  gufd_err:
 31032 0000289F 31C0                    	xor	ax,ax ; 0
 31033                                  	; 11/12/2022
 31034                                  	; ds = cs
 31035                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 31036                                  	;mov	[cs:DevUMBAddr],ax
 31037                                  	;mov	[cs:DevUMBFree],ax
 31038 000028A1 A3[F31E]                	mov	[DevUMBSize],ax		; erase the previous values
 31039 000028A4 A3[F11E]                	mov	[DevUMBAddr],ax
 31040 000028A7 A3[F51E]                	mov	[DevUMBFree],ax
 31041 000028AA F9                      	stc
 31042 000028AB C3                      	retn
 31043                                  
 31044                                  ;----------------------------------------------------------------------------
 31045                                  ;
 31046                                  ; procedure : DevSetMark
 31047                                  ;
 31048                                  ;	Input : AX - Free segment were device is going to be loaded
 31049                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 31050                                  ;
 31051                                  ;	Creates a sub-arena for the device driver
 31052                                  ;	puts 'D' marker in the sub-arena
 31053                                  ;	Put the owner of the sub-arena as (AX+1)
 31054                                  ;	Copies the file name into sub-arena name field
 31055                                  ;
 31056                                  ;	Size field of the sub-arena will be set only at succesful
 31057                                  ;	completion of Device load.
 31058                                  ;
 31059                                  ;----------------------------------------------------------------------------
 31060                                  
 31061                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31062                                  	; (SYSINIT:2C13h)
 31063                                  
 31064                                  DevSetMark:
 31065 000028AC 06                      	push	es
 31066 000028AD 57                      	push	di
 31067 000028AE 1E                      	push	ds
 31068 000028AF 56                      	push	si
 31069 000028B0 8EC0                    	mov	es,ax
 31070 000028B2 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31071 000028B8 40                      	inc	ax
 31072 000028B9 26A30100                	mov	[es:devmark.seg],ax
 31073                                  
 31074                                  ;-------------- Copy file name
 31075                                  
 31076 000028BD 50                      	push	ax			; save load addr
 31077 000028BE 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 31078                                  
 31079 000028C3 89F7                    	mov	di,si
 31080 000028C5 FC                      	cld
 31081                                  dsm_again:
 31082 000028C6 AC                      	lodsb
 31083 000028C7 3C3A                    	cmp	al,':'
 31084 000028C9 7504                    	jne	short isit_slash
 31085 000028CB 89F7                    	mov	di,si
 31086 000028CD EBF7                    	jmp	short dsm_again
 31087                                  isit_slash:
 31088 000028CF 3C5C                    	cmp	al, '\'
 31089 000028D1 7504                    	jne	short isit_null
 31090 000028D3 89F7                    	mov	di,si
 31091 000028D5 EBEF                    	jmp	short dsm_again
 31092                                  isit_null:
 31093 000028D7 08C0                    	or	al,al
 31094 000028D9 75EB                    	jnz	short dsm_again
 31095 000028DB 89FE                    	mov	si,di
 31096                                  
 31097 000028DD BF0800                  	mov	di,devmark.filename ; 8
 31098 000028E0 B90800                  	mov	cx,8			; maximum 8 characters
 31099                                  dsm_next_char:
 31100 000028E3 AC                      	lodsb
 31101 000028E4 08C0                    	or	al, al
 31102 000028E6 7407                    	jz	short blankout
 31103 000028E8 3C2E                    	cmp	al, '.'
 31104 000028EA 7403                    	je	short blankout
 31105 000028EC AA                      	stosb
 31106 000028ED E2F4                    	loop	dsm_next_char
 31107                                  blankout:
 31108 000028EF E304                    	jcxz	dsm_exit
 31109 000028F1 B020                    	mov	al, ' '
 31110 000028F3 F3AA                    	rep	stosb			; blank out the rest
 31111                                  dsm_exit:
 31112 000028F5 58                      	pop	ax			; restore load addr
 31113 000028F6 5E                      	pop	si
 31114 000028F7 1F                      	pop	ds
 31115 000028F8 5F                      	pop	di
 31116 000028F9 07                      	pop	es
 31117 000028FA C3                      	retn
 31118                                  
 31119                                  ;----------------------------------------------------------------------------
 31120                                  ;
 31121                                  ; procedure : SizeDevice
 31122                                  ;
 31123                                  ;	Input : ES:SI - points to device file to be sized
 31124                                  ;
 31125                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31126                                  ;
 31127                                  ;	Calculates the size of the device file in paras and stores it
 31128                                  ;	in DevSize
 31129                                  ;
 31130                                  ;----------------------------------------------------------------------------
 31131                                  
 31132                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31133                                  SizeDevice:
 31134                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31135                                  	; 11/12/2022 ; *
 31136 000028FB 1E                      	push	ds ; *
 31137 000028FC 06                      	push	es
 31138 000028FD 1F                      	pop	ds
 31139 000028FE 89F2                    	mov	dx,si			; ds:dx -> file name
 31140 00002900 B8003D                  	mov	ax,3D00h		; open
 31141 00002903 CD21                    	int	21h
 31142 00002905 7243                    	jc	short sd_err		; open failed
 31143                                  
 31144 00002907 89C3                    	mov	bx,ax			; BX - file handle
 31145 00002909 B80242                  	mov	ax,4202h		; seek
 31146 0000290C 31C9                    	xor	cx,cx
 31147 0000290E 89CA                    	mov	dx,cx			; to end of file
 31148 00002910 CD21                    	int	21h
 31149 00002912 722F                    	jc	short sd_close		; did seek fail (impossible)
 31150 00002914 83C00F                  	add	ax,15			; para convert
 31151 00002917 83D200                  	adc	dx,0
 31152 0000291A F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31153 0000291E 7409                    	jz	short szdev1		; no
 31154 00002920 2EC706[E21E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31155                                  					; assuming that we fail later
 31156 00002927 EB1A                    	jmp	short sd_close
 31157                                  szdev1:
 31158 00002929 B104                    	mov	cl,4			; convert it to paras
 31159 0000292B D3E8                    	shr	ax,cl
 31160 0000292D B10C                    	mov	cl,12
 31161 0000292F D3E2                    	shl	dx,cl
 31162 00002931 09D0                    	or	ax,dx
 31163                                  	;
 31164                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31165 00002933 2E3B06[001F]            	cmp     ax,[cs:DevSizeOption]
 31166                                  	;ja	short szdev2
 31167                                  	; 14/08/2023
 31168 00002938 7305                    	jnb	short szdev2
 31169 0000293A 2EA1[001F]              	mov     ax,[cs:DevSizeOption]
 31170                                  	; 12/12/2022
 31171 0000293E F8                      	clc
 31172                                  szdev2:
 31173 0000293F 2EA3[E21E]              	mov	[cs:DevSize],ax		; save file size
 31174                                  
 31175                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31176                                  	; 12/12/2022
 31177                                  	; cf=0
 31178                                  	;clc
 31179                                  sd_close:
 31180 00002943 9C                      	pushf				; let close not spoil our
 31181                                  					;  carry flag
 31182 00002944 B8003E                  	mov	ax,3E00h		; close
 31183 00002947 CD21                    	int	21h			; we are not checking for err
 31184 00002949 9D                      	popf
 31185                                  sd_err:
 31186                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31187                                  	; 11/12/2022 ; *
 31188 0000294A 1F                      	pop     ds ; *
 31189 0000294B C3                      	retn
 31190                                  
 31191                                  ;----------------------------------------------------------------------------
 31192                                  ;
 31193                                  ; procedure : ExecDev
 31194                                  ;
 31195                                  ;	Input : ds:dx -> device to be executed
 31196                                  ;		DevLoadAddr - contains where device has to be loaded
 31197                                  ;
 31198                                  ;	Output : Carry if error
 31199                                  ;		 Carry clear if no error
 31200                                  ;
 31201                                  ;	Loads a device driver using the 4b03h function call
 31202                                  ;
 31203                                  ;----------------------------------------------------------------------------
 31204                                  
 31205                                  	; 01/11/2022
 31206                                  ExecDev:
 31207 0000294C 2E8B1E[E41E]            	mov	bx,[cs:DevLoadAddr]
 31208 00002951 2E891E[FB1E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31209                                  					;  block for exec with
 31210                                  					;  Load address
 31211 00002956 2E891E[FD1E]            	mov	[cs:DevExecReloc],bx
 31212 0000295B 8CCB                    	mov	bx,cs
 31213 0000295D 8EC3                    	mov	es,bx
 31214 0000295F BB[FB1E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31215 00002962 B003                    	mov	al,3	; (load program only)
 31216 00002964 B44B                    	mov	ah,EXEC ; 4Bh
 31217 00002966 CD21                    	int	21h			;load in the device driver
 31218                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31219                                  		; DS:DX -> ASCIZ filename
 31220                                  		; ES:BX -> parameter block
 31221                                  		; AL = subfunction 
 31222 00002968 C3                      	retn
 31223                                  
 31224                                  ;----------------------------------------------------------------------------
 31225                                  ;
 31226                                  ; procedure : RetFromUM
 31227                                  ;
 31228                                  ;	Input : None
 31229                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31230                                  ;		 ConvLoad clear if did.
 31231                                  ;
 31232                                  ;	Prepares memory for more devices after returning from loading one
 31233                                  ;	using the DOS 6 options (/L:... etc).
 31234                                  ;
 31235                                  ;----------------------------------------------------------------------------
 31236                                  
 31237                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31238                                  ;RetFromUM:
 31239                                  ;	pushf
 31240                                  ;	mov	byte [cs:ConvLoad],1
 31241                                  ;	call	UnHideUMBs
 31242                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31243                                  ;	mov	byte [cs:ConvLoad],0
 31244                                  ;rfUM1:	
 31245                                  ;	popf
 31246                                  ;	retn
 31247                                  
 31248                                  ;----------------------------------------------------------------------------
 31249                                  ;
 31250                                  ; procedure : RemoveNull
 31251                                  ;
 31252                                  ;	Input : ES:SI points to a null terminated string
 31253                                  ;
 31254                                  ;	Output : none
 31255                                  ;
 31256                                  ;	Replaces the null at the end of a string with blank
 31257                                  ;
 31258                                  ;----------------------------------------------------------------------------
 31259                                  
 31260                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31261                                  	; (SYSINIT:2CCEh)
 31262                                  RemoveNull:
 31263                                  	; 11/12/2022
 31264                                  	; ds = cs
 31265                                  rn_next:
 31266 00002969 268A1C                  	mov	bl,[es:si]
 31267 0000296C 08DB                    	or	bl,bl			; null ?
 31268 0000296E 7403                    	jz	short rn_gotnull
 31269 00002970 46                      	inc	si			; advance the pointer
 31270 00002971 EBF6                    	jmp	short rn_next
 31271                                  rn_gotnull:
 31272                                  	; 11/12/2022
 31273 00002973 8A1E[141F]              	mov	bl,[DevSavedDelim]
 31274                                  	;mov	bl,[cs:DevSavedDelim]
 31275 00002977 26881C                  	mov	[es:si],bl		; replace null with blank
 31276                                  	; 02/11/2022
 31277                                  ; 11/12/2022
 31278                                  rba_ok:		; 10/04/2019
 31279 0000297A C3                      	retn
 31280                                  
 31281                                  ;----------------------------------------------------------------------------
 31282                                  ;
 31283                                  ; procedure : RoundBreakAddr
 31284                                  ;
 31285                                  ;	Input : DevBrkAddr
 31286                                  ;	Output : DevBrkAddr
 31287                                  ;
 31288                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31289                                  ;
 31290                                  ;----------------------------------------------------------------------------
 31291                                  
 31292                                  RoundBreakAddr:
 31293 0000297B 2EA1[EC1E]              	mov	ax,[cs:DevBrkAddr]
 31294 0000297F E837E7                  	call	ParaRound
 31295 00002982 2E0106[EE1E]            	add	[cs:DevBrkAddr+2],ax
 31296 00002987 2EC706[EC1E]0000        	mov	word [cs:DevBrkAddr],0
 31297 0000298E 2EA1[E61E]              	mov	ax,[cs:DevLoadEnd]
 31298 00002992 2E3906[EE1E]            	cmp	[cs:DevBrkAddr+2],ax
 31299 00002997 76E1                    	jbe	short rba_ok
 31300 00002999 E96507                  	jmp	mem_err
 31301                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31302                                  	; 11/12/2022
 31303                                  ;rba_ok:
 31304                                  ;	retn
 31305                                  
 31306                                  ;----------------------------------------------------------------------------
 31307                                  ;
 31308                                  ; procedure : DevSetBreak
 31309                                  ;
 31310                                  ;	Input : DevBrkAddr
 31311                                  ;	Output : Carry set if Device returned Init failed
 31312                                  ;		 Else carry clear
 31313                                  ;
 31314                                  ;----------------------------------------------------------------------------
 31315                                  
 31316                                  DevSetBreak:
 31317 0000299C 50                      	push	ax
 31318                                  
 31319 0000299D 2EA1[EE1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31320 000029A1 2E803E[2B14]00          	cmp	byte [cs:multdeviceflag],0
 31321 000029A7 750F                    	jne	short set_break_continue ;do not check it.
 31322 000029A9 2E3B06[E41E]            	cmp	ax,[cs:DevLoadAddr]
 31323 000029AE 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31324                                  
 31325                                  	;cmp	word [cs:DevBrkAddr],0
 31326                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31327                                  	; 12/12/2022
 31328 000029B0 2E833E[EC1E]01          	cmp	word [cs:DevBrkAddr],1
 31329 000029B6 7204                    	jb	short break_failed
 31330                                  
 31331                                  set_break_continue:
 31332 000029B8 E8C0FF                  	call	RoundBreakAddr
 31333                                  	; 12/12/2022
 31334 000029BB F8                      	clc
 31335                                  break_failed:
 31336 000029BC 58                      	pop	ax
 31337                                  	;clc
 31338 000029BD C3                      	retn
 31339                                  
 31340                                  	; 12/12/2022
 31341                                  ;break_failed:
 31342                                  	;pop	ax
 31343                                  	;stc
 31344                                  	;retn
 31345                                  
 31346                                  ;----------------------------------------------------------------------------
 31347                                  ;
 31348                                  ; procedure : DevBreak
 31349                                  ;
 31350                                  ;	Input : DevLoadAddr & DevBrkAddr
 31351                                  ;	Output : none
 31352                                  ;
 31353                                  ;	Marks a succesful install of a device driver
 31354                                  ;	Sets device size field in sub-arena &
 31355                                  ;	Updates Free ptr in UMB or adjusts memhi
 31356                                  ;
 31357                                  ;----------------------------------------------------------------------------
 31358                                  
 31359                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31360                                  DevBreak:
 31361                                  	;push	ds ; 11/12/2022
 31362                                  
 31363                                  	; 11/12/2022
 31364 000029BE 0E                      	push	cs
 31365 000029BF 1F                      	pop	ds
 31366                                  	;mov	ax,[cs:DevLoadAddr]
 31367                                  	;mov	bx,[cs:DevBrkAddr+2]
 31368 000029C0 A1[E41E]                	mov	ax,[DevLoadAddr]
 31369 000029C3 8B1E[EE1E]              	mov	bx,[DevBrkAddr+2]
 31370                                  	; 11/12/2022
 31371 000029C7 1E                      	push	ds
 31372                                  
 31373 000029C8 48                      	dec	ax			; seg of sub-arena
 31374 000029C9 8ED8                    	mov	ds,ax
 31375 000029CB 40                      	inc	ax			; Back to Device segment
 31376 000029CC 29D8                    	sub	ax,bx
 31377 000029CE F7D8                    	neg	ax			; size of device in paras
 31378 000029D0 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31379                                  	
 31380                                  	; 11/12/2022
 31381 000029D3 1F                      	pop	ds
 31382                                  	; ds = cs
 31383                                   	
 31384 000029D4 803E[FF1E]00            	cmp	byte [DeviceHi],0
 31385                                  	;cmp	byte [cs:DeviceHi],0
 31386 000029D9 7405                    	je	short db_lo
 31387                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31388                                  	;jmp	short db_exit
 31389                                  	; 11/12/2022
 31390 000029DB 891E[F51E]              	mov	[DevUMBFree],bx
 31391 000029DF C3                      	retn	
 31392                                  db_lo:
 31393                                  	; 11/12/2022
 31394                                  	; ds = cs
 31395                                  	;mov	[cs:memhi],bx
 31396                                  	;mov	word [cs:memlo],0
 31397 000029E0 891E[E003]              	mov	[memhi],bx
 31398 000029E4 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31399                                  db_exit:
 31400                                  	;pop	ds ; 11/12/2022
 31401 000029EA C3                      	retn
 31402                                  
 31403                                  ; 10/04/2019 - Retro DOS v4.0
 31404                                  
 31405                                  ;----------------------------------------------------------------------------
 31406                                  ;
 31407                                  ; procedure : ParseSize
 31408                                  ;
 31409                                  ;	Parses the command line for SIZE= command
 31410                                  ;
 31411                                  ;	ES:SI = command line to parsed
 31412                                  ;
 31413                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31414                                  ;	updates the DevSizeOption variable with value supplied
 31415                                  ;	in SIZE=option
 31416                                  ;	Returns carry if the SIZE option was invalid
 31417                                  ;
 31418                                  ;----------------------------------------------------------------------------
 31419                                  
 31420                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31421                                  	; (SYSINIT:2D5Ah)
 31422                                  ParseSize:
 31423                                  	;push	bx
 31424                                  	;mov	bx,si
 31425                                  
 31426                                  	; 11/12/2022
 31427                                  	; ds = cs
 31428                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31429                                  	;mov	[cs:DevCmdLine],si
 31430                                  	;mov	[cs:DevCmdLine+2],es
 31431 000029EB C706[001F]0000          	mov	word [DevSizeOption],0 ; init the value
 31432 000029F1 8936[101F]              	mov	[DevCmdLine],si
 31433 000029F5 8C06[121F]              	mov	[DevCmdLine+2],es	
 31434 000029F9 E82800                  	call	SkipDelim
 31435 000029FC 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31436 00002A01 751F                    	jne	short ps_no_size
 31437 00002A03 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31438 00002A09 7517                    	jne	short ps_no_size
 31439 00002A0B 268A4404                	mov	al,[es:si+4]
 31440 00002A0F E86B06                  	call	delim
 31441 00002A12 750E                    	jne	short ps_no_size
 31442 00002A14 83C605                  	add	si,5
 31443 00002A17 E81500                  	call	GetHexNum
 31444 00002A1A 7207                    	jc	short ps_err
 31445                                  	; 11/12/2022
 31446                                  	; ds = cs
 31447                                  	;mov	[cs:DevSizeOption],ax
 31448 00002A1C A3[001F]                	mov	[DevSizeOption],ax
 31449 00002A1F E80200                  	call	SkipDelim
 31450                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31451                                  	;mov	bx,si
 31452                                  ps_no_size:	
 31453                                  	;mov	si,bx
 31454                                  	;pop	bx
 31455 00002A22 F8                      	clc	; cf=0
 31456                                  	;retn
 31457                                  	; 11/12/2022
 31458                                  ps_err:		; cf=1
 31459                                  sd_ret:		; cf=?
 31460 00002A23 C3                      	retn
 31461                                  ;ps_err:
 31462                                  	; 02/11/2022
 31463                                  	;pop	bx
 31464                                  	;stc
 31465                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31466                                  	; 11/12/2022
 31467                                  	; cf=1
 31468                                  	;stc
 31469                                  	; 11/12/2022
 31470                                  ;sd_ret: 
 31471                                  	; 22/07/2023
 31472                                  	; 12/04/2019
 31473                                  	;retn
 31474                                  
 31475                                  ; 12/04/2019 - Retro DOS v4.0
 31476                                  
 31477                                  ;----------------------------------------------------------------------------
 31478                                  ;
 31479                                  ; procedure : SkipDelim
 31480                                  ;
 31481                                  ;	Skips delimiters in the string pointed to by ES:SI
 31482                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31483                                  ;
 31484                                  ;----------------------------------------------------------------------------
 31485                                  	
 31486                                  	; 01/11/2022
 31487                                  SkipDelim:
 31488                                  sd_next_char:
 31489 00002A24 268A04                  	mov	al,[es:si]
 31490 00002A27 E85306                  	call	delim
 31491 00002A2A 75F7                    	jnz	short sd_ret
 31492 00002A2C 46                      	inc	si
 31493 00002A2D EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31494                                  	; 11/12/2022
 31495                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31496                                  ;sd_ret:
 31497                                  	;retn
 31498                                  
 31499                                  ;----------------------------------------------------------------------------
 31500                                  ;
 31501                                  ; procedure : GetHexNum
 31502                                  ;
 31503                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31504                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31505                                  ;
 31506                                  ;	Returns in AX the number number of paras equivalent to the
 31507                                  ;	hex number of bytes specified by the hexadecimal string.
 31508                                  ;
 31509                                  ;	Returns carry in case it encountered a non-hex character or
 31510                                  ;	if it encountered crlf
 31511                                  ;
 31512                                  ;----------------------------------------------------------------------------
 31513                                  
 31514                                  ; 13/05/2019
 31515                                  
 31516                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31517                                  	; (SYSINIT:2DA5h)
 31518                                  GetHexNum:
 31519 00002A2F 31C0                    	xor	ax,ax
 31520 00002A31 31D2                    	xor	dx,dx
 31521                                  ghn_next:
 31522 00002A33 268A1C                  	mov	bl,[es:si]
 31523 00002A36 80FB0D                  	cmp	bl,cr  ; 0Dh
 31524 00002A39 7436                    	je	short ghn_err
 31525 00002A3B 80FB0A                  	cmp	bl,lf  ; 0Ah
 31526 00002A3E 7431                    	je	short ghn_err
 31527 00002A40 50                      	push	ax
 31528 00002A41 88D8                    	mov	al,bl
 31529 00002A43 E83706                  	call	delim
 31530 00002A46 58                      	pop	ax
 31531                                  	; 04/01/2023
 31532 00002A47 B90400                  	mov	cx, 4
 31533 00002A4A 7410                    	jz	short ghn_into_paras
 31534 00002A4C E82400                  	call	GetNibble
 31535                                  	;jc	short ghn_err
 31536                                  	; 11/12/2022
 31537 00002A4F 7221                    	jc	short ghn_ret ; cf=1
 31538                                  	; 04/01/2023
 31539                                  	;mov	cx,4
 31540                                  ghn_shift1:
 31541 00002A51 D1E0                    	shl	ax,1
 31542 00002A53 D1D2                    	rcl	dx,1
 31543 00002A55 E2FA                    	loop	ghn_shift1
 31544 00002A57 08D8                    	or	al,bl
 31545 00002A59 46                      	inc	si
 31546 00002A5A EBD7                    	jmp	short ghn_next
 31547                                  ghn_into_paras:
 31548 00002A5C 83C00F                  	add	ax,15
 31549 00002A5F 83D200                  	adc	dx,0
 31550 00002A62 F7C2F0FF                	test	dx,0FFF0h
 31551 00002A66 7509                    	jnz	short ghn_err
 31552                                  	; 04/01/2023
 31553                                  	;mov	cx,4
 31554                                  ghn_shift2:
 31555 00002A68 F8                      	clc
 31556 00002A69 D1DA                    	rcr	dx,1
 31557 00002A6B D1D8                    	rcr	ax,1
 31558 00002A6D E2F9                    	loop	ghn_shift2
 31559 00002A6F F8                      	clc
 31560 00002A70 C3                      	retn
 31561                                  	; 11/12/2022
 31562                                  ghn_err:
 31563                                  gnib_err:
 31564 00002A71 F9                      	stc
 31565                                  ghn_ret:
 31566                                  gnib_ret:
 31567 00002A72 C3                      	retn
 31568                                  
 31569                                  ;----------------------------------------------------------------------------
 31570                                  ;
 31571                                  ; procedure : GetNibble
 31572                                  ;
 31573                                  ;	Convert one nibble (hex digit) in BL into binary
 31574                                  ;
 31575                                  ;	Retruns binary value in BL
 31576                                  ;
 31577                                  ;	Returns carry if BL contains non-hex digit
 31578                                  ;
 31579                                  ;----------------------------------------------------------------------------
 31580                                  
 31581                                  GetNibble:
 31582 00002A73 80FB30                  	cmp	bl,'0'
 31583                                  	;jb	short gnib_err
 31584                                  	; 11/12/2022
 31585 00002A76 72FA                    	jb	short gnib_ret ; cf=1
 31586 00002A78 80FB39                  	cmp	bl,'9'
 31587 00002A7B 7704                    	ja	short is_it_hex
 31588 00002A7D 80EB30                  	sub	bl,'0'		; clc
 31589 00002A80 C3                      	retn
 31590                                  is_it_hex:
 31591 00002A81 80FB41                  	cmp	bl,'A'
 31592                                  	;jb	short gnib_err
 31593                                  	; 11/12/2022
 31594 00002A84 72EC                    	jb	short gnib_ret ; cf=1
 31595 00002A86 80FB46                  	cmp	bl,'F'
 31596 00002A89 77E6                    	ja	short gnib_err ; 11/12/2022
 31597 00002A8B 80EB37                  	sub	bl,'A'- 10	; clc
 31598 00002A8E C3                      	retn
 31599                                  	; 11/12/2022
 31600                                  ;gnib_err:
 31601                                  ;	stc
 31602                                  ;gnib_ret:
 31603                                  ;	retn
 31604                                  
 31605                                  ;============================================================================
 31606                                  
 31607                                  ; 12/04/2019 - Retro DOS v4.0
 31608                                  
 31609                                  ; umb.inc (MSDOS 6.0, 1991)
 31610                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31611                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31612                                  
 31613                                  XMM_REQUEST_UMB	equ 10h
 31614                                  XMM_RELEASE_UMB	equ 11h
 31615                                  
 31616                                  ;----------------------------------------------------------------------------
 31617                                  ;
 31618                                  ; procedure : AllocUMB
 31619                                  ;
 31620                                  ;	Allocate all UMBs and link it to DOS arena chain
 31621                                  ;
 31622                                  ;----------------------------------------------------------------------------
 31623                                  
 31624                                  AllocUMB:
 31625                                  	; 31/12/2022
 31626                                  	; ds = cs
 31627 00002A8F E81000                  	call	InitAllocUMB		; link in the first UMB
 31628 00002A92 720D                    	jc	short au_exit		; quit on error
 31629                                  au_next:
 31630 00002A94 E83900                  	call	umb_allocate		; allocate
 31631 00002A97 7205                    	jc	short au_coalesce
 31632 00002A99 E85200                  	call	umb_insert		; & insert till no UMBs
 31633 00002A9C EBF6                    	jmp	short au_next
 31634                                  au_coalesce:
 31635 00002A9E E80B01                  	call	umb_coalesce		; coalesce all UMBs
 31636                                  au_exit:
 31637                                  	; 31/12/2022
 31638                                  	; ds = cs
 31639 00002AA1 C3                      	retn
 31640                                  
 31641                                  ;----------------------------------------------------------------------------
 31642                                  ;
 31643                                  ; procedure : InitAllocUMB
 31644                                  ;
 31645                                  ;----------------------------------------------------------------------------
 31646                                  
 31647                                  InitAllocUMB:
 31648                                  	; 31/12/2022
 31649                                  	; ds = cs
 31650 00002AA2 E874DF                  	call	IsXMSLoaded
 31651 00002AA5 7527                    	jnz	short iau_err		; quit on no XMS driver
 31652 00002AA7 B452                    	mov	ah,52h
 31653 00002AA9 CD21                    	int	21h			; get DOS DATA seg
 31654                                  	; 31/12/2022
 31655                                  	; ds = cs
 31656                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31657 00002AAB 8C06[0E1F]              	mov	[DevDOSData],es		; & save it for later
 31658 00002AAF B81043                  	mov	ax,4310h
 31659 00002AB2 CD2F                    	int	2Fh
 31660                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31661                                  	;mov	[cs:DevXMSAddr+2],es
 31662 00002AB4 891E[F71E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31663 00002AB8 8C06[F91E]              	mov	[DevXMSAddr+2],es	
 31664                                  	; 31/12/2022
 31665 00002ABC 803E[0D1F]00            	cmp	byte [FirstUMBLinked],0 
 31666                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31667                                  	;jne	short ia_1		; quit if we already did it
 31668                                  	; 12/12/2022
 31669 00002AC1 770A                    	ja	short ia_1 ; cf=0
 31670 00002AC3 E83401                  	call	LinkFirstUMB		; else link the first UMB
 31671                                  	;jc	short iau_err
 31672                                  	; 12/12/2022
 31673 00002AC6 7207                    	jc	short iau_err2  ; cf=1
 31674                                  	; 31/12/2022
 31675                                  	; ds = cs
 31676 00002AC8 C606[0D1F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31677                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31678                                  ia_1:
 31679                                  	; 12/12/2022
 31680                                  	; cf=0
 31681                                  	;clc
 31682 00002ACD C3                      	retn
 31683                                  iau_err:
 31684 00002ACE F9                      	stc
 31685                                  iau_err2:
 31686 00002ACF C3                      	retn
 31687                                  
 31688                                  ;-------------------------------------------------------------------------
 31689                                  ;
 31690                                  ; Procedure Name	: umb_allocate
 31691                                  ;
 31692                                  ; Inputs		: DS = data
 31693                                  ;
 31694                                  ; Outputs		: if UMB available
 31695                                  ;				Allocates the largest available UMB and 
 31696                                  ;			  	BX = segment of allocated block
 31697                                  ;				DX = size of allocated block
 31698                                  ;				NC
 31699                                  ;			  else 
 31700                                  ;				CY
 31701                                  ;
 31702                                  ; Uses			: BX, DX
 31703                                  ;
 31704                                  ;-------------------------------------------------------------------------
 31705                                  
 31706                                  umb_allocate:
 31707                                  	; 31/12/2022
 31708                                  	; ds = cs
 31709 00002AD0 50                      	push	ax
 31710 00002AD1 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31711 00002AD3 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31712                                  					;   possible
 31713                                  	; 31/12/2022
 31714 00002AD6 FF1E[F71E]              	call	far [DevXMSAddr]
 31715                                  	;call	far [cs:DevXMSAddr]
 31716                                  					; dx now contains the size of
 31717                                  					; the largest UMB
 31718 00002ADA 09D2                    	or	dx,dx
 31719 00002ADC 740D                    	jz	short ua_err
 31720                                  	
 31721 00002ADE B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31722                                  
 31723                                  	; 31/12/2022
 31724 00002AE0 FF1E[F71E]              	call	far [DevXMSAddr]
 31725                                  	;call	far [cs:DevXMSAddr]
 31726                                  
 31727 00002AE4 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31728 00002AE7 7502                    	jne	short ua_err		; N: error
 31729                                  	;clc
 31730                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31731                                  	; 12/12/2022
 31732                                  	; cf=0
 31733                                  	;clc 
 31734                                  ua_done:
 31735 00002AE9 58                      	pop	ax
 31736 00002AEA C3                      	retn
 31737                                  ua_err:
 31738 00002AEB F9                      	stc
 31739 00002AEC EBFB                    	jmp	short ua_done
 31740                                  
 31741                                  ;---------------------------------------------------------------------------
 31742                                  ;
 31743                                  ; Procedure Name	: umb_insert
 31744                                  ;
 31745                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31746                                  ;			: BX = seg address of UMB to be linked in
 31747                                  ;			: DX = size of UMB to be linked in paras
 31748                                  ;			; DS = data
 31749                                  ;
 31750                                  ; Outputs		: links the UMB into the arena chain
 31751                                  ;
 31752                                  ; Uses			: AX, CX, ES, DX, BX
 31753                                  ;
 31754                                  ;---------------------------------------------------------------------------
 31755                                  
 31756                                  umb_insert:
 31757 00002AEE 1E                      	push	ds
 31758                                  
 31759                                  	; 31/12/2022
 31760                                  	; ds = cs
 31761                                  
 31762                                  	;mov	ds,[cs:DevDOSData]
 31763 00002AEF 8E1E[0E1F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31764                                  	;mov	ds,[8Ch]
 31765 00002AF3 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31766 00002AF7 8CD8                    	mov	ax,ds
 31767 00002AF9 8EC0                    	mov	es,ax
 31768                                  ui_next:
 31769 00002AFB 39D8                    	cmp	ax,bx			; Q: is current block above
 31770                                  					;    new block
 31771 00002AFD 770F                    	ja	short ui_insert		; Y: insert it
 31772                                  					; Q: is current block the
 31773                                  					;    last
 31774 00002AFF 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31775 00002B05 745C                    	je	short ui_append		; Y: append new block to chain
 31776                                  					; N: get next block
 31777 00002B07 8ED8                    	mov	ds,ax			; M005
 31778                                  	;call	get_next		; ax = es = next block
 31779 00002B09 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31780 00002B0C EBED                    	jmp	short ui_next
 31781                                  
 31782                                  ui_insert:
 31783 00002B0E 8CD9                    	mov	cx,ds			; ds = previous arena
 31784 00002B10 41                      	inc	cx			; top of previous block
 31785                                  
 31786 00002B11 29D9                    	sub	cx,bx
 31787 00002B13 F7D9                    	neg	cx			; cx = size of used block
 31788                                  	;mov	byte [0],'M'
 31789 00002B15 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31790                                  	;mov	word [1],8
 31791 00002B1A C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31792                                  	;mov	[3],cx
 31793 00002B20 890E0300                	mov	[ARENA.SIZE],cx	
 31794                                  	;mov	word [8],4353h ; 'SC'
 31795 00002B24 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31796                                  
 31797                                  ; prepare the arena at start of new block
 31798                                  
 31799 00002B2A 8EC3                    	mov	es,bx
 31800 00002B2C 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31801 00002B32 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31802                                  					; mark as free
 31803 00002B39 83EA02                  	sub	dx,2			; make room for arena at
 31804                                  					; start & end of new block
 31805 00002B3C 2689160300              	mov	[es:ARENA.SIZE],dx
 31806                                  
 31807                                  ; prepare arena at end of new block
 31808                                  	
 31809 00002B41 01D3                    	add	bx,dx
 31810 00002B43 43                      	inc	bx
 31811 00002B44 8EC3                    	mov	es,bx			; es=arena at top of new block
 31812 00002B46 43                      	inc	bx			; bx=top of new block
 31813                                  
 31814                                  					; ax contains arena just above
 31815                                  					; this block
 31816 00002B47 29D8                    	sub	ax,bx			; ax = size of used block
 31817                                  	
 31818 00002B49 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31819 00002B4F 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31820 00002B56 26A30300                	mov	[es:ARENA.SIZE],ax	
 31821 00002B5A 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31822                                  
 31823 00002B61 EB47                    	jmp	short ui_done
 31824                                  
 31825                                  ui_append:
 31826                                  					; es = arena of last block	
 31827 00002B63 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31828 00002B68 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31829                                  					; going to rsrv on top of this 
 31830                                  					; block for the next arena.
 31831                                  	; 13/05/2019
 31832 00002B6E 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31833                                  
 31834 00002B74 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31835 00002B76 40                      	inc	ax
 31836 00002B77 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31837                                  					;    seg. address of new block
 31838 00002B79 F7D8                    	neg	ax
 31839                                  
 31840 00002B7B 8EC1                    	mov	es,cx			; ds = arena of unused block
 31841                                  
 31842 00002B7D 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31843 00002B83 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31844 00002B8A 26A30300                	mov	[es:ARENA.SIZE],ax	
 31845 00002B8E 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31846                                  
 31847                                  ; prepare the arena at start of new block
 31848 00002B95 8EC3                    	mov	es,bx
 31849 00002B97 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31850 00002B9D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31851                                  					; mark as free
 31852 00002BA4 4A                      	dec	dx			; make room for arena
 31853 00002BA5 2689160300              	mov	[es:ARENA.SIZE],dx	
 31854                                  ui_done:
 31855                                  uc_done: ; 31/12/2022 ; *!
 31856 00002BAA 1F                      	pop	ds
 31857                                  	; ds = cs ; 31/12/2022
 31858                                  ;uc_done:	; 18/12/2022
 31859 00002BAB C3                      	retn
 31860                                  
 31861                                  ; 13/04/2019 - Retro DOS v4.0
 31862                                  
 31863                                  ;----------------------------------------------------------------------------
 31864                                  ;
 31865                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31866                                  ;
 31867                                  ;	Coalesce adds the block following the argument to the argument block,
 31868                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31869                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31870                                  ;	preceeding allocated block.
 31871                                  ;
 31872                                  ;	EXIT	'C' clear if OK
 31873                                  ;		  (ds) unchanged, this block updated
 31874                                  ;		  (ax) = address of next block, IFF not at end
 31875                                  ;		'C' set if arena trashed
 31876                                  ;	USES	cx, di, ds, es
 31877                                  ;
 31878                                  ;----------------------------------------------------------------------------
 31879                                  
 31880                                  umb_coalesce:
 31881                                  	; 31/12/2022
 31882                                  	; ds = cs
 31883 00002BAC 1E                      	push	ds ; *!
 31884                                  
 31885 00002BAD 31FF                    	xor	di, di
 31886                                  
 31887                                  	;mov	es,[cs:DevDOSData]
 31888                                  	; 31/12/2022
 31889 00002BAF 8E06[0E1F]              	mov	es,[DevDOSData]
 31890 00002BB3 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31891                                  uc_nextfree:
 31892 00002BB8 8CC0                    	mov	ax,es
 31893 00002BBA 8ED8                    	mov	ds,ax
 31894                                  	;cmp	[es:1],di
 31895 00002BBC 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31896 00002BC1 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31897                                  					; N: get next arena
 31898 00002BC3 E82100                  	call	get_next		; es, ax = next arena
 31899 00002BC6 72E2                    	jc	short uc_done	; *!
 31900 00002BC8 EBEE                    	jmp	short uc_nextfree
 31901                                  uc_again:
 31902 00002BCA E81A00                  	call	get_next		; ES, AX <- next block
 31903 00002BCD 72DB                    	jc	short uc_done	; *!
 31904                                  uc_check:
 31905 00002BCF 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31906 00002BD4 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31907                                  					; Y: coalesce
 31908 00002BD6 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31909 00002BDB 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31910                                  	;add	[3],cx
 31911 00002BDC 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31912 00002BE0 268A0D                  	mov     cl,[es:di]              ; move up signature
 31913 00002BE3 880D                    	mov     [di],cl
 31914 00002BE5 EBE3                    	jmp     short uc_again		; try again
 31915                                  
 31916                                  	; 18/12/2022
 31917                                  ;uc_done:
 31918                                  	;retn
 31919                                  
 31920                                  ;----------------------------------------------------------------------------
 31921                                  ;
 31922                                  ;**	get_next - Find Next item in Arena
 31923                                  ;
 31924                                  ;	ENTRY	dS - pointer to block head
 31925                                  ;	EXIT	AX,ES - pointers to next head
 31926                                  ;		'C' set if arena damaged
 31927                                  ;
 31928                                  ;----------------------------------------------------------------------------
 31929                                  
 31930                                  	; 01/11/2022
 31931                                  get_next:
 31932 00002BE7 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31933 00002BEC 740A                    	je	short gn_err
 31934                                  _get_next_:
 31935 00002BEE 8CD8                    	mov     ax,ds                   ; ax=current block
 31936 00002BF0 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31937 00002BF4 40                      	inc     ax                      ; remember that header!
 31938 00002BF5 8EC0                    	mov	es,ax
 31939                                  	;clc
 31940                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31941                                  	; 11/12/2022
 31942                                  	; cf=0
 31943                                  	;clc
 31944 00002BF7 C3                      	retn
 31945                                  gn_err:
 31946 00002BF8 F9                      	stc
 31947                                  	; 11/12/2022	
 31948                                  lfu_err:	 ; cf=1
 31949 00002BF9 C3                      	retn
 31950                                  
 31951                                  ;----------------------------------------------------------------------------
 31952                                  ;
 31953                                  ; procedure : LinkFirstUMB
 31954                                  ;
 31955                                  ;----------------------------------------------------------------------------
 31956                                  
 31957                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31958                                  	; (SYSINIT:2F81h)
 31959                                  LinkFirstUMB:
 31960                                  	; 31/12/2022
 31961                                  	; ds = cs
 31962 00002BFA E8D3FE                  	call	umb_allocate
 31963 00002BFD 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31964                                  
 31965                                  ; bx = segment of allocated UMB
 31966                                  ; dx = size of UMB
 31967                                  
 31968                                  	; 31/12/2022
 31969                                  	; ds = cs
 31970                                  
 31971 00002BFF CD12                    	int	12h			; ax = size of memory
 31972 00002C01 B106                    	mov	cl,6
 31973 00002C03 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 31974                                  
 31975 00002C05 89C1                    	mov	cx,ax			; cx = size in paras
 31976 00002C07 29D8                    	sub	ax,bx			; ax = - size of unused block
 31977                                  
 31978 00002C09 F7D8                    	neg	ax
 31979                                  
 31980 00002C0B 83E901                  	sub	cx,1			; cx = first umb_arena
 31981 00002C0E 8EC1                    	mov	es,cx			; es = first umb_arena
 31982                                  	
 31983 00002C10 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31984 00002C16 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31985                                  					
 31986 00002C1D 26A30300                	mov	[es:ARENA.SIZE],ax	
 31987 00002C21 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31988                                  
 31989                                  ; put in the arena for the first UMB
 31990                                  
 31991 00002C28 8EC3                    	mov	es,bx			; es has first free umb seg
 31992 00002C2A 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31993 00002C30 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 31994                                  					; mark as free 
 31995 00002C37 4A                      	dec	dx			; make room for arena
 31996 00002C38 2689160300              	mov	[es:ARENA.SIZE],dx	
 31997                                  
 31998                                  	;mov	es,[cs:DevDOSData]
 31999                                  	; 31/12/2022
 32000 00002C3D 8E06[0E1F]              	mov	es,[DevDOSData] ; ds = cs
 32001 00002C41 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 32002 00002C44 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 32003                                  					;  data segment with the arena
 32004                                  					;  just below Top of Mem
 32005                                  
 32006                                  ; we must now scan the arena chain and update the size of the last arena
 32007                                  
 32008 00002C47 BF2400                  	mov	di,DOS_ARENA ; 24h
 32009 00002C4A 268E05                  	mov	es,[es:di]		; es = start arena
 32010 00002C4D 31FF                    	xor	di,di
 32011                                  ;scan_next
 32012                                  ; 09/12/2022
 32013                                  scannext:
 32014 00002C4F 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 32015 00002C53 740C                    	je	short got_last
 32016                                  	
 32017 00002C55 8CC0                    	mov	ax,es
 32018 00002C57 2603060300              	add	ax,[es:ARENA.SIZE]
 32019 00002C5C 40                      	inc	ax
 32020 00002C5D 8EC0                    	mov	es,ax
 32021                                  	;jmp	short scan_next
 32022                                  	; 09/12/2022
 32023 00002C5F EBEE                    	jmp	short scannext
 32024                                  got_last:
 32025 00002C61 26832E030001            	sub	word [es:ARENA.SIZE],1
 32026 00002C67 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32027                                  	;clc
 32028                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32029                                  	; 11/12/2022
 32030                                  	; cf=0
 32031                                  	;clc
 32032 00002C6D C3                      	retn
 32033                                  
 32034                                  ; 11/12/2022
 32035                                  ;;lfu_err:
 32036                                  ;	;stc
 32037                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32038                                  ;	; 11/12/2022
 32039                                  ;	; cf=1
 32040                                  ;	;stc
 32041                                  ;	retn
 32042                                  
 32043                                  ;----------------------------------------------------------------------------
 32044                                  ;
 32045                                  ; procedure : ShrinkUMB
 32046                                  ;
 32047                                  ;	Shrinks the current UMB in use, so that the unused portions
 32048                                  ;	of the UMB is given back to the DOS free mem pool
 32049                                  ;
 32050                                  ;----------------------------------------------------------------------------
 32051                                  
 32052                                  ShrinkUMB:
 32053                                  	; 12/12/2022
 32054                                  	; ds = cs
 32055 00002C6E 833E[F11E]00            	cmp	word [DevUMBAddr],0
 32056                                  	;cmp	word [cs:DevUMBAddr],0
 32057 00002C73 7421                    	je	short su_exit
 32058 00002C75 06                      	push	es
 32059 00002C76 53                      	push	bx
 32060                                  	; 12/12/2022
 32061                                  	;mov	bx,[cs:DevUMBFree]
 32062                                  	;sub	bx,[cs:DevUMBAddr]
 32063                                  	;mov	es,[cs:DevUMBAddr]
 32064 00002C77 8B1E[F51E]              	mov	bx,[DevUMBFree]
 32065 00002C7B 2B1E[F11E]              	sub	bx,[DevUMBAddr]
 32066 00002C7F 8E06[F11E]              	mov	es,[DevUMBAddr]
 32067                                  	
 32068 00002C83 B8004A                  	mov	ax,4A00h
 32069 00002C86 CD21                    	int	21h
 32070                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32071                                  		; ES = segment address of block to change
 32072                                  		; BX = new size in paragraphs
 32073 00002C88 8CC0                    	mov	ax,es
 32074 00002C8A 48                      	dec	ax
 32075 00002C8B 8EC0                    	mov	es,ax
 32076 00002C8D 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32077 00002C94 5B                      	pop	bx
 32078 00002C95 07                      	pop	es
 32079                                  su_exit:
 32080 00002C96 C3                      	retn
 32081                                  
 32082                                  ;----------------------------------------------------------------------------
 32083                                  ;
 32084                                  ; procedure : UnlinkUMB
 32085                                  ;
 32086                                  ;	Unlinks the UMBs from the DOS arena chain
 32087                                  ;
 32088                                  ;----------------------------------------------------------------------------
 32089                                  
 32090                                  UnlinkUMB:
 32091                                  	; 12/12/2022
 32092                                  	; ds = cs
 32093 00002C97 1E                      	push	ds
 32094 00002C98 06                      	push	es
 32095                                  	; 12/12/2022
 32096 00002C99 803E[0D1F]00            	cmp	byte [FirstUMBLinked],0
 32097                                  	;cmp	byte [cs:FirstUMBLinked],0
 32098 00002C9E 7420                    	je	short ulu_x		; nothing to unlink
 32099                                  	; 12/12/2022
 32100 00002CA0 8E06[0E1F]              	mov	es,[DevDOSData]
 32101                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32102 00002CA4 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32103 00002CA9 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32104                                  ulu_next:
 32105 00002CAE E836FF                  	call	get_next
 32106 00002CB1 720D                    	jc	short ulu_x
 32107 00002CB3 39C7                    	cmp	di,ax			; is the next one UMB ?
 32108 00002CB5 7404                    	je	short ulu_found
 32109 00002CB7 8ED8                    	mov	ds,ax
 32110 00002CB9 EBF3                    	jmp	short ulu_next
 32111                                  ulu_found:
 32112                                  	;mov	byte [0],'Z'
 32113 00002CBB C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32114                                  ulu_x:
 32115 00002CC0 07                      	pop	es
 32116 00002CC1 1F                      	pop	ds
 32117 00002CC2 C3                      	retn
 32118                                  
 32119                                  ; ----------------------------------------------------------------------
 32120                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32121                                  ; ----------------------------------------------------------------------
 32122                                  ; 14/04/2019 - Retro DOS v4.0
 32123                                  
 32124                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32125                                  ;
 32126                                  ; Summary:
 32127                                  ;
 32128                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32129                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32130                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32131                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32132                                  ;   and/or config.inc for the full list.
 32133                                  ;
 32134                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32135                                  ;   configuration support. blockname is either MENU, which contains one
 32136                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32137                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32138                                  ;   INCLUDE allows the current block to name another block for inclusion
 32139                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32140                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32141                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32142                                  ;
 32143                                  ; Example:
 32144                                  ;
 32145                                  ;   [menu]
 32146                                  ;   menuitem=misc,Miscellaneous
 32147                                  ;   menuitem=network,Network Configuration
 32148                                  ;   menudefault=network,15
 32149                                  ;
 32150                                  ;   [network]
 32151                                  ;   include misc
 32152                                  ;   device=foo
 32153                                  ;
 32154                                  ;   [misc]
 32155                                  ;   device=bar
 32156                                  ;   include alternate
 32157                                  ;
 32158                                  ;   [alternate]
 32159                                  ;   device=tar
 32160                                  ;
 32161                                  ;
 32162                                  ;   When the menu is displayed
 32163                                  ;
 32164                                  ;    1. Miscellaneous
 32165                                  ;    2. Network Configuration
 32166                                  ;
 32167                                  ;   #2 is highlighted as the default option, and will be automatically
 32168                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32169                                  ;   following order:
 32170                                  ;
 32171                                  ;       DEVICE=BAR
 32172                                  ;       DEVICE=TAR
 32173                                  ;       DEVICE=FOO
 32174                                  ;
 32175                                  
 32176                                  ;MULTI_CONFIG equ 1
 32177                                  
 32178                                  ; the following depend on the positions of the various letters in switchlist
 32179                                  
 32180                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32181                                  
 32182                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32183                                  flagdrive	equ 00001000b ; 8 
 32184                                  flagcyln	equ 00010000b ; 16
 32185                                  flagseclim	equ 00100000b ; 32
 32186                                  flagheads	equ 01000000b ; 64
 32187                                  flagff		equ 10000000b ; 128
 32188                                  
 32189                                  ;----------------------------------------------------------------------------
 32190                                  ; 19/04/2019 - Retro DOS v4.0
 32191                                  
 32192                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32193                                  
 32194                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32195                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32196                                  
 32197 00002CC3 00                      insert_blank:	db 	0
 32198                                  
 32199                                  ;----------------------------------------------------------------------------
 32200                                  ;
 32201                                  ; procedure : setparms
 32202                                  ;
 32203                                  ; the following set of routines is used to parse the drivparm = command in
 32204                                  ; the config.sys file to change the default drive parameters.
 32205                                  ;
 32206                                  ;----------------------------------------------------------------------------
 32207                                  
 32208                                  setparms:
 32209 00002CC4 1E                      	push	ds
 32210 00002CC5 50                      	push	ax
 32211 00002CC6 53                      	push	bx
 32212 00002CC7 51                      	push	cx
 32213 00002CC8 52                      	push	dx
 32214                                  
 32215 00002CC9 0E                      	push	cs
 32216 00002CCA 1F                      	pop	ds
 32217                                  
 32218 00002CCB 31DB                    	xor	bx,bx
 32219 00002CCD 8A1E[8E36]              	mov	bl,[drive]
 32220                                  	; 18/12/2022
 32221 00002CD1 43                      	inc	bx
 32222                                  	;inc	bl			; get it correct for ioctl call
 32223                                  					; (1=a,2=b...)
 32224 00002CD2 BA[6635]                	mov	dx,deviceparameters
 32225 00002CD5 B444                    	mov	ah,IOCTL ; 44h
 32226 00002CD7 B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 32227 00002CD9 B508                    	mov	ch,RAWIO ; 8
 32228 00002CDB B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32229 00002CDD CD21                    	int	21h
 32230                                  
 32231                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32232                                  ;
 32233                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32234                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32235                                  ;	; 21/10/2022
 32236                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32237                                  ;	mov	ds,ax			; set Bios_Data segment
 32238                                  ;
 32239                                  ;	test	word [cs:switches],flagec35 ; 4
 32240                                  ;	jz	short not_ec35
 32241                                  
 32242                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32243                                  	;test	word [switches],flagec35 ; 4
 32244                                  	; 12/12/2022
 32245 00002CDF F606[8F36]04            	test	byte [switches],flagec35 ; 4
 32246 00002CE4 7411                    	jz	short eot_ok
 32247                                  
 32248                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32249                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32250 00002CE6 8A0E[8E36]              	mov	cl,[drive]
 32251 00002CEA B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32252 00002CED 8ED8                    	mov	ds,ax	
 32253                                  
 32254 00002CEF B001                    	mov	al,1			; assume drive 0
 32255 00002CF1 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32256                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32257 00002CF3 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32258                                  
 32259                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32260                                  ;
 32261                                  ;not_ec35:
 32262                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32263                                  ;;	sectors per track than any old ones.
 32264                                  ;
 32265                                  ;	;mov	al,[cs:deviceparameters+20]
 32266                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32267                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32268                                  ;	cmp	al,[EOT]
 32269                                  ;	jbe	short eot_ok
 32270                                  ;	mov	[EOT],al
 32271                                  
 32272                                  eot_ok:
 32273 00002CF7 5A                      	pop	dx			; fix up all the registers
 32274 00002CF8 59                      	pop	cx
 32275 00002CF9 5B                      	pop	bx
 32276 00002CFA 58                      	pop	ax
 32277 00002CFB 1F                      	pop	ds ; 13/05/2019
 32278 00002CFC C3                      	retn
 32279                                  
 32280                                  ;----------------------------------------------------------------------------
 32281                                  ;
 32282                                  ; procedure : diddleback
 32283                                  ;
 32284                                  ; replace default values for further drivparm commands
 32285                                  ;
 32286                                  ;----------------------------------------------------------------------------
 32287                                  
 32288                                  diddleback:
 32289 00002CFD 1E                      	push	ds
 32290 00002CFE 0E                      	push	cs
 32291 00002CFF 1F                      	pop	ds
 32292                                  	;mov	word [deviceparameters+4],80
 32293 00002D00 C706[6A35]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32294                                  	;mov	byte [deviceparameters+1],2
 32295 00002D06 C606[6735]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32296                                  	;mov	word [deviceparameters+2],0
 32297 00002D0B C706[6835]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32298 00002D11 C706[8F36]0000          	mov	word [switches],0	    ; zero all switches
 32299 00002D17 1F                      	pop	ds
 32300 00002D18 C3                      	retn
 32301                                  
 32302                                  ; 04/01/2023
 32303                                  %if 0
 32304                                  
 32305                                  ; 15/04/2019 - Retro DOS v4.0
 32306                                  
 32307                                  ;----------------------------------------------------------------------------
 32308                                  ;
 32309                                  ; procedure : parseline
 32310                                  ;
 32311                                  ; entry point is parseline. al contains the first character in command line.
 32312                                  ;
 32313                                  ;----------------------------------------------------------------------------
 32314                                  
 32315                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32316                                  	; (SYSINIT:30ACh)
 32317                                  
 32318                                  parseline:
 32319                                  	push	ds
 32320                                  
 32321                                  	push	cs
 32322                                  	pop	ds
 32323                                  
 32324                                  nextswtch:
 32325                                  	cmp	al,cr			; carriage return?
 32326                                  	je	short done_line
 32327                                  	cmp	al,lf			; linefeed?
 32328                                  	je	short put_back		; put it back and done
 32329                                  
 32330                                  ; anything less or equal to a space is ignored.
 32331                                  
 32332                                  	cmp	al,' '                  ; space?
 32333                                  	jbe	short getnext		; skip over space
 32334                                  	cmp	al,'/'
 32335                                  	je	short getparm
 32336                                  	stc				; mark error invalid-character-in-input
 32337                                  	jmp	short exitpl
 32338                                  
 32339                                  getparm:
 32340                                  	call	check_switch
 32341                                  	mov	[switches],bx		; save switches read so far
 32342                                  	jc	short swterr
 32343                                  getnext:
 32344                                  	call	getchr
 32345                                  	jc	short done_line
 32346                                  	jmp	short nextswtch
 32347                                  swterr:
 32348                                  	jmp	short exitpl		; exit if error
 32349                                  
 32350                                  done_line:
 32351                                  	; 12/12/2022
 32352                                  	test	byte [switches],flagdrive ; 8
 32353                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32354                                  	jnz	short okay
 32355                                  	stc				; mark error no-drive-specified
 32356                                  	jmp	short exitpl
 32357                                  
 32358                                  okay:
 32359                                  	mov	ax,[switches]
 32360                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32361                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32362                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32363                                  	;clc			    ; everything is fine
 32364                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32365                                  	; 12/12/2022
 32366                                  	; cf=0
 32367                                  	;clc
 32368                                  	call	setdeviceparameters
 32369                                  exitpl:
 32370                                  	pop	ds
 32371                                  	retn
 32372                                  put_back:
 32373                                  	inc	word [count]		; one more char to scan
 32374                                  	dec	word [chrptr]		; back up over linefeed
 32375                                  	jmp	short done_line
 32376                                  
 32377                                  %endif
 32378                                  
 32379                                  ;----------------------------------------------------------------------------
 32380                                  ;
 32381                                  ; procedure : check_switch
 32382                                  ;
 32383                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32384                                  ; gets the number, if any required, following the switch. the switch and the
 32385                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32386                                  ; error.
 32387                                  ;
 32388                                  ;----------------------------------------------------------------------------
 32389                                  
 32390                                  check_switch:
 32391 00002D19 E817FA                  	call	getchr
 32392                                  	;jc	short err_check
 32393 00002D1C 724E                    	jc	short err_chk
 32394 00002D1E 24DF                            and     al,0DFh                 ; convert it to upper case
 32395 00002D20 3C41                    	cmp	al,'A'
 32396                                  	;jb	short err_check
 32397 00002D22 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32398 00002D24 3C5A                    	cmp	al,'Z'
 32399 00002D26 7743                    	ja	short err_check
 32400                                  
 32401 00002D28 06                      	push	es
 32402                                  
 32403 00002D29 0E                      	push	cs
 32404 00002D2A 07                      	pop	es
 32405                                  
 32406 00002D2B 8A0E[2237]              	mov	cl,[switchlist]		; get number of valid switches
 32407 00002D2F B500                    	mov	ch,0
 32408 00002D31 BF[2337]                	mov	di,1+switchlist		; point to string of valid switches
 32409 00002D34 F2AE                    	repne	scasb
 32410                                  
 32411 00002D36 07                      	pop	es
 32412 00002D37 7532                    	jnz	short err_check
 32413                                  
 32414 00002D39 B80100                  	mov	ax,1
 32415 00002D3C D3E0                    	shl	ax,cl			; set bit to indicate switch
 32416 00002D3E 8B1E[8F36]              	mov	bx,[switches]		; get switches so far
 32417 00002D42 09C3                    	or	bx,ax			; save this with other switches
 32418 00002D44 89C1                    	mov	cx,ax
 32419                                  	; 12/12/2022
 32420 00002D46 A8F8                    	test	al,switchnum ; 0F8h
 32421                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32422 00002D48 741E                    	jz	short done_swtch
 32423                                  
 32424 00002D4A E8E6F9                  	call	getchr
 32425 00002D4D 721A                    	jc	short err_swtch
 32426                                  
 32427 00002D4F 3C3A                    	cmp	al,':'
 32428 00002D51 7516                    	jne	short err_swtch
 32429                                  
 32430 00002D53 E8DDF9                  	call	getchr
 32431 00002D56 53                      	push	bx			; preserve switches
 32432                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32433                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32434                                  	; 12/12/2022
 32435                                  	; ds = cs
 32436 00002D57 C606[2A03]20            	mov	byte [sepchr],' '
 32437 00002D5C E8D803                  	call	getnum
 32438                                  	;mov	byte [cs:sepchr],0
 32439                                  	; 12/12/2022
 32440 00002D5F C606[2A03]00            	mov	byte [sepchr],0
 32441 00002D64 5B                      	pop	bx			; restore switches
 32442                                  
 32443                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32444                                  ; not check for carry set here. if there is an error, it will be detected
 32445                                  ; further on (hopefully).
 32446                                  
 32447 00002D65 E80500                  	call	process_num
 32448                                  
 32449                                  done_swtch:
 32450                                  	;clc
 32451                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32452                                  	; 12/12/2022
 32453                                  	; cf=0
 32454                                  	;clc
 32455 00002D68 C3                      	retn
 32456                                  
 32457                                  err_swtch:
 32458 00002D69 31CB                    	xor	bx,cx			; remove this switch from the records
 32459                                  err_check:
 32460 00002D6B F9                      	stc
 32461                                  err_chk:
 32462 00002D6C C3                      	retn
 32463                                  
 32464                                  ;----------------------------------------------------------------------------
 32465                                  ;
 32466                                  ; procedure : process_num
 32467                                  ;
 32468                                  ; this routine takes the switch just input, and the number following (if any),
 32469                                  ; and sets the value in the appropriate variable. if the number input is zero
 32470                                  ; then it does nothing - it assumes the default value that is present in the
 32471                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32472                                  ;
 32473                                  ;----------------------------------------------------------------------------
 32474                                  
 32475                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32476                                  	; (SYSINIT:3156h)
 32477                                  process_num:
 32478 00002D6D 850E[8F36]              	test	[switches],cx		; if this switch has been done before,
 32479 00002D71 752B                    	jnz	short done_ret		; ignore this one.
 32480                                  	; 12/12/2022
 32481 00002D73 F6C108                  	test	cl,flagdrive ; 8
 32482                                  	;test	cx,flagdrive ; 8
 32483 00002D76 7404                    	jz	short try_f
 32484 00002D78 A2[8E36]                	mov	byte [drive],al
 32485                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32486                                  	;jmp	short done_ret
 32487                                  	; 12/12/2022
 32488                                  	; cf=0
 32489 00002D7B C3                      	retn	; 13/05/2019
 32490                                  try_f:
 32491                                  	; 12/12/2022
 32492 00002D7C F6C180                  	test	cl,flagff ; 80h
 32493                                  	;test	cx,flagff ; 80h
 32494 00002D7F 7404                    	jz	short try_t
 32495                                  
 32496                                  ; ensure that we do not get bogus form factors that are not supported
 32497                                  
 32498                                  	;mov	[deviceparameters+1],al
 32499 00002D81 A2[6735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32500                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32501                                  	;jmp	short done_ret
 32502                                  	; 12/12/2022
 32503                                  	; cf=0
 32504 00002D84 C3                      	retn	; 13/05/2019
 32505                                  try_t:
 32506 00002D85 09C0                    	or	ax,ax
 32507 00002D87 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32508                                  	; 12/12/2022
 32509 00002D89 F6C110                  	test	cl,flagcyln ; 10h
 32510                                  	;test	cx,flagcyln ; 10h
 32511 00002D8C 7404                    	jz	short try_s
 32512                                  
 32513                                  	;mov	[deviceparameters+4],ax
 32514 00002D8E A3[6A35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32515                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32516                                  	;jmp	short done_ret
 32517                                  	; 12/12/2022
 32518                                  	; cf=0
 32519 00002D91 C3                      	retn	; 13/05/2019
 32520                                  try_s:
 32521                                  	; 12/12/2022
 32522 00002D92 F6C120                  	test	cl,flagseclim ; 20h
 32523                                  	;test	cx,flagseclim ; 20h
 32524 00002D95 7404                    	jz	short try_h
 32525 00002D97 A3[8C36]                	mov	[slim],ax
 32526                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32527                                  	;jmp	short done_ret
 32528                                  	; 12/12/2022
 32529                                  	; cf=0
 32530 00002D9A C3                      	retn	; 13/05/2019
 32531                                  
 32532                                  ; must be for number of heads
 32533                                  
 32534                                  try_h:
 32535 00002D9B A3[8A36]                	mov	[hlim],ax
 32536                                  done_ret:
 32537                                  	;clc
 32538                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32539                                  	; 12/12/2022
 32540                                  	; cf=0 (test instruction resets cf)
 32541                                  	;clc
 32542 00002D9E C3                      	retn
 32543                                  
 32544                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32545                                  %if 1
 32546                                  
 32547                                  ; 15/04/2019 - Retro DOS v4.0
 32548                                  
 32549                                  ;----------------------------------------------------------------------------
 32550                                  ;
 32551                                  ; procedure : parseline
 32552                                  ;
 32553                                  ; entry point is parseline. al contains the first character in command line.
 32554                                  ;
 32555                                  ;----------------------------------------------------------------------------
 32556                                  
 32557                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32558                                  	; (SYSINIT:30ACh)
 32559                                  parseline:
 32560                                  	; 04/01/2023
 32561                                  	; ds = cs ; *
 32562                                  
 32563                                  	;push	ds ; *
 32564                                  
 32565                                  	;push	cs ; *
 32566                                  	;pop	ds ; *
 32567                                  
 32568                                  nextswtch:
 32569 00002D9F 3C0D                    	cmp	al,cr			; carriage return?
 32570 00002DA1 741C                    	je	short done_line
 32571 00002DA3 3C0A                    	cmp	al,lf			; linefeed?
 32572 00002DA5 7421                    	je	short put_back		; put it back and done
 32573                                  
 32574                                  ; anything less or equal to a space is ignored.
 32575                                  
 32576 00002DA7 3C20                    	cmp	al,' '                  ; space?
 32577 00002DA9 760F                    	jbe	short getnext		; skip over space
 32578 00002DAB 3C2F                    	cmp	al,'/'
 32579 00002DAD 7402                    	je	short getparm
 32580 00002DAF F9                      	stc				; mark error invalid-character-in-input
 32581                                  	;jmp	short exitpl
 32582                                  	; 04/01/2023
 32583                                  swterr:
 32584 00002DB0 C3                      	retn
 32585                                  
 32586                                  getparm:
 32587 00002DB1 E865FF                  	call	check_switch
 32588 00002DB4 891E[8F36]              	mov	[switches],bx		; save switches read so far
 32589 00002DB8 72F6                    	jc	short swterr
 32590                                  getnext:
 32591 00002DBA E876F9                  	call	getchr
 32592                                  	;jc	short done_line
 32593                                  	;jmp	short nextswtch
 32594                                  	; 04/01/2023
 32595 00002DBD 73E0                    	jnc	short nextswtch
 32596                                  ;swterr:
 32597                                  	;jmp	short exitpl		; exit if error
 32598                                  
 32599                                  done_line:
 32600                                  	; 12/12/2022
 32601 00002DBF F606[8F36]08            	test	byte [switches],flagdrive ; 8
 32602                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32603 00002DC4 750C                    	jnz	short okay
 32604 00002DC6 F9                      	stc				; mark error no-drive-specified
 32605                                  	;jmp	short exitpl
 32606                                  	; 04/01/2023
 32607 00002DC7 C3                      	retn
 32608                                  
 32609                                  ;exitpl:
 32610                                  	; 04/01/2023
 32611                                  	; ds = cs
 32612                                  	;;pop	ds ; *
 32613                                  	;retn
 32614                                  
 32615                                  put_back:
 32616 00002DC8 FF06[D203]              	inc	word [count]		; one more char to scan
 32617 00002DCC FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32618 00002DD0 EBED                    	jmp	short done_line
 32619                                  
 32620                                  okay:
 32621 00002DD2 A1[8F36]                	mov	ax,[switches]
 32622 00002DD5 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32623 00002DD8 A3[6835]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32624 00002DDB C706[8C35]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32625                                  	;clc			    ; everything is fine
 32626                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32627                                  	; 12/12/2022
 32628                                  	; cf=0
 32629                                  	;clc
 32630                                  	;call	setdeviceparameters
 32631                                  	; 04/01/2023
 32632                                  	;jmp	short setdeviceparameters
 32633                                  
 32634                                  %endif
 32635                                  
 32636                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32637                                  
 32638                                  ;----------------------------------------------------------------------------
 32639                                  ;
 32640                                  ; procedure : setdeviceparameters
 32641                                  ;
 32642                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32643                                  ; system based on the form factor. it is assumed that the bpbs for the
 32644                                  ; various form factors are present in the bpbtable. for hard files,
 32645                                  ; the recommended bpb is the same as the bpb on the drive.
 32646                                  ; no attempt is made to preserve registers since we are going to jump to
 32647                                  ; sysinit straight after this routine.
 32648                                  ;
 32649                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32650                                  ;	  we always return no carry
 32651                                  ;
 32652                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32653                                  ;
 32654                                  ;----------------------------------------------------------------------------
 32655                                  
 32656                                  ; 15/04/2019 - Retro DOS v4.0
 32657                                  
 32658                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32659                                  setdeviceparameters:
 32660                                  	; 04/01/2023
 32661                                  	; ds = cs
 32662                                  	
 32663 00002DE1 06                      	push	es
 32664                                  
 32665 00002DE2 0E                      	push	cs
 32666 00002DE3 07                      	pop	es
 32667                                  
 32668 00002DE4 31DB                    	xor	bx,bx
 32669 00002DE6 8A1E[6735]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32670 00002DEA 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32671 00002DED 7506                    	jne	short got_80
 32672                                  
 32673 00002DEF C706[6A35]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32674                                  							; 48 tpi=40 cyl
 32675                                  got_80:
 32676 00002DF5 D1E3                    	shl	bx,1			; get index into bpb table
 32677 00002DF7 8BB7[0E37]              	mov	si,[bpbtable+bx]	; get address of bpb
 32678                                  
 32679                                  	;mov	di,deviceparameters+7	
 32680                                  	; 02/11/2022
 32681 00002DFB BF[6D35]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32682 00002DFE B91F00                  	mov	cx,A_BPB.size ; 31
 32683 00002E01 FC                      	cld
 32684                                  	;repe	movsb
 32685                                  	; 02/11/2022
 32686 00002E02 F3A4                    	rep	movsb
 32687                                  
 32688 00002E04 07                      	pop	es
 32689                                  
 32690                                  	; 12/12/2022
 32691 00002E05 F606[8F36]20            	test	byte [switches],flagseclim ; 20h
 32692                                  	;test	word [switches],flagseclim ; 20h
 32693 00002E0A 7406                    	jz	short see_heads
 32694                                  
 32695 00002E0C A1[8C36]                	mov	ax,[slim]
 32696                                  	;mov	[deviceparameters+20],ax
 32697 00002E0F A3[7A35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32698                                  
 32699                                  see_heads:
 32700                                  	; 12/12/2022
 32701 00002E12 F606[8F36]40            	test	byte [switches],flagheads ; 40h
 32702                                  	;test	word [switches],flagheads ; 40h
 32703 00002E17 7406                    	jz	short heads_not_altered
 32704                                  
 32705 00002E19 A1[8A36]                	mov	ax,[hlim]
 32706                                  	;mov	[deviceparameters+22],ax	
 32707 00002E1C A3[7C35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32708                                  
 32709                                  heads_not_altered:
 32710                                  
 32711                                  ; set up correct media descriptor byte and sectors/cluster
 32712                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32713                                  
 32714                                  	;mov	byte [deviceparameters+9],2
 32715                                  	; 02/11/2022
 32716                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32717                                  	; 04/01/2023
 32718 00002E1F B80200                  	mov	ax,2	
 32719 00002E22 A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32720                                  
 32721 00002E25 B3F0                    	mov	bl,0F0h			; get default mediabyte
 32722                                  
 32723                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32724                                  
 32725                                  	;mov	bh,[deviceparameters+17]
 32726                                  	; 02/11/2022
 32727 00002E27 8A3E[7735]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32728                                  
 32729                                  	; 04/01/2023
 32730                                  	; ax = 2
 32731 00002E2B 3906[7C35]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32732                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32733 00002E2F 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32734                                  
 32735 00002E31 7524                    	jne	short only_one_head	; one head, do one head stuff
 32736                                  
 32737                                  ;	two head drives will use the mediadescriptor from the bpb
 32738                                  
 32739 00002E33 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32740                                  
 32741                                  ;	two sided drives have two special cases to look for. One is
 32742                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32743                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32744                                  ;	   one sector/cluster.
 32745                                  
 32746                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32747                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32748                                  ;	   type of 2 headed drive is all set.
 32749                                  
 32750 00002E35 833E[7A35]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32751 00002E3A 7509                    	jne	short not_144m
 32752 00002E3C 833E[6A35]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32753 00002E41 7502                    	jne	short not_144m
 32754                                  
 32755                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32756                                  
 32757 00002E43 EB24                    	jmp	short got_one_secperclus_drive
 32758                                  
 32759                                  ;	check for 320K
 32760                                  
 32761                                  not_144m:
 32762 00002E45 833E[6A35]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32763 00002E4A 7521                    	jne	short got_correct_mediad
 32764 00002E4C 833E[7A35]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32765 00002E51 751A                    	jne	short got_correct_mediad
 32766                                  
 32767 00002E53 B3FC                    	mov	bl,0FCh
 32768 00002E55 EB16                    	jmp	short got_correct_mediad
 32769                                  
 32770                                  only_one_head:
 32771                                  
 32772                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32773                                  
 32774 00002E57 803E[6735]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32775 00002E5C 740B                    	je	short got_one_secperclus_drive
 32776                                  
 32777                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32778                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32779                                  ;	  besides 8 will be considered 0fch
 32780                                  
 32781 00002E5E B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32782 00002E60 833E[7A35]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32783                                  	; 12/12/2022
 32784 00002E65 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32785                                  
 32786 00002E67 B3FE                    	mov	bl,0FEh			; 160K mediaid
 32787                                  
 32788                                  ;	we've either got a one sided drive, or a 1.44M drive
 32789                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32790                                  
 32791                                  got_one_secperclus_drive:
 32792                                  	; 04/01/2023
 32793                                  	; ax = 2
 32794 00002E69 48                      	dec	ax  ; ax = 1
 32795 00002E6A A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32796                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32797                                  
 32798                                  got_correct_mediad:
 32799 00002E6D 881E[7735]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32800                                  
 32801                                  ;	 Calculate the correct number of Total Sectors on medium
 32802                                  
 32803 00002E71 A1[6A35]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32804 00002E74 F726[7C35]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32805 00002E78 F726[7A35]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32806 00002E7C A3[7535]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32807 00002E7F F8                      	clc				; we currently return no errors
 32808                                  
 32809 00002E80 C3                      	retn
 32810                                  
 32811                                  ;	M047 -- end rewritten routine
 32812                                  
 32813                                  ;----------------------------------------------------------------------------
 32814                                  ;
 32815                                  ; procedure : organize
 32816                                  ;
 32817                                  ;----------------------------------------------------------------------------
 32818                                  
 32819                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32820                                  	; (SYSINIT:3234h)
 32821                                  
 32822                                  organize:
 32823                                  	; 04/01/2023
 32824                                  	; ds = cs
 32825 00002E81 8B0E[D203]              	mov	cx,[count]
 32826                                  	;mov	cx,[cs:count]
 32827 00002E85 E326                    	jcxz	nochar1
 32828                                  
 32829                                  ;ifndef	MULTI_CONFIG
 32830                                  ;
 32831                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32832                                  ;;   because we the case of values in SET commands preserved
 32833                                  ;
 32834                                  ;	call	mapcase
 32835                                  ;endif
 32836                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32837 00002E87 E81B02                  	call	mapcase
 32838                                  
 32839 00002E8A 31F6                    	xor	si,si
 32840 00002E8C 89F7                    	mov	di,si
 32841 00002E8E 31C0                    	xor	ax,ax
 32842                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32843                                  	;;mov	byte [cs:com_level],0
 32844                                  	; 12/12/2022
 32845                                  	;mov	[cs:com_level],al ; 0
 32846                                  	; 04/01/2023
 32847                                  	; ds = cs
 32848 00002E90 A2[CC03]                	mov	[com_level],al ; 0
 32849                                  org1:
 32850 00002E93 E8B101                  	call	skip_comment
 32851 00002E96 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32852 00002E98 E89601                  	call	get2			; not a comment string. then get a char.
 32853 00002E9B 3C0A                    	cmp	al,lf ; 0Ah
 32854 00002E9D 7406                    	je	short end_commd_line	; starts with a blank line.
 32855 00002E9F 3C20                    	cmp	al,' ' ; 20h
 32856 00002EA1 76F0                    	jbe	short org1		; skip leading control characters
 32857 00002EA3 EB0A                    	jmp	short findit
 32858                                  
 32859                                  end_commd_line:
 32860 00002EA5 AA                      	stosb				; store line feed char in buffer for the linecount.
 32861                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32862                                  	; 04/01/2023
 32863                                  	; ds = cs
 32864 00002EA6 C606[CC03]00            	mov	byte [com_level],0
 32865 00002EAB EBE6                    	jmp	short org1
 32866                                  
 32867                                  nochar1:
 32868 00002EAD F9                      	stc
 32869 00002EAE C3                      	retn
 32870                                  
 32871                                  findit:
 32872 00002EAF 51                      	push	cx
 32873 00002EB0 56                      	push	si
 32874 00002EB1 57                      	push	di
 32875 00002EB2 89F5                    	mov	bp,si
 32876 00002EB4 4D                      	dec	bp
 32877 00002EB5 BE[D534]                        mov     si,comtab		; prepare to search command table
 32878 00002EB8 B500                    	mov	ch,0
 32879                                  findcom:
 32880 00002EBA 89EF                    	mov	di,bp
 32881 00002EBC 8A0C                    	mov	cl,[si]
 32882 00002EBE 46                      	inc	si
 32883 00002EBF E324                    	jcxz	nocom
 32884                                  
 32885                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32886                                  
 32887                                  ;ifdef	MULTI_CONFIG
 32888                                  ;
 32889                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32890                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32891                                  ;;   anything in particular)
 32892                                  ;
 32893                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32894                                  ;       je	short semicolon
 32895                                  ;loopcom:
 32896                                  ;       mov     al,[es:di]
 32897                                  ;       inc     di
 32898                                  ;       and     al,~20h ; 0DFh		; force upper case
 32899                                  ;       inc     si                      ; compare to byte @es:di
 32900                                  ;       cmp     al,[si-1]
 32901                                  ;       loope   loopcom
 32902                                  ;;else
 32903                                  ;;	repe	cmpsb
 32904                                  ;endif
 32905                                  	; 02/11/2022
 32906 00002EC1 F3A6                    	repe	cmpsb
 32907                                  
 32908 00002EC3 9F                      	lahf
 32909 00002EC4 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32910 00002EC6 9E                      	sahf
 32911 00002EC7 AC                              lodsb                           ; get indicator letter
 32912 00002EC8 75F0                    	jnz	short findcom
 32913 00002ECA 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32914 00002ECE 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32915 00002ED0 26803D0A                	cmp	byte [es:di],lf
 32916 00002ED4 740A                    	je	short gotcom0
 32917                                  
 32918                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32919                                  ;
 32920                                  ;;ifdef	MULTI_CONFIG
 32921                                  ;
 32922                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32923                                  ;
 32924                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32925                                  ;       je	short gotcom0
 32926                                  ;;endif
 32927                                  ;	push	ax
 32928                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32929                                  ;
 32930                                  ;;ifdef	MULTI_CONFIG
 32931                                  ;
 32932                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32933                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32934                                  ;;   stored in the CONFIG.SYS memory image.
 32935                                  ;
 32936                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32937                                  ;       jne	short no_query		; no
 32938                                  ;       pop     ax                      ; yes, so retrieve the original code
 32939                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32940                                  ;       jmp     short gotcom0           ;
 32941                                  ;semicolon:
 32942                                  ;       mov     al,CONFIG_REM
 32943                                  ;       jmp     short gotcom0
 32944                                  ;no_query:
 32945                                  ;;endif  ;MULTI_CONFIG
 32946                                  
 32947                                  	; 02/11/2022
 32948 00002ED6 50                      	push	ax
 32949 00002ED7 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32950                                  
 32951 00002EDA E8A001                  	call	delim
 32952                                  no_delim:
 32953 00002EDD 58                      	pop	ax
 32954 00002EDE 75DA                    	jnz	short findcom
 32955                                  gotcom0:
 32956 00002EE0 5F                      	pop	di
 32957 00002EE1 5E                      	pop	si
 32958 00002EE2 59                      	pop	cx
 32959 00002EE3 EB0F                    	jmp	short gotcom
 32960                                  nocom:
 32961 00002EE5 5F                      	pop	di
 32962 00002EE6 5E                      	pop	si
 32963 00002EE7 59                      	pop	cx
 32964 00002EE8 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32965 00002EEA AA                      	stosb				; save indicator char.
 32966                                  _skipline:
 32967 00002EEB E84301                  	call	get2
 32968 00002EEE 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32969 00002EF0 75F9                            jne     short _skipline
 32970 00002EF2 EBB1                    	jmp	short end_commd_line	; handle next command line
 32971                                  gotcom:
 32972 00002EF4 AA                              stosb                           ; save indicator char in buffer
 32973                                  
 32974                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32975                                  ;;ifdef	MULTI_CONFIG
 32976                                  ;
 32977                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 32978                                  ;;   it screws up the direct comparisons below.
 32979                                  ;
 32980                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 32981                                  ;;endif
 32982                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 32983                                  ;
 32984                                  ;;ifdef	MULTI_CONFIG
 32985                                  ;
 32986                                  ;;   There is no whitespace/delimiter between the "begin block" character
 32987                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 32988                                  ;;   skipping code
 32989                                  ;
 32990                                  ;       cmp     al,CONFIG_BEGIN
 32991                                  ;       je	short org31
 32992                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 32993                                  ;       je      short no_mapcase
 32994                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 32995                                  ;       je      short no_mapcase
 32996                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 32997                                  ;       je      short no_mapcase
 32998                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 32999                                  ;       je      short no_mapcase
 33000                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 33001                                  ;no_mapcase:
 33002                                  ;;endif
 33003                                  
 33004                                  	; 02/11/2022
 33005                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 33006                                  	; 04/01/2023
 33007                                  	; ds = cs
 33008 00002EF5 A2[D003]                	mov	[cmd_indicator],al
 33009                                  org2:	
 33010 00002EF8 E83601                  	call    get2                    ; skip the command name until delimiter
 33011 00002EFB 3C0A                            cmp     al,lf
 33012 00002EFD 740B                    	je	short org21
 33013 00002EFF 3C0D                    	cmp	al,cr
 33014 00002F01 7407                    	je	short org21
 33015                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33016                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 33017                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 33018                                  
 33019 00002F03 E87701                  	call	delim
 33020 00002F06 75F0                            jnz	short org2
 33021 00002F08 EB02                    	jmp	short org3
 33022                                  org21:					;if cr or lf then
 33023 00002F0A 4E                      	dec	si			; undo si, cx register
 33024 00002F0B 41                      	inc	cx			;  and continue
 33025                                  org3:	
 33026                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 33027                                  	;je	short get_cmt_token
 33028                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33029                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33030                                  	;;je	short org_file
 33031                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 33032                                  	;je	short org_file
 33033                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33034                                          ;;je	short org_file
 33035                                  	;; 02/11/2022
 33036                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33037                                  	;je	short org_file
 33038                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 33039                                  	;je	short org_file
 33040                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 33041                                  	;je	short org_switch
 33042                                  
 33043                                  	; 04/01/2023
 33044                                  	; ds = cs
 33045                                  
 33046 00002F0C 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 33047 00002F11 7456                    	je	short get_cmt_token
 33048                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33049                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33050                                  	;je	short org_file
 33051 00002F13 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 33052 00002F18 7429                    	je	short org_file
 33053                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33054                                          ;je	short org_file
 33055                                  	; 02/11/2022
 33056 00002F1A 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33057 00002F1F 7422                    	je	short org_file
 33058 00002F21 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33059 00002F26 741B                    	je	short org_file
 33060 00002F28 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33061 00002F2D 7403                    	je	short org_switch
 33062                                  	
 33063                                  org31:
 33064 00002F2F E99500                  	jmp	org4
 33065                                  
 33066                                  org_switch:
 33067 00002F32 E81201                  	call	skip_comment
 33068 00002F35 7472                    	jz	short end_commd_line_brdg
 33069                                  
 33070 00002F37 E8F700                  	call	get2
 33071 00002F3A E84801                  	call	org_delim
 33072 00002F3D 74F3                    	jz	short org_switch
 33073                                  
 33074 00002F3F AA                      	stosb
 33075 00002F40 E99300                  	jmp	org5
 33076                                  
 33077                                  org_file:			; get the filename and put 0 at end
 33078 00002F43 E80101                  	call	skip_comment
 33079 00002F46 7464                    	jz	short org_put_zero
 33080                                  
 33081 00002F48 E8E600                  	call	get2		; not a comment
 33082 00002F4B E82F01                  	call	delim
 33083 00002F4E 74F3                    	jz	short org_file	; skip the possible delimiters
 33084                                  
 33085 00002F50 AA                      	stosb			; copy the first non delim char found in buffer
 33086                                  
 33087                                  org_copy_file:
 33088 00002F51 E8F300                  	call	skip_comment	; comment char in the filename?
 33089 00002F54 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33090                                  
 33091 00002F56 E8D800                  	call	get2
 33092 00002F59 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33093 00002F5B 7457                    	je	short end_file_slash ; this will be the special case.
 33094                                  
 33095 00002F5D AA                      	stosb			; save the char. in buffer
 33096 00002F5E E81C01                  	call	delim
 33097 00002F61 7459                    	jz	short end_copy_file
 33098                                  
 33099 00002F63 3C20                    	cmp	al, ' '
 33100 00002F65 77EA                    	ja	short org_copy_file ; keep copying
 33101 00002F67 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33102                                  
 33103                                  get_cmt_token:			; get the token. just max. 2 char.
 33104 00002F69 E8C500                  	call	get2
 33105 00002F6C 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33106 00002F6E 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33107 00002F70 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33108 00002F72 74F5                    	je	short get_cmt_token ;  character.)
 33109 00002F74 3C3D                    	cmp	al,'='		; = is special in this case.
 33110 00002F76 74F1                    	je	short get_cmt_token
 33111 00002F78 3C0D                    	cmp	al,cr
 33112 00002F7A 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33113 00002F7C 3C0A                    	cmp	al,lf
 33114 00002F7E 7422                    	je	short get_cmt_end
 33115                                  
 33116                                  	; 04/01/2023
 33117                                  	; ds = cs
 33118                                  	;mov	[cs:cmmt1],al	; store it
 33119                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33120 00002F80 A2[CE03]                	mov	[cmmt1],al	; store it
 33121 00002F83 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 33122 00002F88 E8A600                  	call	get2
 33123 00002F8B 3C20                    	cmp	al,' ' ; 20h
 33124 00002F8D 7413                    	je	short get_cmt_end
 33125 00002F8F 3C09                    	cmp	al,tab ; 9
 33126 00002F91 740F                    	je	short get_cmt_end
 33127 00002F93 3C0D                    	cmp	al,cr  ; 0Dh
 33128 00002F95 740B                    	je	short get_cmt_end
 33129 00002F97 3C0A                    	cmp	al,lf  ; 0Ah
 33130 00002F99 740E                    	je	short end_commd_line_brdg
 33131                                  
 33132                                  	;mov	[cs:cmmt2],al
 33133                                  	;inc	byte [cs:cmmt]
 33134                                  	; 04/01/2023
 33135 00002F9B A2[CF03]                	mov	[cmmt2],al
 33136 00002F9E FE06[CD03]              	inc	byte [cmmt]
 33137                                  
 33138                                  get_cmt_end:
 33139 00002FA2 E88C00                  	call	get2
 33140 00002FA5 3C0A                    	cmp	al,lf
 33141 00002FA7 75F9                    	jne	short get_cmt_end	; skip it.
 33142                                  end_commd_line_brdg: 
 33143 00002FA9 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33144                                  
 33145                                  org_put_zero:				; make the filename in front of
 33146 00002FAC 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33147 00002FB0 47                      	inc	di
 33148 00002FB1 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33149                                  
 33150                                  end_file_slash: 			; al = "/" option char.
 33151 00002FB4 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33152 00002FB8 47                      	inc	di			; and
 33153 00002FB9 AA                      	stosb				; store "/" after that.
 33154 00002FBA EB1A                    	jmp	short org5		; continue with the rest of the line
 33155                                  
 33156                                  end_copy_file:
 33157 00002FBC 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33158 00002FC1 3C0A                    	cmp	al,lf
 33159 00002FC3 74E4                    	je	short end_commd_line_brdg
 33160 00002FC5 EB0F                    	jmp	short org5
 33161                                  
 33162                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33163 00002FC7 E87D00                  	call	skip_comment
 33164 00002FCA 74DD                    	jz	short end_commd_line_brdg
 33165                                  
 33166 00002FCC E86200                  	call	get2
 33167 00002FCF E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33168 00002FD2 74F3                    	jz	short org4
 33169 00002FD4 EB08                    	jmp	short org51
 33170                                  
 33171                                  org5:					; rest of the line
 33172 00002FD6 E86E00                  	call	skip_comment		; comment?
 33173 00002FD9 74CE                    	jz	short end_commd_line_brdg
 33174 00002FDB E85300                  	call	get2			; not a comment.
 33175                                  
 33176                                  org51:
 33177 00002FDE AA                      	stosb				; copy the character
 33178 00002FDF 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33179 00002FE1 743A                    	je	short at_quote
 33180 00002FE3 3C20                    	cmp	al,' '  ; 20h
 33181 00002FE5 77EF                    	ja	short org5
 33182                                  					; M051 - Start
 33183                                  	; 04/01/2023
 33184                                  	; ds = cs
 33185 00002FE7 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33186                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33187 00002FEC 7514                    	jne	short not_dh		; N: 
 33188 00002FEE 3C0A                    	cmp	al,lf			; Q: is this line feed
 33189 00002FF0 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33190 00002FF2 3C0D                    	cmp	al,cr			; Q: is this a cr
 33191 00002FF4 75E0                    	jne	short org5		; N: 
 33192 00002FF6 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33193 00002FFB AA                      	stosb				; put cr after blank
 33194 00002FFC FE06[C32C]              	inc	byte [insert_blank]
 33195                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33196                                  					; inserted
 33197 00003000 EBD4                    	jmp	short org5
 33198                                  not_dh:					; M051 - End
 33199                                  
 33200 00003002 3C0A                    	cmp	al,lf			; line feed?
 33201 00003004 740F                    	je	short org1_brdg		; handles the next command line.
 33202 00003006 EBCE                    	jmp	short org5		; handles next char in this line.
 33203                                  
 33204                                  org_dhlf:				; M051 - Start
 33205                                  	; 04/01/2023
 33206                                  	; ds = cs
 33207 00003008 803E[C32C]01            	cmp	byte [insert_blank],1
 33208                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33209 0000300D 7406                    	je	short org1_brdg		; Y:
 33210 0000300F 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33211 00003014 AA                      	stosb				; put lf after blank
 33212                                  					; M051 - End
 33213                                  org1_brdg:
 33214 00003015 C606[C32C]00            	mov	byte [insert_blank],0 
 33215                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33216                                  					; M051: devicehigh
 33217 0000301A E976FE                  	jmp	org1
 33218                                  
 33219                                  at_quote:
 33220 0000301D 803E[CC03]00            	cmp	byte [com_level],0
 33221                                  	;cmp	byte [cs:com_level],0
 33222 00003022 7407                    	je	short up_level
 33223                                  	;mov	byte [cs:com_level],0	; reset it.
 33224 00003024 C606[CC03]00            	mov	byte [com_level],0
 33225 00003029 EBAB                    	jmp	short org5
 33226                                  
 33227                                  up_level:
 33228                                  	;inc	byte [cs:com_level]	; set it.
 33229 0000302B FE06[CC03]              	inc	byte [com_level]
 33230 0000302F EBA5                    	jmp	short org5
 33231                                  
 33232                                  ;----------------------------------------------------------------------------
 33233                                  ;
 33234                                  ; procedure : get2
 33235                                  ;
 33236                                  ;----------------------------------------------------------------------------
 33237                                  
 33238                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33239                                  	; (SYSINIT:33FAh)
 33240                                  	; 04/01/2023
 33241                                  get2:
 33242 00003031 E304                    	jcxz	noget
 33243                                  	;
 33244                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33245                                  	;;lods	byte ptr es:[si]
 33246                                  	; 12/12/2022
 33247 00003033 26                      	es	
 33248 00003034 AC                      	lodsb
 33249                                  	;mov	al, [es:si]
 33250                                  	;inc	si
 33251                                  	;
 33252 00003035 49                      	dec	cx
 33253 00003036 C3                      	retn
 33254                                  noget:
 33255 00003037 59                      	pop	cx
 33256                                  	; 04/01/2023
 33257                                  	; ds = cs
 33258                                  	;mov	[cs:count],di ; 13/05/2019
 33259                                  	;mov	[cs:org_count],di
 33260 00003038 893E[D203]              	mov	[count],di
 33261 0000303C 893E[D403]              	mov	[org_count],di
 33262 00003040 31F6                    	xor	si,si
 33263                                  	;mov	[cs:chrptr],si
 33264 00003042 8936[D603]              	mov	[chrptr],si
 33265                                  
 33266                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33267                                  ;;ifndef MULTI_CONFIG
 33268                                  ;;	retn
 33269                                  ;;else
 33270                                  ;
 33271                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33272                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33273                                  ;;   and the new boot menu stuff...
 33274                                  ;
 33275                                  ;	mov     cx,di
 33276                                  ;	jmp     menu_check
 33277                                  ;;endif
 33278                                  
 33279                                  	; 02/11/2022
 33280 00003046 C3                      	retn
 33281                                  
 33282                                  ;----------------------------------------------------------------------------
 33283                                  ;
 33284                                  ; procedure : skip_comment
 33285                                  ;
 33286                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33287                                  ;in) es:si-> string
 33288                                  ;	 cx -> length.
 33289                                  ;out) zero flag not set if not found a comment string.
 33290                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33291                                  ;	  the line feed character at this moment when return.
 33292                                  ;	  ax register destroyed.
 33293                                  ;	  if found, si, cx register adjusted accordingly.
 33294                                  ;
 33295                                  ;----------------------------------------------------------------------------
 33296                                  
 33297                                  	; 04/01/2023 - Retro DOS v4.0
 33298                                  
 33299                                  skip_comment:
 33300 00003047 E3EE                    	jcxz	noget		; get out of the organize routine.
 33301                                  
 33302                                  	; 04/01/2023
 33303                                  	; ds = cs	
 33304                                  
 33305 00003049 803E[CC03]00            	cmp	byte [com_level],0
 33306                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33307 0000304E 752C                    	jne	short no_commt	 ; (not inside quotations)
 33308                                  
 33309 00003050 803E[CD03]01            	cmp	byte [cmmt],1
 33310                                  	;cmp	byte [cs:cmmt],1
 33311 00003055 7225                    	jb	short no_commt
 33312                                  
 33313 00003057 268A04                  	mov	al,[es:si]
 33314                                  	
 33315 0000305A 3806[CE03]              	cmp	[cmmt1],al
 33316                                  	;cmp	[cs:cmmt1],al
 33317 0000305E 751C                    	jne	short no_commt
 33318                                  
 33319 00003060 803E[CD03]02            	cmp	byte [cmmt],2
 33320                                  	;cmp	byte [cs:cmmt],2
 33321 00003065 750A                    	jne	short skip_cmmt
 33322                                  
 33323 00003067 268A4401                	mov	al,[es:si+1]
 33324                                  	
 33325 0000306B 3806[CF03]              	cmp	[cmmt2],al
 33326                                  	;cmp	[cs:cmmt2],al
 33327 0000306F 750B                    	jne	short no_commt
 33328                                  skip_cmmt:
 33329 00003071 E3C4                    	jcxz	noget		; get out of organize routine.
 33330 00003073 268A04                  	mov	al,[es:si]
 33331 00003076 46                      	inc	si
 33332 00003077 49                      	dec	cx
 33333 00003078 3C0A                    	cmp	al,lf		; line feed?
 33334 0000307A 75F5                    	jne	short skip_cmmt
 33335                                  no_commt:
 33336 0000307C C3                      	retn
 33337                                  
 33338                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33339                                  %if 0
 33340                                  
 33341                                  ;ifdef	MULTI_CONFIG
 33342                                  
 33343                                  ;----------------------------------------------------------------------------
 33344                                  ;
 33345                                  ;   kbd_read: wait for keystroke
 33346                                  ;
 33347                                  ;   INPUT
 33348                                  ;       DS == CS == sysinitseg
 33349                                  ;
 33350                                  ;   OUTPUT
 33351                                  ;       Carry SET to clean boot, CLEAR otherwise
 33352                                  ;
 33353                                  ;   OTHER REGS USED
 33354                                  ;       All
 33355                                  ;
 33356                                  ;   HISTORY
 33357                                  ;       Created 16-Nov-1992 by JeffPar
 33358                                  ;
 33359                                  ;----------------------------------------------------------------------------
 33360                                  
 33361                                  kbd_read:
 33362                                          test    byte [bDisableUI],2
 33363                                          jnz     short kbd_nodelay
 33364                                  
 33365                                          push    ds              ; the bios timer tick count is incremented
 33366                                          sub     ax,ax           ; 18.2 times per second;
 33367                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33368                                  	;mov	dx,[046Ch]	; get initial value
 33369                                  kbd_loop:
 33370                                          mov     ah,1            ;
 33371                                          int     16h             ; peek the keyboard
 33372                                          jnz	short kbd_loopdone ; something's there, get out
 33373                                          mov     ah,2            ; peek the shift states
 33374                                          int     16h             ;
 33375                                          test    al,03h          ; either right or left shift key bits set?
 33376                                          jnz	short kbd_loopdone ; yes
 33377                                          mov     ax,[046Ch]	;
 33378                                  	;sub	ax,dx           ; get difference
 33379                                  	; 15/04/2019 - Retro DOS v4.0
 33380                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33381                                  
 33382                                  	cmp     al,37           ; reached limit?
 33383                                          jb	short kbd_loop	; not yet
 33384                                  kbd_loopdone:
 33385                                          pop     ds              ; delay complete!
 33386                                  kbd_nodelay:
 33387                                          sub     bx,bx           ; assume clean boot
 33388                                          mov     ah,2            ; peek the shift states
 33389                                          int     16h             ;
 33390                                          test    al,03h          ; either right or left shift key bits set?
 33391                                          jz      short kbd_notshift ; no
 33392                                          inc     bx              ; yes
 33393                                          inc     bx
 33394                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33395                                  	or	byte [bQueryOpt],4
 33396                                  kbd_notshift:                   ;
 33397                                          mov     ah,1            ; peek the keyboard
 33398                                          int     16h             ;
 33399                                          jz	short kbd_test	; no key present
 33400                                          or      al,al           ; is it a function key?
 33401                                          jnz	short kbd_test	; no
 33402                                  
 33403                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33404                                          cmp     ah,62h          ; CTRL F5
 33405                                          je	short kbd_cfg_bypass
 33406                                  	
 33407                                          cmp     ah,3Fh          ; F5 function key?
 33408                                          jne	short kbd_notf5	; no
 33409                                  kbd_cfg_bypass:
 33410                                          mov     dx,_$CleanMsg
 33411                                          call    print
 33412                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33413                                  	or	byte [bQueryOpt],4           ;
 33414                                          jmp     short kbd_eat   ; yes, clean boot selected
 33415                                  kbd_notf5:
 33416                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33417                                          cmp     ah,65h          ; CTRL F8
 33418                                          je	short kbd_cfg_confirm
 33419                                  
 33420                                          cmp     ah,42h          ; F8 function key?
 33421                                          jne	short kbd_exit	; no
 33422                                  kbd_cfg_confirm:
 33423                                          mov     dx,_$InterMsg
 33424                                          call    print           ;
 33425                                          mov     bl,1            ; yes, interactive-boot option enabled
 33426                                          mov     [bQueryOpt],bl  ; change default setting
 33427                                  kbd_eat:                        ;
 33428                                          mov     ah,0            ;
 33429                                          int     16h             ; eat the key we assumed was a signal
 33430                                          mov	byte [secElapsed],-1
 33431                                          or      bx,bx           ;
 33432                                          jz	short kbd_clean	;
 33433                                  kbd_test:                       ;
 33434                                          cmp     bl,2            ;
 33435                                          jb	short kbd_exit	;
 33436                                  kbd_clean:                      ;
 33437                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33438                                          stc                     ; set carry to indicate abort
 33439                                          retn			;
 33440                                  kbd_exit:                       ;
 33441                                          clc                     ; clear carry to indicate success
 33442                                          retn			;
 33443                                  
 33444                                  ;----------------------------------------------------------------------------
 33445                                  ;
 33446                                  ;   set_numlock: set numlock LED
 33447                                  ;
 33448                                  ;   INPUT
 33449                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33450                                  ;
 33451                                  ;   OUTPUT
 33452                                  ;       None
 33453                                  ;
 33454                                  ;   OTHER REGS USED
 33455                                  ;       None
 33456                                  ;
 33457                                  ;   HISTORY
 33458                                  ;       Created 16-Nov-1992 by JeffPar
 33459                                  ;
 33460                                  ;----------------------------------------------------------------------------
 33461                                  
 33462                                  set_numlock:
 33463                                          push    ax
 33464                                          push    ds
 33465                                          sub     ax,ax
 33466                                          mov     ds,ax
 33467                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33468                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33469                                          jne	short not_off	; no
 33470                                          and     byte [0417h],~20h ; 0DFh
 33471                                          jmp     short set_done
 33472                                  not_off:
 33473                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33474                                          stc
 33475                                          jne	short set_done	; no
 33476                                          or      byte [0417h],20h
 33477                                  set_done:
 33478                                          pop     ds
 33479                                          pop     ax
 33480                                          retn
 33481                                  
 33482                                  ; 16/04/2019 - Retro DOS v4.0
 33483                                  
 33484                                  ;----------------------------------------------------------------------------
 33485                                  ;
 33486                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33487                                  ;
 33488                                  ;   INPUT
 33489                                  ;       CX == "organized" config.sys memory image length
 33490                                  ;    ES:SI -> "organized" config.sys memory image
 33491                                  ;       DS == CS == sysinitseg
 33492                                  ;
 33493                                  ;   OUTPUT
 33494                                  ;       Same as above;  the idea is that menu_check simply transforms
 33495                                  ;       a block-structured config.sys image into a conventional image,
 33496                                  ;       based on the user's block selection and any other boot-time options
 33497                                  ;       the user may have employed...
 33498                                  ;
 33499                                  ;   OTHER REGS USED
 33500                                  ;       All
 33501                                  ;
 33502                                  ;   NOTES
 33503                                  ;       [count] and [org_count] are set to the new config.sys image length
 33504                                  ;
 33505                                  ;   HISTORY
 33506                                  ;       Created 16-Mar-1992 by JeffPar
 33507                                  ;
 33508                                  ;----------------------------------------------------------------------------
 33509                                  
 33510                                  menu_check:
 33511                                  
 33512                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33513                                  ;   disable clean/interactive boot options
 33514                                  
 33515                                          push    cx              ;
 33516                                          push    si              ;
 33517                                          sub     bx,bx           ; remains ZERO until first block
 33518                                  swchk_loop:                     ;
 33519                                          call    get_char        ; get first char of current line
 33520                                          jc	short swchk_end	; hit eof
 33521                                          cmp     al,CONFIG_BEGIN ;
 33522                                          jne	short swchk_next1 ;
 33523                                          inc     bx              ; remember that we've seen a block
 33524                                          jmp     short swchk_nextline
 33525                                  swchk_next1:                    ;
 33526                                          cmp     al,CONFIG_NUMLOCK
 33527                                          jne	short swchk_next2 ;
 33528                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33529                                          jnz	short swchk_nextline ; before the first block
 33530                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33531                                          mov     byte [es:si-1],CONFIG_REM
 33532                                          jmp     short swchk_nextline
 33533                                  swchk_next2:                    ;
 33534                                          cmp     al,CONFIG_SWITCHES
 33535                                          jne	short swchk_nextline ; this line ain't it
 33536                                  swchk_scan:                     ;
 33537                                          call    get_char        ; look for /N or /F
 33538                                  swchk_scan1:                    ;
 33539                                          cmp     al,LF           ; end of line?
 33540                                          je	short swchk_nextline ; yes
 33541                                          cmp     al,'/'          ; switch-char?
 33542                                          jne	short swchk_scan ; no
 33543                                          call    get_char        ;
 33544                                          and     al,~20h ; 0DFh	; convert to upper case
 33545                                          cmp     al,[swit_n+1]
 33546                                          jne	short swchk_scan2 ; no
 33547                                          or      byte [bDisableUI],1
 33548                                          jmp	short swchk_scan ; continue looking for switches of interest
 33549                                  swchk_scan2:                    ;
 33550                                          cmp     al,[swit_f+1]
 33551                                          jne	short swchk_scan1 ; no
 33552                                          or      byte [bDisableUI],2
 33553                                          jmp     short swchk_scan ; continue looking for switches of interest
 33554                                  swchk_nextline:                 ;
 33555                                          call    skip_opt_line   ;
 33556                                          jmp     short swchk_loop ;
 33557                                  swchk_end:                      ;
 33558                                          pop     si              ;
 33559                                          pop     cx              ;
 33560                                  
 33561                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33562                                  ;   the DisableUI flag is still clear
 33563                                  
 33564                                          test    byte [bDisableUI],1
 33565                                          jnz	short menu_search
 33566                                  ;
 33567                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33568                                  ;   there is anything at all in the keyboard buffer
 33569                                  ;
 33570                                          call    kbd_read
 33571                                          jnc	short menu_search
 33572                                          jmp	menu_abort
 33573                                  
 33574                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33575                                  
 33576                                  menu_search:
 33577                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33578                                          mov     di,szMenu	;
 33579                                          call    find_block      ; find the MENU block
 33580                                          jnc	short menu_found ;
 33581                                          mov     byte [szBoot],0
 33582                                          jmp	no_selection ; not found
 33583                                  
 33584                                  ;   Process the requested menu color(s)
 33585                                  
 33586                                  menu_color:
 33587                                          push    cx              ;
 33588                                          push    dx              ;
 33589                                          mov     dx,0007h        ; default color setting
 33590                                          call    get_number	; get first number
 33591                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33592                                          mov     ch,bl           ; save it in CH
 33593                                          and     dl,0F0h         ;
 33594                                          or      dl,bl           ;
 33595                                          call    delim           ; did we hit a delimiter
 33596                                          jne	short check_color ; no, all done
 33597                                          call    get_number	; get next number
 33598                                          and     bl,0Fh		; second # is background color (for high nibble)
 33599                                          mov     dh,bl           ; save it in DH
 33600                                          and     dl,0Fh		;
 33601                                          mov     cl,4            ;
 33602                                          shl     bl,cl           ;
 33603                                          or      dl,bl           ;
 33604                                  check_color:                    ;
 33605                                          cmp     ch,dh           ; are foreground/background the same?
 33606                                          jne	short set_color	; no
 33607                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33608                                  set_color:
 33609                                          mov     [bMenuColor],dl ;
 33610                                          pop     dx              ;
 33611                                          pop     cx              ;
 33612                                          jmp	menu_nextitem
 33613                                  
 33614                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33615                                  ;   above is there simply to alleviate short jump problems)
 33616                                  
 33617                                  menu_found:
 33618                                          mov     byte [bDefBlock],1
 33619                                          mov     word [offDefBlock],0
 33620                                          mov     byte [secTimeOut],-1
 33621                                          and     byte [bQueryOpt],~2 ; 0FDh
 33622                                  
 33623                                          call    skip_opt_line   ; skip to next line
 33624                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33625                                  
 33626                                  ;   Process the menu block now
 33627                                  
 33628                                  menu_process:
 33629                                          call    get_char        ; get first char of current line
 33630                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33631                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33632                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33633                                          je	short to_menu_getdefault
 33634                                          cmp     al,CONFIG_SUBMENU
 33635                                          je	short menu_item	; go process sub-menu
 33636                                          cmp     al,CONFIG_MENUITEM
 33637                                          je	short menu_item	; go process menu item
 33638                                          cmp     al,CONFIG_MENUDEFAULT
 33639                                          je	short menu_default ; go process menu default
 33640                                          cmp     al,CONFIG_MENUCOLOR
 33641                                          je	short menu_color ; go process menu color
 33642                                          cmp     al,CONFIG_NUMLOCK
 33643                                          je	short menu_numlock ;
 33644                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33645                                          je	short menu_nextitem ;
 33646                                          call    any_delim       ; allow blank lines and such
 33647                                          je	short menu_nextitem ;
 33648                                          stc                     ;
 33649                                          call    print_error     ; non-MENU command!
 33650                                          jmp     short menu_nextitem
 33651                                  menu_numlock:
 33652                                          call    set_numlock
 33653                                          jmp     short menu_nextitem
 33654                                  to_menu_getdefault:
 33655                                          jmp     short menu_getdefault
 33656                                  
 33657                                  ;   Save the offset of the default block name, we'll need it later
 33658                                  
 33659                                  menu_default:
 33660                                          mov     [offDefBlock],si; save address of default block name
 33661                                          cmp     byte [secElapsed],0
 33662                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33663                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33664                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33665                                          call    skip_delim      ; something is typed
 33666                                          jc	short menu_nextitem ;
 33667                                          mov     si,bx           ;
 33668                                          call    get_number      ; get number (of seconds for timeout)
 33669                                          cmp     bl,90           ; limit it to a reasonable number
 33670                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33671                                          mov     bl,90           ;  display function can handle)
 33672                                  timeout_ok:                     ;
 33673                                          mov     [secTimeOut],bl ;
 33674                                  timeout_skip:
 33675                                          jmp     short menu_nextitem
 33676                                  
 33677                                  ;   Verify that this is a valid menu item by searching for the named block
 33678                                  
 33679                                  menu_item:
 33680                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33681                                          jae	short menu_nextitem ;
 33682                                          mov     di,si           ; DS:DI -> block name to search for
 33683                                          call    srch_block      ;
 33684                                          je	short menu_itemfound ;
 33685                                          stc                     ;
 33686                                          call    print_error     ; print error and pause
 33687                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33688                                  
 33689                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33690                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33691                                  ;   and CX are unmodified
 33692                                  
 33693                                  menu_itemfound:
 33694                                          inc     dx              ; otherwise, increment total block count
 33695                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33696                                          mov	[abBlockType+bx],al
 33697                                          add     bx,bx           ; of recorded block names and descriptions
 33698                                  
 33699                                  ;   There should be a description immediately following the block name on
 33700                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33701                                  ;   description...
 33702                                  
 33703                                          mov     [aoffBlockName+bx],si
 33704                                          mov     [aoffBlockDesc+bx],si
 33705                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33706                                          call    skip_token      ;
 33707                                          jc	short menu_nextitem ; hit eol/eof
 33708                                          call    skip_delim      ;
 33709                                          jc	short menu_nextitem ; hit eol/eof
 33710                                          xchg    bx,di           ;
 33711                                          mov     [aoffBlockDesc+bx],di
 33712                                  
 33713                                  menu_nextitem:
 33714                                          call    skip_opt_line   ;
 33715                                          jmp     menu_process    ; go back for more lines
 33716                                  
 33717                                  ;   Display menu items now, after determining which one is default
 33718                                  
 33719                                  menu_getdefault:
 33720                                          or      dl,dl           ; where there any valid blocks at all?
 33721                                          jnz	short menu_valid ; yes
 33722                                          sub     bx,bx           ; no, so force autoselect of 0
 33723                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33724                                  menu_valid:
 33725                                          sub     bx,bx           ;
 33726                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33727                                          mov     di,[offDefBlock];
 33728                                          or      di,di           ; does a default block exist?
 33729                                          jz	short menu_nodefault ; no
 33730                                          inc     bx              ; yes, walk name table, looking for default
 33731                                  menu_chkdefault:
 33732                                          push    bx              ;
 33733                                          add     bx,bx           ;
 33734                                          mov     si,[aoffBlockName+bx]
 33735                                          mov     cx,128          ; arbitrary maximum length of a name
 33736                                          push    ds              ;
 33737                                          push    es              ;
 33738                                          pop     ds              ;
 33739                                          call    comp_names      ; is this block the same as the default?
 33740                                          pop     ds              ;
 33741                                          pop     bx              ;
 33742                                          je	short menu_setdefault ; yes
 33743                                          inc     bx              ;
 33744                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33745                                          jbe	short menu_chkdefault ; not yet
 33746                                  menu_nodefault:
 33747                                          mov     bl,1            ; if no default, force default to #1
 33748                                  menu_setdefault:
 33749                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33750                                  
 33751                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33752                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33753                                  ;   supposed to skip menu display and run with the specified default block;
 33754                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33755                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33756                                  ;   with no timeout)
 33757                                  
 33758                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33759                                          jne	short menu_display ; no
 33760                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33761                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33762                                          jmp     not_topmenu	;
 33763                                  
 33764                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33765                                  
 33766                                  menu_display:
 33767                                          mov     ah,0Fh          ; get current video mode
 33768                                          int     10h             ;
 33769                                          mov     ah,00h          ; just re-select that mode
 33770                                          int     10h             ;
 33771                                          push    es              ;
 33772                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33773                                          mov     es,ax           ; and save the current (default) video page
 33774                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33775                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33776                                          mov     al,[es:0062h]   ;
 33777                                          mov     [bCRTPage],al   ;
 33778                                          mov     ax,[bMenuPage]	; select new page for menu
 33779                                          int     10h             ;
 33780                                          mov     ax,0600h        ; clear entire screen
 33781                                          mov     bh,[bMenuColor] ; using this color
 33782                                          sub     cx,cx           ; upper left row/col
 33783                                          ;mov	dl,[es:CRT_Cols] 
 33784                                          mov	dl,[es:4Ah]
 33785                                  	dec     dl              ;
 33786                                          ;mov	dh,[es:CRT_Rows];
 33787                                          mov	dh,[es:84h]
 33788                                  	or      dh,dh           ; # of rows valid?
 33789                                          jnz	short menu_clear ; hopefully
 33790                                          mov     dh,[bLastRow]   ; no, use a default
 33791                                  menu_clear:
 33792                                          int     10h             ; clear the screen using the req. attribute
 33793                                          pop     es              ;
 33794                                          mov     [bLastRow],dh   ; save DH
 33795                                          mov     dx,_$MenuHeader
 33796                                          call    print           ; cursor now on row 3 (numbered from 0)
 33797                                  
 33798                                          test    byte [bDisableUI],1
 33799                                          jnz     short menu_nostatus
 33800                                          mov     bh,[bMenuPage]  ;
 33801                                          mov     dh,[bLastRow]   ; restore DH
 33802                                          mov     dl,0            ; print the status line on row DH, col 0,
 33803                                          mov     ah,02h          ; now that we can trash the cursor position
 33804                                          int     10h             ;
 33805                                          mov     dx,_$StatusLine
 33806                                          call    print           ;
 33807                                          mov     ah,3            ; get cursor position
 33808                                          int     10h             ;
 33809                                          sub     dl,2            ;
 33810                                          mov     [bLastCol],dl   ; save column where status char will go
 33811                                  
 33812                                  menu_nostatus:
 33813                                          mov     bx,1            ; now prepare to display all the menu items
 33814                                  menu_disploop:
 33815                                          call    print_item	; print item #BL
 33816                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33817                                          cmp     bl,[bMaxBlock]  ; all done?
 33818                                          jbe	short menu_disploop ; not yet
 33819                                  
 33820                                  ;   Set cursor position to just below the menu items
 33821                                  
 33822                                          mov     dl,0            ; select column
 33823                                          mov     dh,bl           ;
 33824                                          add     dh,4            ; select row below menu
 33825                                          mov     bh,[bMenuPage]  ;
 33826                                          mov     ah,02h          ; set cursor position beneath the block list
 33827                                          int     10h             ;
 33828                                  
 33829                                          mov     dx,_$MenuPrmpt
 33830                                          call    print           ;
 33831                                          call    select_item     ; make a selection, return # in BX
 33832                                          mov     dx,crlfm	
 33833                                          call    print           ;
 33834                                          push    word [bDisableUI]
 33835                                          or      byte [bDisableUI],1
 33836                                          call    show_status     ; clear the status line now
 33837                                          pop     word [bDisableUI]
 33838                                  
 33839                                  ;   Now begins the "re-organization" process...
 33840                                  
 33841                                  menu_autoselect:
 33842                                          cmp     bx,-1           ; clean boot requested?
 33843                                          jne	short normal_boot ; no
 33844                                          call    disable_autoexec; basically, add a /D to the command.com line
 33845                                  menu_abort:
 33846                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33847                                          jmp	menu_exit	;
 33848                                  
 33849                                  normal_boot:
 33850                                          cmp     bx,-2           ; back to top-level menu?
 33851                                          jne	short not_topmenu ; no
 33852                                          mov     cx,[count]      ; yes, start all over
 33853                                          sub     si,si           ;
 33854                                          jmp     menu_search
 33855                                  
 33856                                  not_topmenu:
 33857                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33858                                          jne	short not_submenu
 33859                                          add     bx,bx           ;
 33860                                          mov     di,[aoffBlockName+bx]
 33861                                          call    srch_block      ; THIS CANNOT FAIL!
 33862                                          mov     si,di           ;
 33863                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33864                                          jmp     menu_found
 33865                                  
 33866                                  not_submenu:
 33867                                          add     bx,bx           ; get BX -> name of selected block
 33868                                          mov     bx,[aoffBlockName+bx]
 33869                                  
 33870                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33871                                  ;   the offset relative to ES of the block name to be processed (along with
 33872                                  ;   all the "common" lines of course)
 33873                                  
 33874                                  no_selection:
 33875                                          mov     [offDefBlock],bx; save selection
 33876                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33877                                          sub     si,si           ;
 33878                                          push    ds              ;
 33879                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33880                                          sub     di,di           ;
 33881                                  
 33882                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33883                                  ;
 33884                                  ;   Work our way through the config.sys image again, this time copying
 33885                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33886                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33887                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33888                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33889                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33890                                  ;
 33891                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33892                                  ;   stack we're running on, then we should check it inside copy_block
 33893                                  
 33894                                  copyblock_loop:
 33895                                          push    bx              ; save selected block name
 33896                                          call    copy_block      ; process (named or common) block
 33897                                          pop     bx              ;
 33898                                          jc	short move_config ; hit eof
 33899                                  
 33900                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33901                                  
 33902                                  copyblock_begin:
 33903                                          push    ax              ;
 33904                                          push    cx              ;
 33905                                          push    si              ;
 33906                                          push    di              ; always do "common" blocks
 33907                                          mov     di,szCommon
 33908                                          push    ds              ;
 33909                                          push    cs              ;
 33910                                          pop     ds              ;
 33911                                          call    comp_names      ;
 33912                                          pop     ds              ;
 33913                                          pop     di              ;
 33914                                          pop     si              ;
 33915                                          pop     cx              ;
 33916                                          pop     ax              ;
 33917                                          je	short copyblock_check
 33918                                          or      bx,bx           ; is there a block name to check?
 33919                                          jz	short copyblock_skip ; no
 33920                                          push    di              ;
 33921                                          mov     di,bx           ; check block against given block name
 33922                                          push    ds              ;
 33923                                          push    es              ;
 33924                                          pop     ds              ;
 33925                                          call    comp_names      ; is this the block we really want to do?
 33926                                          pop     ds              ;
 33927                                          pop     di              ;
 33928                                  copyblock_check:
 33929                                          jc	short move_config ; hit eof
 33930                                          jne	short copyblock_skip  ;
 33931                                          call    skip_opt_line   ;
 33932                                          jmp	short copyblock_loop 
 33933                                  
 33934                                  copyblock_skip:                 ;
 33935                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33936                                          call    get_char        ;
 33937                                          jc	short move_config ; hit eof
 33938                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33939                                          cmp     al,CONFIG_BEGIN ;
 33940                                          je	short copyblock_begin
 33941                                          jmp     short copyblock_skip ; anything else is just skipped
 33942                                  ;
 33943                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33944                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33945                                  ;   copy the new config.sys image to "confbot"
 33946                                  ;
 33947                                  move_config:
 33948                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33949                                          push    cx              ;
 33950                                  ;
 33951                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33952                                  ;   since the configuration name only currently exists in the "confbot" area
 33953                                  ;
 33954                                   	;mov	cx,7
 33955                                  	mov     cx,szMenu-szBoot-1
 33956                                          mov     si,szBoot	; first copy the CONFIG= part
 33957                                          inc     di              ; skip a byte, in case absolutely nothing
 33958                                                                  ; was copied to the workspace, because we always
 33959                                                                  ; zero the first byte of the workspace (below)
 33960                                  copy_boot: 
 33961                                  	;lods    byte ptr cs:[si];
 33962                                          cs
 33963                                  	lodsb
 33964                                  	mov     [di],al         ;
 33965                                          inc     di              ;
 33966                                          loop    copy_boot       ;
 33967                                  
 33968                                          push    es              ; then copy the configuration name
 33969                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 33970                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 33971                                          or      si,si           ; valid?
 33972                                          jnz	short l1	; yes
 33973                                          push    cs              ;
 33974                                          pop     es              ;
 33975                                          mov     si,szCommon
 33976                                  l1:     mov     al,[es:si]      ;
 33977                                          call    any_delim       ;
 33978                                          je	short l2	;
 33979                                          mov     [di],al         ;
 33980                                          inc     si              ;
 33981                                          inc     di              ;
 33982                                          loop    l1              ;
 33983                                  l2:     mov     byte [di],lf	; terminate the configuration string
 33984                                          pop     es              ;
 33985                                  
 33986                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 33987                                  
 33988                                          sub     di,di           ;
 33989                                          mov     [cs:config_envlen],di
 33990                                          sub     si,si           ;
 33991                                          pop     cx              ; recover the size of "config_wrkseg"
 33992                                  
 33993                                          push    cx              ;
 33994                                          rep     movsb           ; moved!
 33995                                          pop     cx              ;
 33996                                          mov     ax,ds           ;
 33997                                          pop     ds              ;
 33998                                  
 33999                                  ;   Now that the config_wrkseg is available once again, we shall
 34000                                  ;   use it to create an environment. The first thing to go in will be
 34001                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 34002                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 34003                                  ;   is empty.
 34004                                  
 34005                                          push    es              ;
 34006                                          mov     es,ax           ;
 34007                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 34008                                          mov     byte [es:0],0	;empty the environment block
 34009                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 34010                                          pop     es
 34011                                  
 34012                                  ;   Before returning, restore the default video page setting but do NOT
 34013                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 34014                                  ;   displayed on a different page, then it's because we don't want to see
 34015                                  ;   all the device driver/TSR goop (which goes to the default page)
 34016                                  
 34017                                  menu_done:
 34018                                          cmp     byte [bMenuPage],0
 34019                                          je	short menu_exit	;
 34020                                          push    es              ;
 34021                                          mov     ax,40h          ;
 34022                                          mov     es,ax           ;
 34023                                          mov     ax,[wCRTStart]  ;
 34024                                          mov     [es:004Eh],ax   ;
 34025                                          mov     al,[bCRTPage]   ;
 34026                                          mov     [es:0062h],al   ;
 34027                                          pop     es              ;
 34028                                  menu_exit:
 34029                                          mov     [count],cx      ; set new counts
 34030                                          mov     [org_count],cx  ;
 34031                                          sub     si,si           ; always return ES:SI pointing to config.sys
 34032                                          retn
 34033                                  
 34034                                  ;----------------------------------------------------------------------------
 34035                                  ;
 34036                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 34037                                  ;
 34038                                  ;   INPUT
 34039                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 34040                                  ;
 34041                                  ;   OUTPUT
 34042                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 34043                                  ;       carry set if error (eg, missing =); clear otherwise
 34044                                  ;
 34045                                  ;   OTHER REGS USED
 34046                                  ;       None
 34047                                  ;
 34048                                  ;   NOTES
 34049                                  ;       None
 34050                                  ;
 34051                                  ;   HISTORY
 34052                                  ;       Created 29-Mar-1992 by JeffPar
 34053                                  ;
 34054                                  ;----------------------------------------------------------------------------
 34055                                  
 34056                                  copy_envvar:
 34057                                          push    cx              ;
 34058                                          push    si              ;
 34059                                          push    ds              ;
 34060                                          push    es              ;
 34061                                          push    es              ;
 34062                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34063                                          pop     ds                 ; DS:SI to point to envvar
 34064                                  
 34065                                  ;   Have to calculate the length of the variable name (and if we hit
 34066                                  ;   the end of the line before we hit '=', then it's curtains for this
 34067                                  ;   config.sys line)
 34068                                  ;
 34069                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34070                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34071                                  ;   menu block existed (in order to prevent the creation of an environment)
 34072                                  
 34073                                          sub     cx,cx           ;
 34074                                  copy_varlen:                    ;
 34075                                          lodsb                   ;
 34076                                          or      al,al           ; NULL?
 34077                                          stc                     ;
 34078                                          jz	short copy_envexit ; yes, abort
 34079                                          cmp     al,cr          ;
 34080                                          stc                     ;
 34081                                          je	short copy_envexit
 34082                                          cmp     al,lf          ;
 34083                                          stc                     ;
 34084                                          je	short copy_envexit
 34085                                          inc     cx              ;
 34086                                          cmp     al,'='          ;
 34087                                          jne	short copy_varlen
 34088                                          mov     al,0            ;
 34089                                          mov     ah,[si]         ; save char after '='
 34090                                          sub     si,cx           ; back up to given varname
 34091                                          dec     cx              ; CX == # of bytes in varname
 34092                                          sub     di,di           ; start looking for DS:SI at ES:0
 34093                                  copy_varsrch:
 34094                                          cmp     byte [es:di],al
 34095                                          je	short copy_envprep ; search failed, just copy var
 34096                                          mov     bx,di           ; ES:BX -> start of this varname
 34097                                          push    cx              ;
 34098                                          push    si              ;
 34099                                          repe    cmpsb           ;
 34100                                          pop     si              ;
 34101                                          pop     cx              ;
 34102                                          jne	short copy_varnext ; no match, skip to next varname
 34103                                          cmp     byte [es:di],'='
 34104                                          jne     short copy_varnext ; no match, there's more characters
 34105                                  
 34106                                  ;   Previous occurrence of variable has been found; determine the
 34107                                  ;   entire length and then destroy it
 34108                                  
 34109                                          mov     cx,-1           ;
 34110                                          repne   scasb           ; guaranteed to get null (since we put it there)
 34111                                          push    si              ;
 34112                                          mov     si,di           ;
 34113                                          mov     di,bx           ;
 34114                                          mov     cx,[cs:config_envlen]
 34115                                          sub     cx,si           ; destroy variable now
 34116                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34117                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 34118                                  
 34119                                  	rep	; 0F3h
 34120                                  	es	; 26h
 34121                                  	movsb	; 0A4h
 34122                                  
 34123                                  	pop     si
 34124                                  copy_envprep:
 34125                                          cmp     ah,cr          ; if there is nothing after the '='
 34126                                          je	short copy_envdel ; then just exit with variable deleted
 34127                                          cmp     ah,lf           ;
 34128                                          je	short copy_envdel
 34129                                          jmp     short copy_envloop
 34130                                  
 34131                                  copy_varnext:                   ;
 34132                                          push    cx              ;
 34133                                          mov     cx,-1           ;
 34134                                          repne   scasb           ;
 34135                                          pop     cx              ;
 34136                                          jmp	short copy_varsrch
 34137                                  
 34138                                  copy_envloop:                   ;
 34139                                          lodsb                   ;
 34140                                          cmp     al,cr           ;
 34141                                          je	short copy_envdone
 34142                                          cmp     al,lf           ;
 34143                                          je	short copy_envdone
 34144                                          stosb                   ;
 34145                                          jmp     short copy_envloop
 34146                                  
 34147                                  copy_envdone:                   ;
 34148                                          sub     al,al           ; do SUB to clear carry as well
 34149                                          stosb                   ; always null-terminate these puppies
 34150                                  copy_envdel:                    ;
 34151                                          mov     [es:di],al      ; and stick another null to terminate the env.
 34152                                          mov     [cs:config_envlen],di
 34153                                  
 34154                                  copy_envexit:                   ;
 34155                                          pop     es              ;
 34156                                          pop     ds              ;
 34157                                          pop     si              ;
 34158                                          pop     cx              ;
 34159                                  
 34160                                  copy_done:	; 18/12/2022
 34161                                          retn
 34162                                  
 34163                                  ;----------------------------------------------------------------------------
 34164                                  ;
 34165                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34166                                  ;
 34167                                  ;   INPUT
 34168                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34169                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34170                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34171                                  ;             config.sys image) where the current block is to be copied
 34172                                  ;
 34173                                  ;   OUTPUT
 34174                                  ;       Same as above
 34175                                  ;       AL also equals the last character read from the organized image
 34176                                  ;
 34177                                  ;   OTHER REGS USED
 34178                                  ;       All
 34179                                  ;
 34180                                  ;   NOTES
 34181                                  ;       None
 34182                                  ;
 34183                                  ;   HISTORY
 34184                                  ;       Created 16-Mar-1992 by JeffPar
 34185                                  ;
 34186                                  ;----------------------------------------------------------------------------
 34187                                  
 34188                                  copy_block:
 34189                                          call    get_char        ; check for include
 34190                                          jc	short copy_done	;
 34191                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34192                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34193                                          je	short copy_done ;
 34194                                  
 34195                                          cmp     al,CONFIG_INCLUDE ; 'J'
 34196                                          mov     al,ah           ; AL == the original line code
 34197                                          jne	short copy_line	; not an "include" line
 34198                                  
 34199                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34200                                  ;   never try to include the block again (no infinite include loops please),
 34201                                  ;   then search for the named block and call copy_block again.
 34202                                  
 34203                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 34204                                          push    di              ;
 34205                                  
 34206                                          mov     di,szMenu
 34207                                          call    comp_names_safe ; don't allow INCLUDE MENU
 34208                                          je	short copy_skip	;
 34209                                  
 34210                                          mov     di,szCommon
 34211                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34212                                          je	short copy_skip	;
 34213                                  
 34214                                          mov     di,si           ; try to find the block
 34215                                          call    srch_block      ;
 34216                                          mov     dx,di           ;
 34217                                          pop     di              ;
 34218                                          jne	short copy_error ; no such block
 34219                                          push    cx              ;
 34220                                          mov     cx,bx           ;
 34221                                          push    si              ;
 34222                                          dec     dx              ;
 34223                                          mov     si,dx           ;
 34224                                          call    skip_line       ; skip the rest of the "block name" line
 34225                                          call    copy_block      ; and copy in the rest of that block
 34226                                          pop     si              ;
 34227                                          pop     cx              ;
 34228                                          sub     al,al           ; force skip_opt_line to skip...
 34229                                          jmp     short copy_nextline
 34230                                  
 34231                                  copy_skip:
 34232                                          pop     di
 34233                                  copy_error:
 34234                                          clc                     ;
 34235                                          call    print_error     ; note that carry is clear, no pause
 34236                                          jmp     short copy_nextline
 34237                                  
 34238                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34239                                  
 34240                                  copy_line:
 34241                                          mov     [di],al         ;
 34242                                          inc     di              ;
 34243                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34244                                          jb	short copy_nextline ; no
 34245                                          cmp     byte [cs:config_multi],0
 34246                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34247                                          call    get_linenum	; BX == line # of line @ES:SI
 34248                                          mov     [di],bx         ; stash it immediately following the line code
 34249                                          inc     di              ;
 34250                                          inc     di              ;
 34251                                          jmp     short copy_next ;
 34252                                  copy_loop:                      ;
 34253                                          call    get_char        ;
 34254                                          jc	short copy_done ; end of file
 34255                                          mov     [di],al         ;
 34256                                          inc     di              ;
 34257                                  copy_next:
 34258                                          cmp     al,lf ; 0Ah	; done with line?
 34259                                          jne	short copy_loop	; nope
 34260                                  
 34261                                  copy_nextline:
 34262                                          call    skip_opt_line   ;
 34263                                          jmp     short copy_block
 34264                                  
 34265                                  	; 18/12/2022
 34266                                  ;copy_done:
 34267                                          ;retn
 34268                                  
 34269                                  ;----------------------------------------------------------------------------
 34270                                  ;
 34271                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34272                                  ;
 34273                                  ;   INPUT
 34274                                  ;    ES:SI -> some line in the config.sys memory image
 34275                                  ;
 34276                                  ;   OUTPUT
 34277                                  ;       BX == line # (relative to 1)
 34278                                  ;
 34279                                  ;   OTHER REGS USED
 34280                                  ;       DX
 34281                                  ;
 34282                                  ;   NOTES
 34283                                  ;       None
 34284                                  ;
 34285                                  ;   HISTORY
 34286                                  ;       Created 16-Mar-1992 by JeffPar
 34287                                  ;
 34288                                  ;----------------------------------------------------------------------------
 34289                                  
 34290                                  get_linenum:
 34291                                          push    ax              ;
 34292                                          sub     bx,bx           ; BX == line # (to be returned)
 34293                                          push    cx              ;
 34294                                          mov     dx,si           ; DX == the offset we're looking for
 34295                                          push    si              ;
 34296                                          mov     cx,[cs:count]   ;
 34297                                          sub     si,si           ; prepare to scan entire file
 34298                                  get_linenum_loop:               ;
 34299                                          call    skip_line       ;
 34300                                          jc	short get_linenum_done
 34301                                          inc     bx              ;
 34302                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34303                                          jb	short get_linenum_loop ; no
 34304                                  get_linenum_done:               ;
 34305                                          pop     si              ;
 34306                                          pop     cx              ;
 34307                                          pop     ax              ;
 34308                                          retn
 34309                                  
 34310                                  ;----------------------------------------------------------------------------
 34311                                  ;
 34312                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34313                                  ;
 34314                                  ;   INPUT
 34315                                  ;       ES -> config.sys image
 34316                                  ;    ES:DI -> block name to find
 34317                                  ;
 34318                                  ;   OUTPUT
 34319                                  ;       ZF flag set, if found
 34320                                  ;    ES:DI -> just past the name in the block heading, if found
 34321                                  ;       BX == # bytes remaining from that point, if found
 34322                                  ;
 34323                                  ;   OTHER REGS USED
 34324                                  ;       None
 34325                                  ;
 34326                                  ;   NOTES
 34327                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34328                                  ;       config.sys image, not merely the remaining portion, and that it
 34329                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34330                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34331                                  ;
 34332                                  ;   HISTORY
 34333                                  ;       Created 16-Mar-1992 by JeffPar
 34334                                  ;
 34335                                  ;----------------------------------------------------------------------------
 34336                                  
 34337                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34338                                          push    ax              ;
 34339                                          push    cx              ;
 34340                                          mov     cx,[cs:count]   ;
 34341                                          push    si              ;
 34342                                          sub     si,si           ;
 34343                                          push    ds              ;
 34344                                          push    es              ;
 34345                                          pop     ds              ;
 34346                                          call    find_block      ;
 34347                                          mov     di,si           ;
 34348                                          mov     bx,cx           ;
 34349                                          pop     ds              ;
 34350                                          pop     si              ;
 34351                                          pop     cx              ;
 34352                                          pop     ax              ;
 34353                                  find_exit: ; 16/04/2019
 34354                                          retn			;
 34355                                  
 34356                                  ;----------------------------------------------------------------------------
 34357                                  ;
 34358                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34359                                  ;
 34360                                  ;   INPUT
 34361                                  ;    DS:DI -> block name to find
 34362                                  ;    ES:SI -> remainder of config.sys image
 34363                                  ;       CX == remaining size of config.sys image
 34364                                  ;
 34365                                  ;   OUTPUT
 34366                                  ;       ZF flag set, if found (also, CF set if EOF)
 34367                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34368                                  ;       CX == # bytes remaining from that point
 34369                                  ;
 34370                                  ;   OTHER REGS USED
 34371                                  ;       AX
 34372                                  ;
 34373                                  ;   NOTES
 34374                                  ;       This differs from "srch_block" in that it searches only the
 34375                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34376                                  ;       pointing to where the search left off, and that it takes a pointer
 34377                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34378                                  ;
 34379                                  ;   HISTORY
 34380                                  ;       Created 16-Mar-1992 by JeffPar
 34381                                  ;
 34382                                  ;----------------------------------------------------------------------------
 34383                                  
 34384                                  find_block:
 34385                                          call    get_char        ; get line code
 34386                                          jc	short find_exit	; end of file
 34387                                          and     al,~CONFIG_OPTION_QUERY
 34388                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34389                                          je	short check_line ; no
 34390                                          cmp     al,CONFIG_INCLUDE
 34391                                          jne	short next_line	;
 34392                                          or	byte [cs:config_multi],1
 34393                                          jmp     short next_line ;
 34394                                  check_line:
 34395                                          or      byte [cs:config_multi],1
 34396                                          call    comp_names      ; compare block names
 34397                                          jbe	short find_exit	; end of file, or names matched
 34398                                  next_line:
 34399                                          call    skip_opt_line   ; no, so skip to next line
 34400                                          jmp	short find_block  ;
 34401                                  ;find_exit:
 34402                                  ;	retn
 34403                                  
 34404                                  ;----------------------------------------------------------------------------
 34405                                  ;
 34406                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34407                                  ;
 34408                                  ;   INPUT
 34409                                  ;    DS:DI -> keyword to compare
 34410                                  ;    ES:SI -> position in config.sys
 34411                                  ;       CX == remaining bytes in config.sys
 34412                                  ;
 34413                                  ;   OUTPUT
 34414                                  ;       ZF flag set, if match (also, CF set if EOF)
 34415                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34416                                  ;       CX == # bytes remaining from that point
 34417                                  ;
 34418                                  ;   OTHER REGS USED
 34419                                  ;       AX
 34420                                  ;
 34421                                  ;   NOTES
 34422                                  ;       None
 34423                                  ;
 34424                                  ;   HISTORY
 34425                                  ;       Created 16-Mar-1992 by JeffPar
 34426                                  ;
 34427                                  ;----------------------------------------------------------------------------
 34428                                  
 34429                                  comp_names:
 34430                                          push    di              ;
 34431                                  comp_loop:                      ;
 34432                                          call    get_char        ;
 34433                                          jc	short comp_exit	;
 34434                                          call    any_delim       ; is next character a delimiter?
 34435                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34436                                          je	short comp_almost ; yes, it *could* be a match
 34437                                          inc     di              ;
 34438                                          and     ax,~2020h ; 0DFDFh 
 34439                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34440                                          cmp     al,ah           ; match?
 34441                                          je	short comp_loop ; yes, keep looking at the characters
 34442                                          clc                     ; prevent erroneous eof indication: clear carry
 34443                                  comp_exit:                      ;
 34444                                          pop     di              ;
 34445                                          retn			;
 34446                                  comp_almost:                    ;
 34447                                          xchg    al,ah           ; we don't know for sure if it's a match
 34448                                          call    any_delim       ; until we verify that the second string has
 34449                                          xchg    al,ah           ; been exhausted also...
 34450                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34451                                  
 34452                                  ;----------------------------------------------------------------------------
 34453                                  
 34454                                  comp_names_safe:
 34455                                          push    ax
 34456                                          push    cx
 34457                                          push	si
 34458                                          push    ds
 34459                                          push    cs
 34460                                          pop     ds
 34461                                          call    comp_names
 34462                                          pop     ds
 34463                                  	pop	si
 34464                                          pop     cx
 34465                                          pop     ax
 34466                                          retn
 34467                                  
 34468                                  ;----------------------------------------------------------------------------
 34469                                  ;
 34470                                  ;   print_item:  display menu item #BL
 34471                                  ;
 34472                                  ;   INPUT
 34473                                  ;       BL == menu item # to display
 34474                                  ;
 34475                                  ;   OUTPUT
 34476                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34477                                  ;
 34478                                  ;   OTHER REGS USED
 34479                                  ;       None
 34480                                  ;
 34481                                  ;   NOTES
 34482                                  ;       This function saves/restores the current cursor position, so you
 34483                                  ;       needn't worry about it.
 34484                                  ;
 34485                                  ;   HISTORY
 34486                                  ;       Created 16-Mar-1992 by JeffPar
 34487                                  ;
 34488                                  ;----------------------------------------------------------------------------
 34489                                  
 34490                                  print_item:		; prints menu item #BL (1 to N)
 34491                                          push    ax              ;
 34492                                          push    bx              ;
 34493                                          push    cx              ;
 34494                                          push    dx              ;
 34495                                          push    si              ;
 34496                                          mov     ah,03h          ; get cursor position
 34497                                          mov     bh,[bMenuPage]  ; always page zero
 34498                                          int     10h             ; DH/DL = row/column
 34499                                          push    dx              ; save it
 34500                                          mov     ah,02h          ; set cursor position
 34501                                          mov     dh,bl           ;
 34502                                          add     dh,3            ;
 34503                                          mov     dl,5            ;
 34504                                          int     10h             ; set cursor position for correct row/col
 34505                                          mov     al,bl           ;
 34506                                          add     al,'0'          ; convert menu item # to ASCII digit
 34507                                          mov     ah,[bMenuColor] ; normal attribute
 34508                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34509                                          jne	short print_other ; no
 34510                                          or      ah,70h          ; yes, set bgnd color to white
 34511                                          mov     ch,ah           ;
 34512                                          mov     cl,4            ;
 34513                                          rol     ch,cl           ;
 34514                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34515                                          jne	short print_other ; no
 34516                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34517                                  print_other:                    ;
 34518                                          mov     bh,0            ;
 34519                                          add     bx,bx           ;
 34520                                          mov     di,[aoffBlockDesc+bx]
 34521                                          mov     bl,ah           ; put the attribute in the correct register now
 34522                                          mov     bh,[bMenuPage]  ; get correct video page #
 34523                                          mov     ah,09h          ; write char/attr
 34524                                          mov     cx,1            ;
 34525                                          int     10h             ;
 34526                                          inc     dl              ; increment column
 34527                                          mov     ah,02h          ;
 34528                                          int     10h             ;
 34529                                          ;mov	ax,0900h+'.'    ;
 34530                                          mov	ax,092Eh
 34531                                  	int     10h             ; display '.'
 34532                                          inc     dl              ; increment column
 34533                                          mov     ah,02h          ;
 34534                                          int     10h             ;
 34535                                          ;mov	ax,0900h+' '    ;
 34536                                          mov	ax,0920h
 34537                                  	int     10h             ; display ' '
 34538                                          inc     dl              ; increment column
 34539                                          mov     ah,02h          ;
 34540                                          int     10h             ;
 34541                                          push    es              ;
 34542                                  print_loop:                     ;
 34543                                          mov     al,[es:di]	; get a character of the description
 34544                                          inc     di              ;
 34545                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34546                                          jne	short print_nontab ;
 34547                                          mov     al,' '          ;
 34548                                  print_nontab:                   ;
 34549                                          cmp     al,' '          ;
 34550                                          jb	short print_done ; stop at the 1st character < space
 34551                                          cmp     al,'$'          ;
 34552                                          je	short print_done ; also stop on $
 34553                                          mov     ah,09h          ; display function #
 34554                                          int     10h             ;
 34555                                          inc     dl              ; increment column
 34556                                          cmp     dl,78           ; far enough?
 34557                                          jae	short print_done ; yes
 34558                                          mov     ah,02h          ;
 34559                                          int     10h             ;
 34560                                          jmp     print_loop      ;
 34561                                  print_done:                     ;
 34562                                          pop     es              ;
 34563                                          pop     dx              ;
 34564                                          mov     ah,02h          ;
 34565                                          int     10h             ; restore previous row/col
 34566                                          pop     si              ;
 34567                                          pop     dx              ;
 34568                                          pop     cx              ;
 34569                                          pop     bx              ;
 34570                                          pop     ax              ;
 34571                                          retn			;
 34572                                  
 34573                                  ;----------------------------------------------------------------------------
 34574                                  ;
 34575                                  ;   select_item:  wait for user to select menu item, with time-out
 34576                                  ;
 34577                                  ;   INPUT
 34578                                  ;       None
 34579                                  ;
 34580                                  ;   OUTPUT
 34581                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34582                                  ;       Selected menu item highlighted
 34583                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34584                                  ;
 34585                                  ;   OTHER REGS USED
 34586                                  ;       None
 34587                                  ;
 34588                                  ;   NOTES
 34589                                  ;       None
 34590                                  ;
 34591                                  ;   HISTORY
 34592                                  ;       Created 16-Mar-1992 by JeffPar
 34593                                  ;
 34594                                  ;----------------------------------------------------------------------------
 34595                                  
 34596                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34597                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34598                                          mov     al,bl           ;
 34599                                          call    disp_num        ;
 34600                                          call    show_status     ; display current interactive status
 34601                                          cmp     byte [secTimeOut],-1
 34602                                          je	short input_key	; no time-out, just go to input
 34603                                          mov     ah,GET_TIME ; 2Ch
 34604                                          int     21h             ;
 34605                                          mov     bh,dh           ; BH = initial # of seconds
 34606                                  check_time:
 34607                                          mov     al,[secTimeOut] ;
 34608                                          sub     al,[secElapsed] ;
 34609                                          jae	short show_time	;
 34610                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34611                                          mov     byte [secElapsed],0
 34612                                          jmp	select_done	; time's up!
 34613                                  show_time:
 34614                                          push    bx              ;
 34615                                          mov     bl,al           ; save # in BL
 34616                                          mov     bh,[bMenuPage]  ;
 34617                                          mov     ah,03h          ; get cursor position
 34618                                          int     10h             ;
 34619                                          push    dx              ;
 34620                                  	add	dl,8		; move cursor to the right
 34621                                          mov     ah,02h          ; set cursor position
 34622                                          int     10h             ;
 34623                                          mov     dx,_$TimeOut
 34624                                          call    print           ; print the "Time remaining: " prompt
 34625                                          mov     al,bl           ; recover # from BL
 34626                                          cbw                     ; this works because AL is always <= 90
 34627                                          mov     cl,10           ;
 34628                                          div     cl              ; AL = tens digit, AH = ones digit
 34629                                          mov     cl,ah           ;
 34630                                          add     al,'0'          ;
 34631                                          mov     ah,0Eh          ;
 34632                                          int     10h             ; write TTY tens digit
 34633                                          mov     al,cl           ;
 34634                                          add     al,'0'          ;
 34635                                          mov     ah,0Eh          ;
 34636                                          int     10h             ; write TTY ones digit
 34637                                          pop     dx
 34638                                          mov     ah,02h          ; set cursor position back to where it was
 34639                                          int     10h             ;
 34640                                          pop     bx              ;
 34641                                  input_key:
 34642                                          mov     ah,RAW_CON_IO ; 6
 34643                                          mov     dl,0FFh         ; input request
 34644                                          int     21h             ;
 34645                                          jnz	short got_key	;
 34646                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34647                                          je	short input_key	; no, just go back to input
 34648                                          mov     ah,GET_TIME     ;
 34649                                          int     21h             ; DH = seconds
 34650                                          mov     ah,dh           ;
 34651                                          sub     dh,bh           ; should generally be zero or one
 34652                                          mov     bh,ah           ;
 34653                                          jnc	short got_time	;
 34654                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34655                                  got_time:
 34656                                          or      dh,dh           ; any change?
 34657                                          jz	short input_key	; no
 34658                                          add     [secElapsed],dh ;
 34659                                          jmp	short check_time ;
 34660                                  got_key:
 34661                                          push    ax              ;
 34662                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34663                                          xchg    [secTimeOut],ax
 34664                                          cmp     al,-1           ; was time-out already disabled?
 34665                                          je	short timeout_disabled ; yes
 34666                                          push    bx              ; let's disable # seconds display
 34667                                          mov     ax,0A20h        ; write multiple spaces
 34668                                          mov     bx,[bMenuColor]
 34669                                          mov     cx,80           ; 80 of them, to be safe
 34670                                          int     10h             ; to completely obliterate # seconds display
 34671                                          pop     bx   		;
 34672                                  
 34673                                  timeout_disabled:
 34674                                          pop     ax              ;
 34675                                          or      al,al           ; extended key pressed?
 34676                                          jnz	short normal_key ; no
 34677                                          int     21h             ; get the next part of the key then
 34678                                          jz	short input_key	; hmmm, what happened to the second part?
 34679                                  
 34680                                          cmp     al,48h          ; up arrow?
 34681                                          jne	short not_up	; no
 34682                                          cmp     bl,1            ; are we as up as up can get?
 34683                                          jbe	short input_key	; yes, ignore it
 34684                                          dec     byte [bDefBlock] ;
 34685                                          call    print_item      ; re-print the current item
 34686                                          dec     bl              ; and then print the new current item
 34687                                          jmp     short print1
 34688                                  not_up:
 34689                                          cmp     al,50h          ; down arrow?
 34690                                          jne	short not_down	; no
 34691                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34692                                          jae	short to_input_key ; yes, ignore it
 34693                                          inc     byte [bDefBlock] ;
 34694                                          call    print_item      ; re-print the current item
 34695                                          inc     bx              ; and then print the new current item
 34696                                  print1: 
 34697                                  	mov     al,bl           ;
 34698                                  print2: 
 34699                                  	call    print_item      ;
 34700                                          call    disp_num        ;
 34701                                  to_input_key:
 34702                                          jmp     input_key       ;
 34703                                  not_down:
 34704                                          test    byte [bDisableUI],1
 34705                                          jnz	short to_input_key ; don't allow F8 or F5
 34706                                          cmp     al,42h          ; F8 function key?
 34707                                          jne	short not_f8	; no
 34708                                          xor     byte [bQueryOpt],1
 34709                                          call    show_status     ;
 34710                                          jmp     input_key	;
 34711                                  not_f8:
 34712                                          cmp     al,3Fh          ; F5 function key?
 34713                                          jne	short to_input_key ; no
 34714                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34715                                          mov     al,' '          ; don't want to display anything really;
 34716                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34717                                  
 34718                                  normal_key:
 34719                                          cmp     al,0Dh          ; Enter?
 34720                                          je	short select_done ; yes
 34721                                          cmp     al,08h          ; backspace?
 34722                                          jne	short not_backspace ; no
 34723                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34724                                          retn			;
 34725                                  not_backspace:
 34726                                          sub     al,'0'          ; is greater than '0'?
 34727                                          jbe	short to_input_key ; no
 34728                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34729                                          ja	short to_input_key ; no
 34730                                          mov	[bDefBlock],al  ;
 34731                                          call    print_item      ; redisplay the current selection
 34732                                          mov     bl,al           ; set new selection
 34733                                          jmp	short print2
 34734                                  
 34735                                  select_done:
 34736                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34737                                          mov     al,bl           ;
 34738                                          add     al,'0'          ; convert it into a digit, then display it
 34739                                  
 34740                                  	; fall into disp_input
 34741                                  
 34742                                  ; 16/04/2019 - Retro DOS v4.0
 34743                                  
 34744                                  ;----------------------------------------------------------------------------
 34745                                  ;
 34746                                  ;   disp_input:  display a single character + cr/lf
 34747                                  ;
 34748                                  ;   INPUT
 34749                                  ;       AL == character to display
 34750                                  ;
 34751                                  ;   OUTPUT
 34752                                  ;       None
 34753                                  ;
 34754                                  ;   OTHER REGS USED
 34755                                  ;       None
 34756                                  ;
 34757                                  ;   NOTES
 34758                                  ;       This function is used not only for the menu input selection but
 34759                                  ;       also for the interactive line prompting (the y/n/a thing).
 34760                                  ;
 34761                                  ;   HISTORY
 34762                                  ;       Created 16-Mar-1992 by JeffPar
 34763                                  ;
 34764                                  ;----------------------------------------------------------------------------
 34765                                  
 34766                                  disp_input:
 34767                                          push    ax
 34768                                          cmp     al,' '
 34769                                          jae	short disp_ok
 34770                                          mov     al,' '
 34771                                  disp_ok:
 34772                                          mov     dl,al
 34773                                          mov     ah,STD_CON_OUTPUT ; 2
 34774                                          int     21h
 34775                                          mov     dx,crlfm
 34776                                          call    print
 34777                                          pop     ax
 34778                                          retn
 34779                                  
 34780                                  ;----------------------------------------------------------------------------
 34781                                  
 34782                                  disp_num:
 34783                                          push    bx
 34784                                          add     al,'0'
 34785                                          mov     ah,0Ah
 34786                                          mov     bx,[bMenuColor]
 34787                                          mov     cx,1
 34788                                          int     10h
 34789                                          pop     bx
 34790                                          retn
 34791                                  
 34792                                  ;----------------------------------------------------------------------------
 34793                                  ;
 34794                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34795                                  ;
 34796                                  ;   INPUT
 34797                                  ;       None
 34798                                  ;
 34799                                  ;   OUTPUT
 34800                                  ;       None
 34801                                  ;
 34802                                  ;   OTHER REGS USED
 34803                                  ;       None
 34804                                  ;
 34805                                  ;   NOTES
 34806                                  ;       None
 34807                                  ;
 34808                                  ;   HISTORY
 34809                                  ;       Created 16-Mar-1992 by JeffPar
 34810                                  ;
 34811                                  ;----------------------------------------------------------------------------
 34812                                  
 34813                                  show_status:
 34814                                          push    bx              ; BL = video page #
 34815                                          mov     bx,[bMenuColor]
 34816                                          mov     ah,03h          ; get cursor position
 34817                                          int     10h             ;
 34818                                          push    dx              ; save it
 34819                                          mov     ah,02h          ; set cursor position
 34820                                          mov     dx,[bLastCol]   ; set correct row/col
 34821                                          test    byte [bDisableUI],1
 34822                                          jz	short show_onoff ; just show on/off
 34823                                          mov     dl,0            ;
 34824                                          int     10h             ;
 34825                                          mov     ax,0A20h        ; write multiple spaces
 34826                                          mov     cx,80           ; 80 of them, to be exact
 34827                                          int     10h             ; to obliterate the status line
 34828                                          jmp     short show_done ;
 34829                                  show_onoff: 
 34830                                          int     10h
 34831                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34832                                  		; AL = character, BH = display page - alpha mode
 34833                                  		; BL = color of character (graphics mode, PCjr only)
 34834                                  		; CX = number of times to write character
 34835                                  
 34836                                          mov     al,[_$NO]	; assume OFF
 34837                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34838                                          jne	short show_noton ; no
 34839                                          mov     al,[_$YES]	; yes
 34840                                  show_noton:                     ;
 34841                                          mov     ah,0Eh          ; write TTY
 34842                                          int     10h             ;
 34843                                  show_done:                      ;
 34844                                          pop     dx              ;
 34845                                          mov     ah,02h          ;
 34846                                          int     10h             ; restore original cursor position
 34847                                          pop     bx              ;
 34848                                          retn			;
 34849                                  
 34850                                  ; 16/04/2019 - Retro DOS v4.0
 34851                                  
 34852                                  ;----------------------------------------------------------------------------
 34853                                  ;
 34854                                  ;   skip_token: advances ES:SI/CX past the current token
 34855                                  ;
 34856                                  ;   INPUT
 34857                                  ;    ES:SI -> position in config.sys
 34858                                  ;       CX == remaining bytes in config.sys
 34859                                  ;
 34860                                  ;   OUTPUT
 34861                                  ;       CF set if EOL/EOF hit
 34862                                  ;       AL == 1st char of delimiter
 34863                                  ;    ES:SI -> just past the delimiter
 34864                                  ;       CX == # bytes remaining from that point
 34865                                  ;
 34866                                  ;   OTHER REGS USED
 34867                                  ;       AX
 34868                                  ;
 34869                                  ;   NOTES
 34870                                  ;       None
 34871                                  ;
 34872                                  ;   HISTORY
 34873                                  ;       Created 16-Mar-1992 by JeffPar
 34874                                  ;
 34875                                  ;----------------------------------------------------------------------------
 34876                                  
 34877                                  skip_token:
 34878                                          call    get_char
 34879                                          jc	short skip_token_done
 34880                                          call    any_delim
 34881                                          jne	short skip_token
 34882                                  skip_check_eol:
 34883                                          cmp     al,cr ; 0Dh
 34884                                          je	short skip_token_eol
 34885                                          cmp     al,lf ; 0Ah
 34886                                          je	short skip_token_eol
 34887                                          clc
 34888                                          ;jmp	short skip_token_done
 34889                                  	retn
 34890                                  skip_token_eol:
 34891                                          stc
 34892                                  skip_token_done:
 34893                                          retn
 34894                                  
 34895                                  ;----------------------------------------------------------------------------
 34896                                  ;
 34897                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34898                                  ;
 34899                                  ;   INPUT
 34900                                  ;    ES:SI -> position in config.sys
 34901                                  ;       CX == remaining bytes in config.sys
 34902                                  ;
 34903                                  ;   OUTPUT
 34904                                  ;       CF set if EOF hit
 34905                                  ;       AL == 1st char of token
 34906                                  ;    ES:SI -> just past the token
 34907                                  ;       CX == # bytes remaining from that point
 34908                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34909                                  ;
 34910                                  ;   OTHER REGS USED
 34911                                  ;       AX
 34912                                  ;
 34913                                  ;   NOTES
 34914                                  ;       None
 34915                                  ;
 34916                                  ;   HISTORY
 34917                                  ;       Created 16-Mar-1992 by JeffPar
 34918                                  ;
 34919                                  ;----------------------------------------------------------------------------
 34920                                  
 34921                                  skip_delim:       ; returns carry set if eol/eof
 34922                                          call    get_char        ;
 34923                                          lea     bx,[si-1]       ; also returns BX -> next token
 34924                                          jc	short skip_token_done ;
 34925                                          call    delim           ;
 34926                                          je	short skip_delim ;
 34927                                          jmp	short skip_check_eol  ; 13/05/2019
 34928                                  
 34929                                  ;----------------------------------------------------------------------------
 34930                                  ;
 34931                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34932                                  ;
 34933                                  ;   INPUT
 34934                                  ;       AL == last character read
 34935                                  ;    ES:SI -> position in config.sys
 34936                                  ;       CX == remaining bytes in config.sys
 34937                                  ;
 34938                                  ;   OUTPUT
 34939                                  ;       CF set if EOF hit
 34940                                  ;       AL == 1st char of new line
 34941                                  ;    ES:SI -> just past 1st char of new line
 34942                                  ;       CX == # bytes remaining from that point
 34943                                  ;
 34944                                  ;   OTHER REGS USED
 34945                                  ;       AX
 34946                                  ;
 34947                                  ;   NOTES
 34948                                  ;       In other words, the purpose here is to skip to the next line,
 34949                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34950                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34951                                  ;
 34952                                  ;   HISTORY
 34953                                  ;       Created 16-Mar-1992 by JeffPar
 34954                                  ;
 34955                                  ;----------------------------------------------------------------------------
 34956                                  
 34957                                  skip_opt_line:
 34958                                          cmp     al,lf ; 0Ah
 34959                                          je	short skip_line_done
 34960                                       
 34961                                  	; fall into skip_line
 34962                                  
 34963                                  ;----------------------------------------------------------------------------
 34964                                  ;
 34965                                  ;   skip_line: skip to the next line
 34966                                  ;
 34967                                  ;   INPUT
 34968                                  ;    ES:SI -> position in config.sys
 34969                                  ;       CX == remaining bytes in config.sys
 34970                                  ;
 34971                                  ;   OUTPUT
 34972                                  ;       CF set if EOF hit
 34973                                  ;    ES:SI -> just past 1st char of new line
 34974                                  ;       CX == # bytes remaining from that point
 34975                                  ;
 34976                                  ;   OTHER REGS USED
 34977                                  ;       AX
 34978                                  ;
 34979                                  ;   NOTES
 34980                                  ;       None
 34981                                  ;
 34982                                  ;   HISTORY
 34983                                  ;       Created 16-Mar-1992 by JeffPar
 34984                                  ;
 34985                                  ;----------------------------------------------------------------------------
 34986                                  
 34987                                  skip_line:
 34988                                          call    get_char
 34989                                          jc	short skip_line_done
 34990                                          cmp     al,lf ; 0Ah
 34991                                          jne	short skip_line
 34992                                  skip_line_done:
 34993                                  num_done:	; 18/12/2022
 34994                                          retn
 34995                                  
 34996                                  ;----------------------------------------------------------------------------
 34997                                  ;
 34998                                  ;   get_number: return binary equivalent of numeric string
 34999                                  ;
 35000                                  ;   INPUT
 35001                                  ;    ES:SI -> position in config.sys
 35002                                  ;       CX == remaining bytes in config.sys
 35003                                  ;
 35004                                  ;   OUTPUT
 35005                                  ;       AL == non-digit encountered
 35006                                  ;       BX == binary #
 35007                                  ;    ES:SI -> just past 1st non-digit
 35008                                  ;       CX == # bytes remaining from that point
 35009                                  ;
 35010                                  ;   OTHER REGS USED
 35011                                  ;       AX
 35012                                  ;
 35013                                  ;   NOTES
 35014                                  ;       None
 35015                                  ;
 35016                                  ;   HISTORY
 35017                                  ;       Created 16-Mar-1992 by JeffPar
 35018                                  ;
 35019                                  ;----------------------------------------------------------------------------
 35020                                  
 35021                                  ; 13/05/2019
 35022                                  
 35023                                  get_number:
 35024                                          sub     bx,bx           ; BX = result
 35025                                  num_loop:
 35026                                          call    get_char        ;
 35027                                          jc	short num_done	;
 35028                                          cmp     al,'0'          ; convert to value
 35029                                          jb	short num_done	; no more number
 35030                                          cmp     al,'9'          ;
 35031                                          ja	short num_done	;
 35032                                          push    ax              ;
 35033                                          mov     ax,10           ;
 35034                                          push    dx              ;
 35035                                          mul     bx              ;
 35036                                          pop     dx              ;
 35037                                          mov     bx,ax           ;
 35038                                          pop     ax              ;
 35039                                          sub     al,'0'          ;
 35040                                          cbw                     ;
 35041                                          add     bx,ax           ;
 35042                                          jmp	short num_loop	;
 35043                                  
 35044                                  	; 18/12/2022
 35045                                  ;num_done:
 35046                                          ;retn
 35047                                  
 35048                                  ;----------------------------------------------------------------------------
 35049                                  ;
 35050                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 35051                                  ;
 35052                                  ;   INPUT
 35053                                  ;    ES:SI -> position in config.sys
 35054                                  ;       CX == remaining bytes in config.sys
 35055                                  ;
 35056                                  ;   OUTPUT
 35057                                  ;       AL == next character
 35058                                  ;    ES:SI -> just past next character
 35059                                  ;       CX == # bytes remaining from that point
 35060                                  ;
 35061                                  ;   OTHER REGS USED
 35062                                  ;       AX
 35063                                  ;
 35064                                  ;   NOTES
 35065                                  ;       None
 35066                                  ;
 35067                                  ;   HISTORY
 35068                                  ;       Created 16-Mar-1992 by JeffPar
 35069                                  ;
 35070                                  ;----------------------------------------------------------------------------
 35071                                  
 35072                                  get_char:
 35073                                          sub     cx,1            ; use SUB to set carry,zero
 35074                                          jb	short get_fail	; out of data
 35075                                          ;lods	byte ptr es:[si] ;
 35076                                  	es	
 35077                                  	lodsb
 35078                                          mov     ah,al           ;
 35079                                          retn			;
 35080                                  get_fail:                       ; restore CX to zero
 35081                                          mov     cx,0            ; leave carry set, zero not set
 35082                                  nearby_ret:
 35083                                          retn
 35084                                  
 35085                                  ;----------------------------------------------------------------------------
 35086                                  ;
 35087                                  ;   query_user: ask user whether to execute current config.sys command
 35088                                  ;
 35089                                  ;   INPUT
 35090                                  ;       AL == current command code
 35091                                  ;    ES:SI -> current command line in config.sys
 35092                                  ;    config_cmd == current command code, but with QUERY bit intact
 35093                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35094                                  ;
 35095                                  ;   OUTPUT
 35096                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35097                                  ;
 35098                                  ;   OTHER REGS USED
 35099                                  ;       BX, CX, DX, DI
 35100                                  ;
 35101                                  ;   NOTES
 35102                                  ;       None
 35103                                  ;
 35104                                  ;   HISTORY
 35105                                  ;       Created 16-Mar-1992 by JeffPar
 35106                                  ;
 35107                                  ;----------------------------------------------------------------------------
 35108                                  
 35109                                  	; 12/12/2022
 35110                                  query_user:
 35111                                          test    byte [bQueryOpt],4	; answer no to everything?
 35112                                          ;jz	short qu_1		;
 35113                                          ; 12/12/2022
 35114                                  	;jmp	short skip_all		;
 35115                                  	jnz	short skip_all
 35116                                  qu_1:
 35117                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 35118                                          jnz	short nearby_ret	; yes (and return carry clear!)
 35119                                          push    ax                      ;
 35120                                          mov     al,[config_cmd]         ;
 35121                                          test    byte [bQueryOpt],1	; query every command?
 35122                                          jnz	short query_all		; yes
 35123                                          test    al,CONFIG_OPTION_QUERY  ;
 35124                                          ;jnz	short query_all		;
 35125                                          ; 12/12/2022
 35126                                  	;jmp	short do_cmd		;
 35127                                  	jz	short do_cmd ; cf=0
 35128                                  query_all:
 35129                                  
 35130                                  ;   Search for the command code (AL) in "comtab", and then print
 35131                                  ;   out the corresponding keyword, followed by the rest of the actual
 35132                                  ;   line pointed to by ES:SI
 35133                                  
 35134                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 35135                                          mov     dx,_$AutoPrmpt    	;
 35136                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35137                                          jz	short generic_prompt	; config_cmd must have been 0
 35138                                  
 35139                                          mov     dh,al                   ; save config_cmd in DH
 35140                                          sub     bx,bx                   ;
 35141                                          mov     di,comtab		;
 35142                                  find_match:                             ;
 35143                                          mov     bl,[di]                 ; get size of current keyword
 35144                                          or      bl,bl                   ;
 35145                                          jz	short line_print	; end of table
 35146                                          inc     di                      ;
 35147                                          cmp     al,[di+bx]              ; match?
 35148                                          je	short cmd_match		; yes
 35149                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35150                                  	; 13/05/2019	
 35151                                          jmp	short find_match	; loop
 35152                                  cmd_match:                              ;
 35153                                          mov     cl,[di-1]               ;
 35154                                          mov     ch,0                    ;
 35155                                          mov     ah,STD_CON_OUTPUT ; 2
 35156                                  cmd_print:                              ;
 35157                                          mov     al,[di]                 ;
 35158                                          inc     di                      ;
 35159                                          mov     dl,al                   ;
 35160                                          int     21h                     ;
 35161                                          loop    cmd_print               ;
 35162                                          mov     dl,'='                  ;
 35163                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35164                                          jne	short cmd_notset	;
 35165                                          mov     dl,' '                  ;
 35166                                  cmd_notset:
 35167                                          int     21h                     ; '=' looks funny on SET commands
 35168                                  line_print:                             ;
 35169                                  	;lods	byte ptr es:[si]        ;
 35170                                          es
 35171                                  	lodsb
 35172                                  	or      al,al                   ;
 35173                                          jnz	short non_null		;
 35174                                          mov     al,' '                  ;
 35175                                  non_null:                               ;
 35176                                          cmp     al,' '                  ; control code?
 35177                                          jb	short prompt_user	; yes, assume end of line
 35178                                          jne	short non_space		;
 35179                                          cmp     byte [es:si],' '	;
 35180                                          jb	short prompt_user	;
 35181                                  non_space:                              ;
 35182                                          mov     dl,al                   ;
 35183                                          mov     ah,STD_CON_OUTPUT ; 2	;
 35184                                          int     21h                     ;
 35185                                          jmp	short line_print	;
 35186                                  prompt_user:                            ;
 35187                                          mov     dx,_$InterPrmpt		;
 35188                                  
 35189                                  generic_prompt:
 35190                                          call    print                   ;
 35191                                  input_loop:                             ;
 35192                                          mov     ah,0                    ; read a key
 35193                                          int     16h                     ;
 35194                                          or      al,al                   ; is it a function key?
 35195                                          jnz	short not_func		; no
 35196                                          cmp     ah,3Fh                  ; F5 function key?
 35197                                          jne	short input_loop	; no
 35198                                          mov     al,[_$NO]                  ;
 35199                                          or      byte [bQueryOpt],4	; no more queries
 35200                                          jmp     short legal_char        ;
 35201                                  not_func:
 35202                                          and     al,~20h ; 0DFh		; converting to upper case
 35203                                          cmp     al,[_$NO]		; verify character is legal
 35204                                          je	short legal_char	;
 35205                                          cmp     al,[_$YES]		;
 35206                                          je	short legal_char	;
 35207                                          cmp     byte [config_cmd],0	;
 35208                                          je	short input_loop	; don't allow Esc on this query
 35209                                          cmp     al,1Bh                  ; Esc?
 35210                                          jne	short input_loop	;
 35211                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 35212                                          mov     al,[_$YES]
 35213                                  legal_char:                             ;
 35214                                          call    disp_input              ;
 35215                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35216                                  
 35217                                          cmp     al,[_$NO]		; process line?
 35218                                          je	short skip_cmd		; no
 35219                                  	; 12/12/2022
 35220                                  	clc
 35221                                  do_cmd:
 35222                                  	pop     ax			;
 35223                                  	; 12/12/2022
 35224                                  	; cf=0
 35225                                  	;clc				; just do the command
 35226                                  	retn
 35227                                  
 35228                                  skip_cmd:
 35229                                  	pop     ax			;
 35230                                  skip_all:
 35231                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35232                                  	stc
 35233                                  	retn
 35234                                  
 35235                                  ;----------------------------------------------------------------------------
 35236                                  ;
 35237                                  ;   print_error: displays multi-config error conditions
 35238                                  ;
 35239                                  ;   INPUT
 35240                                  ;    Carry set to pause, clear to not
 35241                                  ;    ES:SI -> current command line in config.sys
 35242                                  ;
 35243                                  ;   OUTPUT
 35244                                  ;       None
 35245                                  ;
 35246                                  ;   OTHER REGS USED
 35247                                  ;       None
 35248                                  ;
 35249                                  ;   NOTES
 35250                                  ;       None
 35251                                  ;
 35252                                  ;   HISTORY
 35253                                  ;       Created 16-Mar-1992 by JeffPar
 35254                                  ;
 35255                                  ;----------------------------------------------------------------------------
 35256                                  
 35257                                  print_error:
 35258                                          push    ax
 35259                                          push    bx
 35260                                          push    cx
 35261                                          push    dx
 35262                                          push    ds
 35263                                          push    cs
 35264                                          pop     ds
 35265                                          pushf
 35266                                          call    get_linenum
 35267                                          mov     [linecount],bx
 35268                                          call    error_line
 35269                                          popf
 35270                                          jnc	short pe_ret
 35271                                          mov     dx,_$PauseMsg
 35272                                          call    print
 35273                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35274                                          int     21h			; wait for a key
 35275                                          or      al,al			; extended key?
 35276                                          jnz	short pe_1		; no
 35277                                          mov     ah,07h			; yes
 35278                                          int     21h			; eat it too
 35279                                  pe_1:     
 35280                                  	mov     dx,crlfm
 35281                                          call    print
 35282                                  pe_ret: 
 35283                                  	pop     ds
 35284                                          pop     dx
 35285                                          pop     cx
 35286                                          pop     bx
 35287                                          pop     ax
 35288                                  	retn
 35289                                  
 35290                                  ;----------------------------------------------------------------------------
 35291                                  
 35292                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35293                                  ;   command-line for the shell;  this (undocumented) switch disables
 35294                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35295                                  ;   displayed when there's no AUTOEXEC.BAT.
 35296                                  
 35297                                  disable_autoexec:
 35298                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35299                                  	; 17/04/2019 - Retro DOS v4.0
 35300                                  
 35301                                  	test	byte [bQueryOpt],4
 35302                                  	jz	short disable_exit
 35303                                  	test	byte [dae_flag],1
 35304                                  	jnz	short disable_exit
 35305                                  	or	byte [dae_flag],1
 35306                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35307                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35308                                  	mov     dx,'D ' ; 2044h
 35309                                  dae_1:
 35310                                          ;mov	al,[def_swchr]
 35311                                  	mov     al,[command_line-1]     ; get default switchchar
 35312                                          or      al,al                   ; anything there?
 35313                                          jz	short disable_exit	; no, disable_autoexec already called
 35314                                          mov     bl,[command_line]       ;
 35315                                          mov     bh,0                    ; BX == command-line length
 35316                                          mov     cx,bx                   ;
 35317                                          add     bl,3                    ;
 35318                                          cmp     bl,126                  ;
 35319                                          ja	short disable_exit	;
 35320                                          mov     [command_line],bl       ; update length
 35321                                          add     bx,command_line+1	; make sure we move the NULL too
 35322                                          inc     cx                      ; (just for consistency sake)
 35323                                  disable_loop:                           ;
 35324                                          mov     ah,[bx-3]               ;
 35325                                          mov     [bx],ah                 ;
 35326                                          dec     bx                      ;
 35327                                          loop    disable_loop            ;
 35328                                          mov     [bx-2],al               ;
 35329                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35330                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35331                                          ;mov	byte [command_line-1],0 ;
 35332                                  disable_exit:                           ;
 35333                                          retn
 35334                                  
 35335                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35336                                  	cmp     byte [bQueryOpt],1
 35337                                  	jnz     short disable_exit
 35338                                  	test	byte [dae_flag],2
 35339                                  	jnz     short disable_exit
 35340                                  	or      byte [dae_flag],2
 35341                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 35342                                  	jmp     short dae_1
 35343                                  
 35344                                  ;endif  ;MULTI_CONFIG
 35345                                  
 35346                                  %endif	; 02/11/2022
 35347                                  
 35348                                  
 35349                                  ; 19/04/2019 - Retro DOS v4.0
 35350                                  
 35351                                  ;----------------------------------------------------------------------------
 35352                                  ;
 35353                                  ; procedure : delim
 35354                                  ;
 35355                                  ;----------------------------------------------------------------------------
 35356                                  
 35357                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35358                                  ;
 35359                                  ;;ifdef	MULTI_CONFIG
 35360                                  ;
 35361                                  ;any_delim:
 35362                                  ;       cmp     al,cr
 35363                                  ;       je	short delim_ret
 35364                                  ;       cmp     al,lf
 35365                                  ;       je	short delim_ret
 35366                                  ;       cmp     al,'['
 35367                                  ;       je	short delim_ret
 35368                                  ;       cmp     al,']'
 35369                                  ;       je	short delim_ret
 35370                                  ;
 35371                                  ;;endif  ;MULTI_CONFIG
 35372                                  
 35373                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35374                                  	; (SYSINIT:3450h)	
 35375                                  delim:
 35376 0000307D 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35377 0000307F 7416                    	je	short delim_ret
 35378                                  
 35379 00003081 3C00                    	cmp	al,0		; special case for sysinit!!!
 35380 00003083 7412                    	je	short delim_ret
 35381                                  
 35382                                  org_delim:			; used by organize routine except for getting
 35383 00003085 3C20                    	cmp	al,' '          ; the filename.
 35384 00003087 740E                    	je	short delim_ret
 35385 00003089 3C09                            cmp     al,tab ; 9
 35386 0000308B 740A                    	je	short delim_ret
 35387 0000308D 3C3D                    	cmp	al,'='
 35388 0000308F 7406                    	je	short delim_ret
 35389 00003091 3C2C                    	cmp	al,','
 35390 00003093 7402                    	je	short delim_ret
 35391 00003095 3C3B                    	cmp	al,';'
 35392                                  
 35393                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35394                                  ;;ifdef	MULTI_CONFIG
 35395                                  ;;   Make sure there's no chance of a false EOF indication
 35396                                  ;	clc
 35397                                  ;;endif
 35398                                  
 35399                                  	; 02/11/2022
 35400                                  delim_ret:
 35401 00003097 C3                      	retn
 35402                                  
 35403                                  ;----------------------------------------------------------------------------
 35404                                  ;
 35405                                  ; procedure : newline
 35406                                  ;
 35407                                  ;  newline returns with first character of next line
 35408                                  ;
 35409                                  ;----------------------------------------------------------------------------
 35410                                  
 35411                                  newline:
 35412 00003098 E898F6                  	call	getchr			;skip non-control characters
 35413 0000309B 7207                    	jc	short nl_ret
 35414 0000309D 3C0A                    	cmp	al,lf			;look for line feed
 35415 0000309F 75F7                    	jne	short newline
 35416 000030A1 E88FF6                  	call	getchr
 35417                                  nl_ret:
 35418 000030A4 C3                      	retn
 35419                                  
 35420                                  ;----------------------------------------------------------------------------
 35421                                  ; 
 35422                                  ; procedure : mapcase
 35423                                  ;
 35424                                  ;----------------------------------------------------------------------------
 35425                                  
 35426                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35427                                  mapcase:
 35428 000030A5 51                      	push	cx
 35429 000030A6 56                      	push	si
 35430 000030A7 1E                      	push	ds
 35431                                  
 35432 000030A8 06                      	push	es
 35433 000030A9 1F                      	pop	ds
 35434                                  
 35435                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35436                                  ;;ifdef	MULTI_CONFIG
 35437                                  ;
 35438                                  ;	mov	bl,al                   ; same cmd code this line
 35439                                  ;;else
 35440                                  ;;	xor	si,si
 35441                                  ;;endif
 35442                                  	; 02/11/2022
 35443 000030AA 31F6                    	xor	si, si
 35444                                  
 35445                                  convloop:
 35446 000030AC AC                      	lodsb
 35447 000030AD 3C61                    	cmp	al,'a'
 35448 000030AF 7209                    	jb	short noconv
 35449 000030B1 3C7A                    	cmp	al,'z'
 35450 000030B3 7705                    	ja	short noconv
 35451 000030B5 2C20                    	sub	al,20h
 35452 000030B7 8844FF                  	mov	[si-1],al
 35453                                  noconv:
 35454                                  
 35455                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35456                                  ;;ifdef	MULTI_CONFIG
 35457                                  ;;
 35458                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35459                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35460                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35461                                  ;;   anything after the "=" in a SET)
 35462                                  ;;
 35463                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35464                                  ;       jne	short check_eol		; no, just check for end-of-line
 35465                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35466                                  ;       je	short convdone		; yes
 35467                                  ;check_eol:
 35468                                  ;       cmp     al,cr
 35469                                  ;       je	short convdone
 35470                                  ;       cmp     al,lf
 35471                                  ;       je	short convdone
 35472                                  ;;endif
 35473                                  	
 35474                                  	; 02/11/2022
 35475 000030BA E2F0                    	loop	convloop
 35476                                  convdone:
 35477 000030BC 1F                      	pop	ds
 35478 000030BD 5E                      	pop	si
 35479 000030BE 59                      	pop	cx
 35480 000030BF C3                      	retn
 35481                                  
 35482                                  ;----------------------------------------------------------------------------
 35483                                  ;
 35484                                  ; procedure : round
 35485                                  ;
 35486                                  ; round the values in memlo and memhi to paragraph boundary.
 35487                                  ; perform bounds check.
 35488                                  ;
 35489                                  ;----------------------------------------------------------------------------
 35490                                  
 35491                                  round:
 35492 000030C0 50                      	push	ax
 35493 000030C1 2EA1[DE03]              	mov	ax,[cs:memlo]
 35494                                  
 35495 000030C5 E8F1DF                  	call	ParaRound		; para round up
 35496                                  
 35497 000030C8 2E0106[E003]            	add	[cs:memhi],ax
 35498 000030CD 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35499 000030D4 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35500 000030D8 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35501 000030DD 7322                    	jae	short mem_err
 35502 000030DF 2EF606[2E14]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35503 000030E5 7418                    	jz	short skip_set_devmarksize
 35504 000030E7 06                      	push	es
 35505 000030E8 56                      	push	si
 35506 000030E9 2E8B36[2C14]            	mov	si,[cs:devmark_addr]
 35507 000030EE 8EC6                    	mov	es,si
 35508 000030F0 29F0                    	sub	ax,si
 35509 000030F2 48                      	dec	ax
 35510                                  	;mov	[es:3],ax
 35511 000030F3 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35512 000030F7 2E8026[2E14]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35513 000030FD 5E                      	pop	si
 35514 000030FE 07                      	pop	es
 35515                                  skip_set_devmarksize:
 35516 000030FF 58                      	pop	ax
 35517                                  	; 11/12/2022
 35518                                  	; cf = 0
 35519                                  	; 02/11/2022
 35520                                  	;clc	; ? (not needed here)	; clear carry
 35521 00003100 C3                      	retn
 35522                                  
 35523                                  ;----------------------------------------------------------------------------
 35524                                  
 35525                                  mem_err:
 35526                                  	; 11/12/2022
 35527 00003101 0E                      	push	cs
 35528 00003102 1F                      	pop	ds
 35529                                  mem_err2:
 35530 00003103 BA[2938]                	mov	dx,badmem
 35531                                  	;push	cs
 35532                                  	;pop	ds
 35533 00003106 E87602                  	call	print
 35534 00003109 E941D7                  	jmp	stall
 35535                                  
 35536                                  ;----------------------------------------------------------------------------
 35537                                  ;
 35538                                  ; procedure : calldev
 35539                                  ;
 35540                                  ;----------------------------------------------------------------------------
 35541                                  
 35542                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35543                                  	; (SYSINIT:34E0h)
 35544                                  calldev:
 35545 0000310C 2E8E1E[EA1E]            	mov	ds,[cs:DevEntry+2]
 35546 00003111 2E031E[E81E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35547 00003116 8B07                    	mov	ax,[bx]
 35548                                  
 35549 00003118 2EFF36[E81E]            	push	word [cs:DevEntry]
 35550 0000311D 2EA3[E81E]              	mov	word [cs:DevEntry],ax
 35551 00003121 BB[E603]                	mov	bx,packet
 35552 00003124 2EFF1E[E81E]            	call	far [cs:DevEntry]
 35553 00003129 2E8F06[E81E]            	pop	word [cs:DevEntry]
 35554 0000312E C3                      	retn
 35555                                  
 35556                                  ;----------------------------------------------------------------------------
 35557                                  ;
 35558                                  ; procedure : todigit
 35559                                  ;
 35560                                  ;----------------------------------------------------------------------------
 35561                                  
 35562                                  todigit:
 35563 0000312F 2C30                    	sub	al,'0'
 35564                                  	;jb	short notdig  ; 02/11/2022
 35565                                  	; 12/12/2022
 35566 00003131 7203                    	jb	short notdig2
 35567                                  	;cmp	al,9
 35568                                  	;ja	short notdig
 35569                                  	;clc
 35570                                  	;retn
 35571                                  	; 12/12/2022
 35572 00003133 3C0A                    	cmp	al,10
 35573 00003135 F5                      	cmc
 35574                                  notdig:
 35575                                  	;stc
 35576                                  notdig2:
 35577 00003136 C3                      	retn
 35578                                  
 35579                                  ;----------------------------------------------------------------------------
 35580                                  ;
 35581                                  ; procedure : getnum
 35582                                  ;
 35583                                  ; getnum parses a decimal number.
 35584                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35585                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35586                                  ;
 35587                                  ;----------------------------------------------------------------------------
 35588                                  
 35589                                  getnum:
 35590 00003137 53                      	push	bx
 35591 00003138 31DB                    	xor	bx,bx			; running count is zero
 35592                                  b2:
 35593 0000313A E8F2FF                  	call	todigit 		; do we have a digit ?
 35594 0000313D 7247                    	jc	short badnum		; no, bomb
 35595                                  
 35596 0000313F 93                      	xchg	ax,bx			; put total in ax
 35597 00003140 53                      	push	bx			; save digit (0 to 9)
 35598                                  	;mov	bx,10			; base of arithmetic
 35599                                  	; 12/12/2022
 35600 00003141 B30A                    	mov	bl,10
 35601 00003143 F7E3                    	mul	bx			; shift by one decimal digit
 35602 00003145 5B                      	pop	bx			; get back digit (0 to 9)
 35603 00003146 00D8                    	add	al,bl			; get total
 35604 00003148 80D400                  	adc	ah,0			; make that 16 bits
 35605 0000314B 7239                    	jc	short badnum		; too big a number
 35606                                  
 35607 0000314D 93                      	xchg	ax,bx			; stash total
 35608                                  
 35609 0000314E E8E2F5                  	call	getchr			;get next digit
 35610 00003151 722D                    	jc	short b1		; no more characters
 35611 00003153 3C20                    	cmp	al,' ' 			; space?
 35612 00003155 741F                    	je	short b15		; then end of digits
 35613 00003157 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35614 00003159 741B                    	je	short b15		; then end of digits.
 35615 0000315B 3C09                    	cmp	al, tab ; 9		; tab
 35616 0000315D 7417                    	je	short b15
 35617 0000315F 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35618 00003164 7410                    	je	short b15
 35619 00003166 3C2F                    	cmp	al,'/'			; see if another switch follows
 35620                                  	;nop				; cas - remnant of old bad code
 35621                                  	;nop
 35622                                  	; 12/12/2022
 35623                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35624                                  	;nop
 35625                                  	;nop
 35626 00003168 740C                    	je	short b15
 35627 0000316A 3C0A                    	cmp	al,lf			; line-feed?
 35628 0000316C 7408                    	je	short b15
 35629 0000316E 3C0D                    	cmp	al,cr			; carriage return?
 35630 00003170 7404                    	je	short b15
 35631 00003172 08C0                    	or	al,al			; end of line separator?
 35632 00003174 75C4                    	jnz	short b2		; no, try as a valid char...
 35633                                  b15:
 35634 00003176 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35635 0000317B 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35636                                  b1:
 35637 00003180 89D8                    	mov	ax,bx			; get proper count
 35638 00003182 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35639 00003184 5B                      	pop	bx
 35640 00003185 C3                      	retn
 35641                                  badnum:
 35642                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35643                                  	;mov	byte [cs:sepchr],0
 35644 00003186 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35645                                  	; 12 /12/2022
 35646 00003188 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35647 0000318C 5B                      	pop	bx
 35648 0000318D F9                      	stc				; and carry set
 35649 0000318E C3                      	retn
 35650                                  
 35651                                  ;****************************************************************************
 35652                                  
 35653                                  setdoscountryinfo:
 35654                                  
 35655                                  ;----------------------------------------------------------------------------
 35656                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35657                                  ;	ds:0  -> buffer.
 35658                                  ;	si = 0
 35659                                  ;	ax = country id
 35660                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35661                                  ;	bx = file handle
 35662                                  ;	this routine can handle maximum 438 country_data entries.
 35663                                  ;
 35664                                  ;output: dos_country_cdpg_info set.
 35665                                  ;	 carry set if any file read failure or wrong information in the file.
 35666                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35667                                  ;	 codepage_id in the file.
 35668                                  ;----------------------------------------------------------------------------
 35669                                  
 35670 0000318F 57                      	push	di
 35671 00003190 50                      	push	ax
 35672 00003191 52                      	push	dx
 35673                                  
 35674 00003192 31C9                    	xor	cx,cx
 35675 00003194 31D2                    	xor	dx,dx
 35676 00003196 B80002                  	mov	ax,512			;read 512 bytes
 35677 00003199 E84F01                  	call	readincontrolbuffer	;read the file header
 35678 0000319C 724D                    	jc	short setdosdata_fail
 35679                                  
 35680 0000319E 06                      	push	es
 35681 0000319F 56                      	push	si
 35682                                  
 35683 000031A0 0E                      	push	cs
 35684 000031A1 07                      	pop	es
 35685                                  
 35686 000031A2 BF[4B34]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35687 000031A5 B90800                  	mov	cx,8			;length of the signature
 35688 000031A8 F3A6                    	repz	cmpsb
 35689                                  
 35690 000031AA 5E                      	pop	si
 35691 000031AB 07                      	pop	es
 35692 000031AC 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35693                                  
 35694 000031AE 83C612                  	add	si,18			;si -> county info type
 35695 000031B1 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35696 000031B4 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35697                                  
 35698 000031B6 46                      	inc	si			;si -> file offset
 35699 000031B7 8B14                    	mov	dx,[si]			;get the info file offset.
 35700 000031B9 8B4C02                  	mov	cx,[si+2]
 35701 000031BC B80018                  	mov	ax,6144			;read 6144 bytes.
 35702 000031BF E82901                  	call	readincontrolbuffer	;read info
 35703 000031C2 7227                    	jc	short setdosdata_fail
 35704                                  
 35705 000031C4 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35706 000031C6 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35707 000031CA 771F                    	ja	short setdosdata_fail
 35708                                  
 35709 000031CC 46                      	inc	si
 35710 000031CD 46                      	inc	si			;si -> entry information packet
 35711 000031CE 5A                      	pop	dx			;restore code page id
 35712 000031CF 58                      	pop	ax			;restore country id
 35713 000031D0 5F                      	pop	di
 35714                                  
 35715                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35716 000031D1 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35717 000031D4 750A                    	jne	short setdoscntry_next
 35718                                  
 35719 000031D6 83FA00                  	cmp	dx,0			;no user specified code page ?
 35720 000031D9 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35721 000031DB 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35722 000031DE 7413                    	je	short setdoscntry_got_it
 35723                                  
 35724                                  setdoscntry_next:
 35725 000031E0 0334                    	add	si,[si]			;next entry
 35726 000031E2 46                      	inc	si
 35727 000031E3 46                      	inc	si			;take a word for size of entry itself
 35728 000031E4 E2EB                    	loop	setdoscntry_find
 35729                                  
 35730 000031E6 B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35731                                  setdoscntry_fail:
 35732 000031E9 F9                      	stc
 35733 000031EA C3                      	retn
 35734                                  
 35735                                  setdosdata_fail:
 35736 000031EB 5E                      	pop	si
 35737 000031EC 59                      	pop	cx
 35738 000031ED 5F                      	pop	di
 35739 000031EE EBF9                    	jmp	short setdoscntry_fail
 35740                                  
 35741                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35742 000031F0 8B5404                  	mov	dx,[si+4]
 35743                                  
 35744                                  setdoscntry_got_it:			;found the matching entry
 35745 000031F3 2E8916[5334]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35746 000031F8 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35747 000031FB 8B4C0C                  	mov	cx,[si+12]
 35748 000031FE B80002                  	mov	ax,512 			;read 512 bytes
 35749 00003201 E8E700                  	call	readincontrolbuffer
 35750 00003204 72E3                    	jc	short setdoscntry_fail
 35751                                  
 35752 00003206 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35753 00003208 46                      	inc	si
 35754 00003209 46                      	inc	si			;si -> first entry
 35755                                  
 35756                                  setdoscntry_data:
 35757 0000320A 57                      	push	di			;es:di -> dos_country_cdpg_info
 35758 0000320B 51                      	push	cx			;save # of entry left
 35759 0000320C 56                      	push	si			;si -> current entry in control buffer
 35760                                  
 35761 0000320D 8A4402                  	mov	al,[si+2]		;get data entry id
 35762 00003210 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35763 00003213 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35764                                  
 35765 00003215 8B5404                  	mov	dx,[si+4]		;get offset of data
 35766 00003218 8B4C06                  	mov	cx,[si+6]
 35767 0000321B B80042                  	mov	ax,4200h
 35768 0000321E F9                      	stc
 35769 0000321F CD21                    	int	21h			;move pointer
 35770 00003221 72C8                    	jc	short setdosdata_fail
 35771                                  
 35772 00003223 BA0002                  	mov	dx,512			;start of data buffer
 35773 00003226 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35774 00003229 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35775 0000322B F9                      	stc
 35776 0000322C CD21                    	int	21h			;read the country.sys data
 35777 0000322E 72BB                    	jc	short setdosdata_fail 	;read failure
 35778                                  
 35779 00003230 39C8                    	cmp	ax,cx
 35780 00003232 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35781                                  
 35782 00003234 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35783 00003237 8B4C06                  	mov	cx,[si+6]
 35784 0000323A B80042                  	mov	ax,4200h
 35785 0000323D F9                      	stc
 35786 0000323E CD21                    	int	21h			;move pointer back again
 35787 00003240 72A9                    	jc	short setdosdata_fail
 35788                                  
 35789 00003242 56                      	push	si
 35790 00003243 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35791 00003246 8B0C                    	mov	cx,[si]
 35792 00003248 5E                      	pop	si
 35793 00003249 BA0002                  	mov	dx,512			;start of data buffer
 35794 0000324C 83C10A                  	add	cx,10			;signature + a word for the length itself
 35795 0000324F B43F                    	mov	ah,3Fh			;read the data from the file.
 35796 00003251 F9                      	stc
 35797 00003252 CD21                    	int	21h
 35798 00003254 7295                    	jc	short setdosdata_fail
 35799                                  
 35800 00003256 39C8                    	cmp	ax,cx
 35801 00003258 7591                    	jne	short setdosdata_fail
 35802                                  
 35803 0000325A 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35804 0000325D BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35805 00003260 8B0C                    	mov	cx,[si]			;get the length of the file
 35806 00003262 41                      	inc	cx			;take care of a word for lenght of tab
 35807 00003263 41                      	inc	cx			;itself.
 35808 00003264 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35809 00003268 7781                    	ja	short setdosdata_fail
 35810                                  
 35811                                  	;if	bugfix
 35812 0000326A E83500                  	call	setdbcs_before_copy
 35813                                  	;endif
 35814                                  
 35815 0000326D 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35816 0000326F 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35817                                  
 35818 00003271 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35819                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35820 00003275 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35821                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35822                                  	
 35823 00003279 57                      	push	di			;save di
 35824                                  
 35825 0000327A 50                      	push	ax
 35826 0000327B 2EA1[5334]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35827 0000327F 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35828 00003282 58                      	pop	ax
 35829                                  
 35830                                  setdoscntry_mov:
 35831 00003283 F3A4                    	rep	movsb			;copy the table into dos
 35832 00003285 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35833 00003287 7509                    	jne	short setdoscntry_data_next
 35834                                  
 35835 00003289 5F                      	pop	di			;restore di
 35836 0000328A 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35837                                  	;pop	word [es:di+26]		;restore
 35838 0000328E 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35839                                  	;pop	word [es:di+24]
 35840                                  
 35841                                  setdoscntry_data_next:
 35842 00003292 5E                      	pop	si			;restore control buffer pointer
 35843 00003293 59                      	pop	cx			;restore # of entries left
 35844 00003294 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35845 00003295 0334                    	add	si,[si]			;try to get the next entry
 35846 00003297 46                      	inc	si
 35847 00003298 46                      	inc	si			;take a word of entry length itself
 35848 00003299 49                      	dec	cx
 35849 0000329A 83F900                  	cmp	cx,0
 35850 0000329D 741D                    	je	short setdoscntry_ok
 35851 0000329F E968FF                  	jmp	setdoscntry_data
 35852                                  
 35853                                  	; 18/12/2022
 35854                                  ;setdoscntry_ok:
 35855                                  	;retn
 35856                                  
 35857                                  ;----------------------------------------------------------------------------
 35858                                  
 35859                                  	;if	bugfix
 35860                                  
 35861                                  setdbcs_before_copy:
 35862 000032A2 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35863 000032A4 7516                    	jne	short sdbcsbc		; jump if not
 35864 000032A6 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35865 000032AA 7410                    	je	short sdbcsbc		; jump if so
 35866                                  
 35867 000032AC 57                      	push	di
 35868 000032AD 50                      	push	ax
 35869 000032AE 51                      	push	cx
 35870 000032AF 268B0D                  	mov	cx,[es:di]		; load block length
 35871 000032B2 83C702                  	add	di,2			; points actual data
 35872 000032B5 30C0                    	xor	al,al			; fill bytes
 35873 000032B7 F3AA                    	rep	stosb			; clear data block
 35874 000032B9 59                      	pop	cx
 35875 000032BA 58                      	pop	ax
 35876 000032BB 5F                      	pop	di
 35877                                  sdbcsbc:
 35878                                  setdoscntry_ok:	; 18/12/2022	
 35879 000032BC C3                      	retn
 35880                                  
 35881                                  	;endif
 35882                                  
 35883                                  ;----------------------------------------------------------------------------
 35884                                  
 35885                                  getcountrydestination:
 35886                                  
 35887                                  ;get the destination address in the dos country info table.
 35888                                  ;input: al - data id
 35889                                  ;	es:di -> dos_country_cdpg_info
 35890                                  ;on return:
 35891                                  ;	es:di -> destination address of the matching data id
 35892                                  ;	carry set if no matching data id found in dos.
 35893                                  
 35894 000032BD 51                      	push	cx
 35895                                  	;add	di,74
 35896 000032BE 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35897                                  					;skip the reserved area, syscodepage etc.
 35898 000032C1 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35899 000032C4 47                      	inc	di
 35900 000032C5 47                      	inc	di			;si -> the first start entry id
 35901                                  
 35902                                  getcntrydest:
 35903 000032C6 263805                  	cmp	byte [es:di],al
 35904 000032C9 7413                    	je	short getcntrydest_ok
 35905 000032CB 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35906 000032CF 7405                    	je	short getcntrydest_1
 35907                                  
 35908 000032D1 83C705                  	add	di,5			;next data id
 35909 000032D4 EB03                    	jmp	short getcntrydest_loop
 35910                                  
 35911                                  getcntrydest_1:
 35912                                  	;add	di,41
 35913 000032D6 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35914                                  getcntrydest_loop:
 35915 000032D9 E2EB                    	loop	getcntrydest
 35916 000032DB F9                      	stc
 35917 000032DC EB0B                    	jmp	short getcntrydest_exit
 35918                                  
 35919                                  getcntrydest_ok:
 35920 000032DE 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35921 000032E0 7503                    	jne	short getcntrydest_ok1
 35922                                  
 35923 000032E2 47                      	inc	di			;now di -> cccountryinfolen
 35924 000032E3 EB04                    	jmp	short getcntrydest_exit
 35925                                  
 35926                                  getcntrydest_ok1:
 35927 000032E5 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35928                                  
 35929                                  getcntrydest_exit:
 35930 000032E9 59                      	pop	cx
 35931 000032EA C3                      	retn
 35932                                  
 35933                                  ;----------------------------------------------------------------------------
 35934                                  
 35935                                  readincontrolbuffer:
 35936                                  
 35937                                  ;move file pointer to cx:dx
 35938                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35939                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35940                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35941                                  ;	 be moved.
 35942                                  ;	 ax - # of bytes to read
 35943                                  ;	 bx - file handle
 35944                                  ;	 ds - buffer seg.
 35945                                  ;return: the control data information is read into ds:0 - ds:0200.
 35946                                  ;	 cx,dx value destroyed.
 35947                                  ;	 carry set if error in reading file.
 35948                                  
 35949 000032EB 50                      	push	ax			;# of bytes to read
 35950 000032EC B80042                  	mov	ax,4200h
 35951 000032EF F9                      	stc
 35952 000032F0 CD21                    	int	21h			;move pointer
 35953 000032F2 59                      	pop	cx			;# of bytes to read
 35954 000032F3 7209                    	jc	short ricb_exit
 35955                                  
 35956 000032F5 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35957 000032F7 31F6                    	xor	si,si
 35958 000032F9 B43F                    	mov	ah,3Fh			;read into the buffer
 35959 000032FB F9                      	stc
 35960 000032FC CD21                    	int	21h			;should be less than 1024 bytes.
 35961                                  ricb_exit:
 35962 000032FE C3                      	retn
 35963                                  
 35964                                  ;----------------------------------------------------------------------------
 35965                                  
 35966                                  set_country_path:
 35967                                  
 35968                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35969                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 35970                                  ;     assumes current directory is the root directory.
 35971                                  ;out: ds:di -> full path (cntry_drv).
 35972                                  ;     set the cntry_drv string from the country=,,path command.
 35973                                  ;     ds, es, si value saved.
 35974                                  
 35975 000032FF 56                      	push	si
 35976                                  
 35977 00003300 1E                      	push	ds			;switch ds, es
 35978 00003301 06                      	push	es
 35979 00003302 1F                      	pop	ds
 35980 00003303 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 35981                                  
 35982 00003304 E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 35983 00003307 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 35984                                  
 35985 00003309 8A04                    	mov	al,[si]
 35986 0000330B 46                      	inc	si
 35987 0000330C 46                      	inc	si			;si -> next char after ":"
 35988 0000330D EB06                    	jmp	short scp_setdrv
 35989                                  
 35990                                  scp_default_drv:
 35991 0000330F B419                    	mov	ah,19h
 35992 00003311 CD21                    	int	21h
 35993 00003313 0441                    	add	al,"A"			;convert it to a character.
 35994                                  
 35995                                  scp_setdrv:
 35996 00003315 2EA2[0834]              	mov	[cs:cntry_drv],al	;set the drive letter.
 35997 00003319 BF[0B34]                	mov	di,cntry_path
 35998 0000331C 8A04                    	mov	al,[si]
 35999 0000331E 3C5C                    	cmp	al, "\"
 36000 00003320 7406                    	je	short scp_root_dir
 36001                                  
 36002 00003322 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 36003 00003324 7402                    	je	short scp_root_dir
 36004                                  
 36005 00003326 EB01                    	jmp	short scp_path
 36006                                  
 36007                                  scp_root_dir:
 36008 00003328 4F                      	dec	di			;di -> cntry_root
 36009                                  scp_path:
 36010 00003329 E81F00                  	call	move_asciiz		;copy it
 36011                                  
 36012 0000332C BF[0834]                	mov	di,cntry_drv
 36013                                  scpath_exit:
 36014                                  
 36015 0000332F 1E                      	push	ds			;switch ds, es
 36016 00003330 06                      	push	es
 36017 00003331 1F                      	pop	ds
 36018 00003332 07                      	pop	es			;ds, es value restored
 36019                                  
 36020 00003333 5E                      	pop	si
 36021 00003334 C3                      	retn
 36022                                  
 36023                                  ;----------------------------------------------------------------------------
 36024                                  
 36025                                  chk_drive_letter:
 36026                                  
 36027                                  ;check if ds:[si] is a drive letter followed by ":".
 36028                                  ;assume that every alpha character is already converted to upper case.
 36029                                  ;carry set if not.
 36030                                  
 36031 00003335 50                      	push	ax
 36032 00003336 803C41                  	cmp	byte [si],"A"
 36033                                  	;jb	short cdletter_no
 36034 00003339 720E                    	jb	short cdletter_exit
 36035 0000333B 803C5A                  	cmp	byte [si],"Z"
 36036 0000333E 7708                    	ja	short cdletter_no
 36037 00003340 807C013A                	cmp	byte [si+1],":"
 36038 00003344 7502                    	jne	short cdletter_no
 36039                                  
 36040 00003346 EB01                    	jmp	short cdletter_exit
 36041                                  
 36042                                  cdletter_no:
 36043 00003348 F9                      	stc
 36044                                  cdletter_exit:
 36045 00003349 58                      	pop	ax
 36046 0000334A C3                      	retn
 36047                                  
 36048                                  ;----------------------------------------------------------------------------
 36049                                  
 36050                                  move_asciiz:
 36051                                  
 36052                                  ;in: ds:si -> source es:di -> target
 36053                                  ;out: copy the string until 0.
 36054                                  ;assumes there exists a 0.
 36055                                  
 36056                                  masciiz_loop:
 36057 0000334B A4                      	movsb
 36058 0000334C 807CFF00                	cmp	byte [si-1],0	; was it 0?
 36059 00003350 75F9                    	jne	short masciiz_loop
 36060 00003352 C3                      	retn
 36061                                  
 36062                                  ;----------------------------------------------------------------------------
 36063                                  
 36064                                  ;	ds:dx points to string to output (asciz)
 36065                                  ;
 36066                                  ;	prints <badld_pre> <string> <badld_post>
 36067                                  
 36068                                  badfil:
 36069 00003353 0E                      	push	cs
 36070 00003354 07                      	pop	es
 36071                                  
 36072 00003355 89D6                    	mov	si,dx
 36073                                  badload:
 36074 00003357 BA[9337]                	mov	dx,badld_pre	; want to print config error
 36075 0000335A BB[5037]                	mov	bx,crlfm
 36076                                  prnerr:
 36077 0000335D 0E                      	push	cs
 36078 0000335E 1F                      	pop	ds ; *
 36079 0000335F E81D00                  	call	print
 36080                                  prn1:
 36081 00003362 268A14                  	mov	dl,[es:si]
 36082 00003365 08D2                    	or	dl,dl
 36083 00003367 7407                    	jz	short prn2
 36084 00003369 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 36085 0000336B CD21                    	int	21h
 36086 0000336D 46                      	inc	si
 36087 0000336E EBF2                    	jmp	short prn1
 36088                                  prn2:
 36089 00003370 89DA                    	mov	dx,bx
 36090 00003372 E80A00                  	call	print
 36091                                  	; 11/12/2022
 36092                                  	; ds = cs ; *
 36093 00003375 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 36094                                  	;cmp	byte [cs:donotshownum],1 
 36095 0000337A 7407                    	je	short prnexit
 36096                                  	
 36097                                  	; 18/12/2022
 36098                                  	;call	error_line
 36099 0000337C E9CBF3                  	jmp	error_line
 36100                                  ;prnexit:
 36101                                  	;retn
 36102                                  
 36103                                  ;----------------------------------------------------------------------------
 36104                                  
 36105                                  print:
 36106 0000337F B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 36107 00003381 CD21                    	int	21h
 36108                                  prnexit:	; 18/12/2022
 36109 00003383 C3                      	retn
 36110                                  
 36111                                  ;----------------------------------------------------------------------------
 36112                                  
 36113                                  ;  open device pointed to by dx, al has access code
 36114                                  ;   if unable to open do a device open null device instead
 36115                                  
 36116                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36117                                  	; (SYSINIT:3764h)
 36118                                  open_dev:
 36119 00003384 E80500                  	call	open_file
 36120 00003387 7309                    	jnc	short open_dev3
 36121                                  
 36122                                  open_dev1:
 36123 00003389 BA[EC33]                	mov	dx,nuldev
 36124                                  	; 18/12/2022
 36125                                  	;call	open_file
 36126                                  ;of_retn:
 36127                                  	;retn
 36128                                  	; 18/12/2022
 36129                                  	;jmp	short open_file
 36130                                  open_file:
 36131 0000338C B43D                    	mov	ah,OPEN	; 3Dh
 36132 0000338E F9                      	stc
 36133 0000338F CD21                    	int	21h
 36134                                  of_retn:	; 18/12/2022
 36135 00003391 C3                      	retn
 36136                                  
 36137                                  open_dev3:
 36138 00003392 89C3                    	mov	bx,ax			; handle from open to bx
 36139                                  	;;xor	ax,ax			; get device info
 36140                                  	;;mov	ah,IOCTL ; 44h
 36141                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36142                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36143                                  	;xor	ax,ax
 36144                                  	;mov	ah,44h	; IOCTL
 36145                                  	; 11/12/2022
 36146 00003394 B80044                  	mov	ax,4400h ; IOCTL<<8 
 36147                                  
 36148 00003397 CD21                    	int	21h
 36149                                  
 36150 00003399 F6C280                  	test	dl,10000000b ; 80h
 36151 0000339C 75F3                    	jnz	short of_retn
 36152                                  
 36153 0000339E B43E                    	mov	ah,CLOSE ; 3Eh
 36154 000033A0 CD21                    	int	21h
 36155 000033A2 EBE5                    	jmp	short open_dev1
 36156                                  
 36157                                  ;----------------------------------------------------------------------------
 36158                                  
 36159                                  ; 18/12/2022
 36160                                  %if 0
 36161                                  open_file:
 36162                                  	mov	ah,OPEN	; 3Dh
 36163                                  	stc
 36164                                  	int	21h
 36165                                  	retn
 36166                                  %endif
 36167                                  
 36168                                  ;----------------------------------------------------------------------------
 36169                                  
 36170                                  ; test int24. return back to dos with the fake user response of "fail"
 36171                                  
 36172                                  int24:
 36173 000033A4 B003                    	mov	al,3			; fail the system call
 36174 000033A6 CF                      	iret				; return back to dos.
 36175                                  
 36176                                  ; 19/04/2019 - Retro DOS v4.0
 36177                                  
 36178                                  ;----------------------------------------------------------------------------
 36179                                  ; DATA
 36180                                  ;----------------------------------------------------------------------------
 36181                                  
 36182                                  ;include copyrigh.inc			; copyright statement
 36183                                  
 36184                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36185                                  
 36186                                  ;MsDosVersion6Copyr:
 36187                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36188                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36189                                  
 36190                                  ; 22/10/2022
 36191                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36192                                  
 36193                                  ; 04/01/2023
 36194                                  %if 0
 36195                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36196                                  MsDosVersion5Copyr:
 36197                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36198                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36199                                  %endif
 36200                                  
 36201                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36202                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36203                                  ; 20/04/2019 - Retro DOS v4.0
 36204                                  ;BOOTMES:
 36205                                  ;	db      13
 36206                                  ;	db      10
 36207                                  ;	db      "MS-DOS version "
 36208                                  ;	db      MAJOR_VERSION + "0"
 36209                                  ;	db      "."
 36210                                  ;	db      (MINOR_VERSION / 10) + "0"
 36211                                  ;	db      (MINOR_VERSION % 10) + "0"
 36212                                  ;	db      13,10
 36213                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36214                                  ;	; 22/10/2022
 36215                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36216                                  ;	;
 36217                                  ;	db	0
 36218                                  
 36219                                  	; 12/12/2022
 36220 000033A7 00                      	db	0
 36221                                  ; 12/12/2022
 36222                                  BOOTMES:
 36223 000033A8 0D0A                    	db	13,10
 36224 000033AA 526574726F20444F53-     	db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36224 000033B3 2076342E3020284D6F-
 36224 000033BC 646966696564204D53-
 36224 000033C5 444F5320352E302920 
 36225 000033CE 0D0A                    	db	13,10
 36226                                  	;;db	"by Erdogan Tan [2022] "
 36227                                  	;db	"by Erdogan Tan [2023] " ; 04/01/2023
 36228 000033D0 6279204572646F6761-     	db	"by Erdogan Tan [2024] " ; 05/01/2024
 36228 000033D9 6E2054616E205B3230-
 36228 000033E2 32345D20           
 36229 000033E6 0D0A                    	db	13,10
 36230 000033E8 0D0A2400                	db	13,10,"$",0
 36231                                  
 36232 000033EC 4E554C00                nuldev:	db	"NUL",0
 36233 000033F0 434F4E00                condev:	db	"CON",0
 36234 000033F4 41555800                auxdev:	db	"AUX",0
 36235 000033F8 50524E00                prndev:	db	"PRN",0
 36236                                  
 36237                                  ;IFDEF	CONFIGPROC
 36238 000033FC 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36238 00003405 595300             
 36239                                  
 36240 00003408 413A                    cntry_drv:  db	"A:"
 36241 0000340A 5C                      cntry_root: db	"\"
 36242 0000340B 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36242 00003414 595300             
 36243                                  	    ;db	52 dup (0)
 36244 00003417 00<rep 34h>             	    times 52 db 0	
 36245                                  
 36246                                  country_file_signature:
 36247 0000344B FF434F554E545259        	db	0FFh,'COUNTRY'
 36248                                  
 36249                                  cntrycodepage_id: 
 36250 00003453 0000                    	dw	0 	
 36251                                  
 36252                                  ;ENDIF ; CONFIGPROC
 36253                                  
 36254                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36255                                  ;;ifdef	MULTI_CONFIG
 36256                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36257                                  ;tmplate: db	64                      ; must precede commnd
 36258                                  ;;endif
 36259                                  	; 02/11/2022
 36260                                  	;db	12                      ; size of commnd line (excl. null)
 36261                                  
 36262 00003455 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36262 0000345E 434F4D00           
 36263                                  	;db	51 dup (0)
 36264 00003462 00<rep 33h>             	times	51 db 0
 36265                                  ;endif
 36266                                  
 36267                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36268                                  ;;ifdef	MULTI_CONFIG
 36269                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36270                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36271                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36272                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36273                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36274                                  ;	 db	9,"A:\DOS /P",0		;
 36275                                  ;def_swchr:	
 36276                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36277                                  ;;endif
 36278                                  
 36279                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36280                                  ;command_line:
 36281                                  ;	db	2,"/P"			; default command.com args
 36282                                  ;	;db	125 dup (0)
 36283                                  ;	times	125 db 0
 36284                                  
 36285                                  pathstring:
 36286                                  	;db	64 dup (0)
 36287 00003495 00<rep 40h>             	times	64 db 0
 36288                                  
 36289                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36290                                  %if 0
 36291                                  
 36292                                  dae_flag:
 36293                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36294                                  
 36295                                  ;ifdef	MULTI_CONFIG
 36296                                  
 36297                                  MAX_MULTI_CONFIG equ 10
 36298                                  
 36299                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36300                                  
 36301                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36302                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36303                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36304                                  bLastCol:	db      0               ; ending column on status line
 36305                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36306                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36307                                                                          ; 2=disable default 2-second delay
 36308                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36309                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36310                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36311                                  bDefBlock:	db      1               ; default block #
 36312                                  bMaxBlock:	db      0               ; maxmimum block #
 36313                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36314                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36315                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36316                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36317                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36318                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36319                                  
 36320                                  szBoot:		db      "CONFIG=",0
 36321                                  szMenu:		db      "MENU",0
 36322                                  szCommon:	db      "COMMON",0
 36323                                  
 36324                                  ;endif	;MULTI_CONFIG
 36325                                  
 36326                                  comtab:	 ; label byte
 36327                                  
 36328                                  ;            cmd len    command         cmd code
 36329                                  ;            -------    -------         --------
 36330                                  
 36331                                  ;ifdef MULTI_CONFIG
 36332                                          db      1,      "[",            CONFIG_BEGIN
 36333                                  ;endif
 36334                                          db      5,      "BREAK",        CONFIG_BREAK
 36335                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36336                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36337                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36338                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36339                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36340                                          db      3,      "DOS",          CONFIG_DOS
 36341                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36342                                          db      4,      "FCBS",         CONFIG_FCBS
 36343                                          db      5,      "FILES",        CONFIG_FILES
 36344                                  ;ifdef MULTI_CONFIG
 36345                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36346                                  ;endif
 36347                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36348                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36349                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36350                                  ;ifdef MULTI_CONFIG
 36351                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36352                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36353                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36354                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36355                                  ;endif
 36356                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36357                                  ;ifdef MULTI_CONFIG
 36358                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36359                                  ;endif
 36360                                          db      3,      "REM",          CONFIG_REM
 36361                                  ;ifdef MULTI_CONFIG
 36362                                          db      3,      "SET",          CONFIG_SET
 36363                                  ;endif
 36364                                          db      5,      "SHELL",        CONFIG_SHELL
 36365                                  ;if    STACKSW
 36366                                          db      6,      "STACKS",       CONFIG_STACKS
 36367                                  ;endif
 36368                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36369                                  	db	0
 36370                                  %endif
 36371                                  
 36372                                  comtab:
 36373                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36374                                  	; (SYSINIT:38EDh)
 36375 000034D5 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36376 000034DE 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36377 000034E5 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36378 000034ED 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36378 000034F6 474855             
 36379 000034F9 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36380 00003500 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36381 00003506 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36381 0000350F 454C               
 36382 00003511 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36382 0000351A 434B4D             
 36383 0000351D 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36383 00003526 50                 
 36384 00003527 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36385 0000352F 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36386 00003538 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36387 0000353F 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36388 00003548 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36389 00003551 0352454D30              	db      3,      "REM",          CONFIG_REM
 36390 00003556 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36390 0000355F 31                 
 36391 00003560 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36392 00003565 00                      	db	0
 36393                                  
 36394                                  deviceparameters:	
 36395                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36396                                  devp.specialfunc:	; deviceparameters +
 36397 00003566 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36398                                  devp.devtype:
 36399 00003567 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36400                                  devp.devattr:
 36401 00003568 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36402                                  devp.cylinders:
 36403 0000356A 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36404                                  
 36405 0000356C 00<rep 11Eh>            	times	286	db 0
 36406                                  	
 36407 0000368A 0200                    hlim:	dw	2
 36408 0000368C 0900                    slim:	dw	9
 36409                                  
 36410 0000368E 00                      drive:	db	0
 36411                                  
 36412                                  switches:
 36413 0000368F 0000                    	dw	0
 36414                                  
 36415                                  ; the following are the recommended bpbs for the media that
 36416                                  ; we know of so far.
 36417                                  
 36418                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36419                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36420                                  
 36421                                  ; 48 tpi diskettes
 36422                                  
 36423 00003691 0002                    bpb48t	dw	512
 36424 00003693 02                      	db	2
 36425 00003694 0100                    	dw	1
 36426 00003696 02                      	db	2
 36427 00003697 7000                    	dw	112
 36428 00003699 D002                    	dw	2*9*40 ; 720
 36429 0000369B FD                      	db	0FDh
 36430 0000369C 0200                    	dw	2
 36431 0000369E 0900                    	dw	9
 36432 000036A0 0200                    	dw	2
 36433 000036A2 00000000                	dd	0
 36434 000036A6 00000000                        dd      0
 36435                                  
 36436                                  ; 96tpi diskettes
 36437                                  
 36438 000036AA 0002                    bpb96t:	dw	512
 36439 000036AC 01                      	db	1
 36440 000036AD 0100                    	dw	1
 36441 000036AF 02                      	db	2
 36442 000036B0 E000                    	dw	224
 36443 000036B2 6009                    	dw	2*15*80 ; 2400
 36444 000036B4 F9                      	db	0F9h
 36445 000036B5 0700                    	dw	7
 36446 000036B7 0F00                    	dw	15
 36447 000036B9 0200                    	dw	2
 36448 000036BB 00000000                	dd	0
 36449 000036BF 00000000                        dd      0
 36450                                  
 36451                                  ; 3 1/2 inch diskette bpb
 36452                                  
 36453 000036C3 0002                    bpb35:	dw	512
 36454 000036C5 02                      	db	2
 36455 000036C6 0100                    	dw	1
 36456 000036C8 02                      	db	2
 36457 000036C9 7000                    	dw	112
 36458 000036CB A005                    	dw	2*9*80 ; 1440
 36459 000036CD F9                      	db	0F9h
 36460 000036CE 0300                    	dw	3
 36461 000036D0 0900                    	dw	9
 36462 000036D2 0200                    	dw	2
 36463 000036D4 00000000                	dd	0
 36464 000036D8 00000000                        dd      0
 36465                                        
 36466 000036DC 0002                    bpb35h:	dw	512
 36467 000036DE 01                      	db	1
 36468 000036DF 0100                    	dw	1
 36469 000036E1 02                      	db	2
 36470 000036E2 E000                    	dw	224
 36471 000036E4 400B                    	dw	2*18*80 ; 2880
 36472 000036E6 F0                      	db	0F0h
 36473 000036E7 0900                    	dw	9
 36474 000036E9 1200                    	dw	18
 36475 000036EB 0200                    	dw	2
 36476 000036ED 00000000                	dd	0
 36477 000036F1 00000000                        dd      0
 36478                                  
 36479                                  ; m037 - BEGIN
 36480                                  
 36481 000036F5 0002                    bpb288:	dw	512
 36482 000036F7 02                      	db	2
 36483 000036F8 0100                    	dw	1
 36484 000036FA 02                      	db	2
 36485 000036FB F000                    	dw	240
 36486 000036FD 8016                    	dw	2*36*80 ; 5760
 36487 000036FF F0                      	db	0F0h
 36488 00003700 0900                    	dw	9
 36489 00003702 2400                    	dw	36
 36490 00003704 0200                    	dw	2
 36491 00003706 00000000                	dd	0
 36492 0000370A 00000000                        dd      0
 36493                                  
 36494                                  ; m037 - END
 36495                                  
 36496                                  ; 12/05/2019
 36497                                  
 36498                                  align 2
 36499                                  
 36500                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36501                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36502                                  
 36503 0000370E [9136]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36504 00003710 [AA36]                  	    dw	    bpb96t		; 96tpi drives
 36505 00003712 [C336]                  	    dw	    bpb35		; 3.5" drives
 36506                                  ; the following are not supported, so default to 3.5" media layout
 36507 00003714 [C336]                  	    dw	    bpb35		; not used - 8" drives
 36508 00003716 [C336]                  	    dw	    bpb35		; not used - 8" drives
 36509 00003718 [C336]                  	    dw	    bpb35		; not used - hard files
 36510 0000371A [C336]                  	    dw	    bpb35		; not used - tape drives
 36511 0000371C [DC36]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36512 0000371E [C336]                  	    dw	    bpb35		; ERIMO				m037
 36513 00003720 [F536]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36514                                  
 36515                                  switchlist: 
 36516 00003722 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36517                                  
 36518                                  ;----------------------------------------------------------------------------
 36519                                  ; Messages
 36520                                  ;----------------------------------------------------------------------------
 36521                                  
 36522                                  ; 19/04/2019 - Retro DOS v4.0
 36523                                  
 36524                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36525                                  
 36526 0000372B 00                      	db 	0
 36527                                  
 36528                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36529                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36530                                  
 36531                                  badopm:
 36532 0000372C 0D0A                    	db	0Dh,0Ah 
 36533 0000372E 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36533 00003737 7A656420636F6D6D61-
 36533 00003740 6E6420696E20434F4E-
 36533 00003749 4649472E535953     
 36534                                  crlfm:
 36535 00003750 0D0A24                  	db	0Dh,0Ah,'$'
 36536                                  badparm:
 36537 00003753 0D0A                    	db	0Dh,0Ah
 36538 00003755 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36538 0000375E 6E64206F7220706172-
 36538 00003767 616D6574657273202D-
 36538 00003770 2024               
 36539                                  badsiz_pre:
 36540 00003772 0D0A                    	db	0Dh,0Ah
 36541 00003774 536563746F72207369-     	db	'Sector size too large in file $'
 36541 0000377D 7A6520746F6F206C61-
 36541 00003786 72676520696E206669-
 36541 0000378F 6C652024           
 36542                                  badld_pre:
 36543 00003793 0D0A                    	db	0Dh,0Ah
 36544 00003795 426164206F72206D69-     	db	'Bad or missing $'
 36544 0000379E 7373696E672024     
 36545                                  badcom:
 36546 000037A5 436F6D6D616E642049-     	db	'Command Interpreter',0
 36546 000037AE 6E7465727072657465-
 36546 000037B7 7200               
 36547                                  badcountry:
 36548 000037B9 0D0A                    	db	0Dh,0Ah
 36549 000037BB 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36549 000037C4 6F756E74727920636F-
 36549 000037CD 6465206F7220636F64-
 36549 000037D6 6520706167650D0A24 
 36550                                  badcountrycom:
 36551 000037DF 0D0A                    	db	0Dh,0Ah
 36552 000037E1 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36552 000037EA 434F554E5452592063-
 36552 000037F3 6F6D6D616E640D0A24 
 36553                                  insufmemory:
 36554 000037FC 0D0A                    	db	0Dh,0Ah
 36555 000037FE 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36555 00003807 656E74206D656D6F72-
 36555 00003810 7920666F7220434F55-
 36555 00003819 4E5452592E53595320-
 36555 00003822 66696C650D0A24     
 36556                                  badmem:
 36557 00003829 0D0A                    	db	0Dh,0Ah
 36558 0000382B 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36558 00003834 74696F6E20746F6F20-
 36558 0000383D 6C6172676520666F72-
 36558 00003846 206D656D6F72790D0A-
 36558 0000384F 24                 
 36559                                  badblock:
 36560 00003850 0D0A                    	db	0Dh,0Ah
 36561 00003852 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36561 0000385B 626C6F636B20646576-
 36561 00003864 696365730D0A24     
 36562                                  badstack:
 36563 0000386B 0D0A                    	db	0Dh,0Ah
 36564 0000386D 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36564 00003876 5441434B2070617261-
 36564 0000387F 6D65746572730D0A24 
 36565                                  	; 18/12/2022
 36566                                  ;badorder:
 36567                                  	;db	0Dh,0Ah
 36568                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36569                                  errorcmd:
 36570 00003888 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36570 00003891 434F4E4649472E5359-
 36570 0000389A 53206C696E652024   
 36571                                  
 36572                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36573                                  %if 0
 36574                                  
 36575                                  OnOff:	db	'ON'
 36576                                  OnOff2:	db	'OFF'
 36577                                  
 36578                                  StartMsg:
 36579                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36580                                  	db	0Ah,0
 36581                                  _$PauseMsg:
 36582                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36583                                  _$CleanMsg:
 36584                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36585                                  _$InterMsg:
 36586                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36587                                  _$MenuHeader:
 36588                                  	db	0Dh,0Ah
 36589                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36590                                  	db	'  =======================',0Dh,0Ah,'$'
 36591                                  _$MenuPrmpt:
 36592                                  	db	'  Enter a choice: $'
 36593                                  _$StatusLine:
 36594                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36595                                  	db	'and AUTOEXEC.BAT [ ]$'
 36596                                  _$InterPrmpt:
 36597                                  	db	' [Y,N]?$'
 36598                                  _$YES:	db	'YES$'
 36599                                  _$NO:	db	'NO $'
 36600                                  _$TimeOut:
 36601                                  	db	'Time remaining: $'
 36602                                  badcomprmpt:
 36603                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36604                                  	db	0Dh,0Ah,'$'
 36605                                  _$AutoPrmpt:
 36606                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36607                                  
 36608                                  %endif
 36609                                  
 36610                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36611                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36612                                  
 36613                                  TooManyDrivesMsg:
 36614 000038A2 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36614 000038AB 4C6F676963616C2064-
 36614 000038B4 726976657320706173-
 36614 000038BD 74205A3A2065786973-
 36614 000038C6 7420616E642077696C-
 36614 000038CF 6C2062652069676E6F-
 36614 000038D8 7265640D0A24       
 36615                                  
 36616                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36617                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36618                                  	;db	7 dup(0)
 36619                                  
 36620                                  	;times	7 db 0
 36621                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36622                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36623                                  	; 09/12/2022
 36624                                  	;times	4 db 0
 36625                                  
 36626                                  ;----------------------------------------------------------------------------
 36627                                  		; 09/12/2022
 36628                                  		;db 0
 36629                                  
 36630                                  number3div	equ ($-SYSINIT$)
 36631                                  number3mod	equ (number3div % 16)
 36632                                  
 36633                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 36634 000038DE 00<rep 2h>              		times (16-number3mod) db 0
 36635                                  %endif
 36636                                  
 36637                                  ;---------------------------------------------------------------------------- 
 36638                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 36639                                  ;---------------------------------------------------------------------------- 
 36640                                  
 36641                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36642                                  
 36643                                  ;----------------------------------------------------------------------------
 36644                                  ; 20/04/2019 - Retro DOS v4.0
 36645                                  
 36646                                  ; 09/12/2022
 36647                                  ;
 36648                                  ;bss_start:
 36649                                  ;
 36650                                  ;ABSOLUTE bss_start
 36651                                  ;
 36652                                  ;alignb 16
 36653                                  
 36654                                  SI_end:  ; SI_end equ $
 36655                                  
 36656                                  ;----------------------------------------------------------------------------
 36657                                  
 36658                                  ;sysinitseg	ends
 36659                                  
 36660                                  ; ***************************************************************************
 36661                                  
 36662                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36663                                  
 36664                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36665                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36666                                  
 36667                                  ;----------------------------------------------------------------------------
 36668                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36669                                  ;----------------------------------------------------------------------------
 36670                                  
 36671                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36672                                  ;----------------------------------------------------------------------------
 36673                                  ;----------------------------------------------------------------------------
 36674                                  
 36675                                  ; ----------------------------------------------------------------------------
 36676                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36677                                  ; ----------------------------------------------------------------------------
 36678                                  ; 18/03/2019 - Retro DOS v4.0 
 36679                                  ; 11/06/2018 - Retro DOS v3.0 
 36680                                  
 36681                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36682                                  		;; 28/06/2019 ('msdos6.s') 
 36683                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36684                                  		
 36685                                  		; 04/02/2024
 36686                                  		; 30/01/2024
 36687                                  		; 22/01/2024 (BugFix)
 36688                                  		; 21/01/2024  	
 36689                                  		; 16/01/2024 (BugFix)
 36690                                  		; 15/01/2024
 36691                                  		; 27/09/2023 (BugFix)
 36692                                  		; 19/09/2023
 36693                                  		; 28/12/2022 (BugFix)
 36694                                  		; 22/12/2022
 36695                                  		; 21/12/2022 ('msdos5.s')
 36696 000038E0 <bin 90A2h>             		incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36697                                  	
 36698                                  ; 28/09/2023	
 36699                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36700                                  
 36701                                  align 2
 36702                                  
 36703                                  ; 21/12/2022
 36704                                  ;;END_OF_KERNEL:
 36705                                  ;END_OF_KERNEL equ $
 36706                                  
 36707                                  ; 28/09/2023
 36708                                  S3SIZE equ $-$$
 36709                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 36710                                  
 36711                                  ;=============================================================================
 36712                                  ;	END
 36713                                  ;=============================================================================
 36714                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36715                                  ; ------------------------------
 36716                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
