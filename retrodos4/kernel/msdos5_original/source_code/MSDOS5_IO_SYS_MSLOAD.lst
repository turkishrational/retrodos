MSLOAD:0000 ;
MSLOAD:0000 ; +-------------------------------------------------------------------------+
MSLOAD:0000 ; |	  This file has	been generated by The Interactive Disassembler (IDA)	|
MSLOAD:0000 ; |		  Copyright (c)	2013 Hex-Rays, <support@hex-rays.com>		|
MSLOAD:0000 ; |			     Licensed to: Freeware version			|
MSLOAD:0000 ; +-------------------------------------------------------------------------+
MSLOAD:0000 ;
MSLOAD:0000 ; Input MD5	  : B2FA03653E5C5D545327EE28B8A24356
MSLOAD:0000 ; Input CRC32 : 20FC79BF
MSLOAD:0000
MSLOAD:0000 ; ---------------------------------------------------------------------------
MSLOAD:0000 ; File Name	  : C:\Users\Erdoðan\Desktop\IO.SYS
MSLOAD:0000 ; Format	  : Binary file
MSLOAD:0000 ; Base Address: 0000h Range: 0000h - 8296h Loaded length: 00008296h
MSLOAD:0000
MSLOAD:0000		    .386
MSLOAD:0000		    .model flat
MSLOAD:0000
MSLOAD:0000 ; ===========================================================================
MSLOAD:0000
MSLOAD:0000 ; Segment type: Pure code
MSLOAD:0000 MSLOAD	    segment byte public	'CODE' use16
MSLOAD:0000		    assume cs:MSLOAD
MSLOAD:0000		    assume es:MSLOAD, ss:MSLOAD, ds:MSLOAD, fs:MSLOAD, gs:MSLOAD
MSLOAD:0000
MSLOAD:0000 START$:
MSLOAD:0000		    jmp	    SaveInputValuess
MSLOAD:0000 ; ---------------------------------------------------------------------------
MSLOAD:0003 SysVersion	    dw 5
MSLOAD:0005 MyStacks	    db 115 dup(0)	    ; msload.asm
MSLOAD:0078 DskAddr	    db 141 dup(0)	    ; DATA XREF: MSLOAD:0159r
MSLOAD:0078					    ; MSLOAD:016Cw ...
MSLOAD:0105 NumHeads	    dw 0		    ; DATA XREF: MSLOAD:0196w
MSLOAD:0105					    ; MSLOAD:023Co ...
MSLOAD:0107 ClusterSize	    db 2 dup(0)		    ; DATA XREF: MSLOAD:024Ew
MSLOAD:0107					    ; MSLOAD:02F8r ...
MSLOAD:0109 StartSecL	    dw 0		    ; DATA XREF: MSLOAD:02BFw
MSLOAD:0109					    ; MSLOAD:02D3w ...
MSLOAD:010B StartSecH	    dw 0		    ; DATA XREF: MSLOAD:02C9w
MSLOAD:010B					    ; MSLOAD:02D8w ...
MSLOAD:010D TempH	    dw 0		    ; DATA XREF: MSLOAD:028Fw
MSLOAD:010D					    ; ReadSectors+17w ...
MSLOAD:010F TempCluster	    db 2 dup(0)		    ; DATA XREF: GetNextFatEntry+2Bw
MSLOAD:010F					    ; GetNextFatEntry+3Fr ...
MSLOAD:0111 LastFatSector   db 2 dup(0FFh)	    ; DATA XREF: GetFatSector+Cr
MSLOAD:0111					    ; GetFatSector+13w
MSLOAD:0113 SectorCount	    dw 0		    ; DATA XREF: MSLOAD:030Aw
MSLOAD:0113					    ; MSLOAD:033Fw ...
MSLOAD:0115 SecPerFat	    dw 0		    ; DATA XREF: MSLOAD:019Fw
MSLOAD:0115					    ; MSLOAD:0269r
MSLOAD:0117 HiddenSectorsL  dw 0		    ; DATA XREF: MSLOAD:01B1w
MSLOAD:0117					    ; GetFatSector+1Ar
MSLOAD:0119 HiddenSectorsH  dw 0		    ; DATA XREF: MSLOAD:01CDw
MSLOAD:0119					    ; GetFatSector+1Fr
MSLOAD:011B BytesPerSec	    dw 0		    ; DATA XREF: MSLOAD:017Bw
MSLOAD:011B					    ; MSLOAD:0213r ...
MSLOAD:011D ReservSectors   db 2 dup(0)		    ; DATA XREF: MSLOAD:01A8w
MSLOAD:011D					    ; MSLOAD:0261r ...
MSLOAD:011F CurrentCluster  db 2 dup(0)		    ; DATA XREF: MSLOAD:02A6w
MSLOAD:011F					    ; MSLOAD:0314w ...
MSLOAD:0121 NextBioLocation db 2 dup(0)		    ; DATA XREF: MSLOAD:0333w
MSLOAD:0121					    ; MSLOAD:037Dr ...
MSLOAD:0123 FirstSectorL    dw 0		    ; DATA XREF: MSLOAD:SaveInputValuessw
MSLOAD:0123					    ; MSLOAD:02BAr ...
MSLOAD:0125 FirstSectorH    dw 0		    ; DATA XREF: MSLOAD:01C6w
MSLOAD:0125					    ; MSLOAD:02C4r ...
MSLOAD:0127 TotalSectorsL   dw 0		    ; DATA XREF: MSLOAD:01BAw
MSLOAD:0127					    ; MSLOAD:01D9w ...
MSLOAD:0129 TotalSectorsH   dw 0		    ; DATA XREF: MSLOAD:01E0w
MSLOAD:0129					    ; MSLOAD:0258r
MSLOAD:012B SecPerTrack	    db 2 dup(0)		    ; DATA XREF: MSLOAD:018Dw
MSLOAD:012B					    ; ReadSectors+12r ...
MSLOAD:012D BootDrive	    db 0		    ; DATA XREF: MSLOAD:0142w
MSLOAD:012D					    ; MSLOAD:03A1r ...
MSLOAD:012E Fatsize	    db 0		    ; DATA XREF: MSLOAD:0252w
MSLOAD:012E					    ; MSLOAD:029Bw ...
MSLOAD:012F MediaByte	    db 0		    ; DATA XREF: MSLOAD:013Dw
MSLOAD:012F					    ; MSLOAD:GoToBioInitr
MSLOAD:0130 EndOfFile	    db 0		    ; DATA XREF: MSLOAD:0354r
MSLOAD:0130					    ; GetNextFatEntry+7w ...
MSLOAD:0131 OrgDasdPtr	    db 4 dup(0)		    ; DATA XREF: MSLOAD:0147w
MSLOAD:0131					    ; ReadSectors+18Er	...
MSLOAD:0135 FatSegment	    db 2 dup(0)		    ; DATA XREF: MSLOAD:021Dw
MSLOAD:0135					    ; GetNextFatEntry+1r
MSLOAD:0137 SecPerCluster   db 0		    ; DATA XREF: MSLOAD:0184w
MSLOAD:0137					    ; MSLOAD:02ADr ...
MSLOAD:0138 ; ---------------------------------------------------------------------------
MSLOAD:0138
MSLOAD:0138 SaveInputValuess:			    ; CODE XREF: MSLOAD:START$j
MSLOAD:0138		    mov	    cs:FirstSectorL, bx
MSLOAD:013D		    mov	    cs:MediaByte, ch
MSLOAD:0142		    mov	    cs:BootDrive, dl
MSLOAD:0147		    mov	    word ptr cs:OrgDasdPtr, si
MSLOAD:014C		    push    ds
MSLOAD:014D		    pop	    word ptr cs:OrgDasdPtr+2
MSLOAD:0152		    xor	    cx,	cx
MSLOAD:0154		    mov	    ds,	cx	    ; ZERO
MSLOAD:0156		    assume es:nothing, ss:nothing, fs:nothing, gs:nothing
MSLOAD:0156		    push    es
MSLOAD:0157		    mov	    es,	cx
MSLOAD:0159		    assume es:MSLOAD, ss:MSLOAD, fs:MSLOAD, gs:MSLOAD
MSLOAD:0159		    mov	    si,	word ptr DskAddr ; 0000h:0078h (Int 1Eh)
MSLOAD:015D		    mov	    ds,	word ptr DskAddr+2
MSLOAD:0161		    assume ds:nothing
MSLOAD:0161		    mov	    di,	522h	    ; Sec9
MSLOAD:0164		    mov	    cx,	11
MSLOAD:0167		    cld
MSLOAD:0168		    rep	movsb
MSLOAD:016A		    push    es
MSLOAD:016B		    pop	    ds
MSLOAD:016C		    assume ds:MSLOAD
MSLOAD:016C		    mov	    word ptr DskAddr, 522h ; Sec9
MSLOAD:0172		    mov	    word ptr DskAddr+2,	ds
MSLOAD:0176		    pop	    es
MSLOAD:0177		    assume es:nothing
MSLOAD:0177		    mov	    cx,	ds:7C0Bh
MSLOAD:017B		    mov	    cs:BytesPerSec, cx
MSLOAD:0180		    mov	    cl,	ds:7C0Dh
MSLOAD:0184		    mov	    cs:SecPerCluster, cl
MSLOAD:0189		    mov	    cx,	ds:7C18h
MSLOAD:018D		    mov	    word ptr cs:SecPerTrack, cx
MSLOAD:0192		    mov	    cx,	ds:7C1Ah
MSLOAD:0196		    mov	    cs:NumHeads, cx
MSLOAD:019B		    mov	    cx,	ds:7C16h
MSLOAD:019F		    mov	    cs:SecPerFat, cx
MSLOAD:01A4		    mov	    cx,	ds:7C0Eh
MSLOAD:01A8		    mov	    word ptr cs:ReservSectors, cx
MSLOAD:01AD		    mov	    cx,	ds:7C1Ch
MSLOAD:01B1		    mov	    cs:HiddenSectorsL, cx
MSLOAD:01B6		    mov	    cx,	ds:7C13h
MSLOAD:01BA		    mov	    cs:TotalSectorsL, cx
MSLOAD:01BF		    cmp	    byte ptr ds:7C26h, 29h ; ext_boot_signature
MSLOAD:01C4		    jnz	    short relocate
MSLOAD:01C6		    mov	    cs:FirstSectorH, ax	; ax = first data sector (high)	on disk
MSLOAD:01CA		    mov	    ax,	ds:7C1Eh
MSLOAD:01CD		    mov	    cs:HiddenSectorsH, ax
MSLOAD:01D1		    cmp	    cx,	0
MSLOAD:01D4		    jnz	    short relocate
MSLOAD:01D6		    mov	    ax,	ds:7C20h
MSLOAD:01D9		    mov	    cs:TotalSectorsL, ax
MSLOAD:01DD		    mov	    ax,	ds:7C22h
MSLOAD:01E0		    mov	    cs:TotalSectorsH, ax
MSLOAD:01E4
MSLOAD:01E4 relocate:				    ; CODE XREF: MSLOAD:01C4j
MSLOAD:01E4					    ; MSLOAD:01D4j
MSLOAD:01E4		    cld
MSLOAD:01E5		    xor	    si,	si
MSLOAD:01E7		    mov	    di,	si
MSLOAD:01E9		    int	    12h		    ; MEMORY SIZE -
MSLOAD:01E9					    ; Return: AX = number of contiguous	1K blocks of memory
MSLOAD:01EB		    mov	    cl,	6
MSLOAD:01ED		    shl	    ax,	cl
MSLOAD:01EF		    xor	    bx,	bx
MSLOAD:01F1		    mov	    ds,	bx	    ; ZERO
MSLOAD:01F3		    mov	    bx,	word ptr DskAddr+44h ; 2Fh*4 (Int 2Fh)
MSLOAD:01F7		    mov	    ds,	word ptr DskAddr+46h ; 2Fh*4+2
MSLOAD:01FB		    cmp	    word ptr [bx+3], 'PR'
MSLOAD:0200		    jnz	    short SkipRPL
MSLOAD:0202		    cmp	    byte ptr [bx+5], 'L'
MSLOAD:0206		    jnz	    short SkipRPL
MSLOAD:0208		    mov	    dx,	ax
MSLOAD:020A		    mov	    ax,	4A06h	    ; (multMULT	shl 8) + multMULTRPLTOM
MSLOAD:020D		    int	    2Fh
MSLOAD:020F		    mov	    ax,	dx
MSLOAD:0211
MSLOAD:0211 SkipRPL:				    ; CODE XREF: MSLOAD:0200j
MSLOAD:0211					    ; MSLOAD:0206j
MSLOAD:0211		    mov	    cl,	4
MSLOAD:0213		    mov	    dx,	cs:BytesPerSec
MSLOAD:0218		    shr	    dx,	cl
MSLOAD:021A		    inc	    dx
MSLOAD:021B		    sub	    ax,	dx
MSLOAD:021D		    mov	    word ptr cs:FatSegment, ax
MSLOAD:0221		    mov	    dx,	offset EndOfLoader ; EndOfLoader
MSLOAD:0224		    shr	    dx,	cl
MSLOAD:0226		    inc	    dx
MSLOAD:0227		    sub	    ax,	dx
MSLOAD:0229		    mov	    es,	ax
MSLOAD:022B		    push    cs
MSLOAD:022C		    pop	    ds
MSLOAD:022D		    mov	    cx,	offset EndOfLoader ; EndOfLoader
MSLOAD:0230		    rep	movsb
MSLOAD:0232		    push    es
MSLOAD:0233		    mov	    ax,	offset SetupStack
MSLOAD:0236		    push    ax
MSLOAD:0237		    retf
MSLOAD:0238 ; ---------------------------------------------------------------------------
MSLOAD:0238
MSLOAD:0238 SetupStack:				    ; DATA XREF: MSLOAD:0233o
MSLOAD:0238		    mov	    ax,	cs	    ; Start of relocated code
MSLOAD:023A		    mov	    ss,	ax
MSLOAD:023C		    mov	    sp,	offset NumHeads	; StackPtr offset
MSLOAD:023F		    xor	    ax,	ax
MSLOAD:0241		    mov	    ds,	ax
MSLOAD:0243		    mov	    ax,	ds:7C0Bh    ; get bpb bytes/sector
MSLOAD:0246		    xor	    bx,	bx
MSLOAD:0248		    mov	    bl,	ds:7C0Dh    ; ;get sectors/cluster
MSLOAD:024C		    mul	    bx
MSLOAD:024E		    mov	    word ptr cs:ClusterSize, ax
MSLOAD:0252		    mov	    cs:Fatsize,	1   ; FAT_12_BIT (assume)
MSLOAD:0258		    mov	    dx,	cs:TotalSectorsH
MSLOAD:025D		    mov	    ax,	cs:TotalSectorsL ; DX:AX = total disk sectors
MSLOAD:0261		    sub	    ax,	word ptr cs:ReservSectors
MSLOAD:0266		    sbb	    dx,	0	    ; DX:AX = Total avail sectors
MSLOAD:0269		    mov	    bx,	cs:SecPerFat
MSLOAD:026E		    shl	    bx,	1	    ; (Assume 2	FATs)
MSLOAD:0270		    sub	    ax,	bx
MSLOAD:0272		    sbb	    dx,	0
MSLOAD:0275		    mov	    bx,	ds:7C11h    ; Root directory entry count
MSLOAD:0279		    mov	    cl,	4
MSLOAD:027B		    shr	    bx,	cl	    ; BX = Total directory sectors
MSLOAD:027D		    sub	    ax,	bx
MSLOAD:027F		    sbb	    dx,	0	    ; DX:AX = Sectors in data area
MSLOAD:0282		    xor	    cx,	cx
MSLOAD:0284		    mov	    cl,	ds:7C0Dh    ; Sectors per cluster
MSLOAD:0288		    push    ax
MSLOAD:0289		    mov	    ax,	dx
MSLOAD:028B		    xor	    dx,	dx
MSLOAD:028D		    div	    cx
MSLOAD:028F		    mov	    cs:TempH, ax    ; AX = Total number	of clusters
MSLOAD:0293		    pop	    ax
MSLOAD:0294		    div	    cx
MSLOAD:0296		    cmp	    ax,	4086	    ; 4096-10
MSLOAD:0299		    jb	    short ReadInFirstClusters ;	12 bit FAT
MSLOAD:029B		    mov	    cs:Fatsize,	4   ; FAT_16_BIT
MSLOAD:02A1
MSLOAD:02A1 ReadInFirstClusters:		    ; CODE XREF: MSLOAD:0299j
MSLOAD:02A1		    mov	    ax,	word ptr loc_517+3 ; IO.SYS First Cluster
MSLOAD:02A4		    dec	    ax		    ; Root dir buffer at 500h (segment=0)
MSLOAD:02A4					    ; IO.SYS first cluster ptr at 51Ah
MSLOAD:02A5		    dec	    ax		    ; AX = word	[51Ah] - 2
MSLOAD:02A6		    mov	    word ptr cs:CurrentCluster,	ax
MSLOAD:02AA		    mov	    ax,	3	    ; Load the 3rd and other IO.SYS sectors
MSLOAD:02AD		    div	    cs:SecPerCluster
MSLOAD:02B2		    cmp	    ah,	0
MSLOAD:02B5		    jz	    short SetNextClusterNum ; next cluster
MSLOAD:02B7		    xor	    ah,	ah
MSLOAD:02B9		    push    ax
MSLOAD:02BA		    mov	    cx,	cs:FirstSectorL
MSLOAD:02BF		    mov	    cs:StartSecL, cx
MSLOAD:02C4		    mov	    cx,	cs:FirstSectorH
MSLOAD:02C9		    mov	    cs:StartSecH, cx
MSLOAD:02CE		    mul	    cs:SecPerCluster
MSLOAD:02D3		    add	    cs:StartSecL, ax
MSLOAD:02D8		    adc	    cs:StartSecH, 0
MSLOAD:02DE		    mov	    ax,	word ptr loc_517+3 ; AX	= [51Ah] = IO.SYS 1st clust
MSLOAD:02E1		    dec	    ax
MSLOAD:02E2		    dec	    ax
MSLOAD:02E3		    xor	    bx,	bx
MSLOAD:02E5		    mov	    bl,	cs:SecPerCluster
MSLOAD:02EA		    mul	    bx
MSLOAD:02EC		    add	    cs:StartSecL, ax
MSLOAD:02F1		    adc	    cs:StartSecH, dx
MSLOAD:02F6		    pop	    ax
MSLOAD:02F7		    push    ax
MSLOAD:02F8		    mul	    word ptr cs:ClusterSize
MSLOAD:02FD		    mov	    di,	700h	    ; IO.SYS offset (segment = 0)
MSLOAD:0300		    add	    di,	ax
MSLOAD:0302		    xor	    ax,	ax
MSLOAD:0304		    mov	    es,	ax
MSLOAD:0306		    assume es:MSLOAD
MSLOAD:0306		    mov	    al,	cs:SecPerCluster ; Read	in the entire last cluster
MSLOAD:030A		    mov	    cs:SectorCount, ax
MSLOAD:030E		    call    ReadSectors
MSLOAD:0311		    pop	    ax		    ; AX = total clust read by boot loader
MSLOAD:0312		    inc	    ax		    ; AX = total clust read in now
MSLOAD:0313
MSLOAD:0313 SetNextClusterNum:			    ; CODE XREF: MSLOAD:02B5j
MSLOAD:0313		    inc	    ax		    ; AX = total clusters read in based	2
MSLOAD:0314		    add	    word ptr cs:CurrentCluster,	ax
MSLOAD:0319		    dec	    ax		    ; CurrentCluster = Last cluster read
MSLOAD:0319					    ; AX = number of clusters loaded
MSLOAD:031A
MSLOAD:031A SaveLoadedBios:
MSLOAD:031A		    push    ds
MSLOAD:031B		    mul	    word ptr cs:ClusterSize
MSLOAD:0320		    sub	    ax,	offset EndOfLoader ; (OFFSET EndOfLoader)-(OFFSET Start)
MSLOAD:0323		    mov	    cx,	ax
MSLOAD:0325		    mov	    ax,	70h	    ; Segment at 70h
MSLOAD:0328		    mov	    ds,	ax
MSLOAD:032A		    assume ds:nothing
MSLOAD:032A		    mov	    es,	ax
MSLOAD:032C		    assume es:nothing
MSLOAD:032C		    mov	    si,	offset EndOfLoader ; EndOfLoader
MSLOAD:032F		    xor	    di,	di
MSLOAD:0331		    rep	movsb
MSLOAD:0333		    mov	    word ptr cs:NextBioLocation, di
MSLOAD:0338		    pop	    ds		    ; Save where location for next read
MSLOAD:0339		    assume ds:nothing
MSLOAD:0339
MSLOAD:0339 GetContigClusters:			    ; CODE XREF: MSLOAD:039Aj
MSLOAD:0339		    xor	    ah,	ah
MSLOAD:033B		    mov	    al,	cs:SecPerCluster
MSLOAD:033F		    mov	    cs:SectorCount, ax
MSLOAD:0343		    push    cs:SectorCount
MSLOAD:0348		    call    GetNextFatEntry
MSLOAD:034B		    pop	    cs:SectorCount
MSLOAD:0350		    mov	    word ptr cs:CurrentCluster,	ax
MSLOAD:0354		    cmp	    cs:EndOfFile, 0FFh ; END_OF_FILE
MSLOAD:035A		    jz	    short GoToBioInit
MSLOAD:035C		    xor	    dx,	dx
MSLOAD:035E		    sub	    ax,	2
MSLOAD:0361		    xor	    ch,	ch
MSLOAD:0363		    mov	    cl,	cs:SecPerCluster
MSLOAD:0368		    mul	    cx
MSLOAD:036A		    add	    ax,	cs:FirstSectorL
MSLOAD:036F		    adc	    dx,	cs:FirstSectorH
MSLOAD:0374		    mov	    cs:StartSecL, ax
MSLOAD:0378		    mov	    cs:StartSecH, dx
MSLOAD:037D		    mov	    di,	word ptr cs:NextBioLocation
MSLOAD:0382		    push    cs:SectorCount
MSLOAD:0387		    mov	    ax,	70h
MSLOAD:038A		    mov	    es,	ax
MSLOAD:038C		    call    ReadSectors
MSLOAD:038F		    pop	    ax
MSLOAD:0390		    mul	    cs:BytesPerSec
MSLOAD:0395		    add	    word ptr cs:NextBioLocation, ax
MSLOAD:039A		    jmp	    short GetContigClusters
MSLOAD:039C ; ---------------------------------------------------------------------------
MSLOAD:039C
MSLOAD:039C GoToBioInit:			    ; CODE XREF: MSLOAD:035Aj
MSLOAD:039C		    mov	    ch,	cs:MediaByte
MSLOAD:03A1		    mov	    dl,	cs:BootDrive
MSLOAD:03A6		    mov	    bx,	cs:FirstSectorL
MSLOAD:03AB		    mov	    ax,	cs:FirstSectorH
MSLOAD:03AF		    jmp	    far	ptr 70h:0   ; Far jump to IoSysAddr (DOSBIOS)
MSLOAD:03B4
MSLOAD:03B4 ; =============== S	U B R O	U T I N	E =======================================
MSLOAD:03B4
MSLOAD:03B4
MSLOAD:03B4 ReadSectors	    proc near		    ; CODE XREF: MSLOAD:030Ep
MSLOAD:03B4					    ; MSLOAD:038Cp ...
MSLOAD:03B4
MSLOAD:03B4 ; FUNCTION CHUNK AT	MSLOAD:0532 SIZE 0000001E BYTES
MSLOAD:03B4
MSLOAD:03B4		    mov	    cx,	5
MSLOAD:03B7
MSLOAD:03B7 TryRead:				    ; CODE XREF: ReadSectors+85j
MSLOAD:03B7		    push    cx
MSLOAD:03B8		    mov	    ax,	cs:StartSecL
MSLOAD:03BC		    mov	    dx,	cs:StartSecH
MSLOAD:03C1		    push    ax
MSLOAD:03C2		    mov	    ax,	dx
MSLOAD:03C4		    xor	    dx,	dx
MSLOAD:03C6		    div	    word ptr cs:SecPerTrack
MSLOAD:03CB		    mov	    cs:TempH, ax
MSLOAD:03CF		    pop	    ax
MSLOAD:03D0		    div	    word ptr cs:SecPerTrack
MSLOAD:03D5		    mov	    bx,	word ptr cs:SecPerTrack
MSLOAD:03DA		    sub	    bx,	dx
MSLOAD:03DC		    mov	    si,	bx
MSLOAD:03DE		    cmp	    cs:SectorCount, si
MSLOAD:03E3		    jnb	    short GotLength
MSLOAD:03E5		    mov	    si,	cs:SectorCount
MSLOAD:03EA
MSLOAD:03EA GotLength:				    ; CODE XREF: ReadSectors+2Fj
MSLOAD:03EA		    inc	    dl
MSLOAD:03EC		    mov	    bl,	dl
MSLOAD:03EE		    mov	    dx,	cs:TempH
MSLOAD:03F3		    push    ax
MSLOAD:03F4		    mov	    ax,	dx
MSLOAD:03F6		    xor	    dx,	dx
MSLOAD:03F8		    div	    cs:NumHeads
MSLOAD:03FD		    mov	    cs:TempH, ax
MSLOAD:0401		    pop	    ax
MSLOAD:0402		    div	    cs:NumHeads
MSLOAD:0407		    mov	    dh,	dl
MSLOAD:0409		    mov	    cl,	6
MSLOAD:040B		    shl	    ah,	cl
MSLOAD:040D		    or	    ah,	bl
MSLOAD:040F		    mov	    ch,	al
MSLOAD:0411		    mov	    cl,	ah
MSLOAD:0413		    mov	    bx,	di
MSLOAD:0415		    mov	    dl,	cs:BootDrive
MSLOAD:041A		    mov	    ax,	si
MSLOAD:041C		    mov	    ah,	2
MSLOAD:041E		    push    ax
MSLOAD:041F		    push    di
MSLOAD:0420		    int	    13h		    ; DISK - READ SECTORS INTO MEMORY
MSLOAD:0420					    ; AL = number of sectors to	read, CH = track, CL = sector
MSLOAD:0420					    ; DH = head, DL = drive, ES:BX -> buffer to	fill
MSLOAD:0420					    ; Return: CF set on	error, AH = status, AL = number	of sectors read
MSLOAD:0422		    pop	    di
MSLOAD:0423		    pop	    ax
MSLOAD:0424		    pop	    cx
MSLOAD:0425		    jnb	    short ReadOk
MSLOAD:0427		    mov	    bx,	di
MSLOAD:0429		    xor	    ah,	ah
MSLOAD:042B		    push    cx
MSLOAD:042C		    mov	    dl,	cs:BootDrive
MSLOAD:0431		    push    di
MSLOAD:0432		    int	    13h		    ; DISK - RESET DISK	SYSTEM
MSLOAD:0432					    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
MSLOAD:0434		    pop	    di
MSLOAD:0435		    pop	    cx
MSLOAD:0436		    dec	    cx
MSLOAD:0437		    jz	    short ReadError
MSLOAD:0439		    jmp	    TryRead
MSLOAD:043C ; ---------------------------------------------------------------------------
MSLOAD:043C
MSLOAD:043C ReadError:				    ; CODE XREF: ReadSectors+83j
MSLOAD:043C		    jmp	    ErrorOut
MSLOAD:043F ; ---------------------------------------------------------------------------
MSLOAD:043F
MSLOAD:043F ReadOk:				    ; CODE XREF: ReadSectors+71j
MSLOAD:043F		    xor	    ah,	ah
MSLOAD:0441		    sub	    cs:SectorCount, ax
MSLOAD:0446		    jz	    short EndRead
MSLOAD:0448		    add	    cs:StartSecL, ax
MSLOAD:044D		    adc	    cs:StartSecH, 0
MSLOAD:0453		    xor	    bx,	bx
MSLOAD:0455		    mov	    bl,	al
MSLOAD:0457		    mov	    ax,	cs:BytesPerSec
MSLOAD:045B		    mul	    bx
MSLOAD:045B ReadSectors	    endp
MSLOAD:045B
MSLOAD:045D		    add	    di,	ax
MSLOAD:045F		    jmp	    ReadSectors
MSLOAD:0462 ; ---------------------------------------------------------------------------
MSLOAD:0462
MSLOAD:0462 EndRead:				    ; CODE XREF: ReadSectors+92j
MSLOAD:0462		    retn
MSLOAD:0463
MSLOAD:0463 ; =============== S	U B R O	U T I N	E =======================================
MSLOAD:0463
MSLOAD:0463
MSLOAD:0463 GetNextFatEntry proc near		    ; CODE XREF: MSLOAD:0348p
MSLOAD:0463		    push    es
MSLOAD:0464		    mov	    ax,	word ptr cs:FatSegment
MSLOAD:0468		    mov	    es,	ax
MSLOAD:046A		    assume es:nothing
MSLOAD:046A		    mov	    cs:EndOfFile, 0FFh
MSLOAD:0470		    mov	    ax,	word ptr cs:CurrentCluster
MSLOAD:0474		    cmp	    cs:Fatsize,	1
MSLOAD:047A		    jnz	    short Got16Bit
MSLOAD:047C		    mov	    si,	ax
MSLOAD:047E		    shr	    ax,	1
MSLOAD:0480		    add	    si,	ax
MSLOAD:0482		    push    dx
MSLOAD:0483		    xor	    dx,	dx
MSLOAD:0485		    call    GetFatSector
MSLOAD:0488		    pop	    dx
MSLOAD:0489		    jnz	    short ClusterOk
MSLOAD:048B		    mov	    al,	es:[bx]
MSLOAD:048E		    mov	    cs:TempCluster, al
MSLOAD:0492		    inc	    si
MSLOAD:0493		    push    dx
MSLOAD:0494		    xor	    dx,	dx
MSLOAD:0496		    call    GetFatSector
MSLOAD:0499		    pop	    dx
MSLOAD:049A		    mov	    al,	es:0
MSLOAD:049E		    mov	    cs:TempCluster+1, al
MSLOAD:04A2		    mov	    ax,	word ptr cs:TempCluster
MSLOAD:04A6		    jmp	    short EvenOdd
MSLOAD:04A8 ; ---------------------------------------------------------------------------
MSLOAD:04A8
MSLOAD:04A8 ClusterOk:				    ; CODE XREF: GetNextFatEntry+26j
MSLOAD:04A8		    mov	    ax,	es:[bx]
MSLOAD:04AB
MSLOAD:04AB EvenOdd:				    ; CODE XREF: GetNextFatEntry+43j
MSLOAD:04AB		    test    word ptr cs:CurrentCluster,	1
MSLOAD:04B2		    jnz	    short OddResult
MSLOAD:04B4		    and	    ax,	0FFFh
MSLOAD:04B7		    jmp	    short TestEOF
MSLOAD:04B9 ; ---------------------------------------------------------------------------
MSLOAD:04B9
MSLOAD:04B9 OddResult:				    ; CODE XREF: GetNextFatEntry+4Fj
MSLOAD:04B9		    mov	    cl,	4
MSLOAD:04BB		    shr	    ax,	cl
MSLOAD:04BD
MSLOAD:04BD TestEOF:				    ; CODE XREF: GetNextFatEntry+54j
MSLOAD:04BD		    cmp	    ax,	0FF8h
MSLOAD:04C0		    jnb	    short GotClusterDone
MSLOAD:04C2		    jmp	    short NotLastCluster
MSLOAD:04C4 ; ---------------------------------------------------------------------------
MSLOAD:04C4
MSLOAD:04C4 Got16Bit:				    ; CODE XREF: GetNextFatEntry+17j
MSLOAD:04C4		    push    dx
MSLOAD:04C5		    xor	    dx,	dx
MSLOAD:04C7		    shl	    ax,	1
MSLOAD:04C9		    adc	    dx,	0
MSLOAD:04CC		    mov	    si,	ax
MSLOAD:04CE		    call    GetFatSector
MSLOAD:04D1		    pop	    dx
MSLOAD:04D2		    mov	    ax,	es:[bx]
MSLOAD:04D5		    cmp	    ax,	0FFF8h
MSLOAD:04D8		    jnb	    short GotClusterDone
MSLOAD:04DA
MSLOAD:04DA NotLastCluster:			    ; CODE XREF: GetNextFatEntry+5Fj
MSLOAD:04DA		    mov	    cs:EndOfFile, 0
MSLOAD:04E0
MSLOAD:04E0 GotClusterDone:			    ; CODE XREF: GetNextFatEntry+5Dj
MSLOAD:04E0					    ; GetNextFatEntry+75j
MSLOAD:04E0		    pop	    es
MSLOAD:04E1		    retn
MSLOAD:04E1 GetNextFatEntry endp
MSLOAD:04E1
MSLOAD:04E2
MSLOAD:04E2 ; =============== S	U B R O	U T I N	E =======================================
MSLOAD:04E2
MSLOAD:04E2
MSLOAD:04E2 GetFatSector    proc near		    ; CODE XREF: GetNextFatEntry+22p
MSLOAD:04E2					    ; GetNextFatEntry+33p ...
MSLOAD:04E2		    push    ax
MSLOAD:04E3		    push    si
MSLOAD:04E4		    push    di
MSLOAD:04E5		    mov	    ax,	si
MSLOAD:04E7		    mov	    cx,	cs:BytesPerSec
MSLOAD:04EC		    div	    cx
MSLOAD:04EE		    cmp	    ax,	word ptr cs:LastFatSector
MSLOAD:04F3		    jz	    short SplitChk
MSLOAD:04F5		    mov	    word ptr cs:LastFatSector, ax
MSLOAD:04F9		    push    dx
MSLOAD:04FA		    xor	    dx,	dx
MSLOAD:04FC		    add	    ax,	cs:HiddenSectorsL
MSLOAD:0501		    adc	    dx,	cs:HiddenSectorsH
MSLOAD:0506		    add	    ax,	word ptr cs:ReservSectors
MSLOAD:050B		    adc	    dx,	0
MSLOAD:050E		    mov	    cs:StartSecL, ax
MSLOAD:0512		    mov	    cs:StartSecH, dx
MSLOAD:0517
MSLOAD:0517 loc_517:				    ; DATA XREF: MSLOAD:ReadInFirstClustersr
MSLOAD:0517					    ; MSLOAD:02DEr
MSLOAD:0517		    mov	    cs:SectorCount, 1
MSLOAD:051E		    xor	    di,	di
MSLOAD:0520		    call    ReadSectors
MSLOAD:0523		    pop	    dx
MSLOAD:0524		    mov	    cx,	cs:BytesPerSec
MSLOAD:0529
MSLOAD:0529 SplitChk:				    ; CODE XREF: GetFatSector+11j
MSLOAD:0529		    dec	    cx
MSLOAD:052A		    cmp	    dx,	cx
MSLOAD:052C		    mov	    bx,	dx
MSLOAD:052E		    pop	    di
MSLOAD:052F		    pop	    si
MSLOAD:0530		    pop	    ax
MSLOAD:0531
MSLOAD:0531 ec35_flag:
MSLOAD:0531		    retn
MSLOAD:0531 GetFatSector    endp
MSLOAD:0531
MSLOAD:0532 ; ---------------------------------------------------------------------------
MSLOAD:0532 ; START OF FUNCTION	CHUNK FOR ReadSectors
MSLOAD:0532
MSLOAD:0532 ErrorOut:				    ; CODE XREF: ReadSectors:ReadErrorj
MSLOAD:0532		    push    cs
MSLOAD:0533		    pop	    ds
MSLOAD:0534		    assume ds:MSLOAD
MSLOAD:0534		    mov	    si,	offset NonSystemDiskMsg	; "\r\nNon-System disk or disk error\r\nRe"...
MSLOAD:0537		    call    WriteTTY
MSLOAD:053A		    xor	    ah,	ah
MSLOAD:053C		    int	    16h		    ; KEYBOARD - READ CHAR FROM	BUFFER,	WAIT IF	EMPTY
MSLOAD:053C					    ; Return: AH = scan	code, AL = character
MSLOAD:053E		    xor	    bx,	bx
MSLOAD:0540		    mov	    ds,	bx
MSLOAD:0542		    les	    bx,	dword ptr OrgDasdPtr
MSLOAD:0546		    mov	    si,	offset DskAddr ;  (Int 1Eh)
MSLOAD:0549		    mov	    [si], bx
MSLOAD:054B		    mov	    word ptr [si+2], es
MSLOAD:054E		    int	    19h		    ; DISK BOOT
MSLOAD:054E ; END OF FUNCTION CHUNK FOR	ReadSectors ; causes reboot of disk system
MSLOAD:0550
MSLOAD:0550 ; =============== S	U B R O	U T I N	E =======================================
MSLOAD:0550
MSLOAD:0550
MSLOAD:0550 WriteTTY	    proc near		    ; CODE XREF: ReadSectors+183p
MSLOAD:0550					    ; WriteTTY+Bj
MSLOAD:0550		    lodsb
MSLOAD:0551		    or	    al,	al
MSLOAD:0553		    jz	    short EndWrite
MSLOAD:0555		    mov	    ah,	0Eh
MSLOAD:0557		    mov	    bl,	7
MSLOAD:0559		    int	    10h		    ; -	VIDEO -	WRITE CHARACTER	AND ADVANCE CURSOR (TTY	WRITE)
MSLOAD:0559					    ; AL = character, BH = display page	(alpha modes)
MSLOAD:0559					    ; BL = foreground color (graphics modes)
MSLOAD:055B		    jmp	    short WriteTTY
MSLOAD:055D ; ---------------------------------------------------------------------------
MSLOAD:055D
MSLOAD:055D EndWrite:				    ; CODE XREF: WriteTTY+3j
MSLOAD:055D		    retn
MSLOAD:055D WriteTTY	    endp
MSLOAD:055D
MSLOAD:055D ; ---------------------------------------------------------------------------
MSLOAD:055E NonSystemDiskMsg db	0Dh,0Ah		    ; DATA XREF: ReadSectors+180o
MSLOAD:055E		    db 'Non-System disk or disk error',0Dh,0Ah
MSLOAD:055E		    db 'Replace and press any key when ready',0Dh,0Ah,0
MSLOAD:05A6 EndOfLoader	    db ?
MSLOAD:05A6 MSLOAD	    ends
MSLOAD:05A6
MSLOAD:05A6
MSLOAD:05A6		    end
