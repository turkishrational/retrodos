     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 27/09/2023	((Previous: 19/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9C878                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268 000000C1 526574726F20444F53-     	db	"Retro DOS v4.0 by Erdogan Tan [2023]"	; 27/09/2023
  3268 000000CA 2076342E3020627920-
  3268 000000D3 4572646F67616E2054-
  3268 000000DC 616E205B323032335D 
  3269 000000E5 0D0A2400                	db	13,10,"$", 0 
  3270                                  
  3271                                  ;============================================================================
  3272                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3273                                  ;============================================================================
  3274                                  ; 11/07/2018 - Retro DOS v3.0
  3275                                  
  3276                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3277 000000E9 90                      align 2
  3278                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3279                                  
  3280                                  ; Standard Functions
  3281                                  ;DISPATCH  LABEL WORD
  3282                                  DISPATCH:
  3283                                  	; 16/07/2018 - Retro DOS v3.0
  3284                                  	; (MSDOS 3.3)
  3285                                  
  3286                                  ; 29/04/2019
  3287                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3288                                  
  3289                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3290                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3291                                  
  3292 000000EA [2863]                          short_addr  _$ABORT			    ;  0      0
  3293 000000EC [E616]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3294 000000EE [EF16]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3295 000000F0 [A117]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3296 000000F2 [BC17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3297 000000F4 [C217]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3298 000000F6 [2D16]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3299 000000F8 [5916]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3300 000000FA [FD13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3301 000000FC [5714]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3302 000000FE [6314]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3303 00000100 [D617]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3304 00000102 [E017]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3305 00000104 [1F10]                          short_addr  _$DISK_RESET		    ; 13      D
  3306 00000106 [F40E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3307 00000108 [BC1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3308 0000010A [8618]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3309 0000010C [CE1F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3310 0000010E [6020]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3311 00000110 [2518]                          short_addr  _$FCB_DELETE		    ; 19     13
  3312 00000112 [BA1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3313 00000114 [BF1F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3314 00000116 [A01F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3315 00000118 [F618]                          short_addr  _$FCB_RENAME		    ; 23     17
  3316                                  	; 16/07/2018
  3317                                          ;short_addr _CPMFUNC			    ; 24     18	
  3318 0000011A [A006]                          short_addr  NO_OP			    ; 24     18
  3319 0000011C [EF0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3320 0000011E [E40E]                          short_addr  _$SET_DMA			    ; 26     1A
  3321                                  
  3322                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3323                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3324                                  ;                                                                          ;
  3325 00000120 [AB0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3326 00000122 [AD0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3327                                  ;                                                                          ;
  3328                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3329                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3330                                  
  3331                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3332                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3333                                  
  3334                                  ; 08/07/2018 - Retro DOS v3.0
  3335                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3336                                  
  3337 00000124 [A006]                  	short_addr  NO_OP			    ; 29     1D
  3338 00000126 [A006]                  	short_addr  NO_OP			    ; 30     1E
  3339                                  
  3340                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3341                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3342                                  ;                                                                          ;
  3343 00000128 [EF0F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3344                                  ;                                                                          ;
  3345                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3346                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3347                                          ;short_addr _CPMFUNC			    ; 32     20
  3348                                  
  3349                                  ; 08/07/2018 - Retro DOS v3.0
  3350                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3351                                  
  3352 0000012A [A006]                  	short_addr  NO_OP			    ; 32     20
  3353                                  
  3354 0000012C [C41F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3355 0000012E [C91F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3356 00000130 [3718]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3357 00000132 [0D18]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3358                                  
  3359                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3360                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3361                                  
  3362                                  ; Extended Functions
  3363 00000134 [160F]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3366                                  ;                                                                          ;
  3367 00000136 [2B11]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3368                                  ;                                                                          ;
  3369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3371 00000138 [B51F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3372 0000013A [B01F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3373 0000013C [A00F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3374 0000013E [B60A]                          short_addr  _$GET_DATE                      ; 42     2A
  3375 00000140 [D30A]                          short_addr  _$SET_DATE                      ; 43     2B
  3376 00000142 [F20A]                          short_addr  _$GET_TIME                      ; 44     2C
  3377 00000144 [030B]                          short_addr  _$SET_TIME                      ; 45     2D
  3378 00000146 [C20C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3379                                  
  3380                                  ; Extended functionality group
  3381 00000148 [D00E]                          short_addr  _$GET_DMA                       ; 47     2F
  3382 0000014A [980C]                          short_addr  _$GET_VERSION                   ; 48     30
  3383 0000014C [CC62]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3384                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3385                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3386                                  ;                                                                          ;
  3387 0000014E [F10F]                          short_addr  _$GET_DPB			    ; 50     32
  3388                                  ;                                                                          ;
  3389                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3390                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3391 00000150 [A102]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3392 00000152 [D70F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3393 00000154 [060F]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3394 00000156 [A70E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3395 00000158 [440F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3396 0000015A [C90C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3397                                  ; XENIX CALLS
  3398                                  ;   Directory Group
  3399 0000015C [BA22]                          short_addr  _$MKDIR			    ; 57     39
  3400 0000015E [0622]                          short_addr  _$RMDIR			    ; 58     3A
  3401 00000160 [4122]                          short_addr  _$CHDIR			    ; 59     3B
  3402                                  ;   File Group
  3403 00000162 [F070]                          short_addr  _$CREAT			    ; 60     3C
  3404 00000164 [1970]                          short_addr  _$OPEN			    ; 61     3D
  3405 00000166 [4568]                          short_addr  _$CLOSE		 	    ; 62     3E
  3406 00000168 [5669]                          short_addr  _$READ			    ; 63     3F
  3407 0000016A [BC69]                          short_addr  _$WRITE			    ; 64     40
  3408 0000016C [4071]                          short_addr  _$UNLINK			    ; 65     41
  3409 0000016E [C169]                          short_addr  _$LSEEK			    ; 66     42
  3410 00000170 [FD70]                          short_addr  _$CHMOD			    ; 67     43
  3411 00000172 [1B23]                          short_addr  _$IOCTL			    ; 68     44
  3412 00000174 [766A]                          short_addr  _$DUP			    ; 69     45
  3413 00000176 [946A]                          short_addr  _$DUP2			    ; 70     46
  3414 00000178 [9721]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3415                                  ;   Memory Group
  3416 0000017A [BF63]                          short_addr  _$ALLOC			    ; 72     48
  3417 0000017C [3965]                          short_addr  _$DEALLOC                       ; 73     49
  3418 0000017E [1565]                          short_addr  _$SETBLOCK                      ; 74     4A
  3419                                  ;   Process Group
  3420 00000180 [A65C]                          short_addr  _$EXEC			    ; 75     4B
  3421 00000182 [0463]                          short_addr  _$EXIT			    ; 76     4C
  3422 00000184 [9C5C]                          short_addr  _$WAIT			    ; 77     4D
  3423 00000186 [D320]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3424                                  ;   Special Group
  3425 00000188 [2921]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3426                                  ; SPECIAL SYSTEM GROUP
  3427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3428                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3429                                  ;                                                                          ;
  3430 0000018A [F802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3431 0000018C [0403]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3432 0000018E [E30F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3433 00000190 [5410]                          short_addr  _$SETDPB			    ; 83     53
  3434                                  ;                                                                          ;
  3435                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3436                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3437 00000192 [BD0C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3440                                  ;                                                                          ;
  3441 00000194 [1A11]                          short_addr  _$DUP_PDB                       ; 85     55
  3442                                  ;                                                                          ;
  3443                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3445 00000196 [6671]                          short_addr  _$RENAME			    ; 86     56
  3446 00000198 [286A]                          short_addr  _$FILE_TIMES                    ; 87     57
  3447 0000019A [6F65]                          short_addr  _$ALLOCOPER                     ; 88     58
  3448                                  
  3449                                  ; 08/07/2018 - Retro DOS v3.0
  3450                                  ; -------------------------------------------------------------------------;
  3451                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3452                                  
  3453                                  ; Network extention system calls
  3454 0000019C [580F]                          short_addr  _$GetExtendedError              ; 89     59
  3455 0000019E [F171]                          short_addr  _$CreateTempFile                ; 90     5A
  3456 000001A0 [D971]                          short_addr  _$CreateNewFile                 ; 91     5B
  3457 000001A2 [D273]                          short_addr  _$LockOper                      ; 92     5C
  3458 000001A4 [5566]                          short_addr  _$ServerCall                    ; 93     5D
  3459 000001A6 [5E6B]                          short_addr  _$UserOper                      ; 94     5E
  3460 000001A8 [C36A]                          short_addr  _$AssignOper                    ; 95     5F
  3461 000001AA [B36F]                          short_addr  _$NameTrans                     ; 96     60
  3462 000001AC [A006]                  	short_addr  NO_OP			    ; 97     61
  3463 000001AE [0403]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3464                                  ; the next call is reserved for hangool sys call
  3465                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3466 000001B0 [850F]                  	short_addr  _$ECS_Call			    ; 99     63
  3467                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3470                                  ;                                                                          ;
  3471 000001B2 [1003]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3472                                  ;                                                                          ;
  3473                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3474                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3475 000001B4 [540D]                          short_addr  _$GetExtCntry                   ; 101    65
  3476 000001B6 [530E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3477 000001B8 [9268]                          short_addr  _$ExtHandle                     ; 103    67
  3478 000001BA [7868]                          short_addr  _$COMMIT                        ; 104    68
  3479                                  
  3480                                  ; 08/07/2018
  3481                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3482                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3483                                  
  3484                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3485 000001BC [1D12]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3486 000001BE [7868]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3487 000001C0 [A006]                  	short_addr  NO_OP                           ; 107    6B   
  3488                                  						    ; IFS_IOCTL no longer 
  3489                                  						    ; supported
  3490 000001C2 [8772]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3491                                  
  3492                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3493                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3494                                  ;                                                                          ;
  3495                                  ;ifdef ROMEXEC
  3496                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3497                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3498                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3499                                  ;endif
  3500                                  ;                                                                          ;
  3501                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3502                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3503                                  
  3504                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3505                                  
  3506                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  ; 08/07/2018 - Retro DOS v3.0
  3509                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3510                                  
  3511                                  ;	If 	Installed
  3512                                  
  3513                                  align 2
  3514                                  
  3515                                  ;PUBLIC FOO
  3516                                  
  3517                                  FOO:	; LABEL WORD
  3518 000001C4 [5D07]                          short_addr  Leave2F
  3519                                  
  3520 000001C6 [C801]                  DTab:	DW  DOSTable
  3521                                  
  3522                                  	;PUBLIC FOO,DTAB
  3523                                  
  3524                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3525                                  
  3526                                  ; 29/04/2019
  3527                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3528                                  
  3529                                  
  3530                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3531                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3532                                         
  3533                                  DOSTable:  ; LABEL  WORD
  3534 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3535 000001C9 [8C09]                          short_addr  DOSInstall          ;   0 install check
  3536 000001CB [DD2F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3537 000001CD [390F]                          short_addr  RECSET              ;   2   RECSET
  3538 000001CF [8609]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3539 000001D1 [BC51]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3540 000001D3 [F116]                          short_addr  OUTT                ;   5   OUT
  3541 000001D5 [9354]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3542 000001D7 [365A]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3543 000001D9 [DB30]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3544 000001DB [E85B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3545 000001DD [8674]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3546 000001DF [232D]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3547 000001E1 [0D2D]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3548 000001E3 [4A0B]                          short_addr  DATE16              ;   13  DATE16
  3549 000001E5 [8912]                          short_addr  Idle		;   14      empty slot
  3550 000001E7 [2F5A]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3551 000001E9 [8912]                          short_addr  Idle		;   16      empty slot
  3552 000001EB [5612]                          short_addr  StrCpy              ;   17  StrCpy
  3553 000001ED [6E12]                          short_addr  StrLen              ;   18  StrLen
  3554 000001EF [6751]                          short_addr  UCase		;   19  UCase
  3555 000001F1 [735A]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3556 000001F3 [BF5B]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3557 000001F5 [C067]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3558 000001F7 [236C]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3559 000001F9 [CA04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3560 000001FB [CE6B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3561 000001FD [D86F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3562 000001FF [F40B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3563 00000201 [8E0C]                          short_addr  DSUM                ;   28  DSUM
  3564 00000203 [E80B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3565 00000205 [3412]                          short_addr  StrCmp              ;   30  StrCmp
  3566 00000207 [116B]                          short_addr  InitCDS             ;   31  initcds
  3567 00000209 [8D67]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3568 0000020B [B36F]                          short_addr  _$NameTrans		;   33  $NameTrans
  3569 0000020D [C706]                          short_addr  CAL_LK              ;   34  CAL_LK
  3570 0000020F [C942]                          short_addr  DEVNAME             ;   35  DEVNAME
  3571 00000211 [8912]                          short_addr  Idle                ;   36  Idle
  3572 00000213 [7C12]                          short_addr  DStrLen             ;   37  DStrLen
  3573 00000215 [2D13]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3574 00000217 [4568]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3575 00000219 [3313]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3576 0000021B [5669]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3577 0000021D [ED12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3578 0000021F [7013]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3579 00000221 [5F13]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3580 00000223 [8D13]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3581                                          
  3582                                  	; 29/04/2019 - Retro DOS v4.0
  3583 00000225 [9213]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3584                                  
  3585 00000227 [A006]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3586                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3587                                  
  3588                                  DOSTableEnd:  ; LABEL BYTE
  3589                                  
  3590                                  	;ENDIF
  3591                                  
  3592                                  ; ----------------------------------------------------------------------------
  3593                                  ; BREAK   <Copyright notice and version>
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  
  3596                                  ;CODSTRT EQU	$
  3597                                  
  3598                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3599                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3600                                  
  3601                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3602                                  ;       module. The reason is so that the data alignments are the same in
  3603                                  ;       IBM-DOS and MS-DOS up through header.
  3604                                  
  3605                                  	;PUBLIC	HEADER
  3606                                  
  3607                                  HEADER:	; LABEL	BYTE
  3608                                          ;IF	DEBUG
  3609                                          ;DB	13,10,"Debugging DOS version "
  3610                                          ;DB	MAJOR_VERSION + "0"
  3611                                          ;DB	"."
  3612                                          ;DB	(MINOR_VERSION / 10) + "0"
  3613                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3614                                          ;ENDIF
  3615                                  
  3616                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3617                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3618                                  %if 0
  3619                                          ;IF	NOT IBM
  3620                                          DB	13,10,"MS-DOS version "
  3621                                          DB	MAJOR_VERSION + "0"
  3622                                          DB	"."
  3623                                          DB	(MINOR_VERSION / 10) + "0"
  3624                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3625                                          DB	(MINOR_VERSION % 10) + "0"
  3626                                  
  3627                                          ;IF	HIGHMEM
  3628                                          ;DB	"H"
  3629                                          ;ENDIF
  3630                                  
  3631                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3632                                  	; 30/04/2019 - Retro DOS v4.0
  3633                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3634                                  
  3635                                  	;ENDIF
  3636                                  
  3637                                  %endif
  3638                                  
  3639                                  ;IF DEBUG
  3640                                  ;	DB	13,10,"$"
  3641                                  ;ENDIF
  3642                                  
  3643                                  ;include copyrigh.inc
  3644                                  
  3645                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3646                                  
  3647                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3648                                  	;DB	"Licensed Material - Property of Microsoft "
  3649                                  	;DB	"All rights reserved "
  3650                                  
  3651                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3652                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3653                                  
  3654                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3655                                  ms_copyright:
  3656 00000229 4D5320444F53205665-     	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3656 00000232 7273696F6E20352E30-
  3656 0000023B 3020284329436F7079-
  3656 00000244 726967687420313938-
  3656 0000024D 312D31393931204D69-
  3656 00000256 63726F736F66742043-
  3656 0000025F 6F727020           
  3657 00000263 4C6963656E73656420-     	db	'Licensed Material - Property of Microsoft '
  3657 0000026C 4D6174657269616C20-
  3657 00000275 2D2050726F70657274-
  3657 0000027E 79206F66204D696372-
  3657 00000287 6F736F667420       
  3658 0000028D 416C6C207269676874-     	db	'All rights reserved '
  3658 00000296 732072657365727665-
  3658 0000029F 6420               
  3659                                  
  3660                                  ;============================================================================
  3661                                  ; MSCODE.ASM
  3662                                  ;============================================================================
  3663                                  
  3664                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3665                                  ; 03/03/2018
  3666                                  
  3667                                  ;
  3668                                  ; MSCODE.ASM -- MSDOS code
  3669                                  ;
  3670                                  
  3671                                  ;INCLUDE DOSSEG.ASM
  3672                                  ;INCLUDE STDSW.ASM
  3673                                  
  3674                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3675                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3676                                  
  3677                                  ;.xcref
  3678                                  ;INCLUDE DOSSYM.ASM
  3679                                  ;INCLUDE DEVSYM.ASM
  3680                                  ;.cref
  3681                                  ;.list
  3682                                  
  3683                                  ;IFNDEF  KANJI
  3684                                  ;KANJI   EQU     0       ; FALSE
  3685                                  ;ENDIF
  3686                                  
  3687                                  ;IFNDEF  IBM
  3688                                  ;IBM     EQU     0
  3689                                  ;ENDIF
  3690                                  
  3691                                  ;IFNDEF  HIGHMEM
  3692                                  ;HIGHMEM  EQU     0
  3693                                  ;ENDIF
  3694                                  
  3695                                          ;i_need  USER_SP,WORD
  3696                                          ;i_need  USER_SS,WORD
  3697                                          ;i_need  SAVEDS,WORD
  3698                                          ;i_need  SAVEBX,WORD
  3699                                          ;i_need  INDOS,BYTE
  3700                                          ;i_need  NSP,WORD
  3701                                          ;i_need  NSS,WORD
  3702                                          ;i_need  CURRENTPDB,WORD
  3703                                          ;i_need  AUXSTACK,BYTE
  3704                                          ;i_need  CONSWAP,BYTE
  3705                                          ;i_need  IDLEINT,BYTE
  3706                                          ;i_need  NOSETDIR,BYTE
  3707                                          ;i_need  ERRORMODE,BYTE
  3708                                          ;i_need  IOSTACK,BYTE
  3709                                          ;i_need  WPERR,BYTE
  3710                                          ;i_need  DSKSTACK,BYTE
  3711                                          ;i_need  CNTCFLAG,BYTE
  3712                                          ;i_need  LEAVEADDR,WORD
  3713                                          ;i_need  NULLDEVPT,DWORD
  3714                                  
  3715                                          ;IF NOT IBM
  3716                                          ;i_need  OEM_HANDLER,DWORD
  3717                                          ;ENDIF
  3718                                  
  3719                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3720                                  
  3721                                  ;============================================================================
  3722                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3723                                  ;============================================================================
  3724                                  ; 11/07/2018 - Retro DOS v3.0
  3725                                  ; 01/05/2019 - Retro DOS v4.0
  3726                                  
  3727                                  ; DosCode SEGMENT
  3728                                  
  3729                                  ; ==========================================================================
  3730                                  ;
  3731                                  ; $Set_CTRL_C_Trapping
  3732                                  ;
  3733                                  ; Function:
  3734                                  ;	Enable disable ^C checking in dispatcher
  3735                                  ;
  3736                                  ; Inputs:
  3737                                  ;		AL = 0 read ^C status
  3738                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3739                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3740                                  ;		AL = 5 get DOS boot drive
  3741                                  ;		AL = 6 Get version number
  3742                                  ;			RETURNS:
  3743                                  ;				BH = Minor version number
  3744                                  ;				BL = Major version number
  3745                                  ;				DL = DOS internal revision
  3746                                  ;				DH = DOS type flags
  3747                                  ;					Bit 3 	- DOS in ROM
  3748                                  ;					Bit 4 	- DOS in HMA
  3749                                  ;					Bit 0-2, 5-7 - Reserved
  3750                                  ; Outputs:
  3751                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3752                                  ;
  3753                                  ; History:
  3754                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3755                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3756                                  ; ==========================================================================
  3757                                  
  3758                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3759                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3760                                  
  3761                                  _$SET_CTRL_C_TRAPPING:
  3762                                  	; 01/05/2019 - Retro DOS v4.0
  3763                                  
  3764 000002A1 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3765 000002A3 7603                    	jbe	short scct_1		; If yes continue processing
  3766                                  
  3767 000002A5 B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3768                                  
  3769 000002A7 CF                      	iret
  3770                                  scct_1:
  3771 000002A8 1E                      	push	DS
  3772                                  
  3773                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3774 000002A9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3775                                  	
  3776 000002AE 50                      	push	AX			; DL only register that can change
  3777 000002AF 56                      	push	SI
  3778                                  
  3779 000002B0 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3780 000002B3 30E4                    	xor	AH,AH			; Clear high byte of AX
  3781 000002B5 09C0                    	or	AX,AX			; Check for subfunction 0
  3782 000002B7 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3783                                  
  3784 000002B9 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3785 000002BB EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3786                                  scct_2:
  3787 000002BD 48                      	dec	AX			; Now dec AX and see if it was 1
  3788 000002BE 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3789                                  
  3790 000002C0 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3791 000002C3 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3792 000002C5 EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3793                                  scct_3:
  3794 000002C7 48                      	dec	AX			; Dec AX again to see if it was 2
  3795 000002C8 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3796                                  
  3797 000002CA 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3798 000002CD 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3799 000002CF EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3800                                  scct_4:
  3801 000002D1 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3802 000002D4 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3803 000002D6 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3804 000002DA EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3805                                  scct_5:
  3806 000002DC 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3807 000002DF 7511                    	jne	short scct_9s		; If not equal then not get version
  3808                                  	
  3809                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3810                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3811 000002E1 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3812 000002E4 B200                    	mov	dl,0
  3813                                  	;mov	DL,DOSREVNM ; 0
  3814                                  
  3815 000002E6 30F6                    	xor	dh,dh			; assume vanilla DOS
  3816 000002E8 803E[0F12]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3817                                  	;je	short @F
  3818 000002ED 7403                    	je	short scct_6
  3819 000002EF 80CE10                  	or	dh,10h
  3820                                  	;or	DH,DOSINHMA ; 10h
  3821                                  ;@@:
  3822                                  scct_6:
  3823                                  
  3824                                  ;ifdef ROMDOS
  3825                                  ;	or	DH, DOSINROM
  3826                                  ;endif ; ROMDOS
  3827                                  
  3828                                  scct_9s:
  3829 000002F2 5E                      	pop	SI
  3830 000002F3 58                      	pop	AX
  3831 000002F4 1F                      	pop	DS
  3832                                  
  3833                                  scct_9f:
  3834 000002F5 CF                      	iret
  3835                                  
  3836                                  SetCtrlShortEntry:			; This allows a conditional entry
  3837                                  					; from main dispatch code
  3838 000002F6 EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3839                                  
  3840                                  ; ==========================================================================
  3841                                  ;									   
  3842                                  ; The following two routines are dispatched to directly with ints disabled
  3843                                  ; immediately after the int 21h entry.	no DIS state is set.
  3844                                  ;
  3845                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3846                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3847                                  ;
  3848                                  ; ==========================================================================
  3849                                  
  3850                                  _$SET_CURRENT_PDB:
  3851 000002F8 1E                      	push	DS
  3852                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3853 000002F9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3854 000002FE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3855 00000302 1F                      	pop	DS
  3856 00000303 CF                      	iret
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;
  3860                                  ; $get_current_PDB returns in BX the current process
  3861                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3862                                  ;
  3863                                  ; ==========================================================================
  3864                                  
  3865                                  _$GET_CURRENT_PDB:
  3866 00000304 1E                      	push	DS
  3867                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3868 00000305 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3869 0000030A 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3870 0000030E 1F                      	pop	DS
  3871 0000030F CF                      	iret
  3872                                  
  3873                                  ; ==========================================================================
  3874                                  ;
  3875                                  ; Sets the Printer Flag to whatever is in AL.
  3876                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3877                                  ;
  3878                                  ; ==========================================================================
  3879                                  
  3880                                  _$SET_PRINTER_FLAG:
  3881 00000310 1E                      	push	ds
  3882                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3883 00000311 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3884 00000316 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3885 00000319 1F                      	pop	ds
  3886 0000031A CF                      	iret
  3887                                  
  3888                                  ; 01/05/2019 - Retro DOS v4.0
  3889                                  ; 08/07/2018 - Retro DOS v3.0
  3890                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3891                                  
  3892                                  ; ----------------------------------------------------------------------------
  3893                                  ; BREAK   <System call entry points and dispatcher>
  3894                                  ; ----------------------------------------------------------------------------
  3895                                  
  3896                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3897                                  
  3898                                  ; ==========================================================================
  3899                                  ;
  3900                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3901                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3902                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3903                                  ;
  3904                                  ; ==========================================================================
  3905                                  
  3906                                  SYSTEM_CALL:    ; PROC NEAR
  3907                                  
  3908                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3909                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3910                                  
  3911                                  ;entry	QUIT				
  3912                                  QUIT:				; INT 20H entry point	
  3913                                  	;MOV	AH,0
  3914 0000031B 30E4                    	xor	ah,ah ; 08/07/2018
  3915 0000031D EB36                    	JMP     SHORT SAVREGS
  3916                                  
  3917                                  ; ---------------------------------------------------------------------------
  3918                                  
  3919                                  	; The system call in AH is out of the range that we know how
  3920                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3921                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3922                                  	; error as this may break some programs compatability.
  3923                                  
  3924                                  BADCALL:
  3925                                          ;MOV	AL,0
  3926 0000031F 30C0                    	xor	al,al ; 08/07/2018
  3927                                  IRETT:	; 06/05/2019
  3928                                  _IRET:
  3929 00000321 CF                              IRET
  3930                                  
  3931                                  ; ---------------------------------------------------------------------------
  3932                                  
  3933                                  ; 01/05/2019 - Retro DOS v4.0
  3934                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3935                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3936                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3937                                  
  3938                                  	; An alternative method of entering the system is to perform a
  3939                                  	; CALL 5 in the program segment prefix with the contents of CL
  3940                                  	; indicating what system call the user would like. A subset of
  3941                                  	; the possible system calls is allowed here only the
  3942                                  	; CPM-compatible calls may get dispatched.
  3943                                  
  3944                                  		; System call entry point and dispatcher
  3945                                  CALL_ENTRY:
  3946 00000322 1E                      	push	DS
  3947                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3948 00000323 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3949 00000328 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3950                                  
  3951 0000032C 58                              POP     AX                      ; IP from the long call at 5
  3952 0000032D 58                              POP     AX                      ; Segment from the long call at 5
  3953 0000032E 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3954                                  
  3955                                  		; Re-order the stack to simulate an interrupt 21.
  3956                                  
  3957 00000332 9C                      	PUSHF				; Start re-ordering the stack
  3958 00000333 FA                      	CLI
  3959 00000334 50                              PUSH    AX                      ; Save segment
  3960 00000335 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3961                                  	; 04/11/2022
  3962                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3963                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3964 00000339 FF36[EC05]              	push	word [SAVEDS]
  3965 0000033D 1F                      	pop	ds
  3966                                  	;
  3967                                  	;cmp	cl,36
  3968 0000033E 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3969 00000341 77DC                            JA      SHORT BADCALL
  3970 00000343 88CC                            MOV     AH,CL
  3971                                  	; 08/07/2018
  3972 00000345 EB0E                    	jmp	short SAVREGS
  3973                                  
  3974                                  ; ---------------------------------------------------------------------------
  3975                                  
  3976                                  ; 01/05/2019 - Retro DOS v4.0
  3977                                  
  3978                                  	; This is the normal INT 21 entry point. We first perform a
  3979                                  	; quick test to see if we need to perform expensive DOS-entry
  3980                                  	; functions. Certain system calls are done without interrupts
  3981                                  	; being enabled.
  3982                                  
  3983                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  3984                                  
  3985                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  3986                                  ; 04/11/2022
  3987                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  3988                                  
  3989                                  COMMAND:
  3990                                  	; 22/12/2022
  3991 00000347 FA                      	cli
  3992                                  
  3993                                  	; 01/05/2019 - Retro DOS v4.0
  3994                                  	; 08/07/2018 - Retro DOS v3.0
  3995                                  
  3996                                  ; 22/12/2022
  3997                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3998                                  	;IF	NOT IBM
  3999 00000348 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4000 0000034B 7203                    	JB	SHORT NOTOEM
  4001 0000034D E98401                  	JMP	_$SET_OEM_HANDLER
  4002                                  
  4003                                  NOTOEM:
  4004                                  	;ENDIF
  4005                                  
  4006                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4007                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4008                                  
  4009                                  	; 22/12/2022
  4010                                  	;cli	; 08/07/2018
  4011                                  
  4012                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4013                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4014                                  	; 04/11/2022
  4015 00000350 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4016                                  	;JBE	SHORT SAVREGS
  4017 00000353 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4018                                  
  4019                                  	; 31/05/2019
  4020                                  
  4021                                  	; The following set of calls are issued by the server at
  4022                                  	; *arbitrary* times and, therefore, must be executed on
  4023                                  	; the user's entry stack and executed with interrupts off.
  4024                                  
  4025                                  SAVREGS:
  4026                                  	; 01/05/2019 - Retro DOS v4.0
  4027                                  	; 10/08/2018
  4028                                  	; 08/07/2018 - Retro DOS v3.0
  4029 00000355 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4030                                  	;;je	_$SET_CTRL_C_TRAPPING
  4031                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4032 00000358 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4033                                  	; 04/11/2022
  4034 0000035A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4035 0000035C 80FC64                  	cmp	ah,64h			; Check Max case number
  4036 0000035F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4037 00000361 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4038 00000363 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4039 00000366 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4040 00000368 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4041 0000036B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4042 0000036D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4043 00000370 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4044                                  
  4045                                  SaveAllRegs:
  4046                                  	; 01/05/2019 - Retro DOS v4.0
  4047                                  
  4048 00000372 06                              push	ES
  4049 00000373 1E                      	push	DS
  4050 00000374 55                      	push	BP
  4051 00000375 57                      	push	DI
  4052 00000376 56                      	push	SI
  4053 00000377 52                      	push	DX
  4054 00000378 51                      	push	CX
  4055 00000379 53                      	push	BX
  4056 0000037A 50                      	push	AX
  4057                                  
  4058 0000037B 8CD8                    	mov	AX,DS
  4059                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4060 0000037D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4061 00000382 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4062 00000385 891E[EA05]              	mov	[SAVEBX],BX
  4063                                  
  4064                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4065                                  	
  4066                                  	; 08/07/2018 - Retro DOS v3.0        
  4067                                  	;xor     ax,ax
  4068                                  	;mov     [USER_ID],ax
  4069                                  	;mov     ax,[CurrentPDB]
  4070                                  	;mov     [PROC_ID],ax
  4071                                  
  4072                                  	; 01/05/2019
  4073                                  
  4074                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4075                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4076                                  	; this!!!
  4077                                  
  4078 00000389 A1[8405]                	MOV     AX,[USER_SP]
  4079 0000038C A3[F205]                        MOV     [NSP],AX
  4080 0000038F A1[8605]                        MOV     AX,[USER_SS]
  4081 00000392 A3[F005]                        MOV     [NSS],AX
  4082                                  
  4083 00000395 31C0                    	xor	AX,AX ; 0
  4084 00000397 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4085                                  
  4086 0000039A F606[2F10]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4087 0000039F 7503                    	jnz	short set_indos_flag	; if win386 present
  4088 000003A1 A3[3E03]                	mov	[USER_ID],AX
  4089                                  set_indos_flag:
  4090 000003A4 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4091                                  
  4092 000003A8 8926[8405]                      MOV     [USER_SP],SP
  4093 000003AC 8C16[8605]                      MOV     [USER_SS],SS
  4094                                  
  4095 000003B0 A1[3003]                	mov	AX,[CurrentPDB]
  4096 000003B3 A3[3C03]                	mov	[PROC_ID],AX
  4097 000003B6 8ED8                    	mov	DS,AX
  4098 000003B8 58                      	pop	AX
  4099 000003B9 50                      	push	AX
  4100                                  
  4101                                  	; save user stack in his area for later returns (possibly from EXEC)
  4102                                  
  4103 000003BA 89262E00                        MOV     [PDB.USER_STACK],SP
  4104 000003BE 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4105                                  
  4106                                  	; 18/07/2018
  4107                                  	;mov	byte [CS:FSHARING], 0
  4108                                  
  4109                                  	;MOV     BX,CS			; no holes here.
  4110                                  	;MOV     SS,BX
  4111                                  
  4112                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4113 000003C2 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4114                                  					;entry	REDISP
  4115                                  REDISP:
  4116 000003C7 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4117 000003CA FB                              STI                             ; stack is in our space now...
  4118                                  
  4119 000003CB 8CD3                    	mov	bx,ss
  4120 000003CD 8EDB                    	mov	ds,bx
  4121                                  
  4122 000003CF 93                      	xchg	ax,bx
  4123                                  
  4124 000003D0 31C0                    	xor	ax,ax ; 0
  4125                                  
  4126                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4127                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4128                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4129                                  
  4130                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4131                                  
  4132                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4133                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4134                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4135                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4136                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4137                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4138                                  	;inc	ax
  4139                                  	;;inc	AL			; AL = 1
  4140                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4141                                  
  4142                                  	; 15/12/2022
  4143 000003D2 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4144                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4145 000003D5 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4146 000003DB A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4147                                  	;mov	byte [IDLEINT],1
  4148 000003DE A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4149 000003E1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4150 000003E4 40                      	inc	ax
  4151                                  	;inc	al			; AL = 1
  4152 000003E5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4153                                  
  4154 000003E8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4155                                  
  4156 000003E9 88E3                    	MOV     BL,AH			
  4157 000003EB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4158                                         
  4159 000003ED FC                      	CLD
  4160                                  		; Since the DOS maintains mucho state information across system
  4161                                  		; calls, we must be very careful about which stack we use.
  4162                                  		; First, all abort operations must be on the disk stack. This
  4163                                  		; is due to the fact that we may be hitting the disk (close
  4164                                  		; operations, flushing) and may need to report an INT 24.
  4165                                          
  4166 000003EE 08E4                    	OR      AH,AH
  4167 000003F0 7416                            JZ      SHORT DSKROUT		; ABORT
  4168                                  
  4169                                          ;CMP	AH,12
  4170                                          ;JBE	SHORT IOROUT		; Character I/O
  4171                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4172                                          ;JZ	SHORT IOROUT
  4173                                          ;CMP	AH,SET_CURRENT_PDB
  4174                                          ;JNZ	SHORT DSKROUT
  4175                                  
  4176                                  		; Second, PRINT and PSPRINT and the server issue
  4177                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4178                                  		; This call MUST, therefore, use the AUXSTACK.
  4179                                  
  4180                                  	; 10/08/2018
  4181 000003F2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4182 000003F5 743D                    	je      short DISPCALL
  4183                                  	
  4184                                  	; 01/05/2019
  4185                                  	
  4186                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4187                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4188                                  
  4189 000003F7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4190 000003FA 770C                    	ja      short DSKROUT
  4191                                  
  4192                                  IOROUT:
  4193                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4194                                  	; (ss: prefix was not needed here! ds=ss)
  4195                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4196                                  	; 15/12/2022
  4197 000003FC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4198 00000401 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4199 00000403 BC[A00A]                        MOV     SP,IOSTACK
  4200 00000406 EB2C                            JMP     SHORT DISPCALL
  4201                                  
  4202                                  		; We are on a system call that is classified as "the rest".
  4203                                  		; We place ourselves onto the DSKSTACK and away we go.
  4204                                  		; We know at this point:
  4205                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4206                                  		;    ErrorMode and WpErr
  4207                                  		; *  That there can be no critical sections in effect.
  4208                                  		;    We signal the server to remove all the resources.
  4209                                  
  4210                                  DSKROUT:
  4211                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4212                                  	; 08/07/2018 - Retro DOS v3.0
  4213 00000408 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4214 0000040B C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4215                                  	
  4216 00000410 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4217 00000415 C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4218                                  	                   		; make sure flags are reset
  4219                                  
  4220                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4221                                  	; (ss: prefix was not needed here! ds=ss)
  4222                                  
  4223                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4224                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4225                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4226                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4227                                                                          ; make sure flags are reset
  4228 0000041A 50                      	push    ax
  4229 0000041B B482                    	mov     ah,82h			; Release all resource information
  4230 0000041D CD2A                    	int     2Ah 		; Microsoft Networks 
  4231                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4232 0000041F 58                      	pop     ax
  4233                                  
  4234                                  		; Since we are going to be running on the DSKStack and since
  4235                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4236                                  		; generation of INT 28's.
  4237                                  
  4238                                  	; 15/12/2022
  4239                                  	;mov     byte [ss:IDLEINT],0
  4240                                  	;
  4241                                          ;mov	sp,DSKSTACK
  4242                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4243                                          ;jz	short DISPCALL
  4244                                  
  4245 00000420 C606[5803]00            	mov     byte [IDLEINT],0
  4246                                  
  4247 00000425 BC[2009]                	MOV     SP,DSKSTACK
  4248 00000428 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4249 0000042D 7405                    	JZ      SHORT DISPCALL
  4250                                  
  4251 0000042F 50                              PUSH    AX
  4252                                          ;invoke	DSKSTATCHK
  4253 00000430 E8A24D                          CALL	DSKSTATCHK
  4254 00000433 58                      	POP     AX
  4255                                  DISPCALL:
  4256                                  	; 01/05/2019 - Retro DOS v4.0
  4257 00000434 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4258                                  
  4259                                  	; 15/12/2022
  4260 00000439 871E[EA05]              	xchg	bx,[SAVEBX]
  4261 0000043D 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4262                                  
  4263                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4264                                  	; (ss: prefix was not needed here! ds=ss)        
  4265                                  	;xchg	bx,[ss:SAVEBX]
  4266                                  	;mov	ds,[ss:SAVEDS]
  4267                                  
  4268 00000441 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4269                                  
  4270                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4271                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4272                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4273                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4274                                  	; because this bit is used to indicate to the next int 21 call that
  4275                                  	; the previous int 21 was an exec.
  4276                                  	;
  4277                                  	; So do not add any code between the call above and the label 
  4278                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4279                                  
  4280                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4281 00000446 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4282                                  
  4283                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4284                                  ; DOSCODE:41F7h
  4285                                  
  4286                                  ;entry LEAVE
  4287                                  ;;;_LEAVE:				; Exit from a system call
  4288                                  LeaveDOS: ; 18/07/2018 
  4289                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4290 0000044C FA                      	CLI
  4291                                  
  4292                                  	; 01/05/2019
  4293                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4294 0000044D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4295 00000452 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4296 00000457 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4297                                  
  4298                                  LeaveA20On:
  4299 00000459 FE0E[2103]                      DEC     BYTE [INDOS]
  4300                                          ; 04/11/2022
  4301 0000045D 8E16[8605]              	mov	ss,[USER_SS]
  4302 00000461 8B26[8405]              	MOV     SP,[USER_SP]
  4303                                  	;MOV	SS,[USER_SS]
  4304 00000465 89E5                    	MOV     BP,SP
  4305                                  	;MOV	[BP.user_AX],AL	
  4306                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4307                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4308                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4309                                  	; 15/12/2022
  4310 00000467 884600                  	MOV	[BP],AL
  4311 0000046A A1[F205]                	MOV     AX,[NSP]
  4312 0000046D A3[8405]                        MOV     [USER_SP],AX
  4313 00000470 A1[F005]                        MOV     AX,[NSS]
  4314 00000473 A3[8605]                        MOV     [USER_SS],AX
  4315                                  
  4316 00000476 58                      	pop	AX
  4317 00000477 5B                      	pop	BX
  4318 00000478 59                      	pop	CX
  4319 00000479 5A                      	pop	DX
  4320 0000047A 5E                      	pop	SI
  4321 0000047B 5F                      	pop	DI
  4322 0000047C 5D                      	pop	BP
  4323 0000047D 1F                      	pop	DS
  4324 0000047E 07                      	pop	ES
  4325                                  
  4326 0000047F CF                              IRET
  4327                                  
  4328                                  disa20:	   				; M068 - Start
  4329 00000480 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4330 00000484 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4331 00000488 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4332                                  					;    a20 off
  4333                                  					; Y: turn a20 off and dec a20off_count
  4334 0000048A FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4335                                   					; Start - M004
  4336 0000048E 1E                      	push	ds			; segment of stub
  4337 0000048F BB[2B11]                	mov	bx,disa20_iret		; offset in stub
  4338 00000492 53                      	push	bx
  4339 00000493 CB                      	retf	  			; go to stub
  4340                                  					; End - M004
  4341                                  ;SYSTEM_CALL ENDP
  4342                                  
  4343                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4344                                  ; 04/11/2022
  4345                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4346                                  
  4347                                  ; ==========================================================================
  4348                                  ;
  4349                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4350                                  ; the stack prior to giving the user control
  4351                                  ;
  4352                                  ; ==========================================================================
  4353                                  
  4354                                  ; 01/05/2019 - Retro DOS v4.0
  4355                                  
  4356                                          ;procedure restore_world,NEAR
  4357                                  restore_world:
  4358                                  	;getdseg <es>		; es -> dosdata
  4359 00000494 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4360                                  
  4361 00000499 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4362                                  
  4363 0000049E 58                              POP     AX
  4364 0000049F 5B                              POP     BX
  4365 000004A0 59                              POP     CX
  4366 000004A1 5A                              POP     DX
  4367 000004A2 5E                              POP     SI
  4368 000004A3 5F                              POP     DI
  4369 000004A4 5D                              POP     BP
  4370 000004A5 1F                              POP     DS
  4371                                  
  4372 000004A6 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4373                                  
  4374                                  ;restore_world	ENDP
  4375                                  
  4376                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4377                                  
  4378                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4379                                  ; 04/11/2022
  4380                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4381                                  
  4382                                  ; ==========================================================================
  4383                                  ;
  4384                                  ; Save_World saves complete registers on the stack
  4385                                  ;
  4386                                  ; ==========================================================================
  4387                                  
  4388                                          ;procedure save_world,NEAR
  4389                                  save_world:
  4390                                  	;getdseg <es>		; es -> dosdata
  4391 000004AB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4392                                  
  4393 000004B0 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4394                                  
  4395                                  	; 12/05/2019
  4396                                          
  4397 000004B5 1E                      	PUSH    DS
  4398 000004B6 55                              PUSH    BP
  4399 000004B7 57                              PUSH    DI
  4400 000004B8 56                              PUSH    SI
  4401 000004B9 52                              PUSH    DX
  4402 000004BA 51                              PUSH    CX
  4403 000004BB 53                              PUSH    BX
  4404 000004BC 50                              PUSH    AX
  4405                                  
  4406 000004BD 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4407                                  
  4408 000004C2 55                      	push	BP		
  4409 000004C3 89E5                    	mov	BP,SP
  4410 000004C5 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4411 000004C8 5D                      	pop	BP
  4412                                  	
  4413 000004C9 C3                      	retn
  4414                                  
  4415                                  ;save_world	ENDP
  4416                                  
  4417                                  ; 01/05/2019
  4418                                  
  4419                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4420                                  ; 04/11/2022
  4421                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4422                                  
  4423                                  ; ==========================================================================
  4424                                  ;
  4425                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4426                                  ;
  4427                                  ; ==========================================================================
  4428                                  
  4429                                          ;procedure get_user_stack,NEAR
  4430                                  Get_User_Stack:
  4431                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4432 000004CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4433 000004CF C536[8405]                      lds	si,[USER_SP]
  4434 000004D3 C3                      	retn
  4435                                  
  4436                                  ;get_user_stack  ENDP
  4437                                  
  4438                                  ; 22/12/2022
  4439                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4440                                  ;%if 0
  4441                                  
  4442                                  ; ---------------------------------------------------------------------------
  4443                                  ;
  4444                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4445                                  ; Inputs:
  4446                                  ;	User registers, User Stack, INTS disabled
  4447                                  ;	If CALL F8, DS:DX is new handler address
  4448                                  ; Function:
  4449                                  ;	Process OEM INT 21 extensions
  4450                                  ; Outputs:
  4451                                  ;	Jumps to OEM_HANDLER if appropriate
  4452                                  ;
  4453                                  ; ---------------------------------------------------------------------------
  4454                                  
  4455                                  ;IF	NOT IBM
  4456                                  
  4457                                  _$SET_OEM_HANDLER:
  4458                                  	; 01/05/2019 - Retro DOS v4.0
  4459                                  	
  4460                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4461                                  	;(jb	short NOTOOEM)
  4462                                  
  4463 000004D4 06                      	push	es ; *
  4464                                  	;getdseg <es>			; es -> dosdata
  4465 000004D5 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4466                                  
  4467 000004DA 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4468                                  						; (message) request	
  4469                                  	; AH = 0F8h = SET OEM HANDLER
  4470                                  
  4471 000004DC 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4472 000004E1 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4473                                  
  4474 000004E6 07                      	pop	es ; *
  4475                                  
  4476 000004E7 CF                      	IRET                            ; Quick return, Have altered no registers
  4477                                  
  4478                                  check_trueversion_request:
  4479                                  	; 18/07/2019 - Retro DOS v3.0
  4480                                  
  4481                                  	; Retro DOS v2.0 - 20/04/2018
  4482 000004E8 83F8FF                  	CMP	AX,0FFFFh
  4483                                  	; 18/07/2018
  4484 000004EB 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4485                                  
  4486                                  	; 01/05/2019
  4487 000004ED 07                      	pop	es ; *
  4488                                  
  4489 000004EE B40E                    	mov	ah,0Eh
  4490                                  
  4491                                  	; Retro DOS v4.0 feature only!
  4492 000004F0 81FBA101                	cmp	bx,417  ; Signature to bypass
  4493                                  			; Retro DOS true version message	
  4494 000004F4 7414                    	je	short true_version_iret
  4495                                  
  4496 000004F6 56                      	push	si
  4497 000004F7 53                      	push	bx
  4498                                  
  4499 000004F8 BE[BF00]                	mov	si,RETRODOSMSG
  4500                                  wrdosmsg:
  4501                                  	;movb	ah,0Eh
  4502 000004FB BB0700                  	mov	bx,7
  4503                                  wrdosmsg_nxt:
  4504 000004FE 2EAC                    	cs	lodsb
  4505 00000500 3C24                    	cmp	al,'$'
  4506 00000502 7404                    	je	short wrdosmsg_ok		
  4507 00000504 CD10                    	int	10h
  4508 00000506 EBF6                    	jmp	short wrdosmsg_nxt
  4509                                  
  4510                                  wrdosmsg_ok:
  4511 00000508 5B                      	pop	bx
  4512 00000509 5E                      	pop	si
  4513                                  
  4514                                  true_version_iret:
  4515                                  	; ah = 0Eh
  4516 0000050A B040                    	mov	al,40h ; Retro DOS v4.0 
  4517 0000050C CF                      	iret
  4518                                  
  4519                                  	; If above F8 try to jump to handler
  4520                                  
  4521                                  DO_OEM_FUNC:
  4522                                  	; 01/05/2019
  4523 0000050D 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4524 00000513 7504                    	JNE     short OEM_JMP
  4525 00000515 07                      	pop	es ; *
  4526 00000516 E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4527                                  OEM_JMP:
  4528 00000519 06                      	push	es
  4529 0000051A 1F                      	pop	ds ; DOSDATA segment !
  4530 0000051B 07                      	pop	es ; *
  4531                                  
  4532                                  	; 22/12/2022
  4533 0000051C FB                      	sti	; (enable interrupts before jumping to private handler)  
  4534                                  
  4535 0000051D FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4536                                  
  4537                                  ;       ENDIF
  4538                                  
  4539                                  ; ---------------------------------------------------------------------------
  4540                                  
  4541                                  ;%endif
  4542                                  
  4543                                  ;============================================================================
  4544                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4545                                  ;============================================================================
  4546                                  ; 17/07/2018 - Retro DOS v3.0
  4547                                  
  4548                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4549                                  ;	NAME	IBMCODE
  4550                                  
  4551                                  ;BREAK <NullDev -- Driver for null device>
  4552                                  
  4553                                  ; ROMDOS note:
  4554                                  ;	NUL device driver used to be here, but it was removed and placed in
  4555                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4556                                  ;	header, which is also in DOSDATA.
  4557                                  
  4558                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4559                                  
  4560                                  ;----------------------------------------------------------------------------
  4561                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4562                                  ;----------------------------------------------------------------------------
  4563                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4564                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4565                                  
  4566                                  ;Public MSC001S,MSC001E
  4567                                  ;MSC001S label byte
  4568                                  	;IF	IBM
  4569                                  ; Codes returned by BIOS
  4570                                  ERRIN:
  4571 00000521 02                      	DB	2			; NO RESPONSE
  4572 00000522 06                      	DB	6			; SEEK FAILURE
  4573 00000523 0C                      	DB	12			; GENERAL ERROR
  4574 00000524 04                      	DB	4			; BAD CRC
  4575 00000525 08                      	DB	8			; SECTOR NOT FOUND
  4576 00000526 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4577                                  ERROUT:
  4578                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4579 00000527 80                      	DB	80H			; NO RESPONSE
  4580 00000528 40                      	DB	40H			; Seek failure
  4581 00000529 02                      	DB	2			; Address Mark not found
  4582 0000052A 10                      	DB	10H			; BAD CRC
  4583 0000052B 04                      	DB	4			; SECTOR NOT FOUND
  4584 0000052C 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4585                                  
  4586                                  NUMERR	EQU	$-ERROUT
  4587                                  	;ENDIF
  4588                                  ;MSC001E label byte
  4589                                  ;----------------------------------------------------------------------------
  4590                                  
  4591                                  ;============================================================================
  4592                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4593                                  ;============================================================================
  4594                                  ; 18/07/2018 - Retro DOS v3.0
  4595                                  ; 15/05/2019 - Retro DOS v4.0
  4596                                  
  4597                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4598                                  
  4599                                  ;   AbsSetup - setup for abs disk functions
  4600                                  ;----------------------------------------------------------------------------
  4601                                  
  4602                                  AbsSetup:
  4603 0000052D 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4604 00000532 FB                      	STI
  4605 00000533 FC                      	CLD
  4606 00000534 1E                      	PUSH	DS
  4607 00000535 16                      	push	ss
  4608 00000536 1F                      	pop	ds
  4609 00000537 E80C01                  	CALL	GETBP
  4610 0000053A 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4611                                  	;mov	word [es:bp+1Fh]
  4612 0000053C 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4613                                  errdriv:
  4614 00000542 1F                      	POP	DS
  4615 00000543 7301                    	jnc	short AbsSetup2
  4616                                  AbsSetup_retn:
  4617 00000545 C3                      	retn
  4618                                  
  4619                                  AbsSetup2:
  4620                                  	; 15/05/2019 - Retro DOS v4.0
  4621                                  	; MSDOS 6.0
  4622                                  					; SS override
  4623 00000546 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4624 0000054D E83F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4625 00000550 72F3                    	jc	short AbsSetup_retn
  4626 00000552 E82057                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4627                                  
  4628                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4629 00000555 1E                      	PUSH	DS
  4630 00000556 56                      	PUSH	SI
  4631 00000557 50                      	PUSH	AX
  4632                                  
  4633 00000558 16                      	push	ss
  4634 00000559 1F                      	pop	ds
  4635                                  	
  4636 0000055A BE[BE03]                	MOV	SI,OPENBUF
  4637 0000055D 8804                    	MOV	[SI],AL
  4638 0000055F 800441                  	ADD	BYTE [SI],"A"
  4639 00000562 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4640 00000567 B80003                  	MOV	AX,0300H
  4641 0000056A F8                      	CLC
  4642 0000056B CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4643                                  		
  4644                                  		; 04/11/2022
  4645                                  		; (INT 2Ah - AX = 0300h)
  4646                                  		; Microsoft Networks - CHECK DIRECT I/O
  4647                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4648                                  		;    only drive specifier--must include the colon)
  4649                                  		; Return: CF clear if absolute disk access allowed
  4650                                  
  4651 0000056D 58                      	POP	AX
  4652 0000056E 5E                      	POP	SI
  4653 0000056F 1F                      	POP	DS
  4654 00000570 73D3                    	jnc	short AbsSetup_retn
  4655                                  
  4656                                  	;mov	word [ss:EXTERR],32h
  4657 00000572 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4658 00000579 C3                      	retn
  4659                                  
  4660                                  ;---------------------------------------------------------------------------
  4661                                  ;
  4662                                  ; Procedure Name : ABSDRD
  4663                                  ;
  4664                                  ; Interrupt 25 handler. Performs absolute disk read.
  4665                                  ; Inputs:	AL - 0-based drive number
  4666                                  ;		DS:BX point to destination buffer
  4667                                  ;		CX number of logical sectors to read
  4668                                  ;		DX starting logical sector number (0-based)
  4669                                  ; Outputs:	Original flags still on stack
  4670                                  ;		Carry set
  4671                                  ;		    AH error from BIOS
  4672                                  ;		    AL same as low byte of DI from INT 24
  4673                                  ;
  4674                                  ;---------------------------------------------------------------------------
  4675                                          ;procedure   ABSDRD,FAR
  4676                                  ABSDRD:
  4677                                  	; 15/05/2019 - Retro DOS v4.0
  4678                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4679                                  	; 04/11/2022
  4680                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4681                                  	
  4682                                  	; MSDOS 6.0
  4683 0000057A FA                      	CLI
  4684                                  	
  4685                                  ;	set up ds to point to DOSDATA
  4686                                  
  4687 0000057B 50                      	push	ax			; preserve AX value
  4688 0000057C 8CD8                    	mov	ax,ds			; store DS value in AX
  4689                                  	;getdseg <ds>
  4690 0000057E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4691 00000583 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4692 00000586 58                      	pop	ax			; restore AX value
  4693                                  
  4694                                  	; M072:
  4695                                  	; We shall save es on the user stack here. We need to use ES in
  4696                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4697                                  	; time in order to restore the user stack.
  4698                                  
  4699 00000587 06                      	push	es  ; ****		; M072
  4700                                  
  4701 00000588 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4702 0000058C 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4703                                  
  4704                                  ; 	set up ss to point to DOSDATA
  4705                                  ;
  4706                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4707                                  ; version of the getdseg macro with the SS register! An interrupt will
  4708                                  ; sneak through.
  4709                                  
  4710                                  ;ifndef ROMDOS
  4711                                  	;getdseg <ss>			; cli in entry of routine
  4712 00000590 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4713                                  ;else
  4714                                  ;	mov	ds, cs:[BioDataSeg]
  4715                                  ;	assume	ds:bdata
  4716                                  ;
  4717                                  ;	mov	ss, ds:[DosDataSg]
  4718                                  ;	assume	ss:DOSDATA
  4719                                  ;
  4720                                  ;endif ; ROMDOS
  4721                                  
  4722 00000595 BC[2009]                	MOV	SP,DSKSTACK
  4723                                  
  4724 00000598 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4725                                  
  4726 0000059C 06                      	push	es ; *** (MSDOS 6.21)
  4727 0000059D E80BFF                  	call	save_world		; save all regs
  4728                                  
  4729 000005A0 06                      	PUSH	ES ; **
  4730 000005A1 E889FF                  	CALL	AbsSetup
  4731 000005A4 723D                    	JC	short ILEAVE
  4732                                  
  4733                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4734                                  	;  the secondary cache. The secondary cache does not check for media
  4735                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4736                                  	;  read, and get data from the previous disk. To get around this,
  4737                                  	;  we just won't use the secondary cache for absolute disk reads.
  4738                                  	;                                                      -mw 8/5/88
  4739                                  
  4740                                  	;EnterCrit critDisk
  4741 000005A6 E8EA0D                  	call	ECritDisk
  4742 000005A9 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4743                                  	;LeaveCrit critDisk
  4744 000005AF E8FC0D                  	call	LCritDisk
  4745                                  
  4746                                          ;invoke	DSKREAD
  4747 000005B2 E87B32                  	CALL	DSKREAD
  4748 000005B5 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4749                                  
  4750 000005B7 89F9                            mov     cx,di
  4751 000005B9 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4752 000005BE 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4753                                  
  4754                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4755                                  ;            sectors, also termed an "Extent".)
  4756                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4757                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4758                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4759                                  ;
  4760                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4761                                  ;	buffers must be "read" into the transfer memory block, so that the
  4762                                  ;       transfer memory reflects the most recent data.
  4763                                  
  4764                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4765 000005C3 E8C034                          call	DskRdBufScan
  4766 000005C6 EB1B                    	jmp     short ILEAVE
  4767                                  
  4768                                  TLEAVE:
  4769 000005C8 7419                    	JZ	short ILEAVE
  4770                                  
  4771                                  ERR_LEAVE:				; M039
  4772                                  	; 15/07/2018 - Retro DOS v3.0
  4773                                          ;IF	IBM
  4774                                  ; Translate the error code to ancient 1.1 codes
  4775 000005CA 06                              PUSH    ES ; *
  4776 000005CB 0E                              PUSH    CS
  4777 000005CC 07                              POP     ES
  4778 000005CD 30E4                            XOR     AH,AH			; Nul error code
  4779                                  	;mov	cx,6
  4780 000005CF B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4781 000005D2 BF[2105]                        MOV     DI,ERRIN		; Point to error conditions
  4782 000005D5 F2AE                            REPNE   SCASB
  4783 000005D7 7504                            JNZ     SHORT LEAVECODE		; Not found
  4784                                  	;mov	ah,[ES:DI+5]
  4785 000005D9 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4786                                  LEAVECODE:
  4787 000005DD 07                              POP     ES ; *
  4788                                  	; 15/05/2019 - Retro DOS v4.0
  4789 000005DE 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4790                                          ;ENDIF
  4791                                  
  4792 000005E2 F9                              STC
  4793                                  ILEAVE:
  4794                                  	; 15/05/2019
  4795 000005E3 07                              POP     ES ; **
  4796 000005E4 E8ADFE                  	call	restore_world
  4797 000005E7 07                              pop	es ; *** (MSDOS 6.21)
  4798 000005E8 FA                      	CLI
  4799 000005E9 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4800 000005ED 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4801 000005F2 16                              push	ss			; M072 - Start
  4802 000005F3 07                      	pop	es			; es - dosdata
  4803 000005F4 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4804 000005F9 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4805 000005FE 07                      	pop	es  ; ****		; Note es was saved on user
  4806                                  					; stack at entry 
  4807                                  					; M072 - End
  4808 000005FF FB                              STI
  4809 00000600 CB                      	RETF   ; ! FAR return !
  4810                                  
  4811                                  ;ABSDRD	ENDP
  4812                                  
  4813                                  ;---------------------------------------------------------------------------
  4814                                  ;
  4815                                  ; Procedure Name : ABSDWRT
  4816                                  ;
  4817                                  ; Interrupt 26 handler. Performs absolute disk write.
  4818                                  ; Inputs:	AL - 0-based drive number
  4819                                  ;		DS:BX point to source buffer
  4820                                  ;		CX number of logical sectors to write
  4821                                  ;		DX starting logical sector number (0-based)
  4822                                  ; Outputs:	Original flags still on stack
  4823                                  ;		Carry set
  4824                                  ;		    AH error from BIOS
  4825                                  ;		    AL same as low byte of DI from INT 24
  4826                                  ;
  4827                                  ;---------------------------------------------------------------------------
  4828                                          ;procedure   ABSDWRT,FAR
  4829                                  ABSDWRT:
  4830                                  	; 15/05/2019 - Retro DOS v4.0
  4831                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4832                                  	; 04/11/2022
  4833                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4834                                  
  4835 00000601 FA                      	CLI
  4836                                  
  4837                                  ;	set up ds to point to DOSDATA
  4838                                  
  4839 00000602 50                      	push	ax
  4840 00000603 8CD8                    	mov	ax,ds
  4841                                  	;getdseg <ds>
  4842 00000605 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4843 0000060A A3[0A0D]                	mov	[TEMPSEG],ax
  4844 0000060D 58                      	pop	ax
  4845                                  
  4846                                  	; M072:
  4847                                  	; We shall save es on the user stack here. We need to use ES in
  4848                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4849                                  	; time in order to restore the user stack.
  4850                                  
  4851 0000060E 06                      	push	es ; ****		; M072
  4852                                  
  4853 0000060F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4854 00000613 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4855                                  
  4856                                  	; set up ss to point to DOSDATA
  4857                                  	;
  4858                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4859                                  	; ROMDOS version of the getdseg macro with the SS register!
  4860                                  	; An interrupt will sneak through.
  4861                                  
  4862                                  ;ifndef ROMDOS
  4863                                  	;getdseg <ss>			; cli in entry of routine
  4864 00000617 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4865                                  ;else
  4866                                  ;	mov	ds, cs:[BioDataSeg]
  4867                                  ;	assume	ds:bdata
  4868                                  ;
  4869                                  ;	mov	ss, ds:[DosDataSg]
  4870                                  ;	assume	ss:DOSDATA
  4871                                  ;
  4872                                  ;endif ; ROMDOS
  4873                                  
  4874 0000061C BC[2009]                	MOV	SP,DSKSTACK
  4875                                  		; we are now switched to DOS's disk stack
  4876                                  
  4877 0000061F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4878                                  
  4879 00000623 06                      	push	es ; *** (MSDOS 6.21)
  4880                                  
  4881 00000624 E884FE                  	call	save_world	      	; save all regs
  4882                                  
  4883 00000627 06                      	PUSH	ES ; **
  4884 00000628 E802FF                  	CALL	AbsSetup
  4885 0000062B 72B6                    	JC	short ILEAVE
  4886                                  
  4887                                  	;EnterCrit critDisk
  4888 0000062D E8630D                  	call	ECritDisk
  4889 00000630 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4890 00000636 E89C03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4891                                  	;LeaveCrit critDisk
  4892 00000639 E8720D                  	call	LCritDisk
  4893                                  
  4894                                  ;M039
  4895                                  ;       DS:BX = transfer address (source data address).
  4896                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4897                                  ;	     sectors, also termed an "Extent".)
  4898                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4899                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4900                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4901                                  ;
  4902                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4903                                  ;       written. Note that all the above registers are preserved for
  4904                                  ;       DSKWRITE.
  4905                                  
  4906 0000063C 1E                              push    ds
  4907                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4908 0000063D E86137                  	call	DskWrtBufPurge
  4909 00000640 1F                              pop     ds
  4910                                  ;M039
  4911                                  	;invoke	DSKWRITE
  4912 00000641 E81532                  	call	DSKWRITE
  4913 00000644 EB82                    	JMP	short TLEAVE
  4914                                  
  4915                                  ;ABSDWRT ENDP
  4916                                  
  4917                                  ;----------------------------------------------------------------------------
  4918                                  ;
  4919                                  ; Procedure Name : GETBP
  4920                                  ;
  4921                                  ; Inputs:
  4922                                  ;	AL = Logical unit number (A = 0)
  4923                                  ; Function:
  4924                                  ;	Find Drive Parameter Block
  4925                                  ; Outputs:
  4926                                  ;	ES:BP points to DPB
  4927                                  ;	[THISDPB] = ES:BP
  4928                                  ;	Carry set if unit number bad or unit is a NET device.
  4929                                  ;		Later case sets extended error error_I24_not_supported
  4930                                  ; No other registers alteredjjj
  4931                                  ;
  4932                                  ;----------------------------------------------------------------------------
  4933                                  
  4934                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4935                                  GETBP:
  4936                                  	; 15/05/2019 - Retro DOS v4.0
  4937                                  	; 11/07/2018 - Retro DOS v3.0
  4938 00000646 50                      	PUSH	AX
  4939 00000647 0401                    	ADD	AL, 1		; No increment; need carry flag
  4940 00000649 7216                    	JC	SHORT SKIPGET
  4941 0000064B E88065                  	CALL	GETTHISDRV
  4942                                  	; MSDOS 6.0
  4943 0000064E 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4944 00000650 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4945 00000652 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4946 00000655 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4947 00000657 F9                      	STC				;DCR.			;AN000;
  4948 00000658 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4949 0000065B C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4950                                  SKIPGET:
  4951 00000661 58                      	POP	AX
  4952 00000662 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4953                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4954                                  	;jnc	short getbp_t
  4955                                  	;retn
  4956                                  getbp_t:
  4957 00000664 C42E[A205]              	LES	BP,[THISCDS]
  4958                                  	; 15/12/2022
  4959 00000668 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4960                                  	; 07/12/2022
  4961                                  	;TEST	WORD [ES:BP+43H],8000H
  4962                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4963 0000066D 7408                    	JZ	SHORT GETBP_CDS
  4964 0000066F C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4965 00000675 F9                      	STC
  4966                                  GETBP_RETN:
  4967 00000676 C3                      	RETN
  4968                                  
  4969                                  GETBP_CDS:
  4970                                  	;LES	BP,[ES:BP+45H]
  4971 00000677 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4972                                  GOTDPB:
  4973                                  	; Load THISDPB from ES:BP
  4974 0000067B 892E[8A05]              	MOV	[THISDPB],BP
  4975 0000067F 8C06[8C05]              	MOV	[THISDPB+2],ES
  4976 00000683 C3                      	RETN
  4977                                  
  4978                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  4979                                  
  4980                                  ;----------------------------------------------------------------------------
  4981                                  ;
  4982                                  ; Procedure Name : SYS_RETURN
  4983                                  ;
  4984                                  ; These are the general system call exit mechanisms. All internal system
  4985                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  4986                                  ; is to set the user's flags and set his AX register for return.
  4987                                  ;
  4988                                  ;----------------------------------------------------------------------------
  4989                                  
  4990                                          ;procedure   SYS_RETURN,NEAR
  4991                                  SYS_RETURN:        
  4992                                          ;entry	SYS_RET_OK
  4993                                  SYS_RET_OK:   
  4994 00000684 E843FE                  	call    Get_User_Stack
  4995                                  		; turn off user's carry flag
  4996                                  SYS_RET_OK_clc: ; 25/06/2019 
  4997                                          ;;and	word [SI+16h],0FFFEh 
  4998                                  	;and	word [SI+user_env.user_F],~f_Carry 
  4999                                          ; 25/06/2019
  5000 00000687 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5001 0000068B EB10                    	JMP     SHORT DO_RET
  5002                                  
  5003                                          ;entry   SYS_RET_ERR
  5004                                  SYS_RET_ERR:        
  5005 0000068D 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5006 0000068F E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5007 00000692 E81A00                  	CALL	ErrorMap
  5008                                  
  5009                                  	;entry	From_GetSet
  5010                                  From_GetSet:
  5011 00000695 E832FE                          call    Get_User_Stack
  5012                                  		 ; signal carry to user
  5013                                  	;;or	word [SI+16h],1
  5014                                  	;OR	word [SI+user_env.user_F],f_Carry
  5015                                  	; 25/06/2019
  5016 00000698 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5017 0000069C F9                      	STC			; also, signal internal error
  5018                                  DO_RET:
  5019                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5020 0000069D 8904                    	MOV	[SI],AX
  5021 0000069F C3                      	RETN
  5022                                  
  5023                                  	;entry	FCB_RET_OK
  5024                                  FCB_RET_OK:
  5025                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5026                                  NO_OP:
  5027 000006A0 30C0                    	XOR	AL,AL
  5028 000006A2 C3                      	retn
  5029                                  
  5030                                  	;entry	FCB_RET_ERR
  5031                                  FCB_RET_ERR:
  5032 000006A3 30E4                    	XOR	AH,AH
  5033 000006A5 36A3[2403]              	mov	[ss:EXTERR],AX
  5034 000006A9 E80300                  	CALL	ErrorMap
  5035 000006AC B0FF                    	MOV	AL,-1
  5036 000006AE C3                      	retn
  5037                                  
  5038                                  	;entry	ErrorMap
  5039                                  ErrorMap:
  5040 000006AF 56                      	PUSH	SI
  5041                                  				; ERR_TABLE_21 is now in DOSDATA
  5042 000006B0 BE[DA0D]                	MOV	SI,ERR_TABLE_21
  5043                                  				; SS override for FAILERR and EXTERR
  5044 000006B3 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5045 000006B9 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5046                                  		 ; Ooops, this is the REAL reason
  5047                                  	;mov	word [SS:EXTERR],53h
  5048 000006BB 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5049                                  EXTENDED_NORMAL:
  5050 000006C2 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5051 000006C5 5E                      	POP	SI
  5052 000006C6 C3                      	retn
  5053                                  
  5054                                  	;EndProc SYS_RETURN
  5055                                  
  5056                                  ;---------------------------------------------------------------------------
  5057                                  ;
  5058                                  ; Procedure Name : CAL_LK
  5059                                  ;
  5060                                  ; Inputs:
  5061                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5062                                  ;		(DS NEED not be DOSDATA)
  5063                                  ;	[EXTERR] is set with error
  5064                                  ; Function:
  5065                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5066                                  ; Outputs:
  5067                                  ;	[EXTERR_CLASS] set
  5068                                  ;	[EXTERR_ACTION] set
  5069                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5070                                  ; Destroys SI, FLAGS
  5071                                  ;
  5072                                  ;---------------------------------------------------------------------------
  5073                                  
  5074                                  	;procedure CAL_LK,NEAR
  5075                                  CAL_LK:
  5076 000006C7 1E                      	PUSH	DS
  5077 000006C8 50                      	PUSH	AX
  5078 000006C9 53                      	PUSH	BX
  5079                                  
  5080                                  ;M048	Context DS		; DS:SI -> Table
  5081                                  ;
  5082                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5083                                  ; is DOSDATA
  5084                                  
  5085                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5086                                  	; 15/05/2019 - Retro DOS v4.0
  5087 000006CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5088                                  
  5089                                  	; 18/07/2018
  5090                                  	;push	ss
  5091                                  	;pop	ds
  5092                                  
  5093 000006CF 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5094                                  TABLK1:
  5095 000006D3 AC                      	LODSB
  5096                                  
  5097 000006D4 3CFF                    	CMP	AL,0FFH
  5098 000006D6 7409                    	JZ	short GOT_VALS	; End of table
  5099 000006D8 38D8                    	CMP	AL,BL
  5100 000006DA 7405                    	JZ	short GOT_VALS	; Got entry
  5101 000006DC 83C603                  	ADD	SI,3		; Next table entry
  5102                                  	; 15/08/2018
  5103 000006DF EBF2                    	JMP	short TABLK1
  5104                                  
  5105                                  GOT_VALS:
  5106 000006E1 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5107                                  
  5108 000006E2 80FCFF                  	CMP	AH,0FFH
  5109 000006E5 7404                    	JZ	short NO_SET_ACT
  5110 000006E7 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5111                                  NO_SET_ACT:
  5112 000006EB 3CFF                    	CMP	AL,0FFH
  5113 000006ED 7403                    	JZ	short NO_SET_CLS
  5114 000006EF A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5115                                  NO_SET_CLS:
  5116 000006F2 AC                      	LODSB			; Get LOCUS
  5117                                  
  5118 000006F3 3CFF                    	CMP	AL,0FFH
  5119 000006F5 7403                    	JZ	short NO_SET_LOC
  5120 000006F7 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5121                                  NO_SET_LOC:
  5122 000006FA 5B                      	POP	BX
  5123 000006FB 58                      	POP	AX
  5124 000006FC 1F                      	POP	DS
  5125 000006FD C3                      	retn
  5126                                  
  5127                                  	;EndProc CAL_LK
  5128                                  
  5129                                  ;---------------------------------------------------------------------------
  5130                                  ;
  5131                                  ; Procedure Name : ETAB_LK
  5132                                  ;
  5133                                  ; Inputs:
  5134                                  ;	AX is error code
  5135                                  ;	[USER_IN_AX] has AH value of system call involved
  5136                                  ; Function:
  5137                                  ;	Make sure error code is appropriate to this call.
  5138                                  ; Outputs:
  5139                                  ;	AX MAY be mapped error code
  5140                                  ;	[EXTERR] = Input AX
  5141                                  ; Destroys ONLY AX and FLAGS
  5142                                  ;
  5143                                  ;---------------------------------------------------------------------------
  5144                                  
  5145                                  	;procedure ETAB_LK,NEAR
  5146                                  
  5147                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5148 000006FE 1E                      	PUSH	DS
  5149 000006FF 56                      	PUSH	SI
  5150 00000700 51                      	PUSH	CX
  5151 00000701 53                      	PUSH	BX
  5152                                  
  5153                                  	;Context DS			; SS is DOSDATA
  5154                                  
  5155 00000702 16                      	push	ss
  5156 00000703 1F                      	pop	ds
  5157                                  
  5158 00000704 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5159                                  
  5160                                  					; I21_MAP_E_TAB is now in DOSCODE
  5161 00000707 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5162 0000070A 88C7                    	MOV	BH,AL			; Real code to BH
  5163 0000070C 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5164                                  TABLK2:
  5165                                  	; 15/05/2019 - Retro DOS v4.0
  5166 00000710 2E                      	cs
  5167 00000711 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5168                                  	
  5169                                  	; 18/07/2018 - Retro DOS v3.0
  5170                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5171                                  
  5172 00000712 3CFF                    	CMP	AL,0FFH 		; End of table?
  5173 00000714 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5174 00000716 38D8                    	CMP	AL,BL			; Found call?
  5175 00000718 740C                    	JZ	short GOT_CALL		; Yes
  5176 0000071A 86E0                    	XCHG	AH,AL			; Count to AL
  5177 0000071C 30E4                    	XOR	AH,AH			; Make word for add
  5178 0000071E 01C6                    	ADD	SI,AX			; Next table entry
  5179 00000720 EBEE                    	JMP	short TABLK2
  5180                                  
  5181                                  NOT_IN_TABLE:
  5182 00000722 88F8                    	MOV	AL,BH			; Restore original code
  5183 00000724 EB0C                    	JMP	SHORT NO_MAP
  5184                                  
  5185                                  GOT_CALL:
  5186 00000726 88E1                    	MOV	CL,AH
  5187 00000728 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5188                                  CHECK_CODE:
  5189                                  	; 15/05/2019 - Retro DOS v4.0
  5190 0000072A 2E                      	cs
  5191 0000072B AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5192                                  
  5193                                  	; 18/07/2018
  5194                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5195                                  
  5196 0000072C 38F8                    	CMP	AL,BH			; Code OK?
  5197 0000072E 7402                    	JZ	short NO_MAP		; Yes
  5198 00000730 E2F8                    	LOOP	CHECK_CODE
  5199                                  NO_MAP:
  5200 00000732 30E4                    	XOR	AH,AH			; AX is now valid code
  5201 00000734 5B                      	POP	BX
  5202 00000735 59                      	POP	CX
  5203 00000736 5E                      	POP	SI
  5204 00000737 1F                      	POP	DS
  5205 00000738 C3                      	retn
  5206                                  
  5207                                  	;EndProc ETAB_LK
  5208                                  
  5209                                  ; 18/07/2018 - Retro DOS v3.0
  5210                                  ;---------------------------------------------------------------------------
  5211                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5212                                  
  5213                                  ;IF installed ; (*)
  5214                                  
  5215                                  ;---------------------------------------------------------------------------
  5216                                  ;
  5217                                  ; Procedure Name : SetBad
  5218                                  ;
  5219                                  ; SetBad sets up info for bad functions
  5220                                  ;
  5221                                  ;---------------------------------------------------------------------------
  5222                                  
  5223                                  SetBad:
  5224                                  	;mov	ax,1
  5225 00000739 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5226                                  
  5227                                  	; MSDOS 3.3
  5228                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5229                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5230                                  
  5231                                  ;	set up ds to point to DOSDATA
  5232                                  
  5233                                  	; 15/05/2019 - Retro DOS v4.0
  5234                                  	; MSDOS 6.0
  5235 0000073C 1E                      	push	ds
  5236                                  
  5237                                  	;getdseg <ds>
  5238 0000073D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5239                                  
  5240 00000742 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5241                                  
  5242 00000747 1F                      	pop	ds	  	;hkn; restore ds
  5243                                  
  5244 00000748 F9                      	STC
  5245 00000749 C3                      	retn
  5246                                  
  5247                                  ;--------------------------------------------------------------------------
  5248                                  ;
  5249                                  ; Procedure Name : BadCall
  5250                                  ;
  5251                                  ; BadCall is the initial routine for bad function calls
  5252                                  ;
  5253                                  ;--------------------------------------------------------------------------
  5254                                  
  5255                                  BadCall:
  5256 0000074A E8ECFF                  	call	SetBad
  5257 0000074D CB                      	retf
  5258                                  
  5259                                  ;--------------------------------------------------------------------------
  5260                                  ;
  5261                                  ; OKCall always sets carry to off.
  5262                                  ;
  5263                                  ;-----------------------------------------------------------------------
  5264                                  
  5265                                  OKCall:
  5266 0000074E F8                      	CLC
  5267 0000074F CB                      	retf
  5268                                  
  5269                                  ;---------------------------------------------------------------------------
  5270                                  ;
  5271                                  ; Procedure Name : INT2F
  5272                                  ;
  5273                                  ; INT 2F handler works as follows:
  5274                                  ;   PUSH    AX
  5275                                  ;   MOV     AX,multiplex:function
  5276                                  ;   INT     2F
  5277                                  ;   POP     ...
  5278                                  ; The handler itself needs to make the AX available for the various routines.
  5279                                  ;
  5280                                  ;----------------------------------------------------------------------------
  5281                                  
  5282                                  ; 15/05/2019 - Retro DOS v4.0
  5283                                  
  5284                                  ;KERNEL_SEGMENT equ 70h
  5285                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5286                                  DOSBIODATASEG equ 70h
  5287                                  
  5288                                  ; retrodos4.s - offset in BIOSDATA
  5289                                  bios_i2f equ 5
  5290                                  
  5291                                  ;PUBLIC	Int2F
  5292                                  ;INT2F	PROC	FAR
  5293                                  
  5294                                  ; 15/05/2019
  5295                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5296                                  
  5297                                  ; 04/11/2022
  5298                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5299                                  
  5300                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5301                                  	; 18/07/2018 - Retro DOS v3.0
  5302                                  INT2F:
  5303                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5304                                  INT2FNT:
  5305                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5306 00000750 FB                      	STI
  5307                                  	;cmp	ah,11h
  5308 00000751 80FC11                  	CMP	AH,MultNET
  5309 00000754 750A                    	JNZ	short INT2FSHR
  5310                                  TestInstall:
  5311 00000756 08C0                    	OR	AL,AL
  5312 00000758 7403                    	JZ	short Leave2F
  5313                                  BadFunc:
  5314 0000075A E8DCFF                  	CALL	SetBad
  5315                                  
  5316                                  	;entry	Leave2F
  5317                                  Leave2F:
  5318 0000075D CA0200                  	RETF	2			; long return + clear flags off stack
  5319                                  
  5320                                  INT2FSHR:
  5321                                  	;cmp	ah,10h
  5322 00000760 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5323 00000763 74F1                    	JZ	short TestInstall	; yes, check for installation
  5324                                  INT2FNLS:
  5325                                  	;cmp	ah,14h
  5326 00000765 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5327 00000768 74EC                    	JZ	short TestInstall	; yes check for installation
  5328                                  INT2FDOS:
  5329                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5330                                  
  5331                                  	; 18/07/2018
  5332                                  	; MSDOS 3.3
  5333                                  	;;cmp	ah,12h	
  5334                                  	;CMP	AH,MultDOS
  5335                                  	;jz	short DispatchDOS
  5336                                  	;iret
  5337                                  
  5338                                  	; 15/05/2019
  5339                                  	; MSDOS 6.0
  5340                                  	;cmp	ah,12h	; 07/12/2022
  5341 0000076A 80FC12                  	CMP	AH,MultDOS
  5342 0000076D 7503                    	JNZ	short check_win		;check if win386 broadcast
  5343 0000076F E9FC01                  	jmp	DispatchDOS
  5344                                  
  5345                                  	; .... win386 .... 
  5346                                  
  5347                                  check_win:
  5348                                  	;cmp	ah,16h
  5349 00000772 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5350 00000775 7408                    	je	short Win386_Msg
  5351                                  
  5352                                  	; M044
  5353                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5354                                  	; of Windows. If so, do special action of going and saving last para
  5355                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5356                                  	; bug
  5357                                  
  5358 00000777 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5359                                  	;jne	short next_i2f		; no, chain on
  5360                                  	; 15/12/2022
  5361                                  	;jmp	winold_swap		; yes, do desired action
  5362 0000077A 7442                    	je	short winold_swap
  5363 0000077C E90701                  	jmp	next_i2f
  5364                                  
  5365                                  	; 15/12/2022
  5366                                  ;next_i2f:
  5367                                  ;	;;;jmp	bios_i2f
  5368                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5369                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5370                                  ;	; 04/11/2022
  5371                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5372                                  
  5373                                  ;	IRET				; This assume that we are at the head
  5374                                  					; of the list
  5375                                  ;INT2F	ENDP
  5376                                  
  5377                                  ; 15/05/2019 - Retro DOS v4.0
  5378                                  
  5379                                  ; We have received a message from Win386. There are three possible
  5380                                  ; messages we could get from Win386:
  5381                                  ;
  5382                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5383                                  ;		  to the Win386 startup info structure.
  5384                                  ; Exit		- for this, we clear the IsWin386 flag.
  5385                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5386                                  ;		  has already been handled. this is indicated by setting
  5387                                  ;		  CX to a non-zero value.
  5388                                  
  5389                                  Win386_Msg:
  5390 0000077F 1E                      	push	ds
  5391                                  
  5392                                  	;getdseg <DS>			; ds is DOSDATA
  5393 00000780 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5394                                  
  5395                                  	; For WIN386 2.xx instance data
  5396                                  
  5397 00000785 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5398 00000787 7503                    	jne	short Win386_Msg_exit
  5399 00000789 E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5400                                  Win386_Msg_exit:
  5401 0000078C 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5402 0000078E 7503                    	jne	short Win386_Msg_devcall
  5403 00000790 E92E01                  	jmp	Win386_Leaving
  5404                                  Win386_Msg_devcall:
  5405 00000793 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5406 00000795 7503                    	jne	short Win386_Msg_init
  5407 00000797 E96501                  	jmp	Win386_Query
  5408                                  Win386_Msg_init:
  5409 0000079A 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5410 0000079C 7403                    	je	short Win386_Starting
  5411 0000079E E9E400                  	jmp	win_nexti2f		; no, return
  5412                                  Win386_Starting:
  5413                                  	; 17/12/2022
  5414 000007A1 F6C201                  	test	dl,1
  5415                                  	;test	dx,1			; is this really win386?
  5416 000007A4 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5417 000007A6 E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5418                                  Win386_vchk:
  5419                                  	; M018 -- start of block changes
  5420                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5421                                  	; than 030Ah, we skip the VxD presence check
  5422                                  
  5423                                  ;M067 -- Begin changes
  5424                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5425                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5426                                  ;So, we null out the VxD ptr before the check.
  5427                                  
  5428                                  	;mov	word [Win386_Info+6],0
  5429 000007A9 C706[E70F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5430                                  	;mov	word [Win386_Info+8],0
  5431 000007AF C706[E90F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5432                                  
  5433                                  ;M067 -- End changes
  5434                                  
  5435                                  ;ifdef JAPAN
  5436                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5437                                  ;else
  5438 000007B5 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5439                                  ;endif
  5440                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5441 000007B9 724E                    	jb	short Win386_vxd
  5442 000007BB E9DF00                  	jmp	noVxD31
  5443                                  
  5444                                  	; 15/12/2022
  5445                                  winold_swap:
  5446 000007BE 1E                      	push	ds
  5447 000007BF 06                      	push	es
  5448 000007C0 56                      	push	si
  5449 000007C1 57                      	push	di
  5450 000007C2 51                      	push	cx
  5451                                  
  5452                                  	;getdseg <ds>			;ds = DOSDATA
  5453 000007C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5454                                  
  5455 000007C8 3C01                    	cmp	al,1			;swap Windows out call
  5456 000007CA 751B                    	jne	short swapin		;no, check if Swap in call
  5457 000007CC E89201                  	call	getwinlast
  5458 000007CF 1E                      	push	ds
  5459 000007D0 07                      	pop	es
  5460 000007D1 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5461 000007D3 31F6                    	xor	si,si
  5462 000007D5 BF[0600]                	mov	di,WinoldPatch1
  5463 000007D8 B90800                  	mov	cx,8
  5464 000007DB FC                      	cld
  5465 000007DC 51                      	push	cx
  5466 000007DD F3A4                    	rep	movsb			;save first 8 bytes
  5467 000007DF 59                      	pop	cx
  5468 000007E0 BF[CC0D]                	mov	di,WinoldPatch2
  5469 000007E3 F3A4                    	rep	movsb			;save next 8 bytes
  5470 000007E5 EB1B                    	jmp	short winold_done
  5471                                  swapin:
  5472 000007E7 3C02                    	cmp	al,2			;swap Windows in call?
  5473 000007E9 7517                    	jne	short winold_done	;no, something else, pass it on
  5474 000007EB E87301                  	call	getwinlast
  5475 000007EE 8EC6                    	mov	es,si
  5476 000007F0 31FF                    	xor	di,di
  5477 000007F2 BE[0600]                	mov	si,WinoldPatch1
  5478 000007F5 B90800                  	mov	cx,8
  5479 000007F8 FC                      	cld
  5480 000007F9 51                      	push	cx
  5481 000007FA F3A4                    	rep	movsb			;restore first 8 bytes
  5482 000007FC 59                      	pop	cx
  5483 000007FD BE[CC0D]                	mov	si,WinoldPatch2
  5484 00000800 F3A4                    	rep	movsb			;restore next 8 bytes
  5485                                  winold_done:
  5486 00000802 59                      	pop	cx
  5487 00000803 5F                      	pop	di
  5488 00000804 5E                      	pop	si
  5489 00000805 07                      	pop	es
  5490 00000806 1F                      	pop	ds
  5491 00000807 EB7D                    	jmp	short next_i2f		;chain on
  5492                                  	; 15/12/2022
  5493                                  	;jmp	next_i2f	
  5494                                  
  5495                                  Win386_vxd:
  5496 00000809 50                      	push	ax
  5497 0000080A 53                      	push	bx
  5498 0000080B 51                      	push	cx
  5499 0000080C 52                      	push	dx
  5500 0000080D 56                      	push	si
  5501 0000080E 57                      	push	di			; save regs !!dont change order!!
  5502                                  
  5503 0000080F 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5504 00000813 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5505 00000816 7421                    	je	short Vxd31		; N: continue
  5506                                  					; Y: save arena associated with 
  5507                                  					;    umb_head
  5508                                  
  5509 00000818 C606[D90D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5510                                  					; umb_arena
  5511 0000081D 1E                      	push	ds
  5512 0000081E 06                      	push	es
  5513                                  
  5514 0000081F 8CD8                    	mov	ax,ds
  5515 00000821 8EC0                    	mov	es,ax			; es - > dosdata
  5516                                  
  5517 00000823 8EDB                    	mov	ds,bx
  5518 00000825 31F6                    	xor	si,si			; ds:si -> umb_head
  5519                                  
  5520 00000827 FC                      	cld
  5521                                  
  5522 00000828 BF[1D12]                	mov	di,UmbSave1
  5523 0000082B B90B00                  	mov	cx,11
  5524 0000082E F3A4                    	rep	movsb
  5525                                  
  5526 00000830 BF[D40D]                	mov	di,UmbSave2
  5527                                  	;mov	cx,5
  5528                                  	; 18/12/2022
  5529 00000833 B105                    	mov	cl,5
  5530 00000835 F3A4                    	rep	movsb	
  5531                                  
  5532 00000837 07                      	pop	es
  5533 00000838 1F                      	pop	ds			; M062 - End
  5534                                  
  5535                                  Vxd31:
  5536                                  	;test	byte [DOS_FLAG],2
  5537 00000839 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5538 0000083E 7408                    	jz	short Dont_Supress		; M066
  5539 00000840 5F                      	pop	di				; M066
  5540 00000841 5E                      	pop	si				; M066
  5541 00000842 5A                      	pop	dx				; M066
  5542 00000843 59                      	pop	cx				; M066
  5543 00000844 5B                      	pop	bx				; M066
  5544 00000845 58                      	pop	ax				; M066
  5545 00000846 EB55                    	jmp	short noVxD31			; M066
  5546                                  
  5547                                  	; We check here if the VxD is available in the root of the boot drive. 
  5548                                  	; We do an extended open to suppress any error messages
  5549                                  	
  5550                                  Dont_Supress:
  5551 00000848 A0[6900]                	mov	al,[BOOTDRIVE]
  5552 0000084B 0440                    	add	al,'A' - 1		; get drive letter
  5553 0000084D A2[3010]                	mov	[VxDpath],al		; path is root of bootdrive
  5554                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5555                                  	;mov	al,0			; no extended attributes
  5556                                  	; 18/12/2022
  5557 00000850 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5558 00000853 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5559                                  					; no inherit, suppress crit err
  5560 00000856 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5561 00000859 BA0100                  	mov	dx,1			; fail if file does not exist
  5562 0000085C BE[3010]                	mov	si,VxDpath	
  5563                                  					; path of VxD file
  5564 0000085F BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5565                                  
  5566 00000862 CD21                    	int	21h			; do extended open
  5567                                  
  5568 00000864 5F                      	pop	di
  5569 00000865 5E                      	pop	si
  5570 00000866 5A                      	pop	dx
  5571 00000867 59                      	pop	cx
  5572                                  
  5573 00000868 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5574                                  
  5575                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5576                                  	; to indicate error to Windows after displaying message to user that 
  5577                                  	; VxD needs to be present to run Windows in enhanced mode.
  5578                                  
  5579 0000086A 52                      	push	dx
  5580 0000086B 1E                      	push	ds
  5581 0000086C 56                      	push	si
  5582 0000086D BE[0A0A]                	mov	si,NoVxDErrMsg
  5583 00000870 0E                      	push	cs
  5584 00000871 1F                      	pop	ds
  5585 00000872 B96300                  	mov	cx,VxDMesLen ; 99	;
  5586 00000875 B402                    	mov	ah,2			; write char to console
  5587 00000877 FC                      	cld
  5588                                  vxdlp:
  5589 00000878 AC                      	lodsb
  5590 00000879 86D0                    	xchg	dl,al			; get char in dl
  5591 0000087B CD21                    	int	21h
  5592 0000087D E2F9                    	loop	vxdlp
  5593                                  
  5594 0000087F 5E                      	pop	si
  5595 00000880 1F                      	pop	ds
  5596 00000881 5A                      	pop	dx
  5597 00000882 5B                      	pop	bx
  5598 00000883 58                      	pop	ax			;all registers restored
  5599 00000884 41                      	inc	cx			;cx != 0 to indicate error
  5600                                  	; 15/12/22022
  5601                                  	;jmp	win_nexti2f		;chain on
  5602                                  	;jmp	short win_nexti2f
  5603                                  
  5604                                  	; 15/12/2022
  5605                                  win_nexti2f:
  5606 00000885 1F                      	pop	ds
  5607                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5608                                  	; 15/12/2022
  5609                                  next_i2f:
  5610                                  	;;;jmp	bios_i2f
  5611                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5612                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5613                                  	; 04/11/2022
  5614 00000886 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5615                                  
  5616                                  VxDthere:
  5617 0000088B 89C3                    	mov	bx,ax
  5618 0000088D B43E                    	mov	ah,CLOSE ; 3Eh
  5619 0000088F CD21                    	int	21h			;close the file
  5620                                  
  5621                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5622                                  
  5623                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5624                                  	;mov	bx,Win386_Info
  5625                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5626                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5627                                  	; 15/12/2022
  5628 00000891 C706[E70F][3010]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5629 00000897 8C1E[E90F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5630                                  
  5631 0000089B 5B                      	pop	bx
  5632 0000089C 58                      	pop	ax
  5633                                  noVxD31:
  5634                                  	; M018; End of block changes
  5635                                  
  5636 0000089D 800E[2F10]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5637 000008A2 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5638                                  
  5639                                  	; M002;
  5640                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5641                                  
  5642 000008A7 52                      	push	dx			; M002
  5643 000008A8 89DA                    	mov	dx,bx			; M002
  5644                                  					; point ES:BX to Win386_Info ; M002
  5645 000008AA BB[E10F]                	mov	bx,Win386_Info 
  5646 000008AD 895702                  	mov	[bx+2],dx		; M002
  5647 000008B0 8C4704                  	mov	[bx+4],es		; M002
  5648 000008B3 5A                      	pop	dx			; M002
  5649 000008B4 1E                      	push	ds			; M002
  5650 000008B5 07                      	pop	es			; M002
  5651                                  	;jmp	win_nexti2f		; M002
  5652                                  	; 15/12/2022
  5653 000008B6 EBCD                    	jmp	short win_nexti2f
  5654                                  
  5655                                  	; 15/12/2022
  5656                                  	; Code to return Win386 2.xx instance table
  5657                                  OldWin386Init:
  5658 000008B8 58                      	pop	ax			; discard ds pushed on stack
  5659 000008B9 BE[E511]                	mov	si,OldInstanceJunk 
  5660                                  					; ds:si = instance table
  5661 000008BC B84852                  	mov	ax,5248h ; 'RH'		; indicate instance data present
  5662                                  	;jmp	next_i2f
  5663                                  	; 15/12/2022
  5664 000008BF EBC5                    	jmp	short next_i2f
  5665                                  
  5666                                  Win386_Leaving:
  5667                                  	; 15/12/2022
  5668 000008C1 F6C201                  	test 	dl,1
  5669                                  	;test	dx,1			; is this really win386?
  5670                                  	;jz	short Win386_Leaving_c
  5671                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5672                                  	; 15/12/2022
  5673 000008C4 75BF                    	jnz	short win_nexti2f	
  5674                                  
  5675                                  Win386_Leaving_c:
  5676                                  					; M062 - Start
  5677 000008C6 803E[D90D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5678                                  					;    up.
  5679 000008CB 7526                    	jne	short noumb		; N: not saved 
  5680 000008CD C606[D90D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5681                                  					;    previously saved umb_head
  5682 000008D2 50                      	push	ax
  5683 000008D3 06                      	push	es
  5684 000008D4 51                      	push	cx
  5685 000008D5 56                      	push	si
  5686 000008D6 57                      	push	di
  5687                                  
  5688 000008D7 A1[8C00]                	mov	ax,[UMB_HEAD]	
  5689 000008DA 8EC0                    	mov	es,ax
  5690 000008DC 31FF                    	xor	di,di			; es:di -> umb_head
  5691                                  
  5692 000008DE FC                      	cld
  5693                                  
  5694 000008DF BE[1D12]                	mov	si,UmbSave1
  5695 000008E2 B90B00                  	mov	cx,11
  5696 000008E5 F3A4                    	rep	movsb
  5697 000008E7 BE[D40D]                	mov	si,UmbSave2
  5698                                  	;mov	cx,5
  5699                                  	; 18/12/2022
  5700 000008EA B105                    	mov	cl,5
  5701 000008EC F3A4                    	rep	movsb
  5702                                  
  5703 000008EE 5F                      	pop	di
  5704 000008EF 5E                      	pop	si
  5705 000008F0 59                      	pop	cx
  5706 000008F1 07                      	pop	es
  5707 000008F2 58                      	pop	ax
  5708                                  noumb:					; M062 - End
  5709 000008F3 8026[2F10]00            	and	byte [IsWin386],0	; Win386 is gone
  5710 000008F8 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5711 000008FD EB86                    	jmp	short win_nexti2f
  5712                                  
  5713                                  ;	; 15/12/2022
  5714                                  ;	; Code to return Win386 2.xx instance table
  5715                                  ;OldWin386Init:
  5716                                  ;	pop	ax			; discard ds pushed on stack
  5717                                  ;	mov	si,OldInstanceJunk 
  5718                                  ;					; ds:si = instance table
  5719                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5720                                  ;	;jmp	next_i2f
  5721                                  ;	; 15/12/2022
  5722                                  ;	jmp	short _next_i2f
  5723                                  
  5724                                  Win386_Query:
  5725 000008FF 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5726 00000902 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5727 00000904 09C9                    	or	cx,cx			; is it an instance query?
  5728 00000906 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5729 00000908 41                      	inc	cx			; indicate that data is instanced
  5730                                  ;
  5731                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5732                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5733                                  ; M001;  
  5734                                  ; M001; OFFSETS STRUC
  5735                                  ; M001; 	Major_version	db	?
  5736                                  ; M001; 	Minor_version	db	?
  5737                                  ; M001; 	SaveDS		dw	?
  5738                                  ; M001; 	SaveBX		dw	?
  5739                                  ; M001; 	Indos		dw	?
  5740                                  ; M001; 	User_id		dw	?
  5741                                  ; M001; 	CritPatch	dw	?
  5742                                  ; M001; OFFSETS	ENDS
  5743                                  ; M001; 
  5744                                  ; M001; User_Id is the only variable really important for proper functioning  
  5745                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5746                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5747                                  ; M001; pass this table because Win386 depends on this table to get the 
  5748                                  ; M001; User_Id offset.
  5749                                  ; M001; 
  5750 00000909 BB[2110]                	mov	bx,Win386_DOSVars	; M001 
  5751 0000090C 1E                      	push	ds			; M001
  5752 0000090D 07                      	pop	es			; es:bx points at offset table ; M001
  5753 0000090E EB41                    	jmp	short PopIret		; M001
  5754                                  
  5755                                  ; 15/12/2022
  5756                                  ;	; Code to return Win386 2.xx instance table
  5757                                  ;OldWin386Init:
  5758                                  ;	pop	ax			; discard ds pushed on stack
  5759                                  ;	mov	si,OldInstanceJunk 
  5760                                  ;					; ds:si = instance table
  5761                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5762                                  ;	;jmp	next_i2f
  5763                                  ;	; 15/12/2022
  5764                                  ;	jmp	short _next_i2f
  5765                                  
  5766                                  dosmgr_func:
  5767 00000910 49                      	dec	cx
  5768 00000911 7436                    	jz	short win386_patch	; call to patch DOS
  5769 00000913 49                      	dec	cx
  5770 00000914 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5771 00000916 49                      	dec	cx
  5772 00000917 743A                    	jz	short win386_size	; get size of DOS data structures
  5773 00000919 49                      	dec	cx
  5774 0000091A 7441                    	jz	short win386_inst	; instance more data
  5775 0000091C 49                      	dec	cx
  5776 0000091D 7532                    	jnz	short PopIret		; no functions above this
  5777                                  
  5778                                  	; Get DOS device driver size -- es:di points at device driver header
  5779                                  	; In DOS 4.x, the para before the device header contains an arena 
  5780                                  	; header for the driver.
  5781                                  
  5782 0000091F 8CC0                    	mov	ax,es			; ax = device header segment
  5783                                  
  5784                                  	; We check to see if we have a memory arena for this device driver. 
  5785                                  	; The way to do this would be to look at the previous para to see if
  5786                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5787                                  	; in the arena is the same as the device header segment. These two 
  5788                                  	; checks together should take care of all cases
  5789                                  
  5790 00000921 48                      	dec	ax			; get arena header
  5791 00000922 06                      	push	es
  5792 00000923 8EC0                    	mov	es,ax			; arena header for device driver
  5793                                  
  5794 00000925 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5795 00000929 7517                    	jnz	short cantsize		; no, cant size this driver
  5796 0000092B 40                      	inc	ax			; get back device header segment
  5797 0000092C 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5798 00000930 7510                    	jnz	short cantsize		; no, not a proper arena
  5799                                  
  5800 00000932 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5801 00000936 07                      	pop	es
  5802                                  
  5803                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5804                                  	; Speed is not critical and so we choose the shortest method 
  5805                                  	; -- use "mul"
  5806                                  
  5807 00000937 BB1000                  	mov	bx,16
  5808 0000093A F7E3                    	mul	bx
  5809 0000093C 89C1                    	mov	cx,ax
  5810 0000093E 89D3                    	mov	bx,dx
  5811 00000940 EB09                    	jmp	short win386_done	; return with device driver size
  5812                                  cantsize:
  5813 00000942 07                      	pop	es
  5814 00000943 31C0                    	xor	ax,ax
  5815 00000945 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5816 00000947 EB08                    	jmp	short PopIret		; return
  5817                                  
  5818                                  win386_patch:
  5819                                  	; dx contains bits marking the patches to be applied. We return 
  5820                                  	; the field with all bits set to indicate that all patches have been
  5821                                  	; done
  5822                                  
  5823 00000949 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5824                                   	;jmp	short win386_done	; done, return
  5825                                  	; 15/12/2022
  5826                                  	; 15/12/2022
  5827                                  win386_done:
  5828 0000094B B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5829 0000094E BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5830                                  PopIret:
  5831 00000951 1F                      	pop	ds
  5832 00000952 CF                      	iret	
  5833                                  
  5834                                  win386_size:
  5835                                  	;Return the size of DOS data structures -- currently only CDS size
  5836                                  
  5837                                  	; 17/12/2022
  5838 00000953 F6C201                  	test	dl,1
  5839                                  	;test	dx,1			; check for CDS size bit
  5840 00000956 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5841                                  
  5842 00000958 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5843 0000095B EBEE                    	jmp	short win386_done	; return with the size
  5844                                  
  5845                                  win386_inst:
  5846                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device 
  5847                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5848                                  	; this by returning a status of not previously instanced. The basic 
  5849                                  	; structure of these things have not changed and so the current 
  5850                                  	; DOSMGR code should be able to work it out
  5851                                  
  5852 0000095D 31D2                    	xor	dx,dx			; make sure dx has a not done value
  5853 0000095F EBF0                    	jmp	short PopIret		; skip done indication
  5854                                  
  5855                                  	; 15/12/2022
  5856                                  ;win386_done:
  5857                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5858                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5859                                  ;PopIret:
  5860                                  ;	pop	ds
  5861                                  ;	iret				; return back up the chain
  5862                                  
  5863                                  	; 15/12/2022
  5864                                  ;win_nexti2f:
  5865                                  	;pop	ds
  5866                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5867                                  
  5868                                  ;End WIN386 support
  5869                                  
  5870                                  ; 15/05/2019
  5871                                  
  5872                                  ;M044; Start of changes
  5873                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5874                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5875                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5876                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5877                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5878                                  ; in leading to a crash. Winoldap issues callouts when it swaps WIndows out
  5879                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5880                                  ; last para of the Windows memory block and then restore this para on the
  5881                                  ; Windows swapin callout. 
  5882                                  
  5883                                  getwinlast:
  5884                                  	; 07/12/2022
  5885 00000961 8B36[3003]              	mov	si,[CurrentPDB]
  5886 00000965 4E                      	dec	si
  5887 00000966 8EC6                    	mov	es,si
  5888 00000968 2603360300              	add	si,[es:3]
  5889 0000096D C3                      	retn
  5890                                  
  5891                                  ; 15/12/2022
  5892                                  %if 0
  5893                                  winold_swap:
  5894                                  	push	ds
  5895                                  	push	es
  5896                                  	push	si
  5897                                  	push	di
  5898                                  	push	cx
  5899                                  
  5900                                  	;getdseg <ds>			;ds = DOSDATA
  5901                                  	mov	ds,[cs:DosDSeg]
  5902                                  
  5903                                  	cmp	al,1			;swap Windows out call
  5904                                  	jne	short swapin		;no, check if Swap in call
  5905                                  	call	getwinlast
  5906                                  	push	ds
  5907                                  	pop	es
  5908                                  	mov	ds,si			;ds = memory arena of Windows
  5909                                  	xor	si,si
  5910                                  	mov	di,WinoldPatch1
  5911                                  	mov	cx,8
  5912                                  	cld
  5913                                  	push	cx
  5914                                  	rep	movsb			;save first 8 bytes
  5915                                  	pop	cx
  5916                                  	mov	di,WinoldPatch2
  5917                                  	rep	movsb			;save next 8 bytes
  5918                                  	jmp	short winold_done
  5919                                  swapin:
  5920                                  	cmp	al,2			;swap Windows in call?
  5921                                  	jne	short winold_done	;no, something else, pass it on
  5922                                  	call	getwinlast
  5923                                  	mov	es,si
  5924                                  	xor	di,di
  5925                                  	mov	si,WinoldPatch1
  5926                                  	mov	cx,8
  5927                                  	cld
  5928                                  	push	cx
  5929                                  	rep	movsb			;restore first 8 bytes
  5930                                  	pop	cx
  5931                                  	mov	si,WinoldPatch2
  5932                                  	rep	movsb			;restore next 8 bytes
  5933                                  winold_done:
  5934                                  	pop	cx
  5935                                  	pop	di
  5936                                  	pop	si
  5937                                  	pop	es
  5938                                  	pop	ds
  5939                                  	jmp	next_i2f		;chain on
  5940                                  
  5941                                  %endif
  5942                                  
  5943                                  ;M044; End of changes
  5944                                  
  5945                                  ; 15/05/2019
  5946                                  
  5947                                  DispatchDOS:
  5948 0000096E 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5949 00000973 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5950 00000978 50                      	PUSH	AX			; push index
  5951 00000979 55                      	PUSH	BP
  5952 0000097A 89E5                    	MOV	BP,SP
  5953                                  		; stack looks like:
  5954                                  		;   0	BP
  5955                                  		;   2	DISPATCH
  5956                                  		;   4	TABLE
  5957                                  		;   6	RETURN
  5958                                  		;   8	LONG-RETURN
  5959                                  		;   C	FLAGS
  5960                                  		;   E	AX
  5961                                  	
  5962 0000097C 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5963 0000097F 5D                      	POP	BP
  5964 00000980 E82009                  	call	TableDispatch
  5965 00000983 E9D4FD                  	JMP	BadFunc 		; return indicates invalid function
  5966                                  
  5967                                  INT2F_etcetera:
  5968                                  	;entry	DosGetGroup
  5969                                  DosGetGroup:
  5970                                  	; MSDOS 3.3
  5971                                  	;push	cs
  5972                                  	;pop	ds
  5973                                  	;retn
  5974                                  
  5975                                  	; MSDOS 6.0
  5976                                  ;SR; Cannot use CS now
  5977                                  ;
  5978                                  ;	PUSH	CS
  5979                                  ;	POP	DS
  5980                                  
  5981                                  	; 04/11/2022
  5982                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  5983                                  
  5984                                  	;getdseg <ds>
  5985 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5986 0000098B C3                      	retn
  5987                                  
  5988                                  	;entry	DOSInstall
  5989                                  DOSInstall:
  5990 0000098C B0FF                    	MOV	AL,0FFh
  5991 0000098E C3                      	retn
  5992                                  
  5993                                  ;ENDIF ; (*)
  5994                                  
  5995                                  
  5996                                  ; 15/05/2019 - Retro DOS v4.0
  5997                                  
  5998                                  ;------------------------------------------------------------------------
  5999                                  ;
  6000                                  ; Procedure Name : RW32_CONVERT
  6001                                  ;
  6002                                  ;Input: same as ABSDRD and ABSDWRT
  6003                                  ;	 ES:BP -> DPB
  6004                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6005                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6006                                  ;	 carry clear, parms ok
  6007                                  ;
  6008                                  ;------------------------------------------------------------------------
  6009                                  
  6010                                  RW32_CONVERT:
  6011 0000098F 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6012 00000992 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6013 00000994 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6014 00000995 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6015 00000996 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6016 0000099A 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6017 0000099E 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6018 000009A1 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6019                                  	;INC	DL			;>32mb			;AN000;
  6020                                  	; 17/12/2022
  6021 000009A3 42                      	inc	dx
  6022 000009A4 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6023 000009A6 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6024 000009A8 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6025                                  letold:
  6026 000009AA 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6027 000009AB 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6028 000009AC 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6029                                  
  6030 000009AE 1E                      	push	ds
  6031                                  	;getdseg <ds>
  6032 000009AF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6033 000009B4 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6034 000009BA 1F                      	pop	ds
  6035                                  
  6036 000009BB F9                      	STC				;>32mb			;AN000;
  6037 000009BC C3                      	retn				;>32mb			;AN000;
  6038                                  
  6039                                  new32format:
  6040                                  	;mov	dx,[bx+2]
  6041 000009BD 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6042                                  
  6043 000009C0 1E                      	push	ds			; set up ds to DOSDATA
  6044                                  	;getdseg <ds>
  6045 000009C1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6046 000009C6 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6047 000009CA 1F                      	pop	ds
  6048                                  
  6049 000009CB 8B17                    	mov	dx,[bx]
  6050                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6051                                  	;mov	cx,[bx+4]
  6052 000009CD 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6053                                  	;lds	bx,[bx+6]
  6054 000009D0 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6055                                  old_style:				;>32mb			;AN000;
  6056 000009D3 F8                      	CLC				;>32mb			;AN000;
  6057 000009D4 C3                      	retn				;>32mb			;AN000;
  6058                                  
  6059                                  ;------------------------------------------------------------------------
  6060                                  ;
  6061                                  ; Procedure Name : Fastxxx_Purge
  6062                                  ;
  6063                                  ; Input: None
  6064                                  ; Functions: Purge Fastopen/ Cache Buffers
  6065                                  ; Output: None
  6066                                  ;
  6067                                  ;------------------------------------------------------------------------
  6068                                  
  6069                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6070                                  
  6071                                  Fastxxx_Purge:
  6072 000009D5 50                      	PUSH	AX			; save regs.	;AN000;
  6073 000009D6 56                      	PUSH	SI						;AN000;
  6074 000009D7 52                      	PUSH	DX						;AN000;
  6075                                  topen:
  6076 000009D8 1E                      	push	ds			; set up ds to DOSDATA
  6077                                  	;getdseg <ds>
  6078 000009D9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6079                                  
  6080 000009DE F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6081                                  					; fastopen installed ?	;AN000;
  6082 000009E3 1F                      	pop	ds
  6083 000009E4 740B                    	JZ	short nofast		; no			;AN000;
  6084 000009E6 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6085                                  dofast:
  6086 000009E8 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6087                                  	;;mov	dl,[es:bp+0]
  6088                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6089                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6090                                  	; 15/12/2022
  6091 000009EA 268A5600                	mov	dl,[es:bp]
  6092                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6093 000009EE E8B51D                  	call	Fast_Dispatch
  6094                                  nofast:
  6095 000009F1 5A                      	POP	DX						;AN000;
  6096 000009F2 5E                      	POP	SI			; restore regs		;AN000;
  6097 000009F3 58                      	POP	AX			 			;AN000;
  6098 000009F4 C3                      	retn				; exit
  6099                                  
  6100                                  ;============================================================================
  6101                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6102                                  ;============================================================================
  6103                                  ; 29/04/2019 - Retro DOS v4.0
  6104                                  
  6105                                  ;include dossym.inc
  6106                                  ;include dosmac.inc
  6107                                  ;include doscntry.inc
  6108                                  
  6109                                  ; DOSCODE Segment
  6110                                  
  6111                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6112                                  ; ---------------------------------------------------------------------------
  6113                                  ;include divmes.inc
  6114                                  
  6115                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6116                                  ; -------------------------------------
  6117                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6118                                  
  6119                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6120                                  	;PUBLIC	DIVMES
  6121                                  
  6122 000009F5 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6122 000009FE 6F766572666C6F770D-
  6122 00000A07 0A                 
  6123                                  
  6124                                  	;PUBLIC	DivMesLen
  6125                                  DivMesLen:
  6126 00000A08 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6127                                  
  6128                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6129                                  ; -------------------------------------
  6130                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6131                                  
  6132                                  ; (MSDOS 6.0)
  6133                                  ; VxD not found error message
  6134                                  
  6135                                  NoVxDErrMsg:
  6136 00000A0A 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6136 00000A13 686176652074686520-
  6136 00000A1C 66696C652057494E41-
  6136 00000A25 32302E33383620696E-
  6136 00000A2E 2074686520726F6F74-
  6136 00000A37 206F6620796F757220-
  6136 00000A40 626F6F742064726976-
  6136 00000A49 65                 
  6137 00000A4A 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6137 00000A53 57696E646F77732069-
  6137 00000A5C 6E20456E68616E6365-
  6137 00000A65 64204D6F64650D0A   
  6138                                  
  6139                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6140                                  
  6141                                  ; 13/05/2019 - Retro DOS v4.0
  6142                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6143                                  
  6144                                  ;include yesno.asm  (MNSDOS 6.0)
  6145                                  ; -------------------------------------
  6146                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6147                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6148                                  
  6149                                  ; This is for country Yes and No
  6150                                  
  6151 00000A6D 59                      NLS_YES:	db 'Y'
  6152 00000A6E 4E                      NLS_NO:		db 'N'
  6153 00000A6F 79                      NLS_yes2:	db 'y'
  6154 00000A70 6E                      NLS_no2:	db 'n'
  6155                                  
  6156                                  ; ---------------------------------------------------------------------------
  6157                                  
  6158                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6159                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6160                                  
  6161                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6162                                  
  6163                                  ; The following two tables implement the current buffered input editing
  6164                                  ; routines. The tables are pairwise associated in reverse order for ease
  6165                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6166                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6167                                  
  6168                                  	;PUBLIC	CANCHAR
  6169                                  CANCHAR:
  6170 00000A71 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6171                                  	
  6172                                  	;PUBLIC	ESCCHAR
  6173                                  ESCCHAR:
  6174 00000A72 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6175                                  	
  6176                                  	;IF	NOT Rainbow
  6177                                  
  6178                                  ESCTAB:	; LABEL BYTE
  6179                                  
  6180                                  	;IF	IBM
  6181 00000A73 40                      	DB	64		; Ctrl-Z - F6
  6182 00000A74 4D                      	DB	77		; Copy one char - -->
  6183 00000A75 3B                      	DB	59		; Copy one char - F1
  6184 00000A76 53                      	DB	83		; Skip one char - DEL
  6185 00000A77 3C                      	DB	60		; Copy to char - F2
  6186 00000A78 3E                      	DB	62		; Skip to char - F4
  6187 00000A79 3D                      	DB	61		; Copy line - F3
  6188 00000A7A 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6189 00000A7B 3F                      	DB	63		; Reedit line (new template) - F5
  6190 00000A7C 4B                      	DB	75		; Backspace - <--
  6191 00000A7D 52                      	DB	82		; Enter insert mode - INS (toggle)
  6192 00000A7E 52                      	DB	82		; Exit insert mode - INS (toggle)
  6193 00000A7F 41                      	DB	65		; Escape character - F7
  6194 00000A80 41                      	DB	65		; End of table
  6195                                  	;ENDIF
  6196                                  
  6197                                  ESCEND: ; LABEL BYTE
  6198                                  
  6199                                  ESCTABLEN EQU ESCEND-ESCTAB
  6200                                  
  6201                                  ESCFUNC: ; LABEL WORD
  6202                                  	
  6203 00000A81 [9E14]                  	short_addr  GETCH	; Ignore the escape sequence
  6204 00000A83 [8E15]                  	short_addr  TWOESC
  6205 00000A85 [1616]                  	short_addr  EXITINS
  6206 00000A87 [1616]                  	short_addr  ENTERINS
  6207 00000A89 [1815]                  	short_addr  BACKSP
  6208 00000A8B [0216]                  	short_addr  REEDIT
  6209 00000A8D [0515]                  	short_addr  KILNEW
  6210 00000A8F [9515]                  	short_addr  COPYLIN
  6211 00000A91 [C815]                  	short_addr  SKIPSTR
  6212 00000A93 [9B15]                  	short_addr  COPYSTR
  6213 00000A95 [BE15]                  	short_addr  SKIPONE
  6214 00000A97 [A015]                  	short_addr  COPYONE
  6215 00000A99 [A015]                  	short_addr  COPYONE
  6216 00000A9B [1E16]                  	short_addr  CTRLZ
  6217                                  
  6218                                  	;ENDIF
  6219                                  
  6220                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6221                                  ; ---------------------------------------------------------------------------
  6222                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6223                                  
  6224                                  ; OEMFunction key is expected to process a single function
  6225                                  ;   key input from a device and dispatch to the proper
  6226                                  ;   routines leaving all registers UNTOUCHED.
  6227                                  ;
  6228                                  ; Inputs:   CS, SS are DOSGROUP
  6229                                  ; Outputs:  None. This function is expected to JMP to onw of
  6230                                  ;           the following labels:
  6231                                  ;
  6232                                  ;           GetCh       - ignore the sequence
  6233                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6234                                  ;           ExitIns     - toggle insert mode
  6235                                  ;           EnterIns    - toggle insert mode
  6236                                  ;           BackSp      - move backwards one space
  6237                                  ;           ReEdit      - reedit the line with a new template
  6238                                  ;           KilNew      - discard the current line and start from scratch
  6239                                  ;           CopyLin     - copy the rest of the template into the line
  6240                                  ;           SkipStr     - read the next character and skip to it in the template
  6241                                  ;           CopyStr     - read next char and copy from template to line until char
  6242                                  ;           SkipOne     - advance position in template one character
  6243                                  ;           CopyOne     - copy next character in template into line
  6244                                  ;           CtrlZ       - place a ^Z into the template
  6245                                  ; Registers that are allowed to be modified by this function are:
  6246                                  ;           AX, CX, BP
  6247                                  
  6248                                  ; 13/05/2019 - Retro DOS v4.0
  6249                                  ; -------------------------------------
  6250                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6251                                  
  6252                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6253                                  ; -------------------------------------
  6254                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6255                                  
  6256                                  OEMFunctionKey:
  6257 00000A9D E85D09                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6258 00000AA0 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6259 00000AA2 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6260 00000AA3 BF[730A]                	MOV     DI,ESCTAB		; offset of second byte table
  6261 00000AA6 06                      	push	es
  6262 00000AA7 0E                      	push	cs
  6263 00000AA8 07                      	pop	es
  6264 00000AA9 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6265 00000AAB 07                      	pop	es
  6266 00000AAC 5F                      	POP     DI                      ; restore DI
  6267 00000AAD D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6268 00000AAF 89CD                    	MOV     BP,CX                   ; move to indexable register
  6269                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6270 00000AB1 2EFFA6[810A]            	JMP	word [CS:BP+ESCFUNC]
  6271                                  
  6272                                  ;DOSCODE ENDS
  6273                                  	
  6274                                  ;============================================================================
  6275                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6276                                  ;============================================================================
  6277                                  ; Retro DOS v3.0 - 18/07/2018
  6278                                  
  6279                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6280                                  ;----------------------------------------------------------------------------
  6281                                  ; Retro DOS v2.0 - 13/03/2018
  6282                                  
  6283                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6284                                  
  6285                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6286                                  
  6287                                  ;**	$GET_DATE - Get Current Date
  6288                                  ;----------------------------------------
  6289                                  ;	ENTRY	none
  6290                                  ;	EXIT	(cx:dx) = current date
  6291                                  ;	USES	all
  6292                                  
  6293                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6294                                  
  6295                                  _$GET_DATE:	;System call 42
  6296                                  
  6297 00000AB6 16                              PUSH    SS
  6298 00000AB7 1F                              POP     DS
  6299 00000AB8 E8B900                          CALL	READTIME        ;Check for rollover to next day
  6300 00000ABB A1[5203]                        MOV     AX,[YEAR]
  6301                                  
  6302                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6303                                  
  6304 00000ABE 8B1E[5003]                      MOV     BX,[DAY]	; fetch both day and month
  6305 00000AC2 E805FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6306                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6307 00000AC5 895C06                  	MOV	[SI+user_env.user_DX],BX
  6308 00000AC8 05BC07                          ADD     AX,1980         ;Put bias back
  6309                                          ;MOV    [SI+4],AX  	;CX=year
  6310 00000ACB 894404                  	MOV	[SI+user_env.user_CX],AX
  6311 00000ACE 36A0[5603]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6312                                  RET20:	; 05/11/2022
  6313                                  RET24:	; 18/12/2022
  6314 00000AD2 C3                      	RETN
  6315                                  
  6316                                  ;**	$SET_DATE - Set Current Date
  6317                                  ;----------------------------------------
  6318                                  ;	ENTRY	(cx:dx) = current date
  6319                                  ;	EXIT	(al) = -1 iff bad date
  6320                                  ;		(al) = 0 if ok
  6321                                  ;	USES	all
  6322                                  
  6323                                  _$SET_DATE:			;System call 43
  6324                                  
  6325 00000AD3 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6326 00000AD5 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6327                                  	;JC	SHORT RET24	;Error if not big enough
  6328                                          ; 05/11/2022
  6329 00000AD9 72F7                    	jc	short RET20
  6330 00000ADB 83F977                  	CMP     CX,119          ;Year must be less than 2100
  6331 00000ADE 77F2                            JA      SHORT RET24
  6332 00000AE0 08F6                            OR      DH,DH
  6333                                          ;JZ	SHORT RET24
  6334                                   	; 05/11/2022
  6335 00000AE2 74EE                    	jz	short RET20
  6336 00000AE4 08D2                            OR      DL,DL
  6337                                          ;JZ	SHORT RET24	;Error if either month or day is 0
  6338                                  	; 05/11/2022
  6339 00000AE6 74EA                    	jz	short RET20
  6340 00000AE8 80FE0C                          CMP     DH,12           ;Check against max. month
  6341 00000AEB 77E5                            JA      SHORT RET24
  6342 00000AED 16                              PUSH    SS
  6343 00000AEE 1F                              POP     DS
  6344                                  	;CALL	DODATE
  6345                                  	; 18/12/2022
  6346 00000AEF E91801                  	jmp	DODATE
  6347                                  ;RET24:  
  6348                                  	;RETN
  6349                                  
  6350                                  ;**	$GET_TIME - Get Current Time
  6351                                  ;----------------------------------------
  6352                                  ;	ENTRY	none
  6353                                  ;	EXIT	(cx:dx) = current time
  6354                                  ;	USES	all
  6355                                  
  6356                                  _$GET_TIME:			;System call 44
  6357                                  
  6358 00000AF2 16                              PUSH    SS
  6359 00000AF3 1F                              POP     DS
  6360 00000AF4 E87D00                  	CALL	READTIME
  6361 00000AF7 E8D0F9                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6362                                         ;MOV     [SI+6],DX
  6363 00000AFA 895406                  	MOV	[SI+user_env.user_DX],DX
  6364                                         ;MOV     [SI+4],CX
  6365 00000AFD 894C04                  	MOV	[SI+user_env.user_CX],CX
  6366 00000B00 30C0                            XOR     AL,AL
  6367                                  RET26:  
  6368 00000B02 C3                      	RETN
  6369                                  
  6370                                  ;**	$SET_TIME - Set Current Time
  6371                                  ;----------------------------------------
  6372                                  ;	ENTRY	(cx:dx) = time
  6373                                  ;	EXIT	(al) = 0 if 0k
  6374                                  ;		(al) = -1 if invalid
  6375                                  ;	USES	ALL
  6376                                  
  6377                                  _$SET_TIME:			;System call 45
  6378                                  
  6379 00000B03 B0FF                            MOV     AL,-1           ;Flag in case of error
  6380 00000B05 80FD18                          CMP     CH,24           ;Check hours
  6381 00000B08 73F8                            JAE     SHORT RET26
  6382 00000B0A 80F93C                          CMP     CL,60           ;Check minutes
  6383 00000B0D 73F3                            JAE     SHORT RET26
  6384 00000B0F 80FE3C                          CMP     DH,60           ;Check seconds
  6385 00000B12 73EE                            JAE     SHORT RET26
  6386 00000B14 80FA64                          CMP     DL,100          ;Check 1/100's
  6387 00000B17 73E9                            JAE     SHORT RET26
  6388 00000B19 51                              PUSH    CX
  6389 00000B1A 52                              PUSH    DX
  6390 00000B1B 16                              PUSH    SS
  6391 00000B1C 1F                              POP     DS
  6392 00000B1D BB[B603]                        MOV     BX,TIMEBUF
  6393 00000B20 B90600                          MOV     CX,6
  6394 00000B23 31D2                            XOR     DX,DX
  6395 00000B25 89D0                            MOV     AX,DX
  6396 00000B27 53                              PUSH    BX
  6397 00000B28 E8B33C                  	CALL	SETREAD
  6398 00000B2B 1E                              PUSH    DS
  6399 00000B2C C536[2E00]                      LDS     SI,[BCLOCK]
  6400 00000B30 E8353C                  	CALL	DEVIOCALL2      ;Get correct day count
  6401 00000B33 1F                              POP     DS
  6402 00000B34 5B                              POP     BX
  6403 00000B35 E8D93C                  	CALL	SETWRITE
  6404 00000B38 8F06[BA03]                      POP     WORD [TIMEBUF+4]
  6405 00000B3C 8F06[B803]                      POP     WORD [TIMEBUF+2]
  6406 00000B40 C536[2E00]                      LDS     SI,[BCLOCK]
  6407 00000B44 E8213C                  	CALL	DEVIOCALL2      ;Set the time
  6408 00000B47 30C0                            XOR     AL,AL
  6409 00000B49 C3                              RETN
  6410                                  
  6411                                  ; 11/07/2018 - Retro DOS v3.0
  6412                                  ; Retro DOS v2.0 - 14/03/2018
  6413                                  
  6414                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6415                                  
  6416                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6417                                  ;----------------------------------------------------------
  6418                                  ; Date16 returns the current date in AX, current time in DX
  6419                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6420                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6421                                  
  6422                                  DATE16:
  6423                                  	
  6424                                  ;M048	Context DS
  6425                                  ;
  6426                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6427                                  ; is DOSDATA
  6428                                  
  6429                                  	;push	ss
  6430                                  	;pop	ds
  6431                                  
  6432                                  	;getdseg <ds>		; M048
  6433                                  
  6434                                  	; 13/05/2019 - Retro DOS v4.0
  6435 00000B4A 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6436                                  
  6437 00000B4F 51                              PUSH    CX
  6438 00000B50 06                              PUSH    ES
  6439 00000B51 E82000                          CALL    READTIME
  6440 00000B54 07                              POP     ES
  6441 00000B55 D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6442 00000B57 D0E1                            SHL     CL,1
  6443 00000B59 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6444 00000B5B D1E1                            SHL     CX,1
  6445 00000B5D D1E1                            SHL     CX,1
  6446 00000B5F D0EE                            SHR     DH,1            ;Count every two seconds
  6447 00000B61 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6448 00000B63 89CA                            MOV     DX,CX
  6449                                  
  6450                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6451                                  
  6452 00000B65 A1[5103]                        MOV     AX,[MONTH]	;Fetch month and year
  6453 00000B68 B104                            MOV     CL,4
  6454 00000B6A D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6455 00000B6C D1E0                            SHL     AX,1
  6456 00000B6E 59                              POP     CX
  6457 00000B6F 0A06[5003]                      OR      AL,[DAY]
  6458                                  RET21:
  6459 00000B73 C3                              RETN
  6460                                  
  6461                                  ;----------------------------------------------------------
  6462                                  
  6463                                  READTIME:
  6464                                  
  6465                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6466                                  ;Uses AX, CX, DX.
  6467                                  
  6468 00000B74 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6469 00000B7A 56                              PUSH    SI
  6470 00000B7B 53                              PUSH    BX
  6471                                  
  6472 00000B7C BB[B603]                        MOV     BX,TIMEBUF
  6473                                  
  6474 00000B7F B90600                          MOV     CX,6
  6475 00000B82 31D2                            XOR     DX,DX
  6476 00000B84 89D0                            MOV     AX,DX
  6477 00000B86 E8553C                  	CALL	SETREAD
  6478 00000B89 1E                              PUSH    DS
  6479 00000B8A C536[2E00]                      LDS     SI,[BCLOCK]
  6480 00000B8E E8D73B                  	CALL	DEVIOCALL2      ;Get correct date and time
  6481 00000B91 1F                              POP     DS
  6482 00000B92 5B                              POP     BX
  6483 00000B93 5E                              POP     SI
  6484 00000B94 A1[B603]                        MOV     AX,[TIMEBUF]
  6485 00000B97 8B0E[B803]                      MOV     CX,[TIMEBUF+2]
  6486 00000B9B 8B16[BA03]                      MOV     DX,[TIMEBUF+4]
  6487 00000B9F 3B06[5403]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6488                                          ;JZ	SHORT RET22
  6489 00000BA3 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6490                                  	;cmp	ax,43830
  6491 00000BA5 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6492 00000BA8 733D                            JAE     SHORT RET22	;Ignore if too large
  6493 00000BAA A3[5403]                        MOV     [DAYCNT],AX
  6494 00000BAD 56                              PUSH    SI
  6495 00000BAE 51                              PUSH    CX
  6496 00000BAF 52                              PUSH    DX              ;Save time
  6497 00000BB0 31D2                            XOR     DX,DX
  6498                                  	;mov	cx,1461
  6499 00000BB2 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6500 00000BB5 F7F1                            DIV     CX              ;Compute number of 4-year units
  6501 00000BB7 D1E0                            SHL     AX,1
  6502 00000BB9 D1E0                            SHL     AX,1
  6503 00000BBB D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6504 00000BBD 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6505                                  
  6506 00000BBF BE[140D]                        MOV     SI,YRTAB        ;Table of days in each year
  6507                                  
  6508 00000BC2 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6509 00000BC5 D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6510 00000BC7 7304                            JNC     SHORT SK	;Extra half-year?
  6511 00000BC9 81C2C800                        ADD     DX,200
  6512                                  SK:
  6513 00000BCD E82400                          CALL    SETYEAR
  6514 00000BD0 B101                            MOV     CL,1            ;At least at first month in year
  6515                                  
  6516 00000BD2 BE[1C0D]                        MOV     SI,MONTAB       ;Table of days in each month
  6517                                          
  6518 00000BD5 E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6519 00000BD8 880E[5103]                      MOV     [MONTH],CL
  6520 00000BDC 42                              INC     DX              ;Remainder is day of month (start with one)
  6521 00000BDD 8816[5003]                      MOV     [DAY],DL
  6522 00000BE1 E89700                          CALL    WKDAY           ;Set day of week
  6523 00000BE4 5A                              POP     DX
  6524 00000BE5 59                              POP     CX
  6525 00000BE6 5E                              POP     SI
  6526                                  RET22:  
  6527 00000BE7 C3                      	RETN
  6528                                  
  6529                                  ;----------------------------------------------------------
  6530                                  
  6531                                  DSLIDE:
  6532 00000BE8 B400                            MOV     AH,0
  6533                                  DSLIDE1:
  6534 00000BEA AC                              LODSB			;Get count of days
  6535 00000BEB 39C2                            CMP     DX,AX           ;See if it will fit
  6536                                          ;JB	SHORT RET23	;If not, done
  6537 00000BED 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6538 00000BEF 29C2                            SUB     DX,AX
  6539 00000BF1 41                              INC     CX              ;Count one more month/year
  6540 00000BF2 EBF6                            JMP     SHORT DSLIDE1
  6541                                  
  6542                                  ;----------------------------------------------------------
  6543                                  
  6544                                  SETYEAR:
  6545                                  
  6546                                  ;Set year with value in CX. Adjust length of February for this year.
  6547                                  
  6548                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6549                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6550                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6551                                  ;	preserve DS as CHKYR is also called as a routine.
  6552                                  
  6553                                  	; MSDOS 6.0 (18/07/2018) ; *
  6554                                  
  6555                                  	;GETDSEG DS
  6556                                  
  6557                                  	;PUSH	CS  ; *
  6558                                  	;POP	DS  ; *
  6559                                  
  6560                                  	; 13/05/2019 - Retro DOS v4.0
  6561 00000BF4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6562                                  
  6563                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6564                                  	; 05/11/2022 
  6565                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6566                                  
  6567 00000BF9 880E[5203]                      MOV     [YEAR],CL
  6568                                  CHKYR:
  6569 00000BFD F6C103                          TEST    CL,3            ;Check for leap year
  6570 00000C00 B01C                            MOV     AL,28
  6571 00000C02 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6572 00000C04 FEC0                            INC     AL              ;Add leap day
  6573                                  SAVFEB:
  6574 00000C06 A2[1D0D]                	mov	[february],al
  6575                                          ;MOV	[MONTAB+1],AL   ;Store for February
  6576                                  RET23:  
  6577 00000C09 C3                      	RETN
  6578                                  
  6579                                  ;----------------------------------------------------------
  6580                                  
  6581                                  DODATE:
  6582 00000C0A E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6583 00000C0D 88F0                            MOV     AL,DH
  6584                                  
  6585 00000C0F BB[1B0D]                        MOV     BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6586                                  
  6587 00000C12 D7                              XLAT                    ;Look up days in month
  6588 00000C13 38D0                            CMP     AL,DL
  6589 00000C15 B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6590                                          ;JB	SHORT RET25	;Error if too many days
  6591 00000C17 72F0                            jb	short RET23 ; 18/07/2018
  6592 00000C19 E8D8FF                  	CALL    SETYEAR
  6593                                  ;
  6594                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6595                                  ;
  6596 00000C1C 8916[5003]                      MOV     [DAY],DX	;Set both day and month
  6597 00000C20 D1E9                            SHR     CX,1
  6598 00000C22 D1E9                            SHR     CX,1
  6599                                  	;mov	ax,1461
  6600 00000C24 B8B505                          MOV     AX,FOURYEARS
  6601 00000C27 89D3                            MOV     BX,DX
  6602 00000C29 F7E1                            MUL     CX
  6603 00000C2B 8A0E[5203]                      MOV     CL,[YEAR]
  6604 00000C2F 80E103                          AND     CL,3
  6605                                  
  6606 00000C32 BE[140D]                        MOV     SI,YRTAB
  6607                                  
  6608 00000C35 89C2                            MOV     DX,AX
  6609 00000C37 D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6610 00000C39 E85200                          CALL    DSUM            ;Add up the days in each year
  6611 00000C3C 88F9                            MOV     CL,BH           ;Month of year
  6612                                  
  6613 00000C3E BE[1C0D]                        MOV     SI,MONTAB
  6614                                  
  6615 00000C41 49                              DEC     CX              ;Account for months starting with one
  6616 00000C42 E84900                          CALL    DSUM            ;Add up days in each month
  6617 00000C45 88D9                            MOV     CL,BL           ;Day of month
  6618 00000C47 49                              DEC     CX              ;Account for days starting with one
  6619 00000C48 01CA                            ADD     DX,CX           ;Add in to day total
  6620 00000C4A 92                              XCHG    AX,DX           ;Get day count in AX
  6621 00000C4B A3[5403]                        MOV     [DAYCNT],AX
  6622 00000C4E 56                              PUSH    SI
  6623 00000C4F 53                              PUSH    BX
  6624 00000C50 50                              PUSH    AX
  6625                                  
  6626 00000C51 BB[B603]                        MOV     BX,TIMEBUF
  6627                                  
  6628 00000C54 B90600                          MOV     CX,6
  6629 00000C57 31D2                            XOR     DX,DX
  6630 00000C59 89D0                            MOV     AX,DX
  6631 00000C5B 53                              PUSH    BX
  6632 00000C5C E87F3B                  	CALL	SETREAD
  6633                                  
  6634 00000C5F 1E                              PUSH    DS
  6635 00000C60 C536[2E00]                      LDS     SI,[BCLOCK]
  6636 00000C64 E8013B                  	CALL	DEVIOCALL2	;Get correct date and time
  6637 00000C67 1F                              POP     DS
  6638 00000C68 5B                              POP     BX
  6639 00000C69 E8A53B                  	CALL	SETWRITE
  6640 00000C6C 8F06[B603]                      POP     WORD [TIMEBUF]
  6641 00000C70 1E                              PUSH    DS
  6642 00000C71 C536[2E00]                      LDS     SI,[BCLOCK]
  6643 00000C75 E8F03A                  	CALL	DEVIOCALL2      ;Set the date
  6644 00000C78 1F                              POP     DS
  6645 00000C79 5B                              POP     BX
  6646 00000C7A 5E                              POP     SI
  6647                                  WKDAY:
  6648 00000C7B A1[5403]                        MOV     AX,[DAYCNT]
  6649 00000C7E 31D2                            XOR     DX,DX
  6650 00000C80 B90700                          MOV     CX,7
  6651 00000C83 40                              INC     AX
  6652 00000C84 40                              INC     AX              ;First day was Tuesday
  6653 00000C85 F7F1                            DIV     CX              ;Compute day of week
  6654 00000C87 8816[5603]                      MOV     [WEEKDAY],DL
  6655 00000C8B 30C0                            XOR     AL,AL           ;Flag OK
  6656                                  RET25:
  6657 00000C8D C3                      	RETN
  6658                                  
  6659                                  ;----------------------------------------------------------
  6660                                  
  6661                                  ;**	DSUM - Compute the sum of a string of bytes
  6662                                  ;
  6663                                  ;	ENTRY	(cx) = byte count
  6664                                  ;		(ds:si) = byte address
  6665                                  ;		(dx) = sum register, initialized by caller
  6666                                  ;	EXIT	(dx) updated
  6667                                  ;	USES	ax, cx, dx, si, flags
  6668                                  
  6669                                  DSUM:
  6670 00000C8E B400                            MOV     AH,0
  6671 00000C90 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6672                                         ;JCXZ	RET25 ; 18/07/2018
  6673                                  DSUM1:
  6674 00000C92 AC                              LODSB
  6675 00000C93 01C2                            ADD     DX,AX
  6676 00000C95 E2FB                            LOOP    DSUM1
  6677                                  DSUM9:
  6678 00000C97 C3                              RETN
  6679                                  
  6680                                  ;============================================================================
  6681                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6682                                  ;============================================================================
  6683                                  ; 29/04/2019 - Retro DOS v4.0
  6684                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6685                                  
  6686                                  ; 12/03/2018 - Retro DOS v2.0 
  6687                                  
  6688                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6689                                  ;NAME	GETSET
  6690                                  
  6691                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6692                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6693                                  
  6694                                  ;USERNUM:
  6695                                  ;	DW	0			; 24 bit user number
  6696                                  ;       DB      0
  6697                                  ;;	IF      IBM
  6698                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6699                                  ;;	ELSE
  6700                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6701                                  ;;	ENDIF
  6702                                  
  6703                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6704                                  ;; 08/07/2018 - Retro DOS v3.0
  6705                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6706                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6707                                  
  6708                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6709                                  ;----------------------------------------------------------------------------
  6710                                  
  6711                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6712                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6713                                  
  6714                                  _$GET_VERSION:
  6715                                  
  6716                                  ; Inputs:
  6717                                  ;       None
  6718                                  ; Function:
  6719                                  ;       Return MS-DOS version number
  6720                                  ; Outputs:
  6721                                  ;       OEM number in BH
  6722                                  ;       User number in BL:CX (24 bits)
  6723                                  ;       Version number as AL.AH in binary
  6724                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6725                                  
  6726                                  ; MSDOS 6.0
  6727                                  ;
  6728                                  ;	Fake_Count is used to lie about the version numbers to support
  6729                                  ;	old binarys. See ms_table.asm for more info.
  6730                                  ;
  6731                                  ;		if input al = 00
  6732                                  ;		  (bh) = OEM number			
  6733                                  ;		else if input al = 01
  6734                                  ;		  (bh) = version flags
  6735                                  ;		 
  6736                                  ;		       	 bits 0-2 = DOS internal revision
  6737                                  ;		       	 bits 3-7 = DOS type flags
  6738                                  ;		              bit 3    = DOS is in ROM
  6739                                  ;		              bit 4    = DOS in in HMA
  6740                                  ;		              bits 5-7 = reserved
  6741                                  ;               M007 change - only bit 3 is now valid. Other bits
  6742                                  ;               are 0 when AL = 1
  6743                                  
  6744                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6745                                  	;--------------------------------------
  6746                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6747                                  
  6748 00000C98 16                              PUSH    SS
  6749 00000C99 1F                              POP     DS
  6750 00000C9A 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6751 00000C9E 8B0E[B203]                      MOV     CX,[USERNUM]
  6752                                  
  6753                                  	; 13/05/2019 - Retro DOS v4.0
  6754                                  
  6755                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6756                                  	;DOS flags
  6757                                  
  6758 00000CA2 3C01                    	cmp	AL,1
  6759 00000CA4 7502                    	jne	short Norm_Vers
  6760                                  
  6761                                  ;ifdef ROMDOS
  6762                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6763                                  ;				(DOSINROM = 8)
  6764                                  ;else
  6765 00000CA6 30FF                            xor     bh,bh		; Otherwise return 0
  6766                                  ;endif				;M007 end
  6767                                  
  6768                                  Norm_Vers:
  6769                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6770                                  
  6771                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6772                                  	; 13/05/2019 - Retro DOS v4.0
  6773 00000CA8 1E                      	push	ds		; Get the version number from the
  6774 00000CA9 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6775                                  	;mov	ax,[40h]
  6776 00000CAD A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6777                                  	; 07/12/2022
  6778 00000CB0 1F                      	pop	ds
  6779 00000CB1 E816F8                  	call	Get_User_Stack
  6780                                  				; Put values for return registers
  6781                                  				; in the proper place on the user's	 
  6782                                  				; stack addressed by DS:SI
  6783                                          ;MOV	[SI+user_env.user_AX],AX
  6784 00000CB4 8904                            MOV	[SI],AX			 
  6785                                  	;MOV	[SI+2],BX		 
  6786 00000CB6 895C02                  	mov	[SI+user_env.user_BX],BX 
  6787                                          ;MOV	[SI+4],CX
  6788 00000CB9 894C04                  	mov	[SI+user_env.user_CX],CX
  6789                                  
  6790 00000CBC C3                      	RETN
  6791                                  
  6792                                  ; 18/07/2018 - Retro DOS v3.0
  6793                                  
  6794                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6795                                  ;----------------------------------------------------------------------------
  6796                                  
  6797                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6798                                  ;
  6799                                  ;	ENTRY	none
  6800                                  ;	EXIT	(al) = value of VERIFY flag
  6801                                  ;	USES	all
  6802                                  
  6803                                  
  6804                                  _$GET_VERIFY_ON_WRITE:
  6805                                  
  6806                                  ;hkn; SS override
  6807 00000CBD 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6808 00000CC1 C3                      	retn
  6809                                  
  6810                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6811                                  ;
  6812                                  ;	ENTRY	(al) = value of VERIFY flag
  6813                                  ;	EXIT	none
  6814                                  ;	USES	all
  6815                                  
  6816                                  _$SET_VERIFY_ON_WRITE:
  6817                                  
  6818 00000CC2 2401                    	AND	AL,1
  6819                                  ;hkn; SS override
  6820 00000CC4 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6821                                  RET27:	; 18/07/2018
  6822 00000CC8 C3                      	retn
  6823                                  
  6824                                  ; 19/07/2018 - Retro DOS v3.0
  6825                                  
  6826                                  ;BREAK <$International - return country-dependent information>
  6827                                  ;----------------------------------------------------------------------------
  6828                                  ;
  6829                                  ; Procedure Name : $INTERNATIONAL
  6830                                  ;
  6831                                  ; Inputs:
  6832                                  ;	MOV	AH,International
  6833                                  ;	MOV	AL,country	(al = 0 => current country)
  6834                                  ;      [MOV	BX,country]
  6835                                  ;	LDS	DX,block
  6836                                  ;	INT	21
  6837                                  ; Function:
  6838                                  ;	give users an idea of what country the application is running
  6839                                  ; Outputs:
  6840                                  ;	IF DX != -1 on input (get country)
  6841                                  ;	  AL = 0 means return current country table.
  6842                                  ;	  0<AL<0FFH means return country table for country AL
  6843                                  ;	  AL = 0FF means return country table for country BX
  6844                                  ;	  No Carry:
  6845                                  ;	     Register BX will contain the 16-bit country code.
  6846                                  ;	     Register AL will contain the low 8 bits of the country code.
  6847                                  ;	     The block pointed to by DS:DX is filled in with the information
  6848                                  ;	     for the particular country.
  6849                                  ;		BYTE  Size of this table excluding this byte and the next
  6850                                  ;		BYTE  Country code represented by this table
  6851                                  ;			A sequence of n bytes, where n is the number specified
  6852                                  ;			by the first byte above and is not > internat_block_max,
  6853                                  ;			in the correct order for being returned by the
  6854                                  ;			INTERNATIONAL call as follows:
  6855                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6856                                  ;		5 BYTE	Currency symbol null terminated
  6857                                  ;		2 BYTE	thousands separator null terminated
  6858                                  ;		2 BYTE	Decimal point null terminated
  6859                                  ;		2 BYTE	Date separator null terminated
  6860                                  ;		2 BYTE	Time separator null terminated
  6861                                  ;		1 BYTE	Bit field.  Currency format.
  6862                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6863                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6864                                  ;		1 BYTE	No. of significant decimal digits in currency
  6865                                  ;		1 BYTE	Bit field.  Time format.
  6866                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6867                                  ;		DWORD	Call address of case conversion routine
  6868                                  ;		2 BYTE	Data list separator null terminated.
  6869                                  ;	  Carry:
  6870                                  ;	     Register AX has the error code.
  6871                                  ;	IF DX = -1 on input (set current country)
  6872                                  ;	  AL = 0 is an error
  6873                                  ;	  0<AL<0FFH means set current country to country AL
  6874                                  ;	  AL = 0FF means set current country to country BX
  6875                                  ;	  No Carry:
  6876                                  ;	    Current country SET
  6877                                  ;	    Register AL will contain the low 8 bits of the country code.
  6878                                  ;	  Carry:
  6879                                  ;	     Register AX has the error code.
  6880                                  ;-----------------------------------------------------------------------------
  6881                                  
  6882                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6883                                  
  6884                                  ; 13/05/2019 - Retro DOS v4.0
  6885                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6886                                  
  6887                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6888                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6889                                  
  6890                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6891                                  	 
  6892 00000CC9 3CFF                    	CMP	AL,0FFH
  6893 00000CCB 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6894 00000CCD 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6895 00000CCF 30FF                    	XOR	BH,BH
  6896                                  BX_HAS_CODE:
  6897 00000CD1 1E                      	PUSH	DS
  6898 00000CD2 07                      	POP	ES
  6899 00000CD3 52                      	PUSH	DX
  6900 00000CD4 5F                      	POP	DI			; User buffer to ES:DI
  6901                                  
  6902                                  ;hkn; SS is DOSDATA
  6903                                  ;	context DS
  6904                                  
  6905 00000CD5 16                      	push	ss
  6906 00000CD6 1F                      	pop	ds
  6907                                  
  6908 00000CD7 83FFFF                  	CMP	DI,-1
  6909 00000CDA 7465                    	JZ	short international_set
  6910 00000CDC 09DB                    	OR	BX,BX
  6911 00000CDE 7505                    	JNZ	short international_find
  6912                                  
  6913                                  ;hkn; country_cdpg is in DOSDATA segment.
  6914 00000CE0 BE[2812]                	MOV	SI,COUNTRY_CDPG
  6915                                  
  6916 00000CE3 EB41                    	JMP	SHORT international_copy
  6917                                  
  6918                                  international_find:
  6919 00000CE5 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6920 00000CE8 E80B00                  	CALL	international_get
  6921 00000CEB 725C                    	JC	short errtn
  6922 00000CED 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6923 00000CF0 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6924 00000CF2 89D3                    	MOV	BX,DX			 ; put country back
  6925 00000CF4 EB40                    	JMP	SHORT international_ok3
  6926                                  
  6927                                  international_get:
  6928 00000CF6 BE[2812]                	MOV	SI,COUNTRY_CDPG
  6929                                  
  6930                                  ;hkn; country_cdpg is in DOSDATA segment.
  6931                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6932                                  
  6933                                  	; MSDOS 3.3
  6934                                  	;;cmp	bx,[SI+63h]
  6935                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6936                                  	;jz	short RET27
  6937                                  
  6938                                  	; 13/05/2019 - Retro DOS v4.0
  6939                                  
  6940                                  	; MSDOS 6.0
  6941                                  	;cmp	bx,[ss:si+68h]
  6942 00000CF9 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6943 00000CFD 74C9                    	jz	short RET27			; return if equal
  6944                                  
  6945 00000CFF 89DA                    	MOV	DX,BX
  6946 00000D01 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6947                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6948 00000D03 B80014                  	mov	ax,1400h
  6949 00000D06 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6950                                  			; Return: AL = 00h not installed, OK to install
  6951                                  			; 01h not installed, not OK
  6952                                  			; FFh installed
  6953 00000D08 3CFF                    	CMP	AL,0FFH
  6954 00000D0A 7516                    	JNZ	short interr		; not in memory
  6955                                  	;cmp	bp,0
  6956 00000D0C 09ED                    	or	bp,bp			; GetCntry ?
  6957 00000D0E 7507                    	JNZ	short stcdpg
  6958                                  	
  6959                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6960 00000D10 B80414                  	mov     ax,1404h
  6961 00000D13 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6962                                  			; BX = code page, DX = country code,
  6963                                  			; DS:SI -> internal code page structure
  6964                                  			; ES:DI -> user buffer
  6965                                  			; Return: AL = status
  6966                                  
  6967 00000D15 EB05                    	JMP	short chkok
  6968                                  	
  6969                                  	;nop
  6970                                  
  6971                                  stcdpg:
  6972                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6973 00000D17 B80314                  	mov     ax,1403h
  6974 00000D1A CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6975                                  			; DS:SI -> internal code page structure
  6976                                  			; BX = code page, DX = country code
  6977                                  			; Return: AL = status
  6978                                  chkok:
  6979 00000D1C 08C0                    	or	al,al			; success ?
  6980                                  	;retz				; yes
  6981 00000D1E 74A8                    	jz	short RET27
  6982                                  
  6983                                  setcarry:
  6984 00000D20 F9                      	STC				; set carry
  6985 00000D21 C3                      	retn
  6986                                  interr:
  6987 00000D22 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6988 00000D24 EBFA                    	JMP	short setcarry
  6989                                  
  6990                                  international_copy:
  6991                                  
  6992                                  ;hkn; country_cdpg is in DOSDATA segment.
  6993                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6994                                  
  6995                                  	; MSDOS 3.3
  6996                                  	;;mov	bx,[SI+63h]
  6997                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  6998                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  6999                                  
  7000                                  	; 13/05/2019 - Retro DOS v4.0
  7001                                  
  7002                                  	; MSDOS 6.0
  7003                                  	;mov	bx,[ss:si+68h]
  7004 00000D26 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7005 00000D2A BE[9412]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7006                                  
  7007                                  	;mov	cx,24
  7008 00000D2D B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7009                                  
  7010                                  	; MSDOS 6.0
  7011                                  
  7012                                  ;hkn;	must set up DS to SS so that international info can be copied
  7013                                  	
  7014 00000D30 1E                      	push	ds
  7015                                  
  7016 00000D31 16                      	push	ss			; cs -> ss
  7017 00000D32 1F                      	pop	ds
  7018                                  
  7019 00000D33 F3A4                    	REP	MOVSB			; copy country info
  7020                                  
  7021                                  	; MSDOS 6.0
  7022                                  
  7023 00000D35 1F                      	pop	ds	;hkn;	restore ds
  7024                                  
  7025                                  international_ok3:
  7026 00000D36 E891F7                  	call	Get_User_Stack
  7027                                  ;ASSUME	DS:NOTHING
  7028                                  	;MOV	[SI+2],BX
  7029 00000D39 895C02                  	MOV	[SI+user_env.user_BX],BX
  7030                                  international_ok:
  7031 00000D3C 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7032                                  ;SYS_RET_OK_jmp:
  7033                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7034                                  nono:	; 15/12/2022
  7035                                  SYS_RET_OK_jmp:
  7036 00000D3E E943F9                  	jmp	SYS_RET_OK
  7037                                  
  7038                                  international_set:
  7039                                  
  7040                                  ;hkn; ASSUME	DS:DOSGROUP
  7041                                  ;ASSUME	DS:DOSDATA
  7042                                  
  7043 00000D41 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7044 00000D44 E8AFFF                  	CALL	international_get
  7045 00000D47 73F3                    	JNC	short international_ok
  7046                                  errtn:
  7047 00000D49 3CFF                    	CMP	AL,0FFH
  7048 00000D4B 7403                    	JZ	short errtn2
  7049                                  errtn1:
  7050 00000D4D E93DF9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7051                                  errtn2:
  7052                                  	;error	error_invalid_function	; NLSFUNC not existent
  7053                                  
  7054                                  	;mov	al,1
  7055 00000D50 B001                    	mov	al,error_invalid_function 
  7056 00000D52 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7057                                  ;errtn3:
  7058                                  ;	jmp	SYS_RET_ERR
  7059                                  
  7060                                  ;EndProc $INTERNATIONAL
  7061                                  
  7062                                  ; 19/07/2018
  7063                                  
  7064                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7065                                  
  7066                                  ;----------------------------------------------------------------------------
  7067                                  ;
  7068                                  ; Procedure Name : $GetExtCntry
  7069                                  ;
  7070                                  ; Inputs:
  7071                                  ;	if AL >= 20H
  7072                                  ;	  AL= 20H    capitalize single char, DL= char
  7073                                  ;	      21H    capitalize string, CX= string length
  7074                                  ;	      22H    capitalize ASCIIZ string
  7075                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7076                                  ;	      80H bit 0 = use normal upper case table
  7077                                  ;		      1 = use file upper case table
  7078                                  ;	   DS:DX points to string
  7079                                  ;
  7080                                  ;	else
  7081                                  ;
  7082                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7083                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7084                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7085                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7086                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7087                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7088                                  ;	INT	21
  7089                                  ; Function:
  7090                                  ;	give users extended country dependent information
  7091                                  ;	or capitalize chars
  7092                                  ; Outputs:
  7093                                  ;	  No Carry:
  7094                                  ;	     extended country info is succesfully returned
  7095                                  ;	  Carry:
  7096                                  ;	     Register AX has the error code.
  7097                                  ;	     AX=0, NO	 for YES/NO CHECK
  7098                                  ;		1, YES
  7099                                  ;----------------------------------------------------------------------------
  7100                                  
  7101                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7102                                  
  7103                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7104                                  
  7105                                  	; MSDOS 6.0
  7106                                  _$GetExtCntry:
  7107 00000D54 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7108 00000D56 7269                    	JB	short notcap
  7109                                  capcap: 				;
  7110 00000D58 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7111 00000D5A 7505                    	JNZ	short fileupper		; file upper case
  7112                                  
  7113                                  ;hkn; UCASE_TAB in DOSDATA
  7114 00000D5C BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7115 00000D5F EB03                    	JMP	SHORT capit
  7116                                  
  7117                                  fileupper:
  7118                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7119 00000D61 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7120                                  capit:					;
  7121 00000D64 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7122 00000D66 750D                    	JNZ	short chkyes		; no
  7123 00000D68 88D0                    	MOV	AL,DL			; set up AL
  7124 00000D6A E81F44                  	call	GETLET3 		; upper case it
  7125 00000D6D E85AF7                  	call	Get_User_Stack		; get user stack
  7126                                  	;mov	[si+6],al
  7127 00000D70 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7128 00000D73 EBC9                    	JMP	SHORT nono		; done
  7129                                  chkyes: 				;
  7130 00000D75 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7131 00000D77 7522                    	JNZ	short capstring		; no
  7132                                  
  7133 00000D79 31C0                    	XOR	AX,AX			; presume NO
  7134                                  		      
  7135                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7136                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7137                                  
  7138                                  	; 06/08/2018 - Retro DOS v3.0
  7139                                  	; 13/05/2019 - Retro DOS v4.0
  7140                                  	;cmp	dl,'Y'
  7141 00000D7B 2E3A16[6D0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7142 00000D80 7416                    	JZ	short yesyes		; yes
  7143                                  	;cmp	dl,'y'
  7144 00000D82 2E3A16[6F0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7145 00000D87 740F                    	JZ	short yesyes		; yes
  7146                                  	;cmp	dl,'N'
  7147 00000D89 2E3A16[6E0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7148 00000D8E 74AE                    	JZ	short nono		; no
  7149                                  	;cmp	dl,'n'
  7150 00000D90 2E3A16[700A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7151 00000D95 74A7                    	JZ	short nono		; no
  7152                                  ;dbcs_char:				;
  7153 00000D97 40                      	INC	AX			; not YES or NO
  7154                                  yesyes: 				;
  7155 00000D98 40                      	INC	AX			; return 1
  7156                                  	; 15/12/2022
  7157                                  ;nono:	
  7158 00000D99 EBA3                    	jmp	short SYS_RET_OK_jmp	;
  7159                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7160                                  	;jmp	SYS_RET_OK		; done
  7161                                  
  7162                                  capstring:				;
  7163 00000D9B 89D6                    	MOV	SI,DX			; si=dx
  7164 00000D9D 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7165 00000D9F 750F                    	JNZ	short capascii		; no
  7166 00000DA1 09C9                    	OR	CX,CX			; check count 0
  7167 00000DA3 7499                    	JZ	short nono		; yes finished
  7168                                  concap: 				;
  7169 00000DA5 AC                      	LODSB				; get char
  7170 00000DA6 E8E343                  	call	GETLET3 		; upper case it
  7171 00000DA9 8844FF                  	MOV	byte [SI-1],AL		; store back
  7172                                  ;next99: 				;
  7173 00000DAC E2F7                    	LOOP	concap			; continue
  7174 00000DAE EB8E                    	JMP	short nono		; done
  7175                                  capascii:				;
  7176 00000DB0 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7177 00000DB2 7545                    	JNZ	short capinval		; no
  7178                                  concap2:				;
  7179 00000DB4 AC                      	LODSB				; get char
  7180 00000DB5 08C0                    	or	al,al			; end of string ?
  7181 00000DB7 7485                    	JZ	short nono		; yes
  7182 00000DB9 E8D043                  	call	GETLET3 		; upper case it
  7183 00000DBC 8844FF                  	MOV	[SI-1],AL		; store back
  7184 00000DBF EBF3                    	JMP	short concap2 		; continue
  7185                                  
  7186                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7187                                  
  7188                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7189                                  ; _$GetExtCntry:
  7190                                  
  7191                                  notcap:
  7192 00000DC1 83F905                  	CMP	CX,5			; minimum size is 5
  7193 00000DC4 7279                    	jb	short sizeerror
  7194                                  
  7195                                  GEC_CONT:
  7196                                  ;hkn; SS is DOSDATA
  7197                                  	;context DS
  7198                                  
  7199 00000DC6 16                      	push	ss
  7200                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7201 00000DC7 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7202                                  	
  7203                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7204 00000DC8 BE[2812]                	MOV	SI,COUNTRY_CDPG
  7205                                  
  7206 00000DCB 83FAFF                  	CMP	DX,-1			; active country ?
  7207 00000DCE 7503                    	JNZ	short GETCDPG 		; no
  7208                                  
  7209                                  ;hkn; use DS override to accesss country_cdpg fields
  7210                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7211                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7212 00000DD0 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7213                                  					; get active country id;smr;use DS
  7214                                  GETCDPG:
  7215 00000DD3 83FBFF                  	CMP	BX,-1			; active code page?
  7216 00000DD6 7503                    	JNZ	short CHKAGAIN		; no, check again
  7217                                  
  7218                                  ;hkn; use DS override to accesss country_cdpg fields
  7219                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7220                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7221 00000DD8 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7222                                  					; get active code page id;smr;Use DS
  7223                                  CHKAGAIN:
  7224                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7225 00000DDB 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7226                                  					; same as active country id?;smr;use DS
  7227 00000DDE 7552                    	JNZ	short CHKNLS		; no
  7228                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7229 00000DE0 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7230                                  					; same as active code pg id?;smr;use DS
  7231 00000DE3 754D                    	JNZ	short CHKNLS		; no
  7232                                  CHKTYPE:
  7233                                  	;mov	bx,[si+48h]
  7234 00000DE5 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7235                                  					; bx = sys code page id;smr;use DS
  7236 00000DE8 51                      	PUSH	CX			; save cx
  7237                                  	;mov	cx,[si+4Ah]
  7238 00000DE9 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7239                                  	;mov	si,COUNTRY_CDPG+76
  7240 00000DEC BE[7412]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7241                                  NXTENTRY:
  7242 00000DEF 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7243 00000DF1 740B                    	JZ	short FOUNDIT
  7244 00000DF3 83C605                  	ADD	SI,5			; next entry
  7245 00000DF6 E2F7                    	LOOP	NXTENTRY
  7246 00000DF8 59                      	POP	CX
  7247                                  capinval:
  7248                                  	;error	error_invalid_function	; info type not found
  7249                                  	;mov	al,1
  7250 00000DF9 B001                    	mov	al,error_invalid_function
  7251                                  ;SYS_RET_ERR_jmp:
  7252                                  	;jmp	SYS_RET_ERR
  7253                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7254                                  SYS_RET_ERR_jmp:
  7255 00000DFB E98FF8                  	jmp	SYS_RET_ERR	
  7256                                  
  7257                                  FOUNDIT:
  7258 00000DFE A4                      	MOVSB				; move info id byte
  7259 00000DFF 59                      	POP	CX			; restore char count
  7260                                  	;cmp	al,1
  7261 00000E00 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7262 00000E02 7415                    	JZ	short setsize
  7263 00000E04 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7264 00000E07 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7265                                  OK_RETN:
  7266 00000E0A F3A4                    	REP	MOVSB			; copy info
  7267 00000E0C 89C1                    	MOV	CX,AX			; CX = actual length returned
  7268 00000E0E 89D8                    	MOV	AX,BX			; return sys code page in ax
  7269                                  GETDONE:
  7270 00000E10 E8B7F6                  	call	Get_User_Stack		; return actual length to user's CX
  7271                                  	;mov	[si+4],cx 
  7272 00000E13 894C04                  	MOV	[SI+user_env.user_CX],CX
  7273                                  	;jmp	SYS_RET_OK
  7274                                  	; 15/12/2022
  7275                                  	; 25/06/2019
  7276 00000E16 E96EF8                  	jmp	SYS_RET_OK_clc
  7277                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7278                                  	; 15/12/2022
  7279                                  ;nono_jmp:
  7280                                  	;jmp	short nono
  7281                                  setsize:
  7282 00000E19 83E903                  	SUB	CX,3			; size after length field
  7283 00000E1C 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7284 00000E1E 7302                    	JAE	short setsize2		; no
  7285 00000E20 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7286                                  setsize2:
  7287 00000E22 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7288 00000E25 83C702                  	ADD	DI,2			; update index
  7289 00000E28 83C602                  	ADD	SI,2
  7290 00000E2B 89C8                    	MOV	AX,CX
  7291 00000E2D 83C003                  	ADD	AX,3			; AX has the actual length
  7292 00000E30 EBD8                    	JMP	short OK_RETN 		; go move it
  7293                                  CHKNLS:
  7294 00000E32 30E4                    	XOR	AH,AH
  7295 00000E34 50                      	PUSH	AX			; save info type
  7296 00000E35 5D                      	POP	BP			; bp = info type
  7297                                  	
  7298                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7299 00000E36 B80014                  	mov     ax,1400h
  7300 00000E39 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7301                                  			; Return: AL = 00h not installed, OK to install
  7302                                  			; 01h not installed, not OK
  7303                                  			; FFh installed
  7304 00000E3B 3CFF                    	CMP	AL,0FFH
  7305 00000E3D 7404                    	JZ	short NLSNXT		; in memory
  7306                                  
  7307                                  sizeerror:
  7308                                  	;error	error_invalid_function
  7309                                  	;mov	al,1
  7310 00000E3F B001                    	mov	al,error_invalid_function
  7311                                  	;jmp	SYS_RET_ERR
  7312                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7313                                  sys_ret_err_jmp2:
  7314 00000E41 EBB8                    	jmp	short SYS_RET_ERR_jmp
  7315                                  
  7316                                  NLSNXT: 
  7317                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7318 00000E43 B80214                  	mov     ax,1402h
  7319 00000E46 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7320                                  			; BP = subfunction, BX = code page
  7321                                  			; DX = country code, DS:SI -> internal code page structure
  7322                                  			; ES:DI -> user buffer, CX = size of user buffer
  7323                                  			; Return: AL = status
  7324                                  			; 00h successful
  7325                                  			; else DOS error code
  7326                                  
  7327 00000E48 3C00                    	CMP	AL,0			; success ?
  7328 00000E4A 7505                    	JNZ	short NLSERROR
  7329                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7330 00000E4C 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7331                                  			; ax = sys code page id;smr;use ds;
  7332                                  			;BUGBUG;check whether DS is OK after the above calls
  7333 00000E4F EBBF                    	JMP	short GETDONE
  7334                                  seterr:
  7335                                  	; 15/12/2022
  7336                                  NLSERROR:
  7337                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7338                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7339                                  	;jmp	short sys_ret_err_jmp2
  7340                                  	; 15/12/2022
  7341 00000E51 EBA8                    	jmp	short SYS_RET_ERR_jmp
  7342                                  
  7343                                  ;EndProc $GetExtCntry
  7344                                  
  7345                                  ; 13/05/2019 - Retro DOS v4.0
  7346                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7347                                  
  7348                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7349                                  ;----------------------------------------------------------------------------
  7350                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7351                                  ;
  7352                                  ;   System call format:
  7353                                  ;
  7354                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7355                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7356                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7357                                  ;	INT	21
  7358                                  ;
  7359                                  ;	ENTRY	(al) = n
  7360                                  ;		(bx) = code page
  7361                                  ;	EXIT	'C' clear
  7362                                  ;		  global code page is set	(set global code page)
  7363                                  ;		  (BX) = active code page id	(get global code page)
  7364                                  ;		  (DX) = system code page id	(get global code page)
  7365                                  ;		'C' set
  7366                                  ;		  (AX) = error code
  7367                                  
  7368                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7369                                  
  7370                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7371                                  	; DOSCODE:4BC9h
  7372                                  
  7373                                  _$GetSetCdPg:
  7374                                  
  7375                                  ;hkn; SS is DOSDATA
  7376                                  	;context DS
  7377                                  
  7378 00000E53 16                      	push	ss
  7379 00000E54 1F                      	pop	ds
  7380                                  
  7381                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7382 00000E55 BE[2812]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7383                                  
  7384 00000E58 3C01                    	CMP	AL,1		       ; get global code page
  7385 00000E5A 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7386                                  	
  7387                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7388                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7389 00000E5C 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7390                                  					; get active code page id;smr;use ds
  7391                                  	;mov	dx,[si+48h]
  7392 00000E5F 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7393                                  				  	; get sys code page id;smr;use ds
  7394 00000E62 E865F6                  	call	Get_User_Stack
  7395                                  ;ASSUME DS:NOTHING
  7396                                  	;mov	[si+2],bx
  7397 00000E65 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7398                                  	;mov	[si+6],dx
  7399 00000E68 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7400                                  OK_RETURN:
  7401                                  	; 15/12/2022
  7402                                  	;transfer SYS_RET_OK
  7403 00000E6B E916F8                  	jmp	SYS_RET_OK
  7404                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7405                                  	;jmp	short nono_jmp
  7406                                  
  7407                                  ;hkn; ASSUME DS:DOSGROUP
  7408                                  ;ASSUME	DS:DOSDATA
  7409                                  
  7410                                  setglpg:
  7411 00000E6E 3C02                    	CMP	AL,2
  7412 00000E70 7531                    	JNZ	short nomem
  7413                                  	
  7414                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7415                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7416 00000E72 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7417                                  	
  7418                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7419 00000E75 B80014                  	mov     ax,1400h
  7420 00000E78 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7421                                  			; Return: AL = 00h not installed, OK to install
  7422                                  			; 01h not installed, not OK
  7423                                  			; FFh installed
  7424 00000E7A 3CFF                    	CMP	AL,0FFH
  7425 00000E7C 7525                    	JNZ	short nomem		; not in memory
  7426                                  
  7427                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7428 00000E7E B80114                  	mov     ax,1401h
  7429 00000E81 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7430                                  			; DS:SI -> internal code page structure
  7431                                  			; BX = new code page, DX = country code???
  7432                                  			; Return: AL = status
  7433                                  			; 00h successful
  7434                                  			; else DOS error code
  7435                                  	;cmp	al,0
  7436 00000E83 08C0                    	or	al,al			; success ?
  7437 00000E85 74E4                    	JZ	short OK_RETURN		; yes
  7438                                  
  7439 00000E87 3C41                    	CMP	AL,65			; set device code page failed
  7440 00000E89 75C6                    	JNZ	short seterr
  7441 00000E8B B84100                  	MOV	AX,65
  7442 00000E8E A3[2403]                	MOV	[EXTERR],AX
  7443                                  	;mov	byte [EXTERR_ACTION],6
  7444                                  	;mov	byte [EXTERR_CLASS],5
  7445                                  	;mov	byte [EXTERR_LOCUS],4
  7446 00000E91 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7447 00000E96 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7448 00000E9B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7449                                  	;transfer From_GetSet
  7450 00000EA0 E9F2F7                  	jmp	From_GetSet
  7451                                  
  7452                                  	; 15/12/2022
  7453                                  ;seterr:
  7454                                  	;;;transfer SYS_RET_ERR
  7455                                  	;;jmp	SYS_RET_ERR
  7456                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7457                                  	;jmp	short NLSERROR
  7458                                  
  7459                                  nomem:
  7460                                  	;error	error_invalid_function ; function not defined
  7461                                  	;mov	al,1
  7462 00000EA3 B001                    	mov	al,error_invalid_function
  7463 00000EA5 EBAA                    	jmp	short seterr
  7464                                  
  7465                                  ;EndProc $GetSetCdPg
  7466                                  
  7467                                  ; 13/05/2019 - Retro DOS v4.0
  7468                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7469                                  
  7470                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7471                                  ;----------------------------------------------------------------------------
  7472                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7473                                  ;
  7474                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7475                                  ;		drive.
  7476                                  ;
  7477                                  ;	This call returns the same info in the same registers (except for the
  7478                                  ;	FAT pointer) as the old FAT pointer calls
  7479                                  ;
  7480                                  ;	ENTRY	DL = Drive number
  7481                                  ;	EXIT	AX = Sectors per allocation unit
  7482                                  ;		   = -1 if bad drive specified
  7483                                  ;		On User Stack
  7484                                  ;		    BX = Number of free allocation units
  7485                                  ;		    DX = Total Number of allocation units on disk
  7486                                  ;		    CX = Sector size
  7487                                  
  7488                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7489                                  
  7490                                  _$GET_DRIVE_FREESPACE:
  7491                                  
  7492                                  ;hkn; SS is DOSDATA
  7493                                  	;context DS
  7494 00000EA7 16                      	push	ss
  7495 00000EA8 1F                      	pop	ds
  7496                                  
  7497 00000EA9 88D0                    	MOV	AL,DL
  7498                                  	;invoke	GetThisDrv		; Get drive
  7499 00000EAB E8205D                  	call	GETTHISDRV
  7500                                  SET_AX_RET:
  7501 00000EAE 7218                    	JC	short BADFDRV
  7502                                  	;invoke	DISK_INFO
  7503 00000EB0 E8D91E                  	call	DISK_INFO
  7504 00000EB3 87D3                    	XCHG	DX,BX
  7505 00000EB5 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7506 00000EB7 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7507                                  DoSt:
  7508 00000EB9 E80EF6                  	call	Get_User_Stack
  7509                                  ;ASSUME	DS:NOTHING
  7510                                  	;mov	[si+6],dx
  7511                                  	;mov	[si+4],cx
  7512                                  	;mov	[si+2],bx
  7513 00000EBC 895406                  	MOV	[SI+user_env.user_DX],DX
  7514 00000EBF 894C04                  	MOV	[SI+user_env.user_CX],CX
  7515 00000EC2 895C02                  	MOV	[SI+user_env.user_BX],BX
  7516                                  	;MOV	[SI+user_env.user_AX],AX
  7517 00000EC5 8904                    	mov     [si],ax
  7518                                  	;return
  7519 00000EC7 C3                      	retn
  7520                                  
  7521                                  BADFDRV:
  7522                                  	; MSDOS 3.3
  7523                                  	;;mov	al,0Fh
  7524                                  	;mov	al,error_invalid_drive	; Assume error
  7525                                  
  7526                                  	; 13/05/2019 - Retro DOS v4.0
  7527                                  
  7528                                  	; MSDOS 6.0 & MSDOS 3.3
  7529                                  	;invoke	FCB_RET_ERR
  7530 00000EC8 E8D8F7                  	call	FCB_RET_ERR
  7531                                  	
  7532 00000ECB B8FFFF                  	MOV	AX,-1
  7533 00000ECE EBE9                    	JMP	short DoSt
  7534                                  
  7535                                  ;EndProc $GET_DRIVE_FREESPACE
  7536                                  
  7537                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7538                                  ;----------------------------------------------------------------------------
  7539                                  ;**	$Get_DMA - Get Disk Transfer Address
  7540                                  ;
  7541                                  ;	ENTRY	none
  7542                                  ;	EXIT	ES:BX is current transfer address
  7543                                  ;	USES	all
  7544                                  
  7545                                  _$GET_DMA:
  7546 00000ED0 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7547 00000ED5 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7548 00000EDA E8EDF5                  	call	Get_User_Stack
  7549                                  	;mov	[si+2],bx
  7550                                  	;mov	[si+10h],cx
  7551 00000EDD 895C02                  	MOV	[SI+user_env.user_BX],BX
  7552 00000EE0 894C10                  	MOV	[SI+user_env.user_ES],CX
  7553 00000EE3 C3                      	retn
  7554                                  
  7555                                  ;**	$Set_DMA - Set Disk Transfer Address
  7556                                  ;----------------------------------------------------------------------------
  7557                                  ;	ENTRY	DS:DX is current transfer address
  7558                                  ;	EXIT	none
  7559                                  ;	USES	all
  7560                                  
  7561                                  _$SET_DMA:
  7562 00000EE4 368916[2C03]            	MOV	[SS:DMAADD],DX
  7563 00000EE9 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7564 00000EEE C3                      	retn
  7565                                  
  7566                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7567                                  ;------------------------------------------------------------------------------
  7568                                  
  7569                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7570                                  ;-----------------------------------------------------
  7571                                  ;	ENTRY	none
  7572                                  ;	EXIT	(AL) = drive number
  7573                                  ;	USES	all
  7574                                  
  7575                                  _$GET_DEFAULT_DRIVE:
  7576 00000EEF 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7577 00000EF3 C3                      	retn
  7578                                  
  7579                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7580                                  ;-----------------------------------------------------
  7581                                  ;	ENTRY	(DL) = Drive number for new default drive
  7582                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7583                                  
  7584                                  _$SET_DEFAULT_DRIVE:
  7585 00000EF4 88D0                    	MOV	AL,DL
  7586 00000EF6 FEC0                    	INC	AL			; A=1, B=2...
  7587 00000EF8 E8B75C                  	call	GetVisDrv		; see if visible drive
  7588 00000EFB 7204                    	JC	short SETRET		; errors do not set
  7589 00000EFD 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7590                                  
  7591                                  SETRET:
  7592 00000F01 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7593 00000F05 C3                      	retn
  7594                                  
  7595                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7596                                  ;----------------------------------------------------------------------------
  7597                                  
  7598                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7599                                  ;---------------------------------------------------
  7600                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7601                                  ;	contents of an interrupt vector.
  7602                                  ;
  7603                                  ;	ENTRY	(AL) = interrupt number
  7604                                  ;	EXIT	(ES:BX) = current interrupt vector
  7605                                  
  7606                                  _$GET_INTERRUPT_VECTOR:
  7607 00000F06 E83000                  	CALL	RECSET
  7608 00000F09 26C41F                  	LES	BX,[ES:BX]
  7609 00000F0C E8BBF5                  	call	Get_User_Stack
  7610                                  	;mov	[si+2],bx
  7611                                  	;mov	[si+10h],es
  7612 00000F0F 895C02                  	MOV	[SI+user_env.user_BX],BX
  7613 00000F12 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7614 00000F15 C3                      	retn
  7615                                  
  7616                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7617                                  ;---------------------------------------------------
  7618                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7619                                  ;	contents of an interrupt vector.
  7620                                  ;
  7621                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7622                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7623                                  ;	for explanation.
  7624                                  ;
  7625                                  ;	ENTRY	(AL) = interrupt number
  7626                                  ;		(ds:dx) = desired new vector value
  7627                                  ;	EXIT	none
  7628                                  ;	USES	all
  7629                                  
  7630                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7631                                  ; 13/05/2019 - Retro DOS v4.0
  7632                                  
  7633                                  _$SET_INTERRUPT_VECTOR:
  7634 00000F16 E82000                  	CALL	RECSET
  7635 00000F19 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7636 00000F1A 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7637 00000F1D 268C5F02                	MOV	[ES:BX+2],DS
  7638 00000F21 FB                      	STI
  7639                                  					; M004, M068 - Start
  7640                                  	; MSDOS 6.0
  7641 00000F22 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7642                                  					; Q: was the previous call an int 21
  7643                                  					;    exec call
  7644                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7645                                  	;jnz	short siv_1		; Y: go set count
  7646                                  	;retn				; N: return
  7647                                  	; 15/12/2022
  7648 00000F28 740E                    	jz	short siv_2
  7649                                  siv_1:	
  7650 00000F2A 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7651 00000F30 7506                    	jne	short siv_2		 ; N: done 
  7652 00000F32 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7653                                  					 ; dispatcher to turn A20 Off before 
  7654                                  					 ; returning to user.
  7655                                  siv_2:
  7656                                  	; 07/12/2022
  7657 00000F38 C3                      	retn				; M004, M068 - End
  7658                                  	
  7659                                  RECSET:
  7660 00000F39 31DB                    	XOR	BX,BX
  7661 00000F3B 8EC3                    	MOV	ES,BX
  7662 00000F3D 88C3                    	MOV	BL,AL
  7663 00000F3F D1E3                    	SHL	BX,1
  7664 00000F41 D1E3                    	SHL	BX,1
  7665 00000F43 C3                      	retn
  7666                                  
  7667                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7668                                  ;-------------------------------------------------------------------------------------
  7669                                  
  7670                                  ;**	$Char_Oper - Manipulate Switch Character
  7671                                  ;
  7672                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7673                                  ;
  7674                                  ;	ENTRY	AL = function:
  7675                                  ;		    0 - read switch char
  7676                                  ;		    1 - set switch char (char in DL)
  7677                                  ;		    2 - read device availability
  7678                                  ;			Always returns available
  7679                                  ;		    3 - set device availability
  7680                                  ;			No longer supported (NOP)
  7681                                  ;	EXIT	(al) = 0xff iff error
  7682                                  ;		(al) != 0xff if ok
  7683                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7684                                  ;	USES	AL, DL
  7685                                  ;
  7686                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7687                                  ;		The character / is always returned for subfunction 0,
  7688                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7689                                  
  7690                                  ; 13/05/2019 - Retro DOS v4.0
  7691                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7692                                  
  7693                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7694                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7695                                  
  7696                                  _$CHAR_OPER:
  7697                                  	; MSDOS 6.0
  7698 00000F44 08C0                    	or	al,al				; get switch?
  7699 00000F46 B22F                    	mov	dl,'/'				; assume yes
  7700 00000F48 7407                    	jz	short chop_1			; jump if yes
  7701 00000F4A 3C02                    	cmp	al,2				; check device availability?
  7702 00000F4C B2FF                    	mov	dl,-1				; assume yes
  7703 00000F4E 7401                    	jz	short chop_1			; jump if yes
  7704 00000F50 C3                      	retn					; otherwise just quit
  7705                                  
  7706                                  ; subfunctions requiring return of value to user come here. DL holds
  7707                                  ; value to return
  7708                                  
  7709                                  chop_1:
  7710 00000F51 E876F5                  	call	Get_User_Stack
  7711 00000F54 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7712 00000F57 C3                      	retn
  7713                                  
  7714                                  	; MSDOS 3.3
  7715                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7716                                  	;push	ss
  7717                                  	;pop	ds
  7718                                  	;cmp	al,1
  7719                                  	;jb	short chop_1
  7720                                  	;jz	short chop_2
  7721                                  	;cmp	al,3
  7722                                  	;jb	short chop_3
  7723                                  	;jz	short chop_5
  7724                                  	;mov	al,0FFh
  7725                                  	;retn
  7726                                  ;chop_1:
  7727                                  	;mov	dl,[chSwitch]
  7728                                  	;jmp	short chop_4
  7729                                  ;chop_2:
  7730                                  	;mov	[chSwitch],dl
  7731                                  	;retn
  7732                                  ;chop_3:
  7733                                  	;mov	dl, FFh
  7734                                  ;chop_4:
  7735                                  	;call	Get_User_Stack
  7736                                  	;mov	[si+6],dx
  7737                                  ;chop_5:
  7738                                  	;retn
  7739                                  
  7740                                  ;**	$GetExtendedError - Return Extended error code
  7741                                  ;----------------------------------------------------------------------------
  7742                                  ;	This function reads up the extended error info from the static
  7743                                  ;	variables where it was stored.
  7744                                  ;
  7745                                  ;	ENTRY	none
  7746                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7747                                  ;		BL = recommended action
  7748                                  ;		BH = class of error
  7749                                  ;		CH = locus of error
  7750                                  ;		ES:DI = may be pointer
  7751                                  ;	USES	ALL
  7752                                  
  7753                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7754                                  
  7755                                  _$GetExtendedError:
  7756 00000F58 16                      	push	ss
  7757 00000F59 1F                      	pop	ds
  7758 00000F5A A1[2403]                	MOV	AX,[EXTERR]
  7759 00000F5D C43E[2803]              	LES	DI,[EXTERRPT]
  7760 00000F61 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7761 00000F65 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7762 00000F69 E85EF5                  	call	Get_User_Stack
  7763                                  	;mov	[si+0Ah],di
  7764 00000F6C 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7765                                  	;mov	[si+10h],es
  7766 00000F6F 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7767                                  	;mov	[si+2],bx
  7768 00000F72 895C02                  	MOV	[SI+user_env.user_BX],BX
  7769                                  	;mov	[si+4],cx
  7770 00000F75 894C04                  	MOV	[SI+user_env.user_CX],CX
  7771                                  jmp_SYS_RET_OK:
  7772                                  	; 15/12/2022
  7773                                  	;jmp	SYS_RET_OK
  7774                                  	; 25/06/2019
  7775 00000F78 E90CF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7776                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7777                                  ;jmp_SYS_RET_OK:
  7778                                  	;jmp	SYS_RET_OK
  7779                                  
  7780                                  ; --------------------------------------------------------------------------
  7781                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7782                                  	; DOSCODE:4CF3h
  7783                                  ;patch_or_unknown:
  7784                                  ;get_code_page:
  7785 00000F7B 56                      	push    si
  7786 00000F7C BE[2812]                	mov     si, COUNTRY_CDPG
  7787                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7788 00000F7F 368B446A                	mov     ax, [ss:si+6Ah]
  7789 00000F83 5E                      	pop     si
  7790 00000F84 C3                      	retn
  7791                                  ; --------------------------------------------------------------------------	
  7792                                  
  7793                                  ; 29/04/2019 - Retro DOS v4.0
  7794                                  
  7795                                  ;BREAK	<ECS_call - Extended Code System support function>
  7796                                  ;---------------------------------------------------------------------------
  7797                                  ; Inputs:
  7798                                  ;	AL = 0	get lead byte table
  7799                                  ;		on return DS:SI has the table location
  7800                                  ;
  7801                                  ;	AL = 1	set / reset interim console flag
  7802                                  ;		DL = flag (00H or 01H)
  7803                                  ;		no return
  7804                                  ;
  7805                                  ;	AL = 2	get interim console flag
  7806                                  ;		on return DL = current flag value
  7807                                  ;
  7808                                  ;	AL = OTHER then error, and returns with:
  7809                                  ;		AX = error_invalid_function
  7810                                  ;
  7811                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7812                                  ;	 SS:SP WILL BE PRESERVED!
  7813                                  ;---------------------------------------------------------------------------
  7814                                  
  7815                                  _$ECS_Call:
  7816 00000F85 08C0                    	or	al,al			; AL = 0 (get table)?
  7817                                  	;jnz	short _okok
  7818                                  	; 15/12/2022
  7819 00000F87 7403                    	jz	short get_lbt
  7820                                  ;_okok:
  7821 00000F89 E9F8F6                  	jmp	SYS_RET_OK
  7822                                  get_lbt:
  7823 00000F8C E83BF5                  	call	Get_User_Stack		; *
  7824                                  
  7825                                  ;hkn; dbcs_table moved low to dosdata
  7826                                  	;mov	word [si+8],DBCS_TAB+2
  7827 00000F8F C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7828                                  
  7829 00000F94 06                      	push	es
  7830                                  	;getdseg <es>			; es = DOSDATA
  7831 00000F95 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7832                                  	;mov	[si+14],es
  7833 00000F9A 8C440E                  	mov	[SI+user_env.user_DS],es
  7834 00000F9D 07                      	pop	es
  7835                                  
  7836                                  	; 15/12/2022
  7837 00000F9E EBD8                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7838                                  ;_okok:
  7839                                  	; 15/12/2022	
  7840                                  	;;transfer SYS_RET_OK
  7841                                  	;jmp	short jmp_SYS_RET_OK
  7842                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7843                                  	;;jmp	SYS_RET_OK
  7844                                  	;jmp	short jmp_SYS_RET_OK
  7845                                  
  7846                                  ;============================================================================
  7847                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7848                                  ;============================================================================
  7849                                  ; 19/07/2018 - Retro DOS v3.0
  7850                                  ; 15/05/2019 - Retro DOS v4.0
  7851                                  
  7852                                  ; System calls for parsing command lines
  7853                                  ;
  7854                                  ;   $PARSE_FILE_DESCRIPTOR
  7855                                  ;
  7856                                  ;   Modification history:
  7857                                  ;
  7858                                  ;       Created: ARR 30 March 1983
  7859                                  ;               EE PathParse 10 Sept 1983
  7860                                  ;
  7861                                  
  7862                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7863                                  ;---------------------------------------------------------------------------
  7864                                  ; Inputs:
  7865                                  ;       DS:SI Points to a command line
  7866                                  ;       ES:DI Points to an empty FCB
  7867                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7868                                  ;                   = 0 Parse stops if separator encountered
  7869                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7870                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7871                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7872                                  ;                   = 0  "       "      "       - put blanks in FCB
  7873                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7874                                  ;                   = 0  "       "      "        - put blanks in FCB
  7875                                  ; Function:
  7876                                  ;       Parse command line into FCB
  7877                                  ; Returns:
  7878                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7879                                  ;       DS:SI points to first character after filename
  7880                                  ;---------------------------------------------------------------------------
  7881                                  
  7882                                  _$PARSE_FILE_DESCRIPTOR:
  7883 00000FA0 E88640                  	call	MAKEFCB
  7884 00000FA3 56                      	PUSH    SI
  7885 00000FA4 E823F5                  	call	Get_User_Stack
  7886                                  	;pop	word [si+8]
  7887 00000FA7 8F4408                  	POP     word [SI+user_env.user_SI]
  7888 00000FAA C3                      	retn
  7889                                  
  7890                                  ;============================================================================
  7891                                  ; MISC.ASM, MSDOS 6.0, 1991
  7892                                  ;============================================================================
  7893                                  ; 19/07/2018 - Retro DOS v3.0
  7894                                  
  7895                                  ; 29/04/2019 - Retro DOS v4.0
  7896                                  
  7897                                  ;ENTRYPOINTSEG	EQU	0CH
  7898                                  ;MAXDIF		EQU	0FFFH
  7899                                  ;SAVEXIT 	EQU	10
  7900                                  ;WRAPOFFSET	EQU	0FEF0h
  7901                                  
  7902                                  ;
  7903                                  ;----------------------------------------------------------------------------
  7904                                  ;
  7905                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7906                                  ;
  7907                                  ;	Return Stuff sort of like old get fat call
  7908                                  ;
  7909                                  ;	ENTRY	none
  7910                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7911                                  ;			GOD help anyone who tries to do ANYTHING except
  7912                                  ;			READ this ONE byte.
  7913                                  ;		DX = Total Number of allocation units on disk
  7914                                  ;		CX = Sector size
  7915                                  ;		AL = Sectors per allocation unit
  7916                                  ;		   = -1 if bad drive specified
  7917                                  ;	USES	all
  7918                                  ;
  7919                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7920                                  ;
  7921                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7922                                  ;
  7923                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7924                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7925                                  ;			GOD help anyone who tries to do ANYTHING except
  7926                                  ;			READ this ONE byte.
  7927                                  ;		DX = Total Number of allocation units on disk
  7928                                  ;		CX = Sector size
  7929                                  ;		AL = Sectors per allocation unit
  7930                                  ;		   = -1 if bad drive specified
  7931                                  ;	USES	all
  7932                                  ;
  7933                                  ;----------------------------------------------------------------------------
  7934                                  ;
  7935                                  
  7936                                  _$SLEAZEFUNC:
  7937                                  	; 15/05/2019 - Retro DOS v4.0
  7938 00000FAB B200                    	MOV	DL,0
  7939                                  _$SLEAZEFUNCDL:
  7940 00000FAD 16                      	push	ss
  7941 00000FAE 1F                      	pop	ds
  7942                                  	
  7943 00000FAF 88D0                    	MOV	AL,DL
  7944 00000FB1 E81A5C                  	call	GETTHISDRV		; Get CDS structure
  7945                                  SET_AL_RET:
  7946                                  	; MSDOS 3.3
  7947                                  	;;mov	al, 0Fh
  7948                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7949                                  	
  7950                                  	; MSDOS 6.0 & MSDOS 3.3
  7951 00000FB4 721E                    	JC	short BADSLDRIVE
  7952                                  
  7953 00000FB6 E8D31D                  	call	DISK_INFO
  7954                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7955 00000FB9 7219                    	jc	short BADSLDRIVE
  7956 00000FBB 8826[9805]              	MOV	[FATBYTE],AH
  7957                                  
  7958                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7959                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7960                                  ; CALL AGAIN
  7961                                  
  7962 00000FBF BF[9805]                	MOV	DI,FATBYTE
  7963 00000FC2 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7964 00000FC4 E803F5                  	call	Get_User_Stack
  7965                                  	;mov	[si+4],cx
  7966                                  	;mov	[si+6],bx
  7967                                  	;mov	[si+2],di
  7968 00000FC7 894C04                  	MOV	[SI+user_env.user_CX],CX
  7969 00000FCA 895C06                  	MOV	[SI+user_env.user_DX],BX
  7970 00000FCD 897C02                  	MOV	[SI+user_env.user_BX],DI
  7971                                  	
  7972                                  	;mov	[si+0Eh],ss
  7973 00000FD0 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7974                                  
  7975 00000FD3 C3                      	retn
  7976                                  
  7977                                  BADSLDRIVE:
  7978 00000FD4 E9CCF6                  	jmp	FCB_RET_ERR
  7979                                  
  7980                                  ;
  7981                                  ;----------------------------------------------------------------------------
  7982                                  ;
  7983                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7984                                  ;
  7985                                  ;	Returns location of DOS status for interrupt routines
  7986                                  ;									   ;
  7987                                  ;	ENTRY	none
  7988                                  ;	EXIT	(es:bx) = flag location
  7989                                  ;	USES	all
  7990                                  ;
  7991                                  ;----------------------------------------------------------------------------
  7992                                  ;
  7993                                  
  7994                                  _$GET_INDOS_FLAG:
  7995 00000FD7 E8F0F4                          CALL	Get_User_Stack
  7996                                          ;MOV	WORD [SI+2],INDOS
  7997 00000FDA C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  7998                                          ;MOV	[SI+10H],SS
  7999 00000FDF 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8000 00000FE2 C3                      	RETN 
  8001                                  
  8002                                  ;
  8003                                  ;----------------------------------------------------------------------------
  8004                                  ;
  8005                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8006                                  ;
  8007                                  ;	Return a pointer to interesting DOS variables This call is version
  8008                                  ;	dependent and is subject to change without notice in future versions.
  8009                                  ;	Use at risk.
  8010                                  ;
  8011                                  ;	ENTRY	none
  8012                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8013                                  ;	uses	ALL
  8014                                  ;
  8015                                  ;----------------------------------------------------------------------------
  8016                                  ;
  8017                                  
  8018                                  _$GET_IN_VARS:
  8019 00000FE3 E8E4F4                          CALL	Get_User_Stack
  8020                                          ;MOV	WORD [SI+2],SYSINITVAR
  8021                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8022 00000FE6 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8023                                          ;MOV	[SI+10H],SS
  8024 00000FEB 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8025 00000FEE C3                      	RETN
  8026                                  
  8027                                  ;
  8028                                  ;----------------------------------------------------------------------------
  8029                                  ;
  8030                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8031                                  ;
  8032                                  ;	Return pointer to drive parameter table for default drive
  8033                                  ;
  8034                                  ;	ENTRY	none
  8035                                  ;	EXIT	(ds:bx) = DPB address
  8036                                  ;	USES	all
  8037                                  ;
  8038                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8039                                  ;
  8040                                  ;	Return pointer to a specified drive parameter table
  8041                                  ;
  8042                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8043                                  ;	EXIT	(al) = 0 iff ok
  8044                                  ;		  (ds:bx) = DPB address
  8045                                  ;		(al) = -1 if bad drive
  8046                                  ;	USES	all
  8047                                  ;
  8048                                  ;----------------------------------------------------------------------------
  8049                                  ;
  8050                                  
  8051                                  ; 15/05/2019 - Retro DOS v4.0
  8052                                  
  8053                                  _$GET_DEFAULT_DPB:
  8054 00000FEF B200                    	MOV	DL,0
  8055                                  _$GET_DPB:
  8056 00000FF1 16                      	push	ss
  8057 00000FF2 1F                      	pop	ds
  8058                                  
  8059 00000FF3 88D0                    	MOV	AL,DL
  8060 00000FF5 E8D65B                  	call	GETTHISDRV		; Get CDS structure
  8061 00000FF8 7222                    	JC	short ISNODRV 		; no valid drive
  8062 00000FFA C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8063                                  	;;test	word [es:di+43h],8000h
  8064                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8065                                  	;test	byte [es:di+44h],80h
  8066 00000FFE 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8067 00001003 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8068 00001005 E88B03                  	call	ECritDisk
  8069 00001008 E80748                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8070 0000100B E8A003                  	call	LCritDisk
  8071 0000100E 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8072                                  					;   have.
  8073 00001010 E8B7F4                  	call	Get_User_Stack
  8074                                  	;mov	[si+2],bp
  8075 00001013 896C02                  	MOV	[SI+user_env.user_BX],BP
  8076                                  	;mov	[si+0Eh],es
  8077 00001016 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8078 00001019 30C0                    	XOR	AL,AL
  8079 0000101B C3                      	retn
  8080                                  ISNODRV:
  8081 0000101C B0FF                    	MOV	AL,-1
  8082 0000101E C3                      	retn
  8083                                  
  8084                                  ;
  8085                                  ;----------------------------------------------------------------------------
  8086                                  ;
  8087                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8088                                  ;
  8089                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8090                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8091                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8092                                  ;
  8093                                  ;	ENTRY	none
  8094                                  ;	EXIT	none
  8095                                  ;	USES	all
  8096                                  ;
  8097                                  ;----------------------------------------------------------------------------
  8098                                  ;
  8099                                  
  8100                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8101                                  	; DOSCODE:4D94h
  8102                                  _$DISK_RESET:
  8103                                  	; 15/05/2019 - Retro DOS v4.0
  8104 0000101F B0FF                    	mov	al,0FFh	; -1
  8105 00001021 16                      	push	ss
  8106 00001022 1F                      	pop	ds
  8107                                  	; 06/11/2022
  8108                                  	;MOV	AL,-1
  8109 00001023 E86D03                  	call	ECritDisk
  8110                                  	; MSDOS 6.0
  8111                                  	;;or	word [DOS34_FLAG],4
  8112                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8113 00001026 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8114 0000102B E8524B                  	call	FLUSHBUF
  8115                                  	; MSDOS 6.0
  8116                                  	;and	word [DOS34_FLAG],0FFFBh
  8117                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8118                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8119                                  	; 15/12/2022
  8120 0000102E 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8121 00001033 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8122                                  ;
  8123                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8124                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8125                                  ; let's do it.
  8126                                  ;
  8127                                  ; Invalidate 'last-buffer' used
  8128                                  ;
  8129 00001039 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8130 0000103C 891E[2000]              	MOV	[LastBuffer+2],BX
  8131 00001040 891E[1E00]              	MOV	[LastBuffer],BX
  8132                                  
  8133                                  	; MSDOS 3.3 
  8134                                  	; IBMDOS.COM, Offset 1C66h
  8135                                  	;;;;
  8136                                  	;lds	si,[BUFFHEAD]
  8137                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8138                                  				; .buf_flags, AH = 0, reset/clear
  8139                                  ;DRST_1:
  8140                                  	;;mov	[si+4],ax
  8141                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8142                                  	;lds	si,[SI]
  8143                                  	;cmp	si,bx ; -1
  8144                                  	;je	short DRST_2
  8145                                  	;;mov	[si+4],ax
  8146                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8147                                  	;lds	si,[SI]
  8148                                  	;cmp	si,bx
  8149                                  	;jne	short DRST_1
  8150                                  	;;;;
  8151                                  ;DRST_2:
  8152 00001044 E86703                  	call	LCritDisk
  8153 00001047 B8FFFF                  	MOV	AX,-1
  8154                                  	; 07/12/2022
  8155                                  	;mov	ax,0FFFFh
  8156                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8157 0000104A 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8158 0000104B B82011                  	mov     ax,1120h
  8159 0000104E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8160                                  			; DS = DOS CS
  8161                                  			; Return: CF clear (successful)
  8162 00001050 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8163                                  	
  8164 00001051 C3                      	retn
  8165                                  
  8166                                  	; 19/07/2018 - Retro DOS v3.0
  8167                                  
  8168                                  ;
  8169                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8170                                  ;
  8171                                  ;----------------------------------------------------------------------------
  8172                                  ;
  8173                                  ;**	$SetDPB - Create a DPB
  8174                                  ;
  8175                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8176                                  ;
  8177                                  ;	ENTRY	ES:BP Points to DPB
  8178                                  ;		DS:SI Points to BPB
  8179                                  ;	EXIT	DPB setup
  8180                                  ;	USES	ALL but BP, DS, ES
  8181                                  ;
  8182                                  ;----------------------------------------------------------------------------
  8183                                  ;
  8184                                  
  8185                                  ; 10/05/2019 - Retro DOS v4.0
  8186                                  
  8187                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8188                                  
  8189                                  ; MSDOS 6.0
  8190 00001052 0300                    word3:	dw	3			; M008 -- word value for divides
  8191                                  
  8192                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8193                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8194                                  
  8195                                  ;procedure   $SETDPB,NEAR
  8196                                  
  8197                                  _$SETDPB:
  8198 00001054 89EF                    	MOV	DI,BP
  8199 00001056 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8200 00001059 AD                      	LODSW
  8201 0000105A AB                      	STOSW				; dpb_sector_size
  8202                                  	; MSDOS 6.0
  8203                                  	;cmp	byte [si+3],0
  8204 0000105B 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8205 0000105F 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8206                                  	;mov	byte [es:di+4],0
  8207 00001061 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8208 00001066 EB70                    	JMP	short setend			     ; NO		;AN000;
  8209                                  
  8210                                  yesfat: ; 10/08/2018
  8211 00001068 89C2                    	MOV	DX,AX
  8212 0000106A AC                      	LODSB
  8213                                  	;DEC	AL
  8214                                  	; 17/12/2022
  8215 0000106B 48                      	dec	ax
  8216 0000106C AA                      	STOSB				; dpb_cluster_mask
  8217                                  	;INC	AL
  8218 0000106D 40                      	inc	ax
  8219 0000106E 30E4                    	XOR	AH,AH
  8220                                  LOG2LOOP:
  8221 00001070 A801                    	test	AL,1
  8222 00001072 7506                    	JNZ	short SAVLOG
  8223 00001074 FEC4                    	INC	AH
  8224 00001076 D0E8                    	SHR	AL,1
  8225 00001078 EBF6                    	JMP	SHORT LOG2LOOP
  8226                                  SAVLOG:
  8227 0000107A 88E0                    	MOV	AL,AH
  8228 0000107C AA                      	STOSB				; dpb_cluster_shift
  8229 0000107D 88C3                    	MOV	BL,AL
  8230 0000107F A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8231 00001080 AC                      	LODSB
  8232 00001081 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8233                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8234                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8235 00001082 88C7                    	MOV	BH,AL
  8236 00001084 AD                      	LODSW
  8237 00001085 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8238 00001086 B105                    	MOV	CL,5
  8239 00001088 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8240 0000108A 48                      	DEC	AX
  8241 0000108B 01D0                    	ADD	AX,DX			; Cause Round Up
  8242 0000108D 89D1                    	MOV	CX,DX
  8243 0000108F 31D2                    	XOR	DX,DX
  8244 00001091 F7F1                    	DIV	CX
  8245 00001093 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8246 00001095 47                      	INC	DI
  8247 00001096 47                      	INC	DI			; Skip dpb_first_sector
  8248 00001097 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8249 00001098 AC                      	LODSB
  8250                                  	;mov	[es:bp+17h],al
  8251 00001099 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8252 0000109D AD                      	LODSW				; Number of sectors in a FAT
  8253                                  	
  8254                                  	;;;
  8255                                  	;MSDOS 3.3
  8256                                  	;
  8257                                  	;STOSB		; DPB.FAT_SIZE
  8258                                  	;MUL	BH
  8259                                  	
  8260                                  	;MSDOS 6.0
  8261                                  	;
  8262 0000109E AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8263 0000109F 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8264 000010A1 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8265 000010A3 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8266                                  	;;;
  8267                                  	
  8268                                  	;add	ax,[es:bp+6]
  8269 000010A5 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8270 000010A9 AB                      	STOSW				; dpb_dir_sector
  8271 000010AA 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8272                                  	;mov	[es:bp+0Bh],ax
  8273 000010AC 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8274                                  	
  8275                                  	; MSDOS 6.0
  8276 000010B0 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8277                                  	;;cmp	word [es:bp+0Dh],0
  8278                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8279                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8280                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8281                                  	; 15/12/2022
  8282                                  	; 28/07/2019
  8283 000010B2 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8284 000010B6 09DB                    	or	bx,bx
  8285 000010B8 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8286                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8287                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8288                                  	
  8289                                  
  8290 000010BA 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8291                                  	;mov	bx,[si+8]
  8292 000010BC 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8293                                  	;mov	dx,[si+10]
  8294 000010BF 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8295 000010C2 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8296 000010C4 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8297 000010C7 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8298 000010C9 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8299                                  rott:					;AN000;;F.C. >32mb
  8300 000010CB F8                      	CLC				;AN000;;F.C. >32mb
  8301 000010CC D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8302 000010CE D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8303 000010D0 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8304                                  norot:					;AN000;
  8305                                  	; 15/12/2022
  8306                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8307 000010D2 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8308                                  normal_dpb:
  8309                                  	;;sub	ax,[es:bp+0Dh]
  8310                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8311                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8312                                  	; 15/12/2022
  8313                                  	; bx = [es:bp+DSKSIZ]
  8314                                  	;sub	ax,bx ; 28/07/2019
  8315                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8316                                  	; 15/12/2022
  8317 000010D4 29C3                    	sub	bx,ax
  8318                                  	;NEG	AX			; Sectors in data area
  8319                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8320                                  	; 15/12/2022
  8321                                  	; CL = cluster shift
  8322                                  	; BX = number of data sectors 
  8323                                  	;SHR	AX,CL			; Div by sectors/cluster
  8324 000010D6 D3EB                    	shr	bx,cl 
  8325                                  setend:
  8326                                  ;	M008 - CAS
  8327                                  ;
  8328                                  	; 15/12/2022
  8329 000010D8 43                      	inc	bx
  8330                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8331                                  ;
  8332                                  ;	There has been a bug in our fatsize calculation for so long
  8333                                  ;	  that we can't correct it now without causing some user to
  8334                                  ;	  experience data loss. There are even cases where allowing
  8335                                  ;	  the number of clusters to exceed the fats is the optimal
  8336                                  ;	  case -- where adding 2 more fat sectors would make the
  8337                                  ;	  data field smaller so that there's nothing to use the extra
  8338                                  ;	  fat sectors for.
  8339                                  ;
  8340                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8341                                  ;	  still report that there was a cluster left when the disk was
  8342                                  ;	  actually full. Very graceful failure for a corrupt system
  8343                                  ;	  configuration. There may be worse cases that were never
  8344                                  ;	  properly traced back to this bug. The problem cases only
  8345                                  ;	  occurred when partition sizes were very near FAT sector
  8346                                  ;	  rounding boundaries, which were rare cases.
  8347                                  ;
  8348                                  ;	Also, it's possible that some third-party partition program might
  8349                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8350                                  ;	  scheme. In this hypothetical case, the number of allocation
  8351                                  ;	  clusters which don't actually have FAT entries to represent
  8352                                  ;	  them might be larger and might create a more catastrophic
  8353                                  ;	  failure. So we'll provide the safeguard of limiting the
  8354                                  ;	  max_cluster to the amount that will fit in the FATs.
  8355                                  ;
  8356                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8357                                  
  8358                                  ;	make sure the number of fat sectors is actually enough to
  8359                                  ;	  hold that many clusters. otherwise, back the number of
  8360                                  ;	  clusters down
  8361                                  
  8362                                  	; 15/12/2022
  8363                                  	; bx = number of clusters
  8364                                  
  8365                                  	; 19/07/2018 - Retro DOS v3.0
  8366                                  	; MSDOS 6.0
  8367                                  	; 15/12/2022
  8368                                  	;mov	bx,ax			; remember calculated # clusters
  8369                                  
  8370                                  	; 01/08/2018 (MSDOS 3.3)
  8371                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8372                                  	;xor	ah,ah 
  8373                                  
  8374                                  	; 10/05/2019 - Retro DOS v4.0
  8375                                  	;mov	ax,[ES:BP+0Fh]
  8376 000010D9 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8377                                  
  8378                                  	;mul	word [es:bp+2]	
  8379 000010DD 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8380 000010E1 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8381 000010E5 720D                    	jb	short setend_fat12
  8382 000010E7 D1EA                    	shr	dx,1
  8383                                  
  8384                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8385                                  	; 15/12/2022
  8386                                  ;cs3 7/2/92
  8387 000010E9 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8388                                  					; than enough for the maximum FAT,
  8389                                  					; so go ahead and use the calculated
  8390                                  					; number of clusters.
  8391                                  ;cs3 7/2/92
  8392                                  
  8393 000010EB D1D8                    	rcr	ax,1			; find number of entries
  8394 000010ED 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8395                                  ;					;  into 12-bit fatland?
  8396 000010F0 7215                    	jb	short setend_faterr	; then go ahead and let the
  8397                                  ;					;  inconsistency pass through
  8398                                  ;					;  rather than lose data by
  8399                                  ;					;  correcting the fat type
  8400 000010F2 EB0E                    	jmp	short setend_fat16
  8401                                  
  8402                                  setend_fat12:
  8403 000010F4 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8404 000010F6 11D2                    	adc	dx,dx
  8405                                  
  8406                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8407                                  ;cs3 7/2/92
  8408                                  	; 15/12/2022
  8409 000010F8 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8410 000010FB 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8411                                  					; here. Check for it and use
  8412                                  					; the calculated size in this case.
  8413                                  ;cs3 7/2/92
  8414                                  
  8415 000010FD 2EF736[5210]            	div	word [cs:word3]
  8416                                  
  8417                                  setend_fat16:
  8418 00001102 48                      	dec	ax			; limit at 1
  8419 00001103 39D8                    	cmp	ax,bx			; is fat big enough?
  8420 00001105 7602                    	jbe	short setend_fat	; use max value that'll fit
  8421                                  
  8422                                  setend_faterr:
  8423 00001107 89D8                    	mov	ax,bx			; use calculated value
  8424                                  
  8425                                  setend_fat:
  8426                                  
  8427                                  ;	now ax = maximum legal cluster
  8428                                  
  8429                                  ;	end M008
  8430                                  
  8431                                  	;mov	[es:bp+0Dh], ax
  8432 00001109 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8433                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8434                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8435 0000110D 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8436                                  					; Init so first ALLOC starts at
  8437                                  					; begining of FAT
  8438                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8439                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8440 00001113 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8441                                  
  8442 00001119 C3                      	retn
  8443                                  
  8444                                  ;EndProc $SETDPB
  8445                                  
  8446                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8447                                  
  8448                                  ;
  8449                                  ;----------------------------------------------------------------------------
  8450                                  ;
  8451                                  ;**	$Dup_PDB
  8452                                  ;
  8453                                  ; Inputs:   DX is new segment address of process
  8454                                  ;	    SI is end of new allocation block
  8455                                  ;
  8456                                  ;----------------------------------------------------------------------------
  8457                                  ;
  8458                                  
  8459                                  _$DUP_PDB:
  8460                                  
  8461                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8462                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8463                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8464                                  
  8465                                  	; MSDOS 3.3
  8466                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8467                                  	;MOV	DS,[CS:CurrentPDB]
  8468                                  
  8469                                  	; 15/05/2019 - Retro DOS v4.0
  8470                                  	; MSDOS 6.0
  8471 0000111A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8472 0000111F C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8473 00001124 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8474                                  
  8475 00001128 56                      	PUSH	SI
  8476 00001129 EB0A                    	JMP	SHORT CreateCopy
  8477                                  
  8478                                  ;
  8479                                  ;----------------------------------------------------------------------------
  8480                                  ;
  8481                                  ; Inputs:
  8482                                  ;	DX = Segment number of new base
  8483                                  ; Function:
  8484                                  ;	Set up program base and copy term and ^C from int area
  8485                                  ; Returns:
  8486                                  ;	None
  8487                                  ; Called at DOS init
  8488                                  ;
  8489                                  ;----------------------------------------------------------------------------
  8490                                  ;
  8491                                  
  8492                                  ; 15/05/2019 - Retro DOS v4.0
  8493                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8494                                  
  8495                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8496                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8497                                  
  8498                                  _$CREATE_PROCESS_DATA_BLOCK:
  8499                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8500 0000112B E89CF3                  	CALL	Get_User_Stack
  8501                                  	;mov	ds,[si+14h]
  8502 0000112E 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8503                                  	;push	word [2]
  8504 00001131 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8505                                  CreateCopy:
  8506 00001135 8EC2                    	MOV	ES,DX
  8507                                  
  8508 00001137 31F6                    	XOR	SI,SI			; copy entire PDB
  8509 00001139 89F7                    	MOV	DI,SI
  8510 0000113B B98000                  	MOV	CX,128
  8511 0000113E F3A5                    	REP	MOVSW
  8512                                  
  8513                                  ; DOS 3.3 7/9/86
  8514                                  	;mov	cx,20
  8515                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8516                                  	; 15/12/2022
  8517 00001140 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8518                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8519                                  	;mov	cx,FILPERPROC
  8520                                  
  8521                                  	;mov	di,18h
  8522 00001142 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8523                                  	;;PUSH	DS ; * 15/05/2019
  8524                                  	;;lds	si,[34h]
  8525                                  	;LDS	SI,[PDB.JFN_Pointer]
  8526                                  	;REP	MOVSB
  8527                                  	;;POP	DS ; * 15/05/2019
  8528                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8529                                  	; 05/12/2022
  8530                                  	; (push ds then pop ds is not needed here!)
  8531                                  	;push	ds
  8532                                  	;lds	si,[34h]
  8533 00001145 C5363400                	lds	si,[PDB.JFN_Pointer]
  8534 00001149 F3A4                    	rep	movsb
  8535                                  	;pop	ds
  8536                                  
  8537                                  ; DOS 3.3 7/9/86
  8538                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8539                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8540                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8541                                  
  8542 0000114B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8543                                  
  8544                                  	;;test	byte [cs:CreatePDB],0FFh
  8545                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8546                                  	; 17/12/2022
  8547 00001150 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8548                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8549 00001154 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8550                                  
  8551                                  ; Here we set up for a new process...
  8552                                  
  8553                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8554                                  	;POP	DS
  8555                                  
  8556                                  	; MSDOS 6.0
  8557                                  	;;getdseg <ds>			; ds -> dosdata
  8558                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8559                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8560                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8561                                  	; 15/12/2022
  8562                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8563                                  
  8564 00001156 31DB                    	XOR	BX,BX			; dup all jfns
  8565                                  	;mov	cx,20
  8566                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8567                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8568                                  	; 15/12/2022
  8569 00001158 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8570                                  
  8571                                  Create_dup_jfn:
  8572 0000115A 06                      	PUSH	ES ;**			; save new PDB
  8573 0000115B E84C56                  	call	SFFromHandle		; get sf pointer
  8574 0000115E B0FF                    	MOV	AL,-1			; unassigned JFN
  8575 00001160 7224                    	JC	short CreateStash	; file was not really open
  8576                                  	;;test	word [es:di+5],1000h
  8577                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8578                                  	; 15/05/2019
  8579                                  	;test	byte [es:di+6],10h
  8580 00001162 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8581 00001167 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8582                                  
  8583                                  ; We do not inherit network file handles.
  8584                                  
  8585                                  	;mov	ah,[es:di+2]
  8586 00001169 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8587                                  	;and	ah,0F0h
  8588 0000116D 80E4F0                  	AND	AH,SHARING_MASK
  8589                                  	;cmp	ah,70h
  8590 00001170 80FC70                  	CMP	AH,SHARING_NET_FCB
  8591 00001173 7411                    	jz	short CreateStash
  8592                                  
  8593                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8594                                  ; duplication operation.
  8595                                  
  8596 00001175 893E[9E05]              	MOV	[THISSFT],DI
  8597 00001179 8C06[A005]              	MOV	[THISSFT+2],ES
  8598 0000117D E86119                  	call	DOS_DUP 		; signal duplication
  8599                                  
  8600                                  ; get the old sfn for copy
  8601                                  
  8602 00001180 E80A56                  	call	pJFNFromHandle		; ES:DI is jfn
  8603 00001183 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8604                                  
  8605                                  ; Take AL (old sfn or -1) and stash it into the new position
  8606                                  
  8607                                  CreateStash:
  8608 00001186 07                      	POP	ES ;**
  8609                                  	;mov	[es:bx+18h],al
  8610 00001187 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8611 0000118B 43                      	INC	BX			; next jfn...
  8612 0000118C E2CC                    	LOOP	Create_dup_jfn
  8613                                  
  8614 0000118E 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8615                                  	; 06/11/2022
  8616                                  	;mov	[es:16h],bx
  8617 00001192 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8618 00001197 8C06[3003]              	MOV	[CurrentPDB],ES
  8619                                  	;MOV	DS,BX ; 28/07/2019
  8620                                  	; 07/12/2022
  8621                                  	;mov	ds,[cs:DosDSeg]
  8622                                  	; 15/12/2022
  8623                                  	; ds = [cs:DosDSeg]
  8624 0000119B C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8625                                  	;mov	ds,bx
  8626                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8627                                  	; 15/12/2022
  8628                                  	;mov	ds,bx
  8629                                  
  8630                                  ; end of new process create
  8631                                  
  8632                                  Create_PDB_cont:
  8633                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8634                                  
  8635                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8636                                  
  8637                                  	;; 28/07/2019
  8638                                  	;;push	ds
  8639                                  	;;mov	ds,[cs:DosDSeg]
  8640                                  	;mov	byte [CreatePDB],0
  8641                                  	;;pop	ds
  8642                                  
  8643                                  ; 05/12/2022
  8644                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8645                                  ;	; (push-pop ds is nonsense here! 
  8646                                  ;	;  but i am using same code with original MSDOS.SYS
  8647                                  ;	;  for address compatibility.)
  8648                                  ;	push	ds
  8649                                  ;	; ds = [cs:DosDSeg] !
  8650                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8651                                  ;	mov	byte [CreatePDB],0
  8652                                  ;	pop	ds
  8653                                  
  8654 000011A0 58                      	POP	AX ;*
  8655                                  
  8656                                  	;entry	SETMEM
  8657                                  
  8658                                  	; 17/12/2022
  8659                                  	; cx = 0
  8660                                  
  8661                                  ;---------------------------------------------------------------------------
  8662                                  ; Inputs:
  8663                                  ;	AX = Size of memory in paragraphs
  8664                                  ;	DX = Segment
  8665                                  ; Function:
  8666                                  ;	Completely prepares a program base at the
  8667                                  ;	specified segment.
  8668                                  ; Called at DOS init
  8669                                  ; Outputs:
  8670                                  ;	DS = DX
  8671                                  ;	ES = DX
  8672                                  ;	[0] has INT int_abort
  8673                                  ;	[2] = First unavailable segment
  8674                                  ;	[5] to [9] form a long call to the entry point
  8675                                  ;	[10] to [13] have exit address (from int_terminate)
  8676                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8677                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8678                                  ; DX,BP unchanged. All other registers destroyed.
  8679                                  ;---------------------------------------------------------------------------
  8680                                  
  8681                                  SETMEM:
  8682                                  	;XOR	CX,CX
  8683                                  	; 17/12/2022
  8684                                  	; cx = 0
  8685 000011A1 8ED9                    	MOV	DS,CX
  8686 000011A3 8EC2                    	MOV	ES,DX
  8687                                  	;mov	si,88h
  8688 000011A5 BE8800                  	MOV	SI,addr_int_terminate
  8689                                  	;mov	di,10 ; 0Ah
  8690 000011A8 BF0A00                  	MOV	DI,SAVEXIT
  8691                                  	;MOV	CX,6
  8692                                  	; 15/12/2022
  8693 000011AB B106                    	mov	cl,6
  8694 000011AD F3A5                    	REP	MOVSW
  8695 000011AF 26A30200                	MOV	[ES:2],AX
  8696 000011B3 29D0                    	SUB	AX,DX
  8697 000011B5 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8698 000011B8 7603                    	JBE	short HAVDIF
  8699 000011BA B8FF0F                  	MOV	AX,MAXDIF
  8700                                  HAVDIF:
  8701 000011BD 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8702 000011C0 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8703 000011C3 29C3                    	SUB	BX,AX
  8704 000011C5 B104                    	MOV	CL,4
  8705 000011C7 D3E0                    	SHL	AX,CL
  8706 000011C9 8EDA                    	MOV	DS,DX
  8707                                  
  8708                                  	; (MSDOS 6.0 note)
  8709                                  	;
  8710                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8711                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8712                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8713                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8714                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8715                                  	; making this equvalence valid for this particular case. If however
  8716                                  	; there is less than 64K remaining the address in BX:AX will not 
  8717                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8718                                  	; into the PSP.
  8719                                  	;
  8720                                  	; Therefore for the case where there is less than 64K remaining in 
  8721                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8722                                  	; requirements will not work. Call 5, however will continue to work
  8723                                  	; for all cases.
  8724                                  	;
  8725                                  
  8726                                  	;mov	[6],ax
  8727                                  	;mov	[8],bx
  8728                                  
  8729 000011CB A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8730 000011CE 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8731                                  
  8732                                  	; 06/05/2019 - Retro DOS v4.0
  8733 000011D2 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8734                                  					;    memory left
  8735 000011D5 740C                    	je	short addr_ok		; Y: the above calculated address is
  8736                                  					;    OK
  8737                                  					; N: 
  8738                                  
  8739 000011D7 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8740 000011DD C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8741                                  addr_ok:
  8742                                  	;mov	word [0],20CDh
  8743 000011E3 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8744                                  	;mov	byte [5],9Ah
  8745 000011E9 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8746                                  	;mov	word [50h],21CDh
  8747 000011EE C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8748                                  	;mov	byte [52h],0CBh
  8749 000011F4 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8750                                  	;mov	word [34h],18h
  8751 000011F9 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8752                                  	;mov	word [36h],ds
  8753 000011FF 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8754                                  	;mov	word [32h],20
  8755 00001203 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8756                                  ;
  8757                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8758                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8759                                  ; particular SFT.  We perform this by requiring that the server link together
  8760                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8761                                  ; initialize this pointer.
  8762                                  ;
  8763                                   	;mov	word [38h],-1
  8764 00001209 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8765                                  	;mov	word [3Ah],-1
  8766 0000120F C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8767                                  
  8768                                  	; 06/05/2019
  8769                                  	; Set the real version number in the PSP - 5.00
  8770                                  
  8771                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8772                                  	; 07/12/2022
  8773 00001215 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8774                                  
  8775 0000121C C3                      	retn
  8776                                  
  8777                                  ; 29/04/2019 - Retro DOS v4.0
  8778                                  
  8779                                  ;BREAK <$GSetMediaID -- get set media ID>
  8780                                  
  8781                                  ;---------------------------------------------------------------------------
  8782                                  ; Inputs:
  8783                                  ;	BL= drive number as defined in IOCTL
  8784                                  ;	AL= 0 get media ID
  8785                                  ;	    1 set media ID
  8786                                  ;	DS:DX= buffer containing information
  8787                                  ;		DW  0  info level (set on input)
  8788                                  ;		DD  ?  serial #
  8789                                  ;		DB  11 dup(?)  volume id
  8790                                  ;		DB   8 dup(?)  file system type
  8791                                  ; Function:
  8792                                  ;	Get or set media ID
  8793                                  ; Returns:
  8794                                  ;	carry clear, DS:DX is filled
  8795                                  ;	carry set, error
  8796                                  ;---------------------------------------------------------------------------
  8797                                  
  8798                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8799                                  _$GSetMediaID:
  8800                                  	; RAWIO - GET_MEDIA_ID
  8801 0000121D B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8802 00001220 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8803 00001222 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8804                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8805                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8806                                  	; 15/12/2022
  8807 00001224 FEC8                    	dec	al
  8808 00001226 7507                    	jnz	short errorfunc ; al > 1
  8809                                  	; RAWIO - SET_MEDIA_ID
  8810                                  	;mov	cx,0846h	      ;AN001;MS.;
  8811                                  	; 15/12/2022
  8812 00001228 B146                    	mov	cl,46h	; cx = 0846h 
  8813                                  doioctl:			      ;AN000;
  8814 0000122A B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8815                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8816                                  	;call	_$IOCTL
  8817                                  	;retn			      ;AN000;MS.;
  8818                                  	; 15/12/2022
  8819 0000122C E9EC10                  	jmp	_$IOCTL
  8820                                  errorfunc:			      ;AN000;
  8821                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8822                                  	;mov	al,1
  8823 0000122F B001                    	mov	al,error_invalid_function
  8824 00001231 E959F4                  	jmp	SYS_RET_ERR
  8825                                  
  8826                                  ; 16/05/2019 - Retro DOS v4.0
  8827                                  
  8828                                  ;============================================================================
  8829                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8830                                  ;============================================================================
  8831                                  ; 20/07/2018 - Retro DOS v3.0
  8832                                  ; 29/04/2019 - Retro DOS v4.0
  8833                                  
  8834                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8835                                  ;----------------------------------------------------------------------------
  8836                                  ;
  8837                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8838                                  ;	     Strings of different lengths don't match.
  8839                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8840                                  ;   Outputs: Z if strings same, NZ if different
  8841                                  ;   Registers modified: NONE
  8842                                  ;----------------------------------------------------------------------------
  8843                                  
  8844                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8845                                  StrCmp:
  8846 00001234 56                      	push	si
  8847 00001235 57                      	push	di
  8848 00001236 50                      	push	ax
  8849                                  
  8850                                  Cmplp:
  8851 00001237 AC                      	LODSB
  8852 00001238 E82C3F                  	call	UCase			; convert to upper case
  8853 0000123B E87E3F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8854 0000123E 88C4                    	MOV	AH,AL
  8855 00001240 268A05                  	MOV	AL,[ES:DI]
  8856 00001243 47                      	INC	DI
  8857 00001244 E8203F                  	call	UCase			; convert to upper case
  8858 00001247 E8723F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8859 0000124A 38C4                    	CMP	AH,AL
  8860 0000124C 7504                    	JNZ	short PopRet		; Strings dif
  8861                                  
  8862 0000124E 08C0                    	OR	AL,AL
  8863 00001250 75E5                    	JNZ	short Cmplp		; More string
  8864                                  PopRet:
  8865 00001252 58                      	pop	ax
  8866 00001253 5F                      	pop	di
  8867 00001254 5E                      	pop	si
  8868 00001255 C3                      	retn
  8869                                  
  8870                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8871                                  ;----------------------------------------------------------------------------
  8872                                  ;
  8873                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8874                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8875                                  ;	characters.
  8876                                  ;
  8877                                  ;   Inputs:	DS:SI - pointer to source string
  8878                                  ;		ES:DI - pointer to destination string
  8879                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8880                                  ;		DS:SI point byte after nul byte at end of source string
  8881                                  ;   Registers modified: SI,DI
  8882                                  ;----------------------------------------------------------------------------
  8883                                  
  8884                                  StrCpy:
  8885 00001256 50                      	push	ax
  8886                                  CPYLoop:
  8887 00001257 AC                      	LODSB
  8888 00001258 E80C3F                  	call	UCase			; convert to upper case
  8889 0000125B E85E3F                  	call	PATHCHRCMP		; convert / to \ ;
  8890 0000125E AA                      	STOSB
  8891                                  
  8892 0000125F 08C0                    	OR	AL,AL
  8893 00001261 75F4                    	JNZ	short CPYLoop
  8894 00001263 58                      	pop	ax
  8895 00001264 C3                      	retn
  8896                                  
  8897                                  ;----------------------------------------------------------------------------
  8898                                  ; Procedure Name : FStrCpy
  8899                                  ;----------------------------------------------------------------------------
  8900                                  
  8901                                  FStrCpy:
  8902 00001265 50                      	push	ax
  8903                                  FCPYLoop:
  8904 00001266 AC                      	LODSB
  8905 00001267 AA                      	STOSB
  8906 00001268 08C0                    	OR	AL,AL
  8907 0000126A 75FA                    	JNZ	short FCPYLoop
  8908 0000126C 58                      	pop	ax
  8909 0000126D C3                      	retn
  8910                                  
  8911                                  ; 20/07/2018 - Retro DOS v3.0
  8912                                  ;----------------------------------------------------------------------------
  8913                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8914                                  ;----------------------------------------------------------------------------
  8915                                  ;
  8916                                  ;UCase:	
  8917                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8918                                  ;	retn
  8919                                  
  8920                                  ;Break <StrLen - compute length of string ES:DI>
  8921                                  ;----------------------------------------------------------------------------
  8922                                  ;**	StrLen - Compute Length of String
  8923                                  ;
  8924                                  ;	StrLen computes the length of a string, including the trailing 00
  8925                                  ;
  8926                                  ;	ENTRY	(es:di) = address of string
  8927                                  ;	EXIT	(cx) = size of string
  8928                                  ;	USES	cx, flags
  8929                                  ;----------------------------------------------------------------------------
  8930                                  
  8931                                  StrLen:
  8932 0000126E 57                      	push	di
  8933 0000126F 50                      	push	ax
  8934                                  	;MOV	CX,-1
  8935 00001270 B9FFFF                  	mov	cx,65535
  8936 00001273 30C0                    	XOR	AL,AL
  8937 00001275 F2AE                    	REPNE	SCASB
  8938 00001277 F7D1                    	NOT	CX
  8939 00001279 58                      	pop	ax
  8940 0000127A 5F                      	pop	di
  8941 0000127B C3                      	retn
  8942                                  
  8943                                  ;----------------------------------------------------------------------------
  8944                                  ;**	DStrLen - Compute Length of String
  8945                                  ;
  8946                                  ;	ENTRY	(ds:si) = address of string
  8947                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8948                                  ;	USES	cx, flags
  8949                                  ;----------------------------------------------------------------------------
  8950                                  
  8951                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8952 0000127C E80300                  	CALL	XCHGP
  8953 0000127F E8ECFF                  	CALL	StrLen
  8954                                  	;CALL	XCHGP
  8955                                  	;retn
  8956                                  	; 18/12/2022
  8957                                  	;jmp	short XCHGP
  8958                                  
  8959                                  ;----------------------------------------------------------------------------
  8960                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8961                                  ;
  8962                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8963                                  ;
  8964                                  ;	ENTRY	none
  8965                                  ;	EXIT	pairs exchanged
  8966                                  ;	USES	SI, DI, DS, ES
  8967                                  ;----------------------------------------------------------------------------
  8968                                  
  8969                                  XCHGP:
  8970 00001282 1E                      	push	ds
  8971 00001283 06                      	push	es
  8972 00001284 1F                      	pop	ds
  8973 00001285 07                      	pop	es
  8974 00001286 87F7                    	XCHG	SI,DI
  8975                                  xchgp_retn:
  8976 00001288 C3                      	retn
  8977                                  
  8978                                  ;Break	<Idle - wait for a specified amount of time>
  8979                                  ;----------------------------------------------------------------------------
  8980                                  ;
  8981                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8982                                  ;   	   we spin until RetryLoop is exhausted.
  8983                                  ;
  8984                                  ;   Inputs:	RetryLoop is the number of times we spin
  8985                                  ;   Outputs:	Wait
  8986                                  ;   Registers modified: none
  8987                                  ;----------------------------------------------------------------------------
  8988                                  
  8989                                  Idle:
  8990                                  	;test	byte [SS:FSHARING],0FFh
  8991 00001289 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8992                                  	;retnz
  8993 0000128F 75F7                    	jnz	short xchgp_retn
  8994                                  	;SAVE	<CX>
  8995 00001291 51                      	push	cx
  8996 00001292 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8997 00001297 E308                    	JCXZ	Idle3
  8998                                  Idle1:	
  8999 00001299 51                      	PUSH	CX
  9000 0000129A 31C9                    	XOR	CX,CX
  9001                                  Idle2:	
  9002 0000129C E2FE                    	LOOP	Idle2
  9003 0000129E 59                      	POP	CX
  9004 0000129F E2F8                    	LOOP	Idle1
  9005                                  Idle3:	
  9006                                  	;RESTORE <CX>
  9007 000012A1 59                      	pop	cx
  9008 000012A2 C3                      	retn
  9009                                  
  9010                                  ;Break	<TableDispatch - dispatch to a table>
  9011                                  ;----------------------------------------------------------------------------
  9012                                  ;
  9013                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9014                                  ;   routine. Preserve all input registers to the routine.
  9015                                  ;
  9016                                  ;   Inputs:	Push	return address
  9017                                  ;		Push	Table address
  9018                                  ;		Push	index (byte)
  9019                                  ;   Outputs:	appropriate routine gets jumped to.
  9020                                  ;		return indicates invalid index
  9021                                  ;   Registers modified: none.
  9022                                  ;----------------------------------------------------------------------------
  9023                                  
  9024                                  struc TFrame	 ; TableFrame
  9025 00000000 ????                    .OldBP:	 resw 1  ; 0
  9026 00000002 ????                    .OldRet: resw 1  ; 2
  9027 00000004 ??                      .Index:	 resb 1  ; 4
  9028 00000005 ??                      .Pad:	 resb 1  ; 5  
  9029 00000006 ????                    .Tab:	 resw 1  ; 6
  9030 00000008 ????                    .NewRet: resw 1  ; 8
  9031                                  endstruc
  9032                                  
  9033                                  TableDispatch:
  9034 000012A3 55                      	PUSH	BP
  9035 000012A4 89E5                    	MOV	BP,SP
  9036 000012A6 53                      	PUSH	BX			; save BX
  9037                                  	;mov	bx,[bp+6]
  9038 000012A7 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9039 000012AA 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9040                                  	;cmp	[bp+4],bl
  9041 000012AD 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9042 000012B0 7317                    	JAE	short TableError	; yes
  9043                                  	;mov	bl,[bp+4]
  9044 000012B2 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9045 000012B5 30FF                    	XOR	BH,BH			; convert to word
  9046 000012B7 D1E3                    	SHL	BX,1			; convert to word pointer
  9047 000012B9 43                      	INC	BX			; point past first length byte
  9048                                  	; 17/08/2018
  9049                                  	;add	bx,[bp+6]
  9050 000012BA 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9051 000012BD 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9052                                  	;mov	[bp+6],bx
  9053 000012C0 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9054 000012C3 5B                      	POP	BX			; restore BX
  9055 000012C4 5D                      	POP	BP			; restore BP
  9056 000012C5 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9057 000012C8 C3                      	retn				; do operation
  9058                                  TableError:
  9059 000012C9 5B                      	POP	BX			; restore BX
  9060 000012CA 5D                      	POP	BP			; restore BP
  9061 000012CB C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9062                                  
  9063                                  
  9064                                  ;Break	<TestNet - determine if a CDS is for the network>
  9065                                  ;----------------------------------------------------------------------------
  9066                                  ;
  9067                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9068                                  ;	network CDS. This will handle NULL cds also.
  9069                                  ;
  9070                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9071                                  ;   Outputs:	ES:DI = ThisCDS
  9072                                  ;		carry Set => network
  9073                                  ;		carry Clear => local
  9074                                  ;   Registers modified: none.
  9075                                  ;----------------------------------------------------------------------------
  9076                                  
  9077                                  TestNet:
  9078                                  	;LES	DI,[CS:THISCDS]
  9079                                  
  9080                                  	; 16/05/2019 - Retro DOS v4.0
  9081 000012CE 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9082 000012D3 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9083 000012D8 83FFFF                  	CMP	DI,-1
  9084 000012DB 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9085                                  	;;test	word [es:di+43h],8000h
  9086                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9087                                  	;test	byte [es:di+44h],80h
  9088 000012DD 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9089 000012E2 7501                    	JNZ	short CMCRet		; jump has carry clear
  9090 000012E4 C3                      	retn				; carry is clear
  9091                                  CMCRet: 
  9092 000012E5 F5                      	CMC
  9093 000012E6 C3                      	retn
  9094                                  
  9095                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9096                                  ;----------------------------------------------------------------------------
  9097                                  ;
  9098                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9099                                  ;	network file.
  9100                                  ;
  9101                                  ;   Inputs:	ES:DI point to SFT
  9102                                  ;   Outputs:	Zero set if not network sft
  9103                                  ;		zero reset otherwise
  9104                                  ;		Carry CLEAR!!!
  9105                                  ;   Registers modified: none.
  9106                                  ;----------------------------------------------------------------------------
  9107                                  
  9108                                  IsSFTNet:
  9109                                  	;;test	word [es:di+5],8000h
  9110                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9111                                  	; 16/05/2019 
  9112                                  	;test	byte [es:di+6],80h
  9113 000012E7 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9114 000012EC C3                      	retn
  9115                                  
  9116                                  ;Break	<FastInit - Initialize FastTable entries >
  9117                                  ;----------------------------------------------------------------------------
  9118                                  ;   DOS 4.00   2/9/87
  9119                                  ;   FastInit  - initialize the FASTXXX routine entry
  9120                                  ;		  in the FastTable
  9121                                  ;
  9122                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9123                                  ;		DS:SI = address of FASTXXX routine entry
  9124                                  ;		   SI = -1 for query only
  9125                                  ;   Outputs:	Carry flag clear, if success
  9126                                  ;		Carry flag set,   if failure
  9127                                  ;
  9128                                  ;
  9129                                  ;----------------------------------------------------------------------------
  9130                                  
  9131                                  ;Procedure FastInit,NEAR
  9132                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9133                                  
  9134                                  ;	; MSDOS 3.3
  9135                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9136                                  ;FastInit:
  9137                                  ;	mov	di,FastTable ; FastOpenTable
  9138                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9139                                  ;	mov	bx,cs			; get DOS segment
  9140                                  ;	cmp	ax,bx			; first time installed ?	
  9141                                  ;	je	short ok_install	; yes
  9142                                  ;	stc				; set carry
  9143                                  ;	retn				; (cf=1 means) already installed !
  9144                                  ;
  9145                                  ;ok_install:
  9146                                  ;	mov	bx,FastTable ; FastOpenTable
  9147                                  ;	mov	cx,ds
  9148                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9149                                  ;	mov	[cs:bx+4],cx
  9150                                  ;	mov	[cs:bx+2],si
  9151                                  ;	retn
  9152                                  
  9153                                  ; 16/05/2019 - Retro DOS v4.0
  9154                                  
  9155                                  FastInit:
  9156                                  	; MSDOS 6.0
  9157                                  	;hkn; set up es to dosdataseg.
  9158 000012ED 06                      	push	es
  9159                                  	;getdseg <es>			; es -> dosdata
  9160 000012EE 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9161                                  
  9162                                  	;hkn; FastTable is in DOSDATA
  9163 000012F3 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9164 000012F6 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9165 000012F7 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9166 000012F9 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4 , each entry is DWORD
  9167 000012FB D1E3                    	SHL	BX,1			;AN000;FO.
  9168 000012FD 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9169 000012FF 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9170                                  fcheck: 				;AN000;
  9171 00001303 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9172 00001305 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9173 00001307 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9174 00001309 09C0                    	OR	AX,AX			;AN000;FO.;
  9175 0000130B 7403                    	JZ	short ok_install	;AN000;FO.;
  9176 0000130D F9                      	STC				;AN000;FO.;; already installed !
  9177 0000130E EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9178                                  ok_install:				;AN000;
  9179 00001310 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9180 00001313 7412                    	JZ	short FSret		;AN000;FO.; yes
  9181 00001315 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9182 00001317 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9183 0000131B 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9184                                  
  9185                                  ;hkn; FastFlg moved to DOSDATA
  9186 0000131E BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9187 00001321 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9188                                  	;or	byte [es:di],80h
  9189 00001323 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9190                                  FSret:					;AN000;
  9191 00001327 07                      	pop	es
  9192 00001328 C3                      	retn				;AN000;FO.
  9193                                  
  9194                                  ;EndProc FastInit
  9195                                  
  9196                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9197                                  ;----------------------------------------------------------------------------
  9198                                  ;   DOS 3.3   6/10/86
  9199                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9200                                  ;
  9201                                  ;   Inputs:	None
  9202                                  ;   Outputs:	AX = -1 and carry flag set
  9203                                  ;
  9204                                  ;   Registers modified: none.
  9205                                  ;----------------------------------------------------------------------------
  9206                                  
  9207                                  FastRet:
  9208                                  	;mov	ax,-1
  9209                                  	;stc
  9210                                  	;retf
  9211 00001329 F9                      	STC
  9212 0000132A 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9213 0000132C CB                      	RETF
  9214                                  
  9215                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9216                                  ;----------------------------------------------------------------------------
  9217                                  ;   DOS 3.3   6/10/86
  9218                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9219                                  ;
  9220                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9221                                  ;   Outputs:	same output as $OPEN
  9222                                  ;
  9223                                  ;----------------------------------------------------------------------------
  9224                                  
  9225                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9226                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9227                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9228                                  
  9229                                  NLS_OPEN:
  9230                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9231                                  ;	MOV	BYTE [CPSWFLAG],0
  9232                                  ;	PUSH	BX		 ; save current state
  9233                                  
  9234 0000132D 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9235 0000132F E8E75C                  	call	_$OPEN
  9236                                  
  9237                                  ;	POP	BX		 ; restore current state
  9238                                  ;	MOV	[CPSWFLAG],BL
  9239 00001332 C3                      	RETN
  9240                                  
  9241                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9242                                  ;----------------------------------------------------------------------------
  9243                                  ;   DOS 3.3   6/10/86
  9244                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9245                                  ;
  9246                                  ;   Inputs:	BP = open mode
  9247                                  ;   Outputs:	same output as $LSEEK
  9248                                  ;
  9249                                  ;----------------------------------------------------------------------------
  9250                                  
  9251                                  ; 16/05/2019 - Retro DOS v4.0
  9252                                  
  9253                                  NLS_LSEEK:
  9254 00001333 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9255 00001338 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9256 0000133D E81000                  	CALL	Fake_User_Stack
  9257 00001340 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9258 00001342 E87C56                  	call	_$LSEEK
  9259 00001345 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9260 0000134A 368F06[8405]            	POP	word [SS:USER_SP]
  9261 0000134F C3                      	RETN
  9262                                  
  9263                                  ;Break	<Fake_User_Stack - save user stack>
  9264                                  ;----------------------------------------------------------------------------
  9265                                  ;   DOS 3.3   6/10/86
  9266                                  ;   Fake_User_Stack - save user stack pointer
  9267                                  ;
  9268                                  ;----------------------------------------------------------------------------
  9269                                  
  9270                                  Fake_User_Stack:
  9271 00001350 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9272 00001354 36A3[8405]              	MOV	[SS:USER_SP],AX
  9273 00001358 8CD0                    	MOV	AX,SS
  9274 0000135A 36A3[8605]              	MOV	[SS:USER_SS],AX
  9275 0000135E C3                      	RETN
  9276                                  
  9277                                  ;Break	<GetDevList - get device header list pointer>
  9278                                  ;----------------------------------------------------------------------------
  9279                                  ;   DOS 3.3   7/25/86
  9280                                  ;   GetDevList - get device header list pointer
  9281                                  ;
  9282                                  ;   Output: AX:BX points to the device header list
  9283                                  ;----------------------------------------------------------------------------
  9284                                  
  9285                                  GetDevList:
  9286                                  	; 16/05/2019 - Retro DOS v4.0
  9287 0000135F BE[280D]                	MOV	SI,SysInitTable
  9288 00001362 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9289 00001367 C534                    	LDS	SI,[SI]
  9290                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9291 00001369 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9292                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9293 0000136C 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9294 0000136F C3                      	RETN
  9295                                  
  9296                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9297                                  ;----------------------------------------------------------------------------
  9298                                  ;   DOS 3.3   7/25/86
  9299                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9300                                  ;
  9301                                  ;   Inputs:	BP = function code 0CH
  9302                                  ;   Outputs:	same output as generic $IOCTL
  9303                                  ;
  9304                                  ;----------------------------------------------------------------------------
  9305                                  
  9306                                  NLS_IOCTL:
  9307                                  	; 16/05/2019 - Retro DOS v4.0
  9308 00001370 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9309 00001375 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9310 0000137A E8D3FF                  	CALL	Fake_User_Stack
  9311 0000137D 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9312 0000137F E8990F                  	call	_$IOCTL
  9313 00001382 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9314 00001387 368F06[8405]            	POP	word [SS:USER_SP]
  9315 0000138C C3                      	RETN
  9316                                  
  9317                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9318                                  ;----------------------------------------------------------------------------
  9319                                  ;   DOS 3.3   7/25/86
  9320                                  ;   NLS_GETEXT	-
  9321                                  ;
  9322                                  ;   Inputs:	none
  9323                                  ;   Outputs:	AX = extended error
  9324                                  ;
  9325                                  ;----------------------------------------------------------------------------
  9326                                  
  9327                                  NLS_GETEXT:
  9328                                  	; 16/05/2019 - Retro DOS v4.0
  9329 0000138D 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9330 00001391 C3                      	RETN
  9331                                  
  9332                                  ; 29/04/2019 - Retro DOS v4.0
  9333                                  
  9334                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9335                                  
  9336                                  ;----------------------------------------------------------------------------
  9337                                  ;   DOS 4.00
  9338                                  ;
  9339                                  ;   Inputs:	DL=0 get extended error message addr
  9340                                  ;		  =1 set extended error message addr
  9341                                  ;		  =2 get parser error message addr
  9342                                  ;		  =3 set parser error message addr
  9343                                  ;		  =4 get critical error message addr
  9344                                  ;		  =5 set critical error message addr
  9345                                  ;		  =6 get file system error message addr
  9346                                  ;		  =7 set file system error message addr
  9347                                  ;		  =8 get address for code reduction
  9348                                  ;		  =9 set address for code reduction
  9349                                  ;   Function:	get/set message address
  9350                                  ;   Outputs:	ES:DI points to addr when get
  9351                                  ;----------------------------------------------------------------------------
  9352                                  
  9353                                  ;Procedure MSG_RETRIEVAL,NEAR
  9354                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9355                                  
  9356                                  MSG_RETRIEVAL:
  9357                                  
  9358                                  ;;	NOTE:  This function lives in command.com resident code now.
  9359                                  ;;	If the int 2F ever gets this far, we'll return registers
  9360                                  ;;	unchanged, which produces the same result as before, if
  9361                                  ;;	command.com wasn't present (and therefore no messages available).
  9362                                  ;;
  9363                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9364                                  ;;	No_Op zeroes AL.
  9365                                  ;;
  9366                                  ;;;hkn; set up ds to point to DOSDATA
  9367                                  ;;	push	ds
  9368                                  ;;	getdseg	<ds>			; ds -> dosdata
  9369                                  ;;
  9370                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9371                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9372                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9373                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9374                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9375                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9376                                  ;;	DEC	AL		    ;AN000;;MS.
  9377                                  ;;toget:				    ;AN000;
  9378                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9379                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9380                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9381                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9382                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9383                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9384                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9385                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9386                                  ;;getget: 				     ;AN000;
  9387                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9388                                  ;;MSGret: 				     ;AN000;
  9389                                  ;;	POP	SI			     ;AN000;;MS.
  9390                                  ;;	POP	AX			     ;AN000;;MS.
  9391                                  ;;
  9392                                  ;;	pop	ds
  9393                                  
  9394                                  ;	return				     ;AN000;;MS. exit
  9395 00001392 C3                      	retn	; 29/04/2019
  9396                                  
  9397                                  ;============================================================================
  9398                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9399                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9400                                  ;============================================================================
  9401                                  ; 20/07/2018 - Retro DOS v3.0
  9402                                  
  9403                                  ;	; MSDOS 3.3
  9404                                  ;	; 08/08/2018 - Retro DOS v3.0
  9405                                  ;ECritMEM:
  9406                                  ;ECritSFT:
  9407                                  ;	;
  9408                                  ;ECritDisk:
  9409                                  ;	retn
  9410                                  ;	;push	ax
  9411                                  ;	
  9412                                  ;	mov	ax,8001h
  9413                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9414                                  ;			; AL = critical section number (00h-0Fh)
  9415                                  ;	pop	ax
  9416                                  ;	retn
  9417                                  ;
  9418                                  ;	; MSDOS 3.3
  9419                                  ;	; 08/08/2018 - Retro DOS v3.0
  9420                                  ;LCritMEM:
  9421                                  ;LCritSFT:
  9422                                  ;	;
  9423                                  ;LCritDisk:
  9424                                  ;	retn
  9425                                  ;	;push	ax
  9426                                  ;	
  9427                                  ;	mov	ax,8101h
  9428                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9429                                  ;			; AL = critical section number (00h-0Fh)
  9430                                  ;	pop	ax
  9431                                  ;	retn
  9432                                  ;
  9433                                  ;ECritDevice:
  9434                                  ;	retn
  9435                                  ;	;push	ax
  9436                                  ;	
  9437                                  ;	mov	ax,8002h
  9438                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9439                                  ;			; AL = critical section number (00h-0Fh)
  9440                                  ;	pop	ax
  9441                                  ;	retn
  9442                                  ;
  9443                                  ;LCritDevice:
  9444                                  ;	retn
  9445                                  ;	;push	ax
  9446                                  ;	
  9447                                  ;	mov	ax,8102h
  9448                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9449                                  ;			; AL = critical section number (00h-0Fh)
  9450                                  ;	pop	ax
  9451                                  ;	retn
  9452                                  
  9453                                  ;============================================================================
  9454                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9455                                  ;============================================================================
  9456                                  ; 12/05/2019 - Retro DOS v4.0
  9457                                  
  9458                                  ; Critical Section Routines
  9459                                  
  9460                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9461                                  
  9462                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9463                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9464                                  
  9465                                  ; ---------------------------------------------------------------------------
  9466                                  ; Each handler must leave everything untouched; including flags!
  9467                                  ;
  9468                                  ; Sleaze for time savings:  first instruction is a return. This is patched
  9469                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9470                                  ; ---------------------------------------------------------------------------
  9471                                  
  9472                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9473                                  ; ---------------------------------------------------------------------------
  9474                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9475                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9476                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9477                                  ; ---------------------------------------------------------------------------
  9478                                  
  9479                                  ;%macro POPFF 0
  9480                                  ;	jmp	$+3
  9481                                  ;	iret
  9482                                  ;	push	cs
  9483                                  ;	call	$-2
  9484                                  ;%endmacro
  9485                                  
  9486                                  ; ---------------------------
  9487                                  
  9488                                  ;Procedure  ECritDisk,NEAR
  9489                                  	;public  ECritMEM
  9490                                  	;public  ECritSFT
  9491                                  ECritMEM:
  9492                                  ECritSFT:
  9493                                  ;
  9494                                  ECritDisk:
  9495                                  
  9496                                  ;SR; Check if critical section is to be entered
  9497                                  
  9498 00001393 9C                      	pushf
  9499 00001394 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9500 0000139A 740D                    	jz	short ECritDisk_2
  9501                                  
  9502                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9503                                  ;	;popff  ; * (macro)
  9504                                  ;	jmp	short ECritDisk_1 ; *
  9505                                  ;
  9506                                  ;ECritDisk_iret: ; *
  9507                                  ;	iret ; *
  9508                                  
  9509                                  	; 16/12/2022
  9510                                  	; 13/11/2022
  9511                                  	;jmp	short ECritDisk_1
  9512                                  	; 06/11/2022
  9513                                  ;ECritDisk_iret:
  9514                                  ;	iret	
  9515                                  
  9516                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9517                                  ECritDisk_1:
  9518 0000139C 0E                      	push	cs ; *
  9519 0000139D E80800                  	call	ECritDisk_iret ; *		
  9520                                  	
  9521                                  ECritDisk_0:
  9522 000013A0 50                      	PUSH    AX
  9523                                  	;MOV	AX,8000h+critDisk
  9524                                  	;INT	int_IBM
  9525 000013A1 B80180                  	mov	ax,8001h
  9526 000013A4 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9527                                  			; AL = critical section number (00h-0Fh)
  9528 000013A6 58                      	POP     AX
  9529 000013A7 C3                      	retn
  9530                                  
  9531                                  	; 16/12/2022
  9532                                  	; 13/11/2022
  9533                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9534                                  LCritDisk_iret: 
  9535 000013A8 CF                      	iret
  9536                                  
  9537                                  ECritDisk_2:
  9538                                  	;;popff ; *
  9539                                  	;;retn
  9540                                  ;	jmp	short ECritDisk_3 ; *
  9541                                  ;ECritDisk_iret2: ; *
  9542                                  ;	iret
  9543                                  	
  9544                                  	; 16/12/2022
  9545                                  	; 13/11/2022
  9546                                  	;jmp	short ECritDisk_3
  9547                                  ;ECritDisk_iret2:
  9548                                  	;iret
  9549                                  
  9550                                  ECritDisk_3:
  9551 000013A9 0E                      	push    cs ; *
  9552                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9553                                  	;call	ECritDisk_iret2 ; *
  9554                                  	;retn
  9555                                  	; 16/12/2022
  9556 000013AA E8FBFF                  	call	ECritDisk_iret
  9557 000013AD C3                      	retn
  9558                                  
  9559                                  ;EndProc ECritDisk
  9560                                  
  9561                                  ; ---------------------------
  9562                                  
  9563                                  ;Procedure   LCritDisk,NEAR
  9564                                  	;public  LCritMEM
  9565                                  	;public  LCritSFT
  9566                                  LCritMEM:
  9567                                  LCritSFT:
  9568                                  ;
  9569                                  LCritDisk:
  9570                                  
  9571                                  ;SR; Check if critical section is to be entered
  9572                                  
  9573 000013AE 9C                      	pushf
  9574 000013AF 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9575 000013B5 740C                    	jz	short LCritDisk_2
  9576                                  	;popff  ; * (macro)
  9577                                  ;	jmp	short LCritDisk_1 ; *
  9578                                  ;
  9579                                  ;LCritDisk_iret: ; *
  9580                                  ;	iret ; *
  9581                                  
  9582                                  	; 16/12/2022
  9583                                  	; 13/11/2022
  9584                                  	;jmp	short LCritDisk_1
  9585                                  ;LCritDisk_iret:
  9586                                  	;iret
  9587                                  
  9588                                  LCritDisk_1:
  9589 000013B7 0E                      	push	cs ; *
  9590 000013B8 E8EDFF                  	call	LCritDisk_iret ; *		
  9591                                  	
  9592                                  LCritDisk_0:
  9593 000013BB 50                      	PUSH	AX
  9594                                  	;MOV	AX,8100h+critDisk
  9595                                  	;INT	int_IBM
  9596 000013BC B80181                  	mov	ax,8101h
  9597 000013BF CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9598                                  			; AL = critical section number (00h-0Fh)
  9599 000013C1 58                      	POP	AX
  9600 000013C2 C3                      	retn
  9601                                  
  9602                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9603                                  ;	iret
  9604                                  
  9605                                  LCritDisk_2:
  9606                                  	;;popff ; *
  9607                                  	;;retn
  9608                                  ;	jmp	short LCritDisk_3 ; *
  9609                                  ;LCritDisk_iret2: ; *
  9610                                  ;	iret
  9611                                  
  9612                                  	; 16/12/2022
  9613                                  	; 13/11/2022
  9614                                  	;jmp	short LCritDisk_3
  9615                                  ;LCritDisk_iret2:
  9616                                  	;iret
  9617                                  
  9618                                  LCritDisk_3:
  9619 000013C3 0E                      	push    cs ; *
  9620                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9621                                  	;call	LCritDisk_iret2 ; *
  9622                                  	;retn
  9623                                  	; 16/12/2022
  9624 000013C4 E8E1FF                  	call	LCritDisk_iret
  9625 000013C7 C3                      	retn
  9626                                  
  9627                                  ;EndProc LCritDisk
  9628                                  
  9629                                  ; ---------------------------
  9630                                  
  9631                                  ;Procedure   ECritDevice,NEAR
  9632                                  
  9633                                  ECritDevice:
  9634                                  
  9635                                  ;SR; Check if critical section is to be entered
  9636                                  
  9637 000013C8 9C                      	pushf
  9638 000013C9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9639 000013CF 740D                    	jz	short ECritDevice_2
  9640                                  	;popff  ; * (macro)
  9641                                  ;	jmp	short ECritDevice_1 ; *
  9642                                  ;
  9643                                  ;ECritDevice_iret: ; *
  9644                                  ;	iret ; *
  9645                                  
  9646                                  	; 16/12/2022	
  9647                                  	; 13/11/2022
  9648                                  	;jmp	short ECritDevice_1
  9649                                  ;ECritDevice_iret:
  9650                                  	;iret
  9651                                  
  9652                                  ECritDevice_1:
  9653 000013D1 0E                      	push	cs ; *
  9654 000013D2 E80800                  	call	ECritDevice_iret ; *		
  9655                                  	
  9656                                  ECritDevice_0:
  9657 000013D5 50                      	PUSH	AX
  9658                                  	;MOV	AX,8000h+critDevice
  9659                                  	;INT	int_IBM
  9660 000013D6 B80280                  	mov	ax,8002h
  9661 000013D9 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9662                                  			; AL = critical section number (00h-0Fh)
  9663 000013DB 58                      	POP     AX
  9664 000013DC C3                      	retn
  9665                                  
  9666                                  	; 16/12/2022
  9667                                  	; 06/12/2022
  9668                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9669                                  LCritDevice_iret: 
  9670 000013DD CF                      	iret
  9671                                  
  9672                                  ECritDevice_2:
  9673                                  	;;popff ; *
  9674                                  	;;retn
  9675                                  ;	jmp	short ECritDevice_3 ; *
  9676                                  ;ECritDevice_iret2: ; *
  9677                                  ;	iret
  9678                                  
  9679                                  	; 16/12/2022
  9680                                  	; 13/11/2022
  9681                                  	;jmp	short ECritDevice_3
  9682                                  ;ECritDevice_iret2:
  9683                                  	;iret
  9684                                  
  9685                                  ECritDevice_3:
  9686 000013DE 0E                      	push    cs ; *
  9687                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9688                                  	;call	ECritDevice_iret2 ; *
  9689                                  	;retn
  9690                                  	; 16/12/2022
  9691 000013DF E8FBFF                  	call	ECritDevice_iret
  9692 000013E2 C3                      	retn
  9693                                  
  9694                                  ;EndProc ECritDevice
  9695                                  
  9696                                  ; ---------------------------
  9697                                  
  9698                                  ;Procedure   LCritDevice,NEAR
  9699                                  
  9700                                  LCritDevice:
  9701                                  
  9702                                  ;SR; Check if critical section is to be entered
  9703                                  
  9704 000013E3 9C                      	pushf
  9705 000013E4 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9706 000013EA 740C                    	jz	short LCritDevice_2
  9707                                  	;popff  ; * (macro)
  9708                                  ;	jmp	short LCritDevice_1 ; *
  9709                                  ;
  9710                                  ;LCritDevice_iret: ; *
  9711                                  ;	iret ; *
  9712                                  
  9713                                  	; 16/12/2022
  9714                                  	; 13/11/2022
  9715                                  	;jmp	short LCritDevice_1
  9716                                  ;LCritDevice_iret:
  9717                                  	;iret
  9718                                  
  9719                                  LCritDevice_1:
  9720 000013EC 0E                      	push	cs ; *
  9721 000013ED E8EDFF                  	call	LCritDevice_iret ; *		
  9722                                  	
  9723                                  LCritDevice_0:
  9724 000013F0 50                      	PUSH	AX
  9725                                  	;MOV	AX,8100h+critDevice
  9726                                  	;INT	int_IBM
  9727 000013F1 B80281                  	mov	ax,8102h
  9728 000013F4 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9729                                  			; AL = critical section number (00h-0Fh)
  9730 000013F6 58                      	POP     AX
  9731 000013F7 C3                      	retn
  9732                                  
  9733                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9734                                  ;	iret
  9735                                  
  9736                                  LCritDevice_2:
  9737                                  	;;popff ; *
  9738                                  	;;retn
  9739                                  ;	jmp	short LCritDevice_3 ; *
  9740                                  ;LCritDevice_iret2: ; *
  9741                                  ;	iret
  9742                                  
  9743                                  	; 16/12/2022
  9744                                  	; 13/11/2022
  9745                                  	;jmp	short LCritDevice_3
  9746                                  ;LCritDevice_iret2:
  9747                                  	;iret
  9748                                  
  9749                                  LCritDevice_3:
  9750 000013F8 0E                      	push    cs ; *
  9751                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9752                                  	;call	LCritDevice_iret2 ; *
  9753                                  	;retn
  9754                                  	; 16/12/2022
  9755 000013F9 E8E1FF                  	call	LCritDevice_iret
  9756 000013FC C3                      	retn
  9757                                  
  9758                                  ;EndProc LCritDevice
  9759                                  
  9760                                  ;============================================================================
  9761                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9762                                  ;============================================================================
  9763                                  ; 20/07/2018 - Retro DOS v3.0
  9764                                  
  9765                                  ;============================================================================
  9766                                  ; STDIO.ASM - (MSDOS 2.0)
  9767                                  ;============================================================================
  9768                                  
  9769                                  ;
  9770                                  ; Standard device IO for MSDOS (first 12 function calls)
  9771                                  ;
  9772                                  
  9773                                  ;.xlist
  9774                                  ;.xcref
  9775                                  ;INCLUDE STDSW.ASM
  9776                                  ;INCLUDE DOSSEG.ASM
  9777                                  ;.cref
  9778                                  ;.list
  9779                                  
  9780                                  ;TITLE   STDIO - device IO for MSDOS
  9781                                  ;NAME    STDIO
  9782                                  
  9783                                  ;INCLUDE IO.ASM
  9784                                  
  9785                                  ; ---------------------------------------------------------------------------
  9786                                  ;
  9787                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9788                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9789                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9790                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9791                                  ;			    to restore MSDOS 2.0 device IO source code 
  9792                                  ;
  9793                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9794                                  	
  9795                                  ;============================================================================
  9796                                  ; STDIO.ASM - (MSDOS 2.0)
  9797                                  ;============================================================================
  9798                                  
  9799                                  ;
  9800                                  ; Standard device IO for MSDOS (first 12 function calls)
  9801                                  ;
  9802                                  
  9803                                  ;.xlist
  9804                                  ;.xcref
  9805                                  ;INCLUDE STDSW.ASM
  9806                                  ;INCLUDE DOSSEG.ASM
  9807                                  ;.cref
  9808                                  ;.list
  9809                                  
  9810                                  ;TITLE   STDIO - device IO for MSDOS
  9811                                  ;NAME    STDIO
  9812                                  
  9813                                  ;INCLUDE IO.ASM
  9814                                  
  9815                                  ; ---------------------------------------------------------------------------
  9816                                  ;
  9817                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9818                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9819                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9820                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9821                                  ;			    to restore MSDOS 2.0 device IO source code 
  9822                                  ;
  9823                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9824                                  ;
  9825                                  ;============================================================================
  9826                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9827                                  ;============================================================================
  9828                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9829                                  
  9830                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9831                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9832                                  
  9833                                  ;============================================================================
  9834                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9835                                  ;============================================================================
  9836                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9837                                  
  9838                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9839                                  
  9840                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9841                                  ;
  9842                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9843                                  ;	NAME	IBMCPMIO
  9844                                  
  9845                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9846                                  ;
  9847                                  ;	$Std_Con_Input_No_Echo
  9848                                  ;	$Std_Con_String_Output
  9849                                  ;	$Std_Con_String_Input
  9850                                  ;	$RawConIO
  9851                                  ;	$RawConInput
  9852                                  ;	RAWOUT
  9853                                  ;	RAWOUT2
  9854                                  ;
  9855                                  
  9856                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9857                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9858                                  ; references to be SS or CS relative which is desired.
  9859                                  
  9860                                  ; ---------------------------------------------------------------------------
  9861                                  
  9862                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9863                                  ;	NAME	CPMIO2
  9864                                  
  9865                                  ;
  9866                                  ;	Microsoft Confidential
  9867                                  ;	Copyright (C) Microsoft Corporation 1991
  9868                                  ;	All Rights Reserved.
  9869                                  ;
  9870                                  
  9871                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9872                                  ;
  9873                                  ;	$Std_Con_Input
  9874                                  ;	$Std_Con_Output
  9875                                  ;	OUTT
  9876                                  ;	TAB
  9877                                  ;	BUFOUT
  9878                                  ;	$Std_Aux_Input
  9879                                  ;	$Std_Aux_Output
  9880                                  ;	$Std_Printer_Output
  9881                                  ;	$Std_Con_Input_Status
  9882                                  ;	$Std_Con_Input_Flush
  9883                                  ;
  9884                                  ;	Revision History:
  9885                                  ;
  9886                                  ;	  AN000	 version 4.00 - Jan. 1988
  9887                                  
  9888                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9889                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9890                                  ; references to be SS or CS relative which is desired.
  9891                                  
  9892                                  ;DOSCODE SEGMENT
  9893                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9894                                  
  9895                                  
  9896                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9897                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9898                                  ;hkn;	not valid. 
  9899                                  
  9900                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9901                                  ; 08/11/2022
  9902                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9903                                  
  9904                                  ;
  9905                                  ;----------------------------------------------------------------------------
  9906                                  ;
  9907                                  ; Procedure : $Std_Con_Input_No_Echo
  9908                                  ;
  9909                                  ;----------------------------------------------------------------------------
  9910                                  ;
  9911                                  
  9912                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9913                                  
  9914                                  ; Inputs:
  9915                                  ;	None
  9916                                  ; Function:
  9917                                  ;	Input character from console, no echo
  9918                                  ; Returns:
  9919                                  ;	AL = character
  9920                                  
  9921 000013FD 1E                      	push	ds
  9922 000013FE 56                      	push	si
  9923                                  INTEST:
  9924 000013FF E8853E                  	call	STATCHK
  9925 00001402 753B                    	jnz	short GET ; 08/09/2018
  9926                                  ;*************************************************************************
  9927                                  ;hkn; SS override
  9928 00001404 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9929 0000140A 7505                    	jnz	short no_sys_wait
  9930 0000140C B405                    	mov	ah,5			; get input status with system wait
  9931 0000140E E88031                  	call	IOFUNC
  9932                                  no_sys_wait:
  9933                                  ;**************************************************************************
  9934 00001411 B484                    	MOV	AH,84h
  9935 00001413 CD2A                    	INT	int_IBM	 ; int 2Ah
  9936                                  
  9937                                  ;;; 7/15/86  update the date in the idle loop
  9938                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9939                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9940                                  
  9941                                  ;hkn; SS override
  9942 00001415 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9943 0000141B 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9944                                  
  9945 0000141D 50                      	PUSH	AX
  9946 0000141E 53                      	PUSH	BX			; following is tricky,
  9947 0000141F 51                      	PUSH	CX			; it may be called by critical handler
  9948 00001420 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9949                                  					; other's READ or WRITE
  9950 00001421 1E                      	PUSH	DS			; save DS = SFT's segment
  9951                                  
  9952                                  ;hkn; READTIME must use ds = DOSDATA
  9953                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9954                                  
  9955 00001422 16                      	PUSH	SS ; 04/05/2019
  9956 00001423 1F                      	POP	DS
  9957                                  
  9958 00001424 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9959 00001427 E89B02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9960                                  	;invoke	READTIME		; readtime
  9961 0000142A E847F7                  	call	READTIME
  9962 0000142D B80100                  	MOV	AX,1
  9963 00001430 E89202                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9964                                  
  9965                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9966                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9967                                  ;	push	bx
  9968                                  ;	mov	bx,DATE_FLAG
  9969                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9970                                  ;	cmp	word [cs:bx],5872h
  9971                                  ;	jz	short FETCHI_TAG_chk_ok
  9972                                  ;	call	DOSINIT
  9973                                  ;FETCHI_TAG_chk_ok:
  9974                                  ;	pop	bx
  9975                                  
  9976 00001433 1F                      	POP	DS			; restore DS
  9977 00001434 5A                      	POP	DX
  9978 00001435 59                      	POP	CX
  9979 00001436 5B                      	POP	BX
  9980 00001437 58                      	POP	AX
  9981                                  NoUpdate:
  9982                                  
  9983                                  ;hkn; SS override
  9984 00001438 36FF06[910D]            	INC	word [SS:DATE_FLAG]
  9985                                  
  9986                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9987 0000143D EBC0                    	JMP	short INTEST
  9988                                  GET:
  9989 0000143F 30E4                    	XOR	AH,AH
  9990 00001441 E84D31                  	call	IOFUNC
  9991 00001444 5E                      	POP	SI
  9992 00001445 1F                      	POP	DS
  9993                                  ;;; 7/15/86
  9994                                  
  9995                                  ;hkn; SS override
  9996                                  	; MSDOS 6.0
  9997 00001446 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9998                                  	;
  9999 0000144C 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10000 0000144E 7506                    	JNZ	short noscan
 10001                                  
 10002                                  ;hkn; SS override
 10003 00001450 36C606[900D]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10004                                  noscan:
 10005 00001456 C3                      	retn
 10006                                  ;
 10007                                  ;----------------------------------------------------------------------------
 10008                                  ;
 10009                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10010                                  ;
 10011                                  ;
 10012                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10013                                  ;	EXIT	none
 10014                                  ;	USES	ALL
 10015                                  ;
 10016                                  ;----------------------------------------------------------------------------
 10017                                  ;
 10018                                  
 10019                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10020                                  
 10021 00001457 89D6                    	mov	si,dx
 10022                                  STRING_OUT1:	
 10023 00001459 AC                      	lodsb
 10024 0000145A 3C24                    	cmp	al,'$'
 10025 0000145C 74F8                    	je	short noscan
 10026                                  NEXT_STR1:
 10027 0000145E E89002                  	call	OUTT
 10028                                  
 10029 00001461 EBF6                    	jmp	short STRING_OUT1
 10030                                  
 10031                                  ;----------------------------------------------------------------------------
 10032                                  ;
 10033                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10034                                  ;
 10035                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10036                                  ;
 10037                                  ;	ENTRY	(ds:dx) = input buffer
 10038                                  ;	EXIT	none
 10039                                  ;	USES	ALL
 10040                                  ;
 10041                                  ;----------------------------------------------------------------------------
 10042                                  
 10043                                  _$STD_CON_STRING_INPUT:		;System call 10
 10044                                  
 10045 00001463 8CD0                    	mov	ax,ss
 10046 00001465 8EC0                    	mov	es,ax
 10047 00001467 89D6                    	mov	si,dx
 10048 00001469 30ED                    	xor	ch,ch
 10049 0000146B AD                      	lodsw
 10050                                  
 10051                                  ;	(AL) = the buffer length
 10052                                  ;	(AH) = the template length
 10053                                  
 10054 0000146C 08C0                            or	al,al
 10055 0000146E 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10056 00001470 88E3                    	mov	bl,ah		;Init template counter
 10057 00001472 88EF                            mov	bh,ch		;Init template counter
 10058                                  
 10059                                  ;	(BL) = the number of bytes in the template
 10060                                  
 10061 00001474 38D8                            cmp	al,bl
 10062 00001476 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10063 00001478 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10064 0000147B 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10065                                  
 10066                                  ; The number of chars in the template is >= the number of chars in buffer or
 10067                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10068                                  ; of affairs.  Pretend that the template was empty:
 10069                                  ;
 10070                                  
 10071                                  NOEDIT:	
 10072 0000147D 88EB                    	mov	bl,ch		;Reset buffer
 10073                                  EDITON: 
 10074 0000147F 88C2                    	mov	dl,al
 10075 00001481 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10076                                  
 10077                                  ;	Top level. We begin to read a line in.
 10078                                  
 10079                                  NEWLIN: 
 10080 00001482 36A0[F901]              	mov	al,[SS:CARPOS]
 10081 00001486 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10082                                  
 10083 0000148A 56                      	push	si
 10084 0000148B BF[FB01]                	mov	di,INBUF ;Build the new line here
 10085 0000148E 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10086 00001493 88EF                    	mov	bh,ch		;No chars from template yet
 10087 00001495 88EE                    	mov	dh,ch		;No chars to new line yet
 10088 00001497 E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10089 0000149A 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10090 0000149C 7503                    	jnz	short GOTCH
 10091                                  
 10092                                  ;	This is the main loop of reading in a character and processing it.
 10093                                  ;
 10094                                  ;	(BH) = the index of the next byte in the template
 10095                                  ;	(BL) = the length of the template
 10096                                  ;	(DH) = the number of bytes in the buffer
 10097                                  ;	(DL) = the length of the buffer
 10098                                  
 10099                                  GETCH:
 10100 0000149E E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10101                                  GOTCH:
 10102                                  ;
 10103                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10104                                  ; input queue.
 10105                                  ;
 10106 000014A1 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10107 000014A3 74F9                    	jz	short GETCH
 10108                                  
 10109                                  ;	If the leading char is the function-key lead byte
 10110                                  
 10111                                  	;cmp	al,[SS:ESCCHAR]
 10112                                  
 10113                                  	; 04/05/2019 - Retro DOS v4.0
 10114                                  
 10115                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10116                                  
 10117 000014A5 2E3A06[720A]            	CMP	AL,[cs:ESCCHAR]
 10118 000014AA 743B                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10119                                  
 10120                                  ;	Rubout and ^H are both destructive backspaces.
 10121                                  
 10122 000014AC 3C7F                            cmp	al,c_DEL ; 7FH
 10123 000014AE 742E                            jz	short BACKSPJ
 10124 000014B0 3C08                            cmp	al,c_BS  ; 8
 10125 000014B2 742A                            jz	short BACKSPJ
 10126                                  
 10127                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10128                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10129                                  	;	   	after CMP and a CMP again!
 10130                                  	;		
 10131                                  	;		-It would be better if they use a 'JMP short' to 
 10132                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10133                                  	;		between them. Then, they would be able use a patch
 10134                                  	;		between 5271h and 5279h when if it will be required.
 10135                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10136                                  	;	
 10137                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10138                                  
 10139                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10140                                  	;
 10141                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10142                                  
 10143                                  ;DOSCODE:526D	cmp     al, 8
 10144                                  ;DOSCODE:526F	jz      short BACKSPJ
 10145                                  ;DOSCODE:5271	cmp     al, 17h
 10146                                  ;DOSCODE:5273	nop
 10147                                  ;DOSCODE:5274	nop
 10148                                  ;DOSCODE:5275	cmp     al, 15h
 10149                                  ;DOSCODE:5277	nop
 10150                                  ;DOSCODE:5278	nop
 10151                                  ;DOSCODE:5279	cmp     al, 0Dh
 10152                                  ;DOSCODE:527B	jz      short ENDLIN
 10153                                  ;DOSCODE:527D	cmp     al, 0Ah
 10154                                  ;DOSCODE:527F	jz      short PHYCRLF
 10155                                  	
 10156                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10157                                  	; DOSCODE:525Dh
 10158                                  
 10159                                  ; 16/12/2022
 10160                                  %if 0
 10161                                  	; MSDOS 6.0
 10162                                  ;	^W deletes backward once and then backs up until a letter is before the
 10163                                  ;	cursor
 10164                                  
 10165                                  	CMP     AL,"W"-"@" ; 17h
 10166                                  
 10167                                  ;	The removal of the comment characters before the jump statement will
 10168                                  ;	cause ^W to backup a word.
 10169                                  
 10170                                  ;***	JZ	short WordDel
 10171                                  	NOP
 10172                                  	NOP
 10173                                  
 10174                                  	CMP     AL,"U"-"@" ; 15h
 10175                                  
 10176                                  ;	The removal of the comment characters before the jump statement will
 10177                                  ;	cause ^U to clear a line.
 10178                                  
 10179                                  ;***	JZ	short LineDel
 10180                                  	NOP
 10181                                  	NOP
 10182                                  
 10183                                  %endif
 10184                                  
 10185                                  ;	CR terminates the line.
 10186                                  
 10187 000014B4 3C0D                            cmp	al,c_CR ; 0Dh
 10188 000014B6 7432                            jz	short ENDLIN
 10189                                  
 10190                                  ;	LF goes to a new line and keeps on reading.
 10191                                  
 10192 000014B8 3C0A                            cmp	al,c_LF ; 0Ah
 10193 000014BA 7444                    	jz	short PHYCRLF
 10194                                  
 10195                                  ;	^X (or ESC) deletes the line and starts over
 10196                                  
 10197                                  	; MSDOS 3.3
 10198                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10199                                  	;jz	short KILNEW
 10200                                  
 10201                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10202                                  
 10203                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10204                                  
 10205 000014BC 2E3A06[710A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10206 000014C1 7442                    	jz	short KILNEW
 10207                                  	
 10208                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10209                                  	;jz	short KILNEW
 10210                                  
 10211                                  ; Otherwise, we save the input character.
 10212                                  
 10213                                  SAVCH:	
 10214 000014C3 38D6                    	cmp	dh,dl
 10215 000014C5 7319                    	jnb	short BUFFUL		; buffer is full.
 10216 000014C7 AA                              stosb
 10217 000014C8 FEC6                    	inc	dh                      ; increment count in buffer.
 10218 000014CA E8B802                  	call	BUFOUT			; Print control chars nicely
 10219                                  
 10220 000014CD 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10221 000014D3 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10222 000014D5 38DF                            cmp	bh,bl
 10223 000014D7 73C5                            jnb	short GETCH		; no more characters in template
 10224 000014D9 46                              inc	si                      ; Skip to next char in template
 10225 000014DA FEC7                            inc	bh                      ; remember position in template
 10226 000014DC EBC0                            jmp	short GETCH
 10227                                  
 10228                                  BACKSPJ: 
 10229 000014DE EB38                    	jmp	short BACKSP
 10230                                  
 10231                                  BUFFUL: 
 10232 000014E0 B007                    	mov	al, 7			; Bell to signal full buffer
 10233 000014E2 E80C02                  	call	OUTT
 10234 000014E5 EBB7                    	jmp	short GETCH
 10235                                  
 10236                                  ESCAPE: 
 10237                                  	;transfer OEMFunctionKey
 10238 000014E7 E9B3F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10239                                  
 10240                                  ENDLIN:
 10241 000014EA AA                              stosb				; Put the CR in the buffer
 10242 000014EB E80302                  	call	OUTT                    ; Echo it
 10243 000014EE 5F                              pop	di                      ; Get start of user buffer
 10244 000014EF 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10245 000014F2 FEC6                            inc	dh			; DH is length including CR
 10246                                  
 10247                                  COPYNEW:
 10248                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10249                                  	;mov	bp, es
 10250                                  	;mov	bx, ds
 10251                                  	;mov	es, bx
 10252                                  	;mov	ds, bp
 10253                                  	;mov	si, INBUF
 10254                                  	;mov	cl, dh
 10255                                  	;rep	movsb
 10256                                  	;retn
 10257                                  
 10258                                  	; CPMIO.ASM (MSDOS 6.0)
 10259                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10260                                  	;SAVE	<DS,ES>
 10261 000014F4 1E                      	PUSH	DS
 10262 000014F5 06                      	PUSH	ES
 10263                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10264 000014F6 1F                      	POP	DS
 10265 000014F7 07                      	POP	ES
 10266                                  
 10267                                  ;;hkn; INBUF is in DOSDATA
 10268 000014F8 BE[FB01]                        MOV     SI,INBUF
 10269 000014FB 88F1                            MOV     CL,DH                   ; set up count
 10270 000014FD F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10271                                  OLDBAK_RETN:
 10272 000014FF C3                              RETN
 10273                                  
 10274                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10275                                  
 10276                                  PHYCRLF:
 10277 00001500 E82001                  	CALL	CRLF
 10278 00001503 EB99                            JMP	short GETCH
 10279                                  
 10280                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10281                                  
 10282                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10283                                  
 10284                                  	; Note: Following routines were not used in IBMDOS.COM
 10285                                  	;	-CRTL+W, CRTL+U is not activated-
 10286                                  	;	but they were in the kernel code!?)
 10287                                  
 10288                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10289                                  	; DOSCODE:52B6h
 10290                                  
 10291                                  ;;;;;;;;
 10292                                  
 10293                                  ; 16/12/2022
 10294                                  %if 0
 10295                                  ;
 10296                                  ; Delete the previous line
 10297                                  ;
 10298                                  LineDel:
 10299                                  	OR      DH,DH
 10300                                  	JZ	short GETCH	 ; 06/12/2022
 10301                                  	Call    BackSpace
 10302                                  	JMP	short LineDel
 10303                                  
 10304                                  %endif
 10305                                  
 10306                                  ;
 10307                                  ; delete the previous word.
 10308                                  ;
 10309                                  WordDel:
 10310                                  WordLoop:
 10311                                  ;	Call    BackSpace               ; backspace the one spot
 10312                                  ;	OR      DH,DH
 10313                                  ;	JZ	short GetChj
 10314                                  ;	MOV     AL,[ES:DI-1]
 10315                                  ;	cmp     al,'0'
 10316                                  ;	jb	short GetChj
 10317                                  ;	cmp     al,'9'
 10318                                  ;	jbe	short WordLoop
 10319                                  ;	OR      AL,20h
 10320                                  ;	CMP     AL,'a'
 10321                                  ;	JB	short GetChj
 10322                                  ;	CMP     AL,'z'
 10323                                  ;	JBE	short WordLoop
 10324                                  ;GetChj: 
 10325                                  ;	JMP	GETCH
 10326                                  
 10327                                  ; 16/12/2022
 10328                                  %if 0
 10329                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10330                                  	; (Worddel is not called or jumped from anywhere!)
 10331                                  WordDel:
 10332                                  WordLoop:
 10333                                  	Call    BackSpace               ; backspace the one spot
 10334                                  	OR      DH,DH
 10335                                  	JZ	short GetChj
 10336                                  	MOV     AL,[ES:DI-1]
 10337                                  	cmp     al,'0'
 10338                                  	jb	short GetChj
 10339                                  	cmp     al,'9'
 10340                                  	jbe	short WordLoop
 10341                                  	OR      AL,20h
 10342                                  	CMP     AL,'a'
 10343                                  	JB	short GetChj
 10344                                  	CMP     AL,'z'
 10345                                  	JBE	short WordLoop
 10346                                  GetChj: 
 10347                                  	JMP	GETCH
 10348                                  
 10349                                  %endif
 10350                                  
 10351                                  ;;;;;;;;
 10352                                  
 10353                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10354                                  
 10355                                  ; The user wants to throw away what he's typed in and wants to start over.
 10356                                  ; We print the backslash and then go to the next line and tab to the correct
 10357                                  ; spot to begin the buffered input.
 10358                                  
 10359                                  KILNEW:
 10360 00001505 B05C                            mov	al,'\'
 10361 00001507 E8E701                          call	OUTT            ;Print the CANCEL indicator
 10362 0000150A 5E                              pop	si		;Remember start of edit buffer
 10363                                  PUTNEW:
 10364 0000150B E81501                  	call	CRLF            ;Go to next line on screen
 10365 0000150E 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10366 00001512 E85002                  	call	TAB             ;Tab over
 10367 00001515 E96AFF                          JMP     NEWLIN		;Start over again
 10368                                  
 10369                                  ;	Destructively back up one character position
 10370                                  
 10371                                  BACKSP:
 10372                                  	; 09/09/2018
 10373 00001518 E80200                  	Call    BackSpace
 10374 0000151B EB81                    	JMP     GETCH
 10375                                  
 10376                                  BackSpace:
 10377 0000151D 08F6                    	or	dh,dh
 10378 0000151F 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10379 00001521 E85800                  	call	BACKUP          ;Do the backup
 10380 00001524 268A05                  	mov	al,[es:di]	;Get the deleted char
 10381 00001527 3C20                            cmp	al,20h	; ' '
 10382 00001529 730F                    	jnb	short OLDBAK	;Was a normal char
 10383 0000152B 3C09                            cmp	al,c_HT ; 9
 10384 0000152D 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10385                                  ;; 9/27/86 fix for ctrl-U backspace
 10386 0000152F 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10387 00001531 7407                    	JZ	short OLDBAK
 10388 00001533 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10389 00001535 7403                    	JZ	short OLDBAK
 10390                                  ;; 9/27/86 fix for ctrl-U backspace
 10391 00001537 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10392                                  OLDBAK:
 10393 0000153A 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10394 00001540 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10395 00001542 08FF                    	or	bh,bh
 10396 00001544 74B9                            jz	short OLDBAK_RETN 
 10397                                  				;Not advanced in template, stay where we are
 10398 00001546 FECF                    	dec	bh		;Go back in template
 10399 00001548 4E                              dec	si
 10400 00001549 C3                      	retn
 10401                                  BAKTAB:
 10402 0000154A 57                              push	di
 10403 0000154B 4F                              dec	di		;Back up one char
 10404 0000154C FD                              std			;Go backward
 10405 0000154D 88F1                            mov	cl,dh		;Number of chars currently in line
 10406 0000154F B020                            mov	al,20h	; ' '
 10407 00001551 53                              push	bx
 10408 00001552 B307                            mov	bl,7		;Max
 10409 00001554 E30E                            jcxz	FIGTAB		;At start, do nothing
 10410                                  FNDPOS:
 10411 00001556 AE                              scasb			;Look back
 10412 00001557 7609                    	jbe	short CHKCNT
 10413 00001559 26807D0109              	cmp	byte [es:di+1],9
 10414 0000155E 7409                    	jz	short HAVTAB	;Found a tab
 10415 00001560 FECB                    	dec	bl		;Back one char if non tab control char
 10416                                  CHKCNT:
 10417 00001562 E2F2                            loop	FNDPOS
 10418                                  FIGTAB:		
 10419 00001564 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10420                                  HAVTAB:
 10421 00001569 28F3                    	sub	bl,dh
 10422 0000156B 00D9                    	add	cl,bl
 10423 0000156D 80E107                  	and	cl,7		;CX has correct number to erase
 10424 00001570 FC                      	cld			;Back to normal
 10425 00001571 5B                      	pop	bx
 10426 00001572 5F                      	pop	di
 10427 00001573 74C5                    	jz	short OLDBAK	;Nothing to erase
 10428                                  TABBAK:
 10429 00001575 E80700                  	call	BACKMES
 10430 00001578 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10431 0000157A EBBE                    	jmp	short OLDBAK
 10432                                  
 10433                                  BACKUP:
 10434 0000157C FECE                            dec	dh		;Back up in line
 10435 0000157E 4F                              dec	di
 10436                                  BACKMES:
 10437 0000157F B008                            mov	al,c_BS ; 8	;Backspace
 10438 00001581 E86D01                          call	OUTT
 10439 00001584 B020                            mov	al,20h ; ' '	;Erase
 10440 00001586 E86801                          call	OUTT
 10441 00001589 B008                            mov	al,c_BS ; 8	;Backspace
 10442 0000158B E96301                  	jmp	OUTT		;Done
 10443                                  
 10444                                  ;User really wants an ESC character in his line
 10445                                  TWOESC:	
 10446 0000158E 2EA0[720A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10447 00001592 E92EFF                  	jmp	SAVCH
 10448                                  
 10449                                  ;Copy the rest of the template
 10450                                  COPYLIN:
 10451 00001595 88D9                            mov	cl,bl		;Total size of template
 10452 00001597 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10453 00001599 EB07                            jmp	short COPYEACH
 10454                                  
 10455                                  COPYSTR:
 10456 0000159B E83400                  	call	FINDOLD         ;Find the char
 10457 0000159E EB02                    	jmp	short COPYEACH  ;Copy up to it
 10458                                  
 10459                                  ;Copy one char from template to line
 10460                                  COPYONE:
 10461 000015A0 B101                            mov	cl,1
 10462                                  ;Copy CX chars from template to line
 10463                                  COPYEACH:
 10464 000015A2 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10465 000015A8 38D6                    	cmp	dh,dl
 10466 000015AA 740F                            jz	short GETCH2		;At end of line, can't do anything
 10467 000015AC 38DF                            cmp	bh,bl
 10468 000015AE 740B                            jz	short GETCH2		;At end of template, can't do anything
 10469 000015B0 AC                              lodsb
 10470 000015B1 AA                              stosb
 10471 000015B2 E8D001                  	call	BUFOUT
 10472 000015B5 FEC7                            inc	bh			;Ahead in template
 10473 000015B7 FEC6                            inc	dh			;Ahead in line
 10474 000015B9 E2E7                            loop	COPYEACH
 10475                                  GETCH2:
 10476 000015BB E9E0FE                          jmp	GETCH
 10477                                  
 10478                                  ;Skip one char in template
 10479                                  SKIPONE:
 10480 000015BE 38DF                    	cmp	bh,bl
 10481 000015C0 74F9                    	jz	short GETCH2		;At end of template
 10482 000015C2 FEC7                    	inc	bh			;Ahead in templat
 10483 000015C4 46                      	inc	si
 10484 000015C5 E9D6FE                  	jmp	GETCH
 10485                                  
 10486                                  SKIPSTR:
 10487 000015C8 E80700                  	call	FINDOLD                 ;Find out how far to go
 10488 000015CB 01CE                            add	si,cx			;Go there
 10489 000015CD 00CF                            add	bh,cl
 10490 000015CF E9CCFE                          jmp	GETCH
 10491                                  
 10492                                  ;Get the next user char, and look ahead in template for a match
 10493                                  ;CX indicates how many chars to skip to get there on output
 10494                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10495                                  ;       address is popped off and a jump to GETCH is taken.
 10496                                  ;       Make sure nothing extra on stack when this routine
 10497                                  ;       is called!!! (no PUSHes before calling it).
 10498                                  
 10499                                  FINDOLD:
 10500 000015D2 E828FE                          call	_$STD_CON_INPUT_NO_ECHO
 10501                                  
 10502                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10503                                  
 10504                                  	;CMP     AL,[SS:ESCCHAR]	
 10505                                  	;JNZ     SHORT FINDSETUP
 10506                                  
 10507                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10508                                  
 10509                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10510                                  
 10511 000015D5 2E3A06[720A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10512 000015DA 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10513                                  
 10514 000015DC E81EFE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10515 000015DF EB1D                            JMP     SHORT NOTFND		; go try again
 10516                                  FINDSETUP:
 10517 000015E1 88D9                    	mov	cl,bl
 10518 000015E3 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10519 000015E5 7417                    	jz	short NOTFND	;At end of template
 10520 000015E7 49                              dec	cx		;Cannot point past end, limit search
 10521 000015E8 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10522 000015EA 06                      	push	es
 10523 000015EB 1E                      	push	ds
 10524 000015EC 07                      	pop	es
 10525 000015ED 57                      	push	di
 10526 000015EE 89F7                    	mov	di,si		;Template to ES:DI
 10527 000015F0 47                      	inc	di
 10528 000015F1 F2AE                    	repne	scasb		;Look
 10529 000015F3 5F                      	pop	di
 10530 000015F4 07                      	pop	es
 10531 000015F5 7507                    	jnz	short NOTFND	;Didn't find the char
 10532 000015F7 F6D1                            not	cl		;Turn how far to go into how far we went
 10533 000015F9 00D9                            add	cl,bl		;Add size of template
 10534 000015FB 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10535                                  FINDOLD_RETN:
 10536 000015FD C3                      	retn
 10537                                  
 10538                                  NOTFND:
 10539 000015FE 5D                              pop	bp              ;Chuck return address
 10540 000015FF E99CFE                          jmp	GETCH
 10541                                  
 10542                                  REEDIT:
 10543 00001602 B040                    	mov	al,'@'		;Output re-edit character
 10544 00001604 E8EA00                  	call	OUTT
 10545 00001607 5F                      	pop	di
 10546 00001608 57                      	push	di
 10547 00001609 06                      	push	es
 10548 0000160A 1E                      	push	ds
 10549 0000160B E8E6FE                  	call	COPYNEW		;Copy current line into template
 10550 0000160E 1F                      	pop	ds
 10551 0000160F 07                      	pop	es
 10552 00001610 5E                      	pop	si
 10553 00001611 88F3                    	mov	bl,dh		;Size of line is new size template
 10554 00001613 E9F5FE                  	jmp	PUTNEW		;Start over again
 10555                                  
 10556                                  EXITINS:
 10557                                  ENTERINS:
 10558 00001616 36F616[7905]            	not	byte [SS:INSMODE]
 10559 0000161B E980FE                  	jmp	GETCH
 10560                                  
 10561                                  ;Put a real live ^Z in the buffer (embedded)
 10562                                  CTRLZ:
 10563 0000161E B01A                    	mov	al,"Z"-"@" ; 1Ah
 10564 00001620 E9A0FE                          jmp	SAVCH
 10565                                  
 10566                                  ;Output a CRLF
 10567                                  CRLF:
 10568 00001623 B00D                    	mov	al,c_CR ; 0Dh 
 10569 00001625 E8C900                  	call	OUTT
 10570 00001628 B00A                    	mov	al,c_LF ; 0Ah
 10571 0000162A E9C400                  	jmp	OUTT
 10572                                  
 10573                                  ;
 10574                                  ;----------------------------------------------------------------------------
 10575                                  ;
 10576                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10577                                  ;
 10578                                  ;	Input or output raw character from console, no echo
 10579                                  ;
 10580                                  ;	ENTRY	DL = -1 if input
 10581                                  ;		   =  output character if output
 10582                                  ;	EXIT	(AL) = input character if input
 10583                                  ;	USES	all
 10584                                  ;
 10585                                  ;----------------------------------------------------------------------------
 10586                                  ; 20/07/2018 - Retro DOS v3.0
 10587                                  
 10588                                  ; 04/05/2019 - Retro DOS v4.0
 10589                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10590                                  
 10591                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10592                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10593                                  
 10594                                  _$RAW_CON_IO:			; System call 6
 10595                                  
 10596 0000162D 88D0                            MOV     AL,DL
 10597 0000162F 3CFF                            CMP     AL,-1
 10598 00001631 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10599                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10600                                  	;jz	short rci1
 10601                                  	;jmp	short RAWOUT
 10602                                  	; 16/12/202
 10603                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10604                                  	;nop
 10605                                  rci1:	        
 10606                                  			; Get pointer to register save area
 10607 00001633 36C43E[8405]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10608 00001638 31DB                    	XOR     BX,BX
 10609                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10610 0000163A E8DF20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10611                                          ;JC	SHORT RET17
 10612 0000163D 72BE                            jc	short FINDOLD_RETN
 10613 0000163F B401                    	MOV     AH,1
 10614 00001641 E84D2F                          CALL	IOFUNC
 10615 00001644 750B                            JNZ     SHORT RESFLG
 10616 00001646 E8103C                          CALL	SPOOLINT
 10617                                          ;OR	BYTE [ES:DI+16H],40H
 10618 00001649 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10619 0000164E 30C0                            XOR     AL,AL
 10620                                  RET17:
 10621 00001650 C3                              RETN
 10622                                  
 10623                                  RESFLG:
 10624                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10625 00001651 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10626                                  				; Reset user's zero flag
 10627                                  ;RILP:
 10628                                  rci0:
 10629 00001656 E8003C                       	CALL	SPOOLINT
 10630                                  ;
 10631                                  ;----------------------------------------------------------------------------
 10632                                  ;
 10633                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10634                                  ;
 10635                                  ;	Input raw character from console, no echo
 10636                                  ;
 10637                                  ;	ENTRY	none
 10638                                  ;	EXIT	(al) = character
 10639                                  ;	USES	all
 10640                                  ;
 10641                                  ;----------------------------------------------------------------------------
 10642                                  ;
 10643                                  
 10644                                  ;rci0:	invoke	SPOOLINT
 10645                                  
 10646                                  	;entry	$RAW_CON_INPUT
 10647                                  
 10648                                  	; 04/05/2019 - Retro DOS v4.0
 10649                                  
 10650                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10651                                  
 10652                                  _$RAW_CON_INPUT:		; System call 7
 10653 00001659 53                      	push	bx
 10654 0000165A 31DB                            XOR     BX,BX
 10655                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10656 0000165C E8BD20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10657 0000165F 5B                              pop	bx
 10658 00001660 72EE                    	JC	SHORT RET17
 10659 00001662 B401                            MOV     AH,1
 10660 00001664 E82A2F                          CALL	IOFUNC
 10661                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10662                                  	;XOR	AH,AH
 10663                                          ;CALL	IOFUNC
 10664                                          ;RETN
 10665 00001667 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10666 00001669 B484                    	MOV	AH,84h
 10667 0000166B CD2A                    	INT	int_IBM  ; int 2Ah
 10668 0000166D EBE7                    	JMP	short rci0
 10669                                  rci5:	
 10670 0000166F 30E4                            XOR     AH,AH
 10671                                          ;CALL	IOFUNC
 10672                                          ;RETN
 10673                                  	; 18/12/2022
 10674 00001671 E91D2F                  	jmp	IOFUNC
 10675                                  
 10676                                  ;       Output the character in AL to stdout
 10677                                  ;
 10678                                  	;entry   RAWOUT
 10679                                  RAWOUT:
 10680 00001674 53                              PUSH    BX
 10681 00001675 BB0100                          MOV     BX,1
 10682                                  
 10683                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10684 00001678 E8A120                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10685 0000167B 721B                            JC      SHORT RAWRET1
 10686                                  
 10687                                  	;
 10688                                  	; MSDOS 2.11
 10689                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10690                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10691                                          ;PUSH	DS
 10692                                          ;PUSH	SI
 10693                                          ;LDS	SI,[SI+19H]		; output to special?
 10694                                  	;TEST	BYTE [SI+4],ISSPEC
 10695                                  	;POP	SI
 10696                                  	;
 10697                                          
 10698                                  	; MSDOS 3.3 & MSDOS 6.0
 10699                                  	;mov	bx,[si+5]
 10700 0000167D 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10701                                   ;
 10702                                   ; If we are a network handle OR if we are not a local device then go do the
 10703                                   ; output the hard way.
 10704                                   ;	
 10705                                  	;and	bx,8080h
 10706 00001680 81E38080                	AND	BX,sf_isnet+devid_device
 10707                                  	;cmp	bx,80h
 10708 00001684 81FB8000                	CMP	BX,devid_device
 10709 00001688 7510                    	jnz     short RAWNORM
 10710 0000168A 1E                      	push    ds
 10711                                  	;lds	bx,[si+7]
 10712 0000168B C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10713                                  	;test	byte [bx+4],10h
 10714 0000168E F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10715                                  	;
 10716                                  
 10717 00001692 1F                              POP     DS
 10718 00001693 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10719                                  
 10720 00001695 CD29                            INT	int_fastcon  ; int 29h	; quickly output the char
 10721                                  
 10722                                          ;JMP	SHORT RAWRET
 10723                                  ;RAWNORM:
 10724                                  ;	CALL    RAWOUT3
 10725                                  RAWRET: 
 10726 00001697 F8                      	CLC
 10727                                  RAWRET1:
 10728 00001698 5B                              POP     BX
 10729                                  RAWRET2:
 10730 00001699 C3                      	RETN
 10731                                  RAWNORM:
 10732 0000169A E80700                  	CALL    RAWOUT3
 10733 0000169D EBF8                    	jmp	short RAWRET
 10734                                  
 10735                                  ;       Output the character in AL to handle in BX
 10736                                  ;
 10737                                  ;	entry   RAWOUT2
 10738                                  
 10739                                  RAWOUT2:
 10740                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10741                                  	;JC	SHORT RET18
 10742 0000169F E87A20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10743 000016A2 72F5                    	JC	SHORT RAWRET2
 10744                                  RAWOUT3:
 10745 000016A4 50                              PUSH    AX
 10746 000016A5 EB0C                            JMP     SHORT RAWOSTRT
 10747                                  ROLP:
 10748 000016A7 E8AF3B                          CALL	SPOOLINT
 10749                                  
 10750                                  	; 01/05/2019 - Retro DOS v4.0
 10751                                  
 10752                                  	; MSDOS 6.0
 10753                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10754                                  	; 17/12/2022
 10755 000016AA 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h	
 10756                                  	;or	word [ss:DOS34_FLAG],200h
 10757                                  				;AN002; set control break
 10758                                  	;invoke DSKSTATCHK
 10759 000016B0 E8223B                  	call	DSKSTATCHK	;AN002; check control break
 10760                                  RAWOSTRT:
 10761 000016B3 B403                            MOV     AH,3
 10762 000016B5 E8D92E                          CALL    IOFUNC
 10763 000016B8 74ED                            JZ      SHORT ROLP
 10764                                  
 10765                                  	; MSDOS 6.0
 10766                                  ;SR;
 10767                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10768                                  ;the user failed. We do not send a char if this happens. We however return 
 10769                                  ;to the caller with carry clear because this DOS call does not return any
 10770                                  ;status. 
 10771                                  ;
 10772 000016BA 40                      	inc	ax		;fail on I24 if ax = -1
 10773 000016BB 58                      	POP	AX
 10774 000016BC 7405                    	jz	short nosend	;yes, do not send char
 10775 000016BE B402                    	MOV	AH,2
 10776 000016C0 E8CE2E                  	call	IOFUNC
 10777                                  nosend:
 10778 000016C3 F8                      	CLC			; Clear carry indicating successful
 10779 000016C4 C3                      	retn
 10780                                  
 10781                                  	; MSDOS 3.3 & MSDOS 2.11
 10782                                  	;POP	AX
 10783                                  	;MOV	AH,2
 10784                                          ;CALL	IOFUNC
 10785                                  	;CLC			; Clear carry indicating successful
 10786                                  ;RET18:    
 10787                                  	;RETN
 10788                                  
 10789                                  ;;10/08/2018
 10790                                  ; 20/07/2018 - Retro DOS v3.0
 10791                                  ; ---------------------------------------------------------------------------
 10792                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10793                                  ; ---------------------------------------------------------------------------
 10794                                  
 10795                                  ; This routine is called at DOS init
 10796                                  
 10797                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10798                                  ;;OUTMES:
 10799                                  ;;	;LODS	CS:BYTE PTR [SI]
 10800                                  ;;	CS	LODSB
 10801                                  ;;	CMP     AL,"$" ; 24h
 10802                                  ;;	JZ	SHORT RET18
 10803                                  ;;	CALL	OUTT
 10804                                  ;;	JMP     SHORT OUTMES
 10805                                  
 10806                                  ; ---------------------------------------------------------------------------
 10807                                  
 10808                                  ; 20/07/2018 - Retro DOS v3.0
 10809                                  
 10810                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10811                                  
 10812                                  ;
 10813                                  ;----------------------------------------------------------------------------
 10814                                  ;
 10815                                  ; Inputs:
 10816                                  ;	AX=0 save the DEVCALL request packet
 10817                                  ;	  =1 restore the DEVCALL request packet
 10818                                  ; Function:
 10819                                  ;	save or restore the DEVCALL packet
 10820                                  ; Returns:
 10821                                  ;	none
 10822                                  ;
 10823                                  ;----------------------------------------------------------------------------
 10824                                  ;
 10825                                  
 10826                                  ; 04/05/2019 - Retro DOS v4.0
 10827                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10828                                  
 10829                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10830                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10831                                  
 10832                                  ; 12/05/2019
 10833                                  
 10834                                  Save_Restore_Packet:
 10835 000016C5 1E                      	PUSH	DS
 10836 000016C6 06                      	PUSH	ES
 10837 000016C7 56                      	PUSH	SI
 10838 000016C8 57                      	PUSH	DI
 10839                                  
 10840                                  	; 16/12/2022
 10841                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10842                                  	; 09/09/2018
 10843 000016C9 BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10844 000016CC BE[5A03]                	mov	si,DEVCALL
 10845                                  	;
 10846 000016CF 83F800                  	CMP	AX,0		; save packet
 10847 000016D2 7402                    	JZ	short save_packet ; 16/12/2022
 10848                                  	;je	short set_seg
 10849                                  
 10850                                  	; MSDOS 6.0
 10851                                  restore_packet:
 10852                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10853                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10854                                  	; MSDOS 3.3
 10855                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10856                                  	;mov	di,DEVCALL  ; 09/09/2018
 10857                                  	;
 10858                                  	;JMP	short set_seg
 10859                                  
 10860                                  	; 16/12/2022	
 10861                                  	; 09/09/2018
 10862 000016D4 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10863                                  
 10864                                  ; 16/12/2022
 10865                                  %if 0
 10866                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10867                                  	cmp	ax,0		; save packet
 10868                                  	jz	short save_packet
 10869                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10870                                  	mov	di,DEVCALL 
 10871                                  	jmp	short set_seg
 10872                                  
 10873                                  	; MSDOS 6.0
 10874                                  save_packet:
 10875                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10876                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10877                                  	; 09/09/2018
 10878                                  	; MSDOS 3.3
 10879                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10880                                  	;mov	si,DEVCALL ; 09/09/2018
 10881                                  
 10882                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10883                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10884                                  	mov	si,DEVCALL
 10885                                  %endif
 10886                                  
 10887                                  ; 16/12/2022
 10888                                  save_packet:
 10889                                  ;set_seg:
 10890                                  	; MSDOS 3.3
 10891                                  	;mov	ax,cs
 10892                                  
 10893                                  	; MSDOS 6.0
 10894 000016D6 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10895                                  
 10896 000016D8 8ED8                    	MOV	DS,AX
 10897 000016DA 8EC0                    	MOV	ES,AX
 10898 000016DC B90B00                  	MOV	CX,11		; 11 words to move
 10899 000016DF F3A5                    	REP	MOVSW
 10900                                  
 10901 000016E1 5F                      	POP	DI
 10902 000016E2 5E                      	POP	SI
 10903 000016E3 07                      	POP	ES
 10904 000016E4 1F                      	POP	DS
 10905 000016E5 C3                      	retn
 10906                                  
 10907                                  ;============================================================================
 10908                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10909                                  ;============================================================================
 10910                                  ; 20/07/2018 - Retro DOS v3.0
 10911                                  ; 01/05/2019 - Retro DOS v4.0
 10912                                  
 10913                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10914                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10915                                  ;hkn;	not valid. 
 10916                                  
 10917                                  ;
 10918                                  ;----------------------------------------------------------------------------
 10919                                  ;
 10920                                  ;**	$STD_CON_INPUT - System Call 1
 10921                                  ;
 10922                                  ;	Input character from console, echo
 10923                                  ;
 10924                                  ;	ENTRY	none
 10925                                  ;	EXIT	(al) = character
 10926                                  ;	USES	ALL
 10927                                  ;
 10928                                  ;----------------------------------------------------------------------------
 10929                                  ;
 10930                                  
 10931                                  _$STD_CON_INPUT:	;System call 1
 10932                                  	
 10933 000016E6 E814FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10934 000016E9 50                      	PUSH	AX
 10935 000016EA E80400                  	CALL	OUTT
 10936 000016ED 58                      	POP	AX
 10937                                  CON_INPUT_RETN:	
 10938 000016EE C3                      	RETN
 10939                                  
 10940                                  ;
 10941                                  ;----------------------------------------------------------------------------
 10942                                  ;
 10943                                  ;**	$STD_CON_OUTPUT - System Call 2
 10944                                  ;
 10945                                  ;	Output character to console
 10946                                  ;
 10947                                  ;	ENTRY	(dl) = character
 10948                                  ;	EXIT	none
 10949                                  ;	USES	all
 10950                                  ;
 10951                                  ;----------------------------------------------------------------------------
 10952                                  ;
 10953                                  
 10954                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10955                                  
 10956                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10957                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10958                                  
 10959                                  _$STD_CON_OUTPUT:	;System call 2
 10960                                  
 10961 000016EF 88D0                    	MOV	AL,DL
 10962                                  OUTT:
 10963 000016F1 3C20                    	CMP	AL,20H ; " "
 10964 000016F3 725C                    	JB	SHORT CTRLOUT
 10965 000016F5 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10966 000016F7 7405                    	JZ	SHORT OUTCH
 10967                                  OUTCHA:	
 10968                                  	;INC	BYTE PTR [CARPOS]
 10969 000016F9 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 10970                                  OUTCH:
 10971 000016FE 1E                      	PUSH	DS
 10972 000016FF 56                      	PUSH	SI
 10973                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10974                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10975 00001700 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 10976                                  	;AND	BYTE [SS:CHARCO],00111111B
 10977                                  	; 01/05/2019 - Retro DOS v4.0
 10978 00001705 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 10979 0000170B 7505                    	JNZ	SHORT OUTSKIP
 10980                                  
 10981 0000170D 50                      	PUSH	AX
 10982 0000170E E8763B                  	CALL	STATCHK
 10983 00001711 58                      	POP	AX
 10984                                  OUTSKIP:
 10985 00001712 E85FFF                  	CALL	RAWOUT				;output the character
 10986                                  
 10987 00001715 5E                      	POP	SI
 10988 00001716 1F                      	POP	DS
 10989                                  
 10990                                  	;TEST	BYTE PTR [PFLAG],-1
 10991                                  	;retz
 10992 00001717 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10993 0000171D 74CF                    	JZ	SHORT CON_INPUT_RETN
 10994                                  
 10995 0000171F 53                      	PUSH	BX
 10996 00001720 1E                      	PUSH	DS
 10997 00001721 56                      	PUSH	SI
 10998 00001722 BB0100                  	MOV	BX,1
 10999                                  	; 20/07/2018 - Retro DOS v3.0
 11000                                  	; MSDOS 3.3
 11001                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11002 00001725 E8F41F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 11003                                  					;hkn; to sft entry
 11004 00001728 7224                    	JC	SHORT TRIPOPJ
 11005                                  
 11006                                  	; 01/05/2019 - Retro DOS v4.0
 11007                                  
 11008                                  	;mov	bx,[si+5]
 11009 0000172A 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11010                                  	;test	bx,8000h
 11011                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11012 0000172D F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11013 00001730 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11014                                  	;;test	bx,80h
 11015                                  	;TEST	BX,devid_device 		; output to file?
 11016 00001732 F6C380                  	test	bl,devid_device ; 80h
 11017 00001735 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11018                                  	; 14/03/2018
 11019                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11020                                  	;jc	short TRIPOPJ
 11021                                  	; MSDOS 2.11
 11022                                  	;test	byte [SI+18H], 80h
 11023                                  	;jz	short TRIPOPJ
 11024 00001737 BB0400                  	MOV	BX,4
 11025 0000173A E8DF1F                  	CALL	GET_IO_SFT
 11026 0000173D 720F                    	JC	SHORT TRIPOPJ
 11027                                  	;;test	word [si+5], 800h
 11028                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11029                                  	;test	byte [si+6],8 ; 08/11/2022
 11030 0000173F F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11031                                  						; StdPrn redirected?
 11032                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11033                                  	;jz	LISSTRT2 ; 10/08/2018 
 11034                                  	; 16/12/2022
 11035 00001743 7503                    	jnz	short outch1
 11036 00001745 E98700                  	jmp	LISSTRT2
 11037                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11038                                  	;jz	short LISSTRT2J
 11039                                  outch1:
 11040                                  	;MOV	BYTE [PFLAG],0			
 11041 00001748 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11042                                  	; MSDOS 2.11
 11043                                  	;mov	bx,4
 11044                                  	;jmp	short LISSTRT2
 11045                                  	
 11046                                  TRIPOPJ:
 11047                                  	; 20/07/2018
 11048 0000174E E98100                  	JMP	TRIPOP
 11049                                  
 11050                                  	; 16/12/2022
 11051                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11052                                  ;LISSTRT2J:
 11053                                  ;	JMP	LISSTRT2
 11054                                  
 11055                                  CTRLOUT:
 11056 00001751 3C0D                    	CMP	AL,c_CR ; 0Dh
 11057 00001753 7420                    	JZ	SHORT ZERPOS
 11058 00001755 3C08                    	CMP	AL,c_BS ; 8
 11059 00001757 7424                    	JZ	SHORT BACKPOS
 11060 00001759 3C09                    	CMP	AL,c_HT ; 9
 11061 0000175B 75A1                    	JNZ	SHORT OUTCH
 11062                                  	;MOV	AL,[CARPOS]
 11063 0000175D 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11064 00001761 0CF8                    	OR	AL,0F8H
 11065 00001763 F6D8                    	NEG	AL
 11066                                  TAB:
 11067 00001765 51                      	PUSH	CX
 11068 00001766 88C1                    	MOV	CL,AL
 11069 00001768 B500                    	MOV	CH,0
 11070 0000176A E307                    	JCXZ	POPTAB
 11071                                  TABLP:
 11072 0000176C B020                    	MOV	AL," "
 11073 0000176E E880FF                  	CALL	OUTT
 11074 00001771 E2F9                    	LOOP	TABLP
 11075                                  POPTAB:
 11076 00001773 59                      	POP	CX
 11077                                  
 11078 00001774 C3                      	RETN
 11079                                  
 11080                                  ZERPOS:
 11081                                  	;MOV	BYTE PTR [CARPOS],0
 11082 00001775 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11083                                  	; 10/08/2018
 11084 0000177B EB81                    	JMP	short OUTCH ; 04/05/2019
 11085                                  	
 11086                                  	; 18/12/2022
 11087                                  ;OUTJ:	
 11088                                  	;JMP	OUTT
 11089                                  
 11090                                  BACKPOS:
 11091                                  	;DEC	BYTE PTR [CARPOS]
 11092 0000177D 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11093 00001782 E979FF                  	JMP	OUTCH
 11094                                  
 11095                                  BUFOUT:
 11096 00001785 3C20                    	CMP	AL," "
 11097 00001787 7315                    	JAE	SHORT OUTJ		;Normal char
 11098 00001789 3C09                    	CMP	AL,9
 11099 0000178B 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11100                                  	;DOS 3.3  7/14/86
 11101 0000178D 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11102 0000178F 740D                    	JZ	short CTRLU
 11103 00001791 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11104 00001793 7409                    	JZ	short CTRLU
 11105                                  NOT_CTRLU:
 11106                                  	;DOS 3.3  7/14/86
 11107 00001795 50                      	PUSH	AX
 11108 00001796 B05E                    	MOV	AL,"^"
 11109 00001798 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11110 0000179B 58                      	POP	AX
 11111 0000179C 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11112                                  CTRLU:
 11113                                  	;CALL	OUTT
 11114                                  	; 18/12/2022
 11115                                  OUTJ:
 11116 0000179E E950FF                  	jmp	OUTT
 11117                                  ;BUFOUT_RETN:
 11118                                  	;RETN
 11119                                  
 11120                                  ;
 11121                                  ;----------------------------------------------------------------------------
 11122                                  ;
 11123                                  ;**	$STD_AUX_INPUT - System Call 3
 11124                                  ;
 11125                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11126                                  ;
 11127                                  ;	ENTRY	none
 11128                                  ;	EXIT	(al) = character
 11129                                  ;	USES	all
 11130                                  ;
 11131                                  ;----------------------------------------------------------------------------
 11132                                  ;
 11133                                  
 11134                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11135                                  
 11136                                  _$STD_AUX_INPUT:	;System call 3
 11137                                  
 11138 000017A1 E8E33A                  	CALL	STATCHK
 11139 000017A4 BB0300                  	MOV	BX,3
 11140 000017A7 E8721F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11141                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11142                                  	;retc
 11143                                  	; 16/12/2022
 11144                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11145                                  	;JC	SHORT BUFOUT_RETN
 11146                                  	;JMP	SHORT TAISTRT
 11147                                  	; 07/12/2022
 11148 000017AA 7304                    	jnc	SHORT TAISTRT
 11149 000017AC C3                      	retn	
 11150                                  
 11151                                  AUXILP:
 11152 000017AD E8A93A                  	CALL	SPOOLINT
 11153                                  TAISTRT:
 11154 000017B0 B401                    	MOV	AH,1
 11155 000017B2 E8DC2D                  	CALL	IOFUNC
 11156 000017B5 74F6                    	JZ	SHORT AUXILP
 11157 000017B7 30E4                    	XOR	AH,AH
 11158                                  	; 16/12/2022
 11159                                  	;CALL	IOFUNC
 11160                                  	;RETN
 11161                                  	; 07/12/2022
 11162 000017B9 E9D52D                  	jmp	IOFUNC
 11163                                  
 11164                                  ;
 11165                                  ;----------------------------------------------------------------------------
 11166                                  ;
 11167                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11168                                  ;
 11169                                  ;	ENTRY	(dl) = character
 11170                                  ;	EXIT	none
 11171                                  ;	USES	all
 11172                                  ;
 11173                                  ;----------------------------------------------------------------------------
 11174                                  ;
 11175                                  
 11176                                  _$STD_AUX_OUTPUT:	;System call 4
 11177                                  
 11178 000017BC 53                      	PUSH	BX
 11179 000017BD BB0300                  	MOV	BX,3
 11180 000017C0 EB04                    	JMP	SHORT SENDOUT
 11181                                  
 11182                                  ;
 11183                                  ;----------------------------------------------------------------------------
 11184                                  ;
 11185                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11186                                  ;
 11187                                  ;	ENTRY	(dl) = character
 11188                                  ;	EXIT	none
 11189                                  ;	USES	all
 11190                                  ;
 11191                                  ;----------------------------------------------------------------------------
 11192                                  ;
 11193                                  
 11194                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11195                                  
 11196 000017C2 53                      	PUSH	BX
 11197 000017C3 BB0400                  	MOV	BX,4
 11198                                  
 11199                                  SENDOUT:
 11200 000017C6 88D0                    	MOV	AL,DL
 11201 000017C8 50                      	PUSH	AX
 11202 000017C9 E8BB3A                  	CALL	STATCHK
 11203 000017CC 58                      	POP	AX
 11204 000017CD 1E                      	PUSH	DS
 11205 000017CE 56                      	PUSH	SI
 11206                                  LISSTRT2:
 11207 000017CF E8CDFE                  	CALL	RAWOUT2
 11208                                  TRIPOP:
 11209 000017D2 5E                      	POP	SI
 11210 000017D3 1F                      	POP	DS
 11211 000017D4 5B                      	POP	BX
 11212                                  SCIS_RETN:	; 20/07/2018
 11213 000017D5 C3                      	RETN
 11214                                  ;
 11215                                  ;----------------------------------------------------------------------------
 11216                                  ;
 11217                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11218                                  ;
 11219                                  ;	Check console input status
 11220                                  ;
 11221                                  ;	ENTRY	none
 11222                                  ;	EXIT	AL = -1 character available, = 0 no character
 11223                                  ;	USES	all
 11224                                  ;
 11225                                  ;----------------------------------------------------------------------------
 11226                                  ;
 11227                                  
 11228                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 11229                                  
 11230 000017D6 E8AE3A                  	CALL	STATCHK
 11231 000017D9 B000                    	MOV	AL,0			; no xor!!
 11232                                  	;retz
 11233 000017DB 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11234 000017DD 0CFF                    	OR	AL,-1
 11235                                  ;SCIS_RETN:
 11236 000017DF C3                      	RETN
 11237                                  
 11238                                  ;
 11239                                  ;----------------------------------------------------------------------------
 11240                                  ;
 11241                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11242                                  ;
 11243                                  ;	Flush console input buffer and perform call in AL
 11244                                  ;
 11245                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11246                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11247                                  ;		return arguments for the fcn supplied in (AL)
 11248                                  ;	USES	all
 11249                                  ;
 11250                                  ;----------------------------------------------------------------------------
 11251                                  ;
 11252                                  
 11253                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11254                                  
 11255 000017E0 50                      	PUSH	AX
 11256 000017E1 52                      	PUSH	DX
 11257 000017E2 31DB                    	XOR	BX,BX
 11258 000017E4 E8351F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11259                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11260 000017E7 7205                    	JC	SHORT BADJFNCON
 11261 000017E9 B404                    	MOV	AH,4
 11262 000017EB E8A32D                  	CALL	IOFUNC
 11263                                  
 11264                                  BADJFNCON:
 11265 000017EE 5A                      	POP	DX
 11266 000017EF 58                      	POP	AX
 11267 000017F0 88C4                    	MOV	AH,AL
 11268 000017F2 3C01                    	CMP	AL,1
 11269 000017F4 7413                    	JZ	SHORT REDISPJ
 11270 000017F6 3C06                    	CMP	AL,6
 11271 000017F8 740F                    	JZ	SHORT REDISPJ
 11272 000017FA 3C07                    	CMP	AL,7
 11273 000017FC 740B                    	JZ	SHORT REDISPJ
 11274 000017FE 3C08                    	CMP	AL,8
 11275 00001800 7407                    	JZ	SHORT REDISPJ
 11276 00001802 3C0A                    	CMP	AL,10
 11277 00001804 7403                    	JZ	SHORT REDISPJ
 11278 00001806 B000                    	MOV	AL,0
 11279 00001808 C3                      	RETN
 11280                                  
 11281                                  REDISPJ:
 11282 00001809 FA                      	CLI
 11283                                  	;transfer REDISP
 11284 0000180A E9BAEB                  	JMP	REDISP
 11285                                  
 11286                                  ;============================================================================
 11287                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11288                                  ;============================================================================
 11289                                  ; 20/07/2018 - Retro DOS v3.0
 11290                                  ; 17/05/2019 - Retro DOS v4.0
 11291                                  
 11292                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11293                                  ;
 11294                                  ;	$GET_FCB_POSITION
 11295                                  ;	$FCB_DELETE
 11296                                  ;	$GET_FCB_FILE_LENGTH
 11297                                  ;	$FCB_CLOSE
 11298                                  ;	$FCB_RENAME
 11299                                  ;	SaveFCBInfo
 11300                                  ;	ResetLRU
 11301                                  ;	SetOpenAge
 11302                                  ;	LRUFCB
 11303                                  ;	FCBRegen
 11304                                  ;	BlastSFT
 11305                                  ;	CheckFCB
 11306                                  ;	SFTFromFCB
 11307                                  ;	FCBHardErr
 11308                                  ;
 11309                                  ;	Revision history:
 11310                                  ;
 11311                                  ;		Created: ARR 4 April 1983"
 11312                                  ;			 MZ  6 June  1983 completion of functions
 11313                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11314                                  ;					  times.  Change so successive closes work by
 11315                                  ;					  always returning OK.	Also, detect I/O to
 11316                                  ;					  already closed FCB and return EOF.
 11317                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11318                                  ;					  out of sft into FCB for reconnection
 11319                                  ;
 11320                                  ;		A000	 version 4.00  Jan. 1988
 11321                                  
 11322                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11323                                  ;----------------------------------------------------------------------------
 11324                                  ;
 11325                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11326                                  ;	extent and next record field and set the random record field to point
 11327                                  ;	to that record
 11328                                  ;
 11329                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11330                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11331                                  ;   Registers modified: all
 11332                                  ;
 11333                                  ;----------------------------------------------------------------------------
 11334                                  ;
 11335                                  
 11336                                  _$GET_FCB_POSITION:
 11337 0000180D E8F204                  	call	GetExtended		; point to FCB
 11338 00001810 E8C204                  	call	GetExtent		; DX:AX is current record
 11339                                  	;mov	[si+21h],ax
 11340 00001813 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11341                                  	;mov	[si+23h],dl
 11342 00001816 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11343                                  	;cmp	word [si+0Eh],64
 11344 00001819 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11345 0000181D 7303                    	JAE	short GetFCBBye
 11346                                  	;mov	[si+24h],dh
 11347 0000181F 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11348                                  GoodPath:	; 16/12/2022
 11349                                  GetFCBBye:
 11350 00001822 E97BEE                  	jmp	FCB_RET_OK
 11351                                  
 11352                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11353                                  ;----------------------------------------------------------------------------
 11354                                  ;
 11355                                  ;**	$FCB_Delete - Delete from FCB Template
 11356                                  ;
 11357                                  ;	given an FCB, remove all directory entries in the current
 11358                                  ;	directory that have names that match the FCB's ?  marks.
 11359                                  ;
 11360                                  ;	ENTRY	(DS:DX) = address of FCB
 11361                                  ;	EXIT	entries matching the FCB are deleted
 11362                                  ;		(al) = ff iff no entries were deleted
 11363                                  ;	USES	all
 11364                                  ;
 11365                                  ;----------------------------------------------------------------------------
 11366                                  ;
 11367                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11368                                  
 11369                                  _$FCB_DELETE:		; System call 19
 11370                                  					; OpenBuf is in DOSDATA
 11371 00001825 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11372                                  
 11373 00001828 E81C54                  	call	TransFCB		; convert FCB to path
 11374 0000182B 7207                    	JC	short BadPath 		; signal no deletions
 11375                                  
 11376 0000182D 16                      	push	SS
 11377 0000182E 1F                      	pop	DS			; SS is DOSDATA
 11378                                  
 11379 0000182F E89D0D                  	call	DOS_DELETE		; wham
 11380                                  	;JC	short BadPath
 11381                                  	; 16/12/2022
 11382 00001832 73EE                    	jnc 	short GoodPath
 11383                                  ;GoodPath:
 11384                                  ;	;jmp	FCB_RET_OK		; do a good return
 11385                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11386                                  ;	jmp	short GetFCBBye
 11387                                  
 11388                                  BadPath:
 11389                                  	; Error code is in AX
 11390                                  
 11391 00001834 E96CEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11392                                  
 11393                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11394                                  ;----------------------------------------------------------------------------
 11395                                  ;
 11396                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11397                                  ;	file in records (rounded up if partial).
 11398                                  ;
 11399                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11400                                  ;   Outputs:	Random record field updated to reflect the number of records
 11401                                  ;   Registers modified: all
 11402                                  ;
 11403                                  ;----------------------------------------------------------------------------
 11404                                  ;
 11405                                  
 11406                                  _$GET_FCB_FILE_LENGTH:
 11407                                  
 11408 00001837 E8C804                  	call	GetExtended		; get real FCB pointer
 11409                                  					; DX points to Input FCB
 11410                                  
 11411                                  					; OpenBuf is in DOSDATA
 11412 0000183A BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11413                                  
 11414 0000183D 1E                      	push	ds			; save pointer to true FCB
 11415 0000183E 56                      	push	si
 11416 0000183F E80554                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11417 00001842 5E                      	pop	si
 11418 00001843 1F                      	pop	ds
 11419 00001844 72EE                    	JC	short BadPath
 11420 00001846 1E                      	push	ds			; save pointer
 11421 00001847 56                      	push	si
 11422 00001848 16                      	push	ss		
 11423 00001849 1F                      	pop	ds
 11424 0000184A E89411                  	call	GET_FILE_INFO		; grab the info
 11425 0000184D 5E                      	pop	si			; get pointer back
 11426 0000184E 1F                      	pop	ds
 11427 0000184F 72E3                    	JC	short BadPath 		; invalid something
 11428 00001851 89DA                    	MOV	DX,BX			; get high order size
 11429 00001853 89F8                    	MOV	AX,DI			; get low order size
 11430                                  	;mov	bx,[si+0Eh]
 11431 00001855 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11432 00001858 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11433 0000185A 7503                    	JNZ	short GetSize 		; not empty
 11434 0000185C BB8000                  	MOV	BX,128
 11435                                  GetSize:
 11436 0000185F 89C7                    	MOV	DI,AX			; save low order word
 11437 00001861 89D0                    	MOV	AX,DX			; move high order for divide
 11438 00001863 31D2                    	XOR	DX,DX			; clear out high
 11439 00001865 F7F3                    	DIV	BX			; wham
 11440 00001867 50                      	PUSH	AX			; save dividend
 11441 00001868 89F8                    	MOV	AX,DI			; get low order piece
 11442 0000186A F7F3                    	DIV	BX			; wham
 11443 0000186C 89D1                    	MOV	CX,DX			; save remainder
 11444 0000186E 5A                      	POP	DX			; get high order dividend
 11445 0000186F E306                    	JCXZ	LengthStore		; no roundup
 11446 00001871 83C001                  	ADD	AX,1
 11447 00001874 83D200                  	ADC	DX,0			; 32-bit increment
 11448                                  LengthStore:
 11449                                  	;mov	[si+21h],ax
 11450 00001877 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11451                                  	;mov	[si+23h],dl
 11452 0000187A 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11453 0000187D 08F6                    	OR	DH,DH
 11454 0000187F 74A1                    	JZ	short GoodPath		; not storing insignificant zero
 11455                                  	;mov	[si+24h],dh
 11456 00001881 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11457                                  	; 16/12/2022
 11458                                  GoodRet:
 11459                                  	;jmp	FCB_RET_OK
 11460 00001884 EB9C                    	jmp	short GoodPath
 11461                                  
 11462                                  ;Break <$FCB_Close - close a file>
 11463                                  ;----------------------------------------------------------------------------
 11464                                  ;
 11465                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 11466                                  ;	as the FCB may be used for further I/O
 11467                                  ;
 11468                                  ;   Inputs:	DS:DX point to FCB
 11469                                  ;   Outputs:	AL = FF if file was not found on disk
 11470                                  ;   Registers modified: all
 11471                                  ;
 11472                                  ;----------------------------------------------------------------------------
 11473                                  ;
 11474                                  
 11475                                  _$FCB_CLOSE:		; System call 16
 11476                                  
 11477 00001886 30C0                    	XOR	AL,AL			; default search attributes
 11478 00001888 E87704                  	call	GetExtended		; DS:SI point to real FCB
 11479 0000188B 7403                    	JZ	short NoAttr		; not extended
 11480 0000188D 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11481                                  NoAttr:
 11482                                  					; SS override
 11483 00001890 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11484 00001894 E8D903                  	call	SFTFromFCB
 11485 00001897 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11486                                  
 11487                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11488                                  	; there is no need to set the SFT's attribute.
 11489                                  
 11490                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11491                                  	;;; done
 11492                                  
 11493                                  	;mov	al,[es:di+4]
 11494 00001899 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11495 0000189D 30E4                    	XOR	AH,AH
 11496 0000189F 50                      	PUSH	AX
 11497                                  
 11498                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11499                                  	;;; done
 11500                                  
 11501 000018A0 E8D15B                  	call	CheckShare
 11502 000018A3 7508                    	JNZ	short NoStash
 11503 000018A5 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11504                                  	;mov	[es:di+4],al
 11505 000018A9 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11506                                  NoStash:
 11507                                  	;mov	ax,[si+14h]
 11508 000018AD 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11509                                  	;mov	[es:di+0Fh],ax
 11510 000018B0 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11511                                  	;mov	ax,[si+16h]
 11512 000018B4 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11513                                  	;mov	[es:di+0Dh],ax
 11514 000018B7 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11515                                  	;mov	ax,[si+10h]
 11516 000018BB 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11517                                  	;mov	[es:di+11h],ax
 11518 000018BE 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11519                                  	;mov	ax,[si+12h]
 11520 000018C2 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11521                                  	;mov	[es:di+13h],ax
 11522 000018C5 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11523                                  	;or	word [es:di+5],4000h
 11524                                  	; 17/12/2022
 11525 000018C9 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11526                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11527 000018CE 16                      	push	ss
 11528 000018CF 1F                      	pop	ds
 11529 000018D0 E80A17                  	call	DOS_CLOSE	; wham
 11530 000018D3 C43E[9E05]              	LES	DI,[THISSFT]
 11531                                  
 11532                                  	;;; 9/8/86 F.C. restore SFT attribute
 11533 000018D7 59                      	POP	CX
 11534                                  	;mov	[es:di+4],cl
 11535 000018D8 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11536                                  	;;; 9/8/86 F.C. restore SFT attribute
 11537                                  
 11538 000018DC 9C                      	PUSHF
 11539                                  	;test	word [es:di],0FFFFh
 11540                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11541                                  				; zero ref count gets blasted
 11542 000018DD 26833D00                	cmp	word [ES:DI],0
 11543 000018E1 7507                    	jnz     short CloseOK
 11544 000018E3 50                      	PUSH	AX
 11545 000018E4 B04D                    	MOV	AL,'M'
 11546 000018E6 E8FC02                  	call	BlastSFT
 11547 000018E9 58                      	POP	AX
 11548                                  CloseOK:
 11549 000018EA 9D                      	POPF
 11550 000018EB 7397                    	JNC	short GoodRet
 11551                                  	;cmp	al,6
 11552 000018ED 3C06                    	CMP	AL,error_invalid_handle
 11553 000018EF 7493                    	JZ	short GoodRet
 11554                                  	;mov	al,2
 11555 000018F1 B002                    	MOV	AL,error_file_not_found
 11556                                  fren90:
 11557                                  	; 16/12/2022
 11558                                  fcb_close_err:
 11559 000018F3 E9ADED                  	jmp	FCB_RET_ERR
 11560                                  
 11561                                  ;
 11562                                  ;----------------------------------------------------------------------------
 11563                                  ;
 11564                                  ;**	$FCB_Rename - Rename a File
 11565                                  ;
 11566                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11567                                  ;	multiple files copying from the meta characters.
 11568                                  ;
 11569                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11570                                  ;		    name of the files to be renamed. Starting at offset 11h
 11571                                  ;		    in the FCB is the destination name.
 11572                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11573                                  ;		AL = FF -> some files may have been renamed but:
 11574                                  ;			rename to existing file or source file not found
 11575                                  ;	USES	ALL
 11576                                  ;
 11577                                  ;----------------------------------------------------------------------------
 11578                                  ;
 11579                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11580                                  
 11581                                  _$FCB_RENAME:		; System call 23
 11582                                  
 11583 000018F6 E80904                  	call	GetExtended		; get pointer to real FCB
 11584 000018F9 52                      	push	dx
 11585 000018FA 8A04                    	MOV	AL,[SI] 		; get drive byte
 11586 000018FC 83C610                  	ADD	SI,10h			; point to destination
 11587                                  
 11588                                  					; RenBuf is in DOSDATA
 11589 000018FF BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11590 00001902 FF34                    	push	word [SI]
 11591 00001904 1E                      	push	ds
 11592 00001905 57                      	push	di			; save source pointer for TransFCB
 11593 00001906 8804                    	MOV	[SI],AL			; drop in real drive
 11594 00001908 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11595 0000190A E83A53                  	call	TransFCB		; munch this pathname
 11596 0000190D 5E                      	pop	si
 11597 0000190E 1F                      	pop	ds	
 11598 0000190F 8F04                    	pop	WORD [SI]		; get path back
 11599 00001911 5A                      	pop	dx			; Original FCB pointer
 11600 00001912 72DF                    	JC	short fren90		; bad path -> error
 11601                                  
 11602                                  					; SS override for WFP_Start & Ren_WFP
 11603 00001914 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11604 00001919 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11605                                  
 11606                                  					; OpenBuf is in DOSDATA
 11607 0000191E BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11608 00001921 E82353                  	call	TransFCB		; wham
 11609                                  					; NOTE that this call is pointing
 11610                                  					;  back to the ORIGINAL FCB so
 11611                                  					;  SATTRIB gets set correctly
 11612 00001924 72CD                    	JC	short fren90		; error
 11613 00001926 E8840E                  	call	DOS_RENAME
 11614 00001929 72C8                    	JC	short fren90
 11615                                  	; 16/12/2022
 11616 0000192B E972ED                  	jmp	FCB_RET_OK
 11617                                  	
 11618                                  ;	Error -
 11619                                  ;
 11620                                  ;	(al) = error code
 11621                                  
 11622                                  	; 16/12/2022
 11623                                  ;fren90:	
 11624                                  ;	;jmp	FCB_RET_ERR
 11625                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11626                                  ;	jmp	short fcb_close_err
 11627                                  
 11628                                  ;Break <Misbehavior fixers>
 11629                                  ;
 11630                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11631                                  ;   user's space so he may move them at will. Second, they have a small
 11632                                  ;   reserved area that may be used for system information. Third, there was
 11633                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11634                                  ;   usage.
 11635                                  ;
 11636                                  ;   This results in the following misbehavior:
 11637                                  ;
 11638                                  ;	infinite opens of the same file:
 11639                                  ;
 11640                                  ;	While (TRUE) {			While (TRUE) {
 11641                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11642                                  ;	    Read (FCB); 		    Write (FCB);
 11643                                  ;	    }				    }
 11644                                  ;
 11645                                  ;	infinite opens of different files:
 11646                                  ;
 11647                                  ;	While (TRUE) {			While (TRUE) {
 11648                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11649                                  ;	    Read (FCB); 		    Write (FCB);
 11650                                  ;	    }				    }
 11651                                  ;
 11652                                  ;	multiple closes of the same file:
 11653                                  ;
 11654                                  ;	FCBOpen (FCB);
 11655                                  ;	while (TRUE)
 11656                                  ;	    FCBClose (FCB);
 11657                                  ;
 11658                                  ;	I/O after closing file:
 11659                                  ;
 11660                                  ;	FCBOpen (FCB);
 11661                                  ;	while (TRUE) {
 11662                                  ;	    FCBWrite (FCB);
 11663                                  ;	    FCBClose (FCB);
 11664                                  ;	    }
 11665                                  ;
 11666                                  ;   The following is am implementation of a methodology for emulating the
 11667                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11668                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11669                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11670                                  ;   the local machine.
 11671                                  ;
 11672                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11673                                  ;   structures depending on the file itself and the state of operations of the
 11674                                  ;   OS. The information contained in this reserved field is enough to
 11675                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11676                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11677                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11678                                  ;
 11679                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11680                                  ;
 11681                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11682                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11683                                  ;   regenerated.
 11684                                  ;
 11685                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11686                                  ;   longer available. We can make up for this by using the following
 11687                                  ;   information:
 11688                                  ;
 11689                                  ;	The Drive number (from the DPB).
 11690                                  ;	The physical sector of the directory that contains the entry.
 11691                                  ;	The relative position of the entry in the sector.
 11692                                  ;	The first cluster field.
 11693                                  ;	The last used SFT.
 11694                                  ;      OR In the case of a device FCB
 11695                                  ;	The low 6 bits of sf_flags (indicating device type)
 11696                                  ;	The pointer to the device header
 11697                                  ;
 11698                                  ;   We read in the particular directory sector and examine the indicated
 11699                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11700                                  ;
 11701                                  ;   Some key items need to be remembered:
 11702                                  ;
 11703                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11704                                  ;	information. We enforce good behavior on the FCBs.
 11705                                  ;
 11706                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11707                                  ;	open VCs. The VCs may be closed only at process termination.
 11708                                  ;
 11709                                  ;	If this is not an installed version of the DOS, file sharing will
 11710                                  ;	always be present.
 11711                                  ;
 11712                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11713                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11714                                  ;
 11715                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11716                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11717                                  ;	proper OI record.
 11718                                  ;
 11719                                  ;   The test bits are:
 11720                                  ;
 11721                                  ;	00 -> local file
 11722                                  ;	40 -> sharing local
 11723                                  ;	80 -> network
 11724                                  ;	C0 -> local device
 11725                                  
 11726                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11727                                  ;----------------------------------------------------------------------------
 11728                                  ;
 11729                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11730                                  ;	pieces of information into the FCB to allow for subsequent
 11731                                  ;	regeneration. Poke LRU also.
 11732                                  ;
 11733                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11734                                  ;		DS:SI point to the FCB (not an extended one)
 11735                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11736                                  ;		DS:SI preserved
 11737                                  ;		ES:DI point to sft
 11738                                  ;   Registers modified: All
 11739                                  ;
 11740                                  ;
 11741                                  ;----------------------------------------------------------------------------
 11742                                  ;
 11743                                  
 11744                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11745                                  
 11746                                  SaveFCBInfo:
 11747                                  
 11748 0000192E 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11749 00001933 E8B1F9                  	call	IsSFTNet
 11750 00001936 740B                    	JZ	short SaveLocal		; if not network then save local info
 11751                                  ;
 11752                                  ;----- In net support -----
 11753                                  ;
 11754                                  	; 17/05/2019 - Retro DOS v4.0
 11755                                  
 11756                                  	; MSDOS 3.3
 11757                                  	;;mov	ax,[es:di+1Dh]
 11758                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11759                                  	;;mov	[si+1Ah],ax
 11760                                  	;mov	[si+fcb_net_handle],ax
 11761                                  	;push	es
 11762                                  	;push	di
 11763                                  	;;les	di,[es:di+19h]
 11764                                  	;LES	DI,[ES:DI+sf_netid]
 11765                                  	;;mov	[si+1Ch],di
 11766                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11767                                  	;;mov 	[si+1Eh],es
 11768                                  	;MOV	[SI+fcb_netID+2],ES
 11769                                  	;pop	di
 11770                                  	;pop	es
 11771                                  
 11772                                  	; MSDOS 6.0
 11773                                  	;mov	ax,[es:di+0Bh]
 11774 00001938 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11775                                  	;mov	[si+1Ch],ax
 11776 0000193C 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11777                                  	
 11778                                  	;mov	bl,80h
 11779 0000193F B380                    	MOV	BL,FCBNETWORK
 11780                                  ;
 11781                                  ;----- END In net support -----
 11782                                  ;
 11783 00001941 EB65                    	jmp	SHORT SaveSFN
 11784                                  
 11785                                  SaveLocal:
 11786                                  	;IF	Installed
 11787 00001943 E82E5B                  	call	CheckShare
 11788                                  	;JZ	short SaveNoShare	; no sharer
 11789                                  	;JMP	short SaveShare		; sharer present
 11790                                  	; 16/12/2022
 11791                                  	; 28/07/2019
 11792 00001946 755B                    	jnz	short SaveShare
 11793                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11794                                  	;JZ	short SaveNoShare	; no sharer
 11795                                  	;JMP	short SaveShare		; sharer present
 11796                                  
 11797                                  SaveNoShare:
 11798                                  	;;test 	word [es:di+5],80h
 11799                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11800 00001948 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11801 0000194D 7542                    	JNZ	short SaveNoShareDev	; Device
 11802                                  
 11803                                  	; Save no sharing local file information
 11804                                  
 11805                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11806                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11807 0000194F 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11808                                  	;mov	[si+1Dh],ax
 11809 00001953 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11810                                  
 11811                                  	; MSDOS 6.0
 11812                                  
 11813                                  	;SR; Store high byte of directory sector
 11814                                  	;mov	ax,[es:di+1Dh]
 11815 00001956 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11816                                  	
 11817                                  	; SR;
 11818                                  	; We have to store the read-only and archive attributes of the file.
 11819                                  	; We extract it from the SFT and store it in the top two bits of the 
 11820                                  	; sector number ( sector number == 22 bits only )
 11821                                  
 11822                                  	;mov	bl,[es:di+4]
 11823 0000195A 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11824 0000195E 88DF                    	mov	bh,bl
 11825 00001960 D0CB                    	ror	bl,1
 11826 00001962 D0E7                    	shl	bh,1
 11827 00001964 08FB                    	or	bl,bh
 11828 00001966 80E3C0                  	and	bl,0C0h
 11829 00001969 08D8                    	or	al,bl
 11830                                  	;mov	[si+18h],al ; 08/11/2022
 11831 0000196B 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11832                                  
 11833                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11834                                  	;mov	al,[es:di+1Fh]
 11835 0000196E 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11836                                  	;mov	[si+1Fh],al
 11837 00001972 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11838                                  	;mov	ax,[es:di+0Bh]
 11839 00001975 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11840                                  	;mov	[si+1Bh],ax
 11841 00001979 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11842 0000197C B300                    	MOV	BL,0
 11843                                  
 11844                                  	; Create the bits field from the dirty/device bits of the flags word 
 11845                                  	; and the mode byte
 11846                                  
 11847                                  SetFCBBits:
 11848                                  	;mov	ax,[es:di+5]
 11849 0000197E 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11850 00001982 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11851                                  	;or	al,[es:di+2]
 11852 00001984 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11853                                  	;mov	[si+1Ah], al
 11854 00001988 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11855                                  
 11856                                  	; MSDOS 6.0
 11857                                  	
 11858                                  	; SR;
 11859                                  	; Check if we came here for local file or device. If for local file, 
 11860                                  	; skip setting of SFT index
 11861                                  	
 11862 0000198B 08DB                    	or	bl,bl
 11863 0000198D 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11864                                  
 11865 0000198F EB17                    	JMP	short SaveSFN 		; go and save SFN
 11866                                  
 11867                                  	; Save no sharing local device information
 11868                                  
 11869                                  SaveNoShareDev:
 11870                                  	;mov	ax,[es:di+7]
 11871 00001991 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11872                                  	;mov	[si+1Ah],ax
 11873 00001995 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11874                                  	;mov	ax,[es:di+9]
 11875 00001998 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11876 0000199C 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11877                                  	;mov	bl,40h
 11878 0000199F B340                    	MOV	BL,FCBDEVICE
 11879 000019A1 EBDB                    	JMP	SetFCBBits		; go and save SFN
 11880                                  
 11881                                  SaveShare:
 11882                                  	;ENDIF
 11883                                  
 11884                                  ;----- In share support -----
 11885                                  
 11886                                  	;call	far [ss:ShSave]
 11887 000019A3 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11888                                  
 11889                                  ;----- end in share support -----
 11890                                  
 11891                                  	; 17/05/2019
 11892                                  
 11893                                  SaveSFN:
 11894                                  	;lea	ax,[di-6]
 11895 000019A8 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11896                                  	
 11897                                  	; Adjust for offset to table.
 11898                                  	
 11899 000019AB 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11900                                  
 11901 000019B0 53                      	push	bx			;bx = FCB type (net/Share or local)
 11902                                  	;;mov	bl,53 ; MSDOS 3.3
 11903                                  	;mov	bl,59 ; MSDOS 6.0
 11904 000019B1 B33B                    	MOV	BL,SF_ENTRY.size
 11905 000019B3 F6F3                    	DIV	BL
 11906                                  	;mov	[si+18h],al
 11907 000019B5 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11908 000019B8 5B                      	pop	bx			;restore bx
 11909                                  
 11910                                  SaveNoSFN:
 11911                                  	;mov	ax,[es:di+5]
 11912 000019B9 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11913 000019BD 243F                    	AND	AL,3Fh			; get real drive
 11914 000019BF 08D8                    	OR	AL,BL
 11915                                  	;mov	[si+19h],al
 11916 000019C1 884419                  	MOV	[SI+fcb_l_drive],AL
 11917                                  
 11918 000019C4 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11919 000019C8 40                      	INC	AX
 11920                                  	;mov	[es:di+15h],ax
 11921 000019C9 26894515                	MOV	[ES:DI+sf_LRU],AX
 11922 000019CD 7506                    	JNZ	short SimpleStuff
 11923                                  	
 11924                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11925                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11926                                  	
 11927                                  	;mov	bx,15h
 11928 000019CF BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11929 000019D2 E80500                  	call	ResetLRU
 11930                                  
 11931                                  	; Set new LRU to AX
 11932                                  SimpleStuff:
 11933 000019D5 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11934 000019D9 C3                      	retn
 11935                                  
 11936                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11937                                  ;----------------------------------------------------------------------------
 11938                                  ;
 11939                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11940                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11941                                  ;   at 0.
 11942                                  ;
 11943                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11944                                  ;		ES:DI point to SFT currently being updated
 11945                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11946                                  ;		AX has 8000h
 11947                                  ;   Registers modified: none
 11948                                  ;
 11949                                  ;----------------------------------------------------------------------------
 11950                                  ;
 11951                                  
 11952                                  	; 17/05/2019 - Retro DOS v4.0
 11953                                  ResetLRU:
 11954                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11955                                  	; DOSDATA
 11956                                  
 11957 000019DA B80080                  	MOV	AX,8000h
 11958 000019DD 06                      	push	es
 11959 000019DE 57                      	push	di
 11960                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 11961 000019DF 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 11962                                  	;mov	cx,[es:di+4]
 11963 000019E4 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11964                                  	;lea	di,[di+6]
 11965 000019E8 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11966                                  ovScan:
 11967 000019EB 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11968 000019EE 7703                    	JA	short ovLoop
 11969 000019F0 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11970                                  ovLoop:
 11971                                  	;;add	di,53	; MSDOS 3.3
 11972                                  	;add	di,59	; MSDOS 6.0	
 11973 000019F3 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 11974 000019F6 E2F3                    	LOOP	ovScan
 11975 000019F8 5F                      	pop	di
 11976 000019F9 07                      	pop	es
 11977 000019FA 268901                  	MOV	[ES:DI+BX],AX
 11978 000019FD C3                      	retn
 11979                                  
 11980                                  ;IF  0  ; We dont need this routine any more.
 11981                                  ;
 11982                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11983                                  ;----------------------------------------------------------------------------
 11984                                  ;
 11985                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11986                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 11987                                  ;   count here and fill in the appropriate field.
 11988                                  ;
 11989                                  ;   Inputs:	ES:DI point to SFT
 11990                                  ;   Outputs:	ES:DI has the open age field filled in.
 11991                                  ;		If open age has wraparound, we will have subtracted 8000h
 11992                                  ;		    from all open ages.
 11993                                  ;   Registers modified: AX
 11994                                  ;
 11995                                  ;----------------------------------------------------------------------------
 11996                                  ;
 11997                                  ;SetOpenAge:
 11998                                  ;	; 20/07/2018 - Retro DOS v3.0
 11999                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12000                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12001                                  ;
 12002                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12003                                  ;
 12004                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12005                                  ;	INC	AX
 12006                                  ;	;mov	[es:di+17h],ax
 12007                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12008                                  ;	JNZ	short SetDone
 12009                                  ;	;mov	bx,17h
 12010                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12011                                  ;	call	ResetLRU
 12012                                  ;SetDone:
 12013                                  ;	MOV	[CS:OpenLRU],AX
 12014                                  ;	retn
 12015                                  ;
 12016                                  ;ENDIF	; SetOpenAge no longer needed
 12017                                  
 12018                                  ; 21/07/2018 - Retro DOS v3.0
 12019                                  ; LRUFCB for MSDOS 6.0 !
 12020                                  
 12021                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12022                                  ;----------------------------------------------------------------------------
 12023                                  ;
 12024                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12025                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12026                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12027                                  ;
 12028                                  ;   Inputs:	none
 12029                                  ;   Outputs:	ES:DI point to SFT
 12030                                  ;		ThisSFT points to SFT
 12031                                  ;		SFT is zeroed
 12032                                  ;		Carry set of closes failed
 12033                                  ;   Registers modified: none
 12034                                  ;
 12035                                  ;----------------------------------------------------------------------------
 12036                                  ;
 12037                                  ; MSDOS 6.0
 12038                                  ;IF 0	; rewritten this routine
 12039                                  ;
 12040                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12041                                  ;	call	save_world
 12042                                  ;	
 12043                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12044                                  ; to find the lease recently used one that is younger than the open age.  We
 12045                                  ; operate be scanning the list n times finding the least age that is greater
 12046                                  ; or equal to the previous minimum age.
 12047                                  ;
 12048                                  ;   BP is the count of times we need to go through this loop.
 12049                                  ;   AX is the current acceptable minimum age to consider
 12050                                  ;
 12051                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12052                                  ;	XOR	AX,AX			; low = 0;
 12053                                  ;
 12054                                  ; If we've scanned the table n times, then we are done.
 12055                                  ;
 12056                                  ;lru1:
 12057                                  ;	CMP	bp,0			; while (k--) {
 12058                                  ;	JZ	short lru75
 12059                                  ;	DEC	bp
 12060                                  ;
 12061                                  ; Set up for scan.
 12062                                  ;
 12063                                  ;   AX is the minimum age for consideration
 12064                                  ;   BX is the minimum age found during the scan
 12065                                  ;   SI is the position of the entry that corresponds to BX
 12066                                  ;
 12067                                  ;	MOV	BX,-1			;     min = 0xffff;
 12068                                  ;	MOV	si,BX			;     pos = 0xffff;
 12069                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12070                                  ;	;mov	cx,[es:di+4]
 12071                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12072                                  ;	;lea	di,[di+6]
 12073                                  ;	LEA	DI,[DI+SFT.SFTable]
 12074                                  ;
 12075                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12076                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12077                                  ; are done.  In both cases, we use the found entry.
 12078                                  ;
 12079                                  ;lru2:
 12080                                  ;	cmp	word [es:di],0
 12081                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12082                                  ;	jz	short lru25
 12083                                  ;	;cmp	word [es:di],-1
 12084                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12085                                  ;	cmp	word [es:di],sf_busy
 12086                                  ;	jnz	short lru3
 12087                                  ;
 12088                                  ; The entry is usable without further scan.  Go and use it.
 12089                                  ;
 12090                                  ;lru25:
 12091                                  ;	MOV	si,DI			;	      pos = i;
 12092                                  ;	JMP	short lru11		;	      goto got;
 12093                                  ;
 12094                                  ; See if the entry is for the network or for the sharer.
 12095                                  ;
 12096                                  ;  If for the sharer or network then
 12097                                  ;	if the age < current minimum AND >= allowed minimum then
 12098                                  ;	    this entry becomes current minimum
 12099                                  ;
 12100                                  ;lru3:
 12101                                  ;	;test	word [es:di+5],8000h
 12102                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12103                                  ;					;	  if (!net[i]
 12104                                  ;	JNZ	short lru35
 12105                                  ;if installed
 12106                                  ;	call	CheckShare		;		&& !sharing)
 12107                                  ;	JZ	short lru5		;	  else
 12108                                  ;ENDIF
 12109                                  ;
 12110                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12111                                  ; current minimum.
 12112                                  ;
 12113                                  ;lru35:
 12114                                  ;	;mov	dx,[es:di+17h]
 12115                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12116                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12117                                  ;	JB	short lru5
 12118                                  ;	CMP	DX,BX
 12119                                  ;	JAE	short lru5		;	      age[i] < min) {
 12120                                  ;
 12121                                  ; entry is new minimum.  Remember his age.
 12122                                  ;
 12123                                  ;	mov	bx,DX			;	      min = age[i];
 12124                                  ;	mov	si,di			;	      pos = i;
 12125                                  ;
 12126                                  ; End of loop.	gp back for more
 12127                                  ;
 12128                                  ;lru5:
 12129                                  ;	;add	di,53
 12130                                  ;	add	di,SF_ENTRY.size
 12131                                  ;	loop	lru2			;	      }
 12132                                  ;
 12133                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12134                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12135                                  ; complete.  Go find LRU.
 12136                                  ;
 12137                                  ;lru6:	
 12138                                  ;	cmp	si,-1			; position not -1?
 12139                                  ;	jz	short lru75		; no, done with everything
 12140                                  ;	lea	ax,[bx+1]		; set new threshold age
 12141                                  ;	jmp	short lru1		; go and loop for more
 12142                                  ;lru65:	
 12143                                  ;	stc
 12144                                  ;	jmp	short LRUDead		;	  return -1;
 12145                                  ;
 12146                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12147                                  ; network entry. We now make a second pass through to find the LRU entry
 12148                                  ; that is local-no-share or has age >= AX
 12149                                  ;
 12150                                  ;lru75:
 12151                                  ;	mov	bx,-1			; min = 0xffff;
 12152                                  ;	mov	si,bx			; pos = 0xffff;
 12153                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12154                                  ;	;mov	cx,[es:di+4]
 12155                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12156                                  ;	;lea	di,[di+6]
 12157                                  ;	LEA	DI,[DI+SFT.SFTable]
 12158                                  ;
 12159                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12160                                  ; then check for lru.
 12161                                  ;
 12162                                  ;lru8:
 12163                                  ;	;test	word [es:di+5],8000h
 12164                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12165                                  ;	jnz	short lru85		; is for network, go check age
 12166                                  ;	call	CheckShare		; sharer here?
 12167                                  ;	jz	short lru86		; no, go check lru
 12168                                  ;
 12169                                  ; Network or sharer.  Check age
 12170                                  ;
 12171                                  ;lru85:
 12172                                  ;	;cmp	[es:di+17h],ax
 12173                                  ;	cmp	[es:di+sf_OpenAge],ax
 12174                                  ;	jb	short lru9		; age is before threshold, skip it
 12175                                  ;
 12176                                  ; Check LRU
 12177                                  ;
 12178                                  ;lru86:
 12179                                  ;	;cmp	[es:di+15h],bx
 12180                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12181                                  ;	jae	short lru9		; no, skip this
 12182                                  ;	mov	si,di			; remember position
 12183                                  ;	;mov	bx,[es:di+15h]
 12184                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12185                                  ;
 12186                                  ; Done with this entry, go back for more.
 12187                                  ;
 12188                                  ;lru9:
 12189                                  ;	;add	di, 53
 12190                                  ;	add	di,SF_ENTRY.size
 12191                                  ;	loop	lru8
 12192                                  ;
 12193                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12194                                  ; out. The conditions here are:
 12195                                  ;
 12196                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12197                                  ;
 12198                                  ;lru10:
 12199                                  ;	cmp	si,-1			; if no one f
 12200                                  ;	jz	short lru65		;     return -1;
 12201                                  ;lru11:
 12202                                  ;	mov	di,si
 12203                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12204                                  ;	MOV	[CS:THISSFT+2],ES
 12205                                  ;
 12206                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12207                                  ; is 0.
 12208                                  ;
 12209                                  ;	;test	word [es:di+5],8000h
 12210                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12211                                  ;	JNZ	short LRUClose
 12212                                  ;IF INSTALLED
 12213                                  ;	call	CheckShare
 12214                                  ;	JZ	short LRUDone
 12215                                  ;ENDIF
 12216                                  ;
 12217                                  ; Repeat close until ref count is 0
 12218                                  ;
 12219                                  ;LRUClose:
 12220                                  ;	push	ss
 12221                                  ;	pop	ds
 12222                                  ;	LES	DI,[THISSFT]
 12223                                  ;	cmp     word [es:di],0
 12224                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12225                                  ;	JZ	short LRUDone 		; nope, all done
 12226                                  ;	call	DOS_CLOSE
 12227                                  ;	jnc	short LRUClose		; no error => clean up
 12228                                  ;	;cmp	al,6
 12229                                  ;	cmp	al,error_invalid_handle
 12230                                  ;	jz	short LRUClose
 12231                                  ;	stc
 12232                                  ;	JMP	short LRUDead
 12233                                  ;LRUDone:
 12234                                  ;	XOR	AL,AL
 12235                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12236                                  ;
 12237                                  ;LRUDead:
 12238                                  ;	call	restore_world
 12239                                  ;	LES     DI,[CS:THISSFT]
 12240                                  ;	jnc	short LRUFCB_retn
 12241                                  ;LRUFCB_err:
 12242                                  ;	; mov	al, 23h	
 12243                                  ;	MOV	AL,error_FCB_unavailable
 12244                                  ;LRUFCB_retn:	
 12245                                  ;	retn:
 12246                                  ;
 12247                                  ;ENDIF	; LRUFCB has been rewritten below.
 12248                                  
 12249                                  ; 17/05/2019 - Retro DOS v4.0
 12250                                  ; LRUFCB for MSDOS 6.0 !
 12251                                  ;----------------------------------------------------------------------------
 12252                                  ;
 12253                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12254                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12255                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12256                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12257                                  ; optimize regeneration operations by keeping track of the current local
 12258                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12259                                  ; local SFT in the SFT Block.
 12260                                  ;
 12261                                  ; Inputs: al = 0 => Regenerate SFT operation
 12262                                  ;	    = 1 => Allocate new SFT for Open/Create
 12263                                  ;
 12264                                  ; Outputs: Carry clear
 12265                                  ;	 	es:di = Address of allocated SFT
 12266                                  ;	  	ThisSFT = Address of allocated SFT
 12267                                  ;
 12268                                  ;	  carry set if closes of net/Share files failed 
 12269                                  ;		al = error_FCB_unavailable
 12270                                  ;
 12271                                  ; Registers affected: None
 12272                                  ;
 12273                                  ;----------------------------------------------------------------------------
 12274                                  
 12275                                  ;LruFCB	PROC	NEAR
 12276                                  LRUFCB:
 12277                                  	; 17/05/2019 - Retro DOS v4.0
 12278                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12279                                  
 12280                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12281                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12282                                  
 12283 000019FE 06                      	push	es	; * (MSDOS 6.21)
 12284                                  	
 12285 000019FF E8A9EA                  	call	save_world
 12286                                  	
 12287                                  	;getdseg <ds>		;ds = DOSDATA
 12288 00001A02 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12289                                  
 12290 00001A07 08C0                    	or	al,al		;Check if regenerate allocation
 12291 00001A09 751A                    	jnz	short lru1	;Try to find SFT to use
 12292                                  
 12293                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12294                                  	; local SFT, just return that SFT to reuse
 12295                                  
 12296 00001A0B 8B3E[5C10]              	mov	di,[LocalSFT]
 12297 00001A0F 0B3E[5E10]              	or	di,[LocalSFT+2]	;is address == 0?
 12298 00001A13 7410                    	jz	short lru1	;invalid local SFT, find one
 12299                                  
 12300                                  	; We have found a valid local SFT. Recycle this SFT
 12301                                  
 12302 00001A15 C43E[5C10]              	les	di,[LocalSFT]
 12303                                  
 12304                                  gotlocalSFT:
 12305 00001A19 893E[9E05]              	mov	[THISSFT],di
 12306 00001A1D 8C06[A005]              	mov	[THISSFT+2],es
 12307 00001A21 F8                      	clc
 12308 00001A22 E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12309                                  
 12310                                  lru1:
 12311 00001A25 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12312                                  	;mov	cx,[es:di+4]
 12313 00001A29 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12314                                  	;lea	di,[di+6]
 12315 00001A2D 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12316                                  
 12317                                  	; We scan through all the SFTs scanning for a free one. It also 
 12318                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12319                                  	; bx = min. LRU for local SFTs
 12320                                  	; si = pos. of local SFT with min. LRU
 12321                                  	; dx = min. LRU for net/Share SFTs
 12322                                  	; bp = pos. of net/Share SFT with min. LRU
 12323                                  
 12324 00001A30 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12325 00001A33 89DE                    	mov	si,bx
 12326 00001A35 89DA                    	mov	dx,bx
 12327 00001A37 89DD                    	mov	bp,bx
 12328                                  
 12329                                  findSFT:
 12330                                  	;See if this SFT is a free one. If so, return it
 12331 00001A39 26830D00                	or	word [es:di],0
 12332                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12333 00001A3D 744D                    	jz	short gotSFT	;yes, SFT is free
 12334                                  	;;cmp	word [es:di],-1
 12335                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12336 00001A3F 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12337 00001A43 7447                    	jz	short gotSFT	;no, can use it
 12338                                  
 12339                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12340                                  	; used for a later regen.
 12341                                  
 12342                                  	; 16/12/2022
 12343                                  	; 08/11/2022
 12344                                  	;test	byte [es:di+6],80h
 12345 00001A45 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12346                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12347                                  	;;test	word [es:di+5],8000h
 12348                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12349 00001A4A 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12350                                  
 12351                                  ;IF installed
 12352 00001A4C E8255A                  	call	CheckShare	;Share present?
 12353                                  ;ENDIF
 12354 00001A4F 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12355                                  
 12356                                  	;Local SFT, register its address
 12357                                  
 12358                                  	; !!HACK!!!
 12359                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12360                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12361                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12362                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12363                                  	; out the code that previously existed at label 'gotSFT'
 12364                                  
 12365                                  hackpoint:
 12366 00001A51 893E[5C10]              	mov	[LocalSFT],di
 12367 00001A55 8C06[5E10]              	mov	[LocalSFT+2],es	;store local SFT address
 12368                                  
 12369 00001A59 08C0                    	or	al,al		;Is operation = REGEN?
 12370 00001A5B 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12371                                  
 12372                                  	;Get LRU for local files
 12373                                  	
 12374                                  	;cmp	[es:di+15h],bx
 12375 00001A5D 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12376 00001A61 7306                    	jae	short lru4	;no, skip 
 12377                                  
 12378                                  	;mov	bx,[es:di+15h]
 12379 00001A63 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12380 00001A67 89FE                    	mov	si,di		;store SFT position
 12381                                  
 12382                                  lru4:
 12383                                  	;add	di,59
 12384 00001A69 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12385 00001A6C E2CB                    	loop	findSFT
 12386                                  
 12387                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12388                                  	; available, we will reuse it instead of net/Share LRU
 12389                                  
 12390 00001A6E 89F7                    	mov	di,si
 12391 00001A70 83FEFF                  	cmp	si,-1		;local SFT available?
 12392 00001A73 7517                    	jnz	short gotSFT	;yes, return it
 12393                                  
 12394                                  	;No local SFT, see if we got a net/Share SFT
 12395                                  
 12396 00001A75 89EF                    	mov	di,bp
 12397 00001A77 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12398 00001A7A 7530                    	jnz	short gotnetSFT	;yes, return it
 12399                                  noSFT:
 12400                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12401                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12402                                  	; count is not maintained properly.
 12403                                  
 12404 00001A7C EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12405                                  
 12406                                  	; Handle the LRU for net/Share SFTs
 12407                                  lru5:
 12408                                  	;cmp	[es:di+15h],dx
 12409 00001A7E 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12410 00001A82 73E5                    	jae	short lru4	;no, skip 
 12411                                  
 12412                                  	;mov	dx,[es:di+15h]
 12413 00001A84 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12414                                  
 12415 00001A88 89FD                    	mov	bp,di		;store SFT position
 12416 00001A8A EBDD                    	jmp	short lru4	;continue with next SFT
 12417                                  
 12418                                  gotSFT:
 12419 00001A8C 08C0                    	or	al,al
 12420 00001A8E 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12421                                  
 12422                                  	; HACK!!!
 12423                                  	; The code here differs from the code at 'hackpoint' only in the 
 12424                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12425                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12426                                  	; has been commented out below and replaced by the code just above.
 12427                                  
 12428                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12429                                  ;
 12430                                  ;	or	al,al		  ;Regen?
 12431                                  ;	jnz	short notlocaluse ;yes, register it and return
 12432                                  ;
 12433                                  ;Register this SFT as a local one
 12434                                  ;
 12435                                  ;	mov	[LocalSFT],di
 12436                                  ;	mov	[LocalSFT+2],es
 12437                                  ;	jmp	gotlocalSFT	;return to caller
 12438                                  ;
 12439                                  ;notlocaluse:
 12440                                  
 12441                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12442                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12443                                  	; does not really know whether it is a local file or not. We 
 12444                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12445                                  	; registered as a local SFT that can be recycled.
 12446                                  
 12447 00001A90 8CC0                    	mov	ax,es
 12448 00001A92 393E[5C10]              	cmp	[LocalSFT],di		;Offset same?
 12449 00001A96 7506                    	jne	short notinvalid
 12450 00001A98 3906[5E10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12451 00001A9C 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12452                                  notinvalid:
 12453 00001A9E E978FF                  	jmp	gotlocalSFT
 12454                                  
 12455                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12456                                  	; Invalidate this variable i.e LocalSFT = NULL
 12457                                  
 12458                                  zerolocalSFT:
 12459 00001AA1 31C0                    	xor	ax,ax ; 0
 12460 00001AA3 A3[5C10]                	mov	[LocalSFT],ax
 12461 00001AA6 A3[5E10]                	mov	[LocalSFT+2],ax
 12462                                  
 12463 00001AA9 E96DFF                  	jmp	gotlocalSFT
 12464                                  
 12465                                  gotnetSFT:
 12466                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12467                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12468                                  	; LocalSFT variable
 12469                                  
 12470 00001AAC 08C0                    	or	al,al
 12471 00001AAE 7508                    	jnz	short closenet
 12472                                  
 12473 00001AB0 893E[5C10]              	mov	[LocalSFT],di
 12474 00001AB4 8C06[5E10]              	mov	[LocalSFT+2],es	;store local SFT address
 12475                                  closenet:
 12476 00001AB8 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12477 00001ABC 8C06[A005]              	mov	[THISSFT+2],es	
 12478                                  
 12479                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12480                                  	; count is 0.
 12481                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12482                                  	; recycled -- no need to check for this.
 12483                                  
 12484                                  LRUClose:
 12485 00001AC0 26833D00                	cmp	word [es:di],0
 12486                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12487 00001AC4 740C                    	jz	short LRUDone	; nope, all done
 12488                                  
 12489 00001AC6 E81415                  	call	DOS_CLOSE
 12490 00001AC9 73F5                    	jnc	short LRUClose	; no error => clean up
 12491                                  
 12492                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12493                                  	; error closing. Seems like we could have a potential infinite loop  
 12494                                  	; here. This has to be verified.
 12495                                  
 12496 00001ACB 3C06                    	cmp	al,error_invalid_handle ; 6
 12497 00001ACD 74F1                    	je	short LRUClose
 12498                                  errorbadSFT:
 12499 00001ACF F9                      	stc
 12500 00001AD0 EB05                    	JMP	short LRUDead
 12501                                  LRUDone:
 12502 00001AD2 30C0                    	XOR	AL,AL
 12503 00001AD4 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12504                                  
 12505                                  LRUDead:
 12506 00001AD7 E8BAE9                  	call	restore_world		; use macro
 12507                                  	
 12508 00001ADA 07                      	pop	es ; * (MSDOS 6.21)
 12509                                  
 12510                                  	;getdseg <es>
 12511 00001ADB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12512                                  
 12513 00001AE0 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12514                                  
 12515                                  	;;retnc
 12516                                  	;jc	short LruFCB_err
 12517                                  	;retn
 12518                                  
 12519                                  	; 16/12/2022
 12520                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12521 00001AE5 7302                    	jnc	short LruFCB_retn
 12522                                  	;jc	short LruFCB_err
 12523                                  	;retn
 12524                                  		
 12525                                  LruFCB_err:
 12526 00001AE7 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12527                                  LruFCB_retn:
 12528 00001AE9 C3                      	retn
 12529                                  	
 12530                                  ;LruFCB	ENDP
 12531                                  
 12532                                  ; 17/05/2019 - Retro DOS v4.0
 12533                                  
 12534                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12535                                  
 12536                                  ; --------------------------------------------------------------------------
 12537                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12538                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12539                                  ; to copy the name to different destinations
 12540                                  ;
 12541                                  ; Inputs: ds:si = source string
 12542                                  ;	 es:di = destination string
 12543                                  ;	 cx = length of string
 12544                                  ;
 12545                                  ; Outputs: String copied to destination
 12546                                  ;
 12547                                  ; Registers affected: cx,di,si
 12548                                  ; --------------------------------------------------------------------------
 12549                                  
 12550                                  RegenCopyName:
 12551                                  CopyName:
 12552 00001AEA AC                      	lodsb			;load character
 12553 00001AEB E87936                  	call	UCase		; convert char to upper case
 12554                                  StuffChar2:
 12555 00001AEE AA                      	STOSB			;store converted character
 12556 00001AEF E2F9                    	LOOP	CopyName	;
 12557                                  DoneName:
 12558 00001AF1 C3                      	retn
 12559                                  
 12560                                  ; --------------------------------------------------------------------------
 12561                                  
 12562                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12563                                  FCBRegen:
 12564                                  	; called from SFTFromFCB. SS already DOSDATA
 12565                                  
 12566                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12567                                  	; we do not fill, size we do no fill, position we do not fill,
 12568                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12569                                  
 12570                                  	;mov	al,[si+19h]
 12571 00001AF2 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12572                                  
 12573                                  	; We discriminate based on the first two bits in the reserved field.
 12574                                  	
 12575                                  	;test	al,80h
 12576 00001AF5 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12577 00001AF7 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12578                                  
 12579                                  	; The FCB is for a network or a sharing based system. At this point 
 12580                                  	; we have already closed the SFT for this guy and reconnection is 
 12581                                  	; impossible.
 12582                                  	;
 12583                                  	; Remember that he may have given us a FCB with bogus information in
 12584                                  	; it. Check to see if sharing is present or if the redir is present.
 12585                                  	; If either is around, presume that we have cycled out the FCB and 
 12586                                  	; give the hard error. Otherwise, just return with carry set.
 12587                                  
 12588 00001AF9 E87859                  	call	CheckShare		; test for sharer
 12589 00001AFC 7509                    	JNZ	short RegenFail		; yep, fail this.
 12590                                  	
 12591                                  	;mov	ax,1100h
 12592 00001AFE B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12593 00001B01 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12594                                  			; Return: AL = 00h  not installed, OK to install
 12595                                  			; 01h  not installed, not OK to install
 12596                                  			; FFh  installed
 12597 00001B03 08C0                    	OR	AL,AL			; is it there?
 12598 00001B05 740C                    	JZ	short RegenDead		; no, just fail the operation
 12599                                  RegenFail:
 12600                                  	; 17/05/2019 - Retro DOS v4.0
 12601                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12602 00001B07 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12603                                  
 12604                                  	;cmp	ah,10h
 12605 00001B0B 80FC10                  	cmp	AH,FCB_CLOSE
 12606 00001B0E 7403                    	jz	short RegenDead
 12607 00001B10 E89301                  	call	FCBHardErr		; massive hard error.
 12608                                  RegenDead:
 12609 00001B13 F9                      	STC				; carry set
 12610                                  FCBRegen_retn:
 12611 00001B14 C3                      	retn
 12612                                  
 12613                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12614                                  	; so fail the operation.
 12615                                  
 12616                                  RegenNoSharing:
 12617 00001B15 E85C59                  	call	CheckShare		; Sharing around?
 12618 00001B18 75ED                    	JNZ	short RegenFail
 12619                                  	
 12620                                  	; Find an SFT for this guy.
 12621                                  	
 12622                                  	; 17/05/2019 - Retro DOS v4.0
 12623                                  
 12624                                  	; MSDOS 3.3
 12625                                  	;call	LRUFCB
 12626                                  	;jc	short FCBRegen_retn
 12627                                  	
 12628                                  	; MSDOS 6.0
 12629 00001B1A 50                      	push	ax
 12630 00001B1B B000                    	mov	al,0			;indicate it is a regen operation
 12631 00001B1D E8DEFE                  	call	LRUFCB
 12632 00001B20 58                      	pop	ax
 12633 00001B21 72F1                    	jc	short FCBRegen_retn
 12634                                  
 12635                                  	;mov	word [es:di+2],8002h
 12636 00001B23 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12637 00001B29 243F                    	AND	AL,3Fh			; get drive number for flags
 12638 00001B2B 98                      	CBW
 12639                                  	;or	ax,4000h
 12640 00001B2C 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12641                                  
 12642                                  	; The bits field consists of the upper two bits (dirty and device) 
 12643                                  	; from the SFT and the low 4 bits from the open mode.
 12644                                  
 12645                                  	;mov	cl,[si+1Ah]
 12646 00001B2F 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12647 00001B32 88CD                    	MOV	CH,CL
 12648 00001B34 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12649 00001B37 08E8                    	OR	AL,CH
 12650                                  	;and	cl,0Fh
 12651 00001B39 80E10F                  	AND	CL,access_mask		; get the mode bits
 12652                                  	;mov	[es:di+2],cl
 12653 00001B3C 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12654                                  	;mov	[es:di+5],ax
 12655 00001B40 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12656                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12657 00001B44 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12658                                  	;mov	[es:di+31h],ax
 12659 00001B48 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12660 00001B4C 1E                      	push	ds
 12661 00001B4D 56                      	push	si
 12662 00001B4E 06                      	push	es
 12663 00001B4F 57                      	push	di
 12664 00001B50 16                      	push	ss
 12665 00001B51 07                      	pop	es
 12666 00001B52 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12667                                  
 12668 00001B55 B90800                  	MOV	CX,8
 12669 00001B58 46                      	INC	SI			; Skip past drive byte to name in FCB
 12670                                  
 12671                                  	; MSDOS 3.3
 12672                                  ;RegenCopyName:
 12673                                  	;lodsb
 12674                                  	;call	UCase
 12675                                  	;stosb
 12676                                  	;loop	RegenCopyName
 12677                                  
 12678                                  	; MSDOS 6.0
 12679 00001B59 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12680                                  
 12681 00001B5C 16                      	push	ss	; SS is DOSDATA
 12682 00001B5D 1F                      	pop	ds
 12683                                  
 12684                                  	;mov	byte [ATTRIB],16h
 12685 00001B5E C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12686                                  					; Must set this to something interesting
 12687                                  					; to call DEVNAME.
 12688 00001B63 E86327                  	call	DEVNAME 		; check for device
 12689 00001B66 5E                      	pop	si
 12690 00001B67 07                      	pop	es
 12691 00001B68 5E                      	pop	si
 12692 00001B69 1F                      	pop	ds
 12693 00001B6A 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12694                                  
 12695                                  	; Device found. We can ignore disk-specific info
 12696                                  
 12697                                  	;mov	[es:di+5],bh
 12698 00001B6C 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12699                                  	;mov	byte [es:di+4],0
 12700 00001B70 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12701                                  					; SS override
 12702                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12703 00001B75 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12704                                  	;mov	[es:di+7],si
 12705 00001B7A 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12706                                  	;mov	[es:di+9],ds
 12707 00001B7E 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12708 00001B82 C3                      	retn				; carry is clear
 12709                                  
 12710                                  RegenDeadJ:
 12711 00001B83 EB8E                    	JMP	short RegenDead
 12712                                  
 12713                                  	; File found. Just copy in the remaining pieces.
 12714                                  
 12715                                  RegenFileNoSharing:
 12716                                  	;mov	ax,[es:di+5]
 12717 00001B85 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12718 00001B89 83E03F                  	AND	AX,03Fh
 12719 00001B8C 1E                      	push	ds
 12720 00001B8D 56                      	push	si
 12721 00001B8E E86B4F                  	call	FIND_DPB
 12722                                  	;mov	[es:di+7],si
 12723 00001B91 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12724                                  	;mov	[es:di+9],ds
 12725 00001B95 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12726 00001B99 5E                      	pop	si
 12727 00001B9A 1F                      	pop	ds
 12728 00001B9B 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12729                                  					; indicator was bogus
 12730                                  	;mov	ax,[si+1Dh]
 12731 00001B9D 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12732                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12733                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12734 00001BA0 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12735                                  
 12736                                  	; MSDOS 6.0
 12737                                  
 12738                                  	; SR;
 12739                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12740                                  	; number
 12741                                  
 12742                                  	;mov	al,[si+18h]
 12743 00001BA4 8A4418                  	mov	al,[si+fcb_sfn]
 12744 00001BA7 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12745 00001BA9 88C4                    	mov	ah,al
 12746 00001BAB D0C4                    	rol	ah,1
 12747 00001BAD D0E8                    	shr	al,1
 12748 00001BAF 08E0                    	or	al,ah
 12749 00001BB1 243F                    	and	al,03Fh		;mask off unused bits
 12750                                  	;mov	[es:di+4],al
 12751 00001BB3 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12752                                  
 12753                                  	; SR;
 12754                                  	; Update the higher word of the directory sector from the FCB
 12755                                  
 12756                                  	;;mov	al,[si+18h]
 12757 00001BB7 8A4418                  	mov	al,[si+fcb_sfn]
 12758 00001BBA 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12759 00001BBC 28E4                    	sub	ah,ah
 12760                                  	;mov	[es:di+1Dh],ax
 12761 00001BBE 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12762                                  
 12763                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12764                                  	;mov	ax,[si+1Bh]
 12765 00001BC2 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12766                                  	;mov	[es:di+0Bh],ax
 12767 00001BC5 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12768                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12769                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12770 00001BC9 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12771                                  	;mov	al,[si+1Fh]
 12772 00001BCD 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12773                                  	;mov  	[es:di+1Fh],al
 12774 00001BD0 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12775                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12776 00001BD4 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12777                                  					; Existing FCB entries would be
 12778                                  					; flushed unnecessarily because of
 12779                                  					; check in CheckFCB of the ref_count.
 12780                                  					; July 22/85 - BAS
 12781                                  	;lea	si,[si+1]
 12782 00001BD7 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12783                                  	;lea	di,[di+20h]
 12784 00001BDA 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12785                                  	;mov	cx,11
 12786 00001BDD B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12787                                  	
 12788                                  	; MSDOS 6.0
 12789 00001BE0 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12790                                  	
 12791                                  	; MSDOS 3.3
 12792                                  ;RegenCopyName2:
 12793                                  	;lodsb
 12794                                  	;call    UCase
 12795                                  	;stosb
 12796                                  	;loop    RegenCopyName2
 12797                                  
 12798 00001BE3 F8                      	clc
 12799 00001BE4 C3                      	retn
 12800                                  
 12801                                  ; 17/05/2019 - Retro DOS v4.0
 12802                                  
 12803                                  ;**	BlastSFT - FIll SFT with Garbage
 12804                                  ; --------------------------------------------------------------------------
 12805                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12806                                  ;	various garbage values to put into the SFT.  I don't know why,
 12807                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12808                                  ;	necessary to show that the SFT is free after filling it.
 12809                                  ;
 12810                                  ;	ENTRY	(es:di) = address of SFT
 12811                                  ;		(al) = fill character
 12812                                  ;	EXIT	(ax) = -1
 12813                                  ;		'C' clear
 12814                                  ;	USES	AX, CX, Flags
 12815                                  
 12816                                  BlastSFT:
 12817 00001BE5 57                      	push	di
 12818                                  	;mov	cx,53 ; MSDOS 3.3
 12819                                  	;mov	cx,59 ; MSDOS 6.0
 12820 00001BE6 B93B00                  	mov	cx,SF_ENTRY.size
 12821 00001BE9 F3AA                    	rep	stosb
 12822 00001BEB 5F                      	pop	di
 12823 00001BEC 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12824 00001BEE 268905                  	mov	[es:di],ax
 12825                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12826                                  	;mov	[es:di+15h],ax
 12827 00001BF1 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12828 00001BF5 48                      	dec	ax	; -1					    ;
 12829                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12830 00001BF6 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12831                                  BlastSFT_retn:
 12832 00001BFA C3                      	retn				; return with 'C' clear     ;
 12833                                  
 12834                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12835                                  ; --------------------------------------------------------------------------
 12836                                  ;
 12837                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12838                                  ;   regenerated.
 12839                                  ;
 12840                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12841                                  ;		AL is SFT index
 12842                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12843                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12844                                  ;   Registers modified: AX and BX
 12845                                  ;
 12846                                  ; --------------------------------------------------------------------------
 12847                                  
 12848                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12849                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12850                                  CheckFCB:
 12851                                  		
 12852                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12853                                  
 12854                                  	; MSDOS 3.3
 12855                                  
 12856                                  	; LES	DI,[CS:SFTFCB]
 12857                                  
 12858                                  	; MSDOS 6.0
 12859                                  	
 12860                                  	; SR;
 12861                                  	; We check if the given FCB is for a local file. If so, we return a 
 12862                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12863                                  
 12864                                  	;test	byte [si+19h],0C0h
 12865 00001BFB F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12866 00001BFF 744F                    	jz	short BadSFT		;Local file, return bad SFT
 12867 00001C01 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12868                                  
 12869                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12870                                  	;cmp	[es:di+4],al
 12871 00001C06 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12872 00001C0A 7244                    	JC	short BadSFT
 12873                                  	;;mov	bl,53 ; MSDOS 3.3
 12874                                  	;mov	bl,59 ; MSDOS 6.0
 12875 00001C0C B33B                    	MOV	BL,SF_ENTRY.size
 12876 00001C0E F6E3                    	MUL	BL
 12877                                  	;lea	di,[di+6]
 12878 00001C10 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12879 00001C13 01C7                    	ADD	DI,AX
 12880                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12881 00001C15 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12882                                  	;cmp	[es:di+31h],ax
 12883 00001C19 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12884 00001C1D 7531                    	JNZ	short BadSFT		; must match process
 12885 00001C1F 26833D00                	cmp	word [es:di],0
 12886                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12887 00001C23 742B                    	JZ	short BadSFT		; must also be in use
 12888                                  	;mov	al,[si+19h]
 12889 00001C25 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12890                                  	;test	al,80h
 12891 00001C28 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12892 00001C2A 7430                    	JZ	short CheckNoShare	; No. try local or device
 12893                                  
 12894                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12895                                  	; FCBSHARE is a superset of FCBNETWORK.
 12896                                  
 12897 00001C2C 50                      	PUSH	AX
 12898                                  	;and	al,0C0h
 12899 00001C2D 24C0                    	AND	AL,FCBMASK
 12900                                  	;cmp	al,0C0h
 12901 00001C2F 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12902 00001C31 58                      	POP	AX
 12903 00001C32 751E                    	JNZ	short CheckNet		; yes
 12904                                  ;
 12905                                  ;----- In share support -----
 12906                                  ;
 12907                                  	;call	far [cs:JShare+(11*4)]
 12908 00001C34 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12909 00001C39 7215                    	JC	short BadSFT
 12910 00001C3B EB06                    	JMP	SHORT CheckD
 12911                                  ;
 12912                                  ;----- End in share support -----
 12913                                  ;
 12914                                  	; 09/11/2022
 12915                                  	; (There is not any procedure/sub
 12916                                  	;  which calls or jumps to CheckFirClus here)
 12917                                  	;;;
 12918                                  CheckFirClus:
 12919                                  	;cmp     bx,[es:di+0Bh]
 12920                                  	; 07/12/2022
 12921 00001C3D 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12922 00001C41 750D                    	JNZ	short BadSFT
 12923                                  	;;;
 12924                                  CheckD: 
 12925 00001C43 243F                    	AND	AL,3Fh
 12926                                  	;mov	ah,[es:di+5]
 12927 00001C45 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12928 00001C49 80E43F                  	AND	AH,3Fh
 12929 00001C4C 38C4                    	CMP	AH,AL
 12930                                  	; 16/12/2022
 12931 00001C4E 74AA                    	jz	short BlastSFT_retn	; carry is clear
 12932                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12933                                  	;jnz	short BadSFT
 12934                                  ;CheckD_retn:
 12935                                  	;retn
 12936                                  BadSFT: 
 12937 00001C50 F9                      	STC
 12938 00001C51 C3                      	retn
 12939                                  				
 12940                                  CheckNet:
 12941                                  	; 17/05/2019 - Retro DOS v4.0
 12942                                  	
 12943                                  ;----- In net support -----
 12944                                  
 12945                                  	; MSDOS 3.3
 12946                                  	;;mov	ax,[si+1Ah]
 12947                                  	;mov	ax,[si+fcb_net_handle]
 12948                                  	;;cmp	ax,[es:di+1Dh]
 12949                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12950                                  	;jnz	short BadSFT
 12951                                  	;;cmp	ax,[es:di+19h]
 12952                                  	;cmp	ax,[ES:DI+sf_netid]
 12953                                  	;jnz     short BadSFT
 12954                                  	;;mov	ax,[si+1Eh]
 12955                                  	;mov	ax,[si+fcb_l_attr]
 12956                                  	;;cmp	ax,[es:di+1Bh]
 12957                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 12958                                  	;jnz     short BadSFT
 12959                                  
 12960                                  	; MSDOS 6.0
 12961                                  	;mov	ax,[si+1Ch]
 12962 00001C52 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 12963                                  	; 09/11/2022
 12964                                  	;cmp	ax,[es:di+0Bh] 
 12965 00001C55 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 12966 00001C59 75F5                    	JNZ	short BadSFT
 12967                                  
 12968                                  ;----- END In net support -----
 12969                                  
 12970                                  CheckNet_retn:
 12971 00001C5B C3                      	retn
 12972                                  
 12973                                  CheckNoShare:
 12974                                  
 12975                                  ; 16/12/2022
 12976                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 12977                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 12978                                  ;	;test	al,40h
 12979                                  ;	test	AL,FCBDEVICE		; Device?
 12980                                  ;	;jnz	short $+2 ; 09/11/2022
 12981                                  ;	JNZ	short CheckNoShareDev 	; Yes
 12982                                  
 12983                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 12984                                  	;;mov	bx,[si+1Dh]
 12985                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 12986                                  	;;cmp	bx,[es:di+1Dh]
 12987                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 12988                                  	;jnz	short BadSFT
 12989                                  	;;mov	bl,[si+1Fh]
 12990                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 12991                                  	;;cmp	bl,[es:di+1Fh]
 12992                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 12993                                  	;jnz	short BadSFT
 12994                                  	;;mov	bl,[si+1Ah]
 12995                                  	;MOV	bl,[SI+fcb_nsl_bits]
 12996                                  	;;mov	bh,[es:di+5]
 12997                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 12998                                  	;xor	bh,bl
 12999                                  	;and	bh,0C0h
 13000                                  	;jnz	short BadSFT
 13001                                  	;;xor	bl,[es:di+2]
 13002                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13003                                  	;and	bl,0Fh
 13004                                  	;jnz	short BadSFT
 13005                                  	;push	di
 13006                                  	;push	si
 13007                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13008                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13009                                  	;;lea	si,[si+1]
 13010                                  	;LEA	SI,[SI+SYS_FCB.name]
 13011                                  	;;mov	cx,11
 13012                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13013                                  	;repe	cmpsb
 13014                                  	;pop	si
 13015                                  	;pop	di
 13016                                  	;jnz	short BadSFT
 13017                                  	;;mov	bx,[si+1Bh]
 13018                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13019                                  	;jmp	short CheckFirClus
 13020                                  
 13021                                  	; MSDOS 6.0
 13022                                  
 13023                                  	; SR;
 13024                                  	; The code below to match a local FCB with its SFT can no longer be
 13025                                  	; used. We just return a no-match status. This check is done right
 13026                                  	; at the top.
 13027                                  
 13028                                  CheckNoShareDev:
 13029                                  	;mov	bx,[si+1Ah]
 13030 00001C5C 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13031                                  	;cmp	bx,[es:di+7]
 13032 00001C5F 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13033 00001C63 75EB                    	JNZ	short BadSFT
 13034                                  	;mov	bx,[si+1Ch]
 13035 00001C65 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13036                                  	;cmp	bx,[es:di+9]
 13037 00001C68 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13038 00001C6C 75E2                    	JNZ	short BadSFT
 13039 00001C6E EBD3                    	JMP	short CheckD
 13040                                  
 13041                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13042                                  ;----------------------------------------------------------------------------
 13043                                  ;
 13044                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13045                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13046                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13047                                  ;	with PID
 13048                                  ;
 13049                                  ;   Inputs:	DS:SI point to FCB
 13050                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13051                                  ;		Carry clear -> OK ES:DI -> SFT
 13052                                  ;		Carry set -> error in ax
 13053                                  ;   Registers modified: ES,DI, AX
 13054                                  ;
 13055                                  ;----------------------------------------------------------------------------
 13056                                  
 13057                                  SFTFromFCB:
 13058                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13059                                  
 13060                                  	; 17/05/2019 - Retro DOS v4.0
 13061                                  
 13062 00001C70 50                      	push	ax
 13063 00001C71 53                      	push	bx
 13064                                  	;mov	al,[si+18h]
 13065 00001C72 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13066 00001C75 E883FF                  	call	CheckFCB
 13067 00001C78 5B                      	pop	bx
 13068 00001C79 58                      	pop	ax
 13069                                  	;MOV	[CS:THISSFT],DI		; SS override
 13070                                  	;MOV	[CS:THISSFT+2],ES
 13071 00001C7A 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13072 00001C7F 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13073 00001C84 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13074                                  	
 13075                                  	; 09/11/2022 (MSDOS 5.0)
 13076                                  	; 31/05/2019
 13077 00001C86 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13078 00001C87 E821E8                  	call	save_world
 13079 00001C8A E865FE                  	call	FCBRegen
 13080 00001C8D E804E8                  	call	restore_world		; use macro restore world
 13081 00001C90 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13082                                  
 13083                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13084 00001C91 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13085 00001C95 72C4                    	jc	short CheckNet_retn
 13086                                  
 13087                                  Set_SFT: 
 13088                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13089 00001C97 36C43E[9E05]            	les	di,[ss:THISSFT]
 13090                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13091 00001C9C 36FF36[3C03]            	push	word [ss:PROC_ID]
 13092                                  	;pop	word [es:di+31h]
 13093 00001CA1 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13094 00001CA5 C3                      	retn				; carry is clear
 13095                                  
 13096                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13097                                  ;----------------------------------------------------------------------------
 13098                                  ;
 13099                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13100                                  ;	unavailable FCB.
 13101                                  ;
 13102                                  ;   Inputs:	none.
 13103                                  ;   Outputs:	none.
 13104                                  ;   Registers modified: all
 13105                                  ;
 13106                                  ;----------------------------------------------------------------------------
 13107                                  
 13108                                  FCBHardErr:
 13109                                  	; 17/05/2019 - Retro DOS v4.0
 13110 00001CA6 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13111                                  	;
 13112                                  	;mov	ax,23h
 13113 00001CAB B82300                  	MOV	AX,error_FCB_unavailable
 13114                                  	;;mov	byte [cs:ALLOWED],8
 13115                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13116 00001CAE 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13117                                  	
 13118                                  	;LES	BP,[CS:THISDPB]
 13119 00001CB4 26C42E[8A05]            	les	bp,[es:THISDPB]
 13120                                  	
 13121 00001CB9 BF0100                  	MOV	DI,1			; Fake some registers
 13122 00001CBC 89F9                    	MOV	CX,DI
 13123                                  	;mov	dx,[es:bp+0Bh]
 13124 00001CBE 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13125 00001CC2 E86137                  	call	HARDERR
 13126 00001CC5 F9                      	STC
 13127 00001CC6 C3                      	retn
 13128                                  
 13129                                  ;============================================================================
 13130                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13131                                  ;============================================================================
 13132                                  ; 21/07/2018 - Retro DOS v3.0
 13133                                  ; 17/05/2019 - Retro DOS v4.0
 13134                                  
 13135                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13136                                  ;
 13137                                  ;	GetRR
 13138                                  ;	GetExtent
 13139                                  ;	SetExtent
 13140                                  ;	GetExtended
 13141                                  ;	GetRecSize
 13142                                  ;	FCBIO
 13143                                  ;	$FCB_OPEN
 13144                                  ;	$FCB_CREATE
 13145                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13146                                  ;	$FCB_RANDOM_READ_BLOCK
 13147                                  ;	$FCB_SEQ_READ
 13148                                  ;	$FCB_SEQ_WRITE
 13149                                  ;	$FCB_RANDOM_READ
 13150                                  ;	$FCB_RANDOM_WRITE
 13151                                  ;
 13152                                  ;	Revision history:
 13153                                  ;
 13154                                  ;		Created: ARR 4 April 1983
 13155                                  ;			 MZ  6 June  1983 completion of functions
 13156                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13157                                  ;				  times.  Change so successive closes work by
 13158                                  ;				  always returning OK.	Also, detect I/O to
 13159                                  ;				  already closed FCB and return EOF.
 13160                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13161                                  ;				  out of sft into FCB for reconnection
 13162                                  ;
 13163                                  ;	    A000   version 4.00	Jan. 1988
 13164                                  
 13165                                  ; Defintions for FCBOp flags
 13166                                  
 13167                                  RANDOM	equ 2				; random operation
 13168                                  FCBREAD equ 4				; doing a read
 13169                                  BLOCK	equ 8				; doing a block I/O
 13170                                  
 13171                                  ;Break <GetRR - return the random record field in DX:AX>
 13172                                  ;---------------------------------------------------------------------------
 13173                                  ;
 13174                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13175                                  ;	from the FCB pointed to by DS:SI
 13176                                  ;
 13177                                  ;   Inputs:	DS:SI point to an FCB
 13178                                  ;		BX has record size
 13179                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13180                                  ;   Registers modified: none
 13181                                  ;---------------------------------------------------------------------------
 13182                                  
 13183                                  GetRR:
 13184                                  	;mov	ax,[si+21h]
 13185 00001CC7 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13186                                  	;mov	dx,[si+23h]
 13187 00001CCA 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13188 00001CCD 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13189 00001CD0 7202                    	JB	short GetRRBye
 13190 00001CD2 30F6                    	XOR	DH,DH
 13191                                  GetRRBye:
 13192 00001CD4 C3                      	retn
 13193                                  
 13194                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13195                                  ;---------------------------------------------------------------------------
 13196                                  ;
 13197                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13198                                  ;	NR fields in the FCB.
 13199                                  ;
 13200                                  ;   Inputs:	DS:SI - point to FCB
 13201                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13202                                  ;   Registers modified: none
 13203                                  ;---------------------------------------------------------------------------
 13204                                  
 13205                                  GetExtent:
 13206                                  	;mov	al,[si+20h]
 13207 00001CD5 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13208                                  	;mov	dx,[si+0Ch]
 13209 00001CD8 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13210 00001CDB D0E0                    	SHL	AL,1
 13211 00001CDD D1EA                    	SHR	DX,1
 13212 00001CDF D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13213 00001CE1 88D4                    	MOV	AH,DL
 13214 00001CE3 88F2                    	MOV	DL,DH
 13215 00001CE5 30F6                    	XOR	DH,DH
 13216 00001CE7 C3                      	retn
 13217                                  
 13218                                  ;Break <SetExtent - update the extent/NR field>
 13219                                  ;---------------------------------------------------------------------------
 13220                                  ;
 13221                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13222                                  ;	fields
 13223                                  ;
 13224                                  ;   Inputs:	DS:SI point to FCB
 13225                                  ;		DX:AX is a record location in file
 13226                                  ;   Outputs:	Extent/NR fields are filled in
 13227                                  ;   Registers modified: CX
 13228                                  ;---------------------------------------------------------------------------
 13229                                  
 13230                                  SetExtent:
 13231 00001CE8 50                      	push	ax
 13232 00001CE9 52                      	push	dx
 13233 00001CEA 89C1                    	MOV	CX,AX
 13234 00001CEC 247F                    	AND	AL,7FH			; next rec field
 13235                                  	;mov	[si+20h],al
 13236 00001CEE 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13237 00001CF1 80E180                  	AND	CL,80H			; save upper bit
 13238 00001CF4 D1E1                    	SHL	CX,1
 13239 00001CF6 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13240 00001CF8 88E8                    	MOV	AL,CH
 13241 00001CFA 88D4                    	MOV	AH,DL
 13242                                  	;mov	[si+0Ch], ax
 13243 00001CFC 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13244 00001CFF 5A                      	pop	dx
 13245 00001D00 58                      	pop	ax
 13246 00001D01 C3                      	retn
 13247                                  
 13248                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13249                                  ;---------------------------------------------------------------------------
 13250                                  ;
 13251                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13252                                  ;
 13253                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13254                                  ;   Outputs:	DS:SI point to the FCB part
 13255                                  ;		zeroflag set if not extended fcb
 13256                                  ;   Registers modified: SI
 13257                                  ;---------------------------------------------------------------------------
 13258                                  
 13259                                  GetExtended:
 13260 00001D02 89D6                    	MOV	SI,DX			; point to Something
 13261 00001D04 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13262 00001D07 7503                    	JNZ	short GetBye		; not there
 13263 00001D09 83C607                  	ADD	SI,7			; point to FCB
 13264                                  GetBye:
 13265 00001D0C 39D6                    	CMP	SI,DX			; set condition codes
 13266                                  getextd_retn:
 13267 00001D0E C3                      	retn
 13268                                  
 13269                                  ;Break <GetRecSize - return in BX the FCB record size>
 13270                                  ;---------------------------------------------------------------------------
 13271                                  ;
 13272                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13273                                  ;
 13274                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13275                                  ;   Outputs:	BX contains the record size
 13276                                  ;   Registers modified: None
 13277                                  ;---------------------------------------------------------------------------
 13278                                  
 13279                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13280                                  GetRecSize:
 13281                                  	;mov	bx,[si+0Eh]
 13282 00001D0F 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13283 00001D12 09DB                    	OR	BX,BX			; is it nul?
 13284 00001D14 74F8                    	jz	short getextd_retn
 13285 00001D16 BB8000                  	MOV	BX,128			; use default size
 13286                                  	;mov	[si+0Eh],bx
 13287 00001D19 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13288 00001D1C C3                      	retn
 13289                                  
 13290                                  ;BREAK <FCBIO - do internal FCB I/O>
 13291                                  ;---------------------------------------------------------------------------
 13292                                  ;
 13293                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13294                                  ;
 13295                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13296                                  ;		DS:DX point to FCB
 13297                                  ;		CX may have count of number of records to xfer
 13298                                  ;   Outputs:	AL has error code
 13299                                  ;   Registers modified: all
 13300                                  ;---------------------------------------------------------------------------
 13301                                  
 13302                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13303                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13304                                  FCBIO:
 13305                                  
 13306                                  FEOF	EQU	1
 13307                                  FTRIM	EQU	2
 13308                                  
 13309                                  %define	FCBErr	byte [bp-1]  ; byte	
 13310                                  %define	cRec	word [bp-3]  ; word	
 13311                                  ;%define RecPos	word [bp-7]  ; dword
 13312                                  %define RecPosL	word [bp-7]  ; word
 13313                                  %define RecPosH	word [bp-5]  ; word
 13314                                  %define	RecSize	word [bp-9]  ; word
 13315                                  ;%define bPos	word [bp-13] ; dword
 13316                                  %define bPosL	word [bp-13] ; word
 13317                                  %define bPosH	word [bp-11] ; word
 13318                                  %define cByte	word [bp-15] ; word	
 13319                                  %define cResult word [bp-17] ; word	
 13320                                  %define	cRecRes	word [bp-19] ; word
 13321                                  %define	FCBOp	byte [bp-20] ; byte
 13322                                  
 13323                                  	;Enter
 13324                                  
 13325 00001D1D 55                      	push	bp
 13326 00001D1E 89E5                    	mov	bp,sp
 13327 00001D20 83EC14                  	sub	sp,20
 13328                                  	;mov	[bp-20],al
 13329 00001D23 8846EC                  	MOV	FCBOp,AL
 13330                                  	;mov	byte [bp-1],0
 13331 00001D26 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13332 00001D2A E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13333                                  	;test	byte [bp-20],8
 13334 00001D2D F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13335 00001D31 7503                    	JNZ	short GetPos
 13336 00001D33 B90100                  	MOV	CX,1			;	cRec = 1;
 13337                                  GetPos:
 13338                                  	;mov	[bp-3],cx
 13339 00001D36 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13340 00001D39 E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13341 00001D3C E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13342                                  	;mov	[bp-9],bx
 13343 00001D3F 895EF7                  	MOV	RecSize,BX
 13344                                  	;test	byte [bp-20],2
 13345 00001D42 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13346 00001D46 7403                    	JZ	short GetRec
 13347 00001D48 E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13348                                  GetRec:
 13349                                  	;mov	[bp-7],ax
 13350 00001D4B 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13351                                  	;mov	[bp-5],dx
 13352 00001D4E 8956FB                  	MOV	RecPosH,DX
 13353 00001D51 E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13354                                  	;mov	ax,[bp-5]
 13355 00001D54 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13356 00001D57 F7E3                    	MUL	BX
 13357 00001D59 89C7                    	MOV	DI,AX
 13358                                  	;mov	ax,[bp-7]
 13359 00001D5B 8B46F9                  	MOV	AX,RecPosL
 13360 00001D5E F7E3                    	MUL	BX
 13361 00001D60 01FA                    	ADD	DX,DI
 13362                                  	;mov	[bp-13],ax
 13363 00001D62 8946F3                  	MOV	bPosL,AX
 13364                                  	;mov	[bp-11],dx
 13365 00001D65 8956F5                  	MOV	bPosH,DX
 13366                                  	;mov	ax,[bp-3]
 13367 00001D68 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13368 00001D6B F7E3                    	MUL	BX
 13369                                  	;mov	[bp-15],ax
 13370 00001D6D 8946F1                  	MOV	cByte,AX
 13371                                  
 13372                                  ;hkn; 	SS override
 13373 00001D70 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13374 00001D75 83D200                  	ADC	DX,0
 13375 00001D78 7419                    	JZ	short DoOper
 13376                                  	;mov	byte [bp-1],2
 13377 00001D7A C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13378                                  
 13379                                  ;hkn; 	SS override
 13380 00001D7E 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13381 00001D82 F7D8                    	NEG	AX
 13382 00001D84 7501                    	JNZ	short DoDiv
 13383 00001D86 48                      	DEC	AX
 13384                                  DoDiv:
 13385 00001D87 31D2                    	XOR	DX,DX
 13386 00001D89 F7F3                    	DIV	BX
 13387                                  	;mov	[bp-3],ax
 13388 00001D8B 8946FD                  	MOV	cRec,AX
 13389 00001D8E F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13390                                  	;mov	[bp-15],ax
 13391 00001D90 8946F1                  	MOV	cByte,AX		;	}
 13392                                  DoOper:
 13393 00001D93 31DB                    	XOR	BX,BX
 13394                                  	;mov	[bp-17],bx
 13395 00001D95 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13396                                  	;cmp	[bp-15],bx
 13397 00001D98 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13398 00001D9B 7506                    	JNZ	short DoGetExt
 13399                                  	;test	byte [bp-1],2
 13400 00001D9D F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13401                                  	;JZ	short DoGetExt
 13402                                  	;JMP	short SkipOp
 13403                                  	; 16/12/2022
 13404 00001DA1 7576                    	jnz	short SkipOp
 13405                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13406                                  	;JZ	short DoGetExt
 13407                                  	;JMP	short SkipOp
 13408                                  DoGetExt:
 13409 00001DA3 E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13410 00001DA6 730F                    	JNC	short ContinueOp
 13411                                  FCBDeath:
 13412 00001DA8 E8F8E8                  	call	FCB_RET_ERR		; signal error, map for extended
 13413                                  	;mov	word [bp-19],0
 13414 00001DAB C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13415                                  	;mov	byte [bp-1],1
 13416 00001DB0 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13417 00001DB4 E9EF00                  	JMP	FCBSave 		; bam!
 13418                                  ContinueOp:
 13419                                  	;mov	ax,[si+10h]
 13420 00001DB7 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13421                                  	;mov	[es:di+11h],ax
 13422 00001DBA 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13423                                  	;mov	ax,[si+12h]
 13424 00001DBE 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13425                                  	;mov	[es:di+13h],ax
 13426 00001DC1 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13427                                  	;mov	ax,[bp-13]
 13428 00001DC5 8B46F3                  	MOV	AX,bPosL
 13429                                  	;mov	dx,[bp-11]
 13430 00001DC8 8B56F5                  	MOV	DX,bPosH
 13431                                  	;mov	[es:di+15h],ax
 13432 00001DCB 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13433                                  	;xchg	dx,[es:di+17h]
 13434 00001DCF 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13435 00001DD3 52                      	PUSH	DX			; save away Open age.
 13436                                  	;mov	cx,[bp-15]
 13437 00001DD4 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13438                                  
 13439                                  ;hkn; DOS_Read is in DOSCODE
 13440 00001DD7 BF[A033]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13441                                  	;test	byte [bp-20],4
 13442 00001DDA F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13443 00001DDE 7503                    	JNZ	short DoContext
 13444                                  
 13445                                  ;hkn; DOS_Write is in DOSCODE
 13446 00001DE0 BF[C935]                	MOV	DI,DOS_WRITE
 13447                                  DoContext:
 13448 00001DE3 55                      	push	bp
 13449 00001DE4 1E                      	push	ds
 13450 00001DE5 56                      	push	si
 13451                                  
 13452                                  ;hkn; SS is DOSDATA
 13453 00001DE6 16                      	push	ss
 13454 00001DE7 1F                      	pop	ds
 13455                                  
 13456                                  ;; Fix for disk full
 13457 00001DE8 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13458                                  	
 13459 00001DEA 5E                      	pop	si
 13460 00001DEB 1F                      	pop	ds
 13461 00001DEC 5D                      	pop	bp
 13462 00001DED 72B9                    	JC	short FCBDeath
 13463                                  	
 13464 00001DEF 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13465 00001DF5 740A                    	JZ	short NODSKFULL
 13466 00001DF7 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13467                                  	;mov	byte [bp-1],1 
 13468 00001DFD C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13469                                  NODSKFULL:
 13470                                  ;; Fix for disk full
 13471                                  	;mov	[bp-17],cx
 13472 00001E01 894EEF                  	MOV	cResult,CX
 13473 00001E04 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13474                                  	;pop	word [es:di+17h]	
 13475 00001E07 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13476                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13477                                  	;mov	ax,[es:di+11h]
 13478 00001E0B 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13479                                  	;mov	[si+10h],ax
 13480 00001E0F 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13481                                  	;mov	ax,[es:di+13h]
 13482 00001E12 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13483                                  	;mov	[si+12h],ax
 13484 00001E16 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13485                                  					;	}
 13486                                  SkipOp:
 13487                                  	;mov	ax,[bp-17]
 13488 00001E19 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13489 00001E1C 31D2                    	XOR	DX,DX
 13490                                  	;div	word [bp-9]
 13491 00001E1E F776F7                  	DIV	RecSize
 13492                                  	;mov	[bp-19],ax
 13493 00001E21 8946ED                  	MOV	cRecRes,AX
 13494                                  	;add	[bp-7],ax
 13495 00001E24 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13496                                  	;adc	word [bp-5],0
 13497 00001E27 8356FB00                	ADC	RecPosH,0
 13498                                  
 13499                                  ; If we have not gotten the expected number of records, we signal an EOF
 13500                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13501                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13502                                  ; do we.
 13503                                  
 13504                                  	;cmp	ax,[bp-3]
 13505 00001E2B 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13506 00001E2E 7411                    	JZ	short TryBlank
 13507                                  	;test	byte [bp-20],4
 13508 00001E30 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13509 00001E34 7507                    	JNZ	short SetEOF
 13510                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13511                                  	; MSDOS 3.3
 13512                                  	;;test	word [es:di+5],80h
 13513                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13514                                  	;JNZ	short TryBlank
 13515                                  	; MSDOS 5.0 & MSDOS 6.0
 13516                                  	;test	byte [es:di+5],80h
 13517 00001E36 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13518 00001E3B 7504                    	jnz	short TryBlank
 13519                                  
 13520                                  SetEOF:
 13521                                  	;mov	byte [bp-1],1
 13522 00001E3D C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13523                                  TryBlank:				;
 13524 00001E41 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13525 00001E43 7426                    	JZ	short SetExt
 13526                                  	;add	word [bp-7],1
 13527 00001E45 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13528                                  	;adc	word [bp-5],0
 13529 00001E49 8356FB00                	ADC	RecPosH,0
 13530                                  	;test	byte [bp-20],4
 13531 00001E4D F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13532 00001E51 7418                    	JZ	short SetExt
 13533                                  	;inc	word [bp-19]
 13534 00001E53 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13535                                  	;mov	byte [bp-1],3
 13536 00001E56 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13537                                  	;mov	cx,[bp-9]
 13538 00001E5A 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13539 00001E5D 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13540 00001E5F 30C0                    	XOR	AL,AL
 13541                                  ;hkn; 	SS override
 13542 00001E61 36C43E[2C03]            	les     di,[ss:DMAADD]
 13543                                  	;add	di,[bp-17]
 13544 00001E66 037EEF                  	ADD	DI,cResult
 13545 00001E69 F3AA                    	REP	STOSB			;   }	}
 13546                                  SetExt:
 13547                                  	;mov	dx,[bp-5]
 13548 00001E6B 8B56FB                  	MOV	DX,RecPosH
 13549                                  	;mov	ax,[bp-7]
 13550 00001E6E 8B46F9                  	MOV	AX,RecPosL
 13551                                  	;test	byte [bp-20],2
 13552 00001E71 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13553 00001E75 7406                    	JZ	short DoSetExt
 13554                                  	;test	byte [bp-20],8
 13555 00001E77 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13556 00001E7B 7403                    	JZ	short TrySetRR
 13557                                  DoSetExt:
 13558 00001E7D E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13559                                  TrySetRR:
 13560                                  	;test	byte [bp-20],8
 13561 00001E80 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13562 00001E84 740F                    	JZ	short TryReturn
 13563                                  	;mov	[si+21h],ax
 13564 00001E86 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13565                                  	;mov	[si+23h],dl
 13566 00001E89 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13567                                  	;cmp	word [si+0Eh],64
 13568 00001E8C 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13569 00001E90 7303                    	JAE	short TryReturn
 13570                                  	;mov	[si+24h],dh
 13571 00001E92 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13572                                  TryReturn: 
 13573                                  	;test	byte [bp-20],4
 13574 00001E95 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13575 00001E99 750B                    	JNZ	short FCBSave
 13576 00001E9B 1E                      	push	ds			;	FCB->FDate = date;
 13577 00001E9C E8ABEC                  	call	DATE16			;	FCB->FTime = time;
 13578 00001E9F 1F                      	pop	ds
 13579                                  	;mov	[si+14h],ax
 13580 00001EA0 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13581                                  	;mov	[si+16h],dx
 13582 00001EA3 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13583                                  FCBSave: 
 13584                                  	;test	byte [bp-20],8
 13585 00001EA6 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13586 00001EAA 7409                    	jz	short DoReturn
 13587                                  	;mov	cx,[bp-19]
 13588 00001EAC 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13589 00001EAF E818E6                  	call    Get_User_Stack
 13590                                  	;mov	[si+4],cx
 13591 00001EB2 894C04                  	MOV	[SI+user_env.user_CX],CX
 13592                                  DoReturn:
 13593                                  	;mov	al,[bp-1]
 13594 00001EB5 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13595                                  	;Leave	
 13596 00001EB8 89EC                    	mov     sp,bp
 13597 00001EBA 5D                      	pop     bp
 13598 00001EBB C3                      	retn
 13599                                  
 13600                                  ; 22/07/2018 - Retro DOS v3.0
 13601                                  
 13602                                  ;Break <$FCB_Open - open an old-style FCB>
 13603                                  ;---------------------------------------------------------------------------
 13604                                  ;
 13605                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13606                                  ;	for us and asked to have the rest filled in.
 13607                                  ;
 13608                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13609                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13610                                  ;		FCB has the following fields filled in:
 13611                                  ;		    Time/Date Extent/NR Size
 13612                                  ;---------------------------------------------------------------------------
 13613                                  
 13614                                  _$FCB_OPEN:			; System call 15
 13615                                  
 13616 00001EBC B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13617                                  
 13618                                  ;hkn; DOS_Open is in DOSCODE
 13619 00001EBF B9[212C]                	MOV	CX,DOS_OPEN
 13620                                  
 13621                                  ; The following is common code for Creation and openning of FCBs. AX is
 13622                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13623                                  ; the FCB
 13624                                  
 13625                                  DoAccess:
 13626 00001EC2 1E                      	push	ds
 13627 00001EC3 52                      	push	dx
 13628 00001EC4 51                      	push	cx
 13629 00001EC5 50                      	push	ax			; save FCB pointer away
 13630                                  
 13631                                  ;hkn; 	OpenBuf is in DOSDATA
 13632 00001EC6 BF[BE03]                	MOV	DI,OPENBUF
 13633 00001EC9 E87B4D                  	call	TransFCB		; crunch the fcb
 13634 00001ECC 58                      	pop	ax
 13635 00001ECD 59                      	pop	cx
 13636 00001ECE 5A                      	pop	dx
 13637 00001ECF 1F                      	pop	ds			; get fcb
 13638 00001ED0 7303                    	JNC	short FindFCB		; everything seems ok
 13639                                  FCBOpenErr:
 13640                                  	; AL has error code
 13641 00001ED2 E9CEE7                  	jmp	FCB_RET_ERR
 13642                                  FindFCB:
 13643 00001ED5 E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13644                                  
 13645                                  	; 17/05/2019 - Retro DOS v4.0
 13646                                  
 13647                                  	; MSDOS 3.3
 13648                                  	;call	LRUFCB
 13649                                  	;jc	short HardMessage
 13650                                  
 13651                                  	; MSDOS 6.0
 13652 00001ED8 50                      	push	ax
 13653 00001ED9 B001                    	mov	al,1			;indicate Open/Create operation
 13654 00001EDB E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13655 00001EDE 58                      	pop	ax
 13656 00001EDF 722A                    	jc	short HardMessage
 13657                                  	
 13658                                  	;mov	word [es:di+2],8000h
 13659 00001EE1 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13660 00001EE7 1E                      	push	ds
 13661 00001EE8 56                      	push	si	
 13662 00001EE9 53                      	push	bx			; save fcb pointer
 13663 00001EEA 89CE                    	MOV	SI,CX
 13664                                  
 13665                                  ;hkn; SS is DOSDATA
 13666 00001EEC 16                      	push	ss
 13667 00001EED 1F                      	pop	ds			    ; let DOS_Open see variables
 13668 00001EEE FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13669 00001EF0 5B                      	pop	bx
 13670 00001EF1 5E                      	pop	si
 13671 00001EF2 1F                      	pop	ds			; get fcb
 13672                                  
 13673                                  ;hkn; SS override
 13674 00001EF3 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13675 00001EF8 7318                    	JNC	short FCBOK		; operation succeeded
 13676                                  failopen:
 13677 00001EFA 50                      	PUSH	AX
 13678 00001EFB B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13679 00001EFD E8E5FC                  	call	BlastSFT
 13680 00001F00 58                      	POP	AX
 13681                                  	;cmp	ax,4
 13682 00001F01 83F804                  	CMP	AX,error_too_many_open_files
 13683 00001F04 7405                    	JZ	short HardMessage
 13684                                  	;cmp	ax,24h
 13685 00001F06 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13686 00001F09 7505                    	jnz	short DeadFCB
 13687                                  HardMessage:
 13688 00001F0B 50                      	PUSH	AX
 13689 00001F0C E897FD                  	call	FCBHardErr
 13690 00001F0F 58                      	POP	AX
 13691                                  DeadFCB:
 13692                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13693                                  	;jmp	FCB_RET_ERR
 13694 00001F10 EBC0                    	jmp	short FCBOpenErr
 13695                                  FCBOK:
 13696                                  	; MSDOS 6.0
 13697 00001F12 E8D2F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13698 00001F15 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13699 00001F17 E85A55                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13700 00001F1A 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13701                                  ;SR;
 13702                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13703                                  ; LocalSFT variable to reflect this.
 13704                                  
 13705 00001F1C 36893E[5C10]            	mov	[ss:LocalSFT],di
 13706 00001F21 368C06[5E10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13707                                  ;;SR;
 13708                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13709                                  ;;
 13710                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13711                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13712                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13713                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13714                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13715                                  
 13716                                  FCBOK2:
 13717                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13718 00001F26 26FF05                  	inc	word [es:di]
 13719                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13720 00001F29 E802FA                  	call	SaveFCBInfo
 13721                                  	; MSDOS 3.3
 13722                                  	;call	SetOpenAge
 13723                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13724                                  	;test	word [es:di+5],80h
 13725                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13726 00001F2C 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13727 00001F31 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13728 00001F33 8A04                    	MOV	AL,[SI]			; get drive byte
 13729 00001F35 E8964C                  	call	GETTHISDRV		; convert
 13730                                  	;INC	AL
 13731                                  	; 17/12/2022
 13732 00001F38 40                      	inc	ax
 13733 00001F39 8804                    	MOV	[SI],AL			; stash in good drive letter
 13734                                  FCBNoDrive:
 13735                                  	;mov	word [si+0Eh],128
 13736 00001F3B C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13737                                  
 13738                                  	;mov	ax,[es:di+0Dh]
 13739 00001F40 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13740                                  	;mov	[si+16h],ax
 13741 00001F44 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13742                                  	;mov	ax,[es:di+0Fh]
 13743 00001F47 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13744                                  	;mov	[si+14h],ax
 13745 00001F4B 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13746                                  	;mov	ax,[es:di+11h]
 13747 00001F4E 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13748                                  	;mov	[si+10h],ax
 13749 00001F52 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13750                                  	;mov	ax,[es:di+13h]
 13751 00001F55 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13752                                  	;mov	[si+12h],ax
 13753 00001F59 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13754 00001F5C 31C0                    	XOR	AX,AX			; convenient zero
 13755                                  	;mov	[si+0Ch],ax
 13756 00001F5E 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13757                                  
 13758                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13759                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13760                                  
 13761                                  ;hkn; 	SS override
 13762 00001F61 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13763                                  	;mov	ah,[es:di+4]
 13764 00001F66 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13765                                  OpenScan:
 13766                                  	;cmp	al,[si+18h]
 13767 00001F6A 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13768 00001F6D 7407                    	JZ	short SkipCheck
 13769 00001F6F 50                      	push	ax			; preserve count
 13770 00001F70 E888FC                  	call	CheckFCB		; do they match
 13771 00001F73 58                      	pop	ax			; get count back
 13772 00001F74 7309                    	JNC	short OpenFound		; found a match!
 13773                                  SkipCheck:
 13774 00001F76 FEC0                    	INC	AL			; advance to next FCB
 13775 00001F78 38E0                    	CMP	AL,AH			; table full?
 13776 00001F7A 75EE                    	JNZ	short OpenScan		; no, go for more
 13777                                  OpenDone:
 13778 00001F7C 30C0                    	xor	al,al			; return success
 13779 00001F7E C3                      	retn
 13780                                  
 13781                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13782                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13783                                  ; Consider:
 13784                                  ;
 13785                                  ;   open (foo)	delete (foo) open (bar)
 13786                                  ;
 13787                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13788                                  ; foo even though foo is no longer needed; this is due to the server closing
 13789                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13790                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13791                                  ; bar and subsequent I/O would be lost to the redirector.
 13792                                  ;
 13793                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13794                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13795                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13796                                  ; around. This will allow us to access the same file through multiple network
 13797                                  ; connections and NOT prematurely terminate when the ref count on one
 13798                                  ; connection goes to zero.
 13799                                  
 13800                                  OpenFound:
 13801                                  	;mov	[si+18h],al
 13802 00001F7F 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13803 00001F82 26FF05                  	inc	word [es:di]
 13804                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13805                                  					; remember this new invocation
 13806 00001F85 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13807                                  	;mov	[es:di+15h],ax
 13808 00001F89 26894515                	MOV	[ES:DI+sf_LRU],AX
 13809                                  ;
 13810                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13811                                  ; blast it to prevent other reuse.
 13812                                  ;
 13813 00001F8D 16                      	push	ss
 13814 00001F8E 1F                      	pop	ds
 13815 00001F8F C43E[9E05]              	LES	DI,[THISSFT]
 13816 00001F93 26FF0D                  	dec	word [es:di]
 13817                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13818                                  					; free the newly allocated SFT
 13819 00001F96 E81355                  	call	ShareEnd
 13820 00001F99 B043                    	MOV	AL,'C'	 ; 43h
 13821 00001F9B E847FC                  	call	BlastSFT
 13822 00001F9E EBDC                    	JMP	short OpenDone
 13823                                  
 13824                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13825                                  ;----------------------------------------------------------------------------
 13826                                  ;
 13827                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13828                                  ;	FCB for us and asked to have the rest filled in.
 13829                                  ;
 13830                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13831                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13832                                  ;		FCB has the following fields filled in:
 13833                                  ;		    Time/Date Extent/NR Size
 13834                                  ;----------------------------------------------------------------------------
 13835                                  
 13836                                  _$FCB_CREATE:		; System call 22
 13837                                  
 13838                                  ;hkn; DOS_Create is in DOSCODE
 13839 00001FA0 B9[F72A]                	MOV	CX,DOS_CREATE		; routine to call
 13840 00001FA3 31C0                    	XOR	AX,AX			; attributes to create
 13841 00001FA5 E85AFD                  	call	GetExtended		; get extended FCB
 13842 00001FA8 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13843 00001FAA 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13844                                  DoAccessJ:
 13845 00001FAD E912FF                  	JMP	DoAccess		; do dirty work
 13846                                  
 13847                                  ; 22/07/2018 - Retro DOS v3.0
 13848                                  
 13849                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13850                                  ;----------------------------------------------------------------------------
 13851                                  ;
 13852                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13853                                  ;	and write a number of blocks from it.
 13854                                  ;
 13855                                  ;   Inputs:	DS:DX point to an FCB
 13856                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13857                                  ;		AL <> 0 Not enough room on disk for the output
 13858                                  ;
 13859                                  ;----------------------------------------------------------------------------
 13860                                  
 13861                                  _$FCB_RANDOM_WRITE_BLOCK:
 13862                                  	;mov	AL,0Ah	
 13863 00001FB0 B00A                    	MOV	AL,RANDOM+BLOCK
 13864 00001FB2 E968FD                  	JMP	FCBIO
 13865                                  
 13866                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13867                                  ;----------------------------------------------------------------------------
 13868                                  ;
 13869                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13870                                  ;	and read a number of blocks from it.
 13871                                  ;
 13872                                  ;   Inputs:	DS:DX point to an FCB
 13873                                  ;   Outputs:	AL = error codes defined above
 13874                                  ;
 13875                                  ;----------------------------------------------------------------------------
 13876                                  
 13877                                  _$FCB_RANDOM_READ_BLOCK:
 13878                                  	;mov	AL,0Eh	
 13879 00001FB5 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13880 00001FB7 E963FD                  	JMP	FCBIO
 13881                                  
 13882                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13883                                  ;----------------------------------------------------------------------------
 13884                                  ;
 13885                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13886                                  ;	memory
 13887                                  ;
 13888                                  ;   Inputs:	DS:DX point to an FCB
 13889                                  ;   Outputs:	AL = error codes defined above
 13890                                  ;
 13891                                  ;----------------------------------------------------------------------------
 13892                                  
 13893                                  _$FCB_SEQ_READ:
 13894                                  	;mov	AL,4	
 13895 00001FBA B004                    	MOV	AL,FCBREAD
 13896 00001FBC E95EFD                  	JMP	FCBIO
 13897                                  
 13898                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13899                                  ;----------------------------------------------------------------------------
 13900                                  ;
 13901                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13902                                  ;	file
 13903                                  ;
 13904                                  ;   Inputs:	DS:DX point to an FCB
 13905                                  ;   Outputs:	AL = error codes defined above
 13906                                  ;
 13907                                  ;----------------------------------------------------------------------------
 13908                                  
 13909                                  _$FCB_SEQ_WRITE:
 13910 00001FBF B000                    	MOV	AL,0
 13911 00001FC1 E959FD                  	jmp	FCBIO
 13912                                  
 13913                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13914                                  ;----------------------------------------------------------------------------
 13915                                  ;
 13916                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13917                                  ;	record from it.
 13918                                  ;
 13919                                  ;   Inputs:	DS:DX point to an FCB
 13920                                  ;   Outputs:	AL = error codes defined above
 13921                                  ;
 13922                                  ;----------------------------------------------------------------------------
 13923                                  
 13924                                  _$FCB_RANDOM_READ:
 13925                                  	;mov	AL,6	
 13926 00001FC4 B006                    	MOV	AL,RANDOM+FCBREAD
 13927 00001FC6 E954FD                  	jmp	FCBIO			; single block
 13928                                  
 13929                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13930                                  ;----------------------------------------------------------------------------
 13931                                  ;
 13932                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13933                                  ;	a record to it.
 13934                                  ;
 13935                                  ;   Inputs:	DS:DX point to an FCB
 13936                                  ;   Outputs:	AL = error codes defined above
 13937                                  ;
 13938                                  ;----------------------------------------------------------------------------
 13939                                  
 13940                                  _$FCB_RANDOM_WRITE:
 13941                                  	;mov	AL,2	
 13942 00001FC9 B002                    	MOV	AL,RANDOM
 13943 00001FCB E94FFD                  	jmp	FCBIO
 13944                                  
 13945                                  ;============================================================================
 13946                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13947                                  ;============================================================================
 13948                                  ; 22/07/2018 - Retro DOS v3.0
 13949                                  ; 17/05/2019 - Retro DOS v4.0
 13950                                  
 13951                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 13952                                  
 13953                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13954                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 13955                                  
 13956                                  ;**	Search.asm
 13957                                  ;----------------------------------------------------------------------------
 13958                                  ;	Directory search system calls.
 13959                                  ;	These will be passed direct text of the pathname from the user. 
 13960                                  ;	They will need to be passed through the macro expander prior to
 13961                                  ;	being sent through the low-level stuff. 
 13962                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 13963                                  ;
 13964                                  ;	$Dir_Search_First	  written
 13965                                  ;	$Dir_Search_Next	  written
 13966                                  ;	$Find_First	  written
 13967                                  ;	$Find_Next		  written
 13968                                  ;	PackName		  written
 13969                                  ;
 13970                                  ;	Modification history:
 13971                                  ;
 13972                                  ;	  Created: ARR 4 April 1983
 13973                                  
 13974                                  ;----------------------------------------------------------------------------
 13975                                  ; Procedure Name : $DIR_SEARCH_FIRST
 13976                                  ;
 13977                                  ; Inputs:
 13978                                  ;	DS:DX Points to unopenned FCB
 13979                                  ; Function:
 13980                                  ;	Directory is searched for first matching entry and the directory
 13981                                  ;	entry is loaded at the disk transfer address
 13982                                  ; Returns:
 13983                                  ;	AL = -1 if no entries matched, otherwise 0
 13984                                  ;----------------------------------------------------------------------------
 13985                                  
 13986                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 13987                                  
 13988                                  _$DIR_SEARCH_FIRST:
 13989 00001FCE 368916[A605]            	MOV	[SS:THISFCB],DX
 13990 00001FD3 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 13991 00001FD8 89D6                    	MOV	SI,DX
 13992 00001FDA 803CFF                  	CMP	BYTE [SI],0FFH
 13993 00001FDD 7503                    	JNZ	short NORMFCB4
 13994 00001FDF 83C607                  	ADD	SI,7			; Point to drive select byte
 13995                                  NORMFCB4:
 13996 00001FE2 FF34                    	push	word [SI]		; Save original drive byte for later
 13997                                  
 13998 00001FE4 16                      	push	ss
 13999 00001FE5 07                      	pop	es			; get es to address DOSGroup
 14000                                  
 14001 00001FE6 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14002 00001FE9 E85B4C                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14003 00001FEC 7304                    	JNC	short SearchIt		; no error, go and look
 14004 00001FEE 5B                      	pop	bx			; Clean stack
 14005                                  
 14006                                  ; Error code is in AX
 14007                                  
 14008                                  	; 09/11/2022
 14009                                  dcf_errj:
 14010 00001FEF E9B1E6                  	jmp	FCB_RET_ERR		; error
 14011                                  
 14012                                  SearchIt:
 14013 00001FF2 16                      	push	ss
 14014 00001FF3 1F                      	pop	ds			; get ready for search
 14015 00001FF4 FF36[2C03]              	push	word [DMAADD]
 14016 00001FF8 FF36[2E03]              	push	word [DMAADD+2]
 14017 00001FFC C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14018 00002002 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14019                                  	; MSDOS 3.3
 14020                                  	;call	DOS_SEARCH_FIRST
 14021                                  	; MSDOS 6.0
 14022 00002006 E88501                  	call	GET_FAST_SEARCH		; search
 14023 00002009 8F06[2E03]              	pop	word [DMAADD+2]
 14024 0000200D 8F06[2C03]              	pop	word [DMAADD]
 14025 00002011 7303                    	JNC	short SearchSet		; no error, transfer info
 14026 00002013 5B                      	pop	bx			; Clean stack
 14027                                  
 14028                                  ; Error code is in AX
 14029                                  
 14030                                  	; 09/11/2022
 14031                                  	;jmp	FCB_RET_ERR
 14032 00002014 EBD9                    	jmp	short dcf_errj
 14033                                  
 14034                                  ; The search was successful (or the search-next). We store the information
 14035                                  ; into the user's FCB for continuation.
 14036                                  
 14037                                  SearchSet:
 14038 00002016 BE[BE04]                	MOV	SI,SEARCHBUF
 14039 00002019 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14040 0000201D F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14041 00002022 7403                    	JZ	short NORMFCB1
 14042 00002024 83C707                  	ADD	DI,7			; Point past the extension
 14043                                  NORMFCB1:
 14044 00002027 5B                      	pop	bx			; Get original drive byte
 14045 00002028 08DB                    	OR	BL,BL
 14046 0000202A 7506                    	JNZ	short SearchDrv
 14047 0000202C 8A1E[3603]              	MOV	BL,[CURDRV]
 14048 00002030 FEC3                    	INC	BL
 14049                                  SearchDrv:
 14050 00002032 AC                      	LODSB				; Get correct search contin drive byte
 14051 00002033 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14052 00002035 47                      	INC	DI
 14053                                  	;STOSB				; Store the correct "user" drive byte
 14054                                  					;  at the start of the search info
 14055 00002036 B90A00                  	MOV	CX,20/2
 14056 00002039 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14057 0000203B 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14058                                  					;   byte to AL
 14059 0000203D AA                      	STOSB				; Search contin drive byte at end of
 14060                                  					;   contin info
 14061 0000203E C43E[2C03]              	LES	DI,[DMAADD]
 14062 00002042 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14063 00002047 740D                    	JZ	short NORMFCB2
 14064 00002049 B0FF                    	MOV	AL,0FFh
 14065 0000204B AA                      	STOSB
 14066 0000204C FEC0                    	INC	AL
 14067                                  	;MOV	CX,5
 14068                                  	; 17/12/2022
 14069 0000204E B105                    	mov	cl,5
 14070 00002050 F3AA                    	REP	STOSB
 14071 00002052 A0[6D05]                	MOV	AL,[SATTRIB]
 14072 00002055 AA                      	STOSB
 14073                                  NORMFCB2:
 14074 00002056 88D8                    	MOV	AL,BL			; User Drive byte
 14075 00002058 AA                      	STOSB
 14076                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14077                                  	; 17/12/2022
 14078 00002059 B110                    	mov	cl,16
 14079 0000205B F3A5                    	REP	MOVSW
 14080 0000205D E940E6                  	jmp	FCB_RET_OK
 14081                                  
 14082                                  ;----------------------------------------------------------------------------
 14083                                  ;
 14084                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14085                                  ;
 14086                                  ; Inputs:
 14087                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14088                                  ; Function:
 14089                                  ;	Directory is searched for the next matching entry and the directory
 14090                                  ;	entry is loaded at the disk transfer address
 14091                                  ; Returns:
 14092                                  ;	AL = -1 if no entries matched, otherwise 0
 14093                                  ;----------------------------------------------------------------------------
 14094                                  
 14095                                  _$DIR_SEARCH_NEXT:
 14096 00002060 368916[A605]            	MOV	[SS:THISFCB],DX
 14097 00002065 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14098 0000206A 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14099 00002070 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14100                                  
 14101 00002076 16                      	push	ss
 14102 00002077 07                      	pop	es
 14103                                  
 14104 00002078 BF[BE04]                	MOV	DI,SEARCHBUF
 14105                                  
 14106 0000207B 89D6                    	MOV	SI,DX
 14107 0000207D 803CFF                  	CMP	BYTE [SI],0FFh
 14108 00002080 750D                    	JNZ	short NORMFCB6
 14109 00002082 83C606                  	ADD	SI,6
 14110 00002085 AC                      	LODSB
 14111                                  
 14112 00002086 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14113 0000208A 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14114                                  NORMFCB6:
 14115 0000208F AC                      	LODSB				; Get original user drive byte
 14116 00002090 50                      	push	ax			; Put it on stack
 14117 00002091 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14118 00002094 AA                      	STOSB				; Put in correct place
 14119 00002095 B90A00                  	MOV	CX,20/2
 14120 00002098 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14121                                  
 14122 0000209A 16                      	push	ss
 14123 0000209B 1F                      	pop	ds
 14124                                  
 14125 0000209C FF36[2C03]              	push	word [DMAADD]
 14126 000020A0 FF36[2E03]              	push	word [DMAADD+2]
 14127 000020A4 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14128 000020AA 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14129 000020AE E8270E                  	call	DOS_SEARCH_NEXT 	; Find it
 14130 000020B1 8F06[2E03]              	pop	word [DMAADD+2]
 14131 000020B5 8F06[2C03]              	pop	word [DMAADD]
 14132 000020B9 7203                    	JC	short SearchNoMore
 14133 000020BB E958FF                  	JMP	SearchSet		; Ok set return
 14134                                  
 14135                                  SearchNoMore:
 14136 000020BE C43E[A605]              	LES	DI,[THISFCB]
 14137 000020C2 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14138 000020C7 7403                    	JZ	short NORMFCB8
 14139 000020C9 83C707                  	ADD	DI,7			; Point past the extension
 14140                                  NORMFCB8:
 14141 000020CC 5B                      	pop	bx			; Get original drive byte
 14142 000020CD 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14143                                  					;  at the right spot
 14144                                  ; error code is in AX
 14145                                  
 14146 000020D0 E9D0E5                  	jmp	FCB_RET_ERR
 14147                                  
 14148                                  ; 17/05/2019 - Retro DOS v4.0
 14149                                  
 14150                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14151                                  
 14152                                  ;---------------------------------------------------------------------------
 14153                                  ;
 14154                                  ;   Procedure Name : $FIND_FIRST
 14155                                  ; 
 14156                                  ;   Assembler usage:
 14157                                  ;	    MOV AH, FindFirst
 14158                                  ;	    LDS DX, name
 14159                                  ;	    MOV CX, attr
 14160                                  ;	    INT 21h
 14161                                  ;	; DMA address has datablock
 14162                                  ;
 14163                                  ;   Error Returns:
 14164                                  ;	    AX = error_path_not_found
 14165                                  ;	       = error_no_more_files
 14166                                  ;---------------------------------------------------------------------------
 14167                                  
 14168                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14169                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14170                                  
 14171                                  _$FIND_FIRST:
 14172 000020D3 89D6                    	MOV	SI,DX			; get name in appropriate place
 14173 000020D5 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14174                                  
 14175 000020DA BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14176                                  
 14177 000020DD E8CD4B                  	call	TransPathSet		; convert the path
 14178 000020E0 7305                    	JNC	short Find_it 		; no error, go and look
 14179                                  FindError:
 14180                                  	;mov	al,3
 14181 000020E2 B003                    	mov	al, error_path_not_found ; error and map into one.
 14182                                  	; 09/11/2022
 14183                                  FF_errj:
 14184 000020E4 E9A6E5                  	jmp	SYS_RET_ERR
 14185                                  Find_it:
 14186 000020E7 16                      	push	ss
 14187 000020E8 1F                      	pop	ds
 14188                                  
 14189 000020E9 FF36[2C03]              	push	word [DMAADD]
 14190 000020ED FF36[2E03]              	push	word [DMAADD+2]
 14191 000020F1 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14192 000020F7 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14193                                  	; MSDOS 3.3
 14194                                  	;call	DOS_SEARCH_FIRST
 14195                                  	; MSDOS 6.0
 14196 000020FB E89000                  	call	GET_FAST_SEARCH 	; search
 14197 000020FE 8F06[2E03]              	pop	word [DMAADD+2]
 14198 00002102 8F06[2C03]              	pop	word [DMAADD]
 14199                                  	
 14200                                  	; 16/12/2022
 14201                                  	;JNC	short FindSet 		; no error, transfer info
 14202 00002106 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14203                                  	;
 14204                                  	;jmp	SYS_RET_ERR
 14205                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14206                                  ;FFF_errj:
 14207                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14208                                  
 14209                                  FindSet:
 14210 00002108 BE[BE04]                	MOV	SI,SEARCHBUF
 14211 0000210B C43E[2C03]              	LES	DI,[DMAADD]
 14212 0000210F B91500                  	MOV	CX,21
 14213 00002112 F3A4                    	REP	MOVSB
 14214 00002114 56                      	PUSH	SI			; Save pointer to start of entry
 14215                                  	;mov	al,[si+0Bh]
 14216 00002115 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14217 00002118 AA                      	STOSB
 14218                                  	;add	si,16h ; 22
 14219 00002119 83C616                  	ADD	SI,dir_entry.dir_time
 14220 0000211C A5                      	MOVSW				; dir_time
 14221 0000211D A5                      	MOVSW				; dir_date
 14222 0000211E 46                      	INC	SI
 14223 0000211F 46                      	INC	SI			; Skip dir_first
 14224 00002120 A5                      	MOVSW				; dir_size (2 words)
 14225 00002121 A5                      	MOVSW
 14226 00002122 5E                      	POP	SI			; Point back to dir_name
 14227 00002123 E83500                   	CALL	PackName
 14228 00002126 E95BE5                  	jmp	SYS_RET_OK		; bye with no errors
 14229                                  
 14230                                  ;---------------------------------------------------------------------------
 14231                                  ;
 14232                                  ;   Procedure Name : $FIND_NEXT
 14233                                  ;
 14234                                  ;   Assembler usage:
 14235                                  ;	; dma points at area returned by find_first
 14236                                  ;	    MOV AH, findnext
 14237                                  ;	    INT 21h
 14238                                  ;	; next entry is at dma
 14239                                  ;
 14240                                  ;   Error Returns:
 14241                                  ;	    AX = error_no_more_files
 14242                                  ;---------------------------------------------------------------------------
 14243                                  
 14244                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14245                                  _$FIND_NEXT:
 14246 00002129 16                      	push	ss
 14247 0000212A 07                      	pop	es
 14248                                  
 14249 0000212B BF[BE04]                	MOV	DI,SEARCHBUF
 14250                                  
 14251 0000212E 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14252                                  
 14253 00002133 B91500                  	MOV	CX,21
 14254 00002136 F3A4                    	REP	MOVSB			; Put the search continuation info
 14255                                  					;  in the right place
 14256 00002138 16                      	push	ss
 14257 00002139 1F                      	pop	ds			; get ready for search
 14258                                  	
 14259 0000213A FF36[2C03]              	push	word [DMAADD]
 14260 0000213E FF36[2E03]              	push	word [DMAADD+2]
 14261 00002142 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14262 00002148 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14263 0000214C E8890D                  	call	DOS_SEARCH_NEXT 	; Find it
 14264 0000214F 8F06[2E03]              	pop	word [DMAADD+2]
 14265 00002153 8F06[2C03]              	pop	word [DMAADD]
 14266 00002157 73AF                    	JNC	short FindSet 		; No error, set info
 14267                                  	;jmp	SYS_RET_ERR
 14268                                  	; 16/12/2022
 14269 00002159 EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14270                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14271                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14272                                  
 14273                                  ;---------------------------------------------------------------------------
 14274                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14275                                  ;
 14276                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14277                                  ;	the ASCIZ format.
 14278                                  ;
 14279                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14280                                  ;		(ES:DI) = destination area (13 bytes)
 14281                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14282                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14283                                  ;---------------------------------------------------------------------------
 14284                                  
 14285                                  PackName:
 14286                                  ;	Move over 8 characters to cover the name component, then trim it's
 14287                                  ;	trailing blanks.
 14288                                  
 14289 0000215B B90800                  	MOV	CX,8			; Pack the name
 14290 0000215E F3A4                    	REP	MOVSB			; Move all of it
 14291                                  main_kill_tail:
 14292 00002160 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14293 00002165 7507                    	JNZ	short find_check_dot
 14294 00002167 4F                      	DEC	DI			; Back up over trailing space
 14295 00002168 41                      	INC	CX
 14296 00002169 83F908                  	CMP	CX,8
 14297 0000216C 72F2                    	JB	short main_kill_tail
 14298                                  find_check_dot:
 14299                                  	;CMP	WORD [SI],(" " << 8) | " "
 14300 0000216E 813C2020                	cmp     word [si],2020h 
 14301 00002172 7506                    	JNZ	short got_ext 		; Some chars in extension
 14302 00002174 807C0220                	CMP	BYTE [SI+2]," "
 14303 00002178 7410                    	JZ	short find_done		; No extension
 14304                                  got_ext:
 14305 0000217A B02E                    	MOV	AL,"."	; 2Eh
 14306 0000217C AA                      	STOSB
 14307                                  	;MOV	CX,3
 14308                                  	; 18/12/2022
 14309                                  	;mov	cl,3
 14310                                  	;REP	MOVSB
 14311 0000217D A4                      	movsb
 14312 0000217E A4                      	movsb
 14313 0000217F A4                      	movsb
 14314                                  ext_kill_tail:
 14315 00002180 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14316 00002185 7503                    	JNZ	short find_done
 14317 00002187 4F                      	DEC	DI			; Back up over trailing space
 14318 00002188 EBF6                    	JMP	short ext_kill_tail
 14319                                  find_done:
 14320 0000218A 31C0                    	XOR	AX,AX
 14321 0000218C AA                      	STOSB				; NUL terminate
 14322 0000218D C3                      	retn
 14323                                  
 14324                                  ;---------------------------------------------------------------------------
 14325                                  
 14326                                  	; 17/05/2019 - Retro DOS v4.0
 14327                                  GET_FAST_SEARCH:
 14328                                  	; 22/07/2018
 14329                                  	; MSDOS 6.0
 14330                                  	; 17/12/2022
 14331 0000218E 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14332                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14333                                  					;FO.trigger fastopen ;AN000;
 14334                                  	;call	DOS_SEARCH_FIRST
 14335                                  	;retn
 14336                                  	; 17/12/2022
 14337 00002194 E9550C                  	jmp	DOS_SEARCH_FIRST
 14338                                  
 14339                                  ;============================================================================
 14340                                  ; PATH.ASM, MSDOS 6.0, 1991
 14341                                  ;============================================================================
 14342                                  ; 06/08/2018 - Retro DOS v3.0
 14343                                  ; 17/05/2019 - Retro DOS v4.0
 14344                                  
 14345                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14346                                  
 14347                                  ;**	Directory related system calls. These will be passed direct text of the
 14348                                  ;	pathname from the user. They will need to be passed through the macro
 14349                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14350                                  ;	defined in DISPATCH. The system calls are:
 14351                                  ;
 14352                                  ;	$CURRENT_DIR  Written
 14353                                  ;	$RMDIR	  Written
 14354                                  ;	$CHDIR	  Written
 14355                                  ;	$MKDIR	  Written
 14356                                  ;
 14357                                  ;
 14358                                  ;	Modification history:
 14359                                  ;
 14360                                  ;	    Created: ARR 4 April 1983
 14361                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14362                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14363                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14364                                  ;				    current directory.
 14365                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14366                                  
 14367                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14368                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14369                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14370                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14371                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14372                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14373                                  ;	I_Need	cMeta,BYTE
 14374                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14375                                  
 14376                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14377                                  ;----------------------------------------------------------------------------
 14378                                  ;
 14379                                  ;   Procedure Name : $CURRENT_DIR
 14380                                  ;
 14381                                  ;   Assembler usage:
 14382                                  ;		LDS	SI,area
 14383                                  ;		MOV	DL,drive
 14384                                  ;		INT	21h
 14385                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14386                                  ;	    ; current directory.
 14387                                  ;   Error returns:
 14388                                  ;	    AX = error_invalid_drive
 14389                                  ;
 14390                                  ;----------------------------------------------------------------------------
 14391                                  
 14392                                  _$CURRENT_DIR:
 14393                                  	;06/08/2018 - Retro DOS v3.0
 14394                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14395 00002197 E8F9F1                  	call	ECritDisk
 14396 0000219A 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14397 0000219C E8134A                  	call	GetVisDrv		; grab it
 14398 0000219F 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14399                                  CurdirErr:
 14400 000021A1 E80AF2                  	call	LCritDisk
 14401                                  
 14402                                  	; MSDOS 3.3
 14403                                  	;mov	al,0Fh
 14404                                  	
 14405                                  	; MSDOS 6.0
 14406 000021A4 1E                      	push	ds
 14407 000021A5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14408 000021AA A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14409 000021AD 1F                      	pop	ds
 14410                                  
 14411                                  curdir_errj:
 14412 000021AE E9DCE4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14413                                  
 14414                                  CurrentValidate:
 14415 000021B1 1E                      	push	ds			; save destination
 14416 000021B2 56                      	push	si
 14417                                  	
 14418                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14419                                  	
 14420                                  	; MSDOS 6.0
 14421 000021B3 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14422 000021B8 C536[A205]              	lds     si,[THISCDS]
 14423                                  
 14424                                  ; 16/12/2022
 14425                                  %if 0
 14426                                  	; 09/11/2022 (following test instruction is nonsense!)
 14427                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14428                                  
 14429                                  	;test	word [si+43h],8000h
 14430                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14431                                  	;jnz	short $+2  ; 09/11/2022	
 14432                                  	jnz	short DoCheck
 14433                                  %endif
 14434                                  
 14435                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14436                                  ; media check.
 14437                                  ;	CMP	word [SI+curdir.ID],0
 14438                                  ;	JZ	short GetDst
 14439                                  DoCheck:
 14440                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14441                                  
 14442                                  	; MSDOS 6.0
 14443 000021BC 1E                      	push	ds
 14444 000021BD 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14445 000021C2 C606[4C03]00            	mov	byte [NoSetDir],0
 14446 000021C7 1F                      	pop	ds
 14447                                  
 14448 000021C8 BF[BE03]                	MOV	DI,OPENBUF
 14449 000021CB E88821                  	call	ValidateCDS		; output is ES:DI -> CDS
 14450                                  
 14451 000021CE 06                      	push	es	 		; swap source and destination
 14452 000021CF 57                      	push	di
 14453 000021D0 5E                      	pop	si
 14454 000021D1 1F                      	pop	ds
 14455                                  GetDst:
 14456 000021D2 5F                      	pop	di
 14457 000021D3 07                      	pop	es			; get real destination
 14458 000021D4 72CB                    	JC	short CurdirErr
 14459                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14460                                  	;
 14461                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14462                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14463                                  	; 16/12/2022
 14464                                  	;add	si,0  ; add si,curdir.text
 14465                                  	;
 14466                                  	;add	si,[si+4Fh] ; 17/05/2019
 14467 000021D6 03744F                  	ADD	SI,[SI+curdir.end]
 14468 000021D9 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14469 000021DC 7501                    	JNZ	short CurrentCopy
 14470 000021DE 46                      	INC	SI
 14471                                  CurrentCopy:
 14472                                  ;	call	FStrCpy
 14473                                  ;; 10/29/86 E5 char
 14474 000021DF 50                      	PUSH	AX
 14475 000021E0 AC                      	LODSB				; get char
 14476 000021E1 08C0                    	OR	AL,AL
 14477 000021E3 7413                    	JZ	short FOK
 14478 000021E5 3C05                    	CMP	AL,05H
 14479 000021E7 740D                    	JZ	short FCHANGE
 14480 000021E9 EB01                    	JMP	short FFF
 14481                                  FCPYNEXT:
 14482 000021EB AC                      	LODSB				; get char
 14483                                  FFF:
 14484 000021EC 3C5C                    	CMP	AL,'\'			; beginning of directory
 14485 000021EE 7508                    	JNZ	short FOK		; no
 14486 000021F0 AA                      	STOSB				; put into user's buffer
 14487 000021F1 AC                      	LODSB				; 1st char of dir is 05?
 14488 000021F2 3C05                    	CMP	AL,05H
 14489 000021F4 7502                    	JNZ	short FOK		; no
 14490                                  FCHANGE:
 14491 000021F6 B0E5                    	MOV	AL,0E5H			; make it E5
 14492                                  FOK:
 14493 000021F8 AA                      	STOSB				; put into user's buffer
 14494 000021F9 08C0                    	OR	AL,AL			; final char
 14495 000021FB 75EE                    	JNZ	short FCPYNEXT		; no
 14496 000021FD 58                      	POP	AX
 14497                                  
 14498                                  ;; 10/29/86 E5 char
 14499 000021FE 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14500 00002200 E8ABF1                  	call	LCritDisk
 14501 00002203 E97EE4                  	jmp	SYS_RET_OK		; no more, bye!
 14502                                  
 14503                                  ; 17/05/2019 - Retro DOS v4.0
 14504                                  
 14505                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14506                                  
 14507                                  ;BREAK <$RmDir -- Remove a directory>
 14508                                  ;----------------------------------------------------------------------------
 14509                                  ;
 14510                                  ; Procedure Name : $RmDir
 14511                                  ;
 14512                                  ; Inputs:
 14513                                  ;	DS:DX Points to asciz name
 14514                                  ; Function:
 14515                                  ;	Delete directory if empty
 14516                                  ; Returns:
 14517                                  ;	STD XENIX Return
 14518                                  ;	AX = error_path_not_found If path bad
 14519                                  ;	AX = error_access_denied If
 14520                                  ;		Directory not empty
 14521                                  ;		Path not directory
 14522                                  ;		Root directory specified
 14523                                  ;		Directory malformed (. and .. not first two entries)
 14524                                  ;		User tries to delete a current directory
 14525                                  ;	AX = error_current_directory
 14526                                  ;
 14527                                  ;----------------------------------------------------------------------------
 14528                                  
 14529                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14530                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14531                                  
 14532                                  _$RMDIR:
 14533 00002206 52                      	push	dx			; Save ptr to name
 14534 00002207 1E                      	push	ds
 14535 00002208 89D6                    	mov	si,dx			; Load ptr into si
 14536 0000220A BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14537 0000220D 57                      	push	di
 14538 0000220E E8A44A                  	call	TransPathNoSet		; Translate the name
 14539 00002211 5F                      	pop	di			; di = ptr to buf for trans name
 14540 00002212 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14541 00002214 1F                      	pop	ds
 14542 00002215 5A                      	pop	dx			; Restore the name
 14543                                  	;mov	al,3
 14544 00002216 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14545                                  	; 16/12/2022
 14546                                  rmdir_errj: ; 10/08/2018
 14547                                  chdir_errj:
 14548 00002218 EB94                    	jmp	short curdir_errj
 14549                                  	;jmp	SYS_RET_ERR
 14550                                  rmlset:
 14551 0000221A 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14552 00002220 7512                    	Jnz	short rmerr		;	return (-1);
 14553 00002222 16                      	push	ss
 14554 00002223 07                      	pop	es
 14555 00002224 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14556                                  rmloop: 
 14557 00002226 E8FA49                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14558 00002229 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14559 0000222B E806F0                  	call	StrCmp			; Are the 2 paths the same?
 14560 0000222E 7404                    	jz	short rmerr		; Yes, report error.
 14561 00002230 FEC0                    	inc	al			; No, inc al to next drive number
 14562 00002232 EBF2                    	jmp	short rmloop		; Go check next drive.
 14563                                  rmerr:
 14564 00002234 1F                      	pop	ds
 14565 00002235 5A                      	pop	dx			; Restore the name
 14566                                  	;mov	al,10h
 14567 00002236 B010                    	mov	al,error_current_directory ; error
 14568                                  	; 16/12/2022
 14569                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14570                                  ;chdir_errj:
 14571 00002238 EBDE                    	jmp	short rmdir_errj
 14572                                  rmcont:
 14573 0000223A 1F                      	pop	ds
 14574 0000223B 5A                      	pop	dx			; Restore the name
 14575 0000223C BE[C232]                	MOV	SI,DOS_RMDIR
 14576 0000223F EB7C                    	JMP	DoDirCall
 14577                                  
 14578                                  ; 17/05/2019 - Retro DOS v4.0
 14579                                  
 14580                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14581                                  
 14582                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14583                                  ;----------------------------------------------------------------------------
 14584                                  ;
 14585                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14586                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14587                                  ; several cases to consider:
 14588                                  ;
 14589                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14590                                  ;	it into a WFP.	We verify the existance of this directory and then
 14591                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14592                                  ;	directory cluster.
 14593                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14594                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14595                                  ;	WFP back into the CDS.
 14596                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14597                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14598                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14599                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14600                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14601                                  ;	to process the path but to return the logical CDS and the logical
 14602                                  ;	path.  We then copy the logical path into the logical CDS.
 14603                                  ;
 14604                                  ; Inputs:
 14605                                  ;	DS:DX Points to asciz name
 14606                                  ; Returns:
 14607                                  ;	STD XENIX Return
 14608                                  ;	AX = chdir_path_not_found if error
 14609                                  ;
 14610                                  ;----------------------------------------------------------------------------
 14611                                  
 14612                                  _$CHDIR:
 14613 00002241 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14614 00002244 89D6                    	MOV	SI,DX			; get source
 14615 00002246 E8604A                  	call	TransPath		; go munge the path and get real CDS
 14616 00002249 7304                    	JNC	short ChDirCrack	; no errors, try path
 14617                                  ChDirErrP:
 14618                                  	;mov	al,3
 14619 0000224B B003                    	MOV	AL,error_path_not_found
 14620                                  ChDirErr:
 14621                                  	;jmp	SYS_RET_ERR 	; oops!
 14622                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14623 0000224D EBC9                    	jmp	short chdir_errj
 14624                                  
 14625                                  ChDirCrack:
 14626 0000224F 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14627 00002254 75F5                    	JNZ	short ChDirErrP
 14628                                  
 14629                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14630                                  ; found.
 14631                                  
 14632 00002256 C43E[A205]              	LES	DI,[THISCDS]
 14633 0000225A 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14634 0000225D 74EC                    	JZ	short ChDirErrP		;	error ();
 14635                                  
 14636                                  ; Find out if the directory exists.
 14637                                  
 14638 0000225F E81D10                  	call	DOS_CHDIR
 14639                                  	;Jc	short ChDirErr
 14640                                  	; 16/12/2022
 14641 00002262 72B4                    	jc	short chdir_errj
 14642                                  ;
 14643                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14644                                  ; not network). If one was seen, all we need to do is copy in the text
 14645                                  ;
 14646 00002264 C43E[A205]              	LES	DI,[THISCDS]
 14647                                  	;test	word [es:di+43h],2000h
 14648                                  	; 17/12/2022
 14649 00002268 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14650                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14651 0000226D 7425                    	JZ	short GotCDS
 14652                                  
 14653                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14654                                  
 14655 0000226F 06                      	push	es	
 14656 00002270 57                      	push	di
 14657 00002271 51                      	push	cx			; save CDS and cluster...
 14658 00002272 E855E2                  	call	Get_User_Stack		; get original text
 14659                                  	
 14660                                  	;mov	di,[si+6]
 14661 00002275 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14662                                  	;mov	ds,[si+0Eh]
 14663 00002278 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14664                                  	
 14665 0000227B BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14666 0000227E 87F7                    	XCHG	SI,DI
 14667 00002280 30C0                    	XOR	AL,AL			; do no splicing
 14668 00002282 57                      	push	di
 14669 00002283 E82F4A                  	call	TransPathNoSet		; Munge path
 14670 00002286 5E                      	pop	si
 14671                                  
 14672                                  ; There should NEVER be an error here.
 14673                                  
 14674                                  ;IF FALSE
 14675                                  ;	JNC SKipErr
 14676                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14677                                  ;SkipErr:
 14678                                  ;ENDIF
 14679 00002287 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14680                                  	;mov	word [es:di+49h],-1
 14681 0000228B 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14682                                  					; no valid cluster here...
 14683 00002291 59                      	pop	cx
 14684 00002292 5F                      	pop	di
 14685 00002293 07                      	pop	es
 14686                                  
 14687                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14688                                  
 14689                                  GotCDS:
 14690                                  
 14691                                  ; wfp_start points to the text. See if it is long enough
 14692                                  
 14693                                  	; MSDOS 3.3
 14694                                  	;push	ss
 14695                                  	;pop	ds
 14696                                  	;mov	si,[WFP_START]
 14697                                  	;push	cx
 14698                                  	;call	DStrLen
 14699                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14700                                  	;pop	cx
 14701                                  	;ja	short ChDirErrP
 14702                                  
 14703                                  	; MSDOS 6.0
 14704 00002294 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14705 00002297 77B2                    	JA	short ChDirErrP
 14706                                  	; MSDOS 3.3 & MSDOS 6.0
 14707                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14708                                  	; 17/12/2022
 14709 00002299 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14710 0000229E 7512                    	JNZ	short SkipRecency
 14711                                  	; MSDOS 6.0
 14712                                  	;test	word [es:di+43h],2000h
 14713                                  	; 17/12/2022
 14714 000022A0 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14715                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14716                                  					;PTM. for Join and Subst ;AN000;
 14717 000022A5 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14718 000022A7 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14719                                  setdirclus:
 14720                                  	;mov	[es:di+49h],cx
 14721 000022AA 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14722 000022AE C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14723                                  SkipRecency:
 14724 000022B2 E8B0EF                  	call	FStrCpy
 14725 000022B5 30C0                    	XOR	AL,AL
 14726                                  mkdir_ok:
 14727 000022B7 E9CAE3                  	jmp	SYS_RET_OK
 14728                                  
 14729                                  ; 17/05/2019 - Retro DOS v4.0
 14730                                  
 14731                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14732                                  
 14733                                  ;BREAK <$MkDir - Make a directory entry>
 14734                                  ;---------------------------------------------------------------------------
 14735                                  ;
 14736                                  ; Procedure Name : $MkDir
 14737                                  ; Inputs:
 14738                                  ;	DS:DX Points to asciz name
 14739                                  ; Function:
 14740                                  ;	Make a new directory
 14741                                  ; Returns:
 14742                                  ;	STD XENIX Return
 14743                                  ;	AX = mkdir_path_not_found if path bad
 14744                                  ;	AX = mkdir_access_denied  If
 14745                                  ;		Directory cannot be created
 14746                                  ;		Node already exists
 14747                                  ;		Device name given
 14748                                  ;		Disk or directory(root) full
 14749                                  ;---------------------------------------------------------------------------
 14750                                  
 14751                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14752                                  
 14753                                  _$MKDIR:
 14754 000022BA BE[8131]                	MOV	SI,DOS_MKDIR
 14755                                  DoDirCall:
 14756 000022BD BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14757                                  
 14758 000022C0 56                      	push	si
 14759 000022C1 89D6                    	MOV	SI,DX			; get source
 14760 000022C3 E8E349                  	call	TransPath		; go munge the path
 14761 000022C6 5E                      	pop	si
 14762 000022C7 7305                    	JNC	short MkDirCrack	; no errors, try path
 14763                                  MkErrP:
 14764 000022C9 B003                    	MOV	AL,error_path_not_found	; oops!
 14765                                  MkErr:
 14766 000022CB E9BFE3                  	jmp	SYS_RET_ERR
 14767                                  MkDirCrack:
 14768 000022CE 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14769 000022D4 75F3                    	JNZ	short MkErrP
 14770                                  
 14771                                  	; MSDOS 3.3
 14772                                  	;push	ss
 14773                                  	;pop	ds
 14774                                  	;call	si
 14775                                  	;jb	short MkErr
 14776                                  	;;jmp	short mkdir_ok
 14777                                  	;jmp	SYS_RET_OK
 14778                                  
 14779                                  	; MSDOS 6.0
 14780 000022D6 56                      	PUSH	SI			;PTM.			;AN000;
 14781 000022D7 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14782 000022DA 5E                      	POP	SI			;PTM.			;AN000;
 14783 000022DB 7604                    	JBE	short pathok		;PTM.			;AN000;
 14784                                  	;mov	al,5
 14785 000022DD B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14786                                  	;jmp	SYS_RET_ERR		;PTM.
 14787 000022DF EBEA                    	jmp	short MkErr
 14788                                  pathok:
 14789 000022E1 FFD6                    	CALL	SI			; go get file
 14790 000022E3 72E6                    	JC	short MkErr		; no errors
 14791                                  	; 16/12/2022
 14792                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14793 000022E5 EBD0                    	jmp	short mkdir_ok
 14794                                  	;jmp	SYS_RET_OK
 14795                                  
 14796                                  ;----------------------------------------------------------------------------
 14797                                  ;
 14798                                  ; Procedure Name : Check_PathLen
 14799                                  ;
 14800                                  ; Inputs:
 14801                                  ;	nothing
 14802                                  ; Function:
 14803                                  ;	check if final path length greater than 67
 14804                                  ; Returns:
 14805                                  ;	Above flag set if > 67
 14806                                  ;
 14807                                  ;---------------------------------------------------------------------------
 14808                                  
 14809                                  Check_PathLen:
 14810                                  	; 09/09/2018
 14811                                  	;mov	SI,[WFP_START]
 14812 000022E7 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14813                                  Check_PathLen2:
 14814 000022EC 16                      	push	ss
 14815 000022ED 1F                      	pop	ds
 14816                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14817 000022EE 51                      	push	CX	
 14818 000022EF E88AEF                  	CALL	DStrLen
 14819 000022F2 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14820 000022F5 59                      	POP	CX
 14821 000022F6 C3                      	retn
 14822                                  
 14823                                  ;============================================================================
 14824                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14825                                  ;============================================================================
 14826                                  ; 07/08/2018 - Retro DOS v3.0
 14827                                  ; 17/05/2019 - Retro DOS v4.0
 14828                                  
 14829                                  ;**	IOCTL system call.
 14830                                  ;----------------------------------------------------------------------------
 14831                                  ;	$IOCTL
 14832                                  ;
 14833                                  ;	  Revision history:
 14834                                  ;
 14835                                  ;		Created: ARR 4 April 1983
 14836                                  ;
 14837                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14838                                  ;
 14839                                  ;		A000	version 4.00	Jan. 1988
 14840                                  ;
 14841                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14842                                  ;
 14843                                  
 14844                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14845                                  ;---------------------------------------------------------------------------
 14846                                  ;
 14847                                  ;   Assembler usage:
 14848                                  ;	    MOV     BX, Handle
 14849                                  ;	    MOV     DX, Data
 14850                                  ;
 14851                                  ;	(or LDS     DX,BUF
 14852                                  ;	    MOV     CX,COUNT)
 14853                                  ;
 14854                                  ;	    MOV     AH, Ioctl
 14855                                  ;	    MOV     AL, Request
 14856                                  ;	    INT     21h
 14857                                  ;
 14858                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14859                                  ;	    attribute word in DX, handle in BX:
 14860                                  ;	    DH = high word of device driver attributes
 14861                                  ;	    DL = low byte of sf_flags
 14862                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14863                                  ;	    in BX.
 14864                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14865                                  ;	    into DS:DX.  Return number read in AX.
 14866                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14867                                  ;	    DS:DX.  Return bytes written in AX.
 14868                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14869                                  ;	    into DS:DX.  Return number read in AX.
 14870                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14871                                  ;	    DS:DX.  Return bytes written in AX.
 14872                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14873                                  ;	    device, AL = 0FFh, otherwise 0.
 14874                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14875                                  ;	    device, AL = 0FFh, otherwise 0.
 14876                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14877                                  ;	    removable media, 0 otherwise.
 14878                                  ;	 9  Return the contents of the device attribute word in DX for the
 14879                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14880                                  ;	    network. 8000h is the bit for local use.
 14881                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14882                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14883                                  ;	    the count and CX is the delay.
 14884                                  ;
 14885                                  ;   Error returns:
 14886                                  ;	    AX = error_invalid_handle
 14887                                  ;	       = error_invalid_function
 14888                                  ;	       = error_invalid_data
 14889                                  ;
 14890                                  ;-------------------------------------------------------------------------------
 14891                                  ;
 14892                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14893                                  ;   than the above
 14894                                  ;
 14895                                  ;	There are several basic forms of IOCTL calls:
 14896                                  ;
 14897                                  ;
 14898                                  ;	** Get/Set device information:	**
 14899                                  ;
 14900                                  ;	ENTRY	(AL) = function code
 14901                                  ;		  0 - Get device information
 14902                                  ;		  1 - Set device information
 14903                                  ;		(BX) = file handle
 14904                                  ;		(DX) = info for "Set Device Information"
 14905                                  ;	EXIT	'C' set if error
 14906                                  ;		  (AX) = error code
 14907                                  ;		'C' clear if OK
 14908                                  ;		  (DX) = info for "Get Device Information"
 14909                                  ;	USES	ALL
 14910                                  ;
 14911                                  ;
 14912                                  ;	**  Read/Write Control Data From/To Handle  **
 14913                                  ;
 14914                                  ;	ENTRY	(AL) = function code
 14915                                  ;		  2 - Read device control info
 14916                                  ;		  3 - Write device control info
 14917                                  ;		(BX) = file handle
 14918                                  ;		(CX) = transfer count
 14919                                  ;		(DS:DX) = address for data
 14920                                  ;	EXIT	'C' set if error
 14921                                  ;		  (AX) = error code
 14922                                  ;		'C' clear if OK
 14923                                  ;		  (AX) = count of bytes transfered
 14924                                  ;	USES	ALL
 14925                                  ;
 14926                                  ;
 14927                                  ;	**  Read/Write Control Data From/To Block Device  **
 14928                                  ;
 14929                                  ;	ENTRY	(AL) = function code
 14930                                  ;		  4 - Read device control info
 14931                                  ;		  5 - Write device control info
 14932                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14933                                  ;		(CX) = transfer count
 14934                                  ;		(DS:DX) = address for data
 14935                                  ;	EXIT	'C' set if error
 14936                                  ;		  (AX) = error code
 14937                                  ;		'C' clear if OK
 14938                                  ;		  (AX) = count of bytes transfered
 14939                                  ;	USES	ALL
 14940                                  ;
 14941                                  ;
 14942                                  ;	**  Get Input/Output Status  **
 14943                                  ;
 14944                                  ;	ENTRY	(AL) = function code
 14945                                  ;		  6 - Get Input status
 14946                                  ;		  7 - Get Output Status
 14947                                  ;		(BX) = file handle
 14948                                  ;	EXIT	'C' set if error
 14949                                  ;		  (AX) = error code
 14950                                  ;		'C' clear if OK
 14951                                  ;		  (AL) = 00 if not ready
 14952                                  ;		  (AL) = FF if ready
 14953                                  ;	USES	ALL
 14954                                  ;
 14955                                  ;
 14956                                  ;	**  Get Drive Information  **
 14957                                  ;
 14958                                  ;	ENTRY	(AL) = function code
 14959                                  ;		  8 - Check for removable media
 14960                                  ;		  9 - Get device attributes
 14961                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14962                                  ;	EXIT	'C' set if error
 14963                                  ;		  (AX) = error code
 14964                                  ;		'C' clear if OK
 14965                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 14966                                  ;		  (DX) = device attribute word (func. 9)
 14967                                  ;	USES	ALL
 14968                                  ;
 14969                                  ;
 14970                                  ;	**  Get Redirected bit	**
 14971                                  ;
 14972                                  ;	ENTRY	(AL) = function code
 14973                                  ;		  0Ah - Network stuff
 14974                                  ;		(BX) = file handle
 14975                                  ;	EXIT	'C' set if error
 14976                                  ;		  (AX) = error code
 14977                                  ;		'C' clear if OK
 14978                                  ;		  (DX) = SFT flags word, 8000h set if network file
 14979                                  ;	USES	ALL
 14980                                  ;
 14981                                  ;
 14982                                  ;	**  Change sharer retry parameters  **
 14983                                  ;
 14984                                  ;	ENTRY	(AL) = function code
 14985                                  ;		  0Bh - Set retry parameters
 14986                                  ;		(CX) = retry loop count
 14987                                  ;		(DX) = number of retries
 14988                                  ;	EXIT	'C' set if error
 14989                                  ;		  (AX) = error code
 14990                                  ;		'C' clear if OK
 14991                                  ;	USES	ALL
 14992                                  ;
 14993                                  ;
 14994                                  ;   =================================================================
 14995                                  ;
 14996                                  ;	**  New Standard Control  **
 14997                                  ;
 14998                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 14999                                  ;	FORMS ARE OBSOLETE.
 15000                                  ;
 15001                                  ;   =================================================================
 15002                                  ;
 15003                                  ;	ENTRY	(AL) = function code
 15004                                  ;		  0Ch - Control Function subcode
 15005                                  ;		(BX) = File Handle
 15006                                  ;		(CH) = Category Indicator
 15007                                  ;		(CL) = Function within category
 15008                                  ;		(DS:DX) = address for data, if any
 15009                                  ;		(SI) = Passed to device as argument, use depends upon function
 15010                                  ;		(DI) = Passed to device as argument, use depends upon function
 15011                                  ;	EXIT	'C' set if error
 15012                                  ;		  (AX) = error code
 15013                                  ;		'C' clear if OK
 15014                                  ;		  (SI) = Return value, meaning is function dependent
 15015                                  ;		  (DI) = Return value, meaning is function dependent
 15016                                  ;		  (DS:DX) = Return address, use is function dependent
 15017                                  ;	USES	ALL
 15018                                  ;
 15019                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15020                                  ;     (See inc\ioctl.inc for more info)
 15021                                  ;
 15022                                  ;	ENTRY	(AL) = function code
 15023                                  ;		  0Dh - Control Function subcode
 15024                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15025                                  ;		(CH) = Category Indicator
 15026                                  ;		(CL) = Function within category
 15027                                  ;		(DS:DX) = address for data, if any
 15028                                  ;		(SI) = Passed to device as argument, use depends upon function
 15029                                  ;		(DI) = Passed to device as argument, use depends upon function
 15030                                  ;
 15031                                  ;	EXIT	'C' set if error
 15032                                  ;		  (AX) = error code
 15033                                  ;		'C' clear if OK
 15034                                  ;		  (DS:DX) = Return address, use is function dependent
 15035                                  ;	USES	ALL
 15036                                  ;
 15037                                  ;---------------------------------------------------------------------------
 15038                                  	
 15039                                  	; 17/05/2019 - Retro DOS v4.0
 15040                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15041                                  
 15042                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15043                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15044                                  
 15045                                  IOCTLJMPTABLE:	;label	word
 15046                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15047 000022F7 [3523]                  	dw	ioctl_getset_data	; 0
 15048 000022F9 [3523]                  	dw	ioctl_getset_data   	; 1
 15049 000022FB [8523]                  	dw	ioctl_control_string	; 2
 15050 000022FD [8523]                  	dw	ioctl_control_string	; 3
 15051 000022FF [D924]                  	dw	ioctl_get_dev		; 4
 15052 00002301 [D924]                  	dw	ioctl_get_dev		; 5
 15053 00002303 [9F23]                  	dw	ioctl_status		; 6
 15054 00002305 [9F23]                  	dw	ioctl_status		; 7
 15055 00002307 [4024]                  	dw	ioctl_rem_media		; 8
 15056 00002309 [7E24]                  	dw	ioctl_drive_attr	; 9
 15057 0000230B [CB24]                  	dw	ioctl_handle_redir	; A
 15058 0000230D [BB23]                  	dw	Set_Retry_Parameters	; B
 15059 0000230F [C923]                  	dw	GENERICIOCTLHANDLE	; C
 15060 00002311 [E023]                  	dw	GENERICIOCTL		; D
 15061                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15062 00002313 [8A25]                  	dw	ioctl_drive_owner	; E
 15063 00002315 [8A25]                  	dw	ioctl_drive_owner	; F
 15064                                  	; MSDOS 6.0
 15065 00002317 [C923]                  	dw	query_handle_support	; 10h
 15066 00002319 [E023]                  	dw	query_device_support	; 11h
 15067                                  
 15068                                  	; 11/11/2022
 15069                                  _$IOCTL:
 15070 0000231B 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15071 0000231D 16                      	push	ss
 15072 0000231E 1F                      	pop	ds			;hkn; SS is DOSDATA
 15073                                  
 15074                                  	; MSDOS 3.3
 15075                                  	;cmp	al,0Fh 
 15076                                  	; MSDOS 6.0
 15077 0000231F 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15078 00002321 770F                    	ja	short ioctl_bad_funj2	; if not bad function #
 15079                                  
 15080                                  	; 28/05/2019
 15081 00002323 50                      	push	AX			; Need to save AL for generic IOCTL
 15082 00002324 89C7                    	mov	di,ax			; di NOT a PARM
 15083 00002326 81E7FF00                	and	di,0FFh			; di = al
 15084 0000232A D1E7                    	shl	di,1			; di = index into jmp table
 15085 0000232C 58                      	pop	AX			; Restore AL for generic IOCTL
 15086                                  
 15087 0000232D 2EFFA5[F722]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15088                                  
 15089                                  ioctl_bad_funj2:
 15090 00002332 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15091                                  
 15092                                  ;--------------------------------------------------------------------------
 15093                                  ;
 15094                                  ; IOCTL: AL = 0,1
 15095                                  ;
 15096                                  ; ENTRY: DS = DOSDATA
 15097                                  ;
 15098                                  ;--------------------------------------------------------------------------
 15099                                  
 15100                                  ioctl_getset_data:
 15101                                  	; MSDOS 6.0
 15102 00002335 E87244                  	call	SFFromHandle		; ES:DI -> SFT
 15103 00002338 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15104                                  ioctl_bad_handle:
 15105                                  	;mov	al,6
 15106 0000233A B006                    	mov	al,error_invalid_handle
 15107                                  ioctl_error:
 15108 0000233C E94EE3                  	jmp	SYS_RET_ERR
 15109                                  
 15110                                  ioctl_check_permissions:
 15111 0000233F 3C00                    	CMP	AL,0
 15112                                  	;mov	al,[es:di+5]
 15113 00002341 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15114 00002345 741B                    	JZ	short ioctl_read	; read the byte
 15115                                  
 15116 00002347 08F6                    	or	dh,dh
 15117 00002349 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15118                                  	;mov	al,0Dh
 15119 0000234B B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15120                                  	;jmp	SYS_RET_ERR
 15121 0000234D EBED                    	jmp	short ioctl_error
 15122                                  
 15123                                  ioctl_check_device:
 15124 0000234F A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15125 00002351 74DF                    	jz	short ioctl_bad_funj2
 15126 00002353 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15127                                  					;   device bit!! He can muck with the
 15128                                  					;   others at will.
 15129 00002356 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15130 0000235B 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15131                                  ioctl_ok:
 15132 0000235F E922E3                  	jmp	SYS_RET_OK
 15133                                  
 15134                                  ioctl_read:
 15135 00002362 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15136 00002367 30E4                    	XOR	AH,AH
 15137 00002369 A880                    	test	AL,devid_device 	; Should I set high byte
 15138 0000236B 740D                    	JZ	short ioctl_no_high	; no
 15139 0000236D C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15140                                  	;les	di,[es:di+7]
 15141 00002372 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15142                                  	;mov	ah,[es:di+5]
 15143 00002376 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15144                                  ioctl_no_high:
 15145 0000237A 89C2                    	MOV	DX,AX
 15146                                  ioctl_set_dx:	; 16/12/2022
 15147 0000237C E84BE1                  	call	Get_User_Stack
 15148                                  	;mov	[si+6],dx
 15149 0000237F 895406                  	MOV	[SI+user_env.user_DX],DX
 15150                                  	;;jmp	SYS_RET_OK
 15151                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15152                                  ioctl_ok_j:
 15153                                  	; 16/12/2022
 15154 00002382 E902E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15155                                  	;jmp	short ioctl_ok
 15156                                  	; 26/07/2019
 15157                                  	;jmp	SYS_RET_OK_clc
 15158                                  
 15159                                  ;--------------------------------------------------------------------------
 15160                                  ;
 15161                                  ; IOCTL: AL = 2,3
 15162                                  ;
 15163                                  ; ENTRY: DS = DOSDATA
 15164                                  ;	 SI = user's DS
 15165                                  ;
 15166                                  ;--------------------------------------------------------------------------
 15167                                  
 15168                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15169                                  ioctl_control_string:
 15170 00002385 E82244                  	call	SFFromHandle		; ES:DI -> SFT
 15171 00002388 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15172                                  	; 07/12/2022
 15173                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15174                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15175                                  	; MSDOS 5.0 & MSDOS 6.0
 15176 0000238A 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15177 0000238F 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15178 00002391 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15179 00002396 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15180 0000239A 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15181 0000239C E94201                  	JMP	ioctl_do_string
 15182                                  
 15183                                  ;--------------------------------------------------------------------------
 15184                                  ;
 15185                                  ; IOCTL: AL = 6,7
 15186                                  ;
 15187                                  ; ENTRY: DS = DOSDATA
 15188                                  ;
 15189                                  ;--------------------------------------------------------------------------
 15190                                  
 15191                                  ioctl_status:
 15192 0000239F B401                    	MOV	AH,1
 15193 000023A1 2C06                    	SUB	AL,6			; 6=0,7=1
 15194 000023A3 7402                    	JZ	short ioctl_get_status
 15195 000023A5 B403                    	MOV	AH,3
 15196                                  ioctl_get_status:
 15197 000023A7 50                      	PUSH	AX
 15198 000023A8 E87113                  	call	GET_IO_SFT
 15199 000023AB 58                      	POP	AX
 15200                                  	;JNC	short DO_IOFUNC
 15201                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15202                                  	; 16/12/2022
 15203 000023AC 728C                    	jc	short ioctl_bad_handle
 15204                                  DO_IOFUNC:
 15205 000023AE E8E021                  	call	IOFUNC
 15206 000023B1 88C4                    	MOV	AH,AL
 15207 000023B3 B0FF                    	MOV	AL,0FFH
 15208 000023B5 7502                    	JNZ	short ioctl_status_ret
 15209 000023B7 FEC0                    	INC	AL
 15210                                  ioctl_status_ret:
 15211                                  	;jmp	SYS_RET_OK
 15212                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15213                                  	;jmp	short ioctl_ok_j
 15214                                  	; 16/12/2022
 15215 000023B9 EBA4                    	jmp	short ioctl_ok
 15216                                  
 15217                                  ;--------------------------------------------------------------------------
 15218                                  ;
 15219                                  ; IOCTL: AL = B
 15220                                  ;
 15221                                  ; ENTRY: DS = DOSDATA
 15222                                  ;
 15223                                  ;--------------------------------------------------------------------------
 15224                                  
 15225                                  Set_Retry_Parameters:
 15226                                  	; 09/09/2018
 15227 000023BB 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15228 000023BF 09D2                    	OR	DX,DX			; zero retries not allowed
 15229 000023C1 7475                    	JZ	short ioctl_bad_fun
 15230 000023C3 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15231                                  doneok:
 15232                                  	;jmp	SYS_RET_OK		; Done
 15233                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15234                                  	;jmp	short ioctl_status_ret
 15235                                  	; 16/12/2022
 15236 000023C7 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15237                                  
 15238                                  ;--------------------------------------------------------------------------
 15239                                  ;
 15240                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15241                                  ;
 15242                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15243                                  ;	SI:DX -> Users Device Parameter Table
 15244                                  ;	IOCALL -> IOCTL_Req structure
 15245                                  ;
 15246                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15247                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15248                                  ;	call.
 15249                                  ;
 15250                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15251                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15252                                  ;         return address off the stack if the drive is invalid.
 15253                                  ;
 15254                                  ;--------------------------------------------------------------------------
 15255                                  
 15256                                  query_handle_support:	; Entry point for handles
 15257                                  GENERICIOCTLHANDLE:
 15258 000023C9 E8DE43                  	call	SFFromHandle		; Get SFT for device.
 15259 000023CC 726F                    	jc	short ioctl_bad_handlej
 15260                                  
 15261                                  	;test	word [es:di+5],8000h
 15262                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15263                                  	;test	byte [es:di+6],80h
 15264 000023CE 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15265 000023D3 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15266                                  
 15267 000023D5 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15268                                  	;les	di,[es:di+7]
 15269 000023DA 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15270 000023DE EB0F                    	jmp	short Do_GenIOCTL
 15271                                  
 15272                                  query_device_support:	; Entry point for devices:
 15273                                  GENERICIOCTL:
 15274 000023E0 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15275 000023E5 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15276 000023E8 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15277                                  
 15278 000023EA E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15279 000023ED 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15280                                  
 15281                                  Do_GenIOCTL:
 15282                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15283                                  					; Can device handle Generic IOCTL funcs
 15284                                  	; 09/09/2018
 15285                                  	;test	byte [es:di+4],40h
 15286 000023EF 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15287 000023F4 7442                    	jz	short ioctl_bad_fun
 15288                                  
 15289                                  	; 17/05/2019 - Retro DOS v4.0
 15290                                  
 15291                                  	; MSDOS 6.0
 15292                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15293 000023F6 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15294                                  	;cmp	al,10h
 15295 000023FB 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15296 000023FD 7C0C                    	jl	short SetIOCtlBlock
 15297                                  	
 15298                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15299                                  	;test	byte [es:di+4],80h 
 15300 000023FF 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15301 00002404 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15302                                  	;
 15303                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15304 00002406 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15305                                  
 15306                                  SetIOCtlBlock:
 15307 0000240B 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15308 0000240C 57                      	PUSH	DI			; in DS:SI
 15309                                  					; Setup Generic IOCTL Request Block
 15310                                  	;mov	byte [IOCALL_REQLEN],23
 15311 0000240D C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15312                                  	; 07/09/2018 (MSDOS 3.3)
 15313                                  	;;mov	byte [IOCALL_REQFUNC],19
 15314                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15315                                  	;
 15316 00002412 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15317 00002416 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15318 0000241A 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15319 0000241E 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15320 00002422 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15321 00002426 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15322 0000242A 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15323                                  
 15324                                  ;hkn; IOCALL is in DOSDATA
 15325 0000242E BB[7C03]                	MOV	BX,IOCALL
 15326                                  
 15327 00002431 16                      	PUSH	SS
 15328 00002432 07                      	POP	ES
 15329                                  					; DS:SI -> Device header.
 15330 00002433 5E                      	POP	SI
 15331 00002434 1F                      	POP	DS
 15332                                  	; 10/08/2018
 15333 00002435 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15334                                  
 15335                                  ioctl_bad_fun:
 15336 00002438 B001                    	mov	al, error_invalid_function  ; 1
 15337 0000243A E950E2                  	jmp	SYS_RET_ERR	
 15338                                  
 15339                                  ioctl_bad_handlej:
 15340 0000243D E9FAFE                  	jmp	ioctl_bad_handle
 15341                                  
 15342                                  ;---------------------------------------------------------------------------
 15343                                  ;
 15344                                  ; IOCTL: AL = 8
 15345                                  ;
 15346                                  ; ENTRY: DS = DOSDATA
 15347                                  ;
 15348                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15349                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15350                                  ;         return address off the stack if the drive is invalid.
 15351                                  ;
 15352                                  ;-------------------------------------------------------------------------
 15353                                  
 15354                                  ioctl_rem_media:
 15355                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15356 00002440 E82B01                  	CALL	Check_If_Net
 15357 00002443 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15358                                  					;   certainly don't know how to do this
 15359                                  					;   call.
 15360                                  	;test	word [es:di+4],800h
 15361                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15362                                  	;test	byte [es:di+5],8
 15363 00002445 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15364 0000244A 74EC                    	JZ	short ioctl_bad_fun		; NO
 15365                                  
 15366                                  ;hkn; SS override for IOCALL
 15367 0000244C 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15368 00002452 B00D                    	MOV	AL,REMHL  ; 13
 15369 00002454 88DC                    	MOV	AH,BL			; Unit number
 15370 00002456 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15371 0000245A 31C0                    	XOR	AX,AX
 15372 0000245C 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15373 00002460 06                      	PUSH	ES
 15374 00002461 1F                      	POP	DS
 15375 00002462 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15376 00002464 16                      	PUSH	SS
 15377 00002465 07                      	POP	ES
 15378                                  
 15379                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15380 00002466 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15381 00002469 1E                      	push	ds
 15382 0000246A 56                      	push	si
 15383 0000246B E8FA22                  	call	DEVIOCALL2
 15384 0000246E 5E                      	pop	si
 15385 0000246F 1F                      	pop	ds
 15386                                  
 15387                                  ;hkn; SS override
 15388 00002470 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15389 00002474 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15390 00002477 B109                    	MOV	CL,9
 15391 00002479 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15392                                  ioctl_da_ok_j:	; 11/11/2022
 15393 0000247B E906E2                  	jmp	SYS_RET_OK
 15394                                  
 15395                                  ;-------------------------------------------------------------------------
 15396                                  ;
 15397                                  ; IOCTL: AL = 9
 15398                                  ;
 15399                                  ; ENTRY: DS = DOSDATA
 15400                                  ;
 15401                                  ;-------------------------------------------------------------------------
 15402                                  
 15403                                  ioctl_drive_attr:
 15404                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15405 0000247E 88D8                    	mov	al,bl
 15406 00002480 E84B47                  	call	GETTHISDRV
 15407 00002483 7241                    	jc	short ioctl_drv_err
 15408 00002485 E8B800                  	call	Get_Driver_BL
 15409                                  	; MSDOS 6.0
 15410 00002488 723C                    	JC	short ioctl_drv_err	; drive not valid
 15411                                  
 15412                                  	;mov	dx,[es:di+4]
 15413 0000248A 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15414                                  					; get device attribute word
 15415 0000248E 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15416                                  
 15417                                  ;hkn; SS override
 15418 00002490 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15419                                  	;test	word [es:di+43h],8000h
 15420                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15421                                  	;test	byte [es:di+44h],80h
 15422 00002495 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15423 0000249A 7403                    	JZ	short IOCTLShare
 15424                                  
 15425                                  	;or	dx,1000h ; (MSDOS 3.3)
 15426                                  
 15427                                  ;	Net devices don't return a device attribute word.
 15428                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15429                                  
 15430 0000249C BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15431                                  IOCTLShare:
 15432 0000249F 16                      	push	ss
 15433 000024A0 1F                      	pop	ds
 15434 000024A1 BE[BE03]                	MOV	SI,OPENBUF
 15435 000024A4 80C341                  	ADD	BL,"A"	; 41h
 15436 000024A7 881C                    	MOV	[SI],BL
 15437 000024A9 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15438 000024AE B80003                  	MOV	AX,0300h
 15439 000024B1 F8                      	CLC
 15440                                  	;INT	int_IBM
 15441 000024B2 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15442                                  			; DS:SI -> ASCIZ disk device name 
 15443                                  			; (may be full path or only drive
 15444                                  			; specifier--must include the colon)
 15445                                  			; Return: CF clear if absolute disk access allowed
 15446 000024B4 7303                    	JNC	short IOCTLLocal	; Not shared
 15447                                  	;OR	DX,0200H		; Shared, bit 9
 15448                                  	; 17/12/2022
 15449 000024B6 80CE02                  	or	dh,02h
 15450                                  IOCTLLocal:
 15451                                  	;test	word [es:di+43h],1000h
 15452                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15453                                  	;test	byte [es:di+44h],10h
 15454 000024B9 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15455                                  	;JZ	short ioctl_set_DX
 15456                                  	; 16/12/2022
 15457 000024BE 7403                    	jz	short _ioctl_set_DX
 15458                                  	;OR	DX,8000h
 15459                                  	; 17/12/2022
 15460 000024C0 80CE80                  	or	dh,80h
 15461                                  ;ioctl_set_DX:
 15462                                  _ioctl_set_DX:
 15463                                  	; 16/12/2022
 15464 000024C3 E9B6FE                  	jmp	ioctl_set_dx
 15465                                  ; 16/12/2022
 15466                                  %if 0	
 15467                                  	call	Get_User_Stack
 15468                                  	MOV	[SI+user_env.user_DX],DX
 15469                                  	;;jmp	SYS_RET_OK
 15470                                  	;; 25/06/2019
 15471                                  	;jmp	SYS_RET_OK_clc
 15472                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15473                                  ioctl_gd_ok_j:
 15474                                  	jmp	short ioctl_da_ok_j
 15475                                  %endif
 15476                                  
 15477                                  ioctl_drv_err:
 15478 000024C6 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15479                                  ioctl_gd_err_j:	; 11/11/2022
 15480 000024C8 E9C2E1                  	jmp	SYS_RET_ERR
 15481                                  
 15482                                  ;--------------------------------------------------------------------------
 15483                                  ;
 15484                                  ; IOCTL: AL = A
 15485                                  ;
 15486                                  ; ENTRY: DS = DOSDATA
 15487                                  ;
 15488                                  ;--------------------------------------------------------------------------
 15489                                  
 15490                                  ioctl_handle_redir:
 15491 000024CB E8DC42                  	call	SFFromHandle		; ES:DI -> SFT
 15492 000024CE 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15493 000024D0 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15494                                  
 15495                                  ioctl_got_sft:
 15496                                  	;mov	dx,[es:di+5]
 15497 000024D3 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15498                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15499                                  	; 16/12/2022
 15500 000024D7 EBEA                    	jmp	short _ioctl_set_DX
 15501                                  
 15502                                  	; 16/12/2022
 15503                                  ;ioctl_bad_funj:
 15504                                  	;JMP	ioctl_bad_fun
 15505                                  
 15506                                  ;--------------------------------------------------------------------------
 15507                                  ;
 15508                                  ; IOCTL: AL= 4,5
 15509                                  ;
 15510                                  ; ENTRY: DS = DOSDATA
 15511                                  ;	 SI = user's DS
 15512                                  ;
 15513                                  ;
 15514                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15515                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15516                                  ;         return address off the stack if the drive is invalid.
 15517                                  ;
 15518                                  ;-------------------------------------------------------------------------
 15519                                  
 15520                                  ioctl_get_dev:
 15521 000024D9 E89200                  	CALL	Check_If_Net
 15522                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15523                                  					; certainly don't know how to do this
 15524                                  					; call.
 15525                                  	; 16/12/2022
 15526 000024DC 7403                    	jz	short ioctl_do_string
 15527                                  ioctl_bad_funj:
 15528 000024DE E957FF                  	JMP	ioctl_bad_fun
 15529                                  
 15530                                  ioctl_do_string:
 15531                                  	;test	word [es:di+4],4000h
 15532                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15533                                  	;test	byte [es:di+5],40h
 15534 000024E1 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15535 000024E6 74F6                    	JZ	short ioctl_bad_funj		; NO
 15536                                  					; assume IOCTL read
 15537 000024E8 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15538                                  
 15539 000024ED A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15540 000024EF 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15541                                  
 15542                                  					; it is an IOCTL write
 15543 000024F1 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15544                                  
 15545                                  ioctl_control_call:
 15546 000024F6 B016                    	MOV	AL,DRDWRHL ; 22
 15547                                  ioctl_setup_pkt:
 15548 000024F8 88DC                    	MOV	AH,BL			; Unit number
 15549 000024FA A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15550 000024FD 31C0                    	XOR	AX,AX
 15551 000024FF A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15552 00002502 A2[8903]                	MOV	[IOMED],AL
 15553 00002505 890E[8E03]              	MOV	[IOSCNT],CX
 15554 00002509 8916[8A03]              	MOV	[IOXAD],DX
 15555 0000250D 8936[8C03]              	MOV	[IOXAD+2],SI
 15556 00002511 06                      	PUSH	ES
 15557 00002512 1F                      	POP	DS
 15558 00002513 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15559 00002515 16                      	PUSH	SS
 15560 00002516 07                      	POP	ES
 15561                                  
 15562 00002517 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15563                                  ioctl_do_IO:
 15564 0000251A E84B22                  	call	DEVIOCALL2
 15565                                  
 15566                                  ;hkn; SS override for IOCALL
 15567                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15568                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15569                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15570 0000251D 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15571 00002523 7507                    	JNZ	short ioctl_string_err
 15572                                  
 15573                                  ;hkn; SS override
 15574 00002525 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15575                                  	; 16/12/2022
 15576 00002529 E958E1                  	jmp	SYS_RET_OK
 15577                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15578                                  	;jmp	short ioctl_gd_ok_j
 15579                                  
 15580                                  ioctl_string_err:
 15581 0000252C 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15582                                  device_err:
 15583 00002531 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15584 00002535 89F8                    	MOV	AX,DI
 15585 00002537 E8E830                  	call	SET_I24_EXTENDED_ERROR
 15586                                  
 15587                                  ;hkn; use SS override
 15588                                  ;hkn;	mov	ax,[CS:EXTERR]
 15589 0000253A 36A1[2403]              	mov	ax,[SS:EXTERR]
 15590                                  	;jmp	SYS_RET_ERR
 15591                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15592 0000253E EB88                    	jmp	short ioctl_gd_err_j
 15593                                  
 15594                                  ; 17/05/2019 - Retro DOS v4.0
 15595                                  
 15596                                  ;--------------------------------------------------------------------------
 15597                                  ; Proc name : Get_Driver_BL
 15598                                  ;
 15599                                  ;	DS is DOSDATA
 15600                                  ;	BL is drive number (0=default)
 15601                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15602                                  ;	No regs modified
 15603                                  ;
 15604                                  ;---------------------------------------------------------------------------
 15605                                  
 15606                                  Get_Driver_BL:
 15607 00002540 50                      	PUSH	AX
 15608 00002541 88D8                    	MOV	AL,BL			; Drive
 15609 00002543 E88846                  	call	GETTHISDRV
 15610 00002546 7224                    	jc	short ioctl_bad_drv
 15611 00002548 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15612 0000254A C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15613 0000254F C43E[A205]              	LES	DI,[THISCDS]
 15614                                  	;test	word [es:di+43h],8000h
 15615                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15616                                  	;test	byte [es:di+44h],80h
 15617 00002553 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15618                                  	;les	di,[es:di+45h]
 15619 00002558 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15620 0000255C 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15621 0000255E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15622                                  	;mov	bl,[es:di+1]
 15623 00002563 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15624                                  	;les	di,[es:di+13h]
 15625 00002567 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15626                                  got_dev_ptr:
 15627 0000256B F8                      	CLC
 15628                                  ioctl_bad_drv:
 15629 0000256C 58                      	POP	AX
 15630 0000256D C3                      	retn
 15631                                  
 15632                                  ;-------------------------------------------------------------------------
 15633                                  ; Proc Name : Check_If_Net:
 15634                                  ;
 15635                                  ;
 15636                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15637                                  ; If no device is found, the return address is popped off the stack, and a
 15638                                  ; jump is made to ioctl_drv_err.
 15639                                  ;
 15640                                  ; On Entry:
 15641                                  ; Registers same as those for Get_Driver_BL
 15642                                  ;
 15643                                  ; On Exit:
 15644                                  ; ZERO flag	- set if not a net device
 15645                                  ;		- reset if net device
 15646                                  ; ES:DI -> the device
 15647                                  ;
 15648                                  ;
 15649                                  ; BUGBUG: This function assumes the following stack setup on entry
 15650                                  ;
 15651                                  ;	  SP+2 -> Error return address
 15652                                  ;	  SP   -> Normal return address
 15653                                  ;
 15654                                  ;-------------------------------------------------------------------------
 15655                                  
 15656                                  Check_If_Net:
 15657                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15658 0000256E E8CFFF                  	CALL	Get_Driver_BL
 15659 00002571 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15660 00002573 06                      	PUSH	ES
 15661 00002574 57                      	PUSH	DI
 15662 00002575 C43E[A205]              	LES	DI,[THISCDS]
 15663                                  	;test	word [es:di+43h],8000h
 15664                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15665                                  	;test	byte [es:di+44h],80h
 15666 00002579 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15667 0000257E 5F                      	POP	DI
 15668 0000257F 07                      	POP	ES
 15669 00002580 C3                      	retn
 15670                                  
 15671                                  ioctl_drv_err_pop:
 15672 00002581 58                      	pop	ax			; pop off return address
 15673 00002582 E941FF                  	jmp	ioctl_drv_err
 15674                                  
 15675                                  ioctl_bad_funj3:
 15676 00002585 E9B0FE                  	jmp	ioctl_bad_fun
 15677                                  
 15678                                  ioctl_string_errj:
 15679 00002588 EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15680                                  
 15681                                  ;--------------------------------------------------------------------------
 15682                                  ;
 15683                                  ; IOCTL: AL = E, F
 15684                                  ;
 15685                                  ; ENTRY: DS = DOSDATA
 15686                                  ;
 15687                                  ;
 15688                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15689                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15690                                  ;         return address off the stack if the drive is invalid.
 15691                                  ;
 15692                                  ;--------------------------------------------------------------------------
 15693                                  
 15694                                  ioctl_drive_owner:
 15695                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15696 0000258A E8E1FF                  	Call	Check_If_Net
 15697 0000258D 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15698                                  					;   certainly don't know how to do this
 15699                                  					;   call.
 15700                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15701                                  	; 09/09/2018
 15702                                  	;test	byte [es:di+4],40h
 15703 0000258F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15704 00002594 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15705                                  	;mov	byte [IOCALL_REQFUNC],23
 15706 00002596 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15707 0000259B 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15708 0000259D 7405                    	jz	short GetOwner
 15709                                  SetOwner:
 15710 0000259F C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15711                                  GetOwner:
 15712 000025A4 B00D                    	MOV	AL,OWNHL ; 13
 15713 000025A6 88DC                    	MOV	AH,BL			; Unit number
 15714 000025A8 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15715 000025AB 31C0                    	XOR	AX,AX
 15716 000025AD A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15717 000025B0 06                      	PUSH	ES
 15718 000025B1 1F                      	POP	DS
 15719 000025B2 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15720 000025B4 16                      	PUSH	SS
 15721 000025B5 07                      	POP	ES
 15722 000025B6 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15723 000025B9 1E                      	push	ds
 15724 000025BA 56                      	push	si
 15725 000025BB E8AA21                  	call	DEVIOCALL2
 15726 000025BE 5E                      	pop	si
 15727 000025BF 1F                      	pop	ds
 15728                                  ;hkn; SS override
 15729                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15730                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15731 000025C0 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15732 000025C6 75C0                    	jnz	short ioctl_string_errj
 15733 000025C8 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15734                                  					; owner returned is 1-based.
 15735 000025CC E9B5E0                  	jmp	SYS_RET_OK
 15736                                  
 15737                                  ;============================================================================
 15738                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15739                                  ;============================================================================
 15740                                  ; 07/08/2018 - Retro DOS v3.0
 15741                                  ; 17/05/2019 - Retro DOS v4.0
 15742                                  
 15743                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15744                                  ;	NAME	DOS_DELETE
 15745                                  
 15746                                  ;
 15747                                  ;	Microsoft Confidential
 15748                                  ;	Copyright (C) Microsoft Corporation 1991
 15749                                  ;	All Rights Reserved.
 15750                                  ;
 15751                                  
 15752                                  ;**	DELETE.ASM - Low level routine for deleting files
 15753                                  ;----------------------------------------------------------------------------
 15754                                  ;		DOS_DELETE
 15755                                  ;		REN_DEL_Check
 15756                                  ;		FastOpen_Delete	       ; DOS 3.3
 15757                                  ;		FastOpen_Update	       ; DOS 3.3
 15758                                  
 15759                                  ;   Revision history:
 15760                                  ;
 15761                                  ;   A000  version 4.00	Jan. 1988
 15762                                  ;   A001  Fastopen Rename fix	April 1989
 15763                                  
 15764                                  ;Installed = TRUE
 15765                                  
 15766                                  ;	i_need	NoSetDir,BYTE
 15767                                  ;	i_need	Creating,BYTE
 15768                                  ;	i_need	DELALL,BYTE
 15769                                  ;	i_need	THISDPB,DWORD
 15770                                  ;	i_need	THISSFT,DWORD
 15771                                  ;	i_need	THISCDS,DWORD
 15772                                  ;	i_need	CURBUF,DWORD
 15773                                  ;	i_need	ATTRIB,BYTE
 15774                                  ;	i_need	SATTRIB,BYTE
 15775                                  ;	i_need	WFP_START,WORD
 15776                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15777                                  ;	i_need	NAME1,BYTE			 ;BN001
 15778                                  ;	i_need	FoundDel,BYTE
 15779                                  ;	i_need	AUXSTACK,BYTE
 15780                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15781                                  ;	i_need	JShare,DWORD
 15782                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15783                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15784                                  ;
 15785                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15786                                  ;
 15787                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15788                                  ;	i_need	DMAADD,DWORD
 15789                                  ;	i_need	RENAMEDMA,BYTE
 15790                                  
 15791                                  ;----------------------------------------------------------------------------
 15792                                  ;
 15793                                  ; Procedure Name : DOS_DELETE
 15794                                  ;
 15795                                  ; Inputs:
 15796                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15797                                  ;		terminated)
 15798                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15799                                  ;		( = -1 if current dir not involved, else
 15800                                  ;		 Points to first char after last "/" of current dir part)
 15801                                  ;	[THISCDS] Points to CDS being used
 15802                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15803                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15804                                  ; Function:
 15805                                  ;	Delete the specified file(s)
 15806                                  ; Outputs:
 15807                                  ;	CARRY CLEAR
 15808                                  ;		OK
 15809                                  ;	CARRY SET
 15810                                  ;	    AX is error code
 15811                                  ;		error_file_not_found
 15812                                  ;			Last element of path not found
 15813                                  ;		error_path_not_found
 15814                                  ;			Bad path (not in curr dir part if present)
 15815                                  ;		error_bad_curr_dir
 15816                                  ;			Bad path in current directory part of path
 15817                                  ;		error_access_denied
 15818                                  ;			Attempt to delete device or directory
 15819                                  ;		***error_sharing_violation***
 15820                                  ;			Deny both access required, generates an INT 24.
 15821                                  ;			This error is NOT returned. The INT 24H is generated,
 15822                                  ;			  and the file is ignored (not deleted). Delete will
 15823                                  ;			  simply continue on looking for more files.
 15824                                  ;			  Carry will NOT be set in this case.
 15825                                  ; DS preserved, others destroyed
 15826                                  ;
 15827                                  ;----------------------------------------------------------------------------
 15828                                  
 15829                                  FILEFOUND   equ 01h
 15830                                  FILEDELETED equ 10h
 15831                                  
 15832                                  
 15833                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15834                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15835                                  
 15836                                  DOS_DELETE:
 15837                                  
 15838                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15839                                  ;hkn; appropriately at this point.
 15840                                  
 15841 000025CF E8FCEC                  	call	TestNet
 15842 000025D2 7306                    	JNC	short LOCAL_DELETE
 15843                                  
 15844                                  ;IF NOT Installed
 15845                                  ;	transfer NET_DELETE
 15846                                  ;ELSE
 15847                                  	;MOV	AX,(MultNET SHL 8) | 19
 15848                                  	;INT	2FH
 15849                                  	;return
 15850                                  
 15851 000025D4 B81311                  	mov	ax,1113h
 15852 000025D7 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15853                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15854                                  			;		fully-qualified filename in DOS CS
 15855                                  			; SDA CDS pointer -> current directory structure for drive with file
 15856                                  			; Return: CF set on error
 15857 000025D9 C3                      	retn
 15858                                  ;ENDIF
 15859                                  
 15860                                  LOCAL_DELETE:
 15861 000025DA C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15862 000025DF E8B1ED                  	call	ECritDisk
 15863                                  	;mov	word [CREATING],0E500h
 15864 000025E2 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15865 000025E8 8B36[B205]              	MOV	SI,[WFP_START]
 15866                                  SKPNUL:
 15867 000025EC AC                      	LODSB
 15868 000025ED 08C0                    	OR	AL,AL
 15869 000025EF 75FB                    	JNZ	short SKPNUL		; go to end
 15870 000025F1 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15871 000025F4 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15872 000025F8 7506                    	JNZ	short TEST_QUEST
 15873 000025FA 807C022A                	CMP	BYTE [SI+2],"*"
 15874 000025FE 741F                    	JZ	short CHECK_ATTS
 15875                                  TEST_QUEST:
 15876 00002600 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15877 00002603 87FE                    	XCHG	DI,SI
 15878                                  
 15879 00002605 16                      	push	ss
 15880                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15881 00002606 07                      	pop	es ; 17/05/2019
 15882                                  
 15883 00002607 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15884 0000260A B90400                  	MOV	CX,4		; four sets of "??"
 15885 0000260D F3AF                    	REPE	SCASW
 15886 0000260F 751C                    	JNZ	short NOT_ALL
 15887 00002611 87FE                    	XCHG	DI,SI
 15888 00002613 AD                      	LODSW
 15889 00002614 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15890 00002617 7514                    	JNZ	short NOT_ALL
 15891 00002619 AD                      	LODSW
 15892 0000261A 3D3F3F                  	CMP	AX,"??"
 15893 0000261D 750E                    	JNZ	short NOT_ALL
 15894                                  CHECK_ATTS:
 15895 0000261F A0[6D05]                	MOV	AL,[SATTRIB]
 15896                                  	;and	al,1Fh
 15897 00002622 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15898                                  					; Look only at hidden bits
 15899                                  	;cmp	al,1Fh
 15900 00002624 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15901                                  					; All must be set
 15902 00002626 7505                    	JNZ	short NOT_ALL
 15903                                  
 15904                                  ; NOTE WARNING DANGER-----
 15905                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15906                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15907                                  
 15908 00002628 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15909                                  NOT_ALL:
 15910 0000262D C606[4C03]01            	MOV	byte [NoSetDir],1
 15911 00002632 E8D719                  	call	GetPathNoSet
 15912 00002635 7312                    	JNC	short Del_found
 15913 00002637 750B                    	JNZ	short _bad_path
 15914 00002639 08C9                    	OR	CL,CL
 15915 0000263B 7407                    	JZ	short _bad_path
 15916                                  No_file:
 15917 0000263D B80200                  	MOV	AX,error_file_not_found
 15918                                  ErrorReturn:
 15919 00002640 F9                      	STC
 15920                                  	;call	LCritDisk
 15921                                  	;retn
 15922                                  	; 18/12/2022
 15923 00002641 E96AED                  	jmp	LCritDisk
 15924                                  
 15925                                  _bad_path:
 15926 00002644 B80300                  	MOV	AX,error_path_not_found
 15927 00002647 EBF7                    	JMP	short ErrorReturn
 15928                                  
 15929                                  Del_found:
 15930 00002649 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15931 0000264B 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15932 00002650 7405                    	JZ	short NOT_DIR
 15933                                  Del_access_err:
 15934 00002652 B80500                  	MOV	AX,error_access_denied
 15935 00002655 EBE9                    	JMP	short ErrorReturn
 15936                                  
 15937                                  NOT_DIR:
 15938 00002657 08E4                    	OR	AH,AH			; Check if device name
 15939 00002659 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15940                                  
 15941                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15942                                  
 15943                                  DELFILE:
 15944 0000265B 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15945                                  
 15946                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15947                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15948                                  
 15949 00002660 1E                      	PUSH	DS
 15950 00002661 8A26[7F05]              	MOV	AH,[DELALL]
 15951 00002665 C53E[E205]              	LDS	DI,[CURBUF]
 15952                                  	
 15953                                  ;hkn; SS override
 15954 00002669 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 15955 0000266F 7509                    	JNZ	short DoDelete		; yes
 15956                                  
 15957 00002671 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 15958 00002675 7403                    	JZ	short DoDelete		; not read only
 15959                                  
 15960 00002677 1F                      	POP	DS
 15961 00002678 EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 15962                                  
 15963                                  DoDelete:
 15964 0000267A E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 15965 0000267D 7303                    	JNC	short DEL_SHARE_OK
 15966 0000267F 1F                      	POP	DS
 15967 00002680 EB2A                    	JMP	SHORT DELNXT		; Skip it
 15968                                  
 15969                                  DEL_SHARE_OK:
 15970                                  	; 17/05/2019 - Retro DOS v4.0
 15971                                  	; MSDOS 6.0
 15972                                  	;test	byte [di+5],40h
 15973 00002682 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15974                                  					;LB. if already dirty		  ;AN000;
 15975 00002686 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15976 00002688 E8FD35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 15977                                  	;or	byte [di+5],40h
 15978 0000268B 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15979                                  yesdirty:
 15980 0000268F 8827                    	mov	[bx],ah 
 15981                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 15982 00002691 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 15983 00002693 1F                      	POP	DS
 15984 00002694 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 15985                                  
 15986 00002699 83FB02                  	CMP	BX,2
 15987 0000269C 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 15988                                  	;cmp	bx,[es:bp+0Dh]
 15989 0000269E 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 15990 000026A2 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 15991                                  
 15992 000026A4 E83529                  	call	RELEASE 		; Free file data
 15993 000026A7 7252                    	JC	short No_fileJ
 15994                                  
 15995                                  ; DOS 3.3  FastOpen
 15996                                  
 15997 000026A9 E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 15998                                  
 15999                                  ; DOS 3.3  FastOpen
 16000                                  
 16001                                  DELNXT:
 16002 000026AC C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16003 000026B0 E8C218                  	call	GETENTRY		; Registers need to be reset
 16004 000026B3 7246                    	JC	short No_fileJ
 16005 000026B5 E8F617                  	call	NEXTENT
 16006 000026B8 73A1                    	JNC	short DELFILE
 16007 000026BA C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16008                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16009                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16010                                  	;;mov	al,[es:bp+0]
 16011                                  	; 15/12/2022
 16012 000026BE 268A4600                	MOV	AL,[ES:BP]
 16013 000026C2 E8BB34                  	call	FLUSHBUF
 16014 000026C5 7234                    	JC	short No_fileJ
 16015                                  ;
 16016                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16017                                  ;
 16018                                  ;   not found not deleted		file not found
 16019                                  ;   not found	  deleted		*** impossible ***
 16020                                  ;	found not deleted		access denied (read-only)
 16021                                  ;	found	  deleted		no error
 16022                                  ;
 16023 000026C7 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16024 000026CC 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16025                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16026                                  ; and to force the DOS to issue a media check.
 16027 000026CE F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16028 000026D3 741C                    	jz	short No_Set_Flag
 16029 000026D5 50                      	PUSH	AX
 16030 000026D6 06                      	PUSH	ES
 16031 000026D7 57                      	PUSH	DI
 16032 000026D8 C43E[A205]              	LES	DI,[THISCDS]
 16033 000026DC 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16034 000026DF 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16035 000026E2 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16036                                  	
 16037                                  	; MSDOS 6.0
 16038 000026E6 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16039 000026E8 E8DE04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16040                                  	 
 16041 000026EB E82431                  	call	FATREAD_CDS		; force media check
 16042 000026EE 5F                      	POP	DI
 16043 000026EF 07                      	POP	ES
 16044 000026F0 58                      	POP	AX
 16045                                  No_Set_Flag:
 16046                                  	;call	LCritDisk		; carry is clear
 16047                                  	;retn
 16048                                  	; 18/12/2022
 16049 000026F1 E9BAEC                  	jmp	LCritDisk
 16050                                  DelError:
 16051 000026F4 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16052 000026F9 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16053                                  No_fileJ:
 16054 000026FB E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16055                                  Del_access_errJ:
 16056 000026FE E951FF                  	JMP	Del_access_err ; 10/08/2018
 16057                                  
 16058                                  ; 08/08/2018 - Retro DOS v3.0
 16059                                  
 16060                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16061                                  ;---------------------------------------------------------------------------
 16062                                  ; Procedure Name : REN_DEL_Check
 16063                                  ;
 16064                                  ; Inputs:
 16065                                  ;	[THISDPB] set
 16066                                  ;	[CURBUF+2]:BX points to entry
 16067                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16068                                  ;	[WFP_Start] points to name
 16069                                  ; Function:
 16070                                  ;	Check for Exclusive access on given file.
 16071                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16072                                  ; Outputs:
 16073                                  ;	ES:BP = [THISDPB]
 16074                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16075                                  ;		last element will be loaded from the directory entry.  This is
 16076                                  ;		so the name given to the sharer doesn't have any meta chars in
 16077                                  ;		it.
 16078                                  ;	Carry set if sharing violation, INT 24H generated
 16079                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16080                                  ;		This is because input AX is preserved.
 16081                                  ;		Caller must set the error if needed.
 16082                                  ;	Carry clear
 16083                                  ;		OK
 16084                                  ; AX,DS,BX,SI,DI preserved
 16085                                  ;---------------------------------------------------------------------------
 16086                                  
 16087                                  REN_DEL_Check:
 16088                                  
 16089 00002701 1E                      	PUSH	DS
 16090 00002702 57                      	PUSH	DI
 16091 00002703 50                      	PUSH	AX
 16092 00002704 53                      	PUSH	BX
 16093 00002705 56                      	PUSH	SI		; Save CURBUF pointers
 16094                                  	
 16095 00002706 16                      	push	ss
 16096 00002707 07                      	pop	es
 16097                                  
 16098                                  ;hkn; context ES will assume ES to DOSDATA
 16099                                  ;hkn; ASSUME	ES:DOSGROUP
 16100                                  
 16101                                  ;hkn; SS override
 16102 00002708 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16103 0000270D 89DE                    	MOV	SI,BX
 16104                                  
 16105                                  ;hkn; SS override
 16106 0000270F 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16107 00002714 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16108 00002716 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16109 00002719 E852EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16110 0000271C 49                      	DEC	CX		; Don't include nul in count
 16111 0000271D 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16112 0000271F E86A47                  	call	SkipBack	; Back up one element
 16113 00002722 47                      	INC	DI		; Point to start of last element
 16114                                  
 16115                                  	; 17/05/2019 - Retro DOS v4.0
 16116                                  ;hkn; SS override
 16117                                  	; MSDOS 6.0
 16118 00002723 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16119                                  	;
 16120 00002728 E830FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16121 0000272B 5E                      	POP	SI		; Get back entry pointers
 16122 0000272C 5B                      	POP	BX
 16123 0000272D 53                      	PUSH	BX
 16124 0000272E 56                      	PUSH	SI		; Back on stack
 16125                                  	
 16126 0000272F 16                      	push	ss
 16127 00002730 1F                      	pop	ds
 16128                                  
 16129                                  ;hkn; context DS will assume ES to DOSDATA
 16130                                  ;hkn; ASSUME	DS:DOSGROUP
 16131                                  
 16132                                  ; Close the file if possible by us.
 16133                                  ;
 16134                                  ;if installed
 16135 00002731 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16136                                  ;else
 16137                                  ;	Call	ShCloseFile
 16138                                  ;endif
 16139 00002735 8C1E[A005]              	MOV	[THISSFT+2],DS
 16140                                  
 16141                                  ;hkn; AUXSTACK is in DOSDATA
 16142 00002739 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16143                                  				; Scratch space
 16144 0000273F 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16145 00002741 E81425                  	call	DOOPEN		; Fill in SFT for share check
 16146 00002744 C43E[9E05]              	LES	DI,[THISSFT]
 16147                                  	;mov	word [es:di+2],10h
 16148 00002748 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16149                                  				; requires exclusive access
 16150                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16151 0000274E 26C7050100              	mov	word [ES:DI],1
 16152 00002753 E85B4D                  	call	ShareEnter
 16153 00002756 720D                    	jc	short CheckDone
 16154 00002758 C43E[9E05]              	LES	DI,[THISSFT]
 16155                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16156 0000275C 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16157                                  	
 16158 00002761 E8484D                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16159 00002764 F8                      	CLC
 16160                                  CheckDone:
 16161 00002765 C42E[8A05]              	LES	BP,[THISDPB]
 16162 00002769 5E                      	POP	SI
 16163 0000276A 5B                      	POP	BX
 16164 0000276B 58                      	POP	AX
 16165 0000276C 5F                      	POP	DI
 16166 0000276D 1F                      	POP	DS
 16167 0000276E C3                      	retn
 16168                                  
 16169                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16170                                  ;---------------------------------------------------------------------------
 16171                                  ; Procedure Name : FastOpen_Delete
 16172                                  ; Inputs:
 16173                                  ;	None
 16174                                  ; Function:
 16175                                  ;	Call FastOpen to delete the dir info.
 16176                                  ; Outputs:
 16177                                  ;	None
 16178                                  ;---------------------------------------------------------------------------
 16179                                  
 16180                                  FastOpen_Delete:
 16181 0000276F 9C                      	PUSHF			; save flag
 16182 00002770 56                      	PUSH	SI		; save registers
 16183 00002771 53                      	PUSH	BX
 16184 00002772 50                      	PUSH	AX
 16185                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16186                                  ;hkn; SS override
 16187                                  	; 17/05/2019 - Retro DOS v4.0
 16188                                  	; MSDOS 6.0
 16189 00002773 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16190                                  	
 16191 00002778 B003                    	MOV	AL,FONC_delete	; al = 3
 16192                                  fastinvoke:
 16193                                  ;hkn; FastTable is in DOSDATA
 16194 0000277A BB[320D]                	MOV	BX,FastTable+2
 16195 0000277D FF1F                    	CALL	far [BX]	; call fastopen
 16196 0000277F 58                      	POP	AX		; restore registers
 16197 00002780 5B                      	POP	BX
 16198 00002781 5E                      	POP	SI
 16199 00002782 9D                      	POPF			; restore flag
 16200 00002783 C3                      	retn
 16201                                  
 16202                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16203                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16204                                  
 16205                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16206                                  ;---------------------------------------------------------------------------
 16207                                  ; PROCEDURE Name : FastOpen_Rename
 16208                                  ;
 16209                                  ; Inputs:
 16210                                  ;	 REN_WFP   = Path Name
 16211                                  ;	 NAME1	   = New Name
 16212                                  ; Function:
 16213                                  ;	Call FastOpen to rename the dir entry in the cache
 16214                                  ; Outputs:
 16215                                  ;	None
 16216                                  ;---------------------------------------------------------------------------
 16217                                  
 16218                                  FastOpen_Rename:
 16219                                  	; 17/05/2019 - Retro DOS v4.0
 16220                                  	; 08/08/2018 - Retro DOS v3.0
 16221                                  	; MSDOS 6.0
 16222 00002784 9C                      	PUSHF			;AN001 save flag
 16223 00002785 56                      	PUSH	SI		;AN001 save registers
 16224 00002786 57                      	PUSH	DI		;AN001
 16225 00002787 53                      	PUSH	BX		;AN001
 16226 00002788 50                      	PUSH	AX		;AN001
 16227                                  	;
 16228                                  ;hkn; SS override
 16229 00002789 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16230                                  
 16231                                  ;hkn; NAME1 is in DOSDATA
 16232 0000278E BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16233                                  	;mov	al,6
 16234 00002791 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16235                                  	
 16236                                  ;hkn; FastTable is in DOSDATA
 16237 00002793 BB[320D]                	MOV	BX,FastTable+2
 16238 00002796 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16239                                  	
 16240 00002798 58                      	POP	AX		; restore registers  ;AN001
 16241 00002799 5B                      	POP	BX				     ;AN001
 16242 0000279A 5F                      	POP	DI				     ;AN001
 16243 0000279B 5E                      	POP	SI				     ;AN001
 16244 0000279C 9D                      	POPF			; restore flag	     ;AN001
 16245 0000279D C3                      	retn					     ;AN001
 16246                                  
 16247                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16248                                  ;---------------------------------------------------------------------------
 16249                                  ; Procedure Name : FastOpen_Update
 16250                                  ;
 16251                                  ; Inputs:
 16252                                  ;	DL     drive number (A=0,B=1,,,)
 16253                                  ;	CX     first cluster #
 16254                                  ;	AH     0 updates dir entry
 16255                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16256                                  ;	ES:DI  directory entry
 16257                                  ; Function:
 16258                                  ;	Call FastOpen to update the dir info.
 16259                                  ; Outputs:
 16260                                  ;	None
 16261                                  ;---------------------------------------------------------------------------
 16262                                  
 16263                                  FastOpen_Update:
 16264 0000279E 9C                      	PUSHF			; save flag
 16265 0000279F 56                      	PUSH	SI
 16266 000027A0 53                      	PUSH	BX		; save regs
 16267 000027A1 50                      	PUSH	AX
 16268 000027A2 B004                    	MOV	AL,FONC_update	; al = 4
 16269 000027A4 EBD4                    	JMP	short fastinvoke
 16270                                  
 16271                                  	; 17/05/2019
 16272                                  
 16273                                  	; MSDOS 6.0
 16274                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16275                                  ;---------------------------------------------------------------------------
 16276                                  Fast_Dispatch:
 16277                                  ;hkn; FastTable is in DOSDATA
 16278 000027A6 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16279                                  ;hkn; use SS override
 16280 000027A9 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16281 000027AC C3                      	retn
 16282                                  
 16283                                  ;============================================================================
 16284                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16285                                  ;============================================================================
 16286                                  ; 08/08/2018 - Retro DOS v3.0
 16287                                  ; 17/05/2019 - Retro DOS v4.0
 16288                                  
 16289                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16290                                  ;	NAME	DOS_RENAME
 16291                                  
 16292                                  ;**	Low level routine for renaming files
 16293                                  ;----------------------------------------------------------------------------
 16294                                  ;	DOS_RENAME
 16295                                  ;
 16296                                  ;	Modification history:
 16297                                  ;
 16298                                  ;	    Created: ARR 30 March 1983
 16299                                  
 16300                                  ;----------------------------------------------------------------------------
 16301                                  ;
 16302                                  ; Procedure Name : DOS_RENAME
 16303                                  ;
 16304                                  ; Inputs:
 16305                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16306                                  ;		chars, NUL terminated)
 16307                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16308                                  ;		( = -1 if current dir not involved, else
 16309                                  ;		 Points to first char after last "/" of current dir part)
 16310                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16311                                  ;		chars, NUL terminated)
 16312                                  ;	[THISCDS] Points to CDS being used
 16313                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16314                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16315                                  ; Function:
 16316                                  ;	Rename the specified file(s)
 16317                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16318                                  ; Outputs:
 16319                                  ;	CARRY CLEAR
 16320                                  ;	    OK
 16321                                  ;	CARRY SET
 16322                                  ;	    AX is error code
 16323                                  ;		error_file_not_found
 16324                                  ;			No match for source, or dest path invalid
 16325                                  ;		error_not_same_device
 16326                                  ;			Source and dest are on different devices
 16327                                  ;		error_access_denied
 16328                                  ;			Directory specified (not simple rename),
 16329                                  ;			Device name given, Destination exists.
 16330                                  ;			NOTE: In third case some renames may have
 16331                                  ;			 been done if metas.
 16332                                  ;		error_path_not_found
 16333                                  ;			Bad path (not in curr dir part if present)
 16334                                  ;			SOURCE ONLY
 16335                                  ;		error_bad_curr_dir
 16336                                  ;			Bad path in current directory part of path
 16337                                  ;			SOURCE ONLY
 16338                                  ;		error_sharing_violation
 16339                                  ;			Deny both access required, generates an INT 24.
 16340                                  ; DS preserved, others destroyed
 16341                                  ;
 16342                                  ;----------------------------------------------------------------------------
 16343                                  
 16344                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16345                                  
 16346                                  DOS_RENAME:
 16347                                  
 16348                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16349                                  ;hkn; at this point to DOSDATA.
 16350                                  
 16351 000027AD E81EEB                  	call	TestNet
 16352 000027B0 7306                    	JNC	short LOCAL_RENAME
 16353                                  
 16354                                  ;IF NOT Installed
 16355                                  ;	transfer NET_RENAME
 16356                                  ;ELSE
 16357                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16358                                  	;INT	2FH
 16359                                  	;return
 16360                                  
 16361 000027B2 B81111                  	mov     ax, 1111h
 16362 000027B5 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16363                                  			; SS = DS = DOS CS, 
 16364                                  			; SDA first filename pointer = offset of fully-qualified old name
 16365                                  			; SDA CDS pointer -> current directory
 16366                                  			; Return: CF set on error
 16367 000027B7 C3                      	retn
 16368                                  ;ENDIF
 16369                                  
 16370                                  LOCAL_RENAME:
 16371 000027B8 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16372 000027BD 8B36[B205]              	MOV	SI,[WFP_START]
 16373 000027C1 8B3E[B405]              	MOV	DI,[REN_WFP]
 16374 000027C5 8A04                    	MOV	AL,[SI]
 16375 000027C7 8A25                    	MOV	AH,[DI]
 16376 000027C9 0D2020                  	OR	AX,2020H		; Lower case
 16377 000027CC 38E0                    	CMP	AL,AH
 16378 000027CE 7405                    	JZ	short SAMEDRV
 16379 000027D0 B81100                  	MOV	AX,error_not_same_device ; 11h
 16380 000027D3 F9                      	STC
 16381 000027D4 C3                      	retn
 16382                                  
 16383                                  SAMEDRV:
 16384 000027D5 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16385 000027D9 FF36[2C03]              	PUSH	WORD [DMAADD]
 16386 000027DD 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16387                                  
 16388                                  ;hkn; RENAMEDMA is in DOSDATA
 16389 000027E1 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16390 000027E7 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16391 000027EC E8A4EB                  	call	ECritDisk
 16392 000027EF E8FA05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16393                                  					;    points to entry
 16394 000027F2 7314                    	JNC	short Check_Dev
 16395 000027F4 83F812                  	CMP	AX,error_no_more_files ; 12h
 16396 000027F7 7503                    	JNZ	short GOTERR
 16397 000027F9 B80200                  	MOV	AX,error_file_not_found ; 2
 16398                                  GOTERR:
 16399 000027FC F9                      	STC
 16400                                  RENAME_POP:
 16401 000027FD 8F06[2C03]              	POP	WORD [DMAADD]
 16402 00002801 8F06[2E03]              	POP	WORD [DMAADD+2]
 16403                                  	;call	LCritDisk
 16404                                  	;retn
 16405                                  	; 16/12/2022
 16406 00002805 E9A6EB                  	jmp	LCritDisk
 16407                                  
 16408                                  Check_Dev:
 16409                                  	; 17/05/2019 - Retro DOS v4.0
 16410                                  	;mov	ax,5
 16411 00002808 B80500                  	MOV	AX,error_access_denied	; Assume error
 16412                                  	
 16413                                  	; MSDOS 6.0
 16414 0000280B 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16415 0000280C C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16416                                  	;add	si,21
 16417 00002810 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16418                                  	;test	byte [si+11],10h
 16419 00002813 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16420 00002817 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16421 00002819 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16422 0000281D E8CCFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16423                                  notdir:
 16424 00002820 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16425 00002821 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16426                                  
 16427                                  	; MSDOS 3.3 & MSDOS 6.0
 16428 00002823 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16429 00002828 75D2                    	JNZ	short GOTERR
 16430                                  
 16431                                  ; At this point a source has been found. There is search continuation info (a
 16432                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16433                                  ; directory entry found.
 16434                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16435                                  ; throughout the RENAME since it is known at this point that the source and
 16436                                  ; destination are both on the same device.
 16437                                  ; [SATTRIB] is also set.
 16438                                  
 16439 0000282A 89DE                    	MOV	SI,BX
 16440                                  	;add	si,26
 16441 0000282C 83C61A                  	ADD	SI,dir_entry.dir_first
 16442 0000282F E8CFFE                  	call	REN_DEL_Check
 16443 00002832 7305                    	JNC	short REN_OK1
 16444 00002834 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16445 00002837 EBC4                    	JMP	short RENAME_POP
 16446                                  
 16447                                  ;------------------------------------------------------------------------------
 16448                                  ; Check if the source is a file or directory. If file, delete the entry
 16449                                  ; from the Fastopen cache. If directory, rename it later
 16450                                  ;------------------------------------------------------------------------------
 16451                                  
 16452                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16453                                  	; MSDOS 6.0
 16454 00002839 56                      	PUSH	SI
 16455 0000283A C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16456                                  	;add	si,21
 16457 0000283E 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16458                                  	;test	byte [si+11],10h
 16459 00002841 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16460 00002845 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16461 00002847 5E                      	POP	SI			;BN00X
 16462 00002848 EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16463                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16464 0000284A 5E                      	POP	SI
 16465                                  
 16466                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16467 0000284B E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16468                                  SWAP_SOURCE:
 16469                                  	; MSDOS 3.3
 16470                                  	;MOV	SI,[REN_WFP]
 16471                                  	;MOV	[WFP_START],SI
 16472                                  	; MSDOS 6.0
 16473 0000284E A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16474 00002851 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16475 00002855 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16476 00002859 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16477                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16478 0000285C C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16479                                  	;mov	word [CREATING],0E5FFh
 16480 00002862 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16481                                  					; A rename is like a CREATE_NEW as far
 16482                                  					; as the destination is concerned.
 16483 00002868 E8A117                  	call	GetPathNoSet
 16484                                  
 16485                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16486                                  ;   since no files match the destination name. If it fails for any other
 16487                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16488                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16489                                  ;   if the rename should fail because we haven't built an explicit name by
 16490                                  ;   substituting for the meta chars in it. In this case the destination file
 16491                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16492                                  ;   in the directory entry part.
 16493                                  	
 16494 0000286B 7223                    	JC	short NODEST
 16495                                  	
 16496                                  	; MSDOS 6.0
 16497                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16498                                  	; !! MSDOS 3.3 !!
 16499                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16500                                  
 16501 0000286D 08E4                    	OR	AH,AH			; Device?
 16502 0000286F 792C                    	JNS	short SAVEDEST		; No, continue
 16503                                  BAD_ACC:
 16504 00002871 B80500                  	MOV	AX,error_access_denied
 16505 00002874 F9                      	STC
 16506                                  RENAME_CLEAN:
 16507 00002875 9C                      	PUSHF				; Save carry state
 16508 00002876 50                      	PUSH	AX			; and error code (if carry set)
 16509 00002877 A0[7605]                	MOV	AL,[THISDRV]
 16510 0000287A E80333                  	call	FLUSHBUF
 16511 0000287D 58                      	POP	AX
 16512 0000287E 803E[4A03]00            	CMP	byte [FAILERR],0
 16513 00002883 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16514 00002885 9D                      	POPF
 16515 00002886 E974FF                  	JMP	RENAME_POP
 16516                                  
 16517                                  BAD_ERR:
 16518 00002889 58                      	POP	AX			; Saved flags
 16519                                  	; 16/12/202
 16520                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16521                                  BAD_PATH: ; *
 16522 0000288A B80300                  	MOV	AX,error_path_not_found
 16523 0000288D E96CFF                  	JMP	GOTERR
 16524                                  
 16525                                  NODEST:
 16526 00002890 75F8                    	JNZ	short BAD_PATH
 16527 00002892 803E[4A03]00            	CMP	byte [FAILERR],0
 16528 00002897 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16529                                  					; because user FAILed on I 24
 16530                                  	; 14/11/2022
 16531 00002899 08C9                    	OR	CL,CL
 16532                                  	;JNZ	short SAVEDEST
 16533                                  	; 17/05/2019
 16534 0000289B 74ED                    	jz	short BAD_PATH ; *
 16535                                  ;BAD_PATH: ; *
 16536                                  ;	MOV	AX,error_path_not_found
 16537                                  ;	;STC
 16538                                  ;	;JMP	RENAME_POP
 16539                                  ;	; 17/05/2019
 16540                                  ;	jmp	GOTERR 
 16541                                  
 16542                                  ; 16/12/2022
 16543                                  %if 0
 16544                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16545                                  	or	cl,cl
 16546                                  	jnz	short SAVEDEST
 16547                                  	;jz	short BAD_PATH ; *
 16548                                  BAD_PATH: ; *
 16549                                  	;mov	ax,3
 16550                                  	mov	ax,error_path_not_found
 16551                                  	stc
 16552                                  	jmp	RENAME_POP
 16553                                  %endif
 16554                                  
 16555                                  SAVEDEST:
 16556 0000289D 16                      	push	ss
 16557 0000289E 07                      	pop	es
 16558                                  
 16559                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16560 0000289F BF[5705]                	MOV	DI,NAME2
 16561 000028A2 BE[4B05]                	MOV	SI,NAME1
 16562                                  
 16563 000028A5 B90B00                  	MOV	CX,11
 16564 000028A8 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16565 000028AA A1[C205]                	MOV	AX,[DIRSTART]
 16566 000028AD A3[6405]                	MOV	[DESTSTART],AX
 16567                                  BUILDDEST:
 16568 000028B0 16                      	push	ss
 16569 000028B1 07                      	pop	es			; needed due to JMP BUILDDEST below
 16570                                  
 16571                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16572 000028B2 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16573 000028B5 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16574 000028B8 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16575                                  
 16576 000028BB B90B00                  	MOV	CX,11
 16577                                  
 16578                                  	; 17/05/2019 - Retro DOS v4.0
 16579                                  	
 16580                                  	; MSDOS 6.0
 16581 000028BE E81401                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16582                                  
 16583                                  	; MSDOS 3.3
 16584                                  
 16585                                  ; 08/08/2018 - Retro DOS v3.0
 16586                                  ; MSDOS 6.0 
 16587                                  ;---------------------------------------------------------------------------
 16588                                  ;Procedure: NEW_RENAME
 16589                                  ;
 16590                                  ;Input: DS:SI -> raw string with ?
 16591                                  ;	ES:DI -> destination string
 16592                                  ;	DS:BX -> source string
 16593                                  ;Function: replace ? chars of raw string with chars in source string and
 16594                                  ;	   put in destination string
 16595                                  ;Output: ES:DI-> new string
 16596                                  ;---------------------------------------------------------------------------
 16597                                  ;
 16598                                  ;NEW_RENAME:
 16599                                  ;NEWNAM:
 16600                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16601                                  ;	LODSB
 16602                                  ;	CMP	AL,"?"
 16603                                  ;	JNZ	short NOCHG
 16604                                  ;	MOV	AL,[BX] 		; Get replace char
 16605                                  ;NOCHG:
 16606                                  ;	STOSB
 16607                                  ;	INC	BX			; Next replace char
 16608                                  ;	LOOP	NEWNAM
 16609                                  ;	; MSDOS 6.0
 16610                                  ;	;retn
 16611                                  
 16612                                  	; MSDOS 3.3 & MSDOS 6.0
 16613                                  	;mov	byte [ATTRIB],16h
 16614 000028C1 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16615 000028C6 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16616 000028CB E8FB19                  	call	DEVNAME 		; Check if we built a device name
 16617 000028CE 73A1                    	JNC	short BAD_ACC
 16618 000028D0 8B1E[6405]              	MOV	BX,[DESTSTART]
 16619 000028D4 C42E[8A05]              	LES	BP,[THISDPB]
 16620 000028D8 E8CB16                  	call	SETDIRSRCH		; Reset search to start of dir
 16621 000028DB 7294                    	JC	short BAD_ACC 		; Screw up
 16622 000028DD E87D15                  	call	FINDENTRY		; See if new name already exists
 16623 000028E0 738F                    	JNC	short BAD_ACC 		; Error if found
 16624 000028E2 803E[4A03]00            	CMP	byte [FAILERR],0
 16625 000028E7 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16626 000028E9 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16627 000028EC 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16628 000028F0 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16629                                  
 16630                                  	;mov	al,[RENAMEDMA+32]
 16631 000028F2 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16632 000028F5 A810                    	TEST	AL,attr_directory ; 10h
 16633 000028F7 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16634                                  					; otherwise the . and .. entries get
 16635                                  					; wiped.
 16636 000028F9 A2[6B05]                	MOV	[ATTRIB],AL
 16637 000028FC 8C1E[A005]              	MOV	[THISSFT+2],DS
 16638                                  
 16639                                  ;hkn; AUXSTACK is in DOSDATA
 16640                                  	;mov	si,[RENAMEDMA+145h]
 16641 00002900 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16642 00002903 8936[9E05]              	MOV	[THISSFT],SI
 16643                                  	;mov	word [SI+2],2
 16644 00002907 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16645 0000290C 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16646 0000290E E8AE21                  	call	RENAME_MAKE		; This is in mknode
 16647 00002911 7303                    	JNC	short GOT_DEST
 16648                                  BAD_ACCJ:
 16649 00002913 E95BFF                  	JMP	BAD_ACC
 16650                                  
 16651                                  GOT_DEST:
 16652 00002916 53                      	push	bx
 16653 00002917 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16654 0000291B E88E4B                  	call	ShareEnd		; we need to remove it.
 16655 0000291E 5B                      	pop	bx
 16656                                  
 16657                                  ; A zero length entry with the correct new name has now been made at
 16658                                  ;   [CURBUF+2]:BX.
 16659                                  
 16660 0000291F C43E[E205]              	LES	DI,[CURBUF]
 16661                                  
 16662                                  	; MSDOS 6.0
 16663                                  	;test	byte [es:di+5],40h
 16664 00002923 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16665                                  					;LB. if already dirty		  ;AN000;
 16666 00002928 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16667 0000292A E85B33                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16668                                  	;or	byte [es:di+5],40h
 16669 0000292D 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16670                                  yesdirty1:
 16671 00002932 89DF                    	MOV	DI,BX
 16672                                  	;add	di,11
 16673 00002934 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16674                                  
 16675                                  ;hkn; RENAMEDMA is in DOSDATA
 16676                                  	;mov	si,[RENAMEDMA+32]
 16677 00002937 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16678                                  	;mov	cx,21
 16679 0000293A B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16680 0000293D F3A4                    	REP	MOVSB
 16681 0000293F E87D00                  	CALL	GET_SOURCE
 16682 00002942 7277                    	JC	short RENAME_OVER
 16683 00002944 89DF                    	MOV	DI,BX
 16684 00002946 8E06[E405]              	MOV	ES,[CURBUF+2]
 16685 0000294A B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16686 0000294C AA                      	STOSB				; "free" the source
 16687 0000294D EB13                    	JMP	SHORT DIRTY_IT
 16688                                  
 16689                                  SIMPLE_RENAME:
 16690 0000294F E86D00                  	CALL	GET_SOURCE		; Get the source back
 16691 00002952 7267                    	JC	short RENAME_OVER
 16692 00002954 89DF                    	MOV	DI,BX
 16693 00002956 8E06[E405]              	MOV	ES,[CURBUF+2]
 16694                                  
 16695                                  ;hkn; NAME1 is in DOSDATA
 16696 0000295A BE[4B05]                	MOV	SI,NAME1		; New Name
 16697 0000295D B90B00                  	MOV	CX,11
 16698 00002960 F3A4                    	REP	MOVSB
 16699                                  DIRTY_IT:
 16700 00002962 8B3E[E205]              	MOV	DI,[CURBUF]
 16701                                  
 16702                                  	; MSDOS 6.0
 16703 00002966 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16704                                  					;LB. if already dirty		  ;AN000;
 16705 0000296B 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16706 0000296D E81833                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16707                                  	
 16708 00002970 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16709                                  
 16710                                  ;------------------------------------------------------------------------------
 16711                                  ; Check if the source is a directory of file. If directory rename it to the
 16712                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16713                                  ; previously deleted.
 16714                                  ;------------------------------------------------------------------------------
 16715                                  
 16716                                  yesdirty2:
 16717                                  	; MSDOS 6.0
 16718 00002975 56                      	PUSH	SI
 16719 00002976 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16720 0000297A 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16721 0000297D F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16722 00002981 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16723 00002983 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16724 00002986 5E                      	POP	SI
 16725 00002987 EB01                    	JMP	SHORT NOT_DIRTY1
 16726                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16727 00002989 5E                      	POP	SI
 16728                                  NOT_DIRTY1:				;;BN00X
 16729                                  NEXT_SOURCE:
 16730                                  ;hkn; RENAMEDMA is in DOSDATA
 16731 0000298A BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16732                                  
 16733                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16734                                  ; to enter it before going to RENAME_Next.
 16735                                  
 16736 0000298D E803EA                  	call	ECritDisk
 16737 00002990 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16738                                  				  ;  to FF when we made the prev new file).
 16739 00002995 E88C05                  	call	RENAME_NEXT
 16740                                  
 16741                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16742                                  ; we were before.
 16743                                  
 16744 00002998 7221                    	JC	short RENAME_OVER
 16745                                  
 16746                                  	;lea	si,[bx+26]
 16747 0000299A 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16748 0000299D E861FD                  	call	REN_DEL_Check
 16749 000029A0 7306                    	JNC	short REN_OK2
 16750 000029A2 B82000                  	MOV	AX,error_sharing_violation ; 20h
 16751 000029A5 E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16752                                  
 16753                                  ;------------------------------------------------------------------------------
 16754                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16755                                  ; if directory, rename directory name in the Fastopen cache.
 16756                                  ;-----------------------------------------------------------------------------
 16757                                  
 16758                                  REN_OK2:
 16759                                  	; MSDOS 6.0
 16760                                  	;mov	al,[RERNAMEDMA+32]
 16761 000029A8 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16762                                  	;test	al,10h
 16763 000029AB A810                    	TEST	AL,attr_directory	;;BN00X directory
 16764 000029AD 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16765                                  	
 16766                                  	; MSDOS 3.3 & MSDOS 6.0
 16767 000029AF E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16768 000029B2 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16769                                  
 16770                                  	; MSDOS 6.0
 16771                                  Ren_Directory:
 16772 000029B5 E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16773 000029B8 E9F5FE                  	JMP	BUILDDEST
 16774                                  
 16775                                  RENAME_OVER:
 16776 000029BB F8                      	CLC
 16777 000029BC E9B6FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16778                                  
 16779                                  ;----------------------------------------------------------------------------
 16780                                  ; Procedure: GET_SOURCE
 16781                                  ;
 16782                                  ; Inputs:
 16783                                  ;	RENAMEDMA has source info
 16784                                  ; Function:
 16785                                  ;	Re-find the source
 16786                                  ; Output:
 16787                                  ;	[CURBUF] set
 16788                                  ;	[CURBUF+2]:BX points to entry
 16789                                  ;	Carry set if error (currently user FAILed to I 24)
 16790                                  ; DS preserved, others destroyed
 16791                                  ;----------------------------------------------------------------------------
 16792                                  
 16793                                  GET_SOURCE:
 16794 000029BF 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16795 000029C3 C42E[8A05]              	LES	BP,[THISDPB]
 16796 000029C7 E8DC15                  	call	SETDIRSRCH
 16797 000029CA 7214                    	JC	short gs_ret_label	; retc
 16798 000029CC E8D918                  	call	STARTSRCH
 16799 000029CF A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16800                                  	;call	GETENT
 16801                                  	; 18/12/2022
 16802 000029D2 E9A315                  	jmp	GETENT
 16803                                  ;gs_ret_label:
 16804                                  	;retn
 16805                                  
 16806                                  ; MSDOS 6.0 
 16807                                  ;---------------------------------------------------------------------------
 16808                                  ;Procedure: NEW_RENAME
 16809                                  ;
 16810                                  ;Input: DS:SI -> raw string with ?
 16811                                  ;	ES:DI -> destination string
 16812                                  ;	DS:BX -> source string
 16813                                  ;Function: replace ? chars of raw string with chars in source string and
 16814                                  ;	   put in destination string
 16815                                  ;Output: ES:DI-> new string
 16816                                  ;---------------------------------------------------------------------------
 16817                                  
 16818                                  NEW_RENAME:
 16819                                  	; 17/05/2019 - Retro DOS v4.0
 16820                                  NEWNAM:
 16821                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16822 000029D5 AC                      	LODSB
 16823 000029D6 3C3F                    	CMP	AL,"?" ; 3Fh
 16824 000029D8 7502                    	JNZ	short NOCHG
 16825 000029DA 8A07                    	MOV	AL,[BX] 		; Get replace char
 16826                                  NOCHG:
 16827 000029DC AA                      	STOSB
 16828 000029DD 43                      	INC	BX			; Next replace char
 16829 000029DE E2F5                    	LOOP	NEWNAM
 16830                                  	; MSDOS 6.0
 16831                                  gs_ret_label:	; 18/12/2022
 16832 000029E0 C3                      	retn
 16833                                  
 16834                                  ;============================================================================
 16835                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16836                                  ;============================================================================
 16837                                  ; 08/08/2018 - Retro DOS v3.0
 16838                                  ; 17/05/2019 - Retro DOS v4.0
 16839                                  
 16840                                  ;**	Low level routines for returning file information and setting file
 16841                                  ;	attributes
 16842                                  ;
 16843                                  ;	GET_FILE_INFO
 16844                                  ;	SET_FILE_ATTRIBUTE
 16845                                  ;
 16846                                  ;	Modification history:
 16847                                  ;
 16848                                  ;	    Created: ARR 30 March 1983
 16849                                  ;
 16850                                  ;	M025: Return access_denied if attempting to set
 16851                                  ;	      attribute of root directory.
 16852                                  ;
 16853                                  
 16854                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16855                                  
 16856                                  ;---------------------------------------------------------------------------
 16857                                  ; Procedure Name : GET_FILE_INFO
 16858                                  ;
 16859                                  ; Inputs:
 16860                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16861                                  ;		terminated)
 16862                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16863                                  ;		( = -1 if current dir not involved, else
 16864                                  ;		 Points to first char after last "/" of current dir part)
 16865                                  ;	[THISCDS] Points to CDS being used
 16866                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16867                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16868                                  ; Function:
 16869                                  ;	Get Information about a file
 16870                                  ; Returns:
 16871                                  ;	CARRY CLEAR
 16872                                  ;	    AX = Attribute of file
 16873                                  ;	    CX = Time stamp of file
 16874                                  ;	    DX = Date stamp of file
 16875                                  ;	    BX:DI = Size of file (32 bit)
 16876                                  ;	CARRY SET
 16877                                  ;	    AX is error code
 16878                                  ;		error_file_not_found
 16879                                  ;			Last element of path not found
 16880                                  ;		error_path_not_found
 16881                                  ;			Bad path (not in curr dir part if present)
 16882                                  ;		error_bad_curr_dir
 16883                                  ;			Bad path in current directory part of path
 16884                                  ; DS preserved, others destroyed
 16885                                  ;---------------------------------------------------------------------------
 16886                                  
 16887                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16888                                  
 16889                                  GET_FILE_INFO:
 16890                                  
 16891                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16892                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16893                                  
 16894 000029E1 E8EAE8                  	call	TestNet
 16895 000029E4 7306                    	JNC	short LOCAL_INFO
 16896                                  
 16897                                  ;IF NOT Installed
 16898                                  ;	transfer NET_GET_FILE_INFO
 16899                                  ;ELSE
 16900                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 16901                                  ;	INT	2FH
 16902                                  ;	return
 16903                                  
 16904 000029E6 B80F11                  	mov     ax, 110Fh
 16905 000029E9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 16906                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16907                                  			; SDA CDS pointer -> current directory
 16908                                  			; Return: CF set on error, AX = file attributes
 16909 000029EB C3                      	retn
 16910                                  ;ENDIF
 16911                                  
 16912                                  LOCAL_INFO:
 16913 000029EC E8A4E9                  	call	ECritDisk
 16914 000029EF C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16915                                  	; MSDOS 3.3
 16916                                  	;call	GETPATH
 16917                                  	; MSDOS 6.0
 16918 000029F4 E8D800                  	call	GET_FAST_PATH
 16919                                  	; MSDOS 3.3 & MSDOS 6.0
 16920 000029F7 7312                    	JNC	short info_check_dev
 16921                                  NO_PATH:
 16922 000029F9 750B                    	JNZ	short bad_path1
 16923 000029FB 08C9                    	OR	CL,CL
 16924 000029FD 7407                    	JZ	short bad_path1
 16925                                  info_no_file:
 16926 000029FF B80200                  	MOV	AX,error_file_not_found
 16927                                  BadRet:
 16928 00002A02 F9                      	STC
 16929                                  JustRet:
 16930                                  	;call	LCritDisk
 16931                                  	;retn
 16932                                  	; 18/12/2022
 16933 00002A03 E9A8E9                  	jmp	LCritDisk
 16934                                  
 16935                                  bad_path1:
 16936 00002A06 B80300                  	MOV	AX,error_path_not_found
 16937 00002A09 EBF7                    	jmp	short BadRet
 16938                                  
 16939                                  info_check_dev:
 16940 00002A0B 08E4                    	OR	AH,AH
 16941 00002A0D 78F0                    	JS	short info_no_file	; device
 16942                                  
 16943                                  	; MSDOS 6.0
 16944                                  ;SR;
 16945                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16946                                  ;for a root dir
 16947                                  
 16948 00002A0F 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16949 00002A14 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 16950                                  
 16951 00002A16 30E4                    	xor	ah,ah
 16952 00002A18 B010                    	mov	al,attr_directory ; 10h
 16953                                  	;clc
 16954                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16955                                  	; (DOSCODE:683Eh)
 16956                                  	; 16/12/2022
 16957                                  	;clc
 16958 00002A1A EBE7                    	jmp	short JustRet
 16959                                  
 16960                                  not_root:
 16961                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16962 00002A1C 1E                      	PUSH	DS
 16963 00002A1D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 16964 00002A21 89DE                    	MOV	SI,BX
 16965 00002A23 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 16966 00002A25 89DF                    	MOV	DI,BX
 16967                                  	;mov	cx,[si+16h]
 16968 00002A27 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 16969                                  	;mov	dx,[si+18h]
 16970 00002A2A 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 16971 00002A2D 30E4                    	XOR	AH,AH
 16972                                  	;mov	al,[si+0Bh]
 16973 00002A2F 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 16974                                  	;test	al,10h
 16975 00002A32 A810                    	TEST	AL,attr_directory
 16976 00002A34 7506                    	JNZ	short NO_SIZE
 16977                                  	;mov	di,[si+1Ch]
 16978 00002A36 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 16979                                  	;mov	bx,[si+1Eh]
 16980 00002A39 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 16981                                  NO_SIZE:
 16982 00002A3C 1F                      	POP	DS
 16983                                  	;CLC
 16984                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16985                                  	; (DOSCODE:6864h)
 16986                                  	; 16/12/2022
 16987                                  	;clc
 16988 00002A3D EBC4                    	jmp	short JustRet
 16989                                  
 16990                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 16991                                  ;-------------------------------------------------------------------------------
 16992                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 16993                                  ; Inputs:
 16994                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16995                                  ;		terminated)
 16996                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16997                                  ;		( = -1 if current dir not involved, else
 16998                                  ;		 Points to first char after last "/" of current dir part)
 16999                                  ;	[THISCDS] Points to CDS being used
 17000                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17001                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17002                                  ;	AX is new attributes to give to file
 17003                                  ; Function:
 17004                                  ;	Set File Attributes
 17005                                  ; Returns:
 17006                                  ;	CARRY CLEAR
 17007                                  ;	    No error
 17008                                  ;	CARRY SET
 17009                                  ;	    AX is error code
 17010                                  ;		error_file_not_found
 17011                                  ;			Last element of path not found
 17012                                  ;		error_path_not_found
 17013                                  ;			Bad path (not in curr dir part if present)
 17014                                  ;		error_bad_curr_dir
 17015                                  ;			Bad path in current directory part of path
 17016                                  ;		error_access_denied
 17017                                  ;			Attempt to set an attribute which cannot be set
 17018                                  ;			(attr_directory, attr_volume_ID)
 17019                                  ;		error_sharing_violation
 17020                                  ;			Sharing mode of file did not allow the change
 17021                                  ;			(this request requires exclusive write/read access)
 17022                                  ;			(INT 24H generated)
 17023                                  ; DS preserved, others destroyed
 17024                                  ;----------------------------------------------------------------------------
 17025                                  
 17026                                  SET_FILE_ATTRIBUTE:
 17027                                  
 17028                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17029                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17030                                  
 17031 00002A3F A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17032 00002A42 7414                    	JZ	short set_look
 17033                                  _BAD_ACC:
 17034 00002A44 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17035 00002A49 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17036 00002A4E C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17037 00002A53 B80500                  	MOV	AX,error_access_denied ; 5
 17038 00002A56 F9                      	STC
 17039 00002A57 C3                      	retn
 17040                                  
 17041                                  set_look:
 17042 00002A58 E873E8                  	call	TestNet
 17043 00002A5B 7308                    	JNC	short LOCAL_SET
 17044                                  
 17045                                  ;IF NOT Installed
 17046                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17047                                  ;ELSE
 17048 00002A5D 50                      	PUSH	AX
 17049                                  	
 17050                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17051                                  	;INT	2FH
 17052                                  
 17053 00002A5E B80E11                  	mov     ax, 110Eh
 17054 00002A61 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17055                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17056                                  			; SDA CDS pointer -> current directory
 17057                                  			; STACK: WORD new file attributes
 17058                                  			; Return: CF set on error
 17059                                  
 17060 00002A63 5B                      	POP	BX			; clean stack
 17061 00002A64 C3                      	retn
 17062                                  ;ENDIF
 17063                                  
 17064                                  LOCAL_SET:
 17065 00002A65 E82BE9                  	call	ECritDisk
 17066 00002A68 50                      	PUSH	AX			; Save new attributes
 17067 00002A69 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17068 00002A6E E89515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17069 00002A71 7303                    	JNC	short set_check_device
 17070 00002A73 5B                      	POP	BX			; Clean stack (don't zap AX)
 17071 00002A74 EB83                    	JMP	short NO_PATH
 17072                                  
 17073                                  set_check_device:
 17074 00002A76 08E4                    	OR	AH,AH
 17075 00002A78 7906                    	JNS	short set_check_share
 17076 00002A7A 58                      	POP	AX
 17077 00002A7B E830E9                  	call	LCritDisk
 17078 00002A7E EBC4                    	JMP	short _BAD_ACC 		; device
 17079                                  
 17080                                  set_check_share:
 17081 00002A80 58                      	POP	AX			; Get new attributes
 17082                                  
 17083                                  	; MSDOS 6.0
 17084 00002A81 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17085 00002A86 740A                    	je	short cannot_set_root	; M025: Y: return error
 17086                                  
 17087                                  	; MSDOS 3.3 & MSDOS 6.0
 17088 00002A88 E876FC                  	call	REN_DEL_Check
 17089 00002A8B 730B                    	JNC	short set_do
 17090 00002A8D B82000                  	MOV	AX,error_sharing_violation ; 32
 17091 00002A90 EB3A                    	jmp	short OK_BYE
 17092                                  
 17093                                  	; MSDOS 6.0
 17094                                  cannot_set_root:			; M025:
 17095 00002A92 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17096 00002A95 F9                      	stc				; M025: to set attr. of root
 17097 00002A96 EB34                    	jmp	short OK_BYE		; M025:
 17098                                  
 17099                                  set_do:
 17100                                  	; MSDOS 3.3 & MSDOS 6.0
 17101 00002A98 C43E[E205]              	LES	DI,[CURBUF]
 17102 00002A9C 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17103 00002AA1 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17104                                  
 17105                                  	; MSDOS 6.0
 17106 00002AA5 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17107                                  					;LB. if already dirty		  ;AN000;
 17108 00002AAA 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17109 00002AAC E8D931                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17110                                  	
 17111 00002AAF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17112                                  yesdirty3:
 17113 00002AB4 A0[7605]                	MOV	AL,[THISDRV]
 17114                                  ;;;; 10/1/86 F.C update fastopen cache
 17115 00002AB7 52                      	PUSH	DX
 17116 00002AB8 57                      	PUSH	DI
 17117 00002AB9 B400                    	MOV	AH,0		  ; dir entry update
 17118 00002ABB 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17119 00002ABD 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17120 00002ABF E8DCFC                  	call	FastOpen_Update
 17121 00002AC2 5F                      	POP	DI
 17122 00002AC3 5A                      	POP	DX
 17123                                  ;;;; 9/11/86 F.C update fastopen cache
 17124 00002AC4 E8B930                  	call	FLUSHBUF
 17125 00002AC7 7303                    	JNC	short OK_BYE
 17126 00002AC9 B80200                  	MOV	AX,error_file_not_found
 17127                                  OK_BYE:
 17128                                  	;call	LCritDisk
 17129                                  	;retn
 17130                                  	; 16/12/2022
 17131 00002ACC E9DFE8                  	jmp	LCritDisk
 17132                                  
 17133                                  	; 17/05/2019 - Retro DOS v4.0
 17134                                  
 17135                                  	; MSDOS 6.0
 17136                                  GET_FAST_PATH:
 17137                                  ;hkn; use SS override for FastOpenFlg
 17138 00002ACF 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17139                                  					;FO. trigger fastopen	;AN000;
 17140 00002AD5 E82E15                  	call	GETPATH
 17141 00002AD8 9C                      	PUSHF			 	;FO.			;AN000;
 17142 00002AD9 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17143                                  					;FO. clear all fastopen flags ;AN000;
 17144 00002ADF 9D                      	POPF				;FO.			;AN000;
 17145 00002AE0 C3                      	retn
 17146                                  
 17147                                  ;============================================================================
 17148                                  ; DUP.ASM, MSDOS 6.0, 1991
 17149                                  ;============================================================================
 17150                                  ; 08/08/2018 - Retro DOS v3.0
 17151                                  ; 17/05/2019 - Retro DOS v4.0
 17152                                  
 17153                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17154                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17155                                  ;
 17156                                  ;	DOS_DUP
 17157                                  ;
 17158                                  ;	Modification history:
 17159                                  ;
 17160                                  ;	  Created: ARR 30 March 1983
 17161                                  
 17162                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17163                                  ;---------------------------------------------------------------------------
 17164                                  ; Procedure Name : DOS_DUP
 17165                                  ;
 17166                                  ; Inputs:
 17167                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17168                                  ;		(a non net SFT is OK, in this case the ref
 17169                                  ;		 count is simply incremented)
 17170                                  ; Function:
 17171                                  ;	Signal to the devices that a logical open is occurring
 17172                                  ; Returns:
 17173                                  ;	ES:DI point to SFT
 17174                                  ;    Carry clear
 17175                                  ;	SFT ref_count is incremented
 17176                                  ; Registers modified: None.
 17177                                  ; NOTE:
 17178                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17179                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17180                                  ;	that time.
 17181                                  ;---------------------------------------------------------------------------
 17182                                  
 17183                                  DOS_DUP:
 17184                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17185                                  
 17186                                  	; MSDOS 6.0
 17187 00002AE1 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17188 00002AE6 26C43E[9E05]            	les	di,[es:THISSFT]
 17189                                  
 17190                                  	;Entry	Dos_Dup_Direct
 17191                                  DOS_Dup_Direct:
 17192 00002AEB E8F9E7                  	call	IsSFTNet
 17193 00002AEE 7503                    	JNZ	short DO_INC
 17194 00002AF0 E8F11B                  	call	DEV_OPEN_SFT
 17195                                  DO_INC:
 17196                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17197 00002AF3 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17198                                  					;   we're in big trouble anyway)
 17199 00002AF6 C3                      	retn
 17200                                  
 17201                                  ;============================================================================
 17202                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17203                                  ;============================================================================
 17204                                  ; 08/08/2018 - Retro DOS v3.0
 17205                                  ; 18/05/2019 - Retro DOS v4.0
 17206                                  
 17207                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17208                                  ;NAME	DOS_CREATE
 17209                                  ;----------------------------------------------------------------------------
 17210                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17211                                  ;
 17212                                  ;	DOS_CREATE
 17213                                  ;	DOS_CREATE_NEW
 17214                                  ;	SET_MKND_ERR
 17215                                  ;	SET_Media_ID
 17216                                  ;	SET_EXT_Mode
 17217                                  ;
 17218                                  ;	Revision history:
 17219                                  ;
 17220                                  ;	    A000 version 4.00	  Jan. 1988
 17221                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17222                                  
 17223                                  ;Installed = TRUE
 17224                                  
 17225                                  ;	i_need	THISSFT,DWORD
 17226                                  ;	i_need	THISCDS,DWORD
 17227                                  ;	I_need	EXTERR,WORD
 17228                                  ;	I_Need	ExtErr_locus,BYTE
 17229                                  ;	I_need	JShare,DWORD
 17230                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17231                                  ;	I_need	SATTRIB,BYTE
 17232                                  ;	I_need	CALLVIDM,DWORD
 17233                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17234                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17235                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17236                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17237                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17238                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17239                                  
 17240                                  ;***	DOS_CREATE - Create a File
 17241                                  ;----------------------------------------------------------------------------
 17242                                  ;	DOS_Create is called to create the specified file, truncating
 17243                                  ;	the old one if it exists.
 17244                                  ;
 17245                                  ;	ENTRY	AX is Attribute to create
 17246                                  ;		(ds) = DOSDATA
 17247                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17248                                  ;			terminated)
 17249                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17250                                  ;			( = -1 if current dir not involved, else
 17251                                  ;			 Points to first char after last "/" of current dir part)
 17252                                  ;		[THISCDS] Points to CDS being used
 17253                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17254                                  ;		[THISSFT] Points to SFT to fill in if file created
 17255                                  ;			(sf_mode field set so that FCB may be detected)
 17256                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17257                                  ;
 17258                                  ;	EXIT	sf_ref_count is NOT altered
 17259                                  ;		CARRY CLEAR
 17260                                  ;		    THISSFT filled in.
 17261                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17262                                  ;		CARRY SET
 17263                                  ;		    AX is error code
 17264                                  ;			error_path_not_found
 17265                                  ;				Bad path (not in curr dir part if present)
 17266                                  ;			error_bad_curr_dir
 17267                                  ;				Bad path in current directory part of path
 17268                                  ;			error_access_denied
 17269                                  ;				Attempt to re-create read only file , or
 17270                                  ;				create a second volume id or create a dir
 17271                                  ;			error_sharing_violation
 17272                                  ;				The sharing mode was correct but not allowed
 17273                                  ;				generates an INT 24
 17274                                  ;	USES	all but DS
 17275                                  ;----------------------------------------------------------------------------
 17276                                  
 17277                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17278                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17279                                  
 17280                                  DOS_CREATE:
 17281                                  	; 18/05/2019 - Retro DOS v4.0
 17282                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17283                                  
 17284                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17285                                  ;hkn; this point.
 17286                                  
 17287 00002AF7 30E4                    	XOR	AH,AH		; Truncate is OK
 17288                                  
 17289                                  ;	Enter here from Dos_Create_New
 17290                                  ;
 17291                                  ;	(ah) = 0 iff truncate OK
 17292                                  
 17293                                  Create_inter:
 17294 00002AF9 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17295                                  				; Mask out any meaningless bits
 17296 00002AFB 7511                    	JNZ	short AttErr
 17297 00002AFD A808                    	TEST	AL,attr_volume_id
 17298 00002AFF 7407                    	JZ	short NoReset
 17299                                  	
 17300                                  	; MSDOS 6.0
 17301                                  	; 16/12/2022
 17302 00002B01 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17303                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17304                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17305                                  	
 17306 00002B06 B008                    	MOV	AL,attr_volume_id ; 8
 17307                                  NoReset:
 17308 00002B08 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17309 00002B0A A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17310 00002B0C 740A                    	JZ	short ATT_OK
 17311                                  AttErr:
 17312 00002B0E B80500                  	MOV	AX,5		; Attribute problem
 17313 00002B11 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17314 00002B16 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17315                                  				   ;	attr_device to be set.
 17316                                  ATT_OK:
 17317 00002B18 C43E[9E05]              	LES	DI,[THISSFT]
 17318 00002B1C 06                      	PUSH	ES
 17319 00002B1D C436[A205]              	LES	SI,[THISCDS]
 17320 00002B21 83FEFF                  	CMP	SI,-1
 17321 00002B24 751D                    	JNE	short TEST_RE_NET
 17322                                  
 17323                                  ;	No CDS, it must be redirected.
 17324                                  
 17325 00002B26 07                      	POP	ES
 17326                                  
 17327                                  	; MSDOS 6.0
 17328                                  ;Extended open hooks
 17329                                  	;test	byte [EXTOPEN_ON],1
 17330 00002B27 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17331 00002B2C 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17332                                  IFS_extopen:				    ;AN000;EO.
 17333 00002B2E 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17334                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17335 00002B2F B82E11                  	mov	ax,112Eh
 17336 00002B32 CD2F                    	INT	2FH			    ;AN000;EO.
 17337 00002B34 5B                      	POP	BX			    ;AN000;EO. trash bx
 17338 00002B35 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17339 00002B3A C3                      	retn				    ;AN000;EO.
 17340                                  NOEXTOP:				    ;AN000;
 17341                                  ;Extended open hooks
 17342                                  
 17343                                  ;IF NOT Installed
 17344                                  ;	transfer NET_SEQ_CREATE
 17345                                  ;ELSE
 17346 00002B3B 50                      	PUSH	AX
 17347                                  
 17348                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17349                                  	;INT	2FH
 17350                                  
 17351 00002B3C B81811                  	mov     ax,1118h
 17352 00002B3F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17353                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17354                                  			; SDA first filename pointer -> fully-qualified name of file
 17355                                  			; STACK: WORD file creation mode???
 17356                                  
 17357 00002B41 5B                      	POP	BX			; BX is trashed anyway
 17358 00002B42 C3                      	retn
 17359                                  ;ENDIF
 17360                                  
 17361                                  ;	We have a CDS. See if it's network
 17362                                  
 17363                                  TEST_RE_NET:
 17364                                  	;;test	word [es:si+43h],8000h
 17365                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17366                                  	; 07/12/2022
 17367                                  	;test	byte [es:si+44h],80h
 17368                                  	; 17/12/2022
 17369 00002B43 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17370 00002B48 07                      	POP	ES
 17371 00002B49 7419                    	JZ	short LOCAL_CREATE
 17372                                  
 17373                                  	; MSDOS 6.0
 17374 00002B4B E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17375 00002B4E 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17376                                  	;;or	word [es:di+2],2
 17377                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17378                                  	; 17/12/2022
 17379 00002B50 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17380                                  
 17381                                  ;Extended open hooks
 17382                                  dochk:
 17383 00002B55 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17384 00002B5A 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17385                                  ;Extended open hooks
 17386                                  
 17387                                  ;IF NOT Installed
 17388                                  ;	transfer NET_CREATE
 17389                                  ;ELSE
 17390 00002B5C 50                      	PUSH	AX
 17391                                  	
 17392                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17393                                  	;INT	2FH
 17394                                  	
 17395 00002B5D B81711                  	mov     ax,1117h
 17396 00002B60 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17397                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17398                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17399                                  			; SDA CDS pointer -> current directory
 17400                                  			; Return: CF set on error
 17401                                  
 17402 00002B62 5B                      	POP	BX			; BX is trashed anyway
 17403                                  ;nomore:
 17404 00002B63 C3                      	retn
 17405                                  ;ENDIF
 17406                                  
 17407                                  ;**	It's a local create. We have a local CDS for it.
 17408                                  
 17409                                  LOCAL_CREATE:
 17410                                  	; MSDOS 6.0
 17411 00002B64 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17412 00002B67 7205                    	JC	short setdone	;AN000;EO.
 17413                                  	
 17414                                  	; MSDOS 3.3 & MSDOS 6.0
 17415                                  	; 17/12/2022
 17416                                  	;;or	word [es:di+2],2
 17417                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17418                                  	;or	byte [es:di+2],2
 17419 00002B69 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17420                                  setdone:
 17421 00002B6E E822E8                  	call	ECritDisk
 17422 00002B71 E8251F                  	call	MakeNode
 17423 00002B74 7317                    	JNC	short Create_ok
 17424 00002B76 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17425 00002B7B E830E8                  	call	LCritDisk
 17426                                  
 17427                                  	;entry	SET_MKND_ERR
 17428                                  SET_MKND_ERR:
 17429                                  
 17430                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17431                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17432                                  
 17433                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17434 00002B7E BB[852B]                	MOV     BX,CRTERRTAB
 17435                                  	;XLAT  ; MSDOS 3.3
 17436                                  	; 18/05/2019 - Retro DOS v4.0
 17437 00002B81 2E                      	CS
 17438 00002B82 D7                      	XLAT
 17439                                  CreatBadRet:
 17440 00002B83 F9                      	STC
 17441 00002B84 C3                      	retn
 17442                                  
 17443                                  ; 13/05/2019 - Retro DOS v4.0
 17444                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17445                                  ; ---------------------------------------------------------------------------
 17446                                  
 17447                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17448                                  
 17449                                  ; 17/07/2018 - Retro DOS v3.0
 17450                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17451                                  
 17452                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17453                                  ;	db	0,5,52h,50h,3,5,20h
 17454                                  
 17455                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17456                                  ;	db	0,5,52h,50h,3,5,20h,2
 17457                                  
 17458                                  ; 08/08/2018
 17459                                  
 17460                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17461 00002B85 00                      	DB	0			; none
 17462 00002B86 05                      	DB	error_access_denied	; MakeNode error 1
 17463 00002B87 52                      	DB	error_cannot_make	; MakeNode error 2
 17464 00002B88 50                      	DB	error_file_exists	; MakeNode error 3
 17465 00002B89 03                      	DB	error_path_not_found	; MakeNode error 4
 17466 00002B8A 05                      	DB	error_access_denied	; MakeNode error 5
 17467 00002B8B 20                      	DB	error_sharing_violation ; MakeNode error 6
 17468                                  	; MSDOS 6.0
 17469 00002B8C 02                      	DB	error_file_not_found	; MakeNode error 7
 17470                                  
 17471                                  ; ---------------------------------------------------------------------------
 17472                                  
 17473                                  ; We have just created a new file. This results in the truncation of old
 17474                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17475                                  ; file to the current size.
 17476                                  
 17477                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17478                                  ; drive number to force a Build BPB after Media Check.
 17479                                  
 17480                                  ;;; FASTOPEN 8/29/86
 17481                                  Create_ok:
 17482 00002B8D E8DFFB                  	call	FastOpen_Delete
 17483                                  ;;; FASTOPEN 8/29/86
 17484 00002B90 A0[6D05]                	mov	al,[SATTRIB]
 17485 00002B93 A808                    	test	al,attr_volume_id
 17486 00002B95 741C                    	jz	short NoVolLabel
 17487 00002B97 C43E[A205]              	LES	DI,[THISCDS]
 17488                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17489 00002B9B 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17490 00002B9E 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17491 00002BA1 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17492                                  	
 17493                                  	; 18/05/2019 - Retro DOS v4.0
 17494                                  
 17495                                  	; MSDOS 6.0
 17496 00002BA5 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17497 00002BA7 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17498                                  	
 17499 00002BAA E8E6E7                  	call	ECritDisk
 17500 00002BAD E8622C                  	call	FATREAD_CDS		; force a media check
 17501 00002BB0 E8FBE7                  	call	LCritDisk
 17502                                  
 17503                                  NoVolLabel:
 17504 00002BB3 B80200                  	MOV	ax,2
 17505 00002BB6 C43E[9E05]              	LES	DI,[THISSFT]
 17506                                  ;if installed
 17507                                  	;call	JShare + 14 * 4
 17508 00002BBA FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17509                                  ;else
 17510                                  ;	Call	ShSU
 17511                                  ;endif
 17512 00002BBE E8EDE7                  	call	LCritDisk
 17513 00002BC1 E94901                  	jmp	SET_SFT_MODE
 17514                                  
 17515                                  ;---------------------------------------------------------------------------
 17516                                  ; Procedure Name : Dos_Create_New
 17517                                  ;
 17518                                  ; Inputs:
 17519                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17520                                  ;		terminated)
 17521                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17522                                  ;		( = -1 if current dir not involved, else
 17523                                  ;		 Points to first char after last "/" of current dir part)
 17524                                  ;	[THISCDS] Points to CDS being used
 17525                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17526                                  ;	[THISSFT] Points to SFT to fill in if file created
 17527                                  ;		(sf_mode field set so that FCB may be detected)
 17528                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17529                                  ;	AX is Attribute to create
 17530                                  ; Function:
 17531                                  ;	Try to create the specified file truncating an old one that exists
 17532                                  ; Outputs:
 17533                                  ;	sf_ref_count is NOT altered
 17534                                  ;	CARRY CLEAR
 17535                                  ;	    THISSFT filled in.
 17536                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17537                                  ;	CARRY SET
 17538                                  ;	    AX is error code
 17539                                  ;		error_path_not_found
 17540                                  ;			Bad path (not in curr dir part if present)
 17541                                  ;		error_bad_curr_dir
 17542                                  ;			Bad path in current directory part of path
 17543                                  ;		error_access_denied
 17544                                  ;			Create a second volume id or create a dir
 17545                                  ;		error_file_exists
 17546                                  ;			Already a file by this name
 17547                                  ; DS preserved, others destroyed
 17548                                  ;---------------------------------------------------------------------------
 17549                                  
 17550                                  DOS_Create_New:
 17551 00002BC4 B401                    	MOV	AH,1		; Truncate is NOT OK
 17552 00002BC6 E930FF                  	JMP	Create_inter
 17553                                  
 17554                                  ; MSDOS 6.0
 17555                                  ;---------------------------------------------------------------------------
 17556                                  ; Procedure Name : Set_Media_ID
 17557                                  ;
 17558                                  ; Inputs:
 17559                                  ;	NAME1= Volume ID
 17560                                  ;	BH= 0, delete volume id
 17561                                  ;	    1, set new volume id
 17562                                  ;	DS= DOSGROUP
 17563                                  ; Function:
 17564                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17565                                  ; Outputs:
 17566                                  ;	CARRY CLEAR
 17567                                  ;	    volume id set
 17568                                  ;	CARRY SET
 17569                                  ;	    AX is error code
 17570                                  ;---------------------------------------------------------------------------
 17571                                  
 17572                                  	; 18/05/2019 - Retro DOS v4.0
 17573                                  Set_Media_ID:
 17574 00002BC9 50                      	PUSH	AX		;AN000;;>32mb
 17575 00002BCA 06                      	PUSH	ES		;AN000;;>32mb
 17576 00002BCB 57                      	PUSH	DI		;AN000;;>32mb
 17577                                  
 17578 00002BCC FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17579 00002BCE 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17580 00002BD0 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17581 00002BD2 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17582                                  
 17583                                  ;hkn; PACKET_TEMP is in DOSDATA
 17584 00002BD5 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17585                                  
 17586 00002BD8 53                      	PUSH	BX		;AN000;;>32mb
 17587 00002BD9 52                      	PUSH	DX		;AN000;;>32mb
 17588 00002BDA 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17589                                  
 17590                                  	;invoke	$IOCTL		;AN000;;>32mb
 17591 00002BDC E83CF7                  	call	_$IOCTL	
 17592                                  
 17593 00002BDF 5A                      	POP	DX		;AN000;;>32mb
 17594 00002BE0 5B                      	POP	BX		;AN000;;>32mb
 17595 00002BE1 7224                    	JC	short geterr	;AN000;;>32mb
 17596                                  
 17597 00002BE3 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17598 00002BE5 7405                    	JZ	short NoName	;AN000;>32mb yes
 17599                                  
 17600                                  ;hkn; NAME1 is in DOSDATA
 17601 00002BE7 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17602                                  
 17603 00002BEA EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17604                                  NoName: 			;AN000;
 17605                                  
 17606                                  ;hkn; NO_NAME_ID is in DOSDATA
 17607 00002BEC BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17608                                  
 17609                                  doset:				;AN000;
 17610 00002BEF 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17611                                  	;add	di,6
 17612 00002BF1 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17613                                  
 17614                                  ;hkn; ES & DS must point to SS
 17615                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17616 00002BF4 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17617                                  
 17618 00002BF5 1F                      	POP	DS		;AN000;;>32mb
 17619                                  
 17620                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17621 00002BF6 16                      	PUSH	SS		;AN000;;>32mb
 17622                                  
 17623 00002BF7 07                      	POP	ES		;AN000;;>32mb
 17624 00002BF8 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17625 00002BFB F3A4                    	REP	MOVSB		;AN000;;>32mb
 17626 00002BFD B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17627 00002C00 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17628 00002C02 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17629                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17630 00002C04 E814F7                  	call	_$IOCTL	
 17631                                  geterr: 			;AN000;
 17632                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17633 00002C07 16                      	PUSH	SS		;AN000;>32mb
 17634                                  
 17635 00002C08 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17636                                  
 17637 00002C09 5F                      	POP	DI		;AN000;;>32mb
 17638 00002C0A 07                      	POP	ES		;AN000;;>32mb
 17639 00002C0B 58                      	POP	AX		;AN000;;>32mb
 17640 00002C0C C3                      	retn			;AN000;>32mb
 17641                                  
 17642                                  ; MSDOS 6.0
 17643                                  ;---------------------------------------------------------------------------
 17644                                  ; Procedure Name : Set_EXT_mode
 17645                                  ;
 17646                                  ; Inputs:
 17647                                  ;	[EXTOPEN_ON]= flag for extended open
 17648                                  ;	SAVE_BX= mode specified in Extended Open
 17649                                  ; Function:
 17650                                  ;	Set mode in ThisSFT
 17651                                  ; Outputs:
 17652                                  ;	carry set,mode is set if from Extended Open
 17653                                  ;	carry clear, mode not set yet
 17654                                  ;---------------------------------------------------------------------------
 17655                                  
 17656                                  ; 13/05/2019 - Retro DOS v4.0
 17657                                  
 17658                                  Set_EXT_mode:
 17659                                  
 17660                                  ;hkn; SS override
 17661 00002C0D 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17662 00002C13 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17663 00002C15 50                      	PUSH	AX			    ;AN000;EO.
 17664                                  
 17665                                  ;hkn; SS override
 17666 00002C16 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17667                                  	;or	[es:di+2],ax
 17668 00002C1A 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17669 00002C1E 58                      	POP	AX			    ;AN000;EO.
 17670 00002C1F F9                      	STC				    ;AN000;EO.
 17671                                  NOTEX:					    ;AN000;
 17672 00002C20 C3                      	retn				    ;AN000;EO.
 17673                                  
 17674                                  ;============================================================================
 17675                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17676                                  ;============================================================================
 17677                                  ; 08/08/2018 - Retro DOS v3.0
 17678                                  ; 18/05/2019 - Retro DOS v4.0
 17679                                  
 17680                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17681                                  ;	NAME	DOS_OPEN
 17682                                  
 17683                                  ;**	OPEN.ASM - File Open
 17684                                  ;----------------------------------------------------------------------------
 17685                                  ;	Low level routines for openning a file from a file spec.
 17686                                  ;	Also misc routines for sharing errors
 17687                                  ;
 17688                                  ;	DOS_Open
 17689                                  ;	Check_Access_AX
 17690                                  ;	SHARE_ERROR
 17691                                  ;	SET_SFT_MODE
 17692                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17693                                  ;
 17694                                  ;	Revision history:
 17695                                  ;
 17696                                  ;	    Created: ARR 30 March 1983
 17697                                  ;	    A000	version 4.00   Jan. 1988
 17698                                  ;
 17699                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17700                                  ; 	       remote extended opens and not save_cx.
 17701                                  ;
 17702                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17703                                  ;	       on the stack before calling off to the redir.
 17704                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17705                                  ;	       to handle open from exec. In this case set the appropriate bit
 17706                                  ;	       else do not.
 17707                                  ;----------------------------------------------------------------------------	
 17708                                  
 17709                                  ;Installed = TRUE
 17710                                  
 17711                                  ;	i_need	NoSetDir,BYTE
 17712                                  ;	i_need	THISSFT,DWORD
 17713                                  ;	i_need	THISCDS,DWORD
 17714                                  ;	i_need	CURBUF,DWORD
 17715                                  ;	i_need	CurrentPDB,WORD
 17716                                  ;	i_need	CURR_DIR_END,WORD
 17717                                  ;	I_need	RetryCount,WORD
 17718                                  ;	I_need	Open_Access,BYTE
 17719                                  ;	I_need	fSharing,BYTE
 17720                                  ;	i_need	JShare,DWORD
 17721                                  ;	I_need	FastOpenFlg,byte
 17722                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17723                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17724                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17725                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17726                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17727                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17728                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17729                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17730                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17731                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17732                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17733                                  ;
 17734                                  ;	I_need	DOS_FLAG,BYTE
 17735                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17736                                  
 17737                                  ;Break	<DOS_Open - internal file access>
 17738                                  ;---------------------------------------------------------------------------
 17739                                  ; Procedure Name : DOS_Open
 17740                                  ;
 17741                                  ; Inputs:
 17742                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17743                                  ;		terminated)
 17744                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17745                                  ;		( = -1 if current dir not involved, else
 17746                                  ;		 Points to first char after last "/" of current dir part)
 17747                                  ;	[THISCDS] Points to CDS being used
 17748                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17749                                  ;	[THISSFT] Points to SFT to fill in if file found
 17750                                  ;		(sf_mode field set so that FCB may be detected)
 17751                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17752                                  ;	AX is Access and Sharing mode
 17753                                  ;	  High NIBBLE of AL (Sharing Mode)
 17754                                  ;		sharing_compat	   file is opened in compatibility mode
 17755                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17756                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17757                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17758                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17759                                  ;	  Low NIBBLE of AL (Access Mode)
 17760                                  ;		open_for_read	file is opened for reading
 17761                                  ;		open_for_write	file is opened for writing
 17762                                  ;		open_for_both	file is opened for both reading and writing.
 17763                                  ;
 17764                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17765                                  ;		(not checked)
 17766                                  ; Function:
 17767                                  ;	Try to open the specified file
 17768                                  ; Outputs:
 17769                                  ;	sf_ref_count is NOT altered
 17770                                  ;	CARRY CLEAR
 17771                                  ;	    THISSFT filled in.
 17772                                  ;	CARRY SET
 17773                                  ;	    AX is error code
 17774                                  ;		error_file_not_found
 17775                                  ;			Last element of path not found
 17776                                  ;		error_path_not_found
 17777                                  ;			Bad path (not in curr dir part if present)
 17778                                  ;		error_bad_curr_dir
 17779                                  ;			Bad path in current directory part of path
 17780                                  ;		error_invalid_access
 17781                                  ;			Bad sharing mode or bad access mode or bad combination
 17782                                  ;		error_access_denied
 17783                                  ;			Attempt to open read only file for writting, or
 17784                                  ;			open a directory
 17785                                  ;		error_sharing_violation
 17786                                  ;			The sharing mode was correct but not allowed
 17787                                  ;			generates an INT 24 on compatibility mode SFTs
 17788                                  ; DS preserved, others destroyed
 17789                                  ;----------------------------------------------------------------------------
 17790                                  
 17791                                  ; 18/05/2019 - Retro DOS v4.0
 17792                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17793                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17794                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17795                                  
 17796                                  DOS_OPEN:
 17797                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17798                                  
 17799 00002C21 C606[4C03]00            	MOV	byte [NoSetDir],0
 17800 00002C26 E83601                  	CALL	Check_Access_AX
 17801 00002C29 722B                    	JC	short do_ret_label	    ; retc
 17802                                  
 17803 00002C2B C43E[9E05]              	LES	DI,[THISSFT]
 17804 00002C2F 30E4                    	XOR	AH,AH
 17805                                  
 17806                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17807                                  
 17808 00002C31 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17809 00002C35 06                      	PUSH	ES
 17810 00002C36 C436[A205]              	LES	SI,[THISCDS]
 17811                                  	; 18/08/2018
 17812 00002C3A 83FEFF                  	CMP	SI,-1
 17813 00002C3D 7530                    	JNZ	short TEST_RE_NET1
 17814 00002C3F 07                      	POP	ES
 17815                                  
 17816                                  	; MSDOS 6.0
 17817                                  ;Extended open hooks
 17818 00002C40 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17819 00002C45 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17820                                  _IFS_extopen:									;AN000;
 17821 00002C47 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17822                                  					    ; with which call was made. This
 17823                                  					    ; has the open access bits. 
 17824                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17825                                  	
 17826 00002C4A 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17827                                  	;mov	ax,112Eh
 17828                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17829 00002C4B B82E11                  	mov	ax,(MultNET*256)+46 
 17830 00002C4E CD2F                    	INT	2FH			    ;FT.				;AN000;
 17831 00002C50 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17832 00002C51 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17833                                  
 17834                                  do_ret_label:
 17835 00002C56 C3                      	retn				    ;FT.				;AN000;
 17836                                  _NOEXTOP:
 17837                                  ;Extended open hooks
 17838                                  	;
 17839                                  ;IF NOT Installed
 17840                                  	;transfer NET_SEQ_OPEN
 17841                                  ;ELSE
 17842                                  	
 17843                                  do_net_int2f:
 17844 00002C57 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17845 00002C5C 7409                    	jz	short not_exec_open	; N: just do net open
 17846                                  					; Y: check to see if redir is aware
 17847                                  					;    of this 
 17848                                  	
 17849                                  					; M042 - start
 17850                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17851 00002C5E F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17852                                  					; Q: does this redir know how to 
 17853                                  					;    this
 17854 00002C63 7402                    	jz	short not_exec_open	; N: just do net open
 17855                                  					; Y: set bit 3 of access byte and 
 17856                                  					;    set sharing mode to DENY_WRITE
 17857                                  					; M042 - end
 17858                                  	
 17859                                  	; NOTE: This specific mode has not been set for the code assembled
 17860                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17861                                  	; always one.
 17862                                  					; M035 - set the bits on the stack
 17863                                  	;mov	al,23h
 17864 00002C65 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17865                                  	
 17866                                  not_exec_open:
 17867                                  	; MSDOS 3.3 & MSDOS 6.0
 17868 00002C67 50                      	PUSH	AX
 17869                                  
 17870                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17871                                  	;INT	2FH
 17872                                  
 17873 00002C68 B81611                  	mov     ax,1116h
 17874 00002C6B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17875                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17876                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17877                                  			; STACK: WORD file open mode
 17878                                  			; Return: CF set on error
 17879                                  
 17880 00002C6D 5B                      	POP	BX			; clean stack
 17881                                  ;do_ret_label: ; 09/08/2018
 17882 00002C6E C3                      	retn
 17883                                  ;ENDIF
 17884                                  
 17885                                  TEST_RE_NET1:
 17886                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17887                                  	; 17/12/2022
 17888 00002C6F 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17889 00002C74 07                      	POP	ES
 17890                                  	; 18/05/2019
 17891 00002C75 7409                    	JZ	short LOCAL_OPEN
 17892                                  
 17893                                  ;Extended open hooks
 17894                                  	; MSDOS 6.0
 17895 00002C77 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17896 00002C7C 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17897                                  ;Extended open hooks
 17898                                  
 17899                                  ;IF NOT Installed
 17900                                  ;	transfer NET_OPEN
 17901                                  ;ELSE
 17902 00002C7E EBD7                    	jmp	short do_net_int2f
 17903                                  ;ENDIF
 17904                                  
 17905                                  LOCAL_OPEN:
 17906                                  	; MSDOS 3.3 & MSDOS 6.0
 17907 00002C80 E810E7                  	call	ECritDisk
 17908                                  
 17909                                  ; DOS 3.3 FastOPen 6/16/86
 17910                                  
 17911                                  	;or	byte [FastOpenFlg],5
 17912 00002C83 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 17913                                  
 17914 00002C88 E87B13                  	call	GETPATH
 17915                                  
 17916                                  ; DOS 3.3 FastOPen 6/16/86
 17917                                  
 17918 00002C8B 731D                    	JNC	short Open_found
 17919 00002C8D 7511                    	JNZ	short bad_path2
 17920 00002C8F 08C9                    	OR	CL,CL
 17921 00002C91 740D                    	JZ	short bad_path2
 17922                                  OpenFNF:
 17923 00002C93 B80200                  	MOV	AX,error_file_not_found	; 2
 17924                                  OpenBadRet:
 17925                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 17926                                  	; 12/08/2018
 17927                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 17928                                  	; MSDOS 6.0
 17929 00002C96 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17930 00002C9C F9                      	STC
 17931                                  	;call	LCritDisk
 17932                                  	; 16/12/2022
 17933 00002C9D E90EE7                  	jmp	LCritDisk
 17934                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 17935                                  	;retn 	; 08/09/2018
 17936                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17937                                  	;jmp	Clear_FastOpen
 17938                                  
 17939                                  bad_path2:
 17940 00002CA0 B80300                  	MOV	AX,error_path_not_found	; 3
 17941 00002CA3 EBF1                    	JMP	short OpenBadRet
 17942                                  
 17943                                  Open_Bad_Access:
 17944 00002CA5 B80500                  	MOV	AX,error_access_denied	; 5
 17945 00002CA8 EBEC                    	JMP	short OpenBadRet
 17946                                  
 17947                                  Open_found:
 17948 00002CAA 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 17949 00002CAC 08E4                    	OR	AH,AH
 17950 00002CAE 783E                    	JS	short open_ok		; Devices don't have attributes
 17951 00002CB0 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 17952                                  	;mov	al,[es:bx+0Bh]
 17953 00002CB4 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 17954 00002CB8 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 17955 00002CBA 75E9                    	JNZ	short Open_Bad_Access
 17956 00002CBC A801                    	TEST	AL,attr_read_only	; check write on read only
 17957 00002CBE 742E                    	JZ	short open_ok
 17958                                  
 17959                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 17960                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 17961                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 17962                                  ; processing until the actual write operation:
 17963                                  ;
 17964                                  ; If FCB, then we change the mode to be read_only.
 17965                                  ; If net_FCB, then we change the mode to be read_only.
 17966                                  ; If not open for read then error.
 17967                                  
 17968 00002CC0 1E                      	push	ds
 17969 00002CC1 56                      	push	si
 17970 00002CC2 C536[9E05]              	LDS	SI,[THISSFT]
 17971                                  	;mov	cx,[si+2]
 17972 00002CC6 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 17973                                  	; 17/12/2022
 17974                                  	;test	ch,80h
 17975 00002CC9 F6C580                  	test	ch,sf_isFCB>>8
 17976                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 17977 00002CCC 750A                    	JNZ	short ResetAccess	; yes, reset the access
 17978 00002CCE 88CA                    	MOV	DL,CL
 17979 00002CD0 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 17980 00002CD3 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 17981 00002CD6 7508                    	JNZ	short NormalOpen	; no
 17982                                  ResetAccess:
 17983                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 17984                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 17985                                  	; 16/12/2022
 17986 00002CD8 80E1F0                  	and	cl,0F0h ; 18/05/2019
 17987                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 17988 00002CDB 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 17989 00002CDE EB0C                    	JMP	SHORT FillSFT
 17990                                  
 17991                                  ; The SFT is normal. See if the requested access is open_for_read
 17992                                  
 17993                                  NormalOpen:
 17994 00002CE0 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 17995 00002CE3 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 17996 00002CE6 7404                    	JZ	short FillSFT
 17997 00002CE8 5E                      	pop	si
 17998 00002CE9 1F                      	pop	ds
 17999 00002CEA EBB9                    	JMP	short Open_Bad_Access
 18000                                  ;
 18001                                  ; All done, restore registers and fill the SFT.
 18002                                  ;
 18003                                  FillSFT:
 18004 00002CEC 5E                      	pop	si
 18005 00002CED 1F                      	pop	ds
 18006                                  open_ok:
 18007 00002CEE E8671F                  	call	DOOPEN			; Fill in SFT
 18008                                  
 18009                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18010                                  	; 18/05/2019
 18011                                  	;and	byte [ss:FastOpenFlag],80h
 18012 00002CF1 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18013                                  	; 12/08/2018
 18014                                  	;and	byte [FastOpenFlg],Fast_yes	
 18015                                  
 18016                                  	; MSDOS 6.0
 18017 00002CF7 E84600                  	CALL	DO_SHARE_CHECK
 18018 00002CFA 7303                    	JNC	short SHARE_OK
 18019                                  	;call	LCritDisk
 18020                                  	; 16/12/2022
 18021 00002CFC E9AFE6                  	jmp	LCritDisk
 18022                                  	;;JMP	short Clear_FastOpen
 18023                                  	;retn	; 18/05/2019
 18024                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18025                                  	;jmp	short Clear_FastOpen	
 18026                                  
 18027                                  	; MSDOS 3.3
 18028                                  ;DO_SHARE_CHECK:
 18029                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18030                                  ;OpenShareRetry:
 18031                                  ;	push	cx			; Save number left to do
 18032                                  ;	call	SHARE_CHECK		; Final Check
 18033                                  ;	pop	cx			; CX = # left
 18034                                  ;	JNC	short SHARE_OK		; No problem with access
 18035                                  ;	call	Idle
 18036                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18037                                  ;OpenShareFail:
 18038                                  ;	LES	DI,[THISSFT]
 18039                                  ;	call	SHARE_ERROR
 18040                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18041                                  	
 18042                                  	;12/08/2018
 18043                                  	;mov	byte [ss:FastOpenFlg],0
 18044                                  	;08/09/2018
 18045                                  	;mov	byte [FastOpenFlg],0
 18046                                  	;call	LCritDisk
 18047                                  	;JMP	short Clear_FastOpen
 18048                                  	;retn
 18049                                  
 18050                                  SHARE_OK:
 18051                                  	; MSDOS 3.3 & MSDOS 6.0
 18052 00002CFF B80300                  	MOV	AX,3
 18053 00002D02 C43E[9E05]              	LES	DI,[THISSFT]
 18054                                  ;if installed
 18055                                  	;call	JShare + 14 * 4
 18056 00002D06 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18057                                  ;else
 18058                                  ;	Call	ShSU
 18059                                  ;endif
 18060 00002D0A E8A1E6                  	call	LCritDisk
 18061                                  	
 18062                                  	;FallThru Set_SFT_Mode
 18063                                  
 18064                                  ;----------------------------------------------------------------------------
 18065                                  ; Procedure Name : SET_SFT_MODE
 18066                                  ;
 18067                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18068                                  ;
 18069                                  ;   Inputs:
 18070                                  ;	ThisSFT points to SFT
 18071                                  ;
 18072                                  ;   Outputs:
 18073                                  ;	Carry clear
 18074                                  ;   Registers modified: AX.
 18075                                  ;---------------------------------------------------------------------------
 18076                                  
 18077                                  ;hkn; called from create. DS already set up to DOSDATA.
 18078                                  
 18079                                  SET_SFT_MODE:
 18080 00002D0D C43E[9E05]              	LES	DI,[THISSFT]
 18081 00002D11 E8D019                  	call	DEV_OPEN_SFT
 18082                                  	;test	word [es:di+2],8000h
 18083                                  	; 17/12/2022
 18084                                  	;test	byte [es:di+3],80h
 18085 00002D14 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18086                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18087 00002D19 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18088 00002D1B A1[3003]                	MOV	AX,[CurrentPDB]
 18089                                  	;mov	[es:di+31h],ax
 18090 00002D1E 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18091                                  
 18092                                  Clear_FastOpen:
 18093 00002D22 C3                      	retn			       ;;;;; DOS 3.3
 18094                                  
 18095                                  ;----------------------------------------------------------------------------
 18096                                  ; Procedure Name : SHARE_ERROR
 18097                                  ;
 18098                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18099                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18100                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18101                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18102                                  ;---------------------------------------------------------------------------
 18103                                  
 18104                                  SHARE_ERROR:
 18105                                  	; 17/12/2022
 18106                                  	;test	byte [es:di+3],80h
 18107 00002D23 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18108                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18109 00002D28 750C                    	JNZ	short _HARD_ERR
 18110 00002D2A 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18111 00002D2E 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18112 00002D31 80F900                  	CMP	CL,SHARING_COMPAT ; 0
 18113 00002D34 7505                    	JNE	short _NO_HARD_ERR
 18114                                  _HARD_ERR:
 18115 00002D36 E84D47                  	call	SHARE_VIOLATION
 18116                                  	;retnc				; User wants retry
 18117 00002D39 73E7                    	jnc	short Clear_FastOpen
 18118                                  _NO_HARD_ERR:
 18119 00002D3B B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18120 00002D3E F9                      	STC
 18121 00002D3F C3                      	retn
 18122                                  
 18123                                  ; MSDOS 6.0
 18124                                  ;----------------------------------------------------------------------------
 18125                                  ; Procedure Name : DO_SHARE_CHECK
 18126                                  ;
 18127                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18128                                  ; Functions: check file sharing mode is valid
 18129                                  ; Output: carry set, error
 18130                                  ;	  carry clear, share ok
 18131                                  ;----------------------------------------------------------------------------
 18132                                  
 18133                                  	; 18/05/2019 - Retro DOS v4.0
 18134                                  DO_SHARE_CHECK:
 18135 00002D40 E850E6                  	call	ECritDisk		; enter critical section
 18136                                  OPN_RETRY:
 18137 00002D43 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18138                                  OpenShareRetry:
 18139 00002D47 51                      	push	cx			; Save number left to do
 18140 00002D48 E83647                  	call	SHARE_CHECK		; Final Check
 18141 00002D4B 59                      	pop	cx			; CX = # left
 18142 00002D4C 730E                    	JNC	short Share_Ok2		; No problem with access
 18143 00002D4E E838E5                  	call	Idle
 18144 00002D51 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18145                                  OpenShareFail:
 18146 00002D53 C43E[9E05]              	LES	DI,[THISSFT]
 18147 00002D57 E8C9FF                  	call	SHARE_ERROR
 18148 00002D5A 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18149                                  Share_Ok2:
 18150                                  	;call	LCritDisk		; leave critical section
 18151                                  	;retn
 18152                                  	; 18/12/2022
 18153 00002D5C E94FE6                  	jmp	LCritDisk
 18154                                  
 18155                                  ;-----------------------------------------------------------------------------
 18156                                  ; Procedure Name : Check_Access
 18157                                  ;
 18158                                  ; Inputs:
 18159                                  ;	AX is mode
 18160                                  ;	  High NIBBLE of AL (Sharing Mode)
 18161                                  ;		sharing_compat	   file is opened in compatibility mode
 18162                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18163                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18164                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18165                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18166                                  ;	  Low NIBBLE of AL (Access Mode)
 18167                                  ;		open_for_read	file is opened for reading
 18168                                  ;		open_for_write	file is opened for writing
 18169                                  ;		open_for_both	file is opened for both reading and writing.
 18170                                  ; Function:
 18171                                  ;	Check this access mode for correctness
 18172                                  ; Outputs:
 18173                                  ;	[open_access] = AL input
 18174                                  ;	Carry Clear
 18175                                  ;		Mode is correct
 18176                                  ;		AX unchanged
 18177                                  ;	Carry Set
 18178                                  ;		Mode is bad
 18179                                  ;		AX = error_invalid_access
 18180                                  ; No other registers effected
 18181                                  ;----------------------------------------------------------------------------
 18182                                  
 18183                                  Check_Access_AX:
 18184 00002D5F A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18185 00002D62 53                      	PUSH	BX
 18186                                  
 18187                                  ;	If sharing, then test for special sharing mode for FCBs
 18188                                  
 18189 00002D63 88C3                    	MOV	BL,AL
 18190 00002D65 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18191 00002D68 803E[7205]FF            	CMP	byte [FSHARING],-1
 18192 00002D6D 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18193 00002D6F 80FB70                  	CMP	BL,SHARING_NET_FCB
 18194 00002D72 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18195                                  CheckShareMode:
 18196 00002D74 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18197 00002D77 770D                    	JA	short Make_Bad_Access
 18198                                  CheckAccessMode:
 18199 00002D79 88C3                    	MOV	BL,AL
 18200 00002D7B 80E30F                  	AND	BL,access_mask
 18201 00002D7E 80FB02                  	CMP	BL,2
 18202 00002D81 7703                    	JA	short Make_Bad_Access
 18203 00002D83 5B                      	POP	BX
 18204 00002D84 F8                      	CLC
 18205 00002D85 C3                      	retn
 18206                                  
 18207                                  Make_Bad_Access:
 18208 00002D86 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18209 00002D89 5B                      	POP	BX
 18210 00002D8A F9                      	STC
 18211 00002D8B C3                      	retn
 18212                                  
 18213                                  ;============================================================================
 18214                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18215                                  ;============================================================================
 18216                                  ; 08/08/2018 - Retro DOS v3.0
 18217                                  ; 18/05/2019 - Retro DOS v4.0
 18218                                  
 18219                                  ;**	Low level routine for returning disk drive information from a local
 18220                                  ;	  or NET device
 18221                                  ;
 18222                                  ;	DISK_INFO
 18223                                  ;
 18224                                  ;	  Modification history:
 18225                                  ;
 18226                                  ;		Created: ARR 30 March 1983
 18227                                  
 18228                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18229                                  ;---------------------------------------------------------------------------
 18230                                  ; Procedure Name : DISK_INFO
 18231                                  ;
 18232                                  ; Inputs:
 18233                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18234                                  ;		(It MAY NOT be NUL, error not detected)
 18235                                  ; Function:
 18236                                  ;	Get Interesting Drive Information
 18237                                  ; Returns:
 18238                                  ;	DX = Number of free allocation units
 18239                                  ;	BX = Total Number of allocation units on disk
 18240                                  ;	CX = Sector size
 18241                                  ;	AL = Sectors per allocation unit
 18242                                  ;	AH = FAT ID BYTE
 18243                                  ;	Carry set if error (currently user FAILed to I 24)
 18244                                  ; Segs except ES preserved, others destroyed
 18245                                  ;----------------------------------------------------------------------------
 18246                                  
 18247                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18248                                  ;hkn; DOSDATA. 
 18249                                  
 18250                                  DISK_INFO:
 18251                                  	; 08/08/2018 - Retro DOS v3.0
 18252                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18253                                  
 18254 00002D8C E83FE5                  	call	TestNet
 18255 00002D8F 7306                    	JNC	short LOCAL_DSK_INFO
 18256                                  
 18257                                  ;IF NOT Installed
 18258                                  ;	transfer NET_DISK_INFO
 18259                                  ;ELSE
 18260                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18261                                  	;INT	2FH
 18262                                  	;return
 18263                                  
 18264 00002D91 B80C11                  	mov     ax,110Ch
 18265 00002D94 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18266                                  			; ES:DI -> current directory
 18267                                  			; Return: AL = sectors per cluster, BX = total clusters
 18268                                  			; CX = bytes per sector, DX = number of available clusters
 18269 00002D96 C3                      	retn
 18270                                  ;ENDIF
 18271                                  
 18272                                  LOCAL_DSK_INFO:
 18273 00002D97 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18274 00002D9C E8F4E5                  	call	ECritDisk
 18275 00002D9F E8702A                  	call	FATREAD_CDS		; perform media check.
 18276 00002DA2 7241                    	JC	short CRIT_LEAVE
 18277 00002DA4 BB0200                  	MOV	BX,2
 18278 00002DA7 E8B628                  	call	UNPACK			; Get first FAT sector into CURBUF
 18279 00002DAA 7239                    	JC	short CRIT_LEAVE
 18280 00002DAC C536[E205]              	LDS	SI,[CURBUF]
 18281                                  	;mov	ah,[si+20]
 18282 00002DB0 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18283                                  
 18284                                  ;hkn; SS is DOSDATA
 18285 00002DB3 16                      	push	ss
 18286 00002DB4 1F                      	pop	ds
 18287                                  	;mov	cx,[es:bp+0Dh]
 18288 00002DB5 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18289                                  
 18290                                  ; Examine the current free count. If it indicates that we have an invalid
 18291                                  ; count, do the expensive calculation.
 18292                                  
 18293                                  	;mov	dx,[es:bp+1Fh]
 18294 00002DB9 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18295 00002DBD 83FAFF                  	CMP	DX,-1			; is it valid?
 18296 00002DC0 7404                    	JZ	short DoScan
 18297                                  
 18298                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18299                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18300                                  ; the count.
 18301                                  
 18302 00002DC2 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18303 00002DC4 7222                    	JB	short GotVal		; yes, trust it.
 18304                                  DoScan:
 18305 00002DC6 31D2                    	XOR	DX,DX
 18306 00002DC8 49                      	DEC	CX
 18307                                  SCANFREE:
 18308 00002DC9 E89428                  	call	UNPACK
 18309 00002DCC 7217                    	JC	short CRIT_LEAVE
 18310 00002DCE 7501                    	JNZ	short NOTFREECLUS
 18311 00002DD0 42                      	INC	DX			; A free one
 18312                                  NOTFREECLUS:
 18313 00002DD1 43                      	INC	BX			; Next cluster
 18314 00002DD2 E2F5                    	LOOP	SCANFREE
 18315 00002DD4 4B                      	DEC	BX			; BX was next cluster. Convert to
 18316                                  ReturnVals:
 18317 00002DD5 4B                      	DEC	BX			; count
 18318                                  	;mov	al,[es:bp+4]
 18319 00002DD6 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18320 00002DDA FEC0                    	INC	AL			; Sectors/cluster
 18321                                  	;mov	cx,[es:bp+2]
 18322 00002DDC 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18323                                  	;mov	[es:bp+1Fh],dx
 18324 00002DE0 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18325 00002DE4 F8                      	CLC
 18326                                  CRIT_LEAVE:
 18327                                  	;call	LCritDisk
 18328                                  	;retn
 18329                                  	; 17/12/2022
 18330 00002DE5 E9C6E5                  	jmp	LCritDisk
 18331                                  
 18332                                  ; We have correctly computed everything previously. Load up registers for
 18333                                  ; return.
 18334                                  
 18335                                  GotVal: 
 18336 00002DE8 89CB                    	MOV	BX,CX			; get cluster count
 18337 00002DEA EBE9                    	JMP	short ReturnVals
 18338                                  
 18339                                  ;============================================================================
 18340                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18341                                  ;============================================================================
 18342                                  ; 22/07/2018 - Retro DOS v3.0
 18343                                  
 18344                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18345                                  ;	NAME	DOS_SEARCH
 18346                                  
 18347                                  ;**	Low level routines for doing local and NET directory searches
 18348                                  ;
 18349                                  ;	DOS_SEARCH_FIRST
 18350                                  ;	DOS_SEARCH_NEXT
 18351                                  ;	RENAME_NEXT
 18352                                  ;
 18353                                  ;	Revision history:
 18354                                  ;
 18355                                  ;	    Created: ARR 30 March 1983
 18356                                  ;	    A000	version 4.00  Jan. 1988
 18357                                  ;	    A001	PTM 3564 -- search for fastopen
 18358                                  
 18359                                  ;Installed = TRUE
 18360                                  
 18361                                  ;--------------------------------------------------------------------------
 18362                                  ;
 18363                                  ; Procedure Name : DOS_SEARCH_FIRST
 18364                                  ;
 18365                                  ; Inputs:
 18366                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18367                                  ;		terminated)
 18368                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18369                                  ;		( = -1 if current dir not involved, else
 18370                                  ;		 Points to first char after last "/" of current dir part)
 18371                                  ;	[THISCDS] Points to CDS being used
 18372                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18373                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18374                                  ;	[DMAADD] Points to 53 byte buffer
 18375                                  ; Function:
 18376                                  ;	Initiate a search for the given file spec
 18377                                  ; Outputs:
 18378                                  ;	CARRY CLEAR
 18379                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18380                                  ;
 18381                                  ;	LOCAL
 18382                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18383                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18384                                  ;	    11 byte search name with Meta chars in it
 18385                                  ;	    Search Attribute Byte, attribute of search
 18386                                  ;	    WORD LastEnt value
 18387                                  ;	    WORD DirStart
 18388                                  ;	    4 byte pad
 18389                                  ;	    32 bytes of the directory entry found
 18390                                  ;	NET
 18391                                  ;	    21 bytes First byte has high bit set
 18392                                  ;	    32 bytes of the directory entry found
 18393                                  ;
 18394                                  ;	CARRY SET
 18395                                  ;	    AX = error code
 18396                                  ;		error_no_more_files
 18397                                  ;			No match for this file
 18398                                  ;		error_path_not_found
 18399                                  ;			Bad path (not in curr dir part if present)
 18400                                  ;		error_bad_curr_dir
 18401                                  ;			Bad path in current directory part of path
 18402                                  ; DS preserved, others destroyed
 18403                                  ;---------------------------------------------------------------------------
 18404                                  
 18405                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18406                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18407                                  
 18408                                  DOS_SEARCH_FIRST:
 18409                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18410                                  
 18411 00002DEC C43E[A205]              	LES	DI,[THISCDS]
 18412 00002DF0 83FFFF                  	CMP	DI,-1
 18413 00002DF3 7506                    	JNZ	short TEST_RE_NET2
 18414                                  
 18415                                  ;IF NOT Installed
 18416                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18417                                  ;ELSE
 18418                                  	;mov	ax,1119h
 18419 00002DF5 B81911                  	MOV	AX,(MultNET<<8)|25
 18420 00002DF8 CD2F                    	INT	2Fh
 18421 00002DFA C3                      	retn
 18422                                  ;ENDIF
 18423                                  
 18424                                  TEST_RE_NET2:
 18425                                  	;test	word [es:di+43h],8000h
 18426                                  	; 17/12/2022
 18427                                  	;test	byte [es:di+44h],80h
 18428                                  	; 28/12/2022 (BugFix)
 18429 00002DFB 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18430                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18431 00002E00 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18432                                  
 18433                                  ;IF NOT Installed
 18434                                  ;	transfer NET_SEARCH_FIRST
 18435                                  ;ELSE
 18436                                  	;mov	ax,111Bh
 18437 00002E02 B81B11                  	MOV	AX,(MultNET<<8)|27
 18438 00002E05 CD2F                    	INT	2FH
 18439 00002E07 C3                      	retn
 18440                                  ;ENDIF
 18441                                  	; 18/05/2019 - Retro DOS v4.0
 18442                                  LOCAL_SEARCH_FIRST:
 18443 00002E08 E888E5                  	call	ECritDisk
 18444                                  	; MSDOS 6.0
 18445                                  	;;test	word [DOS34_FLAG],400h
 18446                                  	; 17/12/2022
 18447                                  	;test	byte [DOS34_FLAG+1],04h
 18448 00002E0B F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18449                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18450 00002E10 7405                    	JZ	short NOFN			;AN000;
 18451                                  	;or	byte [FastOpenFlg],1
 18452 00002E12 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18453                                  NOFN:						;AN000;
 18454 00002E17 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18455                                  	; MSDOS 6.0
 18456 00002E1C E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18457 00002E1F 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18458                                  	;and	byte [FastOpenFlg],80h
 18459 00002E21 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18460                                  norm_GETPATH:
 18461 00002E26 E8DD11                  	call	GETPATH
 18462                                  	; BX = offset NAME1
 18463                                  ;_getdone:
 18464 00002E29 7318                    	JNC	short find_check_dev
 18465 00002E2B 7511                    	JNZ	short bad_path3
 18466 00002E2D 08C9                    	OR	CL,CL
 18467 00002E2F 740D                    	JZ	short bad_path3
 18468                                  find_no_more:
 18469                                  	;mov	ax,12h
 18470 00002E31 B81200                  	MOV	AX,error_no_more_files
 18471                                  BadBye:
 18472                                  	; MSDOS 6.0
 18473 00002E34 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18474                                  
 18475 00002E3A F9                      	STC
 18476                                  	;call	LCritDisk
 18477                                  	;retn
 18478                                  	; 18/12/2022
 18479 00002E3B E970E5                  	jmp	LCritDisk
 18480                                  
 18481                                  bad_path3:
 18482                                  	;mov	ax,3
 18483 00002E3E B80300                  	MOV	AX,error_path_not_found
 18484 00002E41 EBF1                    	JMP	short BadBye
 18485                                  
 18486                                  find_check_dev:
 18487 00002E43 08E4                    	OR	AH,AH
 18488 00002E45 790A                    	JNS	short found_entry
 18489 00002E47 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18490 00002E4D FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18491                                  found_entry:
 18492                                  
 18493                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18494                                  ; a search-next may not have wfp_start set correctly
 18495                                  
 18496 00002E51 C43E[2C03]              	LES	DI,[DMAADD]
 18497 00002E55 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18498 00002E59 AC                      	LODSB
 18499 00002E5A 2C40                    	SUB	AL,'A'-1                ; logical drive
 18500 00002E5C AA                      	STOSB				; High bit not set (local)
 18501                                  found_it:
 18502 00002E5D C43E[2C03]              	LES	DI,[DMAADD]
 18503 00002E61 47                      	INC	DI
 18504                                  
 18505                                  	; MSDOS 6.0
 18506 00002E62 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18507                                  	;test	byte [FastOpenFlg],10h
 18508 00002E63 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18509 00002E68 7408                    	JZ	short notfast			  ;FO.;AN001;
 18510 00002E6A 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18511 00002E6C 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18512 00002E70 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18513                                  
 18514                                  notfast:
 18515 00002E72 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18516                                  movmov:
 18517                                  ; Special E5 code
 18518 00002E75 A4                      	MOVSB
 18519 00002E76 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18520 00002E7B 7505                    	JNZ	short NOTKANJB
 18521 00002E7D 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18522                                  NOTKANJB:
 18523 00002E82 B90A00                  	MOV	CX,10
 18524 00002E85 F3A4                    	REP	MOVSB
 18525                                  
 18526                                  	; 08/09/2018
 18527 00002E87 1F                      	POP	DS			;FO.;AN001; restore ds
 18528                                  
 18529 00002E88 A0[6B05]                	MOV	AL,[ATTRIB]
 18530 00002E8B AA                      	STOSB
 18531 00002E8C 50                      	PUSH	AX			; Save AH device info
 18532 00002E8D A1[4803]                	MOV	AX,[LASTENT]
 18533 00002E90 AB                      	STOSW
 18534 00002E91 A1[C205]                	MOV	AX,[DIRSTART]
 18535 00002E94 AB                      	STOSW
 18536                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18537 00002E95 83C704                  	ADD	DI,4
 18538 00002E98 58                      	POP	AX			; Recover AH device info
 18539 00002E99 08E4                    	OR	AH,AH
 18540 00002E9B 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18541 00002E9D 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18542 00002EA2 7510                    	JNZ	short OKSTORE
 18543                                  
 18544                                  	; MSDOS 6.0
 18545 00002EA4 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18546                                  					;AN000;;FO. from fastopen and is good
 18547 00002EA9 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18548                                  
 18549                                  	; The user has specified the root directory itself, rather than some
 18550                                  	; contents of it. We can't "find" that.
 18551                                  
 18552 00002EAB 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18553                                  					;   stuffing a -1 at Lastent
 18554 00002EB1 E97DFF                  	JMP	find_no_more
 18555                                  
 18556                                  OKSTORE:
 18557 00002EB4 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18558                                  DOSREL:
 18559                                  	; BX = offset NAME1 (from GETPATH)
 18560 00002EB8 89DE                    	MOV	SI,BX			; SI-> start of entry
 18561                                  
 18562                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18563                                  
 18564                                  	;mov	cx,32
 18565 00002EBA B92000                  	MOV	CX,dir_entry.size
 18566                                  ;;;;; 7/29/86
 18567 00002EBD 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18568 00002EBF F3A4                    	REP	MOVSB
 18569 00002EC1 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18570 00002EC3 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18571 00002EC7 7504                    	JNZ	short NO05
 18572 00002EC9 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18573                                  NO05:
 18574                                  
 18575                                  ;;;;; 7/29/86
 18576                                  
 18577                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18578                                  	; 16/12/2022
 18579                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18580                                  	; MSDOS 6.0
 18581                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18582                                  	; 18/05/2019 - Retro DOS v4.0
 18583 00002ECD 16                      	push	ss
 18584 00002ECE 1F                      	pop	ds
 18585                                  	; 16/12/2022
 18586 00002ECF 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18587                                  
 18588                                  ;hkn; SS is DOSDATA
 18589                                  	;push	ss
 18590                                  	;pop	ds
 18591 00002ED4 F8                      	CLC
 18592                                  	;call	LCritDisk
 18593                                  	;retn
 18594                                  	; 16/12/2022
 18595 00002ED5 E9D6E4                  	jmp	LCritDisk
 18596                                  
 18597                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18598                                  ;----------------------------------------------------------------------------
 18599                                  ;
 18600                                  ; Procedure Name : DOS_SEARCH_NEXT
 18601                                  ;
 18602                                  ; Inputs:
 18603                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18604                                  ;	    (only first 21 bytes must have valid information)
 18605                                  ; Function:
 18606                                  ;	Look for subsequent matches
 18607                                  ; Outputs:
 18608                                  ;	CARRY CLEAR
 18609                                  ;	    The 53 bytes at DMAADD are updated for next call
 18610                                  ;		(see DOS_SEARCH_FIRST)
 18611                                  ;	CARRY SET
 18612                                  ;	    AX = error code
 18613                                  ;		error_no_more_files
 18614                                  ;			No more files to find
 18615                                  ; DS preserved, others destroyed
 18616                                  ;---------------------------------------------------------------------------
 18617                                  
 18618                                  ;hkn; called from search.asm. DS already set up at this point.
 18619                                  
 18620                                  DOS_SEARCH_NEXT:
 18621 00002ED8 C43E[2C03]              	LES	DI,[DMAADD]
 18622 00002EDC 268A05                  	MOV	AL,[ES:DI]
 18623 00002EDF A880                    	TEST	AL,80H			; Test for NET
 18624 00002EE1 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18625                                  ;IF NOT Installed
 18626                                  ;	transfer NET_SEARCH_NEXT
 18627                                  ;ELSE
 18628                                  	;mov	ax,111Ch
 18629 00002EE3 B81C11                  	MOV	AX,(MultNET<<8)|28
 18630 00002EE6 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18631                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18632                                  		     ; Return: CF set on error, AX = DOS error code
 18633                                  		     ; CF clear if successful
 18634 00002EE8 C3                      	retn
 18635                                  ;ENDIF
 18636                                  
 18637                                  LOCAL_SEARCH_NEXT:
 18638                                  	;AL is drive A=1
 18639                                  	;mov	byte [EXTERR_LOCUS],2
 18640 00002EE9 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18641 00002EEE E8A2E4                  	call	ECritDisk
 18642                                  
 18643                                  ;hkn; DummyCDS is in DOSDATA
 18644 00002EF1 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18645                                  ;hkn; Segment address is DOSDATA - use ds
 18646                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18647 00002EF7 8C1E[A405]              	mov	[THISCDS+2],DS
 18648                                  
 18649 00002EFB 0440                    	ADD	AL,'A'-1
 18650 00002EFD E8113C                  	call	InitCDS
 18651                                  
 18652                                  ;	call	GETTHISDRV		; Set CDS pointer
 18653                                  
 18654 00002F00 7236                    	JC	short No_files		; Bogus drive letter
 18655 00002F02 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18656                                  	;les	bp,[es:di+45h]
 18657 00002F06 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18658 00002F0A E86ED7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18659                                  
 18660                                  	 ;16/12/2022
 18661 00002F0D 268A4600                	mov	al,[ES:BP]
 18662                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18663                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18664 00002F11 A2[7605]                	mov	[THISDRV],AL
 18665                                  	;mov	word [CREATING],0E500h
 18666 00002F14 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18667 00002F1A C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18668 00002F1F C536[2C03]              	LDS	SI,[DMAADD]
 18669 00002F23 AC                      	LODSB				; Drive Byte
 18670                                  
 18671                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18672                                  RENAME_NEXT:
 18673                                  	;context ES
 18674 00002F24 16                      	push	ss
 18675 00002F25 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18676                                  
 18677                                  ;hkn; NAME1 is in DOSDATA
 18678 00002F26 BF[4B05]                	MOV	DI,NAME1
 18679                                  
 18680 00002F29 B90B00                  	MOV	CX,11
 18681 00002F2C F3A4                    	REP	MOVSB			; Search name
 18682 00002F2E AC                      	LODSB				; Attribute
 18683                                  
 18684                                  ;hkn; SS override
 18685 00002F2F 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18686 00002F33 AD                      	LODSW				; LastEnt
 18687 00002F34 09C0                    	OR	AX,AX
 18688 00002F36 7903                    	JNS	short cont_load
 18689                                  No_files:
 18690 00002F38 E9F6FE                  	JMP	find_no_more
 18691                                  
 18692                                  cont_load:
 18693 00002F3B 50                      	PUSH	AX			; Save LastEnt
 18694 00002F3C AD                      	LODSW				; DirStart
 18695 00002F3D 89C3                    	MOV	BX,AX
 18696                                  
 18697                                  ;hkn; SS is DOSDATA
 18698                                  	;context DS
 18699 00002F3F 16                      	push	ss
 18700 00002F40 1F                      	pop	ds
 18701 00002F41 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18702                                  	;invoke	SetDirSrch
 18703 00002F45 E85E10                  	call	SETDIRSRCH
 18704 00002F48 7303                    	JNC	short SEARCH_GOON
 18705 00002F4A 58                      	POP	AX			; Clean stack
 18706 00002F4B EBEB                    	JMP	short No_files
 18707                                  
 18708                                  SEARCH_GOON:
 18709 00002F4D E85813                  	call	STARTSRCH
 18710 00002F50 58                      	POP	AX
 18711 00002F51 E82410                  	call	GETENT
 18712 00002F54 72E2                    	JC	short No_files
 18713 00002F56 E8550F                  	call	NEXTENT
 18714 00002F59 72DD                    	JC	short No_files
 18715 00002F5B 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18716 00002F5D E9FDFE                  	JMP	found_it ; 10/08/2018
 18717                                  
 18718                                  ; MSDOS 6.0
 18719                                  ;---------------------------------------------------------------------------
 18720                                  ;
 18721                                  ; Procedure Name : CHECK_QUESTION
 18722                                  ;
 18723                                  ; Input: [WFP_START]= pointer to final path
 18724                                  ; Function: check '?' char
 18725                                  ; Output: carry clear, if no '?'
 18726                                  ;	 carry set, if '?' exists
 18727                                  ;---------------------------------------------------------------------------
 18728                                  
 18729                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18730                                  CHECK_QUESTION:
 18731                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18732                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18733 00002F60 16                      	push	ss
 18734 00002F61 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18735                                  	; 16/12/2022
 18736                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18737 00002F62 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18738                                  	;mov	si,[ss:WFP_START]
 18739                                  getnext:				;AN000;
 18740 00002F66 AC                      	LODSB				;AN000;;FO. get char
 18741 00002F67 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18742 00002F69 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18743 00002F6B 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18744 00002F6D 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18745 00002F6F F9                      	STC				;AN000;;FO.
 18746                                  NO_Question:				;AN000;
 18747 00002F70 C3                      	retn				;AN000;;FO.
 18748                                  
 18749                                  ;============================================================================
 18750                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18751                                  ;============================================================================
 18752                                  ; 23/07/2018 - Retro DOS v3.0
 18753                                  ; 18/05/2019 - Retro DOS v4.0
 18754                                  
 18755                                  ;**
 18756                                  ;
 18757                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18758                                  ;  If process has NET resources a close all is sent out over the net.
 18759                                  ;
 18760                                  ;   DOS_ABORT
 18761                                  ;
 18762                                  ;   Modification history:
 18763                                  ;
 18764                                  ;       Created: ARR 30 March 1983
 18765                                  ;
 18766                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18767                                  ;				being terminated only if it is busy.
 18768                                  ;
 18769                                  
 18770                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18771                                  ;--------------------------------------------------------------------------
 18772                                  ;
 18773                                  ; Procedure Name : DOS_ABORT
 18774                                  ;
 18775                                  ; Inputs:
 18776                                  ;       [CurrentPDB] set to PID of process aborting
 18777                                  ; Function:
 18778                                  ;       Close all files and free all SFTs for this PID
 18779                                  ; Returns:
 18780                                  ;       None
 18781                                  ; All destroyed except stack
 18782                                  ;---------------------------------------------------------------------------
 18783                                  
 18784                                  DOS_ABORT:
 18785 00002F71 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18786 00002F76 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18787                                  reset_free_jfn:
 18788 00002F7B 89CB                    	MOV     BX,CX
 18789 00002F7D 51                      	PUSH    CX
 18790 00002F7E 4B                      	DEC     BX                      ; get jfn (start with last one)
 18791                                  
 18792 00002F7F E8C338                  	CALL	_$CLOSE
 18793 00002F82 59                      	POP     CX
 18794 00002F83 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18795                                  
 18796                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18797                                  ; are running in the no-sharing no-network environment, we are simulating the
 18798                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18799                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18800                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18801                                  ;
 18802                                  ; If sharing is loaded, then the following call to close process will
 18803                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18804                                  ;
 18805                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18806                                  ; known network resources. These resources are then responsible for cleaning
 18807                                  ; up after this process.
 18808                                  ;
 18809                                  ; Sleazy, eh?
 18810                                  
 18811                                  	;context DS			; SS is DOSDATA
 18812 00002F85 16                      	push	ss
 18813 00002F86 1F                      	pop	ds  ; 09/09/2018
 18814                                  
 18815                                  	;CallInstall Net_Abort, MultNET, 29
 18816 00002F87 B81D11                  	mov	ax, 111Dh
 18817 00002F8A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18818                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18819                                  			; DS???, SS = DOS CS
 18820                                  ;if installed
 18821 00002F8C FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18822                                  ;else
 18823                                  ;	call 	MFTCloseP
 18824                                  ;endif
 18825                                  
 18826                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18827                                  ; counts.
 18828                                  					; SS override
 18829 00002F90 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18830                                  	;mov	cx,[es:di+4]
 18831 00002F95 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18832 00002F99 E317                    	jcxz    FCBScanDone
 18833                                  	;lea	di,[di+6]
 18834 00002F9B 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18835 00002F9E 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18836                                  FCBTest:
 18837                                  	;cmp	[es:di+31h],ax
 18838 00002FA2 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18839 00002FA6 7505                    	jnz	short FCBNext		; no, skip it
 18840 00002FA8 26C7050000              	mov	word [es:di],0
 18841                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18842                                  FCBNext:
 18843 00002FAD 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18844 00002FB0 E2F0                    	loop    FCBTest
 18845                                  FCBScanDone:
 18846                                  
 18847                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18848                                  
 18849 00002FB2 31DB                    	XOR     BX,BX
 18850                                  Scan:
 18851 00002FB4 53                      	push    bx
 18852 00002FB5 E80838                  	call	SFFromSFN
 18853 00002FB8 5B                      	pop     bx
 18854                                  	;jnc	short Scan1
 18855                                  	;retn
 18856                                  	; 18/12/2022
 18857 00002FB9 72B5                    	jc	short NO_Question ; retn
 18858                                  
 18859                                  ;M038
 18860                                  ; Do what the comment above says, check for busy state
 18861                                  
 18862                                  Scan1:
 18863                                  	;cmp	word [es:di],0
 18864                                  	;jz	short scan_next  ; MSDOS 3.3
 18865                                  	; MSDOS 6.0
 18866 00002FBB 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18867                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18868                                  				; Is Sft busy? ;M038
 18869 00002FBF 7519                    	jnz	short scan_next
 18870                                  ;
 18871                                  ; we have a SFT that is busy. See if it is for the current process
 18872                                  ;
 18873 00002FC1 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18874                                  	;cmp	[es:di+31h],ax
 18875 00002FC5 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18876 00002FC9 750F                    	jnz	short scan_next
 18877 00002FCB 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18878                                  	;cmp	[es:di+2Fh],ax
 18879 00002FCF 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18880 00002FD3 7505                    	jnz	short scan_next
 18881                                  
 18882                                  ; This SFT is labelled as ours.
 18883                                  
 18884 00002FD5 26C7050000              	mov	word [es:di],0
 18885                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18886                                  scan_next:
 18887 00002FDA 43                      	inc     bx
 18888 00002FDB EBD7                    	jmp     short Scan
 18889                                  
 18890                                  ;============================================================================
 18891                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18892                                  ;============================================================================
 18893                                  ; 23/07/2018 - Retro DOS v3.0
 18894                                  ; 18/05/2019 - Retro DOS v4.0
 18895                                  
 18896                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18897                                  ;
 18898                                  ;	DOS_CLOSE
 18899                                  ;	DOS_COMMIT
 18900                                  ;	FREE_SFT
 18901                                  ;	SetSFTTimes
 18902                                  ;
 18903                                  ;	Revision history:
 18904                                  ;
 18905                                  ;	   AN000  version 4.00	Jan. 1988
 18906                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 18907                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 18908                                  
 18909                                  ;Installed = TRUE
 18910                                  
 18911                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 18912                                  ;---------------------------------------------------------------------------
 18913                                  ;
 18914                                  ; Procedure Name : DOS_CLOSE
 18915                                  ;
 18916                                  ; Inputs:
 18917                                  ;	[THISSFT] set to the SFT for the file being used
 18918                                  ; Function:
 18919                                  ;	Close the indicated file via the SFT
 18920                                  ; Returns:
 18921                                  ;	sf_ref_count decremented otherwise
 18922                                  ;	ES:DI point to SFT
 18923                                  ;	Carry set if error
 18924                                  ;	    AX has error code
 18925                                  ; DS preserved, others destroyed
 18926                                  ;---------------------------------------------------------------------------
 18927                                  
 18928                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 18929                                  
 18930                                  ; 18/05/2019 - Retro DOS v4.0
 18931                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 18932                                  
 18933                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18934                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 18935                                  
 18936                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 18937                                  
 18938                                  DOS_CLOSE:
 18939 00002FDD C43E[9E05]              	LES	DI,[THISSFT]
 18940                                  	;mov	bx,[ES:DI+5]
 18941 00002FE1 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18942                                  
 18943                                  ; Network closes are handled entirely by the net code.
 18944                                  
 18945                                  	;;test	bx,8000h
 18946                                  	;TEST	BX,sf_isnet
 18947                                  	; 17/12/2022
 18948                                  	;test	bh,80h
 18949 00002FE5 F6C780                  	test	bh,(sf_isnet>>8)
 18950 00002FE8 7406                    	JZ	short LocalClose
 18951                                  
 18952                                  	;CallInstall Net_Close,MultNET,6
 18953 00002FEA B80611                  	mov     ax,1106h
 18954 00002FED CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 18955                                  			; ES:DI -> SFT
 18956                                  			; SFT DPB field -> DPB of drive containing file
 18957                                  			; Return: CF set on error, AX = DOS error code
 18958                                  			; CF clear if successful
 18959 00002FEF C3                      	retn
 18960                                  
 18961                                  ; All closes release the sharing information.
 18962                                  ; No commit releases sharing information
 18963                                  ;
 18964                                  ; All closes decrement the ref count.
 18965                                  ; No commit decrements the ref count.
 18966                                  
 18967                                  LocalClose:
 18968 00002FF0 E8A0E3                  	call	ECritDisk
 18969 00002FF3 E86B01                  	CALL	SetSFTTimes
 18970 00002FF6 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 18971                                  
 18972                                  ;hkn; SS is DOSDATA
 18973                                  	;Context DS
 18974 00002FF9 16                      	push	ss
 18975 00002FFA 1F                      	pop	ds
 18976                                  
 18977 00002FFB 50                      	push	ax
 18978 00002FFC 53                      	push	bx
 18979 00002FFD E8AC44                  	call	ShareEnd
 18980 00003000 5B                      	pop	bx
 18981 00003001 58                      	pop	ax
 18982                                  
 18983                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 18984                                  
 18985                                  CloseEntry:
 18986 00003002 50                      	PUSH	AX
 18987                                  
 18988                                  ; File clean or device does not get stamped nor disk looked at.
 18989                                  
 18990                                  	;test	bx,0C0h
 18991                                  	; 17/12/2022
 18992 00003003 F6C3C0                  	test	bl,devid_file_clean+devid_device
 18993                                  	;TEST	BX,devid_file_clean+devid_device
 18994 00003006 7403                    	JZ	short rdir
 18995                                  	; 14/11/2022
 18996 00003008 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 18997                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 18998                                  
 18999                                  ; Retrieve the directory entry for the file
 19000                                  
 19001                                  rdir:
 19002 0000300B E8DA00                  	CALL	DirFromSFT
 19003                                  	;mov	al,5
 19004 0000300E B005                    	MOV	AL,error_access_denied
 19005 00003010 7303                    	JNC	short clook
 19006                                  	; 14/11/2022
 19007 00003012 E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19008                                  	;jc	short CloseFinish ; 24/07/2019
 19009                                  clook:
 19010                                  
 19011                                  ; ES:DI points to entry
 19012                                  ; DS:SI points to SFT
 19013                                  ; ES:BX points to buffer header
 19014                                  
 19015 00003015 57                      	push	di
 19016 00003016 56                      	push	si
 19017                                  	;lea	si,[si+20h]
 19018 00003017 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19019                                  
 19020                                  ; ES:DI point to directory entry
 19021                                  ; DS:SI point to unpacked name
 19022                                  
 19023 0000301A E865E2                  	call	XCHGP
 19024                                  
 19025                                  ; ES:DI point to unpacked name
 19026                                  ; DS:SI point to directory entry
 19027                                  
 19028 0000301D E8EC0E                  	call	MetaCompare
 19029 00003020 E85FE2                  	call	XCHGP
 19030 00003023 5E                      	pop	si
 19031 00003024 5F                      	pop	di
 19032 00003025 740C                    	JZ	short CLOSE_GO		; Name OK
 19033                                  Bye:	
 19034 00003027 89F7                    	MOV	DI,SI
 19035 00003029 1E                      	PUSH	DS
 19036 0000302A 07                      	POP	ES			; ES:DI points to SFT
 19037 0000302B 16                      	PUSH	SS
 19038 0000302C 1F                      	POP	DS
 19039 0000302D F9                      	STC
 19040                                  	;mov	al,2
 19041 0000302E B002                    	MOV	AL,error_file_not_found
 19042 00003030 E99600                  	JMP	CloseFinish ; 24/07/2019
 19043                                  
 19044                                  	; 18/05/2019 - Retro DOS v4.0
 19045                                  CLOSE_GO:
 19046                                  	; MSDOS 6.0
 19047                                  	;test	word [si+2],8000h
 19048                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19049                                  	; 17/12/2022
 19050                                  	;test	byte [si+3],80h
 19051 00003033 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19052 00003037 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19053                                  	; MSDOS 3.3 & MSDOS 6.0
 19054                                  	;mov	ch,[es:di+0Bh]
 19055 00003039 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19056                                  	;mov	al,[si+4]
 19057 0000303D 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19058                                  
 19059                                  ;hkn; SS override
 19060 00003040 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19061                                  	; MSDOS 3.3
 19062                                  	;;call	MatchAttributes
 19063                                  	;;JNZ	short Bye		; attributes do not match
 19064                                  	; 18/05/2019
 19065 00003044 EB07                    	JMP	SHORT setattr		;FT.
 19066                                  nofcb:
 19067                                  	; MSDOS 6.0
 19068                                  	;mov	al,[si+4]
 19069 00003046 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19070 00003049 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19071                                  setattr:
 19072                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19073                                  	;or	byte [es:di+0Bh],20h
 19074 0000304D 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19075                                  	; MSDOS 6.0
 19076                                  	;mov	ax,[es:di+1Ah]
 19077 00003052 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19078                                  					;F.O. save old first cluster
 19079                                  ;hkn; SS override
 19080 00003056 36A3[BD0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19081                                  
 19082                                  	;mov	ax,[si+0Bh]
 19083 0000305A 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19084                                  	;mov	[es:di+1Ah],ax
 19085 0000305D 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19086                                  	;mov	ax,[si+11h]
 19087 00003061 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19088                                  	;mov	[es:di+1Ch],ax
 19089 00003064 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19090                                  	;mov	ax,[si+13h]
 19091 00003068 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19092                                  	;mov	[es:di+1Eh],ax
 19093 0000306B 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19094                                  	;mov	ax,[si+0Fh]
 19095 0000306F 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19096                                  	;mov	[es:di+18h],ax
 19097 00003072 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19098                                  	;mov	ax,[si+0Dh]
 19099 00003076 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19100                                  	;mov	[es:di+16h],ax
 19101 00003079 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19102                                  
 19103                                  	; MSDOS 6.0
 19104                                  ;; File Tagging
 19105 0000307D 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19106                                  				  ;LB. if already dirty		    ;AN000;
 19107 00003082 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19108                                  	; 02/06/2019
 19109 00003084 E8012C                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19110                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19111                                  	;or	byte [es:bx+5],40h
 19112 00003087 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19113                                  yesdirty4:
 19114 0000308C 1E                      	push	ds
 19115 0000308D 56                      	push	si
 19116                                  	; MSDOS 6.0
 19117                                  	;mov	cx,[si+0Bh]
 19118                                  	; 07/12/2022
 19119 0000308E 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19120                                  ;hkn; SS override
 19121 00003091 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19122                                  	; MSDOS 3.3 
 19123                                  	;push	ss
 19124                                  	;pop	ds
 19125                                  	;MOV	AL,[THISDRV]
 19126                                  ;;; 10/1/86  update fastopen cache
 19127                                  	; MSDOS 3.3 & MSDOS 6.0
 19128 00003095 52                      	PUSH	DX
 19129 00003096 B400                    	MOV	AH,0			; dir entry update
 19130 00003098 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19131                                  	; MSDOS 6.0
 19132 0000309A 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19133 0000309C 750D                    	JNZ	short do_update2	;AN005; no, do update
 19134 0000309E B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19135                                  	;mov	di,[si+1Bh]
 19136 000030A0 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19137                                  	;mov	cx,[si+1Dh]
 19138 000030A3 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19139                                  	;mov	dh,[si+1Fh]
 19140 000030A6 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19141 000030A9 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19142                                  do_update2:				;AN011;F.O.
 19143                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19144                                  	; 
 19145 000030AB 363B0E[BD0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19146 000030B0 7407                    	JZ	short do_update		;AN011;F.O. yes
 19147 000030B2 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19148 000030B4 368B0E[BD0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19149                                  do_update:				;AN005;
 19150                                  ;hkn; SS is DOSDATA
 19151                                  	;Context DS
 19152 000030B9 16                      	push	ss
 19153 000030BA 1F                      	pop	ds	
 19154                                  	; MSDOS 3.3 & MSDOS 6.0
 19155 000030BB E8E0F6                  	call	FastOpen_Update 	; invoke fastopen
 19156 000030BE 5A                      	POP	DX
 19157                                  
 19158                                  ;;; 10/1/86  update fastopen cache
 19159 000030BF E8BE2A                  	call	FLUSHBUF		; flush all relevant buffers
 19160 000030C2 5F                      	pop	di
 19161 000030C3 07                      	pop	es
 19162                                  	;mov	al,5
 19163 000030C4 B005                    	MOV	AL,error_access_denied
 19164 000030C6 7201                    	JC	short CloseFinish
 19165                                  FREE_SFT_OK:
 19166 000030C8 F8                      	CLC				; signal no error.
 19167                                  CloseFinish:
 19168                                  
 19169                                  ; Indicate to the device that the SFT is being closed.
 19170                                  
 19171                                  ;;;; 7/21/86
 19172 000030C9 9C                      	PUSHF				; save flag from DirFromSFT
 19173 000030CA E81F16                  	call	DEV_CLOSE_SFT
 19174 000030CD 9D                      	POPF
 19175                                  ;;;; 7/21/86
 19176                                  ;
 19177                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19178                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19179                                  ; going to be moving from busy to free.
 19180                                  ;
 19181 000030CE 59                      	POP	CX			; get old ref count
 19182 000030CF 9C                      	PUSHF
 19183 000030D0 49                      	DEC	CX			; if cx != 1
 19184 000030D1 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19185 000030D3 26890D                  	mov	[es:di],cx
 19186                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19187                                  NoFree:
 19188 000030D6 E8D5E2                  	call	LCritDisk
 19189 000030D9 9D                      	POPF
 19190 000030DA C3                      	retn
 19191                                  
 19192                                  ;---------------------------------------------------------------------------
 19193                                  ;
 19194                                  ; Procedure Name : FREE_SFT
 19195                                  ;
 19196                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19197                                  ; Flags preserved. Return old ref count in AX
 19198                                  ;
 19199                                  ; Note that busy is indicated by the SFT ref count being -1.
 19200                                  ;
 19201                                  ;---------------------------------------------------------------------------
 19202                                  
 19203                                  FREE_SFT:
 19204 000030DB 9C                      	PUSHF		; Save carry state
 19205 000030DC 268B05                  	mov	ax,[es:di]
 19206                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19207 000030DF 48                      	DEC	AX
 19208 000030E0 7501                    	JNZ	short SetCount
 19209 000030E2 48                      	DEC	AX
 19210                                  SetCount:
 19211 000030E3 268705                  	xchg	ax,[es:di]
 19212                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19213 000030E6 9D                      	POPF
 19214 000030E7 C3                      	retn
 19215                                  
 19216                                  	; 18/05/2019 - Retro DOS v4.0
 19217                                  
 19218                                  ;----------------------------------------------------------------------------
 19219                                  ;
 19220                                  ; Procedure Name : DirFromSFT
 19221                                  ;
 19222                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19223                                  ;
 19224                                  ;   Inputs:	ES:DI point to SFT
 19225                                  ;		DS = DOSDATA
 19226                                  ;   Outputs:
 19227                                  ;		EXTERR_LOCUS = errLOC_Disk
 19228                                  ;		CurBuf points to buffer
 19229                                  ;		Carry Clear -> operation OK
 19230                                  ;		    ES:DI point to entry
 19231                                  ;		    ES:BX point to buffer
 19232                                  ;		    DS:SI point to SFT
 19233                                  ;		Carry SET   -> operation failed
 19234                                  ;		    registers trashified
 19235                                  ;   Registers modified: ALL
 19236                                  ;----------------------------------------------------------------------------
 19237                                  
 19238                                  DirFromSFT:
 19239                                  	;mov	byte [EXTERR_LOCUS],2
 19240 000030E8 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19241 000030ED 06                      	push	es
 19242 000030EE 57                      	push	di
 19243                                  	; MSDOS 3.3
 19244                                  	;;mov	dx,[es:di+1Dh]
 19245                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19246                                  	; MSDOS 6.0
 19247                                  	;mov	dx,[es:[di+1Dh]
 19248 000030EF 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19249 000030F3 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19250                                  	;mov	dx,[es:di+1Bh]
 19251 000030F7 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19252                                  	; 19/05/2019
 19253 000030FB FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19254                                  	; MSDOS 3.3 & MSDOS 6.0
 19255 000030FF 52                      	PUSH	DX
 19256 00003100 E8FF26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19257                                  					; [THISDPB] set
 19258 00003103 5A                      	POP	DX
 19259 00003104 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19260 00003108 7225                    	JC	short PopDone
 19261 0000310A 30C0                    	XOR	AL,AL			; Pre read
 19262                                  	;mov	byte [ALLOWED],18h
 19263 0000310C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19264 00003111 E86E29                  	call	GETBUFFR
 19265 00003114 7219                    	JC	short PopDone
 19266 00003116 5E                      	pop	si
 19267 00003117 1F                      	pop	ds			; Get back SFT pointer
 19268                                  
 19269                                  ;hkn; SS override
 19270 00003118 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19271                                  	;or	byte [es:di+5],4
 19272 0000311D 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19273 00003122 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19274                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19275                                  	;lea	di,[di+20] ; MSDOS 6.0
 19276 00003124 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19277                                  	;mov	al,32
 19278 00003127 B020                    	MOV	AL,dir_entry.size
 19279                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19280 00003129 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19281 0000312C 01C7                    	ADD	DI,AX			; Point at the entry
 19282 0000312E C3                      	retn				; carry is clear
 19283                                  PopDone:
 19284 0000312F 5F                      	pop	di
 19285 00003130 07                      	pop	es
 19286                                  PopDone_retn:
 19287 00003131 C3                      	retn
 19288                                  
 19289                                  ;----------------------------------------------------------------------------
 19290                                  ;
 19291                                  ;**	DOS_Commit - UPdate Directory Entries
 19292                                  ;
 19293                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19294                                  ;		(DS) = DOSGROUP
 19295                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19296                                  ;	USES	all but DS
 19297                                  ;
 19298                                  ;----------------------------------------------------------------------------
 19299                                  
 19300                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19301                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19302                                  
 19303                                  DOS_COMMIT:
 19304                                  	;hkn; called from srvcall. DS already set up.
 19305 00003132 C43E[9E05]              	LES	DI,[THISSFT]
 19306                                  	;mov	bx,[es:di+5]
 19307 00003136 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19308                                  	;test	bx,0C0h
 19309                                  	; 17/12/2022
 19310 0000313A F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19311                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19312 0000313D 75F2                    	jnz	short PopDone_retn
 19313                                  	;test	bx,8000h
 19314                                  	; 17/12/2022
 19315                                  	;test	bh,80h
 19316 0000313F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19317                                  	;TEST	BX,sf_isnet ; 8000h
 19318 00003142 7406                    	JZ	short LOCAL_COMMIT
 19319                                  
 19320                                  ;IF NOT Installed
 19321                                  ;	transfer NET_COMMIT
 19322                                  ;ELSE
 19323                                  	;mov	ax,1107h
 19324 00003144 B80711                  	MOV	AX,(MultNET<<8)|7
 19325 00003147 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19326                                  			; ES:DI -> SFT
 19327                                  			; SFT DPB field -> DPB of drive containing file
 19328                                  			; Return: CF set on error, AX = DOS error code
 19329                                  			; CF clear if successful
 19330                                  localcommit_retn: ; 18/12/2022	
 19331 00003149 C3                      	retn
 19332                                  ;ENDIF
 19333                                  
 19334                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19335                                  ; There are three ways we can do this. One is to enter a critical section to
 19336                                  ; protect a potential free. The second is to increment the ref count to mask
 19337                                  ; the close decrementing.
 19338                                  ;
 19339                                  ; The proper way is to let the caller's of close decide if a decrement should
 19340                                  ; be done. We do this by providing another entry into close after the
 19341                                  ; decrement and after the share information release.
 19342                                  
 19343                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19344                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19345                                  
 19346                                  LOCAL_COMMIT:
 19347 0000314A E846E2                  	call	ECritDisk
 19348                                  	; MSDOS 6.0
 19349 0000314D E843E2                  	call	ECritDisk	;PTM.
 19350 00003150 E80E00                  	call	SetSFTTimes
 19351 00003153 B8FFFF                  	MOV	AX,-1
 19352 00003156 E8A9FE                  	call	CloseEntry
 19353                                  	; MSDOS 6.0
 19354 00003159 9C                      	PUSHF			;PTM.				;AN000;
 19355 0000315A E88715                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19356 0000315D 9D                      	POPF			;PTM.				;AN000;
 19357                                  	;call	LCritDisk	;PTM.				;AN000;
 19358                                  	; 18/12/2022
 19359 0000315E E94DE2                  	jmp	LCritDisk
 19360                                  ;localcommit_retn:
 19361                                  ;	retn
 19362                                  
 19363                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19364                                  ;----------------------------------------------------------------------------
 19365                                  ;
 19366                                  ; Procedure Name : SetSFTTimes
 19367                                  ;
 19368                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19369                                  ;   Reflect these times in other SFT's for the same file.
 19370                                  ;
 19371                                  ;   Inputs:	ES:DI point to SFT
 19372                                  ;		BX = sf_flags set apprpriately
 19373                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19374                                  ;   Registers modified: All except ES:DI, BX, AX
 19375                                  ;
 19376                                  ;----------------------------------------------------------------------------
 19377                                  
 19378                                  SetSFTTimes:
 19379                                  ;	File clean or device does not get stamped nor disk looked at.
 19380                                  	
 19381                                  	;test	bx,0C0h
 19382                                  	; 17/12/2022
 19383 00003161 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19384                                  	;TEST	BX,devid_file_clean+devid_device
 19385                                  	;retnz				; clean or device => no timestamp
 19386 00003164 75E3                    	jnz	short localcommit_retn
 19387                                  
 19388                                  ;	file and dirty. See if date is good
 19389                                  
 19390                                  	;test	bx,4000h
 19391                                  	; 17/12/2022
 19392                                  	;test	bh,40h
 19393 00003166 F6C740                  	test	bh,(sf_close_nodate>>8)
 19394                                  	;TEST	BX,sf_close_nodate
 19395                                  	;retnz				; nodate => no timestamp
 19396 00003169 75DE                    	jnz	short localcommit_retn
 19397                                  
 19398 0000316B 50                      	push	ax
 19399 0000316C 53                      	push	bx
 19400 0000316D E8DAD9                  	call	DATE16			; Date/Time to AX/DX
 19401                                  	;mov	[es:di+0Fh],ax
 19402 00003170 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19403                                  	;mov	[es:di+0Dh],dx
 19404 00003174 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19405 00003178 31C0                    	XOR	AX,AX
 19406                                  ;if installed
 19407                                  	;call	JShare + 14 * 4
 19408 0000317A FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19409                                  ;else
 19410                                  ;	call	ShSU
 19411                                  ;endif
 19412 0000317E 5B                      	pop	bx
 19413 0000317F 58                      	pop	ax
 19414 00003180 C3                      	retn
 19415                                  
 19416                                  ;============================================================================
 19417                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19418                                  ;============================================================================
 19419                                  ; 23/07/2018 - Retro DOS v3.0
 19420                                  ; 18/05/2019 - Retro DOS v4.0
 19421                                  
 19422                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19423                                  
 19424                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19425                                  ;NAME  DIRCALL
 19426                                  
 19427                                  ;**	Low level directory manipulation routines for making removing and
 19428                                  ;	  verifying local or NET directories
 19429                                  ;
 19430                                  ;	DOS_MKDIR
 19431                                  ;	DOS_CHDIR
 19432                                  ;	DOS_RMDIR
 19433                                  ;
 19434                                  ;	Modification history:
 19435                                  ;
 19436                                  ;		Created: ARR 30 March 1983
 19437                                  
 19438                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19439                                  ;---------------------------------------------------------------------------
 19440                                  ;
 19441                                  ; Procedure Name : DOS_MkDir
 19442                                  ;
 19443                                  ; Inputs:
 19444                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19445                                  ;		terminated)
 19446                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19447                                  ;		( = -1 if current dir not involved, else
 19448                                  ;		 Points to first char after last "/" of current dir part)
 19449                                  ;	[THISCDS] Points to CDS being used
 19450                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19451                                  ; Function:
 19452                                  ;	Make a new directory
 19453                                  ; Returns:
 19454                                  ;	Carry Clear
 19455                                  ;		No error
 19456                                  ;	Carry Set
 19457                                  ;	    AX is error code
 19458                                  ;		error_path_not_found
 19459                                  ;			Bad path (not in curr dir part if present)
 19460                                  ;		error_bad_curr_dir
 19461                                  ;			Bad path in current directory part of path
 19462                                  ;		error_access_denied
 19463                                  ;			Already exists, device name
 19464                                  ; DS preserved, Others destroyed
 19465                                  ;---------------------------------------------------------------------------
 19466                                  
 19467                                  ;hkn; called from path.asm. DS already set up.
 19468                                  
 19469                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19470                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19471                                  
 19472                                  DOS_MKDIR:
 19473 00003181 E84AE1                  	call	TestNet
 19474 00003184 7313                    	JNC	short LOCAL_MKDIR
 19475                                  
 19476                                  ;IF NOT Installed
 19477                                  ;	transfer NET_MKDIR
 19478                                  ;ELSE
 19479                                  	;mov	ax,1103h
 19480 00003186 B80311                  	MOV	AX,(MultNET<<8)|3
 19481 00003189 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19482                                  			; SS = DOS CS
 19483                                  			; SDA first filename pointer -> fully-qualified directory name
 19484                                  			; SDA CDS pointer -> current directory
 19485                                  			; Return: CF set on error, AX = DOS error code
 19486                                  			; CF clear if successful
 19487 0000318B C3                      	retn
 19488                                  ;ENDIF
 19489                                  
 19490                                  NODEACCERRJ:
 19491                                  	;mov	ax,5
 19492 0000318C B80500                  	MOV	AX,error_access_denied
 19493                                  _BadRet:
 19494 0000318F F9                      	STC
 19495                                  	;call	LCritDisk
 19496                                  	;retn
 19497                                  	; 18/12/2022
 19498 00003190 E91BE2                  	jmp	LCritDisk
 19499                                  
 19500                                  PATHNFJ:
 19501 00003193 E818E2                  	call	LCritDisk
 19502 00003196 E9E5F9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19503                                  
 19504                                  LOCAL_MKDIR:
 19505 00003199 E8F7E1                  	call	ECritDisk
 19506                                  
 19507                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19508                                  
 19509 0000319C 8C16[A005]              	MOV	[THISSFT+2],SS
 19510                                  
 19511                                  ;hkn; DOSDATA
 19512 000031A0 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19513                                  
 19514                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19515                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19516                                  
 19517                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19518 000031A6 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19519                                  				; make sure SHARER won't complain.
 19520                                  	;mov	al,10h
 19521 000031AC B010                    	MOV	AL,attr_directory
 19522 000031AE E8E818                  	call	MakeNode
 19523 000031B1 72E0                    	JC	short PATHNFJ
 19524 000031B3 83F803                  	CMP	AX,3
 19525 000031B6 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19526 000031B8 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19527 000031BC C53E[E205]              	LDS	DI,[CURBUF]
 19528 000031C0 29FE                    	SUB	SI,DI
 19529 000031C2 56                      	PUSH	SI		; Pointer to dir_first
 19530                                  	; MSDOS 6.0
 19531                                  	;push	word [DI+8]
 19532 000031C3 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19533                                  	; MSDOS 3.3 & MSDOS 6.0
 19534                                  	;push	word [di+6]
 19535 000031C6 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19536 000031C9 16                      	push	ss
 19537 000031CA 1F                      	pop	ds
 19538 000031CB FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19539 000031CF 31C0                    	XOR	AX,AX
 19540 000031D1 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19541 000031D4 E8F517                  	call	NEWDIR
 19542 000031D7 7276                    	JC	short NODEEXISTSPOPDEL ; No room
 19543 000031D9 E89C0D                  	call	GETENT		; First entry
 19544 000031DC 7271                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19545 000031DE C43E[E205]              	LES	DI,[CURBUF]
 19546                                  
 19547                                  	; MSDOS 6.0
 19548 000031E2 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19549                                  				 ;LB. if already dirty		    ;AN000;
 19550 000031E7 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19551 000031E9 E89C2A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19552                                  	
 19553                                  	; MSDOS 3.3 & MSDOS 6.0
 19554                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19555 000031EC 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19556                                  yesdirty5:
 19557                                  	;;add	di,16 ; MSDOS 3.3
 19558                                  	;add	di,20 ; MSDOS 6.0
 19559 000031F1 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19560 000031F4 B82E20                  	MOV	AX,202EH	; ". "
 19561 000031F7 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19562 000031FB E87718                  	call	SETDOTENT
 19563 000031FE B82E2E                  	MOV	AX,2E2EH	; ".."
 19564 00003201 5A                      	POP	DX		; Parent
 19565 00003202 E87018                  	call	SETDOTENT
 19566 00003205 C42E[8A05]              	LES	BP,[THISDPB]
 19567                                  	;mov	byte [ALLOWED],18h
 19568 00003209 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19569 0000320E 5A                      	POP	DX		; Entry sector
 19570                                  	; MSDOS 6.0
 19571 0000320F 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19572                                  
 19573 00003213 30C0                    	XOR	AL,AL		; Pre read
 19574 00003215 E86A28                  	call	GETBUFFR
 19575 00003218 7262                    	JC	short NODEEXISTSP
 19576 0000321A 8B16[C205]              	MOV	DX,[DIRSTART]
 19577 0000321E C53E[E205]              	LDS	DI,[CURBUF]
 19578                                  	;or	byte [di+5],4
 19579 00003222 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19580 00003226 5E                      	POP	SI		; dir_first pointer
 19581 00003227 01FE                    	ADD	SI,DI
 19582 00003229 8914                    	MOV	[SI],DX
 19583 0000322B 31D2                    	XOR	DX,DX
 19584 0000322D 895402                  	MOV	[SI+2],DX	; Zero size
 19585 00003230 895404                  	MOV	[SI+4],DX
 19586                                  DIRUP:
 19587                                  	; MSDOS 6.0
 19588 00003233 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19589                                  	;			 ;LB. if already dirty 		   ;AN000;
 19590 00003237 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19591 00003239 E84C2A                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19592                                  	
 19593                                  	; MSDOS 3.3 & MSDOS 6.0
 19594                                  	;or	byte [di+5],40h
 19595 0000323C 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19596                                  yesdirty6:
 19597 00003240 16                      	push	ss
 19598 00003241 1F                      	pop	ds
 19599 00003242 268A4600                	mov	al,[es:bp]
 19600                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19601 00003246 E83729                  	call	FLUSHBUF
 19602                                  	;mov	ax,5
 19603 00003249 B80500                  	MOV	AX,error_access_denied
 19604                                  	;call	LCritDisk
 19605                                  	;retn
 19606                                  	; 18/12/2022
 19607 0000324C E95FE1                  	jmp	LCritDisk
 19608                                  
 19609                                  NODEEXISTSPOPDEL:
 19610 0000324F 5A                      	POP	DX		; Parent
 19611 00003250 5A                      	POP	DX		; Entry sector
 19612                                  	; MSDOS 6.0 
 19613 00003251 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19614 00003255 C42E[8A05]              	LES	BP,[THISDPB]
 19615                                  	;mov	byte [ALLOWED],18h
 19616 00003259 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19617 0000325E 30C0                    	XOR	AL,AL		; Pre read
 19618 00003260 E81F28                  	call	GETBUFFR
 19619 00003263 7217                    	JC	short NODEEXISTSP
 19620 00003265 C53E[E205]              	LDS	DI,[CURBUF]
 19621                                  	;or	byte [di+5],4
 19622 00003269 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19623 0000326D 5E                      	POP	SI		; dir_first pointer
 19624 0000326E 01FE                    	ADD	SI,DI
 19625                                  	;sub	si,1Ah ; 26
 19626 00003270 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19627 00003273 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19628 00003276 E8BAFF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19629                                  NODEEXISTS:
 19630 00003279 E910FF                  	JMP	NODEACCERRJ ; 10/08/2018
 19631                                  
 19632                                  NODEEXISTSP:
 19633 0000327C 5E                      	POP	SI		; Clean stack
 19634 0000327D EBFA                    	JMP	short NODEEXISTS
 19635                                  
 19636                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19637                                  
 19638                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19639                                  ;----------------------------------------------------------------------------
 19640                                  ;
 19641                                  ; Procedure Name : DOS_ChDir
 19642                                  ;
 19643                                  ; Inputs:
 19644                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19645                                  ;		terminated)
 19646                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19647                                  ;		( = -1 if current dir not involved, else
 19648                                  ;		 Points to first char after last "/" of current dir part)
 19649                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19650                                  ; Function:
 19651                                  ;	Validate the path for potential new current directory
 19652                                  ; Returns:
 19653                                  ;	NOTE:
 19654                                  ;	    [SATTRIB] is modified by this call
 19655                                  ;	Carry Clear
 19656                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19657                                  ;		Caller must NOT set ID fields on a NET CDS.
 19658                                  ;	Carry Set
 19659                                  ;	    AX is error code
 19660                                  ;		error_path_not_found
 19661                                  ;			Bad path
 19662                                  ;		error_access_denied
 19663                                  ;			device or file name
 19664                                  ; DS preserved, Others destroyed
 19665                                  ;----------------------------------------------------------------------------
 19666                                  
 19667                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19668                                  
 19669                                  ; 18/05/2019 - Retro DOS v4.0
 19670                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19671                                  
 19672                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19673                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19674                                  
 19675                                  DOS_CHDIR:
 19676 0000327F E84CE0                  	call	TestNet
 19677 00003282 7306                    	JNC	short LOCAL_CHDIR
 19678                                  
 19679                                  ;IF NOT Installed
 19680                                  ;	transfer NET_CHDIR
 19681                                  ;ELSE
 19682                                  	;mov	ax,1105h
 19683 00003284 B80511                  	MOV	AX,(MultNET<<8)|5
 19684 00003287 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19685                                  			; SS = DOS CS
 19686                                  			; SDA first filename pointer -> fully-qualified directory name
 19687                                  			; SDA CDS pointer -> current directory
 19688                                  			; Return: CF set on error, AX = DOS error code
 19689                                  			; CF clear if successful
 19690 00003289 C3                      	retn
 19691                                  ;ENDIF
 19692                                  
 19693                                  LOCAL_CHDIR:
 19694 0000328A E806E1                  	call	ECritDisk
 19695                                  	; MSDOS 6.0
 19696                                  	;;test	word [es:di+43h],2000h
 19697                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19698                                  	; 17/12/2022
 19699                                  	;test	byte [es:di+44h],20h
 19700 0000328D 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19701 00003292 7406                    	JZ	short nojoin		   ;PTM.
 19702                                  	;mov	word [es:di+49h], 0FFFFh
 19703 00003294 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19704                                  nojoin:
 19705                                  	; MSDOS 3.3 & MSDOS 6.0
 19706 0000329A C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19707                                  	;mov	byte [SATTRIB],16h
 19708 0000329F C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19709                                  				; Dir calls can find these
 19710                                  ; DOS 3.3  6/24/86 FastOpen
 19711 000032A4 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19712 000032A9 E85A0D                  	call	GETPATH
 19713 000032AC 9C                      	PUSHF						;AN000;
 19714 000032AD 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19715 000032B2 9D                      	POPF						;AN000;
 19716                                  ; DOS 3.3  6/24/86 FastOpen
 19717                                  
 19718                                  	; MSDOS 3.3
 19719                                  	;mov	byte [FastOpenFlg],0
 19720                                  	
 19721                                  	;mov	ax,3
 19722 000032B3 B80300                  	MOV	AX,error_path_not_found
 19723 000032B6 7207                    	JC	short ChDirDone
 19724 000032B8 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19725 000032BA 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19726 000032BE F8                      	CLC
 19727                                  ChDirDone:
 19728                                  	;call	LCritDisk
 19729                                  	;retn
 19730                                  	; 18/12/2022
 19731 000032BF E9ECE0                  	jmp	LCritDisk
 19732                                  
 19733                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19734                                  ;----------------------------------------------------------------------------
 19735                                  ;
 19736                                  ; Procedure Name : DOS_RmDir
 19737                                  ;
 19738                                  ; Inputs:
 19739                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19740                                  ;		terminated)
 19741                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19742                                  ;		( = -1 if current dir not involved, else
 19743                                  ;		 Points to first char after last "/" of current dir part)
 19744                                  ;	[THISCDS] Points to CDS being used
 19745                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19746                                  ; Function:
 19747                                  ;	Remove a directory
 19748                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19749                                  ; Returns:
 19750                                  ;	NOTE:
 19751                                  ;	    [SATTRIB] is modified by this call
 19752                                  ;	Carry Clear
 19753                                  ;		No error
 19754                                  ;	Carry Set
 19755                                  ;	    AX is error code
 19756                                  ;		error_path_not_found
 19757                                  ;			Bad path (not in curr dir part if present)
 19758                                  ;		error_bad_curr_dir
 19759                                  ;			Bad path in current directory part of path
 19760                                  ;		error_access_denied
 19761                                  ;			device or file name, root directory
 19762                                  ;			Bad directory ('.' '..' messed up)
 19763                                  ; DS preserved, Others destroyed
 19764                                  ;----------------------------------------------------------------------------
 19765                                  
 19766                                  ;hkn; called from path.asm. DS already set up.
 19767                                  
 19768                                  ; 18/05/2019 - Retro DOS v4.0
 19769                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19770                                  
 19771                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19772                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19773                                  
 19774                                  DOS_RMDIR:
 19775 000032C2 E809E0                  	call	TestNet
 19776 000032C5 7306                    	JNC	short LOCAL_RMDIR
 19777                                  
 19778                                  ;IF NOT Installed
 19779                                  ;	transfer NET_RMDIR
 19780                                  ;ELSE
 19781                                  	;mov	ax,1101h
 19782 000032C7 B80111                  	MOV	AX,(MultNET<<8)|1
 19783 000032CA CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19784                                  			; SS = DOS CS
 19785                                  			; SDA first filename pointer -> fully-qualified directory name
 19786                                  			; SDA CDS pointer -> current directory
 19787                                  			; Return: CF set on error, AX = DOS error code
 19788                                  			; CF clear if successful
 19789 000032CC C3                      	retn
 19790                                  ;ENDIF
 19791                                  
 19792                                  LOCAL_RMDIR:
 19793 000032CD E8C3E0                  	call	ECritDisk
 19794 000032D0 C606[4C03]00            	MOV	byte [NoSetDir],0
 19795                                  	;mov	byte [SATTRIB],16h
 19796 000032D5 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19797                                  					; Dir calls can find these
 19798 000032DA E8290D                  	call	GETPATH
 19799 000032DD 720C                    	JC	short NOPATH		; Path not found
 19800 000032DF 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19801 000032E1 8B3E[C205]              	MOV	DI,[DIRSTART]
 19802 000032E5 09FF                    	OR	DI,DI			; Root ?
 19803 000032E7 750E                    	JNZ	short rmdir_get_buf	; No
 19804 000032E9 EB09                    	JMP	SHORT NOTDIRPATH
 19805                                  
 19806                                  NOPATH:
 19807                                  	;mov	ax,3
 19808 000032EB B80300                  	MOV	AX,error_path_not_found
 19809 000032EE E99EFE                  	JMP	_BadRet
 19810                                  
 19811                                  NOTDIRPATHPOP:
 19812 000032F1 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19813 000032F2 58                      	POP	AX
 19814                                  NOTDIRPATHPOP2:
 19815 000032F3 58                      	POP	AX
 19816                                  NOTDIRPATH:
 19817 000032F4 E995FE                  	JMP	NODEACCERRJ
 19818                                  
 19819                                  rmdir_get_buf:
 19820 000032F7 C53E[E205]              	LDS	DI,[CURBUF]
 19821 000032FB 29FB                    	SUB	BX,DI		; Compute true offset
 19822 000032FD 53                      	PUSH	BX		; Save entry pointer
 19823                                  	
 19824                                  	; MSDOS 6.0
 19825                                  	;push	word [di+8]
 19826 000032FE FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19827                                  	
 19828                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19829                                  	;push	word [di+6]
 19830 00003301 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19831                                  
 19832                                  ;hkn; SS is DOSDATA
 19833                                  	;context DS
 19834 00003304 16                      	push	ss
 19835 00003305 1F                      	pop	ds
 19836                                  	;context ES
 19837 00003306 16                      	push	ss
 19838 00003307 07                      	pop	es
 19839                                  
 19840                                  ;hkn; NAME1 is in DOSDATA
 19841 00003308 BF[4B05]                	MOV	DI,NAME1
 19842 0000330B B03F                    	MOV	AL,'?'
 19843 0000330D B90B00                  	MOV	CX,11
 19844 00003310 F3AA                    	REP	STOSB
 19845 00003312 30C0                    	XOR	AL,AL
 19846 00003314 AA                      	STOSB				; Nul terminate it
 19847 00003315 E8900F                  	call	STARTSRCH		; Set search
 19848 00003318 E85A0C                  	call	GETENTRY		; Get start of directory
 19849 0000331B 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19850 0000331D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19851 00003321 89DE                    	MOV	SI,BX
 19852 00003323 AD                      	LODSW
 19853                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19854 00003324 3D2E20                  	cmp	ax,202Eh ; ". "
 19855 00003327 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19856                                  	;add	si,30
 19857 00003329 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19858 0000332C AD                      	LODSW
 19859                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19860                                  	;cmp	ax, '..'
 19861 0000332D 3D2E2E                  	cmp	ax,2E2Eh
 19862 00003330 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19863                                  
 19864                                  ;hkn; SS is DOSDATA
 19865                                  	;context DS
 19866 00003332 16                      	push	ss
 19867 00003333 1F                      	pop	ds
 19868 00003334 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19869 0000333A E8380C                  	call	GETENTRY		; Get next entry
 19870 0000333D 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19871                                  	;mov	byte [ATTRIB],16h
 19872 0000333F C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19873 00003344 E82D0B                  	call	SRCH			; Do a search
 19874 00003347 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19875 00003349 803E[4A03]00            	CMP	byte [FAILERR],0
 19876 0000334E 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19877 00003350 C42E[8A05]              	LES	BP,[THISDPB]
 19878 00003354 8B1E[C205]              	MOV	BX,[DIRSTART]
 19879 00003358 E8811C                  	call	RELEASE 		; Release data in sub dir
 19880 0000335B 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19881 0000335D 5A                      	POP	DX			; Sector # of entry
 19882 0000335E 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19883                                  	;mov	byte [ALLOWED],18h
 19884 00003362 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19885 00003367 30C0                    	XOR	AL,AL			; Pre read
 19886 00003369 E81627                  	call	GETBUFFR		; Get sector back
 19887 0000336C 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 19888 0000336E C53E[E205]              	LDS	DI,[CURBUF]
 19889                                  	;or	byte [di+5],4
 19890 00003372 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19891 00003376 5B                      	POP	BX			; Pointer to start of entry
 19892 00003377 01FB                    	ADD	BX,DI			; Corrected
 19893 00003379 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 19894                                  
 19895                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19896 0000337C 1E                      	PUSH	DS
 19897                                  
 19898                                  ;hkn; SS is DOSDATA
 19899                                  	;context DS
 19900 0000337D 16                      	push	ss
 19901 0000337E 1F                      	pop	ds
 19902                                  
 19903                                  	; MSDOS 6.0
 19904 0000337F E8EDF3                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 19905                                  
 19906                                  ;	; MSDOS 3.3
 19907                                  ;_FastOpen_Delete:
 19908                                  ;	push	ax
 19909                                  ;	mov	si,[WFP_START]
 19910                                  ;	mov	bx,FastTable
 19911                                  ;	;mov	al,3  ; FONC_delete
 19912                                  ;	mov	al,FONC_delete
 19913                                  ;	call	far [BX+2]  ; FastTable+2
 19914                                  ;	pop	ax
 19915                                  
 19916 00003382 1F                      	POP	DS
 19917                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19918                                  
 19919 00003383 E9ADFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 19920                                  
 19921                                  ;============================================================================
 19922                                  ; DISK.ASM, MSDOS 6.0, 1991
 19923                                  ;============================================================================
 19924                                  ; 23/07/2018 - Retro DOS v3.0 
 19925                                  ; 04/05/2019 - Retro DOS v4.0
 19926                                  
 19927                                  ;	TITLE	DISK - Disk utility routines
 19928                                  ;	NAME	Disk
 19929                                  
 19930                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19931                                  ;
 19932                                  ;	SWAPCON
 19933                                  ;	SWAPBACK
 19934                                  ;	DOS_READ
 19935                                  ;	DOS_WRITE
 19936                                  ;	get_io_sft
 19937                                  ;	DirRead
 19938                                  ;	FIRSTCLUSTER
 19939                                  ;	SET_BUF_AS_DIR
 19940                                  ;	FATSecRd
 19941                                  ;	DREAD
 19942                                  ;	CHECK_WRITE_LOCK
 19943                                  ;	CHECK_READ_LOCK
 19944                                  ;
 19945                                  ;	Revision history:
 19946                                  ;
 19947                                  ;		A000   version 4.00  Jan. 1988
 19948                                  ;
 19949                                  ;----------------------------------------------------------------------------
 19950                                  ;
 19951                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 19952                                  ;		error happens, DOS retries the entire block assuming that
 19953                                  ;		zero characters were transferred. Modified the code to take
 19954                                  ;		into account the number of characters transfered before
 19955                                  ;		retrying the operation.
 19956                                  ;
 19957                                  ;----------------------------------------------------------------------------
 19958                                  ;
 19959                                  
 19960                                  ;Installed = TRUE
 19961                                  
 19962                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 19963                                  
 19964                                  ; **** Drivers for file input from devices ****
 19965                                  ;----------------------------------------------------------------------------
 19966                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 19967                                  ;   of handles 0 and 1
 19968                                  ;
 19969                                  ;   Inputs:	DS is DOSDATA
 19970                                  ;   Outputs:	CONSWAP is set to false.
 19971                                  ;   Registers modified: none
 19972                                  ;----------------------------------------------------------------------------
 19973                                  
 19974                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 19975                                  
 19976                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 19977                                  ; 04/05/2019 - Retro DOS v4.0
 19978                                  
 19979                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 19980                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19981                                  
 19982                                  SWAPBACK:
 19983 00003386 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 19984 0000338B C3                      	retn
 19985                                  
 19986                                  ;----------------------------------------------------------------------------
 19987                                  ;
 19988                                  ; Procedure Name : SWAPCON
 19989                                  ;
 19990                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 19991                                  ;
 19992                                  ;   Inputs:	ThisSFT as the sft of the desired file
 19993                                  ;		DS is DOSDATA
 19994                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 19995                                  ;   Registers modified: none
 19996                                  ;--------------------------------------------------------------------------
 19997                                  
 19998                                  SWAPCON:
 19999                                  	; MSDOS 3.3
 20000                                  	;push	es
 20001                                  	;push	di
 20002                                  	;mov	byte [CONSWAP],1
 20003                                  	;les	di,[THISSFT]
 20004                                  	;mov	word [CONSFT],di
 20005                                  	;mov	word [CONSFT+2],es
 20006                                  	;pop	di
 20007                                  	;pop	es
 20008                                  	;retn
 20009                                  
 20010                                  	; MSDOS 6.0
 20011 0000338C C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20012 00003391 50                      	push	ax
 20013 00003392 A1[9E05]                	mov	ax,[THISSFT]
 20014 00003395 A3[E605]                	mov	[CONSFT],ax
 20015 00003398 A1[A005]                	mov	ax,[THISSFT+2]
 20016 0000339B A3[E805]                	mov	[CONSFT+2],ax
 20017 0000339E 58                      	pop	ax
 20018 0000339F C3                      	retn
 20019                                  
 20020                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20021                                  ; 04/05/2019 - Retro DOS v4.0
 20022                                  
 20023                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20024                                  ;-----------------------------------------------------------------------------
 20025                                  ;
 20026                                  ; Inputs:
 20027                                  ;	ThisSFT set to the SFT for the file being used
 20028                                  ;	[DMAADD] contains transfer address
 20029                                  ;	CX = No. of bytes to read
 20030                                  ;	DS = DOSDATA
 20031                                  ; Function:
 20032                                  ;	Perform read operation
 20033                                  ; Outputs:
 20034                                  ;    Carry clear
 20035                                  ;	SFT Position and cluster pointers updated
 20036                                  ;	CX = No. of bytes read
 20037                                  ;	ES:DI point to SFT
 20038                                  ;    Carry set
 20039                                  ;	AX is error code
 20040                                  ;	CX = 0
 20041                                  ;	ES:DI point to SFT
 20042                                  ; DS preserved, all other registers destroyed
 20043                                  ;
 20044                                  ;-----------------------------------------------------------------------------
 20045                                  
 20046                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20047                                  
 20048                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20049                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20050                                  
 20051                                  DOS_READ:
 20052 000033A0 C43E[9E05]              	LES	DI,[THISSFT]
 20053                                  
 20054                                  ; Verify that the sft has been opened in a mode that allows reading.
 20055                                  
 20056                                  	;mov	al,[es:di+2]
 20057 000033A4 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20058                                  	;and	al,0Fh
 20059 000033A8 240F                    	AND	AL,access_mask
 20060                                  	;cmp	al,1
 20061 000033AA 3C01                    	CMP	AL,open_for_write
 20062 000033AC 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20063 000033AE E91506                  	jmp	SET_ACC_ERR
 20064                                  
 20065                                  READ_NO_MODE:
 20066 000033B1 E8ED04                  	call	SETUP
 20067 000033B4 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20068 000033B6 E82EDF                  	call	IsSFTNet
 20069 000033B9 7408                    	JZ	short LOCAL_READ
 20070                                  
 20071                                  ;IF NOT Installed
 20072                                  ;	transfer NET_READ
 20073                                  ;ELSE
 20074                                  	;mov	ax,1108h
 20075 000033BB B80811                  	MOV	AX,(MultNET<<8)|8
 20076 000033BE CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20077                                  			; ES:DI -> SFT
 20078                                  			; SFT DPB field -> DPB of drive containing file
 20079                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20080                                  			; Return: CF set on error, CX = bytes read
 20081 000033C0 C3                      	retn
 20082                                  ;ENDIF
 20083                                  
 20084                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20085                                  ; except return immediately.
 20086                                  
 20087                                  NoIORet:
 20088 000033C1 F8                      	CLC
 20089 000033C2 C3                      	retn
 20090                                  
 20091                                  LOCAL_READ:
 20092                                  	;test	word [es:di+5],80h
 20093                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20094 000033C3 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20095 000033C8 750E                    	JNZ	short READDEV
 20096                                  
 20097                                  	;mov	byte [EXTERR_LOCUS],2
 20098 000033CA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20099 000033CF E8C1DF                  	call	ECritDisk
 20100 000033D2 E8AD05                  	call	DISKREAD
 20101                                  
 20102                                  critexit:
 20103                                  	;call	LCritDisk
 20104                                  	;retn
 20105                                  	; 16/12/2022
 20106 000033D5 E9D6DF                  	jmp	LCritDisk
 20107                                  
 20108                                  ; We are reading from a device. Examine the status of the device to see if we
 20109                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20110                                  ; null device, we can safely indicate no transfer.
 20111                                  
 20112                                  READDEV:
 20113                                  	;mov	byte [EXTERR_LOCUS],4
 20114 000033D8 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20115                                  	;mov	bl,[es:di+5]
 20116 000033DD 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20117 000033E1 C43E[2C03]              	LES	DI,[DMAADD]
 20118                                  	;test	bl,40h
 20119 000033E5 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20120 000033E8 7407                    	JZ	short ENDRDDEVJ3
 20121                                  	;test	bl,4
 20122 000033EA F6C304                  	test	BL,devid_device_null	; NUL device?
 20123 000033ED 7405                    	JZ	short TESTRAW 		; NO
 20124 000033EF 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20125                                  ENDRDDEVJ3:
 20126                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20127                                  	;JMP	short ENDRDDEVJ2
 20128                                  	; 16/12/2022
 20129 000033F1 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20130                                  
 20131                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20132                                  ; bizarre std_con_string_input.
 20133                                  
 20134                                  TESTRAW:
 20135                                  	;test	bl,20h
 20136 000033F4 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20137 000033F7 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20138                                  	;test	bl,1
 20139 000033F9 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20140 000033FC 7461                    	JZ	short NOTRDCON
 20141 000033FE E98F01                  	JMP	READCON
 20142                                  
 20143                                  DVRDRAW:
 20144 00003401 06                      	PUSH	ES
 20145 00003402 1F                      	POP	DS			; Xaddr to DS:DI
 20146                                  
 20147                                  	; 04/05/2019 - Retro DOS v4.0
 20148                                  
 20149                                  	; MSDOS 6.0
 20150                                  ;SR;
 20151                                  ;Check for win386 presence -- if present, do polled read of characters
 20152                                  
 20153 00003403 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20154 00003409 7408                    	jz	short ReadRawRetry	;not present
 20155 0000340B F6C301                  	test	bl,devid_device_con_in	;is it console device
 20156 0000340E 7403                    	jz	short ReadRawRetry	;no, do normal read
 20157 00003410 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20158                                  
 20159                                  ReadRawRetry:
 20160 00003413 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20161 00003415 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20162 00003417 89C2                    	MOV	DX,AX			; Start at 0
 20163 00003419 E8C213                  	call	SETREAD
 20164 0000341C 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20165                                  
 20166                                  ;hkn; SS override
 20167 0000341D 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20168 00003422 E84013                  	call	DEVIOCALL
 20169 00003425 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20170 00003427 B486                    	MOV	AH,86H			; Read error
 20171                                  
 20172                                  ;hkn; SS override
 20173 00003429 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20174                                  	; MSDOS 3.3
 20175                                  	;test	di,8000h
 20176                                  	;jz	short CRDROK
 20177                                  	; MSDOS 6.0
 20178 0000342E 09FF                    	or	di,di
 20179 00003430 7923                    	jns	short CRDROK		; no errors
 20180                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20181 00003432 E8C01F                  	call	CHARHARD
 20182 00003435 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20183                                  
 20184                                  	; 04/05/2019
 20185                                  
 20186                                  	; MSDOS 6.0
 20187 00003437 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20188 0000343C 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20189                                  
 20190                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20191 00003441 08C0                    	OR	AL,AL
 20192 00003443 7410                    	JZ	short CRDROK		; Ignore
 20193 00003445 3C03                    	CMP	AL,3
 20194 00003447 7403                    	JZ	short CRDFERR 		; fail.
 20195 00003449 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20196 0000344A EBC7                    	JMP	short ReadRawRetry	; Retry
 20197                                  
 20198                                  ; We have encountered a device-driver error. We have informed the user of it
 20199                                  ; and he has said for us to fail the system call.
 20200                                  
 20201                                  CRDFERR:
 20202 0000344C 5F                      	POP	DI			; Clean stack
 20203                                  DEVIOFERR:
 20204                                  
 20205                                  ;hkn; SS override
 20206 0000344D 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20207 00003452 E96F05                  	jmp	SET_ACC_ERR_DS
 20208                                  
 20209                                  CRDROK:
 20210 00003455 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20211 00003456 89D7                    	MOV	DI,DX
 20212                                  
 20213                                  ;hkn; SS override
 20214 00003458 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20215                                  	;JMP	SHORT ENDRDDEVJ3
 20216                                  	; 16/12/2022
 20217 0000345D EB6B                    	jmp	short ENDRDDEVJ2
 20218                                  
 20219                                  ; We are going to do a cooked read on some character device. There is a
 20220                                  ; problem here, what does the data look like? Is it a terminal device, line
 20221                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20222                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20223                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20224                                  ; included in data). this "simulates" the way con works in cooked mode
 20225                                  ; reading one line at a time. With file data, however, the lines will look
 20226                                  ; like, LF line CR. This is a little weird.
 20227                                  
 20228                                  NOTRDCON:
 20229 0000345F 8CC0                    	MOV	AX,ES
 20230 00003461 8ED8                    	MOV	DS,AX
 20231 00003463 89FB                    	MOV	BX,DI
 20232 00003465 31D2                    	XOR	DX,DX
 20233 00003467 89D0                    	MOV	AX,DX
 20234 00003469 51                      	PUSH	CX
 20235 0000346A B90100                  	MOV	CX,1
 20236 0000346D E86E13                  	call	SETREAD
 20237 00003470 59                      	POP	CX
 20238                                  
 20239                                  ;hkn; SS override
 20240 00003471 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20241                                  	;lds	si,[si+7]
 20242 00003476 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20243                                  DVRDLP:
 20244 00003479 E8591D                  	call	DSKSTATCHK
 20245 0000347C E8E912                  	call	DEVIOCALL2
 20246 0000347F 57                      	PUSH	DI		; Save "count" done
 20247 00003480 B486                    	MOV	AH,86H
 20248                                  
 20249                                  ;hkn; SS override
 20250 00003482 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20251                                  	
 20252                                  	; MSDOS 3.3
 20253                                  	;test	di,8000h
 20254                                  	;jz	short CRDOK
 20255                                  	; MSDOS 6.0
 20256 00003487 09FF                    	or	di,di
 20257 00003489 7917                    	jns	short CRDOK
 20258                                  	
 20259 0000348B E8671F                  	call	CHARHARD
 20260 0000348E 5F                      	POP	DI
 20261                                  
 20262                                  ;hkn; SS override
 20263 0000348F 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20264 00003496 3C01                    	CMP	AL,1
 20265 00003498 74DF                    	JZ	short DVRDLP		;Retry
 20266 0000349A 3C03                    	CMP	AL,3
 20267 0000349C 74AF                    	JZ	short DEVIOFERR		; FAIL
 20268 0000349E 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20269 000034A0 EB12                    	JMP	SHORT DVRDIGN
 20270                                  
 20271                                  CRDOK:
 20272 000034A2 5F                      	POP	DI
 20273                                  
 20274                                  ;hkn; SS override
 20275 000034A3 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20276                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20277 000034A9 751F                    	JNZ	short ENDRDDEVJ2
 20278                                  	; 16/12/2022
 20279                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20280                                  
 20281 000034AB 1E                      	PUSH	DS
 20282                                  
 20283                                  ;hkn; SS override
 20284 000034AC 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20285 000034B1 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20286 000034B3 1F                      	POP	DS
 20287                                  DVRDIGN:
 20288                                  
 20289                                  ;hkn; SS override
 20290 000034B4 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20291 000034B9 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20292 000034C0 47                      	INC	DI			; Next character
 20293 000034C1 3C1A                    	CMP	AL,1Ah			; ^Z?
 20294                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20295 000034C3 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20296                                  	; 16/12/2022
 20297                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20298 000034C5 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20299 000034C7 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20300 000034C9 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20301                                  					;  AX=FFFF which is not likely
 20302                                  ENDRDDEVJ2:
 20303                                  	; 16/12/2022
 20304                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20305                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20306 000034CA E98E00                  	jmp	ENDRDDEV
 20307                                  
 20308                                  	; 04/05/2019
 20309                                  
 20310                                  	; MSDOS 6.0
 20311                                  ;SR;
 20312                                  ;Polling code for raw read on CON when WIN386 is present
 20313                                  ;
 20314                                  ;At this point -- ds:di is transfer address
 20315                                  ;		  cx is count
 20316                                  
 20317                                  do_polling:
 20318 000034CD 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20319 000034CF 31C0                    	xor	ax,ax
 20320 000034D1 89C2                    	mov	dx,ax
 20321 000034D3 E80813                  	call	SETREAD			;prepare device packet
 20322                                  
 20323                                  do_io:
 20324                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20325                                  
 20326 000034D6 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20327 000034DB 1E                      	push	ds
 20328 000034DC 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20329 000034E1 E88112                  	call	DEVIOCALL		;call device driver
 20330 000034E4 1F                      	pop	ds
 20331                                  	
 20332                                  	;test	word [es:bx+3],8000h
 20333                                  	; 16/12/2022
 20334                                  	;test	byte [es:bx+4],80h
 20335 000034E5 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20336                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20337 000034EA 7413                    	jz	short check_busy	;no
 20338                                  
 20339 000034EC 1E                      	push	ds
 20340 000034ED 89FA                    	mov	dx,di
 20341                                  	;invoke charhard		;invoke int 24h handler
 20342 000034EF E8031F                  	call	CHARHARD
 20343 000034F2 89D7                    	mov	di,dx
 20344 000034F4 08C0                    	or	al,al
 20345 000034F6 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20346 000034F8 3C03                    	cmp	al,3
 20347 000034FA 7448                    	jz	short devrderr		;user asked to fail
 20348 000034FC 1F                      	pop	ds
 20349 000034FD EBD7                    	jmp	short do_io		;user asked to retry
 20350                                  
 20351                                  check_busy:
 20352                                  	;test	word [es:bx+3],200h
 20353                                  	; 16/12/2022
 20354 000034FF 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20355                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20356 00003504 7547                    	jnz	short no_char		;yes, no character available
 20357                                  
 20358                                  ;Character is available. Read in 1 character at a time until all characters
 20359                                  ;are read in or no character is available
 20360                                  
 20361 00003506 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20362 0000350B 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20363 00003511 1E                      	push	ds
 20364 00003512 36C536[9E05]            	lds	si,[ss:THISSFT]
 20365 00003517 E84B12                  	call	DEVIOCALL
 20366                                  
 20367 0000351A 89FA                    	mov	dx,di
 20368 0000351C B486                    	mov	ah,86h
 20369                                  	;mov	di,[es:bx+3]
 20370 0000351E 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20371 00003522 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20372 00003526 7410                    	jz	short next_char		;no,read next character
 20373                                  
 20374                                  	;invoke	charhard		;invoke int 24h handler
 20375 00003528 E8CA1E                  	call	CHARHARD
 20376 0000352B 89D7                    	mov	di,dx			;restore di
 20377 0000352D 08C0                    	or	al,al			;
 20378 0000352F 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20379 00003531 3C03                    	cmp	al,3
 20380 00003533 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20381 00003535 1F                      	pop	ds
 20382 00003536 EB9E                    	jmp	short do_io		;user issued a retry
 20383                                  
 20384                                  next_char:
 20385 00003538 1F                      	pop	ds
 20386 00003539 89D7                    	mov	di,dx
 20387 0000353B 49                      	dec	cx			;decrement count
 20388 0000353C E318                    	jcxz	done_read		;all characters read in
 20389 0000353E 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20390 00003542 EB92                    	jmp	short do_io			;read next character in
 20391                                  
 20392                                  devrderr:
 20393 00003544 5F                      	pop	di			;discard segment address
 20394 00003545 36C43E[9E05]            	les	di,[ss:THISSFT]
 20395                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20396 0000354A E97704                  	jmp     SET_ACC_ERR_DS
 20397                                  
 20398                                  no_char:
 20399                                  ;Since no character is available, we let win386 switch the VM out
 20400                                  
 20401 0000354D 50                      	push	ax
 20402 0000354E B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20403 00003550 CD2A                    	int	2Ah			;indicate idle to WIN386
 20404                                  
 20405                                  ;When control returns from WIN386, we continue the raw read
 20406                                  
 20407 00003552 58                      	pop	ax
 20408 00003553 EB81                    	jmp	do_io
 20409                                  
 20410                                  pop_done_read:
 20411 00003555 1F                      	pop	ds
 20412                                  done_read:
 20413 00003556 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20414                                  
 20415                                  	; 16/12/2022
 20416                                  
 20417                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20418                                  	;jmp	ENDRDDEV ; 04/05/2019
 20419                                  
 20420                                  	; 04/05/2019 - Retro DOS v4.0
 20421                                  ENDRDDEV:
 20422 0000355B 16                      	push	ss
 20423 0000355C 1F                      	pop	ds
 20424 0000355D EB1F                    	jmp	short endrddev1
 20425                                  
 20426                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20427                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20428                                  
 20429                                  TRANBUF:
 20430 0000355F AC                      	LODSB
 20431 00003560 AA                      	STOSB
 20432 00003561 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20433 00003563 7503                    	JNZ	short NORMCH
 20434 00003565 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20435                                  NORMCH:
 20436 00003568 3C0A                    	CMP	AL,c_LF ; 0Ah
 20437 0000356A E0F3                    	LOOPNZ	TRANBUF
 20438 0000356C 7507                    	JNZ	short ENDRDCON
 20439 0000356E 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20440 00003570 E87EE1                  	call	OUTT		; Transmit linefeed
 20441 00003573 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20442                                  ENDRDCON:
 20443                                  ;hkn; SS is DOSDATA
 20444 00003575 16                      	push	ss
 20445 00003576 1F                      	pop	ds
 20446 00003577 E80CFE                  	CALL	SWAPBACK
 20447 0000357A 8936[2200]              	MOV	[CONTPOS],SI
 20448                                  
 20449                                  	; 16/12/2022
 20450                                  ;ENDRDDEV:
 20451                                  ;;hkn; SS is DOSDATA
 20452                                  ;	push	ss
 20453                                  ;	pop	ds
 20454                                  endrddev1:	; 04/05/2019
 20455 0000357E 893E[B805]              	MOV	[NEXTADD],DI
 20456 00003582 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20457 00003584 C43E[9E05]              	LES	DI,[THISSFT]
 20458                                  	;and	byte [es:di+5],0BFh
 20459 00003588 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20460                                  				; Mark as no more data available
 20461                                  SETSFTC:
 20462                                  	; 31/07/2019
 20463                                  	;call	SETSFT
 20464                                  	;retn
 20465 0000358D E9C804                  	jmp	SETSFT
 20466                                  
 20467                                  ; 16/12/2022
 20468                                  %if 0
 20469                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20470                                  ENDRDDEV:
 20471                                  ;hkn; SS is DOSDATA
 20472                                  	push	ss
 20473                                  	pop	ds
 20474                                  	MOV	[NEXTADD],DI
 20475                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20476                                  	LES	DI,[THISSFT]
 20477                                  	;and	byte [es:di+5],0BFh
 20478                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20479                                  				; Mark as no more data available
 20480                                  SETSFTC:
 20481                                  	;call	SETSFT
 20482                                  	;retn
 20483                                  	jmp	SETSFT	
 20484                                  %endif
 20485                                  
 20486                                  READCON:
 20487 00003590 E8F9FD                  	CALL	SWAPCON
 20488 00003593 8B36[2200]              	MOV	SI,[CONTPOS]
 20489 00003597 09F6                    	OR	SI,SI
 20490 00003599 75C4                    	JNZ	short TRANBUF
 20491 0000359B 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20492 000035A0 7406                    	JZ	short GETBUF
 20493 000035A2 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20494                                  GETBUF:
 20495 000035A8 51                      	PUSH	CX
 20496 000035A9 06                      	PUSH	ES
 20497 000035AA 57                      	PUSH	DI
 20498                                  
 20499                                  ;hkn; CONBUF is in DOSDATA
 20500 000035AB BA[7B02]                	MOV	DX,CONBUF
 20501                                  
 20502 000035AE E8B2DE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20503 000035B1 5F                      	POP	DI
 20504 000035B2 07                      	POP	ES
 20505 000035B3 59                      	POP	CX
 20506                                  
 20507                                  ;hkn; CONBUF is in DOSDATA
 20508 000035B4 BE[7D02]                	MOV	SI,CONBUF+2
 20509                                  
 20510 000035B7 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20511 000035BA 75A3                    	JNZ	short TRANBUF
 20512 000035BC B01A                    	MOV	AL,1AH
 20513 000035BE AA                      	STOSB
 20514 000035BF 4F                      	DEC	DI
 20515 000035C0 B00A                    	MOV	AL,c_LF
 20516 000035C2 E82CE1                  	call	OUTT		; Send linefeed
 20517 000035C5 31F6                    	XOR	SI,SI
 20518 000035C7 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20519                                  
 20520                                  ; 24/07/2018 - Retro DOS v3.0
 20521                                  
 20522                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20523                                  ;---------------------------------------------------------------------------
 20524                                  ;
 20525                                  ; Procedure Name : DOS_WRITE
 20526                                  ;
 20527                                  ; Inputs:
 20528                                  ;	ThisSFT set to the SFT for the file being used
 20529                                  ;	[DMAADD] contains transfer address
 20530                                  ;	CX = No. of bytes to write
 20531                                  ; Function:
 20532                                  ;	Perform write operation
 20533                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20534                                  ;		to current sf_position
 20535                                  ; Outputs:
 20536                                  ;    Carry clear
 20537                                  ;	SFT Position and cluster pointers updated
 20538                                  ;	CX = No. of bytes written
 20539                                  ;	ES:DI point to SFT
 20540                                  ;    Carry set
 20541                                  ;	AX is error code
 20542                                  ;	CX = 0
 20543                                  ;	ES:DI point to SFT
 20544                                  ; DS preserved, all other registers destroyed
 20545                                  ;---------------------------------------------------------------------------
 20546                                  
 20547                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20548                                  ;hkn; point to DOSDATA.
 20549                                  
 20550                                  ; 04/05/2019 - Retro DOS v4.0
 20551                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20552                                  
 20553                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20554                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20555                                  
 20556                                  DOS_WRITE:
 20557 000035C9 C43E[9E05]              	LES	DI,[THISSFT]
 20558                                  	;mov	al,[ES:DI+2]
 20559 000035CD 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20560                                  	;and	al,0Fh
 20561 000035D1 240F                    	AND	AL,access_mask
 20562                                  	;cmp	al,0
 20563 000035D3 3C00                    	CMP	AL,open_for_read
 20564 000035D5 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20565                                  BadMode:
 20566 000035D7 E9EC03                  	jmp	SET_ACC_ERR
 20567                                  
 20568                                  ; NOTE: The following check for writting to a Read Only File is performed
 20569                                  ;	    ONLY on FCBs!!!!
 20570                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20571                                  ;	    of a read only file which can then be written to.
 20572                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20573                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20574                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20575                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20576                                  ;	    to a read-only file.
 20577                                  
 20578                                  Check_FCB_RO:
 20579                                  	;;test	word [es:di+2],8000h
 20580                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20581                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20582                                  	
 20583                                  	;test	byte [es:di+3],80h
 20584 000035DA 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20585 000035DF 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20586                                  
 20587                                  	;test	byte [es:di+4],1
 20588 000035E1 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20589 000035E6 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20590                                  WRITE_NO_MODE:
 20591 000035E8 E8B602                  	call	SETUP
 20592 000035EB E8F9DC                  	call	IsSFTNet
 20593 000035EE 7406                    	JZ	short LOCAL_WRITE
 20594                                  
 20595                                  ;IF NOT Installed
 20596                                  ;	transfer NET_WRITE
 20597                                  ;ELSE
 20598                                  	;mov	ax,1109h
 20599 000035F0 B80911                  	MOV	AX,(MultNET<<8)|9
 20600 000035F3 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20601                                  			; ES:DI -> SFT
 20602                                  			; SFT DPB field -> DPB of drive containing file
 20603                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20604                                  			; Return: CF set on error, CX = bytes written
 20605 000035F5 C3                      	retn
 20606                                  ;ENDIF
 20607                                  
 20608                                  LOCAL_WRITE:
 20609                                  	;;test	word [es:di+5],80h
 20610                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20611                                  	;jnz	short WRTDEV
 20612                                  
 20613                                  	;test	byte [es:di+5],80h
 20614 000035F6 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20615 000035FB 756E                    	jnz	short WRTDEV
 20616                                  
 20617                                  	;mov	byte [EXTERR_LOCUS],2
 20618 000035FD C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20619 00003602 E88EDD                  	call	ECritDisk
 20620                                  
 20621 00003605 E80805                  	call	DISKWRITE
 20622                                  
 20623                                  	; 04/05/2019 - Retro DOS v4.0
 20624                                  
 20625                                  	; MSDOS 6.0
 20626                                  ; Extended Open
 20627 00003608 7210                    	JC	short nocommit
 20628                                  	
 20629 0000360A C43E[9E05]              	LES	DI,[THISSFT]
 20630                                  	
 20631                                  	;;test	word [ES:DI+2],4000h
 20632                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20633                                  	;JZ	short nocommit
 20634                                  	
 20635                                  	;test	byte [ES:DI+3],40h
 20636 0000360E 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20637 00003613 7405                    	JZ	short nocommit
 20638                                  	
 20639 00003615 51                      	PUSH	CX
 20640 00003616 E819FB                  	call	DOS_COMMIT
 20641 00003619 59                      	POP	CX
 20642                                  nocommit:
 20643                                  ; Extended Open
 20644                                  	;call	LCritDisk
 20645                                  	;retn
 20646                                  	; 18/12/2022
 20647 0000361A E991DD                  	jmp	LCritDisk
 20648                                  
 20649                                  DVWRTRAW:
 20650 0000361D 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20651 0000361F E8EF11                  	call	SETWRITE
 20652 00003622 1E                      	PUSH	DS			; Save seg of transfer
 20653                                  
 20654                                  ;hkn; SS override
 20655 00003623 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20656 00003628 E83A11                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20657                                  
 20658 0000362B 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20659 0000362D B487                    	MOV	AH,87H
 20660                                  
 20661                                  ;hkn; SS override
 20662 0000362F 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20663                                  
 20664                                  	; MSDOS 3.3
 20665                                  	;test	di,8000h
 20666                                  	;jz	short CWRTROK
 20667                                  
 20668                                  	; MSDOS 6.0
 20669 00003634 09FF                    	or	di,di
 20670 00003636 7920                    	jns	short CWRTROK
 20671                                  	
 20672                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20673 00003638 E8BA1D                  	call	CHARHARD
 20674                                  
 20675                                  	; 04/05/2019  - Retro DOS v4.0
 20676                                  
 20677                                  	; MSDOS 6.0
 20678 0000363B 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20679 00003640 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20680 00003642 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20681 00003647 89DF                    	mov	di,bx			;				M065
 20682                                  	
 20683                                  	; MSDOS 3.3
 20684                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20685                                  
 20686                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20687 00003649 08C0                    	OR	AL,AL
 20688 0000364B 740B                    	JZ	short CWRTROK 		; Ignore
 20689 0000364D 3C03                    	CMP	AL,3
 20690 0000364F 7403                    	JZ	short CWRFERR
 20691 00003651 1F                      	POP	DS			; Recover saved seg of transfer
 20692 00003652 EBC9                    	JMP	short DVWRTRAW		; Try again
 20693                                  CWRFERR:
 20694 00003654 58                      	POP	AX			; Chuck saved seg of transfer
 20695 00003655 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20696                                  CWRTROK:
 20697 00003658 58                      	POP	AX			; Chuck saved seg of transfer
 20698 00003659 1F                      	POP	DS
 20699 0000365A A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20700                                  ENDWRDEV:
 20701 0000365D C43E[9E05]              	LES	DI,[THISSFT]
 20702 00003661 89C1                    	MOV	CX,AX
 20703                                  	;call	ADDREC
 20704                                  	;retn
 20705                                  	; 16/12/2022
 20706                                  	; 10/06/2019
 20707 00003663 E91304                  	jmp	ADDREC
 20708                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20709                                  	;call	ADDREC
 20710                                  	;retn
 20711                                  	
 20712                                  WRTNUL:
 20713 00003666 89CA                    	MOV	DX,CX			; Entire transfer done
 20714                                  WRTCOOKJ:
 20715 00003668 E98D00                  	JMP	WRTCOOKDONE
 20716                                  WRTDEV:
 20717                                  	;mov	byte [EXTERR_LOCUS],4
 20718 0000366B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20719                                  	;or	byte [es:di+5],40h
 20720 00003670 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20721                                  					; Reset EOF for input
 20722                                  	;mov	bl,[es:di+5]
 20723 00003675 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20724 00003679 31C0                    	XOR	AX,AX
 20725 0000367B E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20726 0000367D 1E                      	PUSH	DS
 20727 0000367E 88D8                    	MOV	AL,BL
 20728 00003680 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20729 00003684 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20730 00003686 31D2                    	XOR	DX,DX			; Set starting point
 20731                                  	;test	al,20h
 20732 00003688 A820                    	test	AL,devid_device_raw	; Raw?
 20733                                  	;JZ	short TEST_DEV_CON
 20734                                  	;JMP	DVWRTRAW
 20735                                  	; 16/12/2022
 20736 0000368A 7591                    	jnz	short DVWRTRAW
 20737                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20738                                  	;JZ	short TEST_DEV_CON
 20739                                  	;JMP	short DVWRTRAW
 20740                                  
 20741                                  TEST_DEV_CON:
 20742                                  	;test	al,2
 20743 0000368C A802                    	test	AL,devid_device_con_out ; Console output device?
 20744 0000368E 756E                    	jnz	short WRITECON
 20745                                  	;test	al,4
 20746 00003690 A804                    	test	AL,devid_device_null
 20747 00003692 75D2                    	JNZ	short WRTNUL
 20748 00003694 89D0                    	MOV	AX,DX
 20749 00003696 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20750 00003699 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20751 0000369B 51                      	PUSH	CX
 20752 0000369C B90100                  	MOV	CX,1
 20753 0000369F E86F11                  	call	SETWRITE
 20754 000036A2 59                      	POP	CX
 20755                                  
 20756                                  ;hkn; SS override
 20757 000036A3 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20758                                  ;
 20759                                  ;SR; Removed X25 support from here
 20760                                  ;
 20761                                  	;lds	si,[si+7]
 20762 000036A8 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20763                                  DVWRTLP:
 20764 000036AB E8271B                  	call	DSKSTATCHK
 20765 000036AE E8B710                  	call	DEVIOCALL2
 20766 000036B1 57                      	PUSH	DI
 20767 000036B2 B487                    	MOV	AH,87H
 20768                                  
 20769                                  ;hkn; SS override
 20770 000036B4 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20771                                  	
 20772                                  	; MSDOS 3.3
 20773                                  	;test	di,8000h
 20774                                  	;jz	short CWROK
 20775                                  
 20776                                  	; MSDOS 6.0
 20777 000036B9 09FF                    	or	di,di
 20778 000036BB 7916                    	jns	short CWROK
 20779                                  	
 20780                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20781 000036BD E8351D                  	call	CHARHARD
 20782 000036C0 5F                      	POP	DI
 20783                                  
 20784                                  ;hkn; SS override
 20785 000036C1 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20786 000036C8 3C01                    	CMP	AL,1
 20787 000036CA 74DF                    	JZ	short DVWRTLP 	; Retry
 20788 000036CC 08C0                    	OR	AL,AL
 20789 000036CE 740C                    	JZ	short DVWRTIGN	; Ignore
 20790                                  	; 10/08/2018
 20791 000036D0 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20792                                  CWROK:
 20793 000036D3 5F                      	POP	DI
 20794                                  
 20795                                  ;hkn; SS override
 20796 000036D4 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20797 000036DA 741C                    	JZ	short WRTCOOKDONE
 20798                                  DVWRTIGN:
 20799 000036DC 42                      	INC	DX
 20800                                  
 20801                                  ;hkn; SS override for CALLXAD
 20802 000036DD 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20803 000036E2 47                      	INC	DI
 20804 000036E3 1E                      	PUSH	DS
 20805 000036E4 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20806 000036E9 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20807 000036EC 1F                      	POP	DS
 20808 000036ED 7409                    	JZ	short WRTCOOKDONE
 20809                                  
 20810                                  ;hkn; SS override
 20811 000036EF 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20812 000036F6 E2B3                    	LOOP	DVWRTLP
 20813                                  WRTCOOKDONE:
 20814 000036F8 89D0                    	MOV	AX,DX
 20815 000036FA 1F                      	POP	DS
 20816 000036FB E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20817                                  
 20818                                  WRITECON:
 20819 000036FE 1E                      	PUSH	DS
 20820                                  
 20821                                  ;hkn; SS is DOSDATA
 20822 000036FF 16                      	push	ss
 20823 00003700 1F                      	pop	ds
 20824 00003701 E888FC                  	CALL	SWAPCON
 20825 00003704 1F                      	POP	DS
 20826 00003705 89DE                    	MOV	SI,BX
 20827 00003707 51                      	PUSH	CX
 20828                                  WRCONLP:
 20829 00003708 AC                      	LODSB
 20830 00003709 3C1A                    	CMP	AL,1Ah		; ^Z?
 20831 0000370B 7405                    	JZ	short CONEOF
 20832 0000370D E8E1DF                  	call	OUTT
 20833 00003710 E2F6                    	LOOP	WRCONLP
 20834                                  CONEOF:
 20835 00003712 58                      	POP	AX			; Count
 20836 00003713 29C8                    	SUB	AX,CX			; Amount actually written
 20837 00003715 1F                      	POP	DS
 20838 00003716 E86DFC                  	CALL	SWAPBACK
 20839 00003719 E941FF                  	JMP	ENDWRDEV
 20840                                  
 20841                                  ;---------------------------------------------------------------------------
 20842                                  ;
 20843                                  ; Procedure Name : get_io_sft
 20844                                  ;
 20845                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20846                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20847                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20848                                  ;
 20849                                  ;---------------------------------------------------------------------------
 20850                                  
 20851                                  ; 04/05/2019 - Retro DOS v4.0
 20852                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20853                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20854                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20855                                  
 20856                                  GET_IO_SFT:
 20857                                  	;test	byte [SS:CONSWAP],0FFh
 20858 0000371C 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20859 00003722 7512                    	JNZ	short GetRedir
 20860                                  GetNormal:
 20861 00003724 16                      	push	ss
 20862 00003725 1F                      	pop	ds
 20863 00003726 06                      	PUSH	ES
 20864 00003727 57                      	PUSH	DI
 20865 00003728 E87F30                  	call	SFFromHandle
 20866 0000372B 7206                    	JC	short RET44P
 20867 0000372D 8CC6                    	MOV	SI,ES
 20868 0000372F 8EDE                    	MOV	DS,SI
 20869 00003731 89FE                    	MOV	SI,DI
 20870                                  RET44P:
 20871 00003733 5F                      	POP	DI
 20872 00003734 07                      	POP	ES
 20873 00003735 C3                      	retn
 20874                                  GetRedir:
 20875 00003736 83FB01                  	CMP	BX,1
 20876 00003739 77E9                    	JA	short GetNormal
 20877 0000373B 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20878 00003740 F8                      	CLC
 20879                                  get_io_sft_retn:
 20880 00003741 C3                      	retn
 20881                                  
 20882                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 20883                                  ;---------------------------------------------------------------------------
 20884                                  ;
 20885                                  ; Procedure Name : DIRREAD
 20886                                  ;
 20887                                  ; Inputs:
 20888                                  ;	AX = Directory block number (relative to first block of directory)
 20889                                  ;	ES:BP = Base of drive parameters
 20890                                  ;	[DIRSEC] = First sector of first cluster of directory
 20891                                  ;	[CLUSNUM] = Next cluster
 20892                                  ;	[CLUSFAC] = Sectors/Cluster
 20893                                  ; Function:
 20894                                  ;	Read the directory block into [CURBUF].
 20895                                  ; Outputs:
 20896                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 20897                                  ;	[SECCLUSPOS] Set
 20898                                  ;	ES:BP unchanged
 20899                                  ;	[CURBUF] Points to Buffer with dir sector
 20900                                  ;	Carry set if error (user said FAIL to I 24)
 20901                                  ; DS preserved, all other registers destroyed.
 20902                                  ;---------------------------------------------------------------------------
 20903                                  
 20904                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 20905                                  
 20906                                  DIRREAD:
 20907                                  
 20908                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 20909                                  ; the same as what is in the DPB! In the case of the root directory, we have
 20910                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 20911                                  ; by DIRStart = 0.
 20912                                  
 20913 00003742 31D2                    	XOR	DX,DX
 20914 00003744 833E[C205]00            	CMP	word [DIRSTART],0
 20915 00003749 7503                    	jnz	short SubDir
 20916 0000374B 92                      	XCHG	AX,DX
 20917 0000374C EB0C                    	JMP	short DoRead
 20918                                  
 20919                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 20920                                  
 20921                                  SubDir:
 20922 0000374E 88C2                    	MOV	DL,AL
 20923                                  	;and	dl,[es:bp+4]
 20924 00003750 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 20925                                  
 20926                                  ;	(DX) = sector-in-cluster
 20927                                  
 20928                                  	;mov	cl,[es:bp+5]
 20929 00003754 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20930 00003758 D3E8                    	SHR	AX,CL
 20931                                  
 20932                                  ;	(DX) = position in cluster
 20933                                  ;	(AX) = number of clusters to skip
 20934                                  
 20935                                  DoRead:
 20936 0000375A 8816[7305]              	MOV	[SECCLUSPOS],DL
 20937 0000375E 89C1                    	MOV	CX,AX
 20938 00003760 88D4                    	MOV	AH,DL
 20939                                  
 20940                                  ;	(CX) = number of clusters to skip.
 20941                                  ;	(AH) = remainder
 20942                                  
 20943                                  	; 04/05/2019 - Retro DOS v4.0
 20944                                  
 20945                                  	; MSDOS 6.0
 20946 00003762 8B16[C005]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 20947 00003766 8916[0706]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 20948 0000376A 8B16[BE05]              	MOV	DX,[DIRSEC]
 20949 0000376E 00E2                    	ADD	DL,AH
 20950 00003770 80D600                  	ADC	DH,0
 20951 00003773 8316[0706]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 20952                                  
 20953 00003778 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 20954 0000377C 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20955 00003780 E319                    	JCXZ	FIRSTCLUSTER
 20956                                  SKPCLLP:
 20957 00003782 E8DB1E                  	call	UNPACK
 20958 00003785 72BA                    	jc	short get_io_sft_retn
 20959 00003787 87DF                    	XCHG	BX,DI
 20960 00003789 E8BD1E                  	call	IsEOF			; test for eof based on fat size
 20961 0000378C 7302                    	JAE	short HAVESKIPPED
 20962 0000378E E2F2                    	LOOP	SKPCLLP
 20963                                  HAVESKIPPED:
 20964 00003790 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20965 00003794 89FA                    	MOV	DX,DI
 20966 00003796 88E3                    	MOV	BL,AH
 20967 00003798 E86917                  	call	FIGREC
 20968                                  
 20969                                  	;entry	FIRSTCLUSTER
 20970                                  
 20971                                  FIRSTCLUSTER:
 20972                                  	;mov	byte [ALLOWED],18h
 20973 0000379B C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 20974 000037A0 30C0                    	XOR	AL,AL		; Indicate pre-read
 20975 000037A2 E8DD22                  	call	GETBUFFR
 20976 000037A5 729A                    	jc	short get_io_sft_retn
 20977                                  
 20978                                  	;entry	SET_BUF_AS_DIR
 20979                                  
 20980                                  SET_BUF_AS_DIR:
 20981                                  
 20982                                  ;	Set the type of CURBUF to be a directory sector.
 20983                                  ;	Only flags are modified.
 20984                                  
 20985 000037A7 1E                      	PUSH	DS
 20986 000037A8 56                      	PUSH	SI
 20987 000037A9 C536[E205]              	LDS	SI,[CURBUF]
 20988                                  	;or	byte [si+5],4
 20989 000037AD 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 20990 000037B1 5E                      	POP	SI
 20991 000037B2 1F                      	POP	DS
 20992                                  dirread_retn:
 20993 000037B3 C3                      	retn
 20994                                  
 20995                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 20996                                  ;----------------------------------------------------------------------------
 20997                                  ;
 20998                                  ; Procedure Name : FATSECRD
 20999                                  ; Inputs:
 21000                                  ;	Same as DREAD
 21001                                  ;	DS:BX = Transfer address
 21002                                  ;	CX = Number of sectors
 21003                                  ;	DX = Absolute record number
 21004                                  ;	ES:BP = Base of drive parameters
 21005                                  ; Function:
 21006                                  ;	Calls BIOS to perform FAT read.
 21007                                  ; Outputs:
 21008                                  ;	Same as DREAD
 21009                                  ;---------------------------------------------------------------------------
 21010                                  
 21011                                  	; 04/05/2019 - Retro DOS v4.0
 21012                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21013                                  
 21014                                  FATSECRD:
 21015                                  ;hkn; SS override
 21016                                  	;mov	byte [ss:ALLOWED],18h
 21017 000037B4 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21018 000037BA 89CF                    	MOV	DI,CX
 21019                                  	;mov	cl,[es:bp+8]
 21020 000037BC 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21021                                  	; MSDOS 3.3
 21022                                  	;;mov	al,[es:bp+0Fh]
 21023                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21024                                  	;XOR	AH,AH
 21025                                  	; MSDOS 6.0
 21026                                  	;mov	ax,[es:bp+0Fh]
 21027 000037C0 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21028 000037C4 30ED                    	XOR	CH,CH	
 21029 000037C6 52                      	PUSH	DX
 21030                                  NXTFAT:
 21031                                  	; MSDOS 6.0
 21032                                  ;hkn; SS override
 21033 000037C7 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21034 000037CE 51                      	PUSH	CX			;32mb
 21035 000037CF 50                      	PUSH	AX
 21036 000037D0 89F9                    	MOV	CX,DI
 21037 000037D2 E85B00                  	call	DSKREAD
 21038 000037D5 58                      	POP	AX
 21039 000037D6 59                      	POP	CX
 21040 000037D7 7420                    	JZ	short RET41P		; Carry clear
 21041 000037D9 01C2                    	ADD	DX,AX
 21042 000037DB E2EA                    	LOOP	NXTFAT
 21043 000037DD 5A                      	POP	DX
 21044 000037DE 89F9                    	MOV	CX,DI
 21045                                  
 21046                                  ; NOTE FALL THROUGH
 21047                                  
 21048                                  ;Break	<DREAD -- DO A DISK READ>
 21049                                  ;---------------------------------------------------------------------------
 21050                                  ;
 21051                                  ; Procedure Name : DREAD
 21052                                  ;
 21053                                  ; Inputs:
 21054                                  ;	DS:BX = Transfer address
 21055                                  ;	CX = Number of sectors
 21056                                  ;	DX = Absolute record number	      (LOW)
 21057                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21058                                  ;	ES:BP = Base of drive parameters
 21059                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21060                                  ; Function:
 21061                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21062                                  ;	errors, will call HARDERRRW for further action.
 21063                                  ; Outputs:
 21064                                  ;	Carry set if error (currently user FAILED to INT 24)
 21065                                  ; DS,ES:BP preserved. All other registers destroyed.
 21066                                  ;---------------------------------------------------------------------------
 21067                                  
 21068                                  	;entry	DREAD
 21069                                  DREAD:
 21070 000037E0 E84D00                  	call	DSKREAD
 21071 000037E3 74CE                    	jz	short dirread_retn	; Carry clear
 21072                                  ;hkn; SS override
 21073 000037E5 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21074 000037EB E89A00                  	call	HARDERRRW
 21075 000037EE 3C01                    	CMP	AL,1			; Check for retry
 21076 000037F0 74EE                    	JZ	short DREAD
 21077 000037F2 3C03                    	CMP	AL,3			; Check for FAIL
 21078 000037F4 F8                      	CLC
 21079 000037F5 7501                    	JNZ	short NO_CAR		; Ignore
 21080 000037F7 F9                      	STC
 21081                                  NO_CAR:
 21082 000037F8 C3                      	retn
 21083                                  RET41P: 
 21084 000037F9 5A                      	POP	DX
 21085 000037FA C3                      	retn
 21086                                  
 21087                                  ; 24/07/2018 - Retro DOS v3.0
 21088                                  
 21089                                  ;Break	<CHECK_WRITE_LOCK>
 21090                                  ;---------------------------------------------------------------------------
 21091                                  ;
 21092                                  ; Procedure Name : CHECK_WRITE_LOCK
 21093                                  ;
 21094                                  ; Inputs:
 21095                                  ;	output of SETUP
 21096                                  ;	ES:DI -> SFT
 21097                                  ; Function:
 21098                                  ;	check write lock
 21099                                  ; Outputs:
 21100                                  ;	Carry set if error
 21101                                  ;	Carry clear if ok
 21102                                  ;
 21103                                  ;----------------------------------------------------------------------------
 21104                                  
 21105                                  	; 04/05/2019 - Retro DOS v4.0
 21106                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21107                                  
 21108                                  CHECK_WRITE_LOCK:
 21109                                  	; MSDOS 6.0
 21110                                  	;test	byte [es:di+4],8
 21111 000037FB 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21112                                  	;JZ	short write_cont			     ;no
 21113                                  	;;call	SET_ACC_ERR_DS
 21114                                  	;;retn
 21115                                  	;;jnz	SET_ACC_ERR_DS
 21116                                  	; 19/08/2018
 21117                                  	;jz	short write_cont
 21118                                  	;jmp	SET_ACC_ERR_DS
 21119                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21120 00003800 7403                    	JZ	short write_cont
 21121                                  	;call	SET_ACC_ERR_DS
 21122                                  	;retn
 21123                                  	; 16/12/2022
 21124 00003802 E9BF01                  	jmp	SET_ACC_ERR_DS
 21125                                  
 21126                                  write_cont:				;
 21127 00003805 51                      	PUSH	CX			;save reg
 21128 00003806 09C9                    	OR	CX,CX			;
 21129 00003808 7501                    	JNZ	short Not_Truncate	;
 21130 0000380A 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21131                                  Not_Truncate:				;
 21132 0000380B B080                    	MOV	AL,80H			;check write access
 21133 0000380D E8283C                  	call	LOCK_CHECK		;check lock
 21134 00003810 59                      	POP	CX			;restore reg
 21135 00003811 7305                    	JNC	short WRITE_OK		;lock ok
 21136 00003813 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21137 00003816 73ED                    	JNC	short write_cont	;retry
 21138                                  WRITE_OK:				;
 21139 00003818 C3                      	retn				;
 21140                                  
 21141                                  ;Break	<CHECK_READ_LOCK>
 21142                                  ;---------------------------------------------------------------------------
 21143                                  ;
 21144                                  ; Procedure Name : CHECK_READ_LOC
 21145                                  ;
 21146                                  ; Inputs:
 21147                                  ;	ES:DI -> SFT
 21148                                  ;	output of SETUP
 21149                                  ; Function:
 21150                                  ;	check read lock
 21151                                  ; Outputs:
 21152                                  ;	Carry set if error
 21153                                  ;	Carry clear if ok
 21154                                  ;----------------------------------------------------------------------------
 21155                                  
 21156                                  CHECK_READ_LOCK:
 21157                                  	; MSDOS 6.0
 21158                                  	;test	byte [es:di+4],8
 21159 00003819 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21160                                  	;JZ	short do_retry			   	     ; no
 21161                                  	;;call	SET_ACC_ERR
 21162                                  	;;retn
 21163                                  	;;jnz	SET_ACC_ERR
 21164                                  	; 16/12/2022
 21165                                  	; 28/07/2019
 21166 0000381E 7403                    	jz	short do_retry
 21167 00003820 E9A301                  	jmp	SET_ACC_ERR
 21168                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21169                                  	;JZ	short do_retry
 21170                                  	;call	SET_ACC_ERR
 21171                                  	;retn
 21172                                  do_retry:				;
 21173 00003823 30C0                    	xor	al,al			;check read access
 21174 00003825 E8103C                  	call	LOCK_CHECK		;check lock
 21175 00003828 7305                    	JNC	short READLOCK_OK 	;lock ok
 21176 0000382A E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21177 0000382D 73F4                    	JNC	short do_retry		;retry
 21178                                  READLOCK_OK:				;
 21179 0000382F C3                      	retn				;
 21180                                  
 21181                                  ;============================================================================
 21182                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21183                                  ;============================================================================
 21184                                  ; 24/07/2018 - Retro DOS v3.0
 21185                                  ; 04/05/2019 - Retro DOS v4.0
 21186                                  
 21187                                  ;	TITLE	DISK2 - Disk utility routines
 21188                                  ;	NAME	Disk2
 21189                                  
 21190                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21191                                  ;
 21192                                  ;	DskRead
 21193                                  ;	DWRITE
 21194                                  ;	DSKWRITE
 21195                                  ;	HarderrRW
 21196                                  ;	SETUP
 21197                                  ;	BREAKDOWN
 21198                                  ;	READ_LOCK_VIOLATION
 21199                                  ;	WRITE_LOCK_VIOLATION
 21200                                  ;	DISKREAD
 21201                                  ;	SET_ACC_ERR_DS
 21202                                  ;	SET_ACC_ERR
 21203                                  ;	SETSFT
 21204                                  ;	SETCLUS
 21205                                  ;	AddRec
 21206                                  ;
 21207                                  ;	Revision history:
 21208                                  ;
 21209                                  ;		AN000 version 4.00 Jan. 1988
 21210                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21211                                  
 21212                                  ; 04/05/2019 - Retro DOS v4.0
 21213                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21214                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21215                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21216                                  
 21217                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21218                                  ;---------------------------------------------------------------------------
 21219                                  ;
 21220                                  ; Procedure Name : DSKREAD
 21221                                  ;
 21222                                  ; Inputs:
 21223                                  ;	DS:BX = Transfer addr
 21224                                  ;	CX = Number of sectors
 21225                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21226                                  ;	DX = Absolute record number	       (LOW)
 21227                                  ;	ES:BP = Base of drive parameters
 21228                                  ; Function:
 21229                                  ;	Call BIOS to perform disk read
 21230                                  ; Outputs:
 21231                                  ;	DI = CX on entry
 21232                                  ;	CX = Number of sectors unsuccessfully transfered
 21233                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21234                                  ;	Zero set if OK (from BIOS) (carry clear)
 21235                                  ;	Zero clear if error (carry clear)
 21236                                  ; SI Destroyed, others preserved
 21237                                  ;---------------------------------------------------------------------------
 21238                                  
 21239                                  DSKREAD:
 21240 00003830 51                      	PUSH	CX
 21241                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21242 00003831 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21243                                  	;mov	al,[es:bp+1]
 21244 00003835 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21245 00003839 53                      	PUSH	BX
 21246 0000383A 06                      	PUSH	ES
 21247 0000383B E8A00F                  	call	SETREAD
 21248 0000383E EB27                    	JMP	short DODSKOP
 21249                                  
 21250                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21251                                  ;--------------------------------------------------------------------------
 21252                                  ;
 21253                                  ; Procedure Name : DWRITE
 21254                                  ;
 21255                                  ; Inputs:
 21256                                  ;	DS:BX = Transfer address
 21257                                  ;	CX = Number of sectors
 21258                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21259                                  ;	DX = Absolute record number	       (LOW)
 21260                                  ;	ES:BP = Base of drive parameters
 21261                                  ;	[ALLOWED] must be set in case HARDERR called
 21262                                  ; Function:
 21263                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21264                                  ;	errors, will call HARDERRRW for further action.
 21265                                  ; Output:
 21266                                  ;	Carry set if error (currently, user FAILed to I 24)
 21267                                  ; BP preserved. All other registers destroyed.
 21268                                  ;----------------------------------------------------------------------------
 21269                                  
 21270                                  	;entry	DWRITE
 21271                                  DWRITE:
 21272 00003840 E81600                  	CALL	DSKWRITE
 21273 00003843 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21274                                  
 21275                                  ;hkn; SS override
 21276 00003845 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21277 0000384B E83A00                  	call	HARDERRRW
 21278 0000384E 3C01                    	CMP	AL,1		; Check for retry
 21279 00003850 74EE                    	JZ	short DWRITE
 21280 00003852 3C03                    	CMP	AL,3		; Check for FAIL
 21281 00003854 F8                      	CLC
 21282 00003855 7501                    	JNZ	short NO_CAR2 	; Ignore
 21283 00003857 F9                      	STC
 21284                                  NO_CAR2:
 21285                                  dw_ret_label:
 21286 00003858 C3                      	retn
 21287                                  
 21288                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21289                                  ;---------------------------------------------------------------------------
 21290                                  ;
 21291                                  ; Procedure Name : DSKWRITE
 21292                                  ;
 21293                                  ; Inputs:
 21294                                  ;	DS:BX = Transfer addr
 21295                                  ;	CX = Number of sectors
 21296                                  ;	DX = Absolute record number	       (LOW)
 21297                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21298                                  ;	ES:BP = Base of drive parameters
 21299                                  ; Function:
 21300                                  ;	Call BIOS to perform disk read
 21301                                  ; Outputs:
 21302                                  ;	DI = CX on entry
 21303                                  ;	CX = Number of sectors unsuccessfully transfered
 21304                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21305                                  ;	Zero set if OK (from BIOS) (carry clear)
 21306                                  ;	Zero clear if error (carry clear)
 21307                                  ; SI Destroyed, others preserved
 21308                                  ;
 21309                                  ;----------------------------------------------------------------------------
 21310                                  
 21311                                  	;entry	DSKWRITE
 21312                                  DSKWRITE:
 21313 00003859 51                      	PUSH	CX
 21314                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21315 0000385A 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21316                                  	;mov	al,[es:bp+1]
 21317 0000385E 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21318 00003862 53                      	PUSH	BX
 21319 00003863 06                      	PUSH	ES
 21320 00003864 E8AA0F                  	call	SETWRITE
 21321                                  DODSKOP:
 21322 00003867 8CD9                    	MOV	CX,DS		; Save DS
 21323 00003869 1F                      	POP	DS		; DS:BP points to DPB
 21324 0000386A 1E                      	PUSH	DS
 21325                                  
 21326                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21327 0000386B 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21328 0000386F E8F60E                  	call	DEVIOCALL2
 21329                                  
 21330 00003872 8ED9                    	MOV	DS,CX		; Restore DS
 21331 00003874 07                      	POP	ES		; Restore ES
 21332 00003875 5B                      	POP	BX
 21333                                  
 21334                                  ;hkn; SS override
 21335 00003876 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21336 0000387B 5F                      	POP	DI
 21337 0000387C 29F9                    	SUB	CX,DI
 21338 0000387E F7D9                    	NEG	CX		; Number of sectors not transferred
 21339                                  
 21340                                  ;hkn; SS override
 21341 00003880 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21342                                  	;test	ax,8000h
 21343                                  	; 17/12/2022
 21344                                  	;test	ah,80h
 21345 00003884 F6C480                  	test	ah,(STERR>>8)
 21346                                  	;test	AX,STERR
 21347 00003887 C3                      	retn
 21348                                  
 21349                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21350                                  ;---------------------------------------------------------------------------
 21351                                  ;
 21352                                  ; Procedure Name : HardErrRW
 21353                                  ;
 21354                                  ; Inputs:
 21355                                  ;	AX is error code from read or write
 21356                                  ;	Other registers set as per HARDERR
 21357                                  ; Function:
 21358                                  ;	Checks the error code for special extended
 21359                                  ;	errors and maps them if needed. Then invokes
 21360                                  ;	Harderr
 21361                                  ; Outputs:
 21362                                  ;	Of HARDERR
 21363                                  ; AX may be modified prior to call to HARDERR.
 21364                                  ; No other registers altered.
 21365                                  ;
 21366                                  ;---------------------------------------------------------------------------
 21367                                  
 21368                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21369                                  HARDERRRW:
 21370                                  	;cmp	al,0Fh
 21371 00003888 3C0F                    	CMP	AL,error_I24_wrong_disk
 21372 0000388A 7512                    	JNZ	short DO_ERR				; Nothing to do
 21373                                  
 21374                                  	; MSDOS 3.3
 21375                                  	;push	ds
 21376                                  	;push	si
 21377                                  	;lds	si,[ss:CALLVIDRW]
 21378                                  	;mov	[ss:EXTERRPT+2], ds
 21379                                  	;mov	[ss:EXTERRPT], si
 21380                                  	;pop	si
 21381                                  	;pop	ds
 21382                                  
 21383                                  	; MSDOS 6.0
 21384 0000388C 50                      	push	ax
 21385 0000388D 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21386 00003891 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21387 00003895 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21388 00003899 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21389 0000389D 58                      	pop	ax
 21390                                  DO_ERR:
 21391                                  	;;call	HARDERR
 21392                                  	;;retn
 21393                                  	; 16/12/2022
 21394                                  	; 10/06/2019
 21395 0000389E E9851B                  	jmp	HARDERR	
 21396                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21397                                  	;call	HARDERR
 21398                                  	;retn
 21399                                  
 21400                                  ; 24/07/2018 - Retro DOS v3.0
 21401                                  
 21402                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21403                                  ;----------------------------------------------------------------------------
 21404                                  ;
 21405                                  ; Procedure Name : SETUP
 21406                                  ;
 21407                                  ; Inputs:
 21408                                  ;	ES:DI point to SFT (value also in THISSFT)
 21409                                  ;	DMAAdd contains transfer address
 21410                                  ;	CX = Byte count
 21411                                  ;	DS = DOSDATA
 21412                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21413                                  ;		2nd of caller of caller.
 21414                                  ; Outputs:
 21415                                  ;	    CX = byte count
 21416                                  ;	    [THISDPB] = Base of drive parameters if file
 21417                                  ;		      = Pointer to device header if device or NET
 21418                                  ;	    ES:DI Points to SFT
 21419                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21420                                  ;	    [TRANS] = 0 (No transfers yet)
 21421                                  ;	    BytPos = Byte position in file
 21422                                  ;
 21423                                  ;	The following fields are relevant to local files (not devices) only:
 21424                                  ;
 21425                                  ;	    SecPos = Position of first sector (local files only)
 21426                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21427                                  ;	    [CLUSNUM] = First cluster (local files only)
 21428                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21429                                  ;	    [THISDRV] = Physical unit number (local files only)
 21430                                  ;
 21431                                  ;      RETURNS ONE LEVEL UP WITH:
 21432                                  ;	   CX = 0
 21433                                  ;	   CARRY = Clear
 21434                                  ;	IF AN ERROR IS DETECTED
 21435                                  ; All other registers destroyed
 21436                                  ;----------------------------------------------------------------------------
 21437                                  
 21438                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21439                                  
 21440                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21441                                  
 21442                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21443                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21444                                  
 21445                                  SETUP:
 21446                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21447                                  
 21448                                  	;lds 	si,[es:di+7]
 21449 000038A1 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21450                                  
 21451                                  ;hkn; SS override
 21452 000038A5 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21453                                  
 21454                                  ;hkn; SS is DOSDATA
 21455 000038AA 16                      	push	ss
 21456 000038AB 1F                      	pop	ds
 21457                                  
 21458 000038AC 8936[8A05]              	MOV	[THISDPB],SI
 21459                                  
 21460 000038B0 8B1E[2C03]              	MOV	BX,[DMAADD]
 21461 000038B4 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21462 000038B8 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21463                                  	;mov	ax,[es:di+15h]
 21464 000038BD 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21465                                  	;mov	dx,[es:di+17h]
 21466 000038C1 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21467 000038C5 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21468 000038C9 A3[CE05]                	MOV	[BYTPOS],AX
 21469                                  	;test	word [es:di+5],8080h
 21470 000038CC 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21471 000038D2 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21472 000038D4 06                      	PUSH	ES
 21473 000038D5 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21474                                  
 21475                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21476                                  	;;mov	bl,[es:bp+0]
 21477                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21478                                  	; 05/12/2022
 21479 000038D9 268A5E00                	mov	bl,[es:bp]
 21480                                  	
 21481 000038DD 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21482                                  	;mov	bx,[es:bp+2]
 21483 000038E1 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21484                                  
 21485                                  	;; MSDOS 3.3
 21486                                  	;cmp	dx,bx
 21487                                  	;jnb	short EOFERR
 21488                                  	;div	bx
 21489                                  	;mov	[SECPOS],ax
 21490                                  	;mov	[BYTSECPOS],dx
 21491                                  	;mov	dx,ax
 21492                                  	;;and	al,[es:bp+4]
 21493                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21494                                  	;mov	[SECCLUSPOS],al
 21495                                  	;mov	ax,cx
 21496                                  	;;mov	cl,[es:bp+5]
 21497                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21498                                  	;shr	dx,cl
 21499                                  	;mov	[CLUSNUM],dx
 21500                                  	;pop	es
 21501                                  	;mov	cx,ax
 21502                                  
 21503                                  	; 04/05/2019 - Retro DOS v4.0
 21504                                  
 21505                                  	; MSDOS 6.0
 21506                                  ;M039: Optimized this section.
 21507 000038E5 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21508 000038E6 E83E05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21509 000038E9 8916[CC05]              	MOV	[BYTSECPOS],DX
 21510 000038ED A3[C405]                	MOV	[SECPOS],AX
 21511 000038F0 890E[C605]              	MOV	[SECPOS+2],CX
 21512 000038F4 89CA                    	MOV	DX,CX
 21513                                  
 21514 000038F6 89C3                    	MOV	BX,AX
 21515                                  	;and	bl,[es:bp+4]
 21516 000038F8 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21517 000038FC 881E[7305]              	MOV	[SECCLUSPOS],BL
 21518                                  
 21519 00003900 E84B05                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21520 00003903 59                      	POP	CX			;CX = byte count.
 21521 00003904 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21522                                  	;cmp	ax,[es:bp+0Dh]
 21523 00003906 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21524 0000390A 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21525                                  
 21526 0000390C A3[BC05]                	MOV	[CLUSNUM],AX
 21527 0000390F 07                      	POP	ES			; ES:DI point to SFT
 21528                                  ;M039
 21529                                  
 21530                                  NOSETSTUFF:
 21531 00003910 89C8                    	MOV	AX,CX		; AX = Byte count.
 21532 00003912 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21533 00003916 730C                    	JNC	short setup_OK	; Must be less than 64
 21534 00003918 A1[2C03]                	MOV	AX,[DMAADD]
 21535 0000391B F7D8                    	NEG	AX		; Amount of room left in segment (know
 21536                                  				;    less than 64K since max value of CX
 21537                                  				;    is FFFF).
 21538 0000391D 7501                    	JNZ	short NoDec
 21539 0000391F 48                      	DEC	AX
 21540                                  NoDec:
 21541 00003920 89C1                    	MOV	CX,AX		; Can do this much
 21542 00003922 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21543                                  setup_OK:
 21544 00003924 C3                      	retn
 21545                                  
 21546                                  EOFERR:
 21547 00003925 07                      	POP	ES		; ES:DI point to SFT
 21548 00003926 31C9                    	XOR	CX,CX		; No bytes read
 21549                                  ;;;;;;;;;;; 7/18/86
 21550                                  	; MSDOS 3.3
 21551                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21552                                  ;;;;;;;;;;;
 21553                                  NOROOM:
 21554 00003928 5B                      	POP	BX		; Kill return address
 21555 00003929 F8                      	CLC
 21556 0000392A C3                      	retn			; RETURN TO CALLER OF CALLER
 21557                                  
 21558                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21559                                  ;---------------------------------------------------------------------------
 21560                                  ;
 21561                                  ; Procedure Name : BREAKDOWN
 21562                                  ;
 21563                                  ; Inputs:
 21564                                  ;	CX = Length of disk transfer in bytes
 21565                                  ;	ES:BP = Base of drive parameters
 21566                                  ;	[BYTSECPOS] = Byte position within first sector
 21567                                  ;	DS = DOSDATA
 21568                                  ; Outputs:
 21569                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21570                                  ;	[SECCNT] = No. of whole sectors to transfer
 21571                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21572                                  ; AX, BX, DX destroyed. No other registers affected.
 21573                                  ;---------------------------------------------------------------------------
 21574                                  
 21575                                  BREAKDOWN:
 21576 0000392B A1[CC05]                	MOV	AX,[BYTSECPOS]
 21577 0000392E 89CB                    	MOV	BX,CX
 21578 00003930 09C0                    	OR	AX,AX
 21579 00003932 740E                    	JZ	short SAVFIR	; Partial first sector?
 21580                                  	;sub	ax,[es:bp+2]
 21581 00003934 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21582 00003938 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21583 0000393A 29C3                    	SUB	BX,AX		; Subtract from total length
 21584 0000393C 7304                    	JAE	short SAVFIR
 21585 0000393E 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21586 00003940 31DB                    	XOR	BX,BX		; And no bytes are left
 21587                                  SAVFIR:
 21588 00003942 A3[D205]                	MOV	[BYTCNT1],AX
 21589 00003945 89D8                    	MOV	AX,BX
 21590 00003947 31D2                    	XOR	DX,DX
 21591                                  	;div	word [ES:BP+2]
 21592 00003949 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21593 0000394D A3[D605]                	MOV	[SECCNT],AX
 21594 00003950 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21595                                  	; MSDOS 3.3
 21596                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21597                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21598                                  	;CMP	AX,1
 21599                                  	;retnz
 21600                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21601                                  	;MOV	[BYTCNT2],AX
 21602                                  	;MOV	[SECCNT],DX	; DX = 0
 21603                                  _RET45:
 21604 00003954 C3                      	retn
 21605                                  
 21606                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21607                                  
 21608                                  ;----------------------------------------------------------------------------
 21609                                  ;
 21610                                  ; Procedure Name : READ_LOCK_VIOLATION
 21611                                  ;
 21612                                  ; ES:DI points to SFT. This entry used by NET_READ
 21613                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21614                                  ; Else do retrys.
 21615                                  ; ES:DI,DS,CX preserved
 21616                                  ;
 21617                                  ;----------------------------------------------------------------------------
 21618                                  
 21619                                  READ_LOCK_VIOLATION:
 21620 00003955 C606[7505]00            	MOV	byte [READOP],0
 21621                                  ERR_ON_CHECK:
 21622                                  	;;test	word [es:di+2],8000h
 21623                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21624                                  	;JNZ	short HARD_ERR
 21625                                  
 21626                                  	; 04/05/2019
 21627                                  	;test	byte [es:di+3],80h
 21628 0000395A 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21629 0000395F 750E                    	JNZ	short HARD_ERR
 21630                                  
 21631 00003961 51                      	PUSH	CX
 21632                                  	;mov	cl,[es:di+2]
 21633 00003962 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21634                                  	;and	cl,0F0h
 21635 00003966 80E1F0                  	AND	CL,SHARING_MASK
 21636                                  	;cmp	cl,0
 21637 00003969 80F900                  	CMP	CL,SHARING_COMPAT
 21638 0000396C 59                      	POP	CX
 21639 0000396D 7505                    	JNE	short NO_HARD_ERR
 21640                                  HARD_ERR:
 21641 0000396F E8DC3A                  	call	LOCK_VIOLATION
 21642 00003972 73E0                    	jnc	short _RET45		; User wants Retrys
 21643                                  NO_HARD_ERR:
 21644 00003974 31C9                    	XOR	CX,CX			;No bytes transferred
 21645                                  	;mov	ax,21h
 21646 00003976 B82100                  	MOV	AX,error_lock_violation
 21647 00003979 F9                      	STC
 21648 0000397A C3                      	retn
 21649                                  
 21650                                  ;----------------------------------------------------------------------------
 21651                                  ;
 21652                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21653                                  ;
 21654                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21655                                  ; This entry used by NET_WRITE
 21656                                  ;
 21657                                  ;----------------------------------------------------------------------------
 21658                                  
 21659                                  WRITE_LOCK_VIOLATION:
 21660 0000397B C606[7505]01            	MOV	byte [READOP],1
 21661 00003980 EBD8                    	JMP	short ERR_ON_CHECK
 21662                                  
 21663                                  ; 04/05/2019 - Retro DOS v4.0
 21664                                  
 21665                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21666                                  
 21667                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21668                                  ;----------------------------------------------------------------------------
 21669                                  ;
 21670                                  ; Procedure Name : DISKREAD
 21671                                  ;
 21672                                  ; Inputs:
 21673                                  ;	Outputs of SETUP
 21674                                  ; Function:
 21675                                  ;	Perform disk read
 21676                                  ; Outputs:
 21677                                  ;    Carry clear
 21678                                  ;	CX = No. of bytes read
 21679                                  ;	ES:DI point to SFT
 21680                                  ;	SFT offset and cluster pointers updated
 21681                                  ;    Carry set
 21682                                  ;	CX = 0
 21683                                  ;	ES:DI point to SFT
 21684                                  ;	AX has error code
 21685                                  ;----------------------------------------------------------------------------
 21686                                  
 21687                                  ;hkn; called from disk.asm. DS already set up.
 21688                                  
 21689                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21690                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21691                                  
 21692                                  DISKREAD:
 21693                                  	;mov	ax,[es:di+11h]
 21694 00003982 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21695                                  	;mov	bx,[es:di+13h]
 21696 00003986 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21697 0000398A 2B06[CE05]              	SUB	AX,[BYTPOS]
 21698 0000398E 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21699 00003992 7226                    	JB	short RDERR		;Read starts past EOF
 21700 00003994 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21701 00003996 09C0                    	OR	AX,AX
 21702 00003998 7420                    	JZ	short RDERR		;Read starts at EOF
 21703 0000399A 39C8                    	CMP	AX,CX
 21704 0000399C 7302                    	JAE	short ENUF		;I/O fits
 21705 0000399E 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21706                                  ENUF:
 21707                                  	; MSDOS 3.3
 21708                                  	;test	byte [es:di+4],8
 21709                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21710                                  	;jnz	short SET_ACC_ERR
 21711                                  	;call	LOCK_CHECK
 21712                                  	;jnb	short _READ_OK
 21713                                  	;call	READ_LOCK_VIOLATION
 21714                                  	;jnb	short ENUF
 21715                                  	;retn
 21716                                  
 21717                                  	; MSDOS 6.0
 21718 000039A0 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21719 000039A3 7301                    	JNC	short _READ_OK 		; There are no locks
 21720 000039A5 C3                      	retn
 21721                                  
 21722                                  _READ_OK:
 21723 000039A6 C42E[8A05]              	LES	BP,[THISDPB]
 21724 000039AA E87EFF                  	CALL	BREAKDOWN
 21725 000039AD 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21726                                  
 21727 000039B1 E8B113                  	call	FNDCLUS
 21728                                       	; MSDOS 6.0			;M022 conditional removed here
 21729 000039B4 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21730                                  					; migrated from 330a - HKN
 21731 000039B6 09C9                    	OR	CX,CX
 21732 000039B8 7413                    	JZ	short SKIPERR
 21733                                  RDERR:
 21734 000039BA B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21735 000039BC E92502                  	jmp	WRTERR22
 21736                                  
 21737                                  ;RDLASTJ: 
 21738                                  	;JMP	RDLAST                  ;M039
 21739                                  
 21740                                  SETSFTJ2: 
 21741 000039BF E99600                  	JMP	SETSFT
 21742                                  
 21743                                  CANOT_READ:
 21744                                  	; MSDOS 3.3
 21745                                  	;POP	CX		;M039.
 21746                                  	; MSDOS 3.3 & MSDOS 6.0
 21747 000039C2 59                      	POP	CX              ;Clean stack.
 21748 000039C3 5B                      	POP	BX
 21749                                  
 21750                                  	;entry	SET_ACC_ERR_DS
 21751                                  SET_ACC_ERR_DS:
 21752                                  
 21753                                  ;hkn; SS is DOSDATA
 21754                                  	;Context DS
 21755 000039C4 16                      	push	ss
 21756 000039C5 1F                      	pop	ds
 21757                                  
 21758                                  	;entry	SET_ACC_ERR
 21759                                  SET_ACC_ERR:
 21760 000039C6 31C9                    	XOR	CX,CX
 21761                                  	;mov	ax,5
 21762 000039C8 B80500                  	MOV	AX,error_access_denied
 21763 000039CB F9                      	STC
 21764 000039CC C3                      	retn
 21765                                  
 21766                                  SKIPERR:
 21767 000039CD 8916[BA05]              	MOV	[LASTPOS],DX
 21768 000039D1 891E[BC05]              	MOV	[CLUSNUM],BX
 21769 000039D5 833E[D205]00            	CMP	word [BYTCNT1],0
 21770 000039DA 7405                    	JZ	short RDMID
 21771                                  
 21772 000039DC E8FC13                  	call	BUFRD
 21773 000039DF 72E3                    	JC	short SET_ACC_ERR_DS
 21774                                  
 21775                                  RDMID:
 21776 000039E1 833E[D605]00            	CMP	word [SECCNT],0
 21777                                  	;JZ	RDLAST ; 10/08/2018
 21778 000039E6 7453                    	jz	short RDLAST
 21779                                  
 21780 000039E8 E88914                  	call	NEXTSEC
 21781 000039EB 72D2                    	JC	short SETSFTJ2
 21782                                  
 21783 000039ED C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21784                                  ONSEC:
 21785 000039F2 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21786 000039F6 8B0E[D605]              	MOV	CX,[SECCNT]
 21787 000039FA 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21788                                  RDLP:
 21789 000039FE E8A414                  	call	OPTIMIZE
 21790 00003A01 72C1                    	JC	short SET_ACC_ERR_DS
 21791                                  
 21792 00003A03 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21793 00003A04 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21794 00003A05 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21795                                  	;mov	byte [ALLOWED],38h
 21796 00003A06 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21797 00003A0B 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21798                                  
 21799 00003A0F 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21800 00003A10 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21801                                  
 21802                                  	; 04/05/2019 - Retro DOS v4.0
 21803                                  
 21804                                  	; MSDOS 6.0
 21805 00003A11 E86122                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21806                                  
 21807                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21808 00003A14 E8C9FD                  	call	DREAD
 21809                                  
 21810                                  	; MSDOS 3.3 
 21811                                  	;pop	bx
 21812                                  	;pop	dx
 21813                                  	;jc	short CANOT_READ
 21814                                  	;add	bx,dx	; (bx = Extent end)
 21815                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21816                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21817                                  	;call	SETVISIT
 21818                                  	; ->***
 21819                                  ;M039
 21820                                  	; MSDOS 6.0 
 21821 00003A17 59                      	pop	cx
 21822 00003A18 5A                      	pop	dx
 21823 00003A19 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21824 00003A1E 72A2                    	jc	short CANOT_READ
 21825                                  
 21826 00003A20 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21827                                  
 21828                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21829                                  ;            sectors, also termed an "Extent".)
 21830                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21831                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21832                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21833                                  ;
 21834                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21835                                  ;	buffers must be "read" into the transfer memory block, so that the
 21836                                  ;       transfer memory reflects the most recent data.
 21837                                  
 21838 00003A25 E85E00                  	call	DskRdBufScan
 21839                                  
 21840                                  	;Context DS
 21841 00003A28 16                      	push	ss
 21842 00003A29 1F                      	pop	ds
 21843                                          
 21844 00003A2A 59                      	pop	cx
 21845 00003A2B 5B                              pop	bx
 21846                                  
 21847                                  ;       CX = # of sector remaining.
 21848                                  ;       BX = Next physical cluster.
 21849                                  
 21850                                  ;M039
 21851                                  
 21852                                  ;;;;;;;;
 21853                                  ;	; 25/07/2018 - Retro DOS v3.0
 21854                                  ;	; ***->
 21855                                  ;	; MSDOS 3.3
 21856                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21857                                  ;bufq:
 21858                                  ;;	DX = Extent start.
 21859                                  ;;	BX = Extent end.
 21860                                  ;;	 AL = Drive #.
 21861                                  ;;     DS:DI-> 1st buffer in queue.
 21862                                  ;
 21863                                  ;	;or	byte [di+5],20h
 21864                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21865                                  ;	;cmp	al,[di+4]	
 21866                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21867                                  ;	jnz	short bufq3
 21868                                  ;	;cmp	[di+6],dx
 21869                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21870                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21871                                  ;	;cmp	[di+6],bx
 21872                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21873                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21874                                  ;	
 21875                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21876                                  ;
 21877                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21878                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21879                                  ;;      as MRU (Most Recently Used).
 21880                                  ;
 21881                                  ;	;test	byte [di+5],40h
 21882                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 21883                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 21884                                  ;	pop	ax ; transfer address
 21885                                  ;	push	ax
 21886                                  ;	push	di
 21887                                  ;	push	dx
 21888                                  ;	;sub	dx,[di+6]
 21889                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 21890                                  ;	neg	dx
 21891                                  ;
 21892                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 21893                                  ;;           block.
 21894                                  ;
 21895                                  ;	mov	si,di
 21896                                  ;	mov	di,ax
 21897                                  ;	mov	ax,dx
 21898                                  ;	;mov	cx,[es:bp+6]	
 21899                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 21900                                  ;	mul	cx
 21901                                  ;	add	di,ax
 21902                                  ;
 21903                                  ;	lea	si,[si+16]
 21904                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 21905                                  ;	shr	cx,1
 21906                                  ;	push	es
 21907                                  ;	mov	es,[SS:DMAADD+2]
 21908                                  ;
 21909                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 21910                                  ;;      DS:SI-> Buffer sector data.
 21911                                  ;;      ES:DI-> Destination within Transfer memory block.
 21912                                  ;
 21913                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 21914                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 21915                                  ;	;rep	movsb                   ;Copy last byte.
 21916                                  ;	jnc	short bufq1
 21917                                  ;	movsb
 21918                                  ;bufq1:
 21919                                  ;	pop	es
 21920                                  ;	pop	dx
 21921                                  ;	pop	di
 21922                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 21923                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 21924                                  ;bufq2:
 21925                                  ;	call	SCANPLACE
 21926                                  ;bufq3:
 21927                                  ;	call	SKIPVISIT
 21928                                  ;	jnz	short bufq
 21929                                  ;	
 21930                                  ;	push	ss
 21931                                  ;	pop	ds
 21932                                  ;	pop	cx
 21933                                  ;	pop	cx
 21934                                  ;	pop	bx	
 21935                                  ;bufq4:
 21936                                  ;;;;;;;
 21937 00003A2C E30D                    	JCXZ	RDLAST
 21938                                  
 21939 00003A2E E8181C                  	call	IsEOF			; test for eof on fat size
 21940 00003A31 7325                    	JAE	short SETSFT
 21941                                  
 21942 00003A33 B200                    	MOV	DL,0
 21943 00003A35 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 21944 00003A39 EBC3                    	JMP	short RDLP ; 19/05/2019
 21945                                  
 21946                                  RDLAST:
 21947 00003A3B A1[D405]                	MOV	AX,[BYTCNT2]
 21948 00003A3E 09C0                    	OR	AX,AX
 21949 00003A40 7416                    	JZ	short SETSFT
 21950 00003A42 A3[D205]                	MOV	[BYTCNT1],AX
 21951                                  
 21952 00003A45 E82C14                  	call	NEXTSEC
 21953 00003A48 720E                    	JC	short SETSFT
 21954                                  
 21955 00003A4A C706[CC05]0000          	MOV	word [BYTSECPOS],0
 21956 00003A50 E88813                  	call	BUFRD
 21957                                  	; 10/08/2018
 21958                                  
 21959 00003A53 7303                    	JNC	short SETSFT
 21960 00003A55 E96CFF                  	JMP	SET_ACC_ERR_DS
 21961                                  
 21962                                  ;------------------------------------------------------------------------------
 21963                                  ;
 21964                                  ; Procedure Name : SETSFT
 21965                                  ; Inputs:
 21966                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 21967                                  ;		and set cluster fields
 21968                                  ; Function:
 21969                                  ;	Update [THISSFT] based on the transfer
 21970                                  ; Outputs:
 21971                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 21972                                  ;	ES:DI points to [THISSFT]
 21973                                  ;	CX No. of bytes transferred
 21974                                  ;	Carry clear
 21975                                  ;
 21976                                  ;----------------------------------------------------------------------------
 21977                                  
 21978                                  	;entry	SETSFT
 21979                                  
 21980                                  ; 26/07/2018 - Retro DOS v3.0
 21981                                  SETSFT:
 21982 00003A58 C43E[9E05]              	LES	DI,[THISSFT]
 21983                                  
 21984                                  ; Same as SETSFT except ES:DI already points to SFT
 21985                                  	;entry	SETCLUS
 21986                                  SETCLUS:	
 21987 00003A5C 8B0E[B805]              	MOV	CX,[NEXTADD]
 21988 00003A60 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 21989                                  	;;test	word [es:di+5],80h
 21990                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21991                                  	;JNZ	short ADDREC		; don't set clusters if device
 21992                                  
 21993                                  	; 04/05/2019 - Retro DOS v4.0
 21994                                  	;test	byte [es:di+5],80h
 21995 00003A64 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 21996 00003A69 750E                    	JNZ	short ADDREC		; don't set clusters if device
 21997                                  
 21998 00003A6B A1[BC05]                	MOV	AX,[CLUSNUM]
 21999                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22000                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22001 00003A6E 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22002 00003A72 A1[BA05]                	MOV	AX,[LASTPOS]
 22003                                  	;mov	[es:di+19h],ax
 22004 00003A75 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22005                                  
 22006                                  ;----------------------------------------------------------------------------
 22007                                  ;
 22008                                  ; Procedure : AddRec
 22009                                  ; Inputs:
 22010                                  ;	ES:DI points to SFT
 22011                                  ;	CX is No. Bytes transferred
 22012                                  ; Function:
 22013                                  ;	Update the SFT offset based on the transfer
 22014                                  ; Outputs:
 22015                                  ;	sf_position updated to point to first byte after transfer
 22016                                  ;	ES:DI points to SFT
 22017                                  ;	CX No. of bytes transferred
 22018                                  ;	Carry clear
 22019                                  ;----------------------------------------------------------------------------
 22020                                  
 22021                                  	;entry	AddRec
 22022                                  ADDREC:
 22023 00003A79 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22024                                  	;add	[es:di+15h],cx
 22025 00003A7B 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22026                                  	;adc	word [es:di+17h], 0
 22027 00003A7F 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22028                                  RET28:	
 22029 00003A84 F8                      	CLC
 22030 00003A85 C3                      	retn
 22031                                  
 22032                                  ; 25/07/2018
 22033                                  ; MSDOS 6.0
 22034                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22035                                  ;----------------------------------------------------------------------------
 22036                                  ;
 22037                                  ; Procedure Name : DskRdBufScan
 22038                                  ;
 22039                                  ; Inputs:
 22040                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22041                                  ;            sectors, also termed an "Extent".)
 22042                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22043                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22044                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22045                                  ;
 22046                                  ; Function:
 22047                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22048                                  ;	"read" into the transfer memory block, so that the transfer memory
 22049                                  ;	reflects the most recent data.
 22050                                  ;
 22051                                  ; Outputs:
 22052                                  ;       Transfer memory updated as required.
 22053                                  ;
 22054                                  ; Uses:
 22055                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22056                                  ;       SS override for all global variables.
 22057                                  ;
 22058                                  ; Notes:
 22059                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22060                                  ;	than the FIRST.
 22061                                  ;----------------------------------------------------------------------------
 22062                                  ;M039: Created
 22063                                  
 22064                                  ; 04/05/2019 - Retro DOS v4.0
 22065                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22066                                  
 22067                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22068                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22069                                  
 22070                                  ;procedure DskRdBufScan,NEAR
 22071                                  ;
 22072                                  ;ASSUME  DS:NOTHING
 22073                                  
 22074                                  DskRdBufScan:
 22075 00003A86 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22076 00003A8C 743C                    	je	short bufx		     ; -no, skip all work.
 22077                                  
 22078 00003A8E 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22079 00003A93 89DE                    	mov     si,bx
 22080 00003A95 01D1                    	add     cx,dx
 22081 00003A97 83D600                  	adc     si,0
 22082                                  
 22083 00003A9A E8801F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22084                                  	;mov	ax,[di+2]
 22085 00003A9D 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22086 00003AA0 36A3[BA0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22087                                  		
 22088                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22089                                  	;;mov	al,[es:bp+0]
 22090                                  	;mov	al,[es:bp+DPB.DRIVE]
 22091                                  	; 15/12/2022
 22092 00003AA4 268A4600                	mov	al,[es:bp]
 22093                                  
 22094                                  ;       BX:DX = Extent start.
 22095                                  ;       SI:CX = Extent end + 1.
 22096                                  ;          AL = Drive #.
 22097                                  ;       DS:DI-> 1st buffer in queue.
 22098                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22099                                  
 22100                                  bufq:	
 22101                                  	;cmp	al,[di+4]
 22102 00003AA8 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22103 00003AAB 7514                    	jne	short bufq1        	;  -no, jump.
 22104                                  
 22105                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22106                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22107                                  
 22108                                  	;cmp	bx,[di+8]
 22109 00003AAD 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22110 00003AB0 7503                    	jne	short bufq01
 22111                                  	;cmp	dx,[di+6]
 22112 00003AB2 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22113                                  bufq01:
 22114 00003AB5 770A                    	ja	short bufq1
 22115                                  
 22116                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22117                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22118                                  
 22119                                  	;cmp	si,[di+8]
 22120 00003AB7 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22121 00003ABA 7503                    	jne	short bufq02
 22122                                  	;cmp	cx,[di+6]
 22123 00003ABC 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22124                                  bufq02:
 22125 00003ABF 770A                    	ja	short bufq2
 22126                                  bufq1:	
 22127 00003AC1 363B3E[BA0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22128 00003AC6 8B3D                    	mov	di,[di]
 22129                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22130 00003AC8 75DE                    	jne	short bufq		; -no, do next buffer
 22131                                  bufx:
 22132 00003ACA C3                      	retn				;Exit.
 22133                                  
 22134                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22135                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22136                                  ;       as MRU (Most Recently Used).
 22137                                  
 22138                                  bufq2:	
 22139 00003ACB 50                      	push	ax
 22140                                  	;test	byte [di+5],40h
 22141 00003ACC F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22142 00003AD0 742F                    	jz	short bufq3                    ; -no, jump.
 22143                                  
 22144                                  ;       SaveReg <cx,dx,si,di,es>
 22145 00003AD2 51                      	push	cx
 22146 00003AD3 52                      	push	dx
 22147 00003AD4 56                      	push	si
 22148 00003AD5 57                      	push	di
 22149 00003AD6 06                      	push	es
 22150                                  
 22151 00003AD7 89D0                    	mov     ax,dx
 22152                                  	;sub	ax,[di+6]
 22153 00003AD9 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22154 00003ADC F7D8                    	neg	ax
 22155                                  
 22156                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22157                                  ;            block. (Note: the upper word of the sector # may be ignored
 22158                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22159                                  ;            is imposed by the input parameters of the disk read operation.)
 22160                                  
 22161                                  	;lea	si,[di+20]
 22162 00003ADE 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22163                                  	;mov	cx,[es:bp+2]
 22164 00003AE1 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22165 00003AE5 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22166 00003AE7 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22167 00003AEC 01C7                    	add	di,ax
 22168 00003AEE 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22169 00003AF3 D1E9                    	shr	cx,1
 22170                                  
 22171                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22172                                  ;       DS:SI-> Buffer sector data.
 22173                                  ;       ES:DI-> Destination within Transfer memory block.
 22174                                  
 22175 00003AF5 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22176                                  	;; 04/05/2019
 22177                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22178                                  	;;rep	movsb                   ;Copy last byte.
 22179                                  	;jnc	short bufq03	
 22180                                  	;movsb
 22181                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22182 00003AF7 83D100                  	adc	cx,0
 22183 00003AFA F3A4                    	rep	movsb
 22184                                  bufq03:
 22185                                  	;RestoreReg <es,di,si,dx,cx>
 22186 00003AFC 07                      	pop	es
 22187 00003AFD 5F                      	pop	di
 22188 00003AFE 5E                      	pop	si
 22189 00003AFF 5A                      	pop	dx
 22190 00003B00 59                      	pop	cx
 22191                                  
 22192                                  ;       DS:DI -> current buffer.
 22193                                  bufq3:	
 22194 00003B01 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22195                                          ;invoke SCANPLACE
 22196 00003B03 E8291F                  	call	SCANPLACE
 22197 00003B06 363B06[BA0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22198 00003B0B 58                      	pop	ax
 22199                                  	;jne	short bufq		; -no, jump.
 22200                                  	;;jmp	short bufx		; -yes, exit.
 22201                                  	;; 12/06/2019
 22202                                  	;retn
 22203                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22204 00003B0C 759A                    	jne	short bufq
 22205 00003B0E EBBA                    	jmp	short bufx
 22206                                  
 22207                                  ;EndProc DskRdBufScan
 22208                                  
 22209                                  ;============================================================================
 22210                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22211                                  ;============================================================================
 22212                                  ; 04/05/2019 - Retro DOS v4.0
 22213                                  ; 24/07/2018 - Retro DOS v3.0
 22214                                  
 22215                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22216                                  ;----------------------------------------------------------------------------
 22217                                  ;
 22218                                  ; Procedure Name : DISKWRITE
 22219                                  ;
 22220                                  ; Inputs:
 22221                                  ;       Outputs of SETUP
 22222                                  ; Function:
 22223                                  ;       Perform disk write
 22224                                  ; Outputs:
 22225                                  ;    Carry clear
 22226                                  ;       CX = No. of bytes written
 22227                                  ;       ES:DI point to SFT
 22228                                  ;       SFT offset and cluster pointers updated
 22229                                  ;    Carry set
 22230                                  ;       CX = 0
 22231                                  ;       ES:DI point to SFT
 22232                                  ;       AX has error code
 22233                                  ;----------------------------------------------------------------------------
 22234                                  
 22235                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22236                                  
 22237                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22238                                  
 22239                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22240                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22241                                  
 22242                                  DISKWRITE:
 22243                                  	; MSDOS 3.3
 22244                                  	; IBMDOS.COM - Offset 436Dh
 22245                                  	;;test	byte [es:di+4],8
 22246                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22247                                  	;jz	short write_cont
 22248                                  	;jmp	SET_ACC_ERR_DS
 22249                                  ;write_cont:
 22250                                  	;push	cx
 22251                                  	;or	cx,cx
 22252                                  	;jnz	short Not_Truncate
 22253                                  	;;mov	cx,-1
 22254                                  	;dec	cx
 22255                                  ;Not_Truncate:
 22256                                  	;call	LOCK_CHECK
 22257                                  	;pop	cx
 22258                                  	;jnb	short _WRITE_OK
 22259                                  	;call	WRITE_LOCK_VIOLATION
 22260                                  	;jnb	short DISKWRITE
 22261                                  	;retn
 22262                                  
 22263                                  	; MSDOS 6.0
 22264 00003B10 E8E8FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22265                                  	; 19/08/2018
 22266 00003B13 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22267 00003B15 C3                      	retn
 22268                                  
 22269                                  WRTEOFJ:
 22270 00003B16 E9DE01                  	JMP     WRTEOF
 22271                                  
 22272                                  _WRITE_OK:
 22273                                   	; 27/07/2018
 22274                                  	; IBMDOS.COM - Offset 438Eh
 22275                                  	
 22276                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22277                                  	;and	word [es:di+5],0BFBFh
 22278 00003B19 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22279                                  				; Mark file as dirty, clear no date on close
 22280                                  
 22281                                  	; 04/05/2019 - Retro DOS v4.0	
 22282                                  
 22283                                  	; MSDOS 6.0
 22284                                  	; mov 	ax,[es:di+11h]
 22285 00003B1F 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22286 00003B23 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22287                                  	;mov	ax,[es:di+13h]
 22288 00003B26 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22289 00003B2A A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22290                                  
 22291                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22292                                  
 22293                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22294 00003B2D C42E[8A05]              	LES     BP,[THISDPB]
 22295                                  
 22296 00003B31 E8F7FD                  	call	BREAKDOWN
 22297                                  
 22298 00003B34 A1[CE05]                	MOV     AX,[BYTPOS]
 22299 00003B37 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22300 00003B3B E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22301 00003B3D 01C8                    	ADD     AX,CX
 22302 00003B3F 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22303                                  
 22304                                  	;mov	bx,[es:bp+2]
 22305 00003B42 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22306                                  
 22307                                  	; MSDOS 3.3
 22308                                  	;cmp	dx,bx
 22309                                  	;jnb	short WRTERR33
 22310                                  	;div	bx
 22311                                  	;mov	bx,ax
 22312                                  	;OR	DX,DX
 22313                                  	;JNZ	short CALCLUS
 22314                                  	;dec	ax
 22315                                  ;CALCLUS:
 22316                                  	; MSDOS 3.3
 22317                                  	;mov	cl,[es:bp+5]
 22318                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22319                                  	;shr	ax,cl
 22320                                  	;push	ax
 22321                                  	;push	dx
 22322                                  	;push	es
 22323                                  	;les	di,[THISSFT]
 22324                                  	;;mov	ax,[es:di+11h]
 22325                                  	;;mov	dx,[es:di+13h]
 22326                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22327                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22328                                  	;pop	es
 22329                                  	;;DX:AX = current file size (in bytes).
 22330                                  	;;div	word [es:bp+2]
 22331                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22332                                  	;mov	cx,ax
 22333                                  	;or	dx,dx
 22334                                  	;jz	short NORND
 22335                                  	;inc	ax
 22336                                  ;NORND:
 22337                                  	; MSDOS 6.0
 22338 00003B46 E8DE02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22339 00003B49 89C6                    	MOV	SI,AX
 22340 00003B4B 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22341                                  
 22342                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22343                                  
 22344 00003B4F 09D2                    	OR	DX,DX
 22345 00003B51 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22346 00003B52 89CA                    	MOV	DX,CX			;M039
 22347 00003B54 7506                    	JNZ	short CALCLUS
 22348 00003B56 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22349 00003B59 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22350                                  
 22351                                  CALCLUS:
 22352                                  	; MSDOS 6.0
 22353 00003B5C E8EF02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22354 00003B5F 5A                      	POP	DX
 22355                                  
 22356                                  ;       AX = Last cluster to write.
 22357                                  ;       DX = # of bytes in last sector to write (the "tail").
 22358                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22359                                  
 22360 00003B60 50                      	PUSH	AX
 22361 00003B61 52                      	PUSH	DX
 22362                                  ;M039
 22363 00003B62 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22364 00003B66 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22365 00003B69 E8BB02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22366 00003B6C 890E[0E06]              	mov	[TEMP_VAR2],cx
 22367 00003B70 890E[CA05]              	mov	[VALSEC+2],cx
 22368 00003B74 89C1                    	mov	cx,ax
 22369 00003B76 89F3                    	mov	bx,si
 22370                                  
 22371                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22372                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22373                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22374                                  ;                     DX = # of bytes in last sector of current file.
 22375                                  ;M039
 22376 00003B78 09D2                    	OR	DX,DX
 22377 00003B7A 7408                    	JZ	short NORND
 22378 00003B7C 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 22379 00003B7F 8316[CA05]00            	ADC	word [VALSEC+2],0
 22380                                  NORND:	
 22381                                  	; MSDOS 3.3 & MSDOS 6.0
 22382 00003B84 A3[C805]                	MOV     [VALSEC],AX
 22383                                  
 22384                                  ;       [VALSEC] = Last sector of current file.
 22385                                  
 22386 00003B87 31C0                    	XOR     AX,AX
 22387 00003B89 A3[DE05]                	MOV     [GROWCNT],AX
 22388 00003B8C A3[E005]                	MOV     [GROWCNT+2],AX
 22389 00003B8F 58                      	POP     AX
 22390                                  
 22391                                  	; MSDOS 6.0
 22392 00003B90 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22393 00003B94 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22394 00003B98 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22395 00003B9A 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22396 00003B9C 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22397 00003B9E 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22398 00003BA2 EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22399                                  lowsec:
 22400 00003BA4 BF0000                  	MOV	DI,0			;F.C. >32mb
 22401                                  	; MSDOS 3.3 & MSDOS 6.0
 22402 00003BA7 29CB                    	SUB	BX,CX			; Number of full sectors
 22403 00003BA9 7253                    	JB	short NOGROW
 22404 00003BAB 7444                    	JZ	short TESTTAIL
 22405                                  yesgrow:
 22406                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22407 00003BAD 89D1                    	MOV     CX,DX
 22408 00003BAF 93                      	XCHG    AX,BX
 22409                                  	;mul	word [es:bp+2]
 22410 00003BB0 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22411                                  	
 22412                                  	; MSDOS 6.0
 22413 00003BB4 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22414 00003BB8 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22415 00003BBB 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22416                                  	;mul	word [es:bp+2]
 22417 00003BBD 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22418                                  	
 22419 00003BC1 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22420 00003BC5 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22421 00003BC7 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22422                                  
 22423                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22424 00003BCA 29C8                    	SUB     AX,CX			; Take off current "tail"
 22425 00003BCC 83DA00                  	SBB     DX,0			; 32-bit extension
 22426 00003BCF 01D8                    	ADD     AX,BX			; Add on new "tail"
 22427 00003BD1 83D200                  	ADC     DX,0			; ripple tim's head off
 22428 00003BD4 EB21                    	JMP     SHORT SETGRW
 22429                                  
 22430                                  HAVSTART:
 22431                                  	;int 3
 22432 00003BD6 89C1                    	MOV     CX,AX
 22433 00003BD8 E8AA11                  	call	SKPCLP
 22434                                  	;JCXZ	DOWRTJ
 22435                                  	; 16/12/2022
 22436 00003BDB E357                    	jcxz	DOWRT
 22437                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22438                                  	;jcxz	DOWRTJ
 22439                                  
 22440 00003BDD E85013                  	call	ALLOCATE
 22441                                  	;JNC	short DOWRTJ
 22442                                  	; 16/12/2022
 22443 00003BE0 7352                    	jnc	short DOWRT
 22444                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22445                                  	;jnc	short DOWRTJ
 22446                                  
 22447                                  	;entry   WRTERR
 22448                                  WRTERR:
 22449 00003BE2 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22450                                  
 22451                                  	;entry WRTERR22
 22452                                  WRTERR22:
 22453 00003BE4 A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22454                                  
 22455                                  	; 27/07/2018
 22456                                  WRTERR33:
 22457                                  	;MOV	CX,0			;No bytes transferred
 22458 00003BE7 31C9                    	XOR     CX,CX
 22459                                  					
 22460 00003BE9 C43E[9E05]              	LES     DI,[THISSFT]
 22461                                  	;CLC ; 19/05/2019
 22462                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22463                                  	; 16/12/2022
 22464                                  	;clc
 22465 00003BED C3                      	retn
 22466                                  
 22467                                  	; 16/12/2022
 22468                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22469                                  ;DOWRTJ:
 22470                                  	;JMP	short DOWRT
 22471                                  
 22472                                  ACC_ERRWJ:
 22473                                  	; 10/08/2018
 22474                                  	;JMP	SET_ACC_ERRW
 22475                                  	; 16/12/2022
 22476 00003BEE E9D3FD                  	jmp	SET_ACC_ERR_DS
 22477                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22478                                  	;jmp	SET_ACC_ERRW	
 22479                                  
 22480                                  TESTTAIL:
 22481 00003BF1 29D0                    	SUB     AX,DX
 22482 00003BF3 7609                    	JBE	short NOGROW
 22483 00003BF5 31D2                    	XOR     DX,DX
 22484                                  SETGRW:
 22485 00003BF7 A3[DE05]                	MOV	[GROWCNT],AX
 22486 00003BFA 8916[E005]              	MOV	[GROWCNT+2],DX
 22487                                  NOGROW:
 22488 00003BFE 58                      	POP     AX
 22489 00003BFF 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22490 00003C03 E85F11                  	call	FNDCLUS
 22491 00003C06 72E6                    	JC	short ACC_ERRWJ
 22492 00003C08 891E[BC05]              	MOV     [CLUSNUM],BX
 22493 00003C0C 8916[BA05]              	MOV     [LASTPOS],DX
 22494                                  
 22495 00003C10 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22496 00003C12 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22497 00003C14 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22498 00003C16 51                      	PUSH    CX              ; No. of clusters short of first
 22499 00003C17 89C1                    	MOV     CX,AX
 22500 00003C19 E81413                  	call	ALLOCATE
 22501 00003C1C 59                      	POP     CX
 22502 00003C1D 72C3                    	JC	short WRTERR
 22503 00003C1F 8B16[BA05]              	MOV     DX,[LASTPOS]
 22504 00003C23 42                      	INC     DX
 22505 00003C24 49                      	DEC     CX
 22506 00003C25 7405                    	JZ	short NOSKIP
 22507 00003C27 E85B11                  	call	SKPCLP
 22508 00003C2A 72C2                    	JC	short ACC_ERRWJ
 22509                                  NOSKIP:
 22510 00003C2C 891E[BC05]              	MOV     [CLUSNUM],BX
 22511 00003C30 8916[BA05]              	MOV     [LASTPOS],DX
 22512                                  DOWRT:
 22513 00003C34 833E[D205]00            	CMP     word [BYTCNT1],0
 22514 00003C39 7409                    	JZ	short WRTMID
 22515 00003C3B 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22516 00003C3F E8D211                  	call	BUFWRT
 22517 00003C42 72AA                    	JC	short ACC_ERRWJ
 22518                                  WRTMID:
 22519 00003C44 A1[D605]                	MOV     AX,[SECCNT]
 22520 00003C47 09C0                    	OR      AX,AX
 22521                                  	; 20/11/2022
 22522 00003C49 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22523 00003C4B 0106[C405]              	ADD     [SECPOS],AX
 22524                                  	; 19/05/2019
 22525                                  	; MSDOS 6.0
 22526 00003C4F 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22527 00003C54 E81D12                  	call	NEXTSEC
 22528                                  	; 16/12/2022
 22529 00003C57 7295                    	JC	short ACC_ERRWJ
 22530                                  	;JC	short SET_ACC_ERRW	;M039
 22531 00003C59 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22532 00003C5E 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22533 00003C62 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22534 00003C66 8B0E[D605]              	MOV     CX,[SECCNT]
 22535                                  WRTLP:
 22536 00003C6A E83812                  	call	OPTIMIZE
 22537 00003C6D 7248                    	JC	short SET_ACC_ERRW
 22538                                  	; 16/12/2022
 22539                                  	;JC	short ACC_ERRWJ
 22540                                  
 22541                                  ;M039
 22542                                  ;       DI = Next physical cluster.
 22543                                  ;       AX = # sectors remaining.
 22544                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22545                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22546                                  ;	     sectors, also termed an "Extent".)
 22547                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22548                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22549                                  ;
 22550                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22551                                  ;	are in Extent; they are being over-written.
 22552                                  
 22553 00003C6F 57                      	push    di
 22554 00003C70 50                      	push    ax
 22555                                  
 22556                                  	; MSDOS 3.3
 22557                                  	; IBMDOS.COM (1987) - Offset 4497h
 22558                                  	;push	dx
 22559                                  	;push	bx
 22560                                  	;mov	al,[es:bp]
 22561                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22562                                  	;mov	bx,cx
 22563                                  	;add	bx,dx	; (bx = Extent end)
 22564                                  
 22565                                  ;	DX = Extent start.
 22566                                  ;	BX = Extent end.
 22567                                  ;	AL = Drive #.
 22568                                  
 22569                                  	;call	SETVISIT
 22570                                  
 22571                                  ;wbufq1:
 22572                                  	;;or	byte [di+5],20h
 22573                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22574                                  	;;cmp	al,[di+4]	
 22575                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22576                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22577                                  	;;cmp	[di+6],dx
 22578                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22579                                  	;jb	short wbufq2
 22580                                  	;;cmp	[di+6],bx
 22581                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22582                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22583                                  
 22584                                  	;; Buffer sector is in the Extent
 22585                                  
 22586                                  	;;mov	word [di+4],20FFh
 22587                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22588                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22589                                  	;				; .buf_flags, AH = 0, reset/clear
 22590                                  	;call	SCANPLACE
 22591                                  ;wbufq2:
 22592                                  	;call	SKIPVISIT
 22593                                  	;jnz	short wbufq1
 22594                                  	;pop	bx
 22595                                  	;pop	dx
 22596                                  
 22597                                          ; MSDOS 6.0
 22598 00003C71 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22599                                  
 22600                                  ;ASSUME DS:NOTHING
 22601                                  ;M039
 22602                                  	; MSDOS 3.3 & MSDOS 6.0
 22603                                  ;hkn; SS override for DMAADD and ALLOWED
 22604 00003C74 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22605                                  	;mov	byte [ss:ALLOWED],38h
 22606 00003C79 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22607                                  
 22608                                  ;	put logic from DWRITE in-line here so we can modify it
 22609                                  ;	for DISK FULL conditions.
 22610                                  
 22611                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22612                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22613                                  
 22614                                  	; 16/12/2022
 22615                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22616                                  	;call	DWRITE
 22617                                  
 22618                                  ;DWRITE_OKAY:
 22619                                  
 22620                                  	; 16/12/2022
 22621                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22622                                  	;pop     cx
 22623                                  	;pop     bx
 22624                                  	;push    ss
 22625                                  	;pop     ds
 22626                                  	;jc      short SET_ACC_ERRW
 22627                                  	;jcxz    WRTLAST
 22628                                  	;mov     dl, 0
 22629                                  	;inc     word [LASTPOS]
 22630                                  	;jmp     short WRTLP
 22631                                  
 22632                                  	; 16/12/2022
 22633                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22634                                  DWRITE_LUP:
 22635                                  	; 23/07/2019 - Retro DOS v3.2
 22636                                  
 22637                                  	; MSDOS 6.0
 22638 00003C7F E8D7FB                  	call	DSKWRITE
 22639 00003C82 7417                    	jz	short DWRITE_OKAY
 22640                                  
 22641                                  ;;	int	3
 22642                                  
 22643 00003C84 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22644 00003C86 7423                    	jz	short DWRITE_DISK_FULL
 22645                                  
 22646                                  	; 16/12/2022
 22647                                  
 22648                                  ;;hkn; SS override
 22649 00003C88 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22650 00003C8E E8F7FB                  	call	HARDERRRW
 22651 00003C91 3C01                    	CMP	AL,1		; Check for retry
 22652 00003C93 74EA                    	JZ	short DWRITE_LUP
 22653                                  
 22654                                  	; 16/12/2022
 22655                                  	; 23/07/2019
 22656                                  	;POP	CX ; *4*
 22657                                  	;POP	BX ; *5*
 22658                                  	;
 22659                                  	;push	ss
 22660                                  	;pop	ds
 22661                                  	;
 22662                                  
 22663                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22664                                  
 22665                                  	; 16/12/2022
 22666 00003C95 3C03                    	CMP	AL,3		; Check for FAIL
 22667 00003C97 F8                      	CLC
 22668 00003C98 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22669 00003C9A F9                      	STC
 22670                                  
 22671                                  DWRITE_OKAY:
 22672                                  	; 16/12/2022
 22673                                  	; 23/07/2019
 22674                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22675 00003C9B 59                      	POP	CX ; *4*
 22676 00003C9C 5B                      	POP	BX ; *5*
 22677                                  
 22678                                  ;       CX = # sectors remaining.
 22679                                  ;       BX = Next physical cluster.
 22680                                  
 22681                                  ;hkn; SS override
 22682                                          ;Context DS
 22683                                  	; 16/12/2022
 22684                                  	;push	ss
 22685                                  	;pop	ds
 22686                                  
 22687                                  	; 16/12/2022
 22688 00003C9D 7218                    	jc	short SET_ACC_ERRW
 22689                                  
 22690                                  	; 16/12/2022
 22691 00003C9F 16                      	push	ss
 22692 00003CA0 1F                      	pop	ds
 22693                                  
 22694 00003CA1 E317                    	JCXZ    WRTLAST
 22695                                  
 22696                                  	;MOV	DL,0
 22697 00003CA3 30D2                    	xor	dl,dl ; 23/07/2019
 22698 00003CA5 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22699 00003CA9 EBBF                    	JMP     short WRTLP
 22700                                  
 22701                                  	; 23/07/2019 - Retro DOS v3.2
 22702                                  	; 09/08/2018
 22703                                  	; MSDOS 6.0
 22704                                  DWRITE_DISK_FULL:
 22705                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22706                                  	; 16/12/2022
 22707 00003CAB 16                      	push	ss
 22708 00003CAC 1F                      	pop	ds
 22709 00003CAD 59                      	pop	cx		; unjunk stack
 22710 00003CAE 5B                      	pop	bx
 22711 00003CAF C606[0B06]01            	mov	byte [DISK_FULL],1
 22712                                  	;stc
 22713 00003CB4 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22714                                  
 22715                                  	; 16/12/2022
 22716                                  SET_ACC_ERRW:
 22717 00003CB7 E90AFD                  	jmp	SET_ACC_ERR_DS
 22718                                  
 22719                                  WRTLAST:
 22720 00003CBA A1[D405]                	MOV     AX,[BYTCNT2]
 22721 00003CBD 09C0                    	OR      AX,AX
 22722 00003CBF 7413                    	JZ	short FINWRT
 22723 00003CC1 A3[D205]                	MOV     [BYTCNT1],AX
 22724 00003CC4 E8AD11                  	call	NEXTSEC
 22725 00003CC7 72EE                    	JC	short SET_ACC_ERRW
 22726 00003CC9 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22727 00003CCF E84211                  	call	BUFWRT
 22728 00003CD2 72E3                    	JC	short SET_ACC_ERRW
 22729                                  FINWRT:
 22730 00003CD4 C43E[9E05]              	LES     DI,[THISSFT]
 22731 00003CD8 A1[DE05]                	MOV     AX,[GROWCNT]
 22732 00003CDB 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22733 00003CDF 09C0                    	OR      AX,AX
 22734 00003CE1 7502                    	JNZ	short UPDATE_size
 22735 00003CE3 E30F                    	JCXZ    SAMSIZ
 22736                                  UPDATE_size:
 22737                                  	;add	[es:di+11h],ax
 22738 00003CE5 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22739                                  	;adc	[es:di+13h],cx
 22740 00003CE9 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22741                                  
 22742                                  ; Make sure that all other SFT's see this growth also.
 22743                                  
 22744 00003CED B80100                  	MOV     AX,1
 22745                                  ;if installed
 22746                                  	;Call	JShare + 14 * 4
 22747 00003CF0 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22748                                  ;else
 22749                                  ;	Call    ShSU
 22750                                  ;endif
 22751                                  
 22752                                  SAMSIZ:
 22753 00003CF4 E965FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22754                                  
 22755                                  	; 16/12/2022
 22756                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22757                                  ;SET_ACC_ERRW:
 22758                                  	;jmp	SET_ACC_ERR_DS
 22759                                  
 22760                                  WRTEOF:
 22761 00003CF7 89C1                    	MOV     CX,AX
 22762 00003CF9 09D1                    	OR      CX,DX
 22763 00003CFB 746C                    	JZ	short KILLFIL
 22764 00003CFD 83E801                  	SUB     AX,1
 22765 00003D00 83DA00                  	SBB     DX,0
 22766                                  
 22767                                  	; MSDOS 3.3
 22768                                  	;;div	word [es:bp+2]
 22769                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22770                                  	;;mov	cl,[es:bp+5]
 22771                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22772                                  	;shr	ax,cl
 22773                                  
 22774                                  	; MSDOS 6.0
 22775 00003D03 53                      	PUSH	BX
 22776                                  	;mov	bx,[es:bp+2]
 22777 00003D04 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22778 00003D08 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22779 00003D0B 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22780 00003D0C 89CA                    	MOV	DX,CX			      ;M039
 22781 00003D0E 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22782 00003D12 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22783                                  
 22784 00003D15 89C1                    	MOV     CX,AX
 22785 00003D17 E84B10                  	call	FNDCLUS
 22786                                  SET_ACC_ERRWJ2:
 22787 00003D1A 729B                    	JC	short SET_ACC_ERRW
 22788                                  
 22789 00003D1C E326                    	JCXZ    RELFILE
 22790 00003D1E E80F12                  	call	ALLOCATE
 22791                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22792                                  	; 16/12/2022
 22793 00003D21 7303                    	jnc	short UPDATE
 22794 00003D23 E9BCFE                  	JMP	WRTERR
 22795                                  UPDATE:
 22796 00003D26 C43E[9E05]              	LES	DI,[THISSFT]
 22797 00003D2A A1[CE05]                	MOV	AX,[BYTPOS]
 22798                                  	;mov	[es:di+11h],ax
 22799 00003D2D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22800 00003D31 A1[D005]                	MOV	AX,[BYTPOS+2]
 22801                                  	;mov	[es:di+13h],ax
 22802 00003D34 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22803                                  ;
 22804                                  ; Make sure that all other SFT's see this growth also.
 22805                                  ;
 22806 00003D38 B80200                  	MOV     AX,2
 22807                                  ;if installed
 22808                                  	;Call	JShare + 14 * 4
 22809 00003D3B FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22810                                  ;else
 22811                                  ;	Call    ShSU
 22812                                  ;endif
 22813 00003D3F 31C9                    	XOR     CX,CX
 22814 00003D41 E935FD                  	jmp	ADDREC
 22815                                  
 22816                                  	; 16/12/2022
 22817                                  ;WRTERRJ: 
 22818                                  	;JMP	WRTERR
 22819                                  
 22820                                  ;;;;;;;;;;;;;;;; 7/18/86
 22821                                  ;;;;;;;;;;;;;;;;
 22822                                  
 22823                                  RELFILE:
 22824                                  	; MSDOS 6.0
 22825 00003D44 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 22826 00003D45 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 22827                                  	;cmp	dx,[es:di+19h]
 22828 00003D49 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22829 00003D4D 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 22830                                  	;mov	[es:di+19h],0
 22831 00003D4F 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22832                                  	;mov	dx,[es:di+0Bh]
 22833 00003D55 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22834                                  	;mov	[es:di+35h],dx
 22835 00003D59 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22836                                  SKIPRESET:                            		;AN002; BL
 22837 00003D5D 07                      	POP     ES                    		;AN002; BL
 22838                                  ;
 22839 00003D5E BAFFFF                  	MOV     DX,0FFFFH
 22840 00003D61 E87A12                  	call	RELBLKS
 22841                                  	; 16/12/2022
 22842                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22843 00003D64 73C0                    	jnc	short UPDATE
 22844                                  SET_ACC_ERRWJ:
 22845                                  	;JC	short SET_ACC_ERRWJ2
 22846                                  	;JMP	SHORT UPDATE
 22847                                  	; 16/12/2022
 22848 00003D66 E95BFC                  	jmp	SET_ACC_ERR_DS
 22849                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22850                                  	;JC	short SET_ACC_ERRWJ2
 22851                                  	;JMP	SHORT UPDATE
 22852                                  
 22853                                  KILLFIL:
 22854 00003D69 31DB                    	XOR     BX,BX
 22855 00003D6B 06                      	PUSH    ES
 22856 00003D6C C43E[9E05]              	LES     DI,[THISSFT]
 22857                                  	;mov	[es:di+19h],bx
 22858 00003D70 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22859                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22860 00003D74 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22861                                  	;xchg	bx,[es:di+0Bh]
 22862 00003D78 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 22863 00003D7C 07                      	POP	ES
 22864                                  
 22865 00003D7D 09DB                    	OR	BX,BX
 22866                                  	;JZ	short UPDATEJ
 22867                                  	; 16/12/2022
 22868 00003D7F 74A5                    	jz	short UPDATE
 22869                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22870                                  	;jz	short UPDATEJ
 22871                                  
 22872                                  ;; 10/23/86 FastOpen update
 22873 00003D81 06                      	PUSH	ES              ; since first cluster # is 0
 22874 00003D82 55                      	PUSH	BP              ; we must delete the old cache entry
 22875 00003D83 50                      	PUSH	AX
 22876 00003D84 51                      	PUSH	CX
 22877 00003D85 52                      	PUSH	DX
 22878 00003D86 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 22879                                  	; 15/12/2022
 22880 00003D8A 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 22881                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22882                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 22883 00003D8E 89D9                    	MOV	CX,BX                    ; first cluster #
 22884 00003D90 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 22885 00003D92 E809EA                  	call	FastOpen_Update          ; call fastopen
 22886 00003D95 5A                      	POP	DX
 22887 00003D96 59                      	POP	CX
 22888 00003D97 58                      	POP	AX
 22889 00003D98 5D                      	POP	BP
 22890 00003D99 07                      	POP	ES
 22891                                  ;; 10/23/86 FastOpen update
 22892                                  
 22893 00003D9A E83F12                  	call	RELEASE
 22894 00003D9D 72C7                    	JC	short SET_ACC_ERRWJ
 22895                                  UPDATEJ:
 22896                                  	; 20/11/2022
 22897 00003D9F EB85                    	JMP	short UPDATE ; 10/08/2018
 22898                                  
 22899                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 22900                                  ;----------------------------------------------------------------------------
 22901                                  ;
 22902                                  ; Procedure Name : DskWrtBufPurge
 22903                                  ;
 22904                                  ; Inputs:
 22905                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22906                                  ;	     sectors, also termed an "Extent".)
 22907                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22908                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22909                                  ;
 22910                                  ; Function:
 22911                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22912                                  ;	are in Extent; they are being over-written.
 22913                                  ;
 22914                                  ; Outputs:
 22915                                  ;       (Same as Input.)
 22916                                  ; Uses:
 22917                                  ;       All registers except DS,AX,SI,DI preserved.
 22918                                  ;       SS override for all global variables.
 22919                                  ;----------------------------------------------------------------------------
 22920                                  ;M039: Created
 22921                                  
 22922                                  ;procedure   DskWrtBufPurge,NEAR
 22923                                  ;
 22924                                  ;ASSUME  DS:NOTHING
 22925                                  
 22926                                  ; 04/05/2019 - Retro DOS v4.0
 22927                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 22928                                  
 22929                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22930                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 22931                                  
 22932                                  DskWrtBufPurge:
 22933                                  	;SaveReg <bx,cx>
 22934 00003DA1 53                      	push	bx
 22935 00003DA2 51                      	push	cx
 22936                                  
 22937 00003DA3 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 22938 00003DA8 89DE                    	mov	si,bx
 22939 00003DAA 01D1                    	add	cx,dx
 22940 00003DAC 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 22941                                  
 22942                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22943                                  	;;mov	al,[es:bp+0]
 22944                                  	;mov	al,[es:bp+DPB.DRIVE]
 22945                                  	; 15/12/2022
 22946 00003DAF 268A4600                	mov	al,[es:bp]
 22947                                  
 22948                                  ;	BX:DX = Extent start.
 22949                                  ;	SI:CX = Extent end + 1.
 22950                                  ;	AL = Drive #
 22951                                  
 22952 00003DB3 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 22953 00003DB9 7431                    	je	short nosc		; -no, jump.
 22954                                  
 22955                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 22956                                  ;	invalidate the entire SC. (This is an optimization; we really only
 22957                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 22958                                  
 22959 00003DBB 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 22960 00003DC0 752A                    	jne	short nosc		; -no, jump.
 22961                                  
 22962 00003DC2 50                      	push    ax
 22963 00003DC3 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 22964 00003DC7 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 22965                                  
 22966                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 22967                                  	;jbe	short sc5		; -yes, jump.
 22968                                  
 22969 00003DCC 39FE                    	cmp	si,di
 22970 00003DCE 7502                    	jne	short sc01
 22971 00003DD0 39C1                    	cmp	cx,ax
 22972                                  sc01: 
 22973 00003DD2 7617                    	jbe	short sc5	
 22974                                  
 22975 00003DD4 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 22976 00003DD9 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 22977                                  	
 22978                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 22979                                  	;jae	short sc5		; -yes, jump.
 22980                                  
 22981 00003DDC 39FB                    	cmp	bx,di
 22982 00003DDE 7502                    	jne	short sc02
 22983 00003DE0 39C2                    	cmp	dx,ax
 22984                                  sc02:
 22985 00003DE2 7307                    	jnb	short sc5
 22986                                  
 22987 00003DE4 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 22988                                  sc5:	
 22989 00003DEB 58                      	pop     ax
 22990                                  
 22991                                  ;	Free any buffered sectors which are in Extent; they are being over-
 22992                                  ;	written.
 22993                                  
 22994                                  nosc:	
 22995 00003DEC E82E1C                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 22996                                  
 22997                                  _bufq:	
 22998                                  	;cmpo	al,[di+4]
 22999 00003DEF 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23000 00003DF2 7527                    	jne	short bufq5		; -no, jump.
 23001                                  
 23002                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23003                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23004                                  
 23005                                  	;cmp	bx,[di+8]
 23006 00003DF4 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23007 00003DF7 7503                    	jne	short bufq04
 23008                                  	;cmp	dx,[di+6]
 23009 00003DF9 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23010                                  bufq04:
 23011 00003DFC 771D                    	ja	short bufq5
 23012                                  
 23013                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23014                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23015                                  
 23016                                  	;cmp	si,[di+8]
 23017 00003DFE 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23018 00003E01 7503                    	jne	short bufq05
 23019                                  	;cmp	cx,[di+6]
 23020 00003E03 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23021                                  bufq05:
 23022 00003E06 7613                    	jbe	short bufq5
 23023                                  
 23024                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23025                                  
 23026                                  	;test	byte [di+5],40h
 23027 00003E08 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23028 00003E0C 7403                    	jz	short bufq4		; -no, jump.
 23029 00003E0E E87D1E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23030                                  bufq4:
 23031                                  	;mov	word [di+4],20FFh
 23032 00003E11 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23033                                  
 23034 00003E16 E8161C                  	call	SCANPLACE
 23035 00003E19 EB02                    	jmp     short bufq6
 23036                                  bufq5: 
 23037 00003E1B 8B3D                    	mov     di,[di]
 23038                                  	;mov	di,[di+BUFFINFO.buf_next]
 23039                                  bufq6: 
 23040 00003E1D 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23041 00003E22 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23042                                  	
 23043                                  	;RestoreReg <cx,bx>
 23044 00003E24 59                      	pop	cx
 23045 00003E25 5B                      	pop	bx
 23046 00003E26 C3                      	retn
 23047                                  
 23048                                  ;EndProc DskWrtBufPurge
 23049                                  
 23050                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23051                                  ;----------------------------------------------------------------------------
 23052                                  ;
 23053                                  ; Procedure Name : DIV32
 23054                                  ;
 23055                                  ; Inputs:
 23056                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23057                                  ; Function:
 23058                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23059                                  ; Outputs:
 23060                                  ;       CX:AX = quotient , DX= remainder
 23061                                  ; Uses:
 23062                                  ;       All registers except AX,CX,DX preserved.
 23063                                  ;----------------------------------------------------------------------------
 23064                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23065                                  
 23066                                  ; 04/05/2019 - Retro DOS v4.0
 23067                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23068                                  
 23069                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23070                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23071                                  
 23072                                  DIV32:
 23073 00003E27 81FB0002                	cmp	bx,512
 23074 00003E2B 7515                    	jne	short div5
 23075                                  
 23076 00003E2D 89D1                    	mov	cx,dx
 23077 00003E2F 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23078 00003E31 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23079 00003E35 88E0                    	mov	al,ah
 23080 00003E37 88CC                    	mov	ah,cl
 23081 00003E39 88E9                    	mov	cl,ch
 23082 00003E3B 30ED                    	xor	ch,ch
 23083 00003E3D D1E9                    	shr	cx,1
 23084 00003E3F D1D8                    	rcr	ax,1
 23085 00003E41 C3                      	retn
 23086                                  div5:	
 23087 00003E42 89C1                    	mov	cx,ax
 23088 00003E44 89D0                    	mov	ax,dx
 23089 00003E46 31D2                    	xor	dx,dx
 23090 00003E48 F7F3                    	div	bx              ; 0:AX/BX
 23091 00003E4A 91                      	xchg	cx,ax
 23092 00003E4B F7F3                    	div	bx              ; DX:AX/BX
 23093 00003E4D C3                      	retn
 23094                                  
 23095                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23096                                  ;----------------------------------------------------------------------------
 23097                                  ;
 23098                                  ; Procedure Name : SHR32
 23099                                  ;
 23100                                  ; Inputs:
 23101                                  ;	DX:AX = 32 bit sector number
 23102                                  ; Function:
 23103                                  ;       Perform 32 bit shift right
 23104                                  ; Outputs:
 23105                                  ;	AX = cluster number
 23106                                  ;	ZF = 1 if no error
 23107                                  ;	   = 0 if error (cluster number > 64k)
 23108                                  ; Uses:
 23109                                  ;       DX,CX
 23110                                  ;---------------------------------------------------------------------------
 23111                                  ; M017	- SHR32 rewritten for better performance
 23112                                  ; M039	- Additional optimization
 23113                                  
 23114                                  ; 04/05/2019 - Retro DOS v4.0
 23115                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23116                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23117                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23118                                  
 23119                                  SHR32:
 23120                                  	;mov	cl,[es:bp+5]
 23121 00003E4E 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23122 00003E52 30ED                    	xor	ch,ch	    ;ZF=1
 23123 00003E54 E306                    	jcxz	norota
 23124                                  
 23125                                  rotashft2:
 23126 00003E56 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23127 00003E58 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23128 00003E5A E2FA                    	loop	rotashft2
 23129                                  norota:
 23130 00003E5C C3                      	retn
 23131                                  
 23132                                  ;============================================================================
 23133                                  ; DIR.ASM, MSDOS 6.0, 1991
 23134                                  ;============================================================================
 23135                                  ; 27/07/2018 - Retro DOS v3.0
 23136                                  ; 19/05/2019 - Retro DOS v4.0 
 23137                                  
 23138                                  ;	TITLE	DIR - Directory and path cracking
 23139                                  ;	NAME	Dir
 23140                                  
 23141                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23142                                  ;---------------------------------------------------------------------------
 23143                                  ;
 23144                                  ; Procedure Name : FINDENTRY,SEARCH
 23145                                  ;
 23146                                  ; Inputs:
 23147                                  ;	[THISDPB] set
 23148                                  ;	[SECCLUSPOS] = 0
 23149                                  ;	[DIRSEC] = Starting directory sector number
 23150                                  ;	[CLUSNUM] = Next cluster of directory
 23151                                  ;	[CLUSFAC] = Sectors/Cluster
 23152                                  ;	[NAME1] = Name to look for
 23153                                  ; Function:
 23154                                  ;	Find file name in disk directory.
 23155                                  ;	"?" matches any character.
 23156                                  ; Outputs:
 23157                                  ;	Carry set if name not found
 23158                                  ;	ELSE
 23159                                  ;	Zero set if attributes match (always except when creating)
 23160                                  ;	AH = Device ID (bit 7 set if not disk)
 23161                                  ;	[THISDPB] = Base of drive parameters
 23162                                  ;	DS = DOSGROUP
 23163                                  ;	ES = DOSGROUP
 23164                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23165                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23166                                  ;	[CURBUF] has directory record with match
 23167                                  ;	[NAME1] has file name
 23168                                  ;	[LASTENT] is entry number of the entry
 23169                                  ; All other registers destroyed.
 23170                                  ;----------------------------------------------------------------------------
 23171                                  
 23172                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23173                                  ;hkn; this point.
 23174                                  
 23175                                  SEARCH:
 23176                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23177                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23178                                  
 23179                                  	; 19/05/2019 - Retro DOS v4.0
 23180                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23181                                  
 23182                                  	; 27/07/2018 - Retro DOS v3.0
 23183                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23184                                  	; 15/03/2018 - Retro DOS v2.0
 23185                                  
 23186                                  	;entry	FindEntry
 23187                                  FINDENTRY:
 23188 00003E5D E84804                  	call	STARTSRCH
 23189 00003E60 A0[6B05]                	MOV	AL,[ATTRIB]
 23190                                  	;and	al,9Eh
 23191 00003E63 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23192                                  	;cmp	al,8
 23193 00003E65 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23194 00003E67 7503                    	JNZ	short NOTVOLSRCH	; No
 23195 00003E69 E87501                  	CALL	SETROOTSRCH		; Yes force search of root
 23196                                  NOTVOLSRCH:
 23197 00003E6C E80601                  	CALL	GETENTRY
 23198 00003E6F 7303                    	JNC	short SRCH
 23199 00003E71 E99500                  	JMP	SETESRET
 23200                                  
 23201                                  	;entry	Srch
 23202                                  SRCH:
 23203 00003E74 1E                      	PUSH	DS
 23204 00003E75 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23205                                  
 23206                                  ;	(DS:BX) = directory entry address
 23207                                  
 23208 00003E79 8A27                    	mov	ah,[BX]
 23209                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23210 00003E7B 08E4                    	OR	AH,AH			; End of directory?
 23211 00003E7D 743A                    	JZ	short FREE
 23212                                  
 23213                                  ;hkn; SS override
 23214 00003E7F 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23215 00003E84 7433                    	JZ	short FREE
 23216                                  	;test	byte [bx+0Bh],8
 23217 00003E86 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23218                                  					; Volume ID file?
 23219 00003E8A 7405                    	JZ	short CHKFNAM 		; NO
 23220                                  
 23221                                  ;hkn; SS override
 23222 00003E8C 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23223                                  CHKFNAM:
 23224                                  ;	Context ES
 23225 00003E91 8CD6                    	MOV	SI,SS
 23226 00003E93 8EC6                    	MOV	ES,SI
 23227 00003E95 89DE                    	MOV	SI,BX
 23228                                  
 23229                                  ;hkn; NAME1 is in DOSDATA
 23230 00003E97 BF[4B05]                	MOV	DI,NAME1
 23231                                  ;;;;; 7/29/86
 23232                                  
 23233                                  ;hkn; SS override for NAME1
 23234 00003E9A 36803E[4B05]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 23235 00003EA0 7506                    	JNZ	short NO_E5
 23236 00003EA2 36C606[4B05]05          	MOV	BYTE [SS:NAME1],05H
 23237                                  NO_E5:
 23238                                  ;;;;; 7/29/86
 23239 00003EA8 E86100                  	CALL	MetaCompare
 23240 00003EAB 7428                    	JZ	short FOUND
 23241 00003EAD 1F                      	POP	DS
 23242                                  
 23243                                  	;entry	NEXTENT
 23244                                  NEXTENT:
 23245 00003EAE C42E[8A05]              	LES	BP,[THISDPB]
 23246 00003EB2 E86600                  	CALL	NEXTENTRY
 23247 00003EB5 73BD                    	JNC	short SRCH
 23248 00003EB7 EB50                    	JMP	SHORT SETESRET
 23249                                  
 23250                                  FREE:
 23251 00003EB9 1F                      	POP	DS
 23252 00003EBA 8B0E[4803]              	MOV	CX,[LASTENT]
 23253 00003EBE 3B0E[D805]              	CMP	CX,[ENTFREE]
 23254 00003EC2 7304                    	JAE	short TSTALL
 23255 00003EC4 890E[D805]              	MOV	[ENTFREE],CX
 23256                                  TSTALL:
 23257 00003EC8 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23258                                  NEXTENTJ:
 23259 00003ECC 74E0                    	je	short NEXTENT 		; No - continue search
 23260 00003ECE 890E[DA05]              	MOV	[ENTLAST],CX
 23261 00003ED2 F9                      	STC
 23262 00003ED3 EB34                    	JMP	SHORT SETESRET
 23263                                  
 23264                                  FOUND:
 23265                                  ; We have a file with a matching name. We must now consider the attributes:
 23266                                  ; ATTRIB	Action
 23267                                  ; ------	------
 23268                                  ; Volume_ID	Is Volume_ID in test?
 23269                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23270                                  ;		If create then Is ATTRIB equal to test?
 23271                                  
 23272 00003ED5 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23273 00003ED7 1F                      	POP	DS
 23274 00003ED8 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23275                                  	;and	ah,9Eh
 23276 00003EDC 80E4DE                  	AND	AH,~attr_ignore
 23277                                  	;lea	si,[si+15]
 23278 00003EDF 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23279                                  					; point to first cluster field
 23280                                  	;test	ch,8
 23281 00003EE2 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23282 00003EE5 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23283                                  	;test	ah,8
 23284 00003EE7 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23285                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23286                                  	; 16/12/2022
 23287 00003EEA 74C2                    	jz	short NEXTENT ; 19/05/2019
 23288                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23289                                  	;JZ	short NEXTENTJ
 23290 00003EEC 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23291 00003EEE EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23292                                  check_one_volume_id:
 23293                                  	;CMP	ah,8
 23294 00003EF0 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23295                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23296                                  	; 16/12/2022
 23297 00003EF3 74B9                    	je	short NEXTENT ; 19/05/2019
 23298                                  	;JZ	short NEXTENTJ
 23299 00003EF5 E8C403                  	CALL	MatchAttributes
 23300 00003EF8 7407                    	JZ	SHORT RETFF
 23301 00003EFA F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23302                                  	; 16/12/2022
 23303                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23304 00003EFF 74AD                    	jz	short NEXTENT ; 19/05/2019
 23305                                  RETFF:
 23306 00003F01 C42E[8A05]              	LES	BP,[THISDPB]
 23307                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23308                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23309                                  	; 15/12/2022
 23310 00003F05 268A6600                	MOV	AH,[ES:BP]
 23311                                  SETESRET:
 23312 00003F09 16                      	PUSH	SS
 23313 00003F0A 07                      	POP	ES
 23314 00003F0B C3                      	retn
 23315                                  
 23316                                  ;----------------------------------------------------------------------------
 23317                                  ;
 23318                                  ; Procedure Name : MetaCompare
 23319                                  ;
 23320                                  ; Inputs:
 23321                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23322                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 23323                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23324                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 23325                                  ; Function:
 23326                                  ;	Compare FCB style names allowing for ? match to any char
 23327                                  ; Outputs:
 23328                                  ;	Zero if match else NZ
 23329                                  ; Destroys CX,SI,DI all others preserved
 23330                                  ;----------------------------------------------------------------------------
 23331                                  
 23332                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23333                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23334                                  
 23335                                  MetaCompare:
 23336 00003F0C B90B00                  	MOV	CX,11
 23337                                  WILDCRD:
 23338 00003F0F F3A6                    	REPE	CMPSB
 23339 00003F11 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23340                                  CHECK_META:
 23341 00003F13 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23342 00003F18 74F5                    	JZ	short WILDCRD
 23343                                  MetaRet:
 23344 00003F1A C3                       	retn				; Zero set, Match
 23345                                  
 23346                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23347                                  ;----------------------------------------------------------------------------
 23348                                  ;
 23349                                  ; Procedure Name : NEXTENTRY
 23350                                  ;
 23351                                  ; Inputs:
 23352                                  ;	Same as outputs of GETENTRY, above
 23353                                  ; Function:
 23354                                  ;	Update BX, and [LASTENT] for next directory entry.
 23355                                  ;	Carry set if no more.
 23356                                  ;----------------------------------------------------------------------------
 23357                                  
 23358                                  NEXTENTRY:
 23359                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23360                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23361                                  
 23362                                  	; 19/05/2019 - Retro DOS v4.0
 23363                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23364                                  
 23365                                  	; 27/07/2018 - Retro DOS v3.0
 23366                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23367                                  	; 15/03/2018 - Retro DOS v2.0
 23368                                  
 23369 00003F1B A1[4803]                	MOV	AX,[LASTENT]
 23370 00003F1E 3B06[DA05]              	CMP	AX,[ENTLAST]
 23371 00003F22 7422                    	JZ	short NONE
 23372 00003F24 40                      	INC	AX
 23373                                  	;ADD	BX,32
 23374 00003F25 8D5F20                  	LEA	BX,[BX+32]
 23375 00003F28 39D3                    	CMP	BX,DX
 23376                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23377                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23378                                  	; 16/12/2022
 23379 00003F2A 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23380 00003F2C 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23381 00003F30 FEC3                    	INC	BL
 23382 00003F32 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23383 00003F36 7215                    	JB	short SAMECLUS
 23384 00003F38 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23385 00003F3C E80A17                  	call	IsEOF
 23386 00003F3F 7305                    	JAE	short NONE
 23387                                  	; 23/07/2019
 23388 00003F41 83FB02                  	CMP	BX,2
 23389                                  	;JB	short NONE
 23390                                  	;JMP	short GETENT
 23391                                  	; 16/12/2022
 23392 00003F44 7332                    	jnb	short GETENT
 23393                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23394                                  	;JB	short NONE
 23395                                  	;JMP	short GETENT
 23396                                  NONE:
 23397 00003F46 F9                      	STC
 23398 00003F47 C3                      	retn
 23399                                  HAVIT:
 23400 00003F48 A3[4803]                	MOV	[LASTENT],AX
 23401 00003F4B F8                      	CLC
 23402                                  nextentry_retn:
 23403 00003F4C C3                      	retn
 23404                                  SAMECLUS:
 23405 00003F4D 881E[7305]              	MOV	[SECCLUSPOS],BL
 23406 00003F51 A3[4803]                	MOV	[LASTENT],AX
 23407 00003F54 1E                      	PUSH	DS
 23408 00003F55 C53E[E205]              	LDS	DI,[CURBUF]
 23409                                  	; 19/05/2019
 23410                                  	; MSDOS 6.0
 23411                                  	;mov	dx,[di+8]
 23412 00003F59 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23413                                  ;hkn; SS override
 23414 00003F5C 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23415                                  	;mov	dx,[di+6]
 23416 00003F61 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23417                                  	;inc	dx ; MSDOS 3.3
 23418                                  	; MSDOS 6.0
 23419 00003F64 83C201                  	ADD	DX,1				;AN000; >32mb
 23420 00003F67 368316[0706]00          	ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23421                                  	; MSDOS 3.3 & MSDOS 6.0
 23422 00003F6D 1F                      	POP	DS
 23423 00003F6E E82AF8                  	call	FIRSTCLUSTER
 23424 00003F71 31DB                    	XOR	BX,BX
 23425 00003F73 EB23                    	JMP	short SETENTRY
 23426                                  
 23427                                  ;----------------------------------------------------------------------------
 23428                                  ;
 23429                                  ; Procedure Name : GETENTRY
 23430                                  ;
 23431                                  ; Inputs:
 23432                                  ;	[LASTENT] has directory entry
 23433                                  ;	ES:BP points to drive parameters
 23434                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23435                                  ; Function:
 23436                                  ;	Locates directory entry in preparation for search
 23437                                  ;	GETENT provides entry for passing desired entry in AX
 23438                                  ; Outputs:
 23439                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23440                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23441                                  ;	[LASTENT] = New directory entry number
 23442                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23443                                  ;	Carry set if error (currently user FAILed to I 24)
 23444                                  ;----------------------------------------------------------------------------
 23445                                  
 23446                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23447                                  GETENTRY:
 23448                                  	; 27/07/2018 - Retro DOS v3.0
 23449 00003F75 A1[4803]                	MOV	AX,[LASTENT]
 23450                                  
 23451                                  	;entry	GETENT
 23452                                  GETENT:
 23453 00003F78 A3[4803]                	MOV	[LASTENT],AX
 23454                                  ;
 23455                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23456                                  ; directory.
 23457                                  ;
 23458 00003F7B B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23459 00003F7D D3C0                    	rol	ax,cl			; keep hight order bits
 23460 00003F7F 89C2                    	mov	dx,ax
 23461                                  	; 19/05/2019 - Retro DOS v4.0
 23462                                  	;and	ax,0FFE0h
 23463                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23464                                  	;and	ax,~(32-1)		; mask off high order bits
 23465                                  	; 16/12/2022
 23466 00003F81 24E0                    	and	al,0E0h ; ~31
 23467 00003F83 83E21F                  	and	dx,1Fh
 23468                                  	;and	dx,32-1			; mask off low order bits
 23469                                  ;
 23470                                  ; DX:AX contain the byte offset of the required directory entry from the
 23471                                  ; beginning of the directory. Convert this to a sector number. Round the
 23472                                  ; sector size down to a multiple of 32.
 23473                                  ;
 23474                                  	;mov	bx,[es:bp+2]
 23475 00003F86 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23476 00003F8A 80E3E0                  	and	bl,0E0h
 23477                                  	;AND	BL,255-31		; Must be multiple of 32
 23478 00003F8D F7F3                    	DIV	BX
 23479 00003F8F 89D3                    	MOV	BX,DX			; Position within sector
 23480 00003F91 53                      	PUSH	BX
 23481 00003F92 E8ADF7                  	call	DIRREAD
 23482 00003F95 5B                      	POP	BX
 23483                                  	;retc
 23484 00003F96 72B4                    	jc	short nextentry_retn	
 23485                                  SETENTRY:
 23486 00003F98 8B16[E205]              	MOV	DX,[CURBUF]
 23487                                  	;add	dx,16 ; MSDOS 3.3
 23488                                  	;add	dx,20 ; MSDOS 6.0 
 23489 00003F9C 83C214                  	ADD	DX,BUFINSIZ
 23490 00003F9F 01D3                    	ADD	BX,DX
 23491                                  	;add	dx,[es:bp+2]
 23492 00003FA1 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23493 00003FA5 C3                      	retn
 23494                                  
 23495                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23496                                  ;----------------------------------------------------------------------------
 23497                                  ;
 23498                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23499                                  ;
 23500                                  ; Inputs:
 23501                                  ;	BX cluster number of start of directory
 23502                                  ;	ES:BP Points to DPB
 23503                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23504                                  ; Function:
 23505                                  ;	Set up a directory search
 23506                                  ; Outputs:
 23507                                  ;	[DIRSTART] = BX
 23508                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23509                                  ;	Carry set if error (currently user FAILed to I 24)
 23510                                  ; destroys AX,DX,BX
 23511                                  ;----------------------------------------------------------------------------
 23512                                  
 23513                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23514                                  SETDIRSRCH:
 23515 00003FA6 09DB                    	OR	BX,BX
 23516 00003FA8 7437                    	JZ	short SETROOTSRCH
 23517 00003FAA 891E[C205]              	MOV	[DIRSTART],BX
 23518                                  	;mov	al,[es:bp+4]
 23519 00003FAE 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23520 00003FB2 FEC0                    	INC	AL
 23521 00003FB4 A2[7705]                	MOV	[CLUSFAC],AL
 23522                                  
 23523                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23524                                  	;SAVE	<SI>
 23525 00003FB7 56                      	push	si
 23526                                  	;test	byte [FastOpenFlg],2
 23527 00003FB8 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23528 00003FBD 7507                    	JNZ	short UNP_OK
 23529                                  
 23530                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23531                                  	;invoke	UNPACK
 23532 00003FBF E89E16                  	call	UNPACK
 23533 00003FC2 7302                    	JNC	short UNP_OK
 23534                                  	;RESTORE <SI>
 23535 00003FC4 5E                      	pop	si
 23536                                  	;return
 23537 00003FC5 C3                      	retn
 23538                                  
 23539                                  UNP_OK:
 23540 00003FC6 893E[BC05]              	MOV	[CLUSNUM],DI
 23541 00003FCA 89DA                    	MOV	DX,BX
 23542 00003FCC 30DB                    	XOR	BL,BL
 23543 00003FCE 881E[7305]              	MOV	[SECCLUSPOS],BL
 23544                                  	;invoke	FIGREC
 23545 00003FD2 E82F0F                  	call	FIGREC
 23546                                  	;RESTORE <SI>
 23547 00003FD5 5E                      	pop	si
 23548                                  	
 23549                                  	; 19/05/2019 - Retro DOS v4.0
 23550                                  
 23551                                  	; MSDOS 6.0
 23552                                  	;PUSH	DX			   ;AN000; >32mb
 23553                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23554                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23555                                  	;POP	DX			   ;AN000; >32mb
 23556                                  
 23557                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23558                                  	;push	dx
 23559                                  	;mov	dx,[HIGH_SECTOR]
 23560                                  	;mov	[DIRSEC+2],dx
 23561                                  	;pop	dx
 23562                                  	;MOV	[DIRSEC],dx
 23563                                  	; 16/12/2022
 23564 00003FD6 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23565 00003FD9 A3[C005]                	mov	[DIRSEC+2],AX
 23566 00003FDC 8916[BE05]              	MOV	[DIRSEC],DX
 23567                                  
 23568                                  	; 16/12/2022
 23569                                  	; cf=0 (at the return of FIGREC)
 23570                                  	;CLC
 23571 00003FE0 C3                      	retn
 23572                                  
 23573                                  	;entry	SETROOTSRCH
 23574                                  SETROOTSRCH:
 23575 00003FE1 31C0                    	XOR	AX,AX
 23576 00003FE3 A3[C205]                	MOV	[DIRSTART],AX
 23577 00003FE6 A2[7305]                	MOV	[SECCLUSPOS],AL
 23578 00003FE9 48                      	DEC	AX
 23579 00003FEA A3[BC05]                	MOV	[CLUSNUM],AX
 23580                                  	;mov	ax,[es:bp+0Bh]
 23581 00003FED 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23582                                  	; 19/05/2019
 23583                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23584                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23585 00003FF1 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23586 00003FF5 29D0                    	SUB	AX,DX
 23587 00003FF7 A2[7705]                	MOV	[CLUSFAC],AL
 23588 00003FFA 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23589                                  	; MSDOS 6.0
 23590 00003FFE C706[C005]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23591 00004004 F8                      	CLC
 23592 00004005 C3                      	retn
 23593                                  
 23594                                  ;============================================================================
 23595                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23596                                  ;============================================================================
 23597                                  ; 27/07/2018 - Retro DOS v3.0
 23598                                  ; 19/05/2019 - Retro DOS v4.0 
 23599                                  
 23600                                  ;	TITLE	DIR2 - Directory and path cracking
 23601                                  ;	NAME	Dir2
 23602                                  
 23603                                  ;Break	<GETPATH -- PARSE A WFP>
 23604                                  ;----------------------------------------------------------------------------
 23605                                  ;
 23606                                  ; Procedure Name : GETPATH
 23607                                  ;
 23608                                  ; Inputs:
 23609                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23610                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23611                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23612                                  ;		( = -1 if current dir not involved, else
 23613                                  ;		 Points to first char after last "/" of current dir part)
 23614                                  ;	[THISCDS] Points to CDS being used
 23615                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23616                                  ;	[NoSetDir] set
 23617                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23618                                  ; Function:
 23619                                  ;	Crack the path
 23620                                  ; Outputs:
 23621                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23622                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23623                                  ;	ID1 field of [THISCDS] updated appropriately
 23624                                  ;	[ATTRIB] = [SATTRIB]
 23625                                  ;	ES:BP Points to DPB
 23626                                  ;	Carry set if bad path
 23627                                  ;	   SI Points to path element causing failure
 23628                                  ;	   Zero set
 23629                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23630                                  ;	      start a search on the last directory
 23631                                  ;	      CL is zero if there is a bad name in the path
 23632                                  ;	      CL is non-zero if the name was simply not found
 23633                                  ;		 [ENTFREE] may have free spot in directory
 23634                                  ;		 [NAME1] is the name.
 23635                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23636                                  ;	   Zero reset
 23637                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23638                                  ;		or path too long or malformed path
 23639                                  ;	ELSE
 23640                                  ;	   [CurBuf] = -1 if root directory
 23641                                  ;	   [CURBUF] contains directory record with match
 23642                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23643                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23644                                  ;	   AH = device ID
 23645                                  ;	      bit 7 of AH set if device SI and BX
 23646                                  ;	      will point DOSGROUP relative The firclus
 23647                                  ;	      field of the device entry contains the device pointer
 23648                                  ;	   [NAME1] Has name looked for
 23649                                  ;	   If last element is a directory zero is set and:
 23650                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23651                                  ;	      are set up to start a search on it.
 23652                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23653                                  ;	      like that for a file (except for zero flag)
 23654                                  ;	   If last element is a file zero is reset
 23655                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23656                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23657                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23658                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23659                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23660                                  ; DS preserved, Others destroyed
 23661                                  ;---------------------------------------------------------------------------
 23662                                  
 23663                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23664                                  ;hkn; DS already set up at this point.
 23665                                  
 23666                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23667                                  GETPATH:
 23668                                  	;mov	word [CREATING],0E500h
 23669 00004006 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23670                                  
 23671                                  ; Same as GetPath only CREATING and DELALL already set
 23672                                  
 23673                                  	;entry	GetPathNoSet
 23674                                  GetPathNoSet:
 23675                                  	;mov	byte [EXTERR_LOCUS],2	
 23676 0000400C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23677 00004011 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23678                                  
 23679                                  ; See if the input indicates a device that has already been detected. If so,
 23680                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23681                                  
 23682 00004017 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23683                                  	;cmp	word [DI+1],5C3Ah
 23684                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23685 0000401B 817D013A5C              	cmp	word [DI+1],':\'
 23686 00004020 7438                    	JZ	short CrackIt
 23687                                  
 23688                                  ; Let ChkDev find it in the device list
 23689                                  
 23690 00004022 83C703                  	ADD	DI,3
 23691                                  	; 18/08/2018
 23692                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23693                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23694                                  	; 16/12/2022
 23695                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23696 00004025 E8B000                  	CALL	CHKDEV
 23697 00004028 722E                    	JC	short InternalError
 23698                                  
 23699                                  Build_devJ:
 23700 0000402A A0[6D05]                	MOV	AL,[SATTRIB]
 23701 0000402D A2[6B05]                	MOV	[ATTRIB],AL
 23702                                  	;mov	byte [EXTERR_LOCUS],1
 23703 00004030 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23704                                  					; "finding" a char device
 23705                                  					; set LOCUS to Unknown. This makes
 23706                                  					; certain idiotic problems reported
 23707                                  					; by a certain 3 letter OEM go away.
 23708                                  
 23709                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23710                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23711                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23712                                  ; wfp into the share set.
 23713                                  ;
 23714                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23715                                  ; non-space seen +1.  This position is kept in DX.
 23716                                  
 23717                                  ;hkn; SS is DOSDATA
 23718 00004035 16                      	push	ss
 23719 00004036 07                      	pop	es
 23720                                  
 23721                                  ;hkn; NAME1 is in DOSDATA
 23722 00004037 BE[4B05]                	mov	si,NAME1
 23723 0000403A 8B3E[B205]              	mov	di,[WFP_START]
 23724 0000403E 89FA                    	mov	dx,di
 23725 00004040 B90800                  	mov	cx,8			; 8 chars in device name
 23726                                  MoveLoop:
 23727 00004043 AC                      	lodsb
 23728 00004044 AA                      	stosb
 23729 00004045 3C20                    	cmp	al," "
 23730 00004047 7402                    	jz	short NoSave
 23731                                  
 23732 00004049 89FA                    	mov	dx,di
 23733                                  NoSave:
 23734 0000404B E2F6                    	loop	MoveLoop
 23735                                  
 23736                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23737                                  ; at this point.
 23738                                  
 23739 0000404D 89D7                    	mov	di,dx
 23740 0000404F C60500                  	mov	byte [di],0		; end of string
 23741 00004052 E8D302                  	call	Build_device_ent	; Clears carry sets zero
 23742 00004055 FEC0                    	INC	AL			; reset zero
 23743 00004057 C3                      	retn
 23744                                  
 23745                                  InternalError:
 23746                                  InternalError_loop:
 23747 00004058 EBFE                    	JMP	short InternalError_loop	; freeze
 23748                                  
 23749                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23750                                  
 23751                                  CrackIt:
 23752 0000405A 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23753 0000405E 83FEFF                  	CMP	SI,-1			; valid?
 23754 00004061 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23755 00004063 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23756                                  LOOK_SING:
 23757                                  	;mov	byte [ATTRIB],16h
 23758 00004066 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23759                                  					; Attributes to search through Dirs
 23760 0000406B C43E[A205]              	LES	DI,[THISCDS]
 23761 0000406F B8FFFF                  	MOV	AX,-1
 23762                                  	;mov	bx,[es:di+73]
 23763 00004072 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23764 00004076 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23765                                  
 23766                                  ; AX = -1
 23767                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23768                                  ;      has been uncertainly changed.
 23769                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23770                                  ;      may be -1 if no current directory part has been used.
 23771                                  
 23772 0000407A 39C6                    	CMP	SI,AX			; if Current directory is not part
 23773 0000407C 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 23774 0000407E 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23775                                  
 23776                                  ; DOS 3.3  6/25/86
 23777 00004080 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 23778                                  	;test	byte [FastOpenFlg],1
 23779 00004082 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23780 00004087 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23781 00004089 06                      	PUSH	ES			; save registers
 23782 0000408A 57                      	PUSH	DI
 23783 0000408B 51                      	PUSH	CX
 23784 0000408C FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23785 0000408F 56                      	PUSH	SI
 23786 00004090 53                      	PUSH	BX
 23787                                  
 23788 00004091 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23789 00004095 8B36[B205]              	MOV	SI,[WFP_START]
 23790                                  
 23791                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23792 00004099 BB[300D]                	MOV	BX,FastOpenTable
 23793 0000409C BF[460D]                	MOV	DI,Dir_Info_Buff
 23794 0000409F B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23795                                  	;mov	al,1
 23796 000040A2 B001                    	MOV	AL,FONC_Look_up
 23797 000040A4 1E                      	PUSH	DS
 23798 000040A5 07                      	POP	ES
 23799                                  	;call	far [BX+2]
 23800 000040A6 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23801 000040A9 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23802                                  					; Go to Got_Srch_cluster
 23803 000040AB 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 23804 000040AE 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23805 000040B0 F9                      	stc
 23806 000040B1 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 23807                                  GO_Chk_end1:
 23808 000040B3 F8                      	clc
 23809                                  GO_Chk_end:				; restore registers
 23810 000040B4 5B                      	POP	BX
 23811 000040B5 5E                      	POP	SI
 23812 000040B6 8F44FF                  	POP	word [SI-1]
 23813 000040B9 59                      	POP	CX
 23814 000040BA 5F                      	POP	DI
 23815 000040BB 07                      	POP	ES
 23816 000040BC 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23817                                  
 23818                                  ; DOS 3.3  6/25/86
 23819                                  ;
 23820                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23821                                  ; of path and go crack from root.
 23822                                  
 23823                                  NO_CURR_D:
 23824 000040BE 8B36[B205]              	MOV	SI,[WFP_START]
 23825 000040C2 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23826 000040C5 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23827 000040C9 EB3C                    	JMP	short ROOTPATH
 23828                                  
 23829                                  ; We are able to crack from the current directory part. Go set up for search
 23830                                  ; of specified cluster.
 23831                                  
 23832                                  GOT_SEARCH_CLUSTER:
 23833 000040CB C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23834 000040CF E8D4FE                  	call	SETDIRSRCH
 23835                                  	;JC	short SETFERR
 23836                                  	;JMP	short FINDPATH
 23837                                  	; 16/12/2022
 23838 000040D2 7344                    	jnc	short FINDPATH ; 17/08/2018
 23839                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23840                                  	;JC	short SETFERR
 23841                                  	;JMP	short FINDPATH
 23842                                  SETFERR:
 23843 000040D4 30C9                    	XOR	CL,CL			; set zero
 23844 000040D6 F9                      	STC
 23845 000040D7 C3                      	retn
 23846                                  
 23847                                  ;---------------------------------------------------------------------------
 23848                                  ;
 23849                                  ; Procedure Name : ChkDev
 23850                                  ;
 23851                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23852                                  ;   device.
 23853                                  ; Blasts CX,SI,DI,AX,BX
 23854                                  ;---------------------------------------------------------------------------
 23855                                  
 23856                                  CHKDEV:
 23857 000040D8 89FE                    	MOV	SI,DI
 23858 000040DA 8CD7                    	MOV	DI,SS
 23859 000040DC 8EC7                    	MOV	ES,DI
 23860                                  
 23861 000040DE BF[4B05]                	MOV	DI,NAME1
 23862 000040E1 B90900                  	MOV	CX,9
 23863                                  TESTLOOP:
 23864 000040E4 E87F10                  	call	GETLET
 23865                                  
 23866 000040E7 3C2E                    	CMP	AL,'.'
 23867 000040E9 740E                    	JZ	short TESTDEVICE
 23868 000040EB E8CE10                  	call	PATHCHRCMP
 23869 000040EE 7407                    	JZ	short NOTDEV
 23870 000040F0 08C0                    	OR	AL,AL
 23871 000040F2 7405                    	JZ	short TESTDEVICE
 23872                                  
 23873 000040F4 AA                      	STOSB
 23874 000040F5 E2ED                    	LOOP	TESTLOOP
 23875                                  NOTDEV:
 23876 000040F7 F9                      	STC
 23877 000040F8 C3                      	retn
 23878                                  
 23879                                  TESTDEVICE:
 23880 000040F9 83C102                  	ADD	CX,2
 23881 000040FC B020                    	MOV	AL,' '
 23882 000040FE F3AA                    	REP	STOSB
 23883 00004100 8CD0                    	MOV	AX,SS
 23884 00004102 8ED8                    	MOV	DS,AX
 23885                                  	;call	DEVNAME
 23886                                  	;retn
 23887                                  	; 18/12/2022
 23888 00004104 E9C201                  	jmp	DEVNAME
 23889                                  
 23890                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 23891                                  ;----------------------------------------------------------------------------
 23892                                  ;
 23893                                  ; Procedure Name : ROOTPATH,FINDPATH
 23894                                  ;
 23895                                  ; Inputs:
 23896                                  ;	Same as FINDPATH but,
 23897                                  ;	SI Points to asciz string of path which is assumed to start at
 23898                                  ;		the root (no leading '/').
 23899                                  ; Function:
 23900                                  ;	Search from root for path
 23901                                  ; Outputs:
 23902                                  ;	Same as FINDPATH but:
 23903                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 23904                                  ;	[NoSetDir] is ignored.
 23905                                  ;----------------------------------------------------------------------------
 23906                                  
 23907                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23908                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 23909                                  
 23910                                  ROOTPATH:
 23911 00004107 E8D7FE                  	call	SETROOTSRCH
 23912 0000410A 803C00                  	CMP	BYTE [SI],0
 23913 0000410D 7509                    	JNZ	short FINDPATH
 23914                                  
 23915                                  ; Root dir specified
 23916 0000410F A0[6D05]                	MOV	AL,[SATTRIB]
 23917 00004112 A2[6B05]                	MOV	[ATTRIB],AL
 23918 00004115 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 23919                                  					; (dir), clears carry.
 23920 00004117 C3                      	retn
 23921                                  
 23922                                  ; Inputs:
 23923                                  ;	[ATTRIB] Set to get through directories
 23924                                  ;	[SATTRIB] Set to find last element
 23925                                  ;	ES:BP Points to DPB
 23926                                  ;	SI Points to asciz string of path (no leading '/').
 23927                                  ;	[SECCLUSPOS] = 0
 23928                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 23929                                  ;	[CLUSNUM] = Cluster # of next cluster
 23930                                  ;	[CLUSFAC] = Sectors per cluster
 23931                                  ;	[NoSetDir] set
 23932                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23933                                  ;		( = -1 if current dir not involved, else
 23934                                  ;		 Points to first char after last "/" of current dir part)
 23935                                  ;	[THISCDS] Points to CDS being used
 23936                                  ;	[CREATING] and [DELALL] set
 23937                                  ; Function:
 23938                                  ;	Parse path name
 23939                                  ; Outputs:
 23940                                  ;	ID1 field of [THISCDS] updated appropriately
 23941                                  ;	[ATTRIB] = [SATTRIB]
 23942                                  ;	ES:BP Points to DPB
 23943                                  ;	[THISDPB] = ES:BP
 23944                                  ;	Carry set if bad path
 23945                                  ;	   SI Points to path element causing failure
 23946                                  ;	   Zero set
 23947                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23948                                  ;	      start a search on the last directory
 23949                                  ;	      CL is zero if there is a bad name in the path
 23950                                  ;	      CL is non-zero if the name was simply not found
 23951                                  ;		 [ENTFREE] may have free spot in directory
 23952                                  ;		 [NAME1] is the name.
 23953                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23954                                  ;	   Zero reset
 23955                                  ;	      File in middle of path or bad name in path
 23956                                  ;		or path too long or malformed path
 23957                                  ;	ELSE
 23958                                  ;	   [CURBUF] contains directory record with match
 23959                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23960                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 23961                                  ;	   [NAME1] Has name looked for
 23962                                  ;	   AH = device ID
 23963                                  ;	      bit 7 of AH set if device SI and BX
 23964                                  ;	      will point DOSGROUP relative The firclus
 23965                                  ;	      field of the device entry contains the device pointer
 23966                                  ;	   If last element is a directory zero is set and:
 23967                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23968                                  ;	      are set up to start a search on it,
 23969                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23970                                  ;	      like that for a file (except for zero flag)
 23971                                  ;	   If last element is a file zero is reset
 23972                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23973                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23974                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23975                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23976                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23977                                  ; Destroys all other registers
 23978                                  
 23979                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23980                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 23981                                  
 23982                                      	;entry	FINDPATH
 23983                                  FINDPATH:
 23984 00004118 06                      	PUSH	ES			; Save ES:BP
 23985 00004119 56                      	PUSH	SI
 23986 0000411A 89F7                    	MOV	DI,SI
 23987 0000411C 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 23988 00004120 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 23989 00004125 740E                    	JZ	short NOIDS		; No current dir part
 23990 00004127 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 23991 0000412B 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 23992 0000412D C43E[A205]              	LES	DI,[THISCDS]
 23993                                  	;mov	[es:di+73],cx
 23994 00004131 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 23995                                  NOIDS:
 23996                                  
 23997                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 23998                                  ; character in the string. CX,DI may be destroyed.
 23999                                  ;
 24000                                  ;	invoke	NAMETRANS
 24001                                  ;	MOV	CL,AL
 24002                                  ;
 24003                                  ; The above is the slow method. The name has *already* been munged by
 24004                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24005                                  ; the name until ., \ or 0 is hit.
 24006                                  
 24007 00004135 8CD0                    	MOV	AX,SS
 24008 00004137 8EC0                    	MOV	ES,AX
 24009                                  
 24010                                  ;hkn; Name1 is in DOSDATA
 24011 00004139 BF[4B05]                	MOV	DI,NAME1
 24012 0000413C B82020                  	MOV	AX,'  ' ; 2020h
 24013 0000413F AA                      	STOSB
 24014 00004140 AB                      	STOSW
 24015 00004141 AB                      	STOSW
 24016 00004142 AB                      	STOSW
 24017 00004143 AB                      	STOSW
 24018 00004144 AB                      	STOSW
 24019                                  
 24020                                  ;hkn; Name1 is in DOSDATA
 24021 00004145 BF[4B05]                	MOV	DI,NAME1
 24022 00004148 30E4                    	XOR	AH,AH			; bits for CL
 24023                                  GetNam:
 24024                                  	; 19/05/2019 - Retro DOS v4.0
 24025                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24026                                  
 24027                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24028                                  	; 16/12/2022
 24029                                  	;inc	cl ; not required !	
 24030                                  	
 24031 0000414A AC                      	LODSB
 24032 0000414B 3C2E                    	CMP	AL,'.'	; 2Eh
 24033 0000414D 7412                    	JZ	short _SetExt
 24034 0000414F 08C0                    	OR	AL,AL
 24035 00004151 7424                    	JZ	short _GetDone
 24036 00004153 3C5C                    	CMP	AL,'\'	; 5Ch
 24037 00004155 7420                    	JZ	short _GetDone
 24038 00004157 3C3F                    	CMP	AL,'?'	; 3Fh
 24039 00004159 7503                    	JNZ	short StoNam
 24040 0000415B 80CC01                  	OR	AH,1
 24041                                  StoNam: 
 24042 0000415E AA                      	STOSB
 24043 0000415F EBE9                    	JMP	short GetNam
 24044                                  _SetExt:
 24045 00004161 BF[5305]                	MOV	DI,NAME1+8
 24046                                  GetExt:
 24047 00004164 AC                      	LODSB
 24048 00004165 08C0                    	OR	AL,AL
 24049 00004167 740E                    	JZ	short _GetDone
 24050 00004169 3C5C                    	CMP	AL,'\'
 24051 0000416B 740A                    	JZ	short _GetDone
 24052 0000416D 3C3F                    	CMP	AL,'?'
 24053 0000416F 7503                    	JNZ	short StoExt
 24054 00004171 80CC01                  	OR	AH,1
 24055                                  StoExt: 
 24056 00004174 AA                      	STOSB
 24057 00004175 EBED                    	JMP	short GetExt
 24058                                  _GetDone:
 24059 00004177 4E                      	DEC	SI
 24060 00004178 88E1                    	MOV	CL,AH  ; ?*!
 24061 0000417A 80C980                  	OR	CL,80H
 24062 0000417D 5F                      	POP	DI			; Start of this element
 24063 0000417E 07                      	POP	ES			; Restore ES:BP
 24064 0000417F 39FE                    	CMP	SI,DI
 24065 00004181 7503                    	JNZ	short check_device
 24066 00004183 E9EA00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24067                                  check_device:
 24068 00004186 56                      	PUSH	SI			; Start of next element
 24069 00004187 8A04                    	MOV	AL,[SI]
 24070 00004189 08C0                    	OR	AL,AL
 24071 0000418B 7508                    	JNZ	short NOT_LAST
 24072                                  
 24073                                  ; for last element of the path switch to the correct search attributes
 24074                                  
 24075 0000418D 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24076 00004191 883E[6B05]              	MOV	[ATTRIB],BH
 24077                                  
 24078                                  NOT_LAST:
 24079                                  
 24080                                  ; check name1 to see if we have a device...
 24081                                  
 24082 00004195 06                      	PUSH	ES			; Save ES:BP
 24083                                  
 24084                                  ;hkn; SS is DOSDATA
 24085                                  	;context ES
 24086 00004196 16                      	push	ss
 24087 00004197 07                      	pop	es
 24088 00004198 E82E01                  	call	DEVNAME 		; blast BX
 24089 0000419B 07                      	POP	ES			; Restore ES:BP
 24090 0000419C 720B                    	JC	short FindFile		; Not a device
 24091 0000419E 08C0                    	OR	AL,AL			; Test next char again
 24092 000041A0 7403                    	JZ	short GO_BDEV
 24093 000041A2 E9CF00                  	JMP	FILEINPATH		; Device name in middle of path
 24094                                  
 24095                                  GO_BDEV:
 24096 000041A5 5E                      	POP	SI			; Points to NUL at end of path
 24097 000041A6 E981FE                  	JMP	Build_devJ
 24098                                  
 24099                                  FindFile:
 24100                                  ;;;; 7/28/86
 24101 000041A9 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24102 000041AE 7505                    	JNZ	short NOE5		; no
 24103 000041B0 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24104                                  NOE5:
 24105                                  ;;;; 7/28/86
 24106 000041B5 57                      	PUSH	DI			; Start of this element
 24107 000041B6 06                      	PUSH	ES			; Save ES:BP
 24108 000041B7 51                      	PUSH	CX			; CL return from NameTrans
 24109                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24110                                  
 24111 000041B8 E89C02                  	CALL	LookupPath		; call fastopen to get dir entry
 24112 000041BB 7303                    	JNC	short DIR_FOUND		; found dir entry
 24113                                  
 24114                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24115 000041BD E89DFC                  	call	FINDENTRY
 24116                                  DIR_FOUND:
 24117 000041C0 59                      	POP	CX
 24118 000041C1 07                      	POP	ES
 24119 000041C2 5F                      	POP	DI
 24120 000041C3 7303                    	JNC	short LOAD_BUF
 24121 000041C5 E9D100                  	JMP	BADPATHPOP
 24122                                  
 24123                                  LOAD_BUF:
 24124 000041C8 C53E[E205]              	LDS	DI,[CURBUF]
 24125                                  	;test	byte [bx+0Bh],10h
 24126 000041CC F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24127 000041D0 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24128 000041D2 E99F00                  	JMP	FILEINPATH		; Error or end of path
 24129                                  
 24130                                  ; if we are not setting the directory, then check for end of string
 24131                                  
 24132                                  GO_NEXT:
 24133                                  ;hkn; SS override
 24134 000041D5 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24135 000041DB 7423                    	JZ	short SetDir
 24136 000041DD 89FA                    	MOV	DX,DI			; Save pointer to entry
 24137 000041DF 8CD9                    	MOV	CX,DS
 24138                                  
 24139                                  ;hkn; SS is DOSDATA
 24140                                  	;context DS
 24141 000041E1 16                      	push	ss
 24142 000041E2 1F                      	pop	ds
 24143 000041E3 5F                      	POP	DI			; Start of next element
 24144                                  	; 19/05/2019 - Retro DOS v4.0
 24145                                  	; MSDOS 6.0
 24146 000041E4 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24147 000041E9 740B                    	JZ	short _nofast			; the FastOpen
 24148 000041EB F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24149 000041F0 7404                    	JZ	short _nofast			; no
 24150 000041F2 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24151                                  _nofast:
 24152 000041F6 803D00                  	CMP	BYTE [DI],0
 24153                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24154                                  	;;JMP	_SETRET  ; retn		; Got it
 24155                                  	;retn	; 05/09/2018
 24156                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24157                                  	;jmp	_SETRET
 24158                                  	; 16/12/2022
 24159 000041F9 7421                    	jz	short _SETRET
 24160                                  
 24161                                  NEXT_ONE:
 24162 000041FB 57                      	PUSH	DI			; Put start of next element back on stack
 24163 000041FC 89D7                    	MOV	DI,DX
 24164 000041FE 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24165                                  SetDir:
 24166 00004200 8B14                    	MOV	DX,[SI] 		; Dir_first
 24167                                  
 24168                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24169 00004202 1E                      	PUSH	DS		      ; save [curbuf+2]
 24170                                  ;hkn; SS is DOSDATA
 24171 00004203 16                      	push	ss
 24172 00004204 1F                      	pop	ds		      ; set DS Dosgroup
 24173                                  	;test	byte [FastOpenFlg],2
 24174 00004205 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24175 0000420A 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24176 0000420C 89D3                    	MOV	BX,DX		      ; not found
 24177 0000420E 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24178 00004212 50                      	PUSH	AX		      ; save device id (AH)
 24179 00004213 E890FD                  	call	SETDIRSRCH
 24180 00004216 58                      	POP	AX		      ; restore device id (AH)
 24181 00004217 83C402                  	ADD	SP,2		      ; pop ds in stack
 24182 0000421A EB3E                    	JMP	short FAST_OPEN_SKIP
 24183                                  
 24184                                  	; 16/12/2022
 24185                                  _SETRET:
 24186 0000421C C3                      	retn
 24187                                  
 24188                                  DO_NORMAL:
 24189 0000421D 1F                      	POP	DS			; DS = [curbuf + 2]
 24190                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24191                                  
 24192 0000421E 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24193 00004220 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24194 00004222 53                      	PUSH	BX
 24195 00004223 50                      	PUSH	AX
 24196 00004224 56                      	PUSH	SI
 24197 00004225 51                      	PUSH	CX
 24198                                  	;push	word [di+6]
 24199 00004226 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24200                                  	; 19/05/2019
 24201                                  	; MSDOS 6.0
 24202                                  	;push	word [di+8]
 24203 00004229 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24204 0000422C 89D3                    	MOV	BX,DX
 24205                                  
 24206                                  ;hkn; SS is DOSDATA
 24207                                  	;context DS
 24208 0000422E 16                      	push	ss
 24209 0000422F 1F                      	pop	ds
 24210                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24211 00004230 E873FD                  	call	SETDIRSRCH		; the entry sector buffer
 24212                                  	; 19/05/2019
 24213                                  	; MSDOS 6.0
 24214 00004233 8F06[0706]              	POP	word [HIGH_SECTOR]
 24215 00004237 5A                      	POP	DX
 24216 00004238 720A                    	JC	short SKIP_GETB
 24217                                  	;mov	byte [ALLOWED],18h
 24218 0000423A C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24219 0000423F 30C0                    	XOR	AL,AL
 24220                                  	;invoke	GETBUFFR		; Get the entry buffer back
 24221 00004241 E83E18                  	call	GETBUFFR
 24222                                  SKIP_GETB:
 24223 00004244 59                      	POP	CX
 24224 00004245 5E                      	POP	SI
 24225 00004246 58                      	POP	AX
 24226 00004247 5B                      	POP	BX
 24227 00004248 7305                    	JNC	short SET_THE_BUF
 24228 0000424A 5F                      	POP	DI			; Start of next element
 24229 0000424B 89FE                    	MOV	SI,DI			; Point with SI
 24230 0000424D EB21                    	JMP	SHORT _BADPATH
 24231                                  
 24232                                  SET_THE_BUF:
 24233 0000424F E855F5                  	call	SET_BUF_AS_DIR
 24234 00004252 8B3E[E205]              	MOV	DI,[CURBUF]
 24235 00004256 01FE                    	ADD	SI,DI			; Get the offsets back
 24236 00004258 01FB                    	ADD	BX,DI
 24237                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24238                                  FAST_OPEN_SKIP:
 24239 0000425A 5F                      	POP	DI			; Start of next element
 24240 0000425B E89D02                  	CALL	InsertPath		; insert dir entry info
 24241                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24242 0000425E 8A05                    	MOV	AL,[DI]
 24243 00004260 08C0                    	OR	AL,AL
 24244 00004262 74B8                    	JZ	short _SETRET		; At end
 24245 00004264 47                      	INC	DI			; Skip over "/"
 24246 00004265 89FE                    	MOV	SI,DI			; Point with SI
 24247 00004267 E8520F                  	call	PATHCHRCMP
 24248 0000426A 7503                    	JNZ	short find_bad_name	; oops
 24249 0000426C E9A9FE                  	JMP	FINDPATH		; Next element
 24250                                  
 24251                                  find_bad_name:
 24252 0000426F 4E                      	DEC	SI			; Undo above INC to get failure point
 24253                                  _BADPATH:
 24254 00004270 30C9                    	XOR	CL,CL			; Set zero
 24255 00004272 EB2C                    	JMP	SHORT BADPRET
 24256                                  
 24257                                  FILEINPATH:
 24258 00004274 5F                      	POP	DI			; Start of next element
 24259                                  
 24260                                  ;hkn; SS is DOSDATA
 24261                                  	;context DS			; Got to from one place with DS gone
 24262 00004275 16                      	push	ss
 24263 00004276 1F                      	pop	ds
 24264                                  
 24265                                  ; DOS 3.3 FastOpen
 24266                                  	;test	byte [FastOpenFlg],1
 24267 00004277 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24268 0000427C 740B                    	JZ	short NO_FAST		; device info to fastopen
 24269                                  	;test	byte [FastOpenFlg],2
 24270 0000427E F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24271 00004283 7404                    	JZ	short NO_FAST
 24272 00004285 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24273                                  					 ; success
 24274                                  NO_FAST:
 24275                                  ; DOS 3.3 FastOpen
 24276 00004289 8A05                    	MOV	AL,[DI]
 24277 0000428B 08C0                    	OR	AL,AL
 24278 0000428D 7404                    	JZ	short INCRET
 24279 0000428F 89FE                    	MOV	SI,DI			; Path too long
 24280 00004291 EB0D                    	JMP	SHORT BADPRET
 24281                                  
 24282                                  INCRET:
 24283                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24284                                  
 24285 00004293 E86502                  	CALL   InsertPath		; insert dir entry info
 24286                                  
 24287                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24288 00004296 FEC0                    	INC	AL			; Reset zero
 24289                                  	; 16/12/2022	
 24290                                  ;_SETRET:
 24291 00004298 C3                      	retn
 24292                                  
 24293                                  BADPATHPOP:
 24294 00004299 5E                      	POP	SI			; Start of next element
 24295 0000429A 8A04                    	MOV	AL,[SI]
 24296 0000429C 89FE                    	MOV	SI,DI			; Start of bad element
 24297 0000429E 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24298                                  BADPRET:
 24299 000042A0 A0[6D05]                	MOV	AL,[SATTRIB]
 24300 000042A3 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24301 000042A6 F9                      	STC
 24302 000042A7 C3                      	retn
 24303                                  
 24304                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24305                                  ;---------------------------------------------------------------------------
 24306                                  ;
 24307                                  ; Procedure Name : STARTSRCH
 24308                                  ;
 24309                                  ; Inputs:
 24310                                  ;	[THISDPB] Set
 24311                                  ; Function:
 24312                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24313                                  ; Outputs:
 24314                                  ;	ES:BP = Drive parameters
 24315                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24316                                  ; Destroys ES,BP,AX
 24317                                  ;--------------------------------------------------------------------------
 24318                                  
 24319                                  STARTSRCH:
 24320 000042A8 C42E[8A05]              	LES	BP,[THISDPB]
 24321 000042AC 31C0                    	XOR	AX,AX
 24322 000042AE A3[4803]                	MOV	[LASTENT],AX
 24323 000042B1 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24324 000042B4 48                      	DEC	AX
 24325 000042B5 A3[D805]                	MOV	[ENTFREE],AX
 24326 000042B8 A3[DA05]                	MOV	[ENTLAST],AX
 24327 000042BB C3                      	retn
 24328                                  
 24329                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24330                                  ;----------------------------------------------------------------------------
 24331                                  ; Procedure Name : MatchAttributes
 24332                                  ;
 24333                                  ; Input:    [Attrib] = attribute to search for
 24334                                  ;	    CH = found attribute
 24335                                  ; Output:   JZ <match>
 24336                                  ;	    JNZ <nomatch>
 24337                                  ; Registers modified: noneski
 24338                                  ;----------------------------------------------------------------------------
 24339                                  
 24340                                  MatchAttributes:
 24341 000042BC 50                      	PUSH	AX
 24342                                  
 24343                                  ;hkn; SS override
 24344 000042BD 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24345 000042C1 F6D0                    	NOT	AL			; AL <- SearchSet'
 24346 000042C3 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24347                                  	;and	al,16h
 24348 000042C5 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24349                                  ;
 24350                                  ; the result is non-zero if an attribute is not in the search set
 24351                                  ; and in the found set and in the important set. This means that we do not
 24352                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24353                                  ;
 24354 000042C7 58                      	POP	AX
 24355 000042C8 C3                      	retn
 24356                                  
 24357                                  ; 19/05/2019 - Retro DOS v4.0
 24358                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24359                                  
 24360                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24361                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24362                                  
 24363                                  ;Break <DevName - Look for name of device>
 24364                                  ;---------------------------------------------------------------------------
 24365                                  ;
 24366                                  ; Procedure Name : DevName
 24367                                  ;
 24368                                  ; Inputs:
 24369                                  ;	DS,ES:DOSDATA
 24370                                  ;	Filename in NAME1
 24371                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24372                                  ; Function:
 24373                                  ;	Determine if file is in list of I/O drivers
 24374                                  ; Outputs:
 24375                                  ;	Carry set if not a device
 24376                                  ;	ELSE
 24377                                  ;	Zero flag set
 24378                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24379                                  ;	     bits 0-4 set from low byte of attribute word
 24380                                  ;	DEVPT = DWORD pointer to Device header of device
 24381                                  ; BX destroyed, others preserved
 24382                                  ;---------------------------------------------------------------------------
 24383                                  
 24384                                  DEVNAME:
 24385                                  	; 28/07/2018 - Retro DOS v3.0
 24386                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24387                                  
 24388 000042C9 56                      	PUSH	SI
 24389 000042CA 57                      	PUSH	DI
 24390 000042CB 51                      	PUSH	CX
 24391 000042CC 50                      	PUSH	AX
 24392                                  
 24393                                  ; E5 special code
 24394 000042CD FF36[4B05]              	PUSH	WORD [NAME1]
 24395 000042D1 803E[4B05]05            	CMP	byte [NAME1],5
 24396 000042D6 7505                    	JNZ	short NOKTR
 24397 000042D8 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24398                                  NOKTR:
 24399                                  	;test	byte [ATTRIB],8
 24400 000042DD F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24401                                  					; If looking for VOL id don't find devs
 24402 000042E2 7521                    	JNZ	short RET31
 24403                                  
 24404                                  ;hkn; NULDEV is in DOSDATA
 24405 000042E4 BE[4800]                	MOV	SI,NULDEV
 24406                                  LOOKIO:
 24407                                  	; 21/11/2022
 24408                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24409                                  	; 17/12/2022
 24410                                  	;test	byte [si+5],80h
 24411 000042E7 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24412                                  	;;test	word [si+4],8000h
 24413                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24414 000042EB 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24415 000042ED 89F0                    	MOV	AX,SI
 24416                                  	;add	si,10
 24417 000042EF 83C60A                  	ADD	SI,SYSDEV.NAME
 24418                                  
 24419                                  ;hkn; NAME1 is in DOSDATA
 24420 000042F2 BF[4B05]                	MOV	DI,NAME1
 24421 000042F5 B90400                  	MOV	CX,4			; All devices are 8 letters
 24422 000042F8 F3A7                    	REPE	CMPSW			; Check for name in list
 24423 000042FA 89C6                    	MOV	SI,AX
 24424 000042FC 7415                    	JZ	short IOCHK		; Found it?
 24425                                  SKIPDEV:
 24426 000042FE C534                    	LDS	SI,[SI]			; Get address of next device
 24427 00004300 83FEFF                  	CMP	SI,-1			; At end of list?
 24428 00004303 75E2                    	JNZ	short LOOKIO
 24429                                  RET31:	
 24430 00004305 F9                      	STC				; Not found
 24431                                  RETNV:	
 24432 00004306 8CD1                    	MOV	CX,SS
 24433 00004308 8ED9                    	MOV	DS,CX
 24434                                  
 24435 0000430A 8F06[4B05]              	POP	WORD [NAME1]
 24436 0000430E 58                      	POP	AX
 24437 0000430F 59                      	POP	CX
 24438 00004310 5F                      	POP	DI
 24439 00004311 5E                      	POP	SI
 24440 00004312 C3                      	RETN
 24441                                  
 24442                                  IOCHK:
 24443                                  ;hkn; SS override for DEVPT
 24444 00004313 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24445                                  	;mov	bh,[si+4]
 24446 00004318 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24447 0000431B 80CFC0                  	OR	BH,0C0h
 24448 0000431E 80E7DF                  	and	bh,0DFh
 24449                                  	;AND	BH,~(020h)		; Clears Carry
 24450 00004321 368936[9A05]            	MOV	[SS:DEVPT],SI
 24451 00004326 EBDE                    	JMP	short RETNV
 24452                                  
 24453                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24454                                  ;---------------------------------------------------------------------------
 24455                                  ; Procedure Name : Build_device_ent
 24456                                  ;
 24457                                  ; Inputs:
 24458                                  ;	[NAME1] has name
 24459                                  ;	BH is attribute field (supplied by DEVNAME)
 24460                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24461                                  ; Function:
 24462                                  ;	Build a directory entry for a device at DEVFCB
 24463                                  ; Outputs:
 24464                                  ;	BX points to DEVFCB
 24465                                  ;	SI points to dir_first field
 24466                                  ;	AH = input BH
 24467                                  ;	AL = 0
 24468                                  ;	dir_first = DEVPT
 24469                                  ;	Zero Set, Carry Clear
 24470                                  ; DS,ES,BP preserved, others destroyed
 24471                                  ;--------------------------------------------------------------------------
 24472                                  
 24473                                  Build_device_ent:
 24474 00004328 B82020                  	MOV	AX,"  " ; 2020h
 24475                                  
 24476                                  ;hkn; DEVFCB is in DOSDATA
 24477 0000432B BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24478                                  
 24479                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 24480                                  
 24481 0000432E AB                      	STOSW
 24482 0000432F AA                      	STOSB				; Blank out extent field
 24483                                  	;mov	al,40h
 24484 00004330 B040                    	MOV	AL,attr_device
 24485                                  
 24486                                  ;	Fill Dir_attr
 24487                                  
 24488 00004332 AA                      	STOSB				; Set attribute field
 24489 00004333 31C0                    	XOR	AX,AX
 24490 00004335 B90A00                  	MOV	CX,10
 24491                                  
 24492                                  ; Fill dir_pad
 24493                                  
 24494 00004338 F3AB                    	REP	STOSW			; Fill rest with zeros
 24495 0000433A E80DC8                  	call	DATE16
 24496                                  
 24497                                  ;hkn; DEVFCB is in DOSDATA
 24498 0000433D BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24499 00004340 92                      	XCHG	AX,DX
 24500                                  
 24501                                  ; Fill dir_time
 24502                                  
 24503 00004341 AB                      	STOSW
 24504 00004342 92                      	XCHG	AX,DX
 24505                                  
 24506                                  ; Fill dir_date
 24507                                  
 24508 00004343 AB                      	STOSW
 24509 00004344 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24510 00004346 A1[9A05]                	MOV	AX,[DEVPT]
 24511                                  
 24512                                  ; Fill dir_first
 24513                                  
 24514 00004349 AB                      	STOSW				; Dir_first points to device
 24515 0000434A A1[9C05]                	MOV	AX,[DEVPT+2]
 24516                                  ;
 24517                                  ; Fill dir_size_l
 24518                                  ;
 24519 0000434D AB                      	STOSW
 24520 0000434E 88FC                    	MOV	AH,BH			; Put device atts in AH
 24521                                  
 24522                                  ;hkn; DEVFCB is in DOSDATA
 24523 00004350 BB[4B05]                	MOV	BX,DEVFCB
 24524 00004353 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24525 00004355 C3                      	retn
 24526                                  
 24527                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24528                                  ;----------------------------------------------------------------------------
 24529                                  ;
 24530                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24531                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24532                                  ;   If invalid, reset original CDS to root.
 24533                                  ;
 24534                                  ;   Inputs:	ThisCDS points to CDS of interest
 24535                                  ;		SS:DI points to temp buffer
 24536                                  ;   Outputs:	The current directory string is validated on the appropriate
 24537                                  ;		    drive
 24538                                  ;		ThisDPB changed
 24539                                  ;		ES:DI point to CDS
 24540                                  ;		Carry set if error (currently user FAILed to I 24)
 24541                                  ;   Registers modified: all
 24542                                  ;----------------------------------------------------------------------------
 24543                                  
 24544                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24545                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24546                                  
 24547                                  ValidateCDS:
 24548                                  	; 19/05/2019 - Retro DOS v4.0
 24549                                  	; 28/07/2018 - Retro DOS v3.0
 24550                                  
 24551                                     %define  Temp	[bp-2]	; word
 24552                                     %define  SaveCDS	[bp-6]	; dword
 24553                                     %define  SaveCDSL	[bp-6]	; word
 24554                                     %define  SaveCDSH	[bp-4]	; word
 24555                                  
 24556                                  	;Enter
 24557 00004356 55                      	push	bp
 24558 00004357 89E5                    	mov	bp,sp
 24559 00004359 83EC06                  	sub	sp,6
 24560                                  
 24561 0000435C 897EFE                  	MOV	Temp,DI
 24562                                  
 24563                                  ;hkn; SS override
 24564 0000435F 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24565 00004364 8976FA                  	MOV	SaveCDSL,SI
 24566 00004367 8C5EFC                  	MOV	SaveCDSH,DS
 24567                                  	;EnterCrit critDisk
 24568 0000436A E826D0                  	call	ECritDisk
 24569                                  	; 21/11/2022
 24570                                  	;test	byte [SI+curdir.flags+1],80h
 24571                                  	;test	word [si+67],8000h
 24572                                  	; 17/12/2022
 24573                                  	;test	byte [SI+68],80h
 24574 0000436D F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24575                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24576 00004371 7403                    	JZ	short _DoSplice
 24577 00004373 E99200                  	JMP	FatFail
 24578                                  _DoSplice:
 24579 00004376 30D2                    	XOR	DL,DL
 24580 00004378 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24581                                  
 24582                                  ;hkn; SS is DOSDATA
 24583                                  	;Context ES
 24584 0000437D 16                      	push	ss
 24585 0000437E 07                      	pop	es
 24586                                  	;Invoke	FStrcpy
 24587 0000437F E8E3CE                  	call	FStrCpy
 24588 00004382 8B76FE                  	MOV	SI,Temp
 24589                                  
 24590                                  ;hkn; SS is DOSDATA
 24591                                  	;Context DS
 24592 00004385 16                      	push	ss
 24593 00004386 1F                      	pop	ds	
 24594                                  	;Invoke	Splice
 24595 00004387 E8A32B                  	call	Splice
 24596                                  
 24597                                   ;hkn; SS is DOSDATA
 24598                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24599 0000438A 16                      	push	ss
 24600 0000438B 1F                      	pop	ds
 24601 0000438C 8816[4C03]              	MOV	[NoSetDir],DL
 24602 00004390 C43E[A205]              	LES	DI,[THISCDS]
 24603                                  	;SAVE	<BP>
 24604 00004394 55                      	push	bp
 24605                                  	;Invoke	FATREAD_CDS
 24606 00004395 E87A14                  	call	FATREAD_CDS	
 24607                                  	;RESTORE <BP>
 24608 00004398 5D                      	pop	bp
 24609 00004399 726D                    	JC	short FatFail
 24610                                  
 24611 0000439B C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24612                                  	;cmp	word [si+73],-1
 24613 0000439F 837C49FF                	CMP	word [SI+curdir.ID],-1
 24614 000043A3 7555                    	JNZ	short RestoreCDS
 24615                                  
 24616                                  ;hkn; SS is DOSDATA
 24617                                  	;Context ES
 24618 000043A5 16                      	push	ss
 24619 000043A6 07                      	pop	es
 24620                                  
 24621                                  ;hkn; SS override
 24622                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24623 000043A7 36FF36[B205]            	push	word [SS:WFP_START]
 24624                                  	;cmp	si,[bp-6]
 24625 000043AC 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24626 000043AF 750B                    	JNZ	short DoChdir
 24627                                  	;mov	di,[bp-2]
 24628 000043B1 8B7EFE                  	MOV	DI,Temp
 24629                                  
 24630                                  ;hkn; SS override
 24631 000043B4 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24632                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24633 000043B9 E8A9CE                  	call	FStrCpy
 24634                                  DoChdir:
 24635                                  ;hkn; SS is DOSDATA
 24636                                  	;Context DS
 24637 000043BC 16                      	push	ss
 24638 000043BD 1F                      	pop	ds
 24639                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24640 000043BE FF36[6D05]              	push	word [SATTRIB]
 24641 000043C2 55                      	push	bp
 24642                                  	;Invoke	DOS_ChDir
 24643 000043C3 E8B9EE                  	call	DOS_CHDIR
 24644                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24645 000043C6 5D                      	pop	bp
 24646 000043C7 5B                      	pop	bx
 24647 000043C8 8F06[B205]              	pop	word [WFP_START]
 24648 000043CC 881E[6D05]              	MOV	[SATTRIB],BL
 24649 000043D0 C576FA                  	LDS	SI,SaveCDS
 24650 000043D3 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24651                                  
 24652                                  ;hkn; SS override for THISCDS
 24653 000043D5 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24654 000043DA 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24655 000043DF 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24656 000043E1 884C03                  	MOV	[SI+3],CL		;	    }
 24657                                  SetCluster:
 24658                                  	;mov	word [si+73],0FFFFh
 24659 000043E4 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24660 000043E9 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24661                                  	; 21/11/2022
 24662                                  	;test	byte [si+curdir.flags+1],20h
 24663                                  	; 19/05/2019
 24664                                  	; MSDOS 6.0
 24665                                  	; 17/12/2022
 24666                                  	;test	byte [si+68],20h
 24667 000043EE F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24668                                  	;;test	word [si+67],2000h
 24669                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24670 000043F2 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24671 000043F4 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24672                                  _setdirclus:
 24673                                  	;mov	[si+73],cx
 24674 000043F7 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24675                                  RestoreCDS:
 24676 000043FA C47EFA                  	LES	DI,SaveCDS
 24677 000043FD 36893E[A205]            	MOV	[SS:THISCDS],DI
 24678 00004402 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24679 00004407 F8                      	CLC
 24680                                  FatFail:
 24681                                  	;LeaveCrit critDisk
 24682 00004408 E8A3CF                  	call	LCritDisk
 24683                                  
 24684                                  	;les	di,[bp-6]
 24685 0000440B C47EFA                  	LES	DI,SaveCDS
 24686                                  	;Leave
 24687 0000440E 89EC                    	mov	sp,bp
 24688 00004410 5D                      	pop	bp
 24689 00004411 C3                      	retn
 24690                                  
 24691                                  ; 28/07/2018 - Retro DOS v3.0
 24692                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24693                                  
 24694                                  ;Break	<CheckThisDevice - Check for being a device>
 24695                                  ;---------------------------------------------------------------------------
 24696                                  ;
 24697                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24698                                  ;   device specified. We will return carry if there is a device present. 
 24699                                  ;   The forms of devices we will recognize are:
 24700                                  ;
 24701                                  ;	[path]device
 24702                                  ;
 24703                                  ;   Note that the drive letter has *already* been removed. All other forms
 24704                                  ;   are not considered to be devices. If such a device is found we change
 24705                                  ;   the source pointer to point to the device component.
 24706                                  ;
 24707                                  ;   Inputs:	ES is DOSDATA
 24708                                  ;		DS:SI contains name
 24709                                  ;   Outputs:	ES is DOSDATA
 24710                                  ;		DS:SI point to name or device
 24711                                  ;		Carry flag set if device was found
 24712                                  ;		Carry flag reset otherwise
 24713                                  ;   Registers Modified: all except ES:DI, DS
 24714                                  ;----------------------------------------------------------------------------
 24715                                  
 24716                                  CheckThisDevice:
 24717 00004412 57                      	push	di
 24718 00004413 56                      	push	si
 24719 00004414 89F7                    	MOV	DI,SI
 24720                                  
 24721                                  ; Check for presence of \dev\ (Dam multiplan!)
 24722                                  
 24723 00004416 8A04                    	MOV	AL,[SI]
 24724 00004418 E8A10D                  	call	PATHCHRCMP		; is it a path char?
 24725 0000441B 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24726 0000441D 46                      	INC	SI			; simulate LODSB
 24727                                  
 24728                                  ; We have the leading path separator. Look for DEV part.
 24729                                  
 24730 0000441E AD                      	LODSW
 24731 0000441F 0D2020                  	OR	AX,2020h
 24732 00004422 3D6465                  	cmp	ax,"de"
 24733                                  	;CMP	AX,"e"<< 8 + "d"
 24734 00004425 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24735 00004427 AC                      	LODSB
 24736 00004428 0C20                    	OR	AL,20h
 24737 0000442A 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24738 0000442C 7526                    	JNZ	short NotDevice
 24739 0000442E AC                      	LODSB
 24740 0000442F E88A0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24741 00004432 7520                    	JNZ	short NotDevice		; no. go for it.
 24742                                  
 24743                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24744                                  ; SI and DevName may destroy DS.
 24745                                  
 24746                                  ParseDev:
 24747 00004434 1E                      	push	ds
 24748 00004435 56                      	push	si			; preserve the source pointer
 24749 00004436 E8C10C                  	call	NameTrans		; advance DS:SI
 24750 00004439 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24751 0000443C F9                      	STC				; simulate a Carry return from DevName
 24752 0000443D 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24753                                  
 24754                                  ;hkn; SS is DOSDATA
 24755 0000443F 16                      	push	ss
 24756 00004440 1F                      	pop	ds
 24757                                  
 24758                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24759                                  ;
 24760                                  ; SR;
 24761                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24762                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24763                                  ; old call set the volume attribute bit.
 24764                                  
 24765 00004441 A0[6D05]                	mov	al,[SATTRIB]
 24766 00004444 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24767                                  
 24768                                  ; M026 - end
 24769                                  
 24770 00004447 E87FFE                  	call	DEVNAME
 24771                                  
 24772                                  SkipSearch:
 24773 0000444A 5E                      	pop	si
 24774 0000444B 1F                      	pop	ds
 24775                                  
 24776                                  ; SI points to the beginning of the potential device. If we have a device
 24777                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24778                                  ; original value. At this point Carry set indicates FILE.
 24779                                  
 24780                                  CheckReturn:
 24781 0000444C 5F                      	pop	di			; get original SI
 24782 0000444D 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24783 0000444F 89FE                    	MOV	SI,DI
 24784                                  Check_Done:
 24785 00004451 5F                      	pop	di
 24786 00004452 F5                      	CMC				; invert carry. Carry => device
 24787 00004453 C3                      	retn
 24788                                  NotDevice:
 24789 00004454 F9                      	STC
 24790 00004455 EBF5                    	JMP	short CheckReturn
 24791                                  
 24792                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24793                                  ;-----------------------------------------------------------------------------
 24794                                  ;
 24795                                  ; Procedure Name : LookupPath
 24796                                  ;
 24797                                  ; Output  DS:SI -> path name,
 24798                                  ;	  ES:DI -> dir entry info buffer
 24799                                  ;	  ES:CX -> extended dir info buffer
 24800                                  ;
 24801                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24802                                  ;			     FastOpen, DS:SI points to char just one after
 24803                                  ;			     the last char of path name which is fully or
 24804                                  ;			     partially found in FastOPen
 24805                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24806                                  ;
 24807                                  ;----------------------------------------------------------------------------
 24808                                  
 24809                                  LookupPath:
 24810                                  ;	PUSH	AX
 24811                                  
 24812                                  ;hkn; SS override
 24813                                  	;test	byte [ss:FastOpenFlg],1
 24814 00004457 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24815 0000445D 7503                    	JNZ	short FASTINST			    ; and this routine is
 24816                                  NOLOOK:
 24817 0000445F E99700                  	JMP	NOLOOKUP			    ; executed once
 24818                                  
 24819                                  FASTINST:
 24820                                  ;hkn; SS override
 24821                                  	;test	byte [ss:FastOpenFlg],8
 24822 00004462 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24823 00004468 75F5                    	JNZ	short NOLOOK			    ; yes
 24824                                  
 24825 0000446A BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24826                                  
 24827                                  ;hkn; SS override
 24828 0000446D 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24829 00004472 BF[460D]                	MOV	DI,Dir_Info_Buff
 24830 00004475 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24831 00004478 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24832 0000447A 1E                      	PUSH	DS
 24833 0000447B 07                      	POP	ES
 24834                                  
 24835                                  ;hkn; SS override
 24836                                  	;call	far [bx+2]
 24837 0000447C FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24838 0000447F 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24839                                  
 24840 00004481 8D5CFE                  	LEA	BX,[SI-2]
 24841                                  
 24842                                  ;hkn; SS override
 24843 00004484 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24844 00004489 745D                    	JZ	short NOTFOUND			    ; no
 24845                                  
 24846                                  	; 19/05/2019 - Retro DOS v4.0
 24847                                  
 24848                                  	; MSDOS 6.0				    ; fully or partially found
 24849 0000448B 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24850 0000448E 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24851 00004490 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24852                                  
 24853                                  ;hkn; SS override for attrib/sattrib
 24854 00004491 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24855 00004496 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24856 0000449B 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24857                                  	;mov	ch,[es:di+0Bh]
 24858 000044A0 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24859 000044A4 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 24860                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24861 000044A7 59                      	POP	CX				    ;AN000;FO.;
 24862 000044A8 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24863                                  parfnd:
 24864                                  
 24865                                  ;hkn; SS override
 24866 000044AA 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 24867 000044AF 89CB                    	MOV	BX,CX
 24868                                  	; MSDOS 6.0
 24869                                  	;mov	ax,[bx+7]
 24870 000044B1 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 24871                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 24872 000044B4 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 24873 000044B8 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 24874 000044BB 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 24875                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24876                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 24877                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 24878 000044BF 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 24879 000044C2 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 24880                                  
 24881 000044C6 06                      	PUSH	ES				    ; save ES
 24882                                  ;hkn; SS override
 24883 000044C7 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 24884 000044CC 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 24885                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 24886 000044CF 07                      	POP	ES				    ; pop ES
 24887                                  ;SR;
 24888                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 24889                                  ;indicate it is not a root dir
 24890                                  
 24891 000044D0 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 24892 000044D7 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 24893 000044DC 89FB                    	MOV	BX,DI				    ; start of entry
 24894                                  	;lea	si,[di+1Ah]
 24895 000044DE 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 24896                                  						    ; dir_first field in the
 24897                                  						    ; dir entry
 24898                                  ;hkn; SS override for FastOpenFlg
 24899                                  	;or	byte [ss:FastOpenFlg],2
 24900 000044E1 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 24901                                  ;	POP	AX
 24902 000044E7 C3                      	RETN
 24903                                  NOTFOUND:
 24904 000044E8 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 24905 000044EB 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 24906 000044ED 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 24907                                  Partial_Success:
 24908                                  	;and	byte [SS:FastOpenFlg],0FBh
 24909 000044F3 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 24910                                  NOLOOKUP:
 24911                                  ;	POP	AX
 24912 000044F9 F9                      	STC
 24913 000044FA C3                      	RETN
 24914                                  
 24915                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 24916                                  ;-----------------------------------------------------------------------------
 24917                                  ;
 24918                                  ; Procedure Name : InsertPath
 24919                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 24920                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 24921                                  ;	  DS = DOSDATA
 24922                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 24923                                  ;
 24924                                  ;-----------------------------------------------------------------------------
 24925                                  
 24926                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24927                                  
 24928                                  InsertPath:
 24929 000044FB 9C                      	PUSHF
 24930                                  ;hkn; SS override for FastOpenFlag
 24931                                  	;test	byte [SS:FastOpenFlg], 1
 24932 000044FC 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24933 00004502 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 24934                                  	;test	byte [ss:FastOpenFlg],2
 24935 00004504 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 24936 0000450A 740D                    	JZ	short INSERT_DIR_INFO		; no
 24937                                  	;and	byte [ss:FastOpenFlg],0FDh
 24938 0000450C 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 24939 00004512 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 24940 00004517 EB5E                    	JMP	short GET_NEXT2
 24941                                  INSERT_DIR_INFO:				; save registers
 24942 00004519 1E                      	PUSH	DS
 24943 0000451A 06                      	PUSH	ES
 24944 0000451B 53                      	PUSH	BX
 24945 0000451C 56                      	PUSH	SI
 24946 0000451D 57                      	PUSH	DI
 24947 0000451E 51                      	PUSH	CX
 24948 0000451F 50                      	PUSH	AX
 24949                                  
 24950                                  ;hkn; SS override
 24951 00004520 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 24952 00004525 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 24953                                  	;mov	ax,[di+6]
 24954 00004528 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 24955                                  	; MSDOS 6.0
 24956                                  	;mov	[ss:si+1],ax
 24957 0000452B 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 24958                                  	; 19/05/2019 - Retro DOS v4.0
 24959 0000452F 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24960                                  
 24961                                  ;hkn; SS is DOSDATA
 24962 00004532 16                      	push	ss
 24963 00004533 1F                      	pop	ds
 24964                                  	; MSDOS 3.3	
 24965                                  	;;mov	[si+1],ax	
 24966                                  	;MOV	[SI+FEI.dirsec],AX
 24967                                  	; MSDOS 6.0
 24968                                  	;mov	[si+3],ax
 24969 00004534 894403                  	MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 24970                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24971 00004537 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 24972                                  	;;mov	[si+5],ax ; MSDOS 6.0
 24973                                  	;mov	[si+3],ax ; MSDOS 3.3
 24974 0000453A 894405                  	MOV	[SI+FEI.clusnum],AX
 24975                                  	; MSDOS 6.0
 24976 0000453D A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 24977                                  	;mov	[si+7],ax
 24978 00004540 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 24979 00004543 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 24980                                  	;mov	[si+9],ax
 24981 00004546 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 24982                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24983 00004549 89D8                    	MOV	AX,BX
 24984                                  	;;add	di,16  ; MSDOS 3.3
 24985                                  	;add	di,20  ; MSDOS 6.0
 24986 0000454B 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 24987 0000454E 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 24988                                  	;mov	cl,32
 24989 00004550 B120                    	MOV	CL,dir_entry.size
 24990 00004552 F6F1                    	DIV	CL
 24991                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 24992 00004554 8804                    	mov	[si],al
 24993                                  
 24994 00004556 1E                      	PUSH	DS
 24995 00004557 07                      	POP	ES
 24996                                  
 24997 00004558 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24998 0000455C 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 24999                                  	;cmp	word [di+1Ah],0
 25000 0000455E 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25001                                  					; never insert info when file is empty
 25002 00004562 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25003                                  
 25004 00004564 56                      	PUSH	SI			; ES:BX -> extended info
 25005 00004565 5B                      	POP	BX
 25006                                  
 25007                                  	;mov	al,2
 25008 00004566 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25009 00004568 BE[300D]                	MOV	SI,FastOpenTable
 25010                                  	;call	far [es:si+2]
 25011                                  	; 07/12/2022
 25012 0000456B 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25013                                  
 25014 0000456F F8                      	CLC
 25015                                  SKIP_INSERT:
 25016 00004570 58                      	POP	AX
 25017 00004571 59                      	POP	CX			; restore registers
 25018 00004572 5F                      	POP	DI
 25019 00004573 5E                      	POP	SI
 25020 00004574 5B                      	POP	BX
 25021 00004575 07                      	POP	ES
 25022 00004576 1F                      	POP	DS
 25023                                  GET_NEXT2:
 25024                                  	;or	[ss:FastOpenFlg],8
 25025 00004577 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25026                                  					; we got dir info from fastopen so
 25027                                  GET_NEXT_ELEMENT:
 25028 0000457D 9D                      	POPF
 25029 0000457E C3                      	RETN
 25030                                  
 25031                                  ;============================================================================
 25032                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25033                                  ;============================================================================
 25034                                  ; 17/07/2018 - Retro DOS v3.0
 25035                                  ; 30/04/2019 - Retro DOS v4.0
 25036                                  
 25037                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25038                                  
 25039                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25040                                  
 25041                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25042                                  
 25043                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25044                                  ;DEV001s:
 25045                                  ;		length of packets
 25046 0000457F 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25047                                  ;LenTab: db	22,14,22,13,15,14
 25048                                  
 25049                                  ;	Error Function
 25050                                  
 25051                                  CmdTab:
 25052 00004585 8604                    	DB	86h, DEVRD	; 0 input
 25053 00004587 8605                    	DB	86h, DEVRDND	; 1 input status
 25054 00004589 8708                    	DB	87h, DEVWRT	; 2 output
 25055 0000458B 870A                    	DB	87h, DEVOST	; 3 output status
 25056 0000458D 8607                    	DB	86h, DEVIFL	; 4 input flush
 25057 0000458F 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25058                                  
 25059                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25060                                  
 25061                                  ;CmdTab:
 25062                                  ;	db	86h, 4
 25063                                  ;	db	86h, 5
 25064                                  ;	db	87h, 8
 25065                                  ;	db	87h, 10
 25066                                  ;	db	86h, 7
 25067                                  ;	db	86h, 5
 25068                                  
 25069                                  ;DEV001E:
 25070                                  
 25071                                  ; 30/04/2019 - Retro DOS v4.0
 25072                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25073                                  
 25074                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25075                                  ;----------------------------------------------------------------------------
 25076                                  ;
 25077                                  ; Procedure Name : IOFUNC
 25078                                  ;
 25079                                  ; Inputs:
 25080                                  ;	DS:SI Points to SFT
 25081                                  ;	AH is function code
 25082                                  ;		= 0 Input
 25083                                  ;		= 1 Input Status
 25084                                  ;		= 2 Output
 25085                                  ;		= 3 Output Status
 25086                                  ;		= 4 Flush
 25087                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25088                                  ;				   present.
 25089                                  ;	AL = character if output
 25090                                  ; Function:
 25091                                  ;	Perform indicated I/O to device or file
 25092                                  ; Outputs:
 25093                                  ;	AL is character if input
 25094                                  ;	If a status call
 25095                                  ;		zero set if not ready
 25096                                  ;		zero reset if ready (character in AL for input status)
 25097                                  ; For regular files:
 25098                                  ;	Input Status
 25099                                  ;		Gets character but restores position
 25100                                  ;		Zero set on EOF
 25101                                  ;	Input
 25102                                  ;		Gets character advances position
 25103                                  ;		Returns ^Z on EOF
 25104                                  ;	Output Status
 25105                                  ;		Always ready
 25106                                  ; AX altered, all other registers preserved
 25107                                  ;----------------------------------------------------------------------------
 25108                                  
 25109                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25110                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25111                                  
 25112                                  IOFUNC:
 25113 00004591 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25114                                  					; DEVIOBUF
 25115 00004596 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25116 0000459D 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25117 000045A4 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25118                                  	;test	byte [si+6],80h
 25119                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25120 000045A8 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25121 000045AC 7403                    	JZ	short IOTO22		;AN000;
 25122 000045AE E9A500                  	JMP	IOTOFILE		;AN000;
 25123                                  IOTO22:
 25124                                  	;test	word [si+5],80h
 25125                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25126 000045B1 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25127 000045B5 7503                    	JNZ	short IOTO33		;AN000;
 25128 000045B7 E99C00                  	JMP	IOTOFILE		;AN000;
 25129                                  IOTO33:
 25130 000045BA 06                      	push	es ; * (MSDOS 6.21)
 25131 000045BB E8EDBE                  	call	save_world
 25132 000045BE 8CDA                    	MOV	DX,DS
 25133 000045C0 8CD3                    	MOV	BX,SS
 25134 000045C2 8EDB                    	MOV	DS,BX
 25135 000045C4 8EC3                    	MOV	ES,BX
 25136 000045C6 31DB                    	XOR	BX,BX
 25137 000045C8 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25138 000045CB 7503                    	jnz	short _no_sys_wait
 25139                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25140                                  	; 16/12/2022
 25141 000045CD 80CF04                  	or	bh,04h
 25142                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25143                                  				    ; It is up to device driver to carry out
 25144                                  				    ; appropriate action.
 25145                                  _no_sys_wait:
 25146 000045D0 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25147 000045D4 31DB                    	XOR	BX,BX
 25148 000045D6 881E[8903]              	MOV	[IOMED],BL
 25149                                  
 25150 000045DA 88E3                    	MOV	BL,AH		 	; get function
 25151 000045DC 2E8AA7[7F45]            	MOV	AH,[cs:BX+LenTab]
 25152 000045E1 D1E3                    	SHL	BX,1
 25153 000045E3 2E8B8F[8545]            	MOV	CX,[cs:BX+CmdTab]
 25154 000045E8 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25155 000045EB 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25156 000045EF 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25157                                  
 25158 000045F3 8EDA                    	MOV	DS,DX
 25159 000045F5 E86D01                  	CALL	DEVIOCALL
 25160 000045F8 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25161 000045FD 21FF                    	and	di,di
 25162 000045FF 7834                    	js	short DevErr
 25163                                  OKDevIO:
 25164 00004601 8CD0                    	MOV	AX,SS
 25165 00004603 8ED8                    	MOV	DS,AX
 25166                                  
 25167                                  	;cmp	ch,5
 25168 00004605 80FD05                  	CMP	CH,DEVRDND
 25169 00004608 7506                    	JNZ	short DNODRD
 25170 0000460A A0[8903]                	MOV	AL,[IORCHR]
 25171 0000460D A2[BC03]                	MOV	[DEVIOBUF],AL
 25172                                  
 25173                                  DNODRD: 
 25174 00004610 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25175 00004614 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25176                                  	;and	ah,2
 25177 00004616 80E402                  	AND	AH,STBUI>>8
 25178                                  
 25179                                  QuickReturn:				;AN000; 2/13/KK
 25180 00004619 E878BE                  	call	restore_world
 25181 0000461C 07                      	pop	es ; * (MSDOS 6.21)
 25182                                  
 25183                                  	; SR;
 25184                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25185                                  	; IoStatFail = -1 (set after return from the I24)
 25186                                  
 25187                                  	; MSDOS 6.0
 25188 0000461D 9C                      	pushf
 25189 0000461E 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25190 00004622 98                      	cbw				;sign extend to word
 25191 00004623 83F8FF                  	cmp	ax,-1
 25192 00004626 7507                    	jne	short not_fail_ret
 25193 00004628 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25194 0000462D 9D                      	popf
 25195 0000462E C3                      	retn
 25196                                  
 25197                                  not_fail_ret:
 25198 0000462F 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25199 00004633 9D                      	popf
 25200 00004634 C3                      	retn
 25201                                  
 25202                                  DevErr:
 25203 00004635 88CC                    	MOV	AH,CL
 25204 00004637 E8BB0D                  	call	CHARHARD
 25205 0000463A 3C01                    	CMP	AL,1
 25206 0000463C 7507                    	JNZ	short NO_RETRY
 25207 0000463E E853BE                  	call	restore_world
 25208                                  	; 12/05/2019
 25209 00004641 07                      	pop	es ; * (MSDOS 6.21)		
 25210 00004642 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25211                                  
 25212                                  NO_RETRY:
 25213                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25214                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25215                                  	; simply wants to ignore the error.
 25216                                  	;
 25217                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25218                                  	; should be checked by the caller on return
 25219                                  
 25220                                  					; SS override
 25221 00004645 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25222                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25223                                  
 25224                                  	; SR;
 25225                                  	; Check if user failed
 25226                                  
 25227                                  	; MSDOS 6.0
 25228 0000464B 3C03                    	cmp	al,3
 25229 0000464D 7505                    	jnz	short not_fail
 25230 0000464F 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25231                                  not_fail:
 25232 00004654 EBAB                    	JMP	short OKDevIO
 25233                                  
 25234                                  IOTOFILE:
 25235 00004656 08E4                    	OR	AH,AH
 25236 00004658 7421                    	JZ	short IOIN
 25237 0000465A FECC                    	DEC	AH
 25238 0000465C 7405                    	JZ	short IOIST
 25239 0000465E FECC                    	DEC	AH
 25240 00004660 7411                    	JZ	short IOUT
 25241                                  IOUT_retn:	; 18/12/2022
 25242 00004662 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25243                                  IOIST:
 25244                                  	;push	word [si+15h]
 25245 00004663 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25246                                  	;push	word [si+17h]
 25247 00004666 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25248 00004669 E80F00                  	CALL	IOIN
 25249                                  	;pop	word [si+17h]
 25250 0000466C 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25251                                  	;pop	word [si+15h]
 25252 0000466F 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25253 00004672 C3                      	retn
 25254                                  IOUT:
 25255 00004673 E82500                  	CALL	SETXADDR
 25256 00004676 E850EF                  	call	DOS_WRITE
 25257                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25258                                  	; 18/12/2022
 25259 00004679 EB54                    	jmp	RESTXADDR
 25260                                  ;IOUT_retn:
 25261                                  	;retn			; come crying to me when things don't
 25262                                  				; work ARR
 25263                                  IOIN:
 25264 0000467B E81D00                  	CALL	SETXADDR
 25265                                  					; SS override for DOS34_FLAG
 25266                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25267                                  	;or	word [ss:DOS34_FLAG],40h
 25268                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25269                                  	; 16/12/2022
 25270 0000467E 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25271 00004684 E819ED                  	CALL	DOS_READ
 25272                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25273                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25274                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25275                                  	; 16/12/2022
 25276 00004687 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25277 0000468D 09C9                    	OR	CX,CX			; Check EOF
 25278 0000468F E83D00                  	CALL	RESTXADDR
 25279                                  					; SS override
 25280 00004692 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25281 00004696 75CA                    	jnz	short IOUT_retn	
 25282 00004698 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25283 0000469A C3                      	retn
 25284                                  
 25285                                  SETXADDR:
 25286                                  					; SS override
 25287 0000469B 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25288                                  
 25289 000046A0 06                      	push	es ; * (MSDOS 6.21)
 25290                                  
 25291 000046A1 E807BE                  	call	save_world
 25292                                  					; SS override for DMAADD and THISSFT
 25293 000046A4 36FF36[2C03]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25294 000046A9 36FF36[2E03]            	PUSH	WORD [SS:DMAADD+2]
 25295 000046AE 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25296                                  
 25297 000046B3 16                      	push	ss
 25298 000046B4 1F                      	pop	ds
 25299                                  
 25300 000046B5 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25301 000046B9 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25302 000046BD 890E[2E03]              	MOV	[DMAADD+2],CX
 25303 000046C1 8B0E[8A03]              	MOV	CX,[IOXAD]
 25304 000046C5 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25305 000046C9 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25306 000046CD EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25307                                  
 25308                                  RESTXADDR:
 25309 000046CF 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25310 000046D3 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25311 000046D7 8F06[2C03]              	POP	WORD [DMAADD]
 25312                                  
 25313 000046DB E8B6BD                  	call	restore_world
 25314                                  
 25315 000046DE 07                      	pop	es ; * (MSDOS 6.21)
 25316                                  					; SS override
 25317                                  RESTRET:
 25318 000046DF 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25319                                  
 25320                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25321                                  ; 21/11/2022
 25322                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25323                                  
 25324                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25325                                  
 25326                                  ;----------------------------------------------------------------------------
 25327                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25328                                  ;
 25329                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25330                                  ;	the SFT.
 25331                                  ;
 25332                                  ;	ENTRY	(ES:DI) = SFT
 25333                                  ;	EXIT	none
 25334                                  ;	USES	all
 25335                                  ;----------------------------------------------------------------------------
 25336                                  
 25337                                  DEV_OPEN_SFT:
 25338 000046E4 06                      	push	es ; * (MSDOS 6.21)
 25339 000046E5 E8C3BD                  	call	save_world
 25340                                  	;mov	al,0Dh	
 25341 000046E8 B00D                    	MOV	AL,DEVOPN
 25342 000046EA EB06                    	JMP	SHORT DO_OPCLS
 25343                                  
 25344                                  ;----------------------------------------------------------------------------
 25345                                  ; Procedure Name : DEV_CLOSE_SFT
 25346                                  ;
 25347                                  ; Inputs:
 25348                                  ;	ES:DI Points to SFT
 25349                                  ; Function:
 25350                                  ;	Issue a CLOSE call to the correct device
 25351                                  ; Outputs:
 25352                                  ;	None
 25353                                  ; ALL preserved
 25354                                  ;----------------------------------------------------------------------------
 25355                                  
 25356                                  DEV_CLOSE_SFT:
 25357 000046EC 06                      	push	es ; * (MSDOS 6.21)
 25358 000046ED E8BBBD                  	call	save_world
 25359                                  	;mov	al,0Eh	
 25360 000046F0 B00E                    	MOV	AL,DEVCLS
 25361                                  
 25362                                  	; Main entry for device open and close. AL contains the function 
 25363                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25364                                  	; open/close to block devices. This allows networks to function but 
 25365                                  	; does NOT hang up with bogus change-line code.
 25366                                  
 25367                                  	;entry	DO_OPCLS
 25368                                  DO_OPCLS:
 25369                                  	; Is the SFT for the net? If so, no action necessary.
 25370                                  
 25371                                  	; MSDOS 6.0
 25372                                  	;test	word [es:di+5],8000h
 25373                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25374 000046F2 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25375 000046F7 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25376 000046F9 30E4                    	XOR	AH,AH			; Unit
 25377                                  	;test	byte [es:di+5],80h
 25378 000046FB 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25379                                  	;les	di,[es:di+7]
 25380 00004700 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25381 00004704 7513                    	JNZ	short GOT_DEV_ADDR
 25382                                  
 25383                                  	; We are about to call device open/close on a block driver. If no 
 25384                                  	; sharing then just short circuit to done.
 25385                                  	
 25386                                  	; MSDOS 6.0
 25387                                  					; SS override
 25388 00004706 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25389 0000470C 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25390                                  
 25391                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25392                                  	;mov	ah,[es:di+1]
 25393 0000470E 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25394 00004712 268A0D                  	mov	cl,[es:di]
 25395                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25396                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25397                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25398 00004715 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25399                                  GOT_DEV_ADDR:				; ES:DI -> device
 25400                                  	;test	word [es:di+4],800h
 25401                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25402 00004719 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25403 0000471E 7440                    	JZ	short OPCLS_DONE	; Device can't
 25404 00004720 06                      	PUSH	ES
 25405 00004721 1F                      	POP	DS
 25406 00004722 89FE                    	MOV	SI,DI			; DS:SI -> device
 25407                                  
 25408                                  OPCLS_RETRY:
 25409                                  	;Context ES
 25410 00004724 16                      	push	ss
 25411 00004725 07                      	pop	es
 25412                                  					; DEVCALL is in DOSDATA
 25413 00004726 BF[5A03]                	MOV	DI,DEVCALL
 25414                                  
 25415 00004729 89FB                    	MOV	BX,DI
 25416 0000472B 50                      	PUSH	AX
 25417                                  	;mov	al,13
 25418 0000472C B00D                    	MOV	AL,DOPCLHL
 25419 0000472E AA                      	STOSB				; Length
 25420 0000472F 58                      	POP	AX
 25421 00004730 86E0                    	XCHG	AH,AL
 25422 00004732 AA                      	STOSB				; Unit
 25423 00004733 86E0                    	XCHG	AH,AL
 25424 00004735 AA                      	STOSB				; Command
 25425 00004736 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25426 0000473B 50                      	PUSH	AX			; Save Unit,Command
 25427                                  	;invoke	DEVIOCALL2
 25428 0000473C E82900                  	call	DEVIOCALL2
 25429                                  
 25430                                  	;mov	di,[es:bx+3]
 25431 0000473F 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25432                                  	;test	di,8000h
 25433                                  	;jz	short OPCLS_DONEP	
 25434 00004743 21FF                    	and	di,di
 25435 00004745 7918                    	jns	short OPCLS_DONEP	; No error
 25436                                  	; 21/11/2022
 25437                                  	;test	word [si+4],8000h
 25438                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25439                                  	;test	word [si+5],80h
 25440 00004747 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25441 0000474B 7404                    	JZ	short BLKDEV
 25442 0000474D B486                    	MOV	AH,86H			; Read error in data, Char dev
 25443 0000474F EB04                    	JMP	SHORT HRDERR
 25444                                  BLKDEV:
 25445 00004751 88C8                    	MOV	AL,CL			; Drive # in AL
 25446 00004753 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25447                                  HRDERR:
 25448                                  	;invoke	CHARHARD
 25449 00004755 E89D0C                  	call	CHARHARD
 25450 00004758 3C01                    	cmp	al,1
 25451 0000475A 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25452                                  					;  Note that FAIL is essentually IGNORED
 25453 0000475C 58                      	POP	AX			; Get back Unit, Command
 25454 0000475D EBC5                    	JMP	short OPCLS_RETRY
 25455                                  OPCLS_DONEP:
 25456 0000475F 58                      	POP	AX			; Clean stack
 25457                                  OPCLS_DONE:
 25458 00004760 E831BD                  	call	restore_world
 25459 00004763 07                      	pop	es ; * (MSDOS 6.21)
 25460 00004764 C3                      	retn
 25461                                  
 25462                                  ; 30/04/2019 - Retro DOS v4.0
 25463                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25464                                  
 25465                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25466                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25467                                  
 25468                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25469                                  ;----------------------------------------------------------------------------
 25470                                  ;**	DevIoCall  - Call Device
 25471                                  ;
 25472                                  ;	ENTRY	DS:SI Points to device SFT
 25473                                  ;		ES:BX Points to request data
 25474                                  ;	EXIT	DS:SI -> Device driver
 25475                                  ;	USES	DS:SI,AX
 25476                                  ;----------------------------------------------------------------------------
 25477                                  ;**	DevIoCall2 - Call Device
 25478                                  ;
 25479                                  ;	ENTRY	DS:SI Points to DPB
 25480                                  ;		ES:BX Points to request data
 25481                                  ;	EXIT	DS:SI -> Device driver
 25482                                  ;	USES	DS:SI,AX
 25483                                  ;----------------------------------------------------------------------------
 25484                                  
 25485                                  DEVIOCALL:
 25486                                  					; SS override for CALLSSEC, 
 25487                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25488 00004765 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25489                                  
 25490                                  	;entry	DEVIOCALL2
 25491                                  DEVIOCALL2:
 25492                                  	;EnterCrit critDevice
 25493 00004768 E85DCC                  	call	ECritDevice
 25494                                  
 25495                                  	; MSDOS 6.0
 25496                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25497                                  	;test	byte [si+5],80h
 25498 0000476B F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25499 0000476F 7548                    	jnz	short chardev2		;AN000; >32mb no
 25500                                  
 25501                                  	; 16/12/2022
 25502                                  	; 22/11/2022
 25503 00004771 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25504 00004775 3C04                    	cmp	al,DEVRD	; 4
 25505 00004777 7408                    	je	short chkext	
 25506 00004779 3C08                    	cmp	al,DEVWRT	; 8
 25507 0000477B 7404                    	je	short chkext
 25508 0000477D 3C09                    	cmp	al,DEVWRTV	; 9
 25509 0000477F 7538                    	jne	short chardev2
 25510                                  
 25511                                  	; 16/12/2022
 25512                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25513                                  	;;cmp	byte [es:bx+2],4
 25514                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25515                                  	;JZ	short chkext		;AN000; >32mb   yes
 25516                                  	;;cmp	byte [es:bx+2],8
 25517                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25518                                  	;JZ	short chkext		;AN000; >32mb   yes
 25519                                  	;;cmp	byte [es:bx+2],9
 25520                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25521                                  	;				;AN000; >32mb write/verify ?
 25522                                  	;JNZ	short chardev2		;AN000; >32mb no
 25523                                  chkext:
 25524 00004781 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25525 00004784 7255                    	JC	short dev_exit		;AN000;LB. done
 25526                                  
 25527                                  	;test	byte [si+4],2
 25528 00004786 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25529 0000478A 741D                    	JZ	short chksector		;AN000;>32mb   no
 25530 0000478C 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25531 00004790 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25532 00004794 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25533 0000479B 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25534 0000479F 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25535 000047A3 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25536 000047A7 EB10                    	JMP	short chardev2		;AN000; >32mb
 25537                                  chksector:				;AN000; >32mb
 25538 000047A9 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25539 000047AF 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25540                                  	;mov	word [es:bx+3],8107h
 25541 000047B1 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25542                                  					;AN000; >32mb
 25543 000047B7 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25544                                  
 25545                                  chardev2:				;AN000;
 25546                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25547                                  	; preserved
 25548                                  
 25549                                  	;mov	ax,[si+6]
 25550 000047B9 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25551 000047BC 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25552 000047C0 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25553 000047C5 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25554                                  
 25555                                  	;mov	ax,[si+8]
 25556 000047CA 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25557 000047CD 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25558 000047D1 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25559                                  
 25560                                  	; MSDOS 6.0
 25561 000047D6 E84001                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25562 000047D9 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25563                                  
 25564                                  dev_exit:
 25565                                  	;LeaveCrit critDevice
 25566                                  	;call	LCritDevice
 25567                                  	;retn
 25568                                  	; 18/12/2022
 25569 000047DB E905CC                  	jmp	LCritDevice
 25570                                  
 25571                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25572                                  ; 22/11/2022
 25573                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25574                                  
 25575                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25576                                  ;---------------------------------------------------------------------------
 25577                                  ;
 25578                                  ; Procedure Name : SETREAD, SETWRITE
 25579                                  ;
 25580                                  ; Inputs:
 25581                                  ;	DS:BX = Transfer Address
 25582                                  ;	CX = Record Count
 25583                                  ;	DX = Starting Record
 25584                                  ;	AH = Media Byte
 25585                                  ;	AL = Unit Code
 25586                                  ; Function:
 25587                                  ;	Set up the device call header at DEVCALL
 25588                                  ; Output:
 25589                                  ;	ES:BX Points to DEVCALL
 25590                                  ; No other registers effected
 25591                                  ;
 25592                                  ;---------------------------------------------------------------------------
 25593                                  
 25594                                  SETREAD:
 25595 000047DE 57                      	PUSH	DI
 25596 000047DF 51                      	PUSH	CX
 25597 000047E0 50                      	PUSH	AX
 25598 000047E1 B104                    	MOV	CL,DEVRD ; mov cl,4
 25599                                  SETCALLHEAD:
 25600 000047E3 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25601 000047E5 16                      	PUSH	SS
 25602 000047E6 07                      	POP	ES
 25603                                  					; DEVCALL is in DOSDATA
 25604 000047E7 BF[5A03]                	MOV	DI,DEVCALL
 25605                                  
 25606 000047EA AA                      	STOSB				; length
 25607 000047EB 58                      	POP	AX			; 
 25608 000047EC AA                      	STOSB				; Unit
 25609 000047ED 50                      	PUSH	AX
 25610 000047EE 88C8                    	MOV	AL,CL
 25611 000047F0 AA                      	STOSB				; Command code
 25612 000047F1 31C0                    	XOR	AX,AX
 25613 000047F3 AB                      	STOSW				; Status
 25614 000047F4 83C708                  	ADD	DI,8			; Skip link fields
 25615 000047F7 58                      	POP	AX
 25616 000047F8 86E0                    	XCHG	AH,AL
 25617 000047FA AA                      	STOSB				; Media byte
 25618 000047FB 86C4                    	XCHG	AL,AH
 25619 000047FD 50                      	PUSH	AX
 25620 000047FE 89D8                    	MOV	AX,BX
 25621 00004800 AB                      	STOSW
 25622                                  
 25623 00004801 8CD8                    	MOV	AX,DS
 25624 00004803 AB                      	STOSW				; Transfer addr
 25625                                  
 25626 00004804 59                      	POP	CX			; Real AX
 25627 00004805 58                      	POP	AX			; Real CX
 25628 00004806 AB                      	STOSW				; Count
 25629                                  
 25630 00004807 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25631 00004808 AB                      	STOSW				; Start
 25632 00004809 91                      	XCHG	AX,CX
 25633 0000480A 87D1                    	XCHG	DX,CX
 25634 0000480C 5F                      	POP	DI
 25635                                  					; DEVCALL is in DOSDATA
 25636 0000480D BB[5A03]                	MOV	BX,DEVCALL
 25637 00004810 C3                      	retn
 25638                                  
 25639                                  	;entry	SETWRITE
 25640                                  SETWRITE:
 25641                                  
 25642                                  ; Inputs:
 25643                                  ;	DS:BX = Transfer Address
 25644                                  ;	CX = Record Count
 25645                                  ;	DX = Starting Record
 25646                                  ;	AH = Media Byte
 25647                                  ;	AL = Unit Code
 25648                                  ; Function:
 25649                                  ;	Set up the device call header at DEVCALL
 25650                                  ; Output:
 25651                                  ;	ES:BX Points to DEVCALL
 25652                                  ; No other registers effected
 25653                                  
 25654 00004811 57                      	PUSH	DI
 25655 00004812 51                      	PUSH	CX
 25656 00004813 50                      	PUSH	AX
 25657 00004814 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25658 00004816 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25659 0000481B EBC6                    	JMP	SHORT SETCALLHEAD
 25660                                  
 25661                                  ; 30/04/2019 - Retro DOS v4.0
 25662                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25663                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25664                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25665                                  
 25666                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25667                                  ;---------------------------------------------------------------------------
 25668                                  ;
 25669                                  ; Procedure Name : RW_SC
 25670                                  ;
 25671                                  ; Inputs:
 25672                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25673                                  ;	 [SC_STATUS]= SC validity status
 25674                                  ;	 [SEQ_SECTOR]= last sector read
 25675                                  ; Function:
 25676                                  ;	Read from or write through secondary cache
 25677                                  ; Output:
 25678                                  ;	ES:BX Points to DEVCALL
 25679                                  ;	carry clear, I/O is not done
 25680                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25681                                  ;	carry set, I/O is done
 25682                                  ;
 25683                                  ;----------------------------------------------------------------------------
 25684                                  
 25685                                  RW_SC:
 25686                                  	; SS override for all variables used.
 25687                                  	
 25688 0000481D 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25689 00004823 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25690 00004825 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25691 0000482B 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25692 0000482D 51                      	PUSH	CX			    ;AN000;LB.
 25693 0000482E 52                      	PUSH	DX			    ;AN000;LB. yes
 25694 0000482F 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25695 00004830 56                      	PUSH	SI			    ;AN000;LB.
 25696 00004831 06                      	PUSH	ES			    ;AN000;LB.
 25697 00004832 57                      	PUSH	DI			    ;AN000;LB.
 25698                                  
 25699 00004833 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25700 00004838 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25701 0000483E 7408                    	JZ	short doread		    ;AN000;LB. yes
 25702 00004840 E8C400                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25703 00004843 E98E00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25704                                  scexit4:				    ;AN000;
 25705 00004846 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25706 00004847 C3                      	retn				    ;AN000;LB.
 25707                                  doread: 				    ;AN000;
 25708 00004848 E82601                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25709 0000484B 720A                    	JC	short readSC		    ;AN000;LB.
 25710 0000484D 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25711 00004854 F9                      	STC				    ;AN000;LB. set carry
 25712 00004855 EB6B                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25713                                  readSC: 				    ;AN000;
 25714 00004857 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25715 0000485B 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25716 00004860 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25717 00004865 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25718 0000486A 83F800                  	CMP	AX,0			    ;AN000;LB. greater than 64K
 25719 0000486D 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25720                                  chklow: 						
 25721 0000486F 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25722 00004872 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25723 00004874 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25724 0000487B 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25725 0000487F 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25726                                  readsr:
 25727 00004883 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25728 00004887 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25729 0000488B 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25730 0000488F 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25731                                  
 25732 00004893 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25733 00004897 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25734 0000489B 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25735 0000489F 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25736 000048A3 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25737 000048A9 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25738 000048AD 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25739 000048B1 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25740 000048B5 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25741 000048B9 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25742 000048BD 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25743                                  saveseq2:				    ;AN000;
 25744 000048C1 F8                      	CLC				    ;AN000;LB. clear carry
 25745                                  saveseq:				    ;AN000;	
 25746 000048C2 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25747 000048C6 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25748 000048CA 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25749 000048CE 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25750 000048D2 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25751                                  scexit2:				    ;AN000;LB.
 25752 000048D4 F8                      	CLC				    ;AN000;LB.	clear carry
 25753                                  scexit: 				    ;AN000;		
 25754 000048D5 5F                      	POP	DI			    ;AN000;LB.
 25755 000048D6 07                      	POP	ES			    ;AN000;LB. restore registers
 25756 000048D7 5E                      	POP	SI			    ;AN000;LB.
 25757 000048D8 1F                      	POP	DS			    ;AN000;LB.
 25758 000048D9 5A                      	POP	DX			    ;AN000;LB.
 25759 000048DA 59                      	POP	CX			    ;AN000;LB.
 25760 000048DB C3                      	retn				    ;AN000;LB.
 25761                                  
 25762                                  ;Break	<IN_SC -- check if in secondary cache>
 25763                                  ;--------------------------------------------------------------------------
 25764                                  ;
 25765                                  ; Procedure Name : IN_SC
 25766                                  ;
 25767                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25768                                  ;	   [CURSC_DRIVE]= current SC drive
 25769                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25770                                  ;	   [SC_CACHE_COUNT]= SC count
 25771                                  ;	   [HIGH_SECTOR]:DX= sector number
 25772                                  ; Function:
 25773                                  ;	Check if the sector is in secondary cache
 25774                                  ; Output:
 25775                                  ;	carry clear, in SC
 25776                                  ;	   CX= the index in the secondary cache
 25777                                  ;	carry set, not in SC
 25778                                  ;
 25779                                  ;---------------------------------------------------------------------------
 25780                                  
 25781                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25782                                  IN_SC:
 25783                                  	; SS override for all variables used
 25784 000048DC 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25785 000048E0 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25786 000048E5 751E                    	JNZ	short outrange2		    ;AN000;;LB. no
 25787 000048E7 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25788 000048EB 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25789 000048ED 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25790 000048F2 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25791 000048F7 83F800                  	CMP	AX,0			    ;AN000;;LB. greater than 64K
 25792 000048FA 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25793 000048FC 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25794 00004901 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25795 00004903 F8                      	CLC				    ;AN000;;LB. clear carry
 25796                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25797                                  	; 16/12/2022
 25798 00004904 C3                      	retn	; 30/04/2019
 25799                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25800                                  	;jmp	short inexit
 25801                                  
 25802                                  outrange2:				    ;AN000;;LB. set carry
 25803 00004905 F9                      	STC				    ;AN000;;LB.
 25804                                  inexit: 				    ;AN000;;LB.
 25805 00004906 C3                      	retn				    ;AN000;;LB.
 25806                                  
 25807                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25808                                  ;---------------------------------------------------------------------------
 25809                                  ;
 25810                                  ; Procedure Name : Invalidate_Sc
 25811                                  ;
 25812                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25813                                  ;	   [CURSC_DRIVE]= current SC drive
 25814                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25815                                  ;	   [SC_CACHE_COUNT]= SC count
 25816                                  ;	   [SC_STATUS]= SC status word
 25817                                  ;	   [HIGH_SECTOR]:DX= sector number
 25818                                  ;
 25819                                  ; Function:
 25820                                  ;	invalidate secondary cache if in there
 25821                                  ; Output:
 25822                                  ;	[SC_STATUS] is updated
 25823                                  ;---------------------------------------------------------------------------
 25824                                  
 25825                                  INVALIDATE_SC:
 25826                                  	; SS override for all variables used
 25827                                  
 25828 00004907 E8D2FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25829 0000490A 720C                    	JC	short outrange		    ;AN000;;LB. no
 25830 0000490C B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25831 0000490F D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25832 00004911 F7D0                    	NOT	AX			    ;AN000;;LB.
 25833 00004913 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25834                                  outrange:				    ;AN000;;LB.
 25835 00004918 C3                      	retn				    ;AN000;;LB.
 25836                                  
 25837                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25838                                  ; 22/11/2022
 25839                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25840                                  
 25841                                  ;Break	<VIRREAD- virtually read data into buffer>
 25842                                  ;--------------------------------------------------------------------------
 25843                                  ;
 25844                                  ; Procedure Name : SC_FLAG
 25845                                  ;
 25846                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25847                                  ;		     1, continuous sectors were read into SC
 25848                                  ; Function:
 25849                                  ;	   Move data from SC to buffer
 25850                                  ; Output:
 25851                                  ;	 carry clear, data is moved to buffer
 25852                                  ;	 carry set, bad sector or exceeds maximum sector
 25853                                  ;	   SC_FLAG =0
 25854                                  ;	   CALLSCNT=1
 25855                                  ;	   SC_STATUS= -1 if succeeded
 25856                                  ;     
 25857                                  ;		       0 if failed
 25858                                  ;--------------------------------------------------------------------------
 25859                                  
 25860                                  VIRREAD:
 25861                                  	; SS override for all variables used
 25862                                  
 25863 00004919 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25864 0000491F 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25865 00004921 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25866 00004925 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 25867 00004929 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 25868 0000492D 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 25869 00004931 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 25870 00004937 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 25871                                  
 25872                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 25873 0000493E 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 25874 00004944 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 25875 00004946 1E                      	PUSH	DS			    ;AN000;;LB.
 25876 00004947 56                      	PUSH	SI			    ;AN000;;LB.
 25877 00004948 06                      	PUSH	ES			    ;AN000;;LB.
 25878 00004949 57                      	PUSH	DI			    ;AN000;;LB.
 25879 0000494A 52                      	PUSH	DX			    ;AN000;;LB.
 25880 0000494B 51                      	PUSH	CX			    ;AN000;;LB.
 25881 0000494C 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 25882 0000494E E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC t
 25883 00004951 59                      	POP	CX
 25884 00004952 5A                      	POP	DX			    ;AN000;;LB.
 25885 00004953 5F                      	POP	DI			    ;AN000;;LB.
 25886 00004954 07                      	POP	ES			    ;AN000;;LB.
 25887 00004955 5E                      	POP	SI			    ;AN000;;LB.
 25888 00004956 1F                      	POP	DS			    ;AN000;;LB.
 25889 00004957 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 25890                                  scerror:				    ;AN000;
 25891 00004959 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 25892 00004960 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 25893 00004967 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 25894 0000496D F9                      	STC				    ;AN000;;LB. carry set
 25895 0000496E C3                      	retn				    ;AN000;;LB.
 25896                                  sc2end: 				    ;AN000;
 25897 0000496F F8                      	CLC				    ;AN000;;LB. carry clear
 25898 00004970 C3                      	retn				    ;AN000;;LB.
 25899                                  
 25900                                  ; 30/04/2019 - Retro  DOS v4.0
 25901                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 25902                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25903                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 25904                                  
 25905                                  ;Break	<SC2BUF- move data from SC to buffer>
 25906                                  ;----------------------------------------------------------------------------
 25907                                  ;
 25908                                  ; Procedure Name : SC2BUF
 25909                                  ;
 25910                                  ; Inputs:  [SC_STATUS] = SC validity status
 25911                                  ;	   [SC_SECTOR_SIZE] = request sector size
 25912                                  ;	   [SC_CACHE_PTR] = pointer to SC
 25913                                  ; Function:
 25914                                  ;	   Move data from SC to buffer
 25915                                  ; Output:
 25916                                  ;	   carry clear, in SC  and data is moved
 25917                                  ;	   carry set, not in SC and data is not moved
 25918                                  ;---------------------------------------------------------------------------
 25919                                  
 25920                                  SC2BUF:
 25921                                  	; SS override for all variables used
 25922 00004971 E868FF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 25923 00004974 7241                    	JC	short noSC		    ;AN000;LB. no
 25924 00004976 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 25925 00004979 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 25926 0000497B 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 25927 00004980 7435                    	JZ	short noSC		    ;AN000;LB. invalid
 25928                                  ;entry SC2BUF2
 25929                                  SC2BUF2:				    ;AN000;
 25930 00004982 89C8                    	MOV	AX,CX			    ;AN000;LB. times index with
 25931 00004984 36F726[AD0D]            	MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 25932 00004989 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 25933 0000498E 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25934 00004993 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 25935 00004995 89C6                    	MOV	SI,AX			    ;AN000;LB.
 25936 00004997 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 25937 0000499C 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 25938 000049A1 368B0E[AD0D]            	MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 25939 000049A6 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 25940                                  ;entry MOVWORDS
 25941                                  MOVWORDS:				    ;AN000;
 25942 000049A8 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 25943 000049AE 7403                    	JZ	short nodd		    ;AN000;LB. no
 25944 000049B0 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 25945 000049B2 66                      	DB	66H			    ;AN000;LB. use double word move
 25946                                  nodd:
 25947 000049B3 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 25948 000049B5 F8                      	CLC				    ;AN000;LB. clear carry
 25949 000049B6 C3                      	retn				    ;AN000;LB. exit
 25950                                  noSC:					    ;AN000;
 25951 000049B7 F9                      	STC				    ;AN000;LB. set carry
 25952                                  sexit:					    ;AN000;
 25953 000049B8 C3                      	retn				    ;AN000;LB.
 25954                                  
 25955                                  ;============================================================================
 25956                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 25957                                  ;============================================================================
 25958                                  ; 29/07/2018 - Retro DOS v3.0
 25959                                  ; 19/05/2019 - Retro DOS v4.0
 25960                                  
 25961                                  ;	TITLE	MKNODE - Node maker
 25962                                  ;	NAME	MKNODE
 25963                                  
 25964                                  ;**	MKNODE.ASM
 25965                                  ;----------------------------------------------------------------------------
 25966                                  ;	Low level routines for making a new local file system node
 25967                                  ;	and filling in an SFT from a directory entry
 25968                                  ;
 25969                                  ;	BUILDDIR
 25970                                  ;	SETDOTENT
 25971                                  ;	MakeNode
 25972                                  ;	NEWENTRY
 25973                                  ;	FREEENT
 25974                                  ;	NEWDIR
 25975                                  ;	DOOPEN
 25976                                  ;	RENAME_MAKE
 25977                                  ;	CHECK_VIRT_OPEN
 25978                                  ;
 25979                                  ;	Revision history:
 25980                                  ;
 25981                                  ;	 AN000	version 4.0  Jan. 1988
 25982                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 25983                                  
 25984                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 25985                                  ;----------------------------------------------------------------------------
 25986                                  ;
 25987                                  ; Procedure Name : BUILDDIR,NEWDIR
 25988                                  ;
 25989                                  ; Inputs:
 25990                                  ;       ES:BP Points to DPB
 25991                                  ;       [THISSFT] Set if using NEWDIR entry point
 25992                                  ;               (used by ALLOCATE)
 25993                                  ;       [LASTENT] current last valid entry number in directory if no free
 25994                                  ;               entries
 25995                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 25996                                  ; Function:
 25997                                  ;       Grow directory if no free entries and not root
 25998                                  ; Outputs:
 25999                                  ;       CARRY SET IF FAILURE
 26000                                  ;       ELSE
 26001                                  ;          AX entry number of new entry
 26002                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26003                                  ;               AX = first entry of new dir
 26004                                  ;       GETENT should be called to set [LASTENT]
 26005                                  ;
 26006                                  ;----------------------------------------------------------------------------
 26007                                  
 26008                                  ; 19/05/2019 - Retro DOS v4.0
 26009                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26010                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26011                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26012                                  
 26013                                  BUILDDIR:
 26014                                  	; 29/07/2018 - Retro DOS v3.0
 26015                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26016                                  
 26017 000049B9 A1[D805]                        MOV     AX,[ENTFREE]
 26018 000049BC 83F8FF                          CMP     AX,-1
 26019 000049BF 7402                            JZ	short CHECK_IF_ROOT
 26020 000049C1 F8                              CLC
 26021 000049C2 C3                              retn
 26022                                  
 26023                                  CHECK_IF_ROOT:
 26024 000049C3 833E[C205]00                    CMP     word [DIRSTART],0
 26025 000049C8 7502                            JNZ	short NEWDIR
 26026 000049CA F9                              STC
 26027                                  builddir_retn:
 26028 000049CB C3                              retn				; Can't grow root
 26029                                  
 26030                                  	;entry   NEWDIR
 26031                                  NEWDIR:        
 26032 000049CC 8B1E[C205]              	MOV     BX,[DIRSTART]
 26033 000049D0 09DB                            OR      BX,BX
 26034 000049D2 7405                            JZ	short NULLDIR
 26035 000049D4 E84006                  	call	GETEOF
 26036 000049D7 72F2                            jc	short builddir_retn	; Screw up
 26037                                  NULLDIR:
 26038 000049D9 B90100                          MOV     CX,1
 26039 000049DC E85105                  	call	ALLOCATE
 26040 000049DF 72EA                            jc	short  builddir_retn
 26041 000049E1 8B16[C205]                      MOV     DX,[DIRSTART]
 26042 000049E5 09D2                            OR      DX,DX
 26043 000049E7 750D                            JNZ	short ADDINGDIR
 26044 000049E9 E8BAF5                  	call	SETDIRSRCH
 26045 000049EC 72DD                            jc	short  builddir_retn
 26046 000049EE C706[4803]FFFF                  MOV     word [LASTENT],-1
 26047 000049F4 EB2B                            JMP     SHORT GOTDIRREC
 26048                                  ADDINGDIR:
 26049 000049F6 53                              PUSH    BX
 26050 000049F7 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26051 000049FB E84B0C                          call	IsEOF
 26052 000049FE 5B                              POP     BX
 26053 000049FF 7219                            JB	short NOTFIRSTGROW
 26054                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26055 00004A01 891E[BC05]                      MOV     [CLUSNUM],BX
 26056 00004A05 51                              PUSH    CX
 26057 00004A06 50                              PUSH    AX
 26058 00004A07 55                              PUSH    BP
 26059 00004A08 B401                            MOV     AH,1			; CLUSNUM update
 26060                                  	; 15/12/2022
 26061 00004A0A 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26062                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26063                                  	;;mov	dl,[es:bp+0]
 26064                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26065 00004A0E 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26066 00004A12 89DD                            MOV     BP,BX 			; CLUSNUM
 26067 00004A14 E887DD                  	call	FastOpen_Update
 26068 00004A17 5D                              POP     BP
 26069 00004A18 58                              POP     AX
 26070 00004A19 59                              POP     CX
 26071                                  
 26072                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26073                                  NOTFIRSTGROW:
 26074 00004A1A 89DA                            MOV     DX,BX
 26075 00004A1C 30DB                            XOR     BL,BL
 26076 00004A1E E8E304                  	call	FIGREC
 26077                                  GOTDIRREC:
 26078                                  	;mov	cl,[es:bp+4]
 26079 00004A21 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26080 00004A25 FEC1                            INC     CL
 26081 00004A27 30ED                            XOR     CH,CH
 26082                                  ZERODIR:
 26083 00004A29 51                              PUSH    CX
 26084                                  	;mov	byte [ALLOWED],18h
 26085 00004A2A C606[4B03]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 26086 00004A2F B0FF                            MOV     AL,0FFH
 26087 00004A31 E84E10                          call	GETBUFFR
 26088 00004A34 7302                            JNC	short GET_SSIZE
 26089 00004A36 59                              POP     CX
 26090 00004A37 C3                              retn
 26091                                  
 26092                                  GET_SSIZE:
 26093                                  	;mov	cx,[es:bp+2]
 26094 00004A38 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26095 00004A3C 06                              PUSH    ES
 26096 00004A3D C43E[E205]                      LES     DI,[CURBUF]
 26097                                  	;or	byte [es:di+5],4
 26098 00004A41 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26099 00004A46 57                              PUSH    DI
 26100                                  	;;add	di,16	; MSDOS 3.3
 26101                                  	;add	di,20	; MSDOS 6.0	
 26102 00004A47 83C714                          ADD     DI,BUFINSIZ
 26103 00004A4A 31C0                            XOR     AX,AX
 26104 00004A4C D1E9                            SHR     CX,1
 26105 00004A4E F3AB                            REP     STOSW
 26106 00004A50 7301                            JNC	short EVENZ
 26107 00004A52 AA                              STOSB
 26108                                  EVENZ:
 26109 00004A53 5F                              POP     DI
 26110                                  
 26111                                  	; MSDOS 6.0
 26112 00004A54 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26113                                  					;LB. if already dirty		  ;AN000;
 26114 00004A59 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26115 00004A5B E82A12                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26116                                          
 26117                                  	;or	byte [es:di+5],40h
 26118 00004A5E 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26119                                  yesdirty7:
 26120 00004A63 07                              POP	ES
 26121 00004A64 59                              POP	CX
 26122                                  
 26123                                  	; 19/05/2019 - Retro DOS v4.0
 26124                                  
 26125                                  	; MSDOS 3.3
 26126                                  	;INC	DX
 26127                                  
 26128                                  	; MSDOS 6.0
 26129 00004A65 83C201                  	add	dx,1
 26130 00004A68 8316[0706]00            	adc	word [HIGH_SECTOR],0
 26131                                  
 26132 00004A6D E2BA                            LOOP    ZERODIR
 26133                                  
 26134 00004A6F A1[4803]                        MOV     AX,[LASTENT]
 26135 00004A72 40                              INC     AX
 26136 00004A73 F8                              CLC
 26137 00004A74 C3                              retn
 26138                                  
 26139                                  ;--------------------------------------------------------------------------
 26140                                  ;
 26141                                  ; Procedure Name : SETDOTENT
 26142                                  ;
 26143                                  ; set up a . or .. directory entry for a directory.
 26144                                  ;
 26145                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26146                                  ;               AX contains ". " or ".."
 26147                                  ;               DX contains first cluster of entry
 26148                                  ;
 26149                                  ;----------------------------------------------------------------------------
 26150                                  
 26151                                  SETDOTENT:
 26152                                  ;	Fill in name field
 26153 00004A75 AB                              STOSW
 26154 00004A76 B90400                          MOV     CX,4
 26155 00004A79 B82020                          MOV     AX,"  " ; 2020h
 26156 00004A7C F3AB                            REP     STOSW
 26157 00004A7E AA                              STOSB
 26158                                  
 26159                                  ;	Set up attribute
 26160                                  	;mov	al, 10h
 26161 00004A7F B010                            MOV     AL,attr_directory
 26162 00004A81 AA                              STOSB
 26163                                  
 26164                                  ;	Initialize time and date of creation
 26165 00004A82 83C70A                          ADD     DI,10
 26166 00004A85 8B36[9E05]                      MOV     SI,[THISSFT]
 26167                                  	;mov	ax,[si+0Dh]
 26168 00004A89 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26169 00004A8C AB                              STOSW
 26170                                  	;mov	ax,[si+0Fh]
 26171 00004A8D 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26172 00004A90 AB                      	STOSW
 26173                                  
 26174                                  ;	Set up first cluster field
 26175 00004A91 89D0                            MOV     AX,DX
 26176 00004A93 AB                              STOSW
 26177                                  
 26178                                  ;	0 file size
 26179 00004A94 31C0                            XOR     AX,AX
 26180 00004A96 AB                              STOSW
 26181 00004A97 AB                              STOSW
 26182 00004A98 C3                              retn
 26183                                  
 26184                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26185                                  ;---------------------------------------------------------------------------
 26186                                  ;
 26187                                  ; Procedure Name : MakeNode
 26188                                  ;
 26189                                  ; Inputs:
 26190                                  ;       AL - attribute to create
 26191                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26192                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26193                                  ;               (AH ignored on dirs and devices)
 26194                                  ;
 26195                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26196                                  ;               a name already existant is ALWAYS an error in these cases.
 26197                                  ;
 26198                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26199                                  ;               terminated)
 26200                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26201                                  ;               ( = -1 if current dir not involved, else
 26202                                  ;                Points to first char after last "/" of current dir part)
 26203                                  ;       [THISCDS] Points to CDS being used
 26204                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26205                                  ; Function:
 26206                                  ;       Make a new node
 26207                                  ; Outputs:
 26208                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26209                                  ;       CARRY SET IF ERROR
 26210                                  ;          AX = 1 A node by this name exists and is a directory
 26211                                  ;          AX = 2 A new node could not be created
 26212                                  ;          AX = 3 A node by this name exists and is a disk file
 26213                                  ;               (AH was NZ on input)
 26214                                  ;          AX = 4 Bad Path
 26215                                  ;               SI return from GetPath maintained
 26216                                  ;          AX = 5 Attribute mismatch
 26217                                  ;          AX = 6 Sharing Violation
 26218                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26219                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26220                                  ;       ELSE
 26221                                  ;          AX = 0 Disk Node
 26222                                  ;          AX = 3 Device Node (error in some cases)
 26223                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26224                                  ;               containing new node.
 26225                                  ;          [CURBUF+2]:BX Points to entry
 26226                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26227                                  ;          [THISSFT] is filled in
 26228                                  ;               sf_mode = unchanged.
 26229                                  ;          Attribute byte in entry is input AL
 26230                                  ; DS preserved, others destroyed
 26231                                  ;
 26232                                  ;-------------------------------------------------------------------------
 26233                                  
 26234                                  ; 19/05/2019 - Retro DOS v4.0
 26235                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26236                                  
 26237                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26238                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26239                                  
 26240                                  MakeNode:
 26241                                  	;mov	word [CREATING],0E5FFh
 26242 00004A99 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26243 00004A9F 50                              PUSH    AX              ; Save AH value
 26244 00004AA0 C606[4C03]00            	MOV	byte [NoSetDir],0
 26245 00004AA5 A2[6D05]                	MOV	[SATTRIB],AL
 26246 00004AA8 E861F5                  	call	GetPathNoSet
 26247 00004AAB 88CA                            MOV     DL,CL           ; Save CL info
 26248 00004AAD 89C1                            MOV     CX,AX           ; Device ID to CH
 26249 00004AAF 58                              POP     AX              ; Get back AH
 26250 00004AB0 732E                            JNC	short make_exists ; File existed
 26251 00004AB2 7505                            JNZ	short make_err_4 ; Path bad
 26252 00004AB4 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26253 00004AB7 7406                            JZ	short make_type	; Name simply not found, and no metas
 26254                                  make_err_4:
 26255 00004AB9 B004                            MOV     AL,4            ; case 1 bad path
 26256                                  make_err_ret:
 26257 00004ABB 30E4                            XOR     AH,AH
 26258 00004ABD F9                              STC
 26259                                  ;make_retn:	; 22/11/2022
 26260 00004ABE C3                              retn
 26261                                  
 26262                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26263                                  RENAME_MAKE:
 26264                                  make_type:
 26265                                  ;Extended Open hooks
 26266                                  	; MSDOS 6.0
 26267                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26268 00004ABF F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26269 00004AC4 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26270 00004AC6 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26271                                  					;FT. set for extended open ;AN000;
 26272                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26273 00004ACB F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26274 00004AD0 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26275 00004AD2 F9                      	STC				;FT. set carry			;AN000;
 26276 00004AD3 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26277                                  	; 22/11/2022
 26278                                  make_retn:
 26279                                  	;return
 26280 00004AD6 C3                      	retn				;FT.				;AN000;
 26281                                  
 26282                                  ;	Extended Open hooks
 26283                                  
 26284                                  make_type2:
 26285 00004AD7 C43E[9E05]                      LES     DI,[THISSFT]
 26286 00004ADB 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26287 00004ADD F9                              STC                     ; Not found
 26288 00004ADE EB5A                            JMP     short make_new
 26289                                  
 26290                                  ; The node exists. It may be either a device, directory or file:
 26291                                  ;   Zero set => directory
 26292                                  ;   High bit of CH on => device
 26293                                  ;   else => file
 26294                                  
 26295                                  make_exists:
 26296 00004AE0 7448                            JZ	short make_exists_dir
 26297 00004AE2 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26298                                  	;test	byte [ATTRIB],18h
 26299 00004AE4 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26300 00004AE9 753B                            JNZ	short make_err_ret_5
 26301                                  				; Cannot already exist as Disk or Device Node
 26302                                                                  ;       if making DIR or Volume ID
 26303 00004AEB 08ED                            OR      CH,CH
 26304 00004AED 781A                            JS	short make_share ; No further checks on attributes if device
 26305 00004AEF 08E4                            OR      AH,AH
 26306 00004AF1 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26307 00004AF3 51                              PUSH    CX              ; Save device ID
 26308 00004AF4 8E06[E405]                      MOV     ES,[CURBUF+2]
 26309                                  	;mov	ch,[es:bx+0Bh]
 26310 00004AF8 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26311                                  	;test	ch,1
 26312 00004AFC F6C501                  	test	CH,attr_read_only
 26313 00004AFF 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26314 00004B01 E8B8F7                  	call	MatchAttributes
 26315 00004B04 59                              POP     CX              ; Devid back in CH
 26316 00004B05 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26317 00004B07 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26318                                  make_share:
 26319 00004B09 30E4                            XOR     AH,AH
 26320 00004B0B 50                              PUSH    AX              ; Save Disk or Device node
 26321 00004B0C 51                              PUSH    CX              ; Save Device ID
 26322 00004B0D 88EC                            MOV     AH,CH           ; Device ID to AH
 26323 00004B0F E84601                          CALL    DOOPEN          ; Fill in SFT for share check
 26324 00004B12 C43E[9E05]                      LES     DI,[THISSFT]
 26325 00004B16 56                      	push	si
 26326 00004B17 53                      	push	bx		; Save CURBUF pointers
 26327 00004B18 E89629                  	call	ShareEnter
 26328 00004B1B 735A                            jnc	short MakeEndShare
 26329                                  
 26330                                  ; User failed request.
 26331 00004B1D 5B                      	pop	bx
 26332 00004B1E 5E                      	pop	si
 26333 00004B1F 59                      	pop	cx
 26334 00004B20 58                      	pop	ax
 26335                                  
 26336                                  Make_Share_ret:
 26337 00004B21 B006                            MOV     AL,6
 26338 00004B23 EB96                            JMP	short make_err_ret
 26339                                  
 26340                                  make_err_ret_5P:
 26341 00004B25 59                              POP     CX              ; Get back device ID
 26342                                  make_err_ret_5:
 26343 00004B26 B005                            MOV     AL,5            ; Attribute mismatch
 26344                                          ; 22/11/2022
 26345 00004B28 EB91                    	JMP     short make_err_ret
 26346                                  
 26347                                  make_exists_dir:
 26348 00004B2A B001                            MOV     AL,1            ; exists as directory, always an error
 26349                                  	; 22/11/2022
 26350 00004B2C EB8D                    	JMP     short make_err_ret
 26351                                  
 26352                                  make_save:
 26353 00004B2E 50                              PUSH    AX              ; Save whether Disk or File
 26354 00004B2F 89C8                            MOV     AX,CX           ; Device ID to AH
 26355 00004B31 E87400                          CALL    NEWENTRY
 26356 00004B34 58                              POP     AX              ; 0 if Disk, 3 if File
 26357 00004B35 739F                            jnc	short make_retn
 26358 00004B37 B002                            MOV     AL,2            ; create failed case 2
 26359                                  make_save_retn:
 26360 00004B39 C3                              retn
 26361                                  
 26362                                  make_new:
 26363 00004B3A E8F1FF                          call    make_save
 26364 00004B3D 72FA                            jc	short make_save_retn	; case 2 fail
 26365                                  	;test	byte [ATTRIB],10h
 26366 00004B3F F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26367 00004B44 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26368                                  					; so don't tell the sharer about them
 26369 00004B46 50                      	push	ax
 26370 00004B47 53                      	push	bx
 26371 00004B48 56                      	push	si		
 26372 00004B49 E86529                          call	ShareEnter
 26373 00004B4C 5E                      	pop	si
 26374 00004B4D 5B                      	pop	bx
 26375 00004B4E 58                      	pop	ax
 26376 00004B4F 73E8                    	jnc	short make_save_retn
 26377                                  
 26378                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26379                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26380                                  ; possible: delete the newly created directory entry and return share_error.
 26381                                  
 26382 00004B51 50                              PUSH    AX
 26383 00004B52 C43E[E205]                      LES     DI,[CURBUF]
 26384                                  	;mov	byte [es:bx],0E5h
 26385 00004B56 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26386                                  	
 26387                                  	; MSDOS 6.0
 26388                                  	;test	byte [es:di+5],40h
 26389 00004B5A 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26390                                  					;LB. if already dirty		  ;AN000;
 26391 00004B5F 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26392                                  	; 22/11/2022
 26393 00004B61 E82411                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26394                                  	;or	byte [es:di+5],40h
 26395 00004B64 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26396                                  yesdirty8:
 26397 00004B69 C42E[8A05]                      LES     BP,[THISDPB]
 26398                                  	; 15/12/2022
 26399 00004B6D 268A4600                        mov	al,[ES:BP]
 26400                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26401                                  	;;mov	al,[es:bp+0]
 26402                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26403 00004B71 E80C10                          call	FLUSHBUF		; write out buffer.
 26404 00004B74 58                              POP     AX
 26405 00004B75 EBAA                            jmp	short Make_Share_ret
 26406                                  
 26407                                  ; We have found an existing file. We have also entered it into the share set.
 26408                                  ; At this point we need to call newentry to correctly address the problem of
 26409                                  ; getting rid of old data (create an existing file) or creating a new
 26410                                  ; directory entry (create a new file). Unfortunately, this operation may
 26411                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26412                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26413                                  ; the share set now, do the operation and then reassert the share access.
 26414                                  ;
 26415                                  ; We are allowed to do this! There is no window! After all, we are in
 26416                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26417                                  
 26418                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26419                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26420                                  
 26421                                  MakeEndShare:
 26422 00004B77 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26423 00004B7B 31C0                            XOR     AX,AX
 26424 00004B7D E813C8                  	call	ECritSFT
 26425 00004B80 268705                  	xchg	AX,[ES:DI]
 26426                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26427 00004B83 50                      	push	ax
 26428 00004B84 57                      	push	di
 26429 00004B85 06                      	push	es
 26430 00004B86 9C                              PUSHF
 26431 00004B87 E82229                          call	ShareEnd                ; remove sharing
 26432 00004B8A 9D                              POPF
 26433 00004B8B 07                      	pop	es
 26434 00004B8C 5F                      	pop	di
 26435 00004B8D 268F05                          pop	word [ES:DI]	
 26436                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26437 00004B90 E81BC8                  	call	LCritSFT
 26438                                  	; 22/11/2022
 26439                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26440 00004B93 5B                      	pop	bx
 26441 00004B94 5E                      	pop	si
 26442 00004B95 59                      	pop	cx
 26443 00004B96 58                      	pop	ax
 26444 00004B97 E894FF                          CALL    make_save
 26445                                  
 26446                                  ; If the user failed, we do not reenter into the sharing set.
 26447                                  
 26448 00004B9A 729D                            jc	short make_save_retn	; bye if error
 26449 00004B9C 50                      	push	ax
 26450 00004B9D 53                      	push	bx
 26451 00004B9E 56                      	push	si
 26452 00004B9F 9C                              PUSHF
 26453 00004BA0 E80E29                          call	ShareEnter
 26454 00004BA3 9D                              POPF
 26455 00004BA4 5E                      	pop	si
 26456 00004BA5 5B                      	pop	bx
 26457 00004BA6 58                      	pop	ax
 26458                                  
 26459                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26460                                  
 26461                                  makeendshare_retn:
 26462 00004BA7 C3                              retn
 26463                                  
 26464                                  ;---------------------------------------------------------------------------
 26465                                  ;
 26466                                  ; Procedure Name : NEWENTRY
 26467                                  ;
 26468                                  ; Inputs:
 26469                                  ;       [THISSFT] set
 26470                                  ;       [THISDPB] set
 26471                                  ;       [LASTENT] current last valid entry number in directory if no free
 26472                                  ;               entries
 26473                                  ;       [VOLID] set if a volume ID was found during search
 26474                                  ;	Attrib Contains attributes for new file
 26475                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26476                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26477                                  ;               NC means file existed (device)
 26478                                  ;               C  means file did not exist
 26479                                  ;       AH = Device ID byte
 26480                                  ;       If FILE
 26481                                  ;           [CURBUF+2]:BX points to start of directory entry
 26482                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26483                                  ;       If device
 26484                                  ;           DS:BX points to start of "fake" directory entry
 26485                                  ;           DS:SI points to dir_first of "fake" directory entry
 26486                                  ;               (has DWORD pointer to device header)
 26487                                  ; Function:
 26488                                  ;       Make a new directory entry
 26489                                  ;       If an old one existed it is truncated first
 26490                                  ; Outputs:
 26491                                  ;       Carry set if error
 26492                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26493                                  ;               vol ID, user FAILed to I 24
 26494                                  ;       else
 26495                                  ;               outputs of DOOPEN
 26496                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26497                                  ;
 26498                                  ;----------------------------------------------------------------------------
 26499                                  
 26500                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26501                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26502                                  
 26503                                  NEWENTRY:
 26504 00004BA8 C42E[8A05]                      LES     BP,[THISDPB]
 26505 00004BAC 7316                            JNC	short EXISTENT	
 26506 00004BAE 803E[4A03]00                    CMP     byte [FAILERR],0
 26507 00004BB3 F9                              STC
 26508 00004BB4 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 26509 00004BB6 E800FE                          CALL    BUILDDIR        ; Try to build dir
 26510 00004BB9 72EC                            jc	short makeendshare_retn	; Failed
 26511 00004BBB E8BAF3                          call	GETENT          ; Point at that free entry
 26512 00004BBE 72E7                            jc	short makeendshare_retn	; Failed
 26513 00004BC0 EB0E                            JMP     SHORT FREESPOT
 26514                                  
 26515                                  ERRRET3:
 26516 00004BC2 F9                              STC
 26517                                  newentry_retn:
 26518 00004BC3 C3                              retn
 26519                                  
 26520                                  EXISTENT:
 26521 00004BC4 08E4                            OR      AH,AH           ; Check if file is I/O device
 26522 00004BC6 7903                            JNS	short NOT_DEV1
 26523 00004BC8 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26524                                  
 26525                                  NOT_DEV1:
 26526 00004BCB E82C01                          call	FREEENT		; Free cluster chain
 26527 00004BCE 72F3                            jc	short newentry_retn ; Failed
 26528                                  FREESPOT:
 26529                                  	;test	byte [ATTRIB],8
 26530 00004BD0 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26531 00004BD5 7407                            JZ	short NOTVOLID
 26532 00004BD7 803E[7B05]00                    CMP     BYTE [VOLID],0
 26533 00004BDC 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26534                                  NOTVOLID:
 26535 00004BDE 8E06[E405]                      MOV     ES,[CURBUF+2]
 26536 00004BE2 89DF                            MOV     DI,BX
 26537                                  
 26538 00004BE4 BE[4B05]                        MOV     SI,NAME1
 26539                                  
 26540 00004BE7 B90500                          MOV     CX,5
 26541 00004BEA F3A5                            REP     MOVSW
 26542 00004BEC A4                              MOVSB                   ; Move name into dir entry
 26543 00004BED A0[6B05]                	MOV	AL,[ATTRIB]
 26544 00004BF0 AA                      	STOSB                   ; Attributes
 26545                                  
 26546                                  ;; File Tagging for Create DOS 4.00
 26547 00004BF1 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26548                                  ;; File Tagging for Create DOS 4.00
 26549                                  
 26550 00004BF3 31C0                            XOR     AX,AX
 26551 00004BF5 F3AB                            REP     STOSW           ; Zero pad
 26552 00004BF7 E850BF                          call	DATE16
 26553 00004BFA 92                              XCHG    AX,DX
 26554 00004BFB AB                              STOSW                   ; dir_time
 26555 00004BFC 92                              XCHG    AX,DX
 26556 00004BFD AB                              STOSW                   ; dir_date
 26557 00004BFE 31C0                            XOR     AX,AX
 26558 00004C00 57                              PUSH    DI              ; Correct SI input value
 26559                                  				; 	(recomputed for new buffer)
 26560 00004C01 AB                              STOSW                   ; Zero dir_first and size
 26561 00004C02 AB                              STOSW
 26562 00004C03 AB                              STOSW
 26563                                  updnxt:
 26564 00004C04 8B36[E205]              	MOV	SI,[CURBUF]
 26565                                  
 26566                                  	; 19/05/2019 - Retro DOS v4.0
 26567                                  
 26568                                  	; MSDOS 6.0
 26569 00004C08 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26570                                  				;LB. if already dirty		  ;AN000;
 26571 00004C0D 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26572 00004C0F E87610                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26573                                          
 26574                                  	;or	byte [es:si+5],40h
 26575 00004C12 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26576                                  yesdirty9:
 26577 00004C17 C42E[8A05]                      LES     BP,[THISDPB]
 26578                                  	; 15/12/2022
 26579 00004C1B 268A4600                	MOV	AL,[ES:BP]
 26580                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26581                                  	;;mov	al,[es:bp+0]
 26582                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26583 00004C1F 50                              PUSH    AX
 26584 00004C20 53                              PUSH    BX
 26585                                  
 26586                                  ; If we have a file, we need to increment the open ref. count so that
 26587                                  ; we have some protection against invalid media changes if an Int 24
 26588                                  ; error occurs.
 26589                                  ; Do nothing for a device.
 26590                                  
 26591 00004C21 06                      	push	es
 26592 00004C22 57                      	push	di
 26593 00004C23 C43E[9E05]                      LES     DI,[THISSFT]
 26594                                  	;test	word [es:di+5],80h
 26595                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26596 00004C27 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26597 00004C2C 751A                            jnz	short GotADevice
 26598 00004C2E 1E                      	push	ds
 26599 00004C2F 53                      	push	bx
 26600 00004C30 C51E[8A05]                      LDS     BX,[THISDPB]
 26601                                  	;mov	[es:di+7],bx
 26602 00004C34 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26603 00004C38 8CDB                            MOV     BX,DS
 26604                                  	;mov	[es:di+9],bx
 26605 00004C3A 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26606 00004C3E 5B                      	pop	bx
 26607 00004C3F 1F                      	pop	ds ; need to use DS for segment later on
 26608 00004C40 E8A1FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26609 00004C43 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26610                                  GotADevice:
 26611 00004C48 5F                      	pop	di
 26612 00004C49 07                      	pop	es
 26613                                  
 26614 00004C4A E8330F                          call	FLUSHBUF
 26615 00004C4D E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26616 00004C50 5B                              POP     BX
 26617 00004C51 58                              POP     AX
 26618 00004C52 5E                              POP     SI              ; Get SI input back
 26619 00004C53 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26620 00004C55 7301                    	jnc	short DOOPEN    ; Failed
 26621 00004C57 C3                      	retn
 26622                                  	
 26623                                  ;NOTE FALL THROUGH
 26624                                  
 26625                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26626                                  
 26627                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26628                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26629                                  
 26630                                  ; DOOPEN
 26631                                  ;----------------------------------------------------------------------------
 26632                                  ;
 26633                                  ; Inputs:
 26634                                  ;       [THISDPB] points to DPB if file
 26635                                  ;       [THISSFT] points to SFT being used
 26636                                  ;       AH = Device ID byte
 26637                                  ;       If FILE
 26638                                  ;           [CURBUF+2]:BX points to start of directory entry
 26639                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26640                                  ;       If device
 26641                                  ;           DS:BX points to start of "fake" directory entry
 26642                                  ;           DS:SI points to dir_first of "fake" directory entry
 26643                                  ;               (has DWORD pointer to device header)
 26644                                  ; Function:
 26645                                  ;       Fill in SFT from dir entry
 26646                                  ; Outputs:
 26647                                  ;       CARRY CLEAR
 26648                                  ;       sf_ref_count and sf_mode fields not altered
 26649                                  ;       sf_flags high byte = 0
 26650                                  ;       sf_flags low byte = AH except
 26651                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26652                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26653                                  ;       sf_position = 0
 26654                                  ;       If device
 26655                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26656                                  ;           sf_size = 0
 26657                                  ;       If file
 26658                                  ;           sf_firclus sf_size set from entry
 26659                                  ;           sf_devptr = [THISDPB]
 26660                                  ;           sf_cluspos = 0
 26661                                  ;           sf_lstclus = sf_firclus
 26662                                  ;           sf_dirsec sf_dirpos set
 26663                                  ; DS,SI,BX preserved, others destroyed
 26664                                  ;
 26665                                  ;----------------------------------------------------------------------------
 26666                                  
 26667                                  	;entry	DOOPEN
 26668                                  DOOPEN:
 26669                                  ;	Generate and store attribute
 26670                                  
 26671 00004C58 88E6                            MOV     DH,AH           ; AH to different place
 26672 00004C5A C43E[9E05]                      LES     DI,[THISSFT]
 26673                                  	;add	di,4
 26674 00004C5E 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26675 00004C61 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 26676                                                                  ;   attribute of 0 (for R/O testing etc).
 26677 00004C63 08F6                            OR      DH,DH           ; See if our assumption good.
 26678 00004C65 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26679 00004C67 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26680                                  	;mov	al,[BX+0Bh]
 26681 00004C6B 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26682                                  				; If file, get attrib from dir entry
 26683                                  DEV_SFT1:
 26684 00004C6E AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26685                                  
 26686                                  ;	Generate and store flags word
 26687                                  
 26688 00004C6F 31C0                            XOR     AX,AX
 26689 00004C71 88F0                            MOV     AL,DH
 26690                                  	;or	al,40h
 26691 00004C73 0C40                            OR      AL,devid_file_clean
 26692 00004C75 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26693                                  
 26694                                  ;	Generate and store device pointer
 26695                                  
 26696 00004C76 1E                              PUSH    DS
 26697                                  	;lds	ax,[bx+1Ah]
 26698 00004C77 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26699 00004C7A 08F6                            OR      DH,DH
 26700 00004C7C 7805                            JS	short DEV_SFT2
 26701                                  
 26702                                  ;hkn; SS override
 26703 00004C7E 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26704                                  DEV_SFT2:
 26705 00004C83 AB                              STOSW 			; store offset
 26706 00004C84 8CD8                            MOV     AX,DS
 26707 00004C86 1F                              POP     DS
 26708 00004C87 AB                      	STOSW			; store segment
 26709                                  				; ES:DI -> sf_firclus
 26710                                  
 26711                                  ;	Generate pointer to, generate and store first cluster 
 26712                                  ;	(irrelevant for devices)
 26713                                  
 26714 00004C88 56                              PUSH    SI              ; Save pointer to dir_first
 26715 00004C89 A5                              MOVSW                   ; dir_first -> sf_firclus
 26716                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26717                                  
 26718                                  ;	Copy time/date of last modification
 26719                                  
 26720                                  	;sub	si,6
 26721 00004C8A 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26722                                  				; DS:SI->dir_time
 26723 00004C8D A5                              MOVSW                   ; dir_time -> sf_time
 26724                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26725 00004C8E A5                              MOVSW                   ; dir_date -> sf_date
 26726                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26727                                  
 26728                                  ;	Generate and store file size (0 for devices)
 26729                                  
 26730 00004C8F AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26731 00004C90 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 26732 00004C91 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26733 00004C93 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26734 00004C94 08F6                            OR      DH,DH
 26735 00004C96 7904                            JNS	short FILE_SFT1
 26736 00004C98 31C0                            XOR     AX,AX
 26737 00004C9A 89C1                            MOV     CX,AX           ; Devices are open ended
 26738                                  FILE_SFT1:
 26739 00004C9C 91                              XCHG    AX,CX
 26740 00004C9D AB                              STOSW                   ; Low word of sf_size
 26741 00004C9E 91                              XCHG    AX,CX
 26742 00004C9F AB                              STOSW                   ; High word of sf_size
 26743                                                                  ; ES:DI -> sf_position
 26744                                  ; Initialize position to 0
 26745                                  
 26746 00004CA0 31C0                            XOR     AX,AX
 26747 00004CA2 AB                              STOSW
 26748 00004CA3 AB                              STOSW                   ; sf_position
 26749                                                                  ; ES:DI -> sf_cluspos
 26750                                  
 26751                                  ; Generate cluster optimizations for files
 26752                                  
 26753 00004CA4 08F6                            OR      DH,DH
 26754 00004CA6 7843                            JS	short DEV_SFT3
 26755 00004CA8 AB                              STOSW                   ; sf_cluspos ; 19h
 26756                                  	;mov	ax,[bx+1Ah]
 26757 00004CA9 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26758                                  	; 19/05/2019
 26759                                  	; MSDOS 3.3
 26760                                  	;STOSW 			; sf_lstclus ; 1Bh
 26761                                  	; MSDOS 6.0
 26762 00004CAC 57                              PUSH	DI              ;AN004; save dirsec offset
 26763                                  	;sub	di,1Bh
 26764 00004CAD 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26765                                  	;mov	[es:di+35h],ax
 26766 00004CB0 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26767 00004CB4 5F                              POP	DI              ;AN004; restore dirsec offset
 26768                                  
 26769                                  ; DOS 3.3  FastOpen  6/13/86
 26770                                  
 26771 00004CB5 1E                      	PUSH	DS
 26772                                  
 26773                                  ;hkn; SS is DOSDATA
 26774 00004CB6 16                      	push	ss
 26775 00004CB7 1F                      	pop	ds
 26776                                  	;test	byte [FastOpenFlg],4
 26777 00004CB8 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26778 00004CBD 7411                    	JZ	short Not_FastOpen
 26779                                  
 26780                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26781 00004CBF BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26782                                  
 26783                                  	;mov	ax,[si+1]
 26784 00004CC2 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26785 00004CC5 AB                              STOSW                   ; sf_dirsec
 26786                                  	; MSDOS 6.0
 26787                                  	;mov	ax,[si+3]
 26788 00004CC6 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26789                                  				;;; changed for >32mb
 26790 00004CC9 AB                              STOSW                   ; sf_dirsec
 26791                                  	; 19/08//2018
 26792 00004CCA 8A04                    	mov	al,[SI]
 26793                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26794 00004CCC AA                              STOSB                   ; sf_dirpos
 26795 00004CCD 1F                              POP	DS
 26796 00004CCE EB19                            JMP     short Next_Name
 26797                                  
 26798                                  ; DOS 3.3  FastOpen  6/13/86
 26799                                  
 26800                                  Not_FastOpen:
 26801                                          ;POP     DS		; normal path
 26802                                  
 26803                                  ;hkn; SS override
 26804                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26805                                  	; 16/12/2022
 26806                                  	; 28/07/2019
 26807 00004CD0 8B36[E205]              	mov	si,[CURBUF]
 26808 00004CD4 1F                      	pop	ds
 26809                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26810                                  	;pop	ds
 26811                                  	;mov	si,[ss:CURBUF]
 26812                                  	
 26813                                  	;mov	ax,[si+6]
 26814 00004CD5 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26815 00004CD8 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26816                                  	; 19/05/2019        
 26817                                  	; MSDOS 6.0
 26818                                  	;mov	ax,[si+8]
 26819 00004CD9 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26820 00004CDC AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26821                                          
 26822 00004CDD 89D8                    	MOV     AX,BX
 26823                                  	;;add	si,16	; MSDOS 3.3	
 26824                                  	;add	si,20	; MSDOS 6.0
 26825 00004CDF 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26826 00004CE2 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26827                                          ;mov	cl,32
 26828 00004CE4 B120                    	MOV     CL,dir_entry.size
 26829 00004CE6 F6F1                            DIV     CL
 26830 00004CE8 AA                              STOSB                   ; sf_dirpos
 26831                                  Next_Name:
 26832 00004CE9 EB03                            JMP     SHORT FILE_SFT2
 26833                                  
 26834                                  DEV_SFT3:
 26835                                  	;add	di,7
 26836 00004CEB 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26837                                  FILE_SFT2:
 26838                                  
 26839                                  ; Copy in the object's name
 26840                                  
 26841 00004CEE 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26842 00004CF0 B90B00                          MOV     CX,11
 26843 00004CF3 F3A4                            REP     MOVSB           ; sf_name
 26844 00004CF5 5E                              POP     SI              ; recover DS:SI -> dir_first
 26845                                  
 26846                                  ;hkn; SS is DOSDATA
 26847 00004CF6 16                              push	ss
 26848 00004CF7 1F                      	pop	ds
 26849 00004CF8 F8                              CLC
 26850 00004CF9 C3                              retn
 26851                                  
 26852                                  ;---------------------------------------------------------------------------
 26853                                  ;
 26854                                  ; Procedure Name : FREEENT
 26855                                  ;
 26856                                  ; Inputs:
 26857                                  ;       ES:BP -> DPB
 26858                                  ;       [CURBUF] Set
 26859                                  ;       [CURBUF+2]:BX points to directory entry
 26860                                  ;       [CURBUF+2]:SI points to above dir_first
 26861                                  ; Function:
 26862                                  ;       Free the cluster chain for the entry if present
 26863                                  ; Outputs:
 26864                                  ;       Carry set if error (currently user FAILed to I 24)
 26865                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 26866                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 26867                                  ;---------------------------------------------------------------------------
 26868                                  
 26869                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26870                                  FREEENT:
 26871 00004CFA 1E                              PUSH    DS
 26872 00004CFB C53E[E205]                      LDS     DI,[CURBUF]
 26873 00004CFF 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 26874                                  	; 19/05/2019 - Retro DOS v4.0
 26875                                  	; MSDOS 6.0
 26876 00004D01 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 26877                                  ;hkn; SS override
 26878 00004D04 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 26879 00004D09 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 26880 00004D0C 1F                              POP     DS
 26881 00004D0D 83F902                  	CMP	CX,2
 26882 00004D10 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 26883                                  	;cmp	cx,[es:bp+0Dh]
 26884 00004D12 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 26885 00004D16 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 26886 00004D18 29FB                            SUB     BX,DI
 26887 00004D1A 53                              PUSH    BX              ; Save offset
 26888 00004D1B FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26889 00004D1F 52                              PUSH    DX              ; Save sector number
 26890 00004D20 89CB                            MOV     BX,CX
 26891 00004D22 E8B702                          call	RELEASE         ; Free any data allocated
 26892 00004D25 5A                              POP     DX
 26893 00004D26 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26894 00004D2A 7302                            JNC	short GET_BUF_BACK
 26895 00004D2C 5B                              POP     BX
 26896                                  freeent_retn:
 26897 00004D2D C3                              retn			; Screw up
 26898                                  
 26899                                  GET_BUF_BACK:
 26900                                  	;mov	byte [ALLOWED],18h
 26901 00004D2E C606[4B03]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 26902 00004D33 30C0                            XOR     AL,AL
 26903 00004D35 E84A0D                  	call	GETBUFFR        ; Get sector back
 26904 00004D38 5B                              POP     BX              ; Get offset back
 26905 00004D39 72F2                            jc	short freeent_retn
 26906 00004D3B E869EA                  	call	SET_BUF_AS_DIR
 26907 00004D3E 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 26908 00004D42 89DE                            MOV     SI,BX
 26909                                  	;add	si,1Ah
 26910 00004D44 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 26911                                  RET1:
 26912 00004D47 F8                              CLC
 26913 00004D48 C3                              retn
 26914                                  
 26915                                  ;---------------------------------------------------------------------------
 26916                                  ;
 26917                                  ; Procedure Name : CHECK_VIRT_OPEN
 26918                                  ;
 26919                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 26920                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 26921                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 26922                                  ; flag [VIRTUAL_OPEN].
 26923                                  ; No registers affected (including flags).
 26924                                  ; On input, [THISSFT] points to current SFT.
 26925                                  ;
 26926                                  ;---------------------------------------------------------------------------
 26927                                  
 26928                                  CHECK_VIRT_OPEN:
 26929 00004D49 50                      	PUSH    AX
 26930 00004D4A 9F                              lahf                    ; preserve flags
 26931 00004D4B 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 26932 00004D50 7410                            JZ	short ALL_CLOSED
 26933 00004D52 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 26934 00004D57 06                      	push	es
 26935 00004D58 57                      	push	di
 26936 00004D59 C43E[9E05]                      LES     DI,[THISSFT]
 26937 00004D5D E88CF9                          call	DEV_CLOSE_SFT
 26938 00004D60 5F                      	pop	di
 26939 00004D61 07                      	pop	es
 26940                                  
 26941                                  ALL_CLOSED:
 26942 00004D62 9E                              sahf                    ; restore flags
 26943 00004D63 58                              POP     AX
 26944 00004D64 C3                              retn
 26945                                  
 26946                                  ;============================================================================
 26947                                  ; ROM.ASM, MSDOS 6.0, 1991
 26948                                  ;============================================================================
 26949                                  ; 29/07/2018 - Retro DOS v3.0
 26950                                  ; 20/05/2019 - Retro DOS v4.0
 26951                                  
 26952                                  ;	TITLE	ROM - Miscellaneous routines
 26953                                  ;	NAME	ROM
 26954                                  
 26955                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 26956                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 26957                                  ;
 26958                                  ;	SKPCLP
 26959                                  ;	FNDCLUS
 26960                                  ;	BUFSEC
 26961                                  ;	BUFRD
 26962                                  ;	BUFWRT
 26963                                  ;	NEXTSEC
 26964                                  ;	OPTIMIZE
 26965                                  ;	FIGREC
 26966                                  ;	ALLOCATE
 26967                                  ;	RESTFATBYT
 26968                                  ;	RELEASE
 26969                                  ;	RELBLKS
 26970                                  ;	GETEOF
 26971                                  ;
 26972                                  ;	Modification history:
 26973                                  ;
 26974                                  ;		Created: ARR 30 March 1983
 26975                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 26976                                  
 26977                                  ;Break   <FNDCLUS -- Skip over allocation units>
 26978                                  ;--------------------------------------------------------------------------
 26979                                  ;
 26980                                  ; Procedure Name : FNDCLUS
 26981                                  ;
 26982                                  ; Inputs:
 26983                                  ;       CX = No. of clusters to skip
 26984                                  ;       ES:BP = Base of drive parameters
 26985                                  ;       [THISSFT] point to SFT
 26986                                  ; Outputs:
 26987                                  ;       BX = Last cluster skipped to
 26988                                  ;       CX = No. of clusters remaining (0 unless EOF)
 26989                                  ;       DX = Position of last cluster
 26990                                  ;       Carry set if error (currently user FAILed to I 24)
 26991                                  ; DI destroyed. No other registers affected.
 26992                                  ;--------------------------------------------------------------------------
 26993                                  
 26994                                  ; 20/05/2019 - Retro DOS v4.0
 26995                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 26996                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26997                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 26998                                  
 26999                                  FNDCLUS:
 27000 00004D65 06                      	PUSH	ES
 27001 00004D66 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27002                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27003                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27004 00004D6A 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27005                                  	;mov	dx,[es:di+19h]
 27006 00004D6E 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27007 00004D72 09DB                    	OR	BX,BX
 27008 00004D74 7424                    	JZ	short NOCLUS
 27009                                  
 27010 00004D76 29D1                            SUB     CX,DX
 27011 00004D78 7308                            JNB	short FINDIT
 27012                                  
 27013 00004D7A 01D1                            ADD     CX,DX
 27014 00004D7C 31D2                            XOR     DX,DX
 27015                                  	;mov	bx,[es:di+0Bh]
 27016 00004D7E 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27017                                  FINDIT:
 27018 00004D82 07                              POP	ES
 27019 00004D83 E313                    	JCXZ	RET9
 27020                                  
 27021                                  	;entry	SKPCLP
 27022                                  SKPCLP:
 27023 00004D85 E8D808                  	call	UNPACK
 27024 00004D88 7214                            jc	short fndclus_retn	; retc
 27025                                  
 27026                                  	; 09/09/2018
 27027                                  
 27028                                  	; MSDOS 3.3
 27029                                  	;push	bx
 27030                                  	;mov	bx,di
 27031                                  	;call	IsEOF
 27032                                  	;pop	bx	
 27033                                  	;jae	short RET9
 27034                                  
 27035                                  	; 20/05/2019 - Retro DOS v4.0
 27036                                  
 27037                                  	; MSDOS 6.0
 27038 00004D8A 87DF                    	xchg	bx,di
 27039 00004D8C E8BA08                  	call	IsEOF
 27040 00004D8F 87DF                    	xchg	bx,di
 27041 00004D91 7305                    	jae	short RET9
 27042                                  
 27043 00004D93 87DF                            XCHG    BX,DI
 27044 00004D95 42                              INC     DX
 27045                                  
 27046 00004D96 E2ED                    	LOOP	SKPCLP			; RMFS
 27047                                  RET9:	
 27048 00004D98 F8                      	CLC
 27049 00004D99 C3                              retn
 27050                                  NOCLUS:
 27051 00004D9A 07                              POP	ES
 27052 00004D9B 41                              INC	CX
 27053 00004D9C 4A                              DEC	DX
 27054 00004D9D F8                              CLC
 27055                                  
 27056                                  fndclus_retn:
 27057 00004D9E C3                              retn
 27058                                  
 27059                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27060                                  ;--------------------------------------------------------------------------
 27061                                  ;
 27062                                  ; Procedure Name : BUFSEC
 27063                                  ;
 27064                                  ; Inputs:
 27065                                  ;       AH = priority of buffer
 27066                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27067                                  ;       ES:BP = Base of drive parameters
 27068                                  ;       [CLUSNUM] = Physical cluster number
 27069                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27070                                  ;       [BYTCNT1] = Size of transfer
 27071                                  ; Function:
 27072                                  ;       Insure specified sector is in buffer, flushing buffer before
 27073                                  ;       read if necessary.
 27074                                  ; Outputs:
 27075                                  ;       ES:DI = Pointer to buffer
 27076                                  ;       SI = Pointer to transfer address
 27077                                  ;       CX = Number of bytes
 27078                                  ;       [NEXTADD] updated
 27079                                  ;       [TRANS] set to indicate a transfer will occur
 27080                                  ;       Carry set if error (user FAILed to I 24)
 27081                                  ;--------------------------------------------------------------------------
 27082                                  
 27083                                  BUFSEC:
 27084 00004D9F 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27085 00004DA3 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27086                                  	;mov	byte [ALLOWED],38h
 27087 00004DA7 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27088 00004DAC E85501                          CALL    FIGREC
 27089 00004DAF E8D00C                  	call	GETBUFFR
 27090 00004DB2 72EA                            jc	short fndclus_retn
 27091                                  
 27092 00004DB4 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27093 00004DB9 8B36[B805]                      MOV     SI,[NEXTADD]
 27094 00004DBD 89F7                            MOV     DI,SI
 27095 00004DBF 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27096 00004DC3 01CF                            ADD     DI,CX
 27097 00004DC5 893E[B805]                      MOV     [NEXTADD],DI
 27098 00004DC9 C43E[E205]                      LES     DI,[CURBUF]
 27099                                  	;or	byte [es:di+5],8
 27100 00004DCD 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27101                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27102                                  	;lea	di,[di+20] ; MSDOS 6.0
 27103 00004DD2 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27104 00004DD5 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27105 00004DD9 F8                              CLC
 27106 00004DDA C3                              retn
 27107                                  
 27108                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27109                                  
 27110                                  ;---------------------------------------------------------------------------
 27111                                  ;
 27112                                  ; Procedure Name : BUFRD
 27113                                  ;
 27114                                  ; Do a partial sector read via one of the system buffers
 27115                                  ; ES:BP Points to DPB
 27116                                  ; Carry set if error (currently user FAILed to I 24)
 27117                                  ;
 27118                                  ; DS - set to DOSDATA
 27119                                  ;
 27120                                  ;----------------------------------------------------------------------------
 27121                                  
 27122                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27123                                  	; 20/05/2019 - Retro DOS v4.0
 27124                                  BUFRD:
 27125 00004DDB 06                              PUSH	ES
 27126 00004DDC 31C0                            xor	ax, ax			; pre-read sector
 27127 00004DDE E8BEFF                          CALL    BUFSEC
 27128 00004DE1 7303                            JNC	short BUF_OK
 27129                                  
 27130                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27131 00004DE3 07                              POP	ES
 27132 00004DE4 EB2B                            JMP     SHORT RBUFPLACED
 27133                                  
 27134                                  BUF_OK:
 27135 00004DE6 8CC3                            MOV     BX,ES
 27136 00004DE8 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27137 00004DEC 8EDB                            MOV     DS,BX
 27138 00004DEE 87FE                    	XCHG    DI,SI
 27139 00004DF0 D1E9                            SHR     CX,1
 27140                                  ;M039
 27141                                  	; MSDOS 3.3
 27142                                  	;JNC	short EVENRD
 27143                                  	;MOVSB
 27144                                  ;EVENRD:
 27145                                  	;REP     MOVSW
 27146                                  
 27147                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27148                                  ;       DS:SI-> Source within Buffer.
 27149                                  ;       ES:DI-> Destination within Transfer memory block.
 27150                                  
 27151                                  	; MSDOS 6.0
 27152 00004DF2 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27153                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27154                                  	;rep	movsb                   ;Copy last byte.
 27155                                  	; 16/12/2022
 27156 00004DF4 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27157 00004DF6 A4                      	movsb ; ****
 27158                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27159                                  	;adc	cx,0
 27160                                  	;rep	movsb
 27161                                  ;M039
 27162                                  EVENRD: ; ****
 27163 00004DF7 07                              POP	ES
 27164                                  ;hkn; SS override
 27165 00004DF8 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27166                                  	;;lea	bx,[di+16]
 27167                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27168 00004DFD 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27169 00004E00 29DE                            SUB     SI,BX                   ; Position in buffer
 27170 00004E02 E8310C                          call	PLACEBUF
 27171                                  	;cmp	si,[es:bp+2]
 27172 00004E05 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27173 00004E09 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27174                                  ;M039
 27175                                  	; MSDOS 3.3
 27176                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27177                                                                          ;  even though it is MRU.
 27178                                          ; MSDOS 6.0
 27179 00004E0B 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27180                                  ;M039					; chucking even though it is MRU.
 27181                                  
 27182                                  RBUFPLACEDC:
 27183 00004E10 F8                              CLC
 27184                                  RBUFPLACED:
 27185 00004E11 16                      	push	ss
 27186 00004E12 1F                      	pop	ds
 27187 00004E13 C3                              retn
 27188                                  
 27189                                  ;----------------------------------------------------------------------------
 27190                                  ;
 27191                                  ; Procedure : BUFWRT
 27192                                  ;
 27193                                  ; Do a partial sector write via one of the system buffers
 27194                                  ; ES:BP Points to DPB
 27195                                  ; Carry set if error (currently user FAILed to I 24)
 27196                                  ;
 27197                                  ; DS - set to DOSDATA
 27198                                  ;
 27199                                  ;----------------------------------------------------------------------------
 27200                                  
 27201                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27202                                  	; 20/05/2019 - Retro DOS v4.0
 27203                                  BUFWRT:
 27204 00004E14 A1[C405]                        MOV     AX,[SECPOS]
 27205                                          ; MSDOS 6.0
 27206 00004E17 83C001                  	ADD	AX,1            	; Set for next sector
 27207 00004E1A A3[C405]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27208 00004E1D 8316[C605]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27209 00004E22 A1[C605]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27210 00004E25 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27211 00004E29 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27212 00004E2B 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27213 00004E2D 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27214 00004E2F A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27215                                  
 27216                                  	; MSDOS 3.3
 27217                                  	;INC	AX
 27218                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27219                                  
 27220                                  	; 20/05/2019
 27221                                  	; MSDOS 3.3 & MSDOS 6.0
 27222 00004E32 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27223 00004E36 B001                            MOV     AL,1
 27224 00004E38 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27225                                  _doread:
 27226 00004E3A 30C0                            XOR     AL,AL
 27227                                  NOREAD:
 27228 00004E3C 06                              PUSH	ES
 27229 00004E3D E85FFF                          CALL    BUFSEC
 27230 00004E40 72A1                    	JC	short BUF_IO_FAIL
 27231 00004E42 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27232 00004E46 D1E9                            SHR     CX,1
 27233                                  ;M039
 27234                                  	; MSDOS 3.3
 27235                                  	;JNC	short EVENWRT ; 09/09/2018
 27236                                  	;MOVSB
 27237                                  ;EVENWRT:
 27238                                  	;REP	MOVSW
 27239                                  
 27240                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27241                                  ;       DS:SI-> Source within Transfer memory block.
 27242                                  ;       ES:DI-> Destination within Buffer.
 27243                                  
 27244                                  	; MSDOS 6.0
 27245 00004E48 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27246                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27247                                  	;rep	movsb                   ;Copy last byte.
 27248                                  	; 16/12/2022
 27249 00004E4A 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27250 00004E4C A4                      	movsb ; ****
 27251                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27252                                  	;adc	cx,0
 27253                                  	;rep	movsb
 27254                                  ;M039
 27255                                  EVENWRT: ; ****
 27256 00004E4D 07                              POP	ES
 27257                                  
 27258                                  ;hkn; SS override
 27259 00004E4E 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27260                                  
 27261                                  	; MSDOS 6.0
 27262 00004E53 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27263                                  					;LB. if already dirty		  ;AN000;
 27264 00004E57 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27265 00004E59 E82C0E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27266                                  	
 27267                                  	;or	byte [bx+5],40h
 27268 00004E5C 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27269                                  yesdirty10:
 27270                                  	;;lea	si,[bx+16]
 27271                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27272 00004E60 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27273 00004E63 29F7                            SUB     DI,SI                   ; Position in buffer
 27274                                  ;M039
 27275                                  	; MSDOS 3.3
 27276                                  	;MOV	SI,DI
 27277                                  	;MOV	DI,BX
 27278                                  	;call	PLACEBUF
 27279                                  	;;cmp	si,[es:bp+2]
 27280                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27281                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27282                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27283                                                                          ;  even though it is MRU.
 27284                                  	; MSDOS 6.0
 27285                                  	;cmp	di,[es:bp+2]
 27286 00004E65 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27287 00004E69 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27288 00004E6B 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27289                                  					; chucking even though it is MRU.
 27290                                  ;M039
 27291                                  
 27292                                  WBUFPLACED:
 27293 00004E70 F8                              CLC
 27294 00004E71 16                      	push	ss
 27295 00004E72 1F                      	pop	ds
 27296 00004E73 C3                              retn
 27297                                  
 27298                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27299                                  ;---------------------------------------------------------------------------
 27300                                  ;
 27301                                  ; Procedure Name : NEXTSEC
 27302                                  ;
 27303                                  ; Compute the next sector to read or write
 27304                                  ; ES:BP Points to DPB
 27305                                  ;
 27306                                  ;---------------------------------------------------------------------------
 27307                                  
 27308                                  NEXTSEC:
 27309 00004E74 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27310 00004E79 7426                            JZ	short CLRET
 27311                                  
 27312 00004E7B A0[7305]                        MOV     AL,[SECCLUSPOS]
 27313 00004E7E FEC0                            INC     AL
 27314                                  	;cmp	al,[es:bp+4]
 27315 00004E80 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27316 00004E84 7618                            JBE	short SAVPOS
 27317                                  
 27318 00004E86 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27319 00004E8A E8BC07                          call	IsEOF
 27320 00004E8D 7314                            JAE	short NONEXT
 27321                                  
 27322 00004E8F E8CE07                          call	UNPACK
 27323 00004E92 720F                            JC	short NONEXT
 27324                                  clusgot:
 27325 00004E94 893E[BC05]                      MOV     [CLUSNUM],DI
 27326 00004E98 FF06[BA05]                      INC     word [LASTPOS]
 27327 00004E9C B000                            MOV     AL,0
 27328                                  SAVPOS:
 27329 00004E9E A2[7305]                        MOV     [SECCLUSPOS],AL
 27330                                  CLRET:
 27331 00004EA1 F8                              CLC
 27332 00004EA2 C3                              retn
 27333                                  NONEXT:
 27334 00004EA3 F9                              STC
 27335 00004EA4 C3                              retn
 27336                                  
 27337                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27338                                  ;----------------------------------------------------------------------------
 27339                                  ;
 27340                                  ; Procedure Name : OPTIMIZE
 27341                                  ;
 27342                                  ; Inputs:
 27343                                  ;       BX = Physical cluster
 27344                                  ;       CX = No. of records
 27345                                  ;       DL = sector within cluster
 27346                                  ;       ES:BP = Base of drive parameters
 27347                                  ;       [NEXTADD] = transfer address
 27348                                  ; Outputs:
 27349                                  ;       AX = No. of records remaining
 27350                                  ;       BX = Transfer address
 27351                                  ;       CX = No. or records to be transferred
 27352                                  ;       DX = Physical sector address            (LOW)
 27353                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27354                                  ;       DI = Next cluster
 27355                                  ;       [CLUSNUM] = Last cluster accessed
 27356                                  ;       [NEXTADD] updated
 27357                                  ;       Carry set if error (currently user FAILed to I 24)
 27358                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27359                                  ;
 27360                                  ;---------------------------------------------------------------------------
 27361                                  
 27362                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27363                                  OPTIMIZE:
 27364 00004EA5 52                      	PUSH    DX
 27365 00004EA6 53                              PUSH    BX
 27366                                  	;mov	al,[es:bp+4]
 27367 00004EA7 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27368 00004EAB FEC0                            INC     AL              ; Number of sectors per cluster
 27369 00004EAD 88C4                            MOV     AH,AL
 27370 00004EAF 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27371 00004EB1 89CA                            MOV     DX,CX
 27372                                  	;MOV	CX,0
 27373                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27374                                  	; 16/12/2022
 27375 00004EB3 31C9                    	xor	cx,cx	; sub cx,cx
 27376                                  OPTCLUS:
 27377                                  ; AL has number of sectors available in current cluster
 27378                                  ; AH has number of sectors available in next cluster
 27379                                  ; BX has current physical cluster
 27380                                  ; CX has number of sequential sectors found so far
 27381                                  ; DX has number of sectors left to transfer
 27382                                  ; ES:BP Points to DPB
 27383                                  ; ES:SI has FAT pointer
 27384                                  
 27385                                  do_norm3:
 27386 00004EB5 E8A807                          call	UNPACK
 27387 00004EB8 7237                            JC	short OP_ERR
 27388                                  clusgot2:
 27389 00004EBA 00C1                    	ADD	CL,AL
 27390 00004EBC 80D500                          ADC     CH,0
 27391 00004EBF 39D1                            CMP     CX,DX
 27392 00004EC1 7333                            JAE	short BLKDON
 27393 00004EC3 88E0                            MOV     AL,AH
 27394 00004EC5 43                              INC     BX
 27395 00004EC6 39DF                            CMP     DI,BX
 27396 00004EC8 74EB                            JZ	short OPTCLUS
 27397 00004ECA 4B                              DEC     BX
 27398                                  FINCLUS:
 27399 00004ECB 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27400 00004ECF 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27401 00004ED1 52                              PUSH    DX
 27402 00004ED2 89C8                            MOV     AX,CX
 27403                                  	;mul	word[ES:BP+2]
 27404 00004ED4 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27405                                  				; Number of sectors times sector size
 27406 00004ED8 8B36[B805]                      MOV     SI,[NEXTADD]
 27407 00004EDC 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27408 00004EDE A3[B805]                        MOV     [NEXTADD],AX
 27409 00004EE1 58                              POP     AX              ; Number of sectors still needed
 27410 00004EE2 5A                              POP     DX              ; Starting cluster
 27411 00004EE3 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27412 00004EE5 011E[BA05]                      ADD     [LASTPOS],BX
 27413 00004EE9 5B                              POP     BX              ; BL = sector position within cluster
 27414 00004EEA E81700                  	call	FIGREC
 27415 00004EED 89F3                            MOV     BX,SI
 27416 00004EEF F8                      	CLC
 27417 00004EF0 C3                              retn
 27418                                  OP_ERR:
 27419 00004EF1 83C404                          ADD     SP,4
 27420 00004EF4 F9                      	STC
 27421 00004EF5 C3                              retn
 27422                                  BLKDON:
 27423 00004EF6 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27424 00004EF8 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27425 00004EFA FECC                            DEC     AH              ; Adjust to mean position within cluster
 27426 00004EFC 8826[7305]                      MOV     [SECCLUSPOS],AH
 27427 00004F00 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27428 00004F02 EBC7                            JMP     SHORT FINCLUS
 27429                                  
 27430                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27431                                  ;---------------------------------------------------------------------------
 27432                                  ;
 27433                                  ; Procedure Name : FIGREC
 27434                                  ;
 27435                                  ; Inputs:
 27436                                  ;       DX = Physical cluster number
 27437                                  ;       BL = Sector position within cluster
 27438                                  ;       ES:BP = Base of drive parameters
 27439                                  ; Outputs:
 27440                                  ;       DX = physical sector number           (LOW)
 27441                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27442                                  ; No other registers affected.
 27443                                  ;
 27444                                  ;---------------------------------------------------------------------------
 27445                                  
 27446                                  	; 10/06/2019
 27447                                  	; 20/05/2019 - Retro DOS v4.0
 27448                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27449                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27450                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27451                                  FIGREC:
 27452 00004F04 51                              PUSH    CX
 27453                                  	;mov	cl,[es:bp+5]
 27454 00004F05 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27455 00004F09 4A                              DEC     DX
 27456 00004F0A 4A                              DEC     DX
 27457                                  
 27458                                  	; MSDOS 3.3
 27459                                  	;SHL	DX,CL
 27460                                  
 27461                                  ;hkn; SS override HIGH_SECTOR
 27462                                  	; MSDOS 6.0
 27463 00004F0B 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27464 00004F12 08C9                    	OR	CL,CL				;F.C. >32mb
 27465 00004F14 740C                    	JZ	short noshift			;F.C. >32mb
 27466 00004F16 30ED                    	XOR	CH,CH 				;F.C. >32mb
 27467                                  rotleft:					;F.C. >32mb
 27468 00004F18 F8                      	CLC					;F.C. >32mb
 27469 00004F19 D1D2                    	RCL	DX,1				;F.C. >32mb
 27470                                  	; 10/06/2019
 27471 00004F1B 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27472 00004F20 E2F6                    	LOOP	rotleft				;F.C. >32mb
 27473                                  noshift:
 27474                                  	; MSDOS 3.3 & MSDOS 6.0
 27475 00004F22 08DA                            OR      DL,BL
 27476                                  	;add	dx,[es:bp+0Bh]
 27477 00004F24 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27478                                  	; MSDOS 6.0
 27479                                  	; 10/06/2019
 27480 00004F28 368316[0706]00                  ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27481                                  	; MSDOS 3.3 & MSDOS 6.0        
 27482 00004F2E 59                      	POP     CX
 27483                                  figrec_retn:
 27484 00004F2F C3                              retn
 27485                                  
 27486                                  ; 20/05/2019 - Retro DOS v4.0
 27487                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27488                                  
 27489                                  ; 30/07/2018 - Retro DOS v3.0
 27490                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27491                                  
 27492                                  ;Break   <ALLOCATE -- Assign disk space>
 27493                                  ;---------------------------------------------------------------------------
 27494                                  ;
 27495                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27496                                  ;
 27497                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27498                                  ;   FAT-chained onto the end of the existing file.
 27499                                  ;
 27500                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27501                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27502                                  ;   numbered clusters, looking for the necessary free blocks.
 27503                                  ;
 27504                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27505                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27506                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27507                                  ;
 27508                                  ;       If we get to the end of the disk without satisfaction:
 27509                                  ;
 27510                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27511                                  ;               return (insufficient_disk_space)
 27512                                  ;           ELSE
 27513                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27514                                  ;
 27515                                  ;   Note that there is no multitasking interlock. There is no race when
 27516                                  ;   examining the entrys in an in-core FAT block since there will be no
 27517                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27518                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27519                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27520                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27521                                  ;   satisfied. We can't allow another activation to think this cluster is
 27522                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27523                                  ;   allocated.
 27524                                  ;
 27525                                  ;   Note that when we run out of space this algorithem will scan from
 27526                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27527                                  ;   redundantly scanning the later part of the disk. This only happens when
 27528                                  ;   we run out of space, so sue me.
 27529                                  ;
 27530                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27531                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27532                                  ;                                                                          ;
 27533                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27534                                  ;   explanation:
 27535                                  ;
 27536                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27537                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27538                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27539                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27540                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27541                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27542                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27543                                  ;   the
 27544                                  ;           LOOP   findfre         ; alloc more if needed
 27545                                  ;   instruction when the first cluster is allocated to the nul file. The
 27546                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27547                                  ;
 27548                                  ;   This method is obviously useless (because it is non-reentrant) for
 27549                                  ;   multitasking, and will have to be changed. Storing the required value on
 27550                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27551                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27552                                  ;   problems with INT 24 well.
 27553                                  ;
 27554                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27555                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27556                                  ;                                                                          ;
 27557                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27558                                  ;               CX = No. of clusters to allocate
 27559                                  ;               ES:BP = Base of drive parameters
 27560                                  ;               [THISSFT] = Points to SFT
 27561                                  ;
 27562                                  ;       EXIT    'C' set if insufficient space
 27563                                  ;                 [FAILERR] can be tested to see the reason for failure
 27564                                  ;                 CX = max. no. of clusters that could be added to file
 27565                                  ;               'C' clear if space allocated
 27566                                  ;                 BX = First cluster allocated
 27567                                  ;                 FAT is fully updated
 27568                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27569                                  ;
 27570                                  ;       USES    ALL but SI, BP
 27571                                  
 27572                                  ;callmagic  proc near
 27573                                  ;       push    ds                             ;push segment of routine 
 27574                                  ;       push    Offset MagicPatch              ;push offset for routine
 27575                                  ;       retf                                   ;simulate jmp far
 27576                                  ;                                              ;far return address is on
 27577                                  ;                                              ;stack, so far return from
 27578                                  ;                                              ;call will return this routine
 27579                                  ;callmagic  endp
 27580                                  
 27581                                  ALLOCATE:
 27582                                  	; 10/09/2018
 27583                                  ;BEGIN MAGICDRV MODIFICATIONS
 27584                                  ;
 27585                                  ;7/5/92 scottq
 27586                                  ;
 27587                                  ;This is the disk compression patch location which allows
 27588                                  ;the disk compression software to fail allocations if the
 27589                                  ;FAT would allows allocation, but the free space for compressed
 27590                                  ;data would not.
 27591                                  ;        
 27592                                  ;;;	call    far ptr MAGICPATCH
 27593                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27594                                  ;;; but we do know the segment and offset of the routine
 27595                                  ;;; so simulate a far call to dosdata:magicpatch
 27596                                  ;;; note dosassume above, so DS -> dosdata
 27597                                  
 27598                                  	; MSDOS 6.0
 27599                                          ;clc				;clear carry so we fall through
 27600                                  	;				;if no patch is present
 27601                                  	;push	cs			;push segment for far return
 27602                                          ;call	callmagic		;this is a near call
 27603                                          ;jnc	short Regular_Allocate_Path
 27604                                  	;jmp	Disk_Full_Return
 27605                                  
 27606                                  ;Regular_Allocate_Path:
 27607                                  	; 20/05/2019 - Retro DOS v4.0
 27608                                  ;END MAGICDRV MODIFICATIONS
 27609                                  
 27610                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27611                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27612                                  
 27613 00004F30 53                              PUSH    BX                      ; save (bx)
 27614 00004F31 31DB                            XOR     BX,BX
 27615 00004F33 E82A07                  	call	UNPACK
 27616 00004F36 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27617 00004F3A 5B                              POP     BX
 27618 00004F3B 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27619                                  
 27620 00004F3D 51                              PUSH    CX
 27621 00004F3E 53                              PUSH    BX
 27622                                  
 27623 00004F3F 89DA                            MOV     DX,BX
 27624                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27625                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27626 00004F41 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27627 00004F45 83FB02                          cmp     bx,2
 27628 00004F48 7709                            ja	short FINDFRE
 27629                                  
 27630                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27631                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27632                                  
 27633                                  ads1:
 27634                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27635                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27636 00004F4A 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27637 00004F50 BB0100                          mov     bx,1                    ; Counter next instruction so first
 27638                                                                          ;       cluster examined is 2
 27639                                  
 27640                                  ;   Scanning both forwards and backwards for a free cluster
 27641                                  ;
 27642                                  ;       (BX) = forwards scan pointer
 27643                                  ;       (CX) = clusters remaining to be allocated
 27644                                  ;       (DX) = current last cluster in file
 27645                                  ;       (TOS) = last cluster of file
 27646                                  
 27647                                  FINDFRE:
 27648 00004F53 43                              INC     BX
 27649                                  	;cmp	bx,[es:bp+0Dh]
 27650 00004F54 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27651 00004F58 7757                    	ja	short ads7	; at end of disk
 27652 00004F5A E80307                          call	UNPACK          ; check out this cluster
 27653 00004F5D 722F                            jc	short ads4	; FAT error             [INTERR?]
 27654 00004F5F 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27655                                  
 27656                                  ;   Have found a free cluster. Chain it to the file
 27657                                  ;
 27658                                  ;       (BX) = found free cluster #
 27659                                  ;       (DX) = current last cluster in file
 27660                                  
 27661                                  	;;mov	[es:bp+1Ch],bx
 27662                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27663 00004F61 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27664 00004F65 92                              xchg    ax,dx           ; save (dx) in ax
 27665 00004F66 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27666 00004F69 E84807                  	call	PACK            ; set special "temporary" mark
 27667 00004F6C 7220                            jc	short ads4	; FAT error             [INTERR?]
 27668                                  	;;cmp	word [es:bp+1Eh],-1
 27669                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27670 00004F6E 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27671 00004F73 7404                            JZ	short NO_ALLOC	; No
 27672                                  	;;dec	word [es:bp+1Eh]
 27673                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27674 00004F75 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27675                                  NO_ALLOC:
 27676 00004F79 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27677 00004F7A 87DA                            XCHG    BX,DX
 27678 00004F7C 89D0                            MOV     AX,DX
 27679 00004F7E E83307                  	call	PACK            ; link free cluster onto file
 27680                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27681                                                                  ;    cluster 0 with FIRCLUS value.
 27682 00004F81 720B                            jc	short ads4	; FAT error [INTERR?]
 27683 00004F83 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27684 00004F84 89DA                            mov     dx,bx           ; (dx) = current end of file
 27685 00004F86 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27686                                  
 27687                                  ;   We've successfully extended the file. Clean up and exit
 27688                                  ;
 27689                                  ;       (BX) = last cluster in file
 27690                                  
 27691 00004F88 BAFFFF                          MOV     DX,0FFFFH
 27692 00004F8B E82607                  	call	PACK            ; mark last cluster EOF
 27693                                  
 27694                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27695                                  ;   2 whole bytes. Hope its worth it...
 27696                                  ;
 27697                                  ;       'C' set if error
 27698                                  ;       calling (BX) and (CX) pushed on stack
 27699                                  
 27700                                  ads4:   
 27701 00004F8E 5B                      	POP     BX
 27702 00004F8F 59                              POP     CX              ; Don't need this stuff since we're successful
 27703 00004F90 729D                            jc	short figrec_retn
 27704 00004F92 E8CB06                          call	UNPACK          ; Get first cluster allocated for return
 27705                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27706 00004F95 7298                            jc	short figrec_retn
 27707 00004F97 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27708 00004F9A 7293                            jc	short figrec_retn
 27709 00004F9C 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27710 00004F9E 09FF                            OR      DI,DI           ; clear 'C'
 27711 00004FA0 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27712                                  
 27713                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27714                                  ;   info
 27715                                  dofastk:
 27716                                  	; 20/05/2019
 27717                                  	; MSDOS 6.0
 27718                                  	;push	dx ; * MSDOS 6.0
 27719                                  	;;mov	dl,[es:bp+0]
 27720                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27721                                  	;mov	dl,[es:bp]
 27722                                  
 27723                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27724                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27725                                  	
 27726                                  	; 16/12/2022
 27727                                  	;push	dx ; *
 27728                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27729                                  	; 15/12/2022
 27730                                  	;mov	dl,[es:bp]
 27731                                  	
 27732                                  	; MSDOS 3.3 & MSDOS 6.0
 27733 00004FA2 06                      	PUSH	ES
 27734 00004FA3 C43E[9E05]              	LES     DI,[THISSFT]
 27735                                  	;mov	[es:di+0Bh],bx
 27736 00004FA7 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27737                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27738                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27739 00004FAB 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27740 00004FAF 07                      	POP	ES
 27741                                  	;retn
 27742                                  
 27743                                  	;pop	dx ; * MSDOS 6.0
 27744                                  
 27745                                  	; 16/12/2022
 27746                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27747                                  	;pop	dx ; *
 27748                                  
 27749 00004FB0 C3                      	retn	
 27750                                  
 27751                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27752                                  ;   of the disk...
 27753                                  
 27754                                  ads7:   
 27755 00004FB1 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27756 00004FB6 7592                    	jnz	short ads1	; start scan from front of disk
 27757                                  
 27758                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27759                                  ;   the space back to the free list and tell the caller how much he could have
 27760                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27761                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27762                                  ;
 27763                                  ;       (CX) = clusters remaining to be allocated
 27764                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27765                                  ;       (TOS+1) = # of clusters wanted to allocate
 27766                                  
 27767 00004FB8 5B                              POP     BX              ; (BX) = last cluster of file
 27768 00004FB9 BAFFFF                          MOV     DX,0FFFFH
 27769 00004FBC E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27770 00004FBF 58                              POP     AX              ; No. of clusters requested
 27771                                                                  ; Don't "retc". We are setting Carry anyway,
 27772                                                                  ;   Alloc failed, so proceed with return CX
 27773                                                                  ;   setup.
 27774 00004FC0 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27775 00004FC2 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27776                                                                  ;   Alloc failed.
 27777                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27778                                          ; MSDOS 6.0
 27779 00004FC5 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27780 00004FCA F9                              STC
 27781 00004FCB C3                              retn
 27782                                  
 27783                                  ;-----------------------------------------------------------------------
 27784                                  ;
 27785                                  ; Procedure Name : RESTFATBYT
 27786                                  ;
 27787                                  ; SEE ALLOCATE CAVEAT
 27788                                  ;       Carry set if error (currently user FAILed to I 24)
 27789                                  ;-----------------------------------------------------------------------
 27790                                  
 27791                                  RESTFATBYT:
 27792 00004FCC 53                              PUSH    BX
 27793 00004FCD 52                              PUSH    DX
 27794 00004FCE 57                              PUSH    DI
 27795 00004FCF 31DB                            XOR     BX,BX
 27796 00004FD1 8B16[9605]                      MOV     DX,[FATBYT]
 27797 00004FD5 E8DC06                  	call	PACK
 27798 00004FD8 5F                              POP     DI
 27799 00004FD9 5A                              POP     DX
 27800 00004FDA 5B                              POP     BX
 27801                                  ; 16/12/2022
 27802                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27803                                  ;RELEASE_flush:
 27804 00004FDB C3                      	retn
 27805                                  
 27806                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27807                                  ;---------------------------------------------------------------------------
 27808                                  ;
 27809                                  ; Procedure Name : RELEASE
 27810                                  ;
 27811                                  ; Inputs:
 27812                                  ;       BX = Cluster in file
 27813                                  ;       ES:BP = Base of drive parameters
 27814                                  ; Function:
 27815                                  ;       Frees cluster chain starting with [BX]
 27816                                  ;       Carry set if error (currently user FAILed to I 24)
 27817                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27818                                  ;
 27819                                  ;-----------------------------------------------------------------------------
 27820                                  
 27821                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27822                                  	; 20/05/2019 - Retro DOS v4.0
 27823                                  RELEASE:
 27824 00004FDC 31D2                            XOR     DX,DX
 27825                                  
 27826                                  	;entry	RELBLKS
 27827                                  RELBLKS:
 27828                                  
 27829                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27830                                  ;   and free the rest in the chain.
 27831                                  
 27832 00004FDE E87F06                  	call	UNPACK
 27833 00004FE1 7224                    	jc	short RELEASE_flush
 27834 00004FE3 7422                    	jz	short RELEASE_flush
 27835 00004FE5 89F8                            MOV     AX,DI
 27836 00004FE7 52                              PUSH    DX
 27837 00004FE8 E8C906                  	call	PACK
 27838 00004FEB 5A                              POP     DX
 27839 00004FEC 7219                    	jc	short RELEASE_flush
 27840 00004FEE 09D2                            OR      DX,DX
 27841 00004FF0 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 27842                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 27843                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27844 00004FF2 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27845 00004FF7 7404                            JZ	short NO_DEALLOC	; No
 27846 00004FF9 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 27847                                  NO_DEALLOC:
 27848 00004FFD 89C3                            MOV     BX,AX
 27849 00004FFF 48                              dec     ax              ; check for "1"
 27850 00005000 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 27851 00005002 E84406                  	call	IsEOF
 27852 00005005 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 27853                                  
 27854                                  	; 16/12/2022
 27855                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27856                                  ;%if 0
 27857                                  RELEASE_flush:
 27858                                  	; MSDOS 6.0
 27859 00005007 268A4600                	mov	al,[es:bp]
 27860                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27861 0000500B 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 27862 0000500C 51                      	push	cx		;  them to be preserved.
 27863 0000500D 06                      	push	es
 27864 0000500E 55                      	push	bp
 27865 0000500F E86E0B                  	call	FLUSHBUF	; commit buffers for this drive
 27866 00005012 5D                      	pop	bp
 27867 00005013 07                      	pop	es
 27868 00005014 59                      	pop	cx
 27869 00005015 5E                      	pop	si
 27870                                  ;%endif
 27871                                  RET12:
 27872 00005016 C3                      	retn
 27873                                  
 27874                                  ;Break	<GETEOF -- Find the end of a file>
 27875                                  ;------------------------------------------------------------------------
 27876                                  ;
 27877                                  ; Procedure Name : GETEOF
 27878                                  ;
 27879                                  ; Inputs:
 27880                                  ;       ES:BP Points to DPB
 27881                                  ;       BX = Cluster in a file
 27882                                  ;       DS = CS
 27883                                  ; Outputs:
 27884                                  ;       BX = Last cluster in the file
 27885                                  ;       Carry set if error (currently user FAILed to I 24)
 27886                                  ; DI destroyed. No other registers affected.
 27887                                  ;
 27888                                  ;--------------------------------------------------------------------------
 27889                                  
 27890                                  GETEOF:
 27891 00005017 E84606                  	call	UNPACK
 27892 0000501A 72FA                            jc	short RET12
 27893 0000501C 53                              PUSH    BX
 27894 0000501D 89FB                            MOV     BX,DI
 27895 0000501F E82706                  	call	IsEOF
 27896 00005022 5B                              POP     BX
 27897 00005023 73F1                            JAE     short RET12
 27898 00005025 89FB                            MOV     BX,DI
 27899 00005027 EBEE                            JMP     short GETEOF
 27900                                  
 27901                                  ;============================================================================
 27902                                  ; FCB.ASM, MSDOS 6.0, 1991
 27903                                  ;============================================================================
 27904                                  ; 30/07/2018 - Retro DOS v3.0
 27905                                  ; 20/05/2019 - Retro DOS v4.0
 27906                                  
 27907                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 27908                                  ;	NAME	FCB
 27909                                  
 27910                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 27911                                  ;		  filename characters
 27912                                  ;
 27913                                  ;	MakeFcb
 27914                                  ;	NameTrans
 27915                                  ;	PATHCHRCMP
 27916                                  ;	GetLet
 27917                                  ;	UCase
 27918                                  ;	GetLet3
 27919                                  ;	GetCharType
 27920                                  ;	TESTKANJ
 27921                                  ;	NORMSCAN
 27922                                  ;	DELIM
 27923                                  ;
 27924                                  ;	Revision history:
 27925                                  ;
 27926                                  ;		A000  version 4.00  Jan. 1988
 27927                                  ;	
 27928                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 27929                                  
 27930                                  TableLook	EQU	-1
 27931                                  
 27932                                  SCANSEPARATOR	EQU	1
 27933                                  DRVBIT		EQU	2
 27934                                  NAMBIT		EQU	4
 27935                                  EXTBIT		EQU	8
 27936                                  
 27937                                  ;----------------------------------------------------------------------------
 27938                                  ;
 27939                                  ; Procedure : MakeFcb
 27940                                  ;
 27941                                  ;----------------------------------------------------------------------------
 27942                                  
 27943                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27944                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 27945                                  MAKEFCB:
 27946                                  ;hkn; SS override
 27947 00005029 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 27948 0000502F 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 27949                                  	;test	al,2
 27950 00005031 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 27951 00005033 7504                    	JNZ	short DEFDRV
 27952 00005035 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 27953                                  DEFDRV:
 27954 00005039 47                      	INC	DI
 27955 0000503A B90800                  	MOV	CX,8
 27956                                  	;test	al,4
 27957 0000503D A804                    	test	AL,NAMBIT	; Use current name fields as default?
 27958 0000503F 93                      	XCHG	AX,BX		; Save bits in BX
 27959 00005040 B020                    	MOV	AL," "
 27960 00005042 7404                    	JZ	short FILLB	; If not, go fill with blanks
 27961 00005044 01CF                    	ADD	DI,CX
 27962 00005046 31C9                    	XOR	CX,CX		; Don't fill any
 27963                                  FILLB:
 27964 00005048 F3AA                    	REP	STOSB
 27965 0000504A B103                    	MOV	CL,3
 27966 0000504C F6C308                  	test	BL,EXTBIT	; Use current extension as default
 27967 0000504F 7404                    	JZ	short FILLB2
 27968 00005051 01CF                    	ADD	DI,CX
 27969 00005053 31C9                    	XOR	CX,CX
 27970                                  FILLB2:
 27971 00005055 F3AA                    	REP	STOSB
 27972 00005057 91                      	XCHG	AX,CX		; Put zero in AX
 27973 00005058 AB                      	STOSW
 27974 00005059 AB                      	STOSW			; Initialize two words after to zero
 27975 0000505A 83EF10                  	SUB	DI,16		; Point back at start
 27976                                  	;test	bl,1
 27977 0000505D F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 27978 00005060 7409                    	JZ	short SKPSPC
 27979 00005062 E88D00                  	CALL	SCANB		; Peel off blanks and tabs
 27980 00005065 E82701                  	CALL	DELIM		; Is it a one-time-only delimiter?
 27981 00005068 7504                    	JNZ	short NOSCAN
 27982 0000506A 46                      	INC	SI		; Skip over the delimiter
 27983                                  SKPSPC:
 27984 0000506B E88400                  	CALL	SCANB		; Always kill preceding blanks and tabs
 27985                                  NOSCAN:
 27986 0000506E E8F500                  	CALL	GETLET
 27987 00005071 761E                    	JBE	short NODRV	; Quit if termination character
 27988 00005073 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 27989 00005076 7519                    	JNZ	short NODRV
 27990 00005078 46                      	INC	SI		; Skip over colon
 27991 00005079 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 27992 0000507B 760F                    	JBE	short BADDRV	; Drive letter out of range
 27993                                  
 27994 0000507D 50                      	PUSH	AX
 27995 0000507E E8311B                  	call	GetVisDrv
 27996 00005081 58                      	POP	AX
 27997 00005082 730A                    	JNC	short HAVDRV
 27998                                  
 27999                                  	; 20/05/2019 - Retro DOS v4.0
 28000                                  	; MSDOS 6.0
 28001                                  ;hkn; SS override
 28002 00005084 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28003                                  					; if not FAT drive ;AN000;
 28004 0000508A 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28005                                  BADDRV:
 28006 0000508C B2FF                    	MOV	DL,-1
 28007                                  HAVDRV:
 28008 0000508E AA                      	STOSB			; Put drive specifier in first byte
 28009 0000508F 46                      	INC	SI
 28010 00005090 4F                      	DEC	DI		; Counteract next two instructions
 28011                                  NODRV:
 28012 00005091 4E                      	DEC	SI		; Back up
 28013 00005092 47                      	INC	DI		; Skip drive byte
 28014                                  
 28015                                  	;entry	NORMSCAN
 28016                                  NORMSCAN:
 28017 00005093 B90800                  	MOV	CX,8
 28018 00005096 E82700                  	CALL	GETWORD 	; Get 8-letter file name
 28019 00005099 803C2E                  	CMP	BYTE [SI],"."
 28020 0000509C 7515                    	JNZ	short NODOT
 28021 0000509E 46                      	INC	SI		; Skip over dot if present
 28022                                  
 28023                                  	; MSDOS 6.0
 28024                                  ;hkn; SS override
 28025                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28026                                  	; 10/06/2019
 28027 0000509F 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28028 000050A5 7406                    	JZ	short VOLOK				;AN000;
 28029 000050A7 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28030 000050A8 B90200                  	MOV	CX,2					;AN000;
 28031 000050AB EB03                    	JMP	SHORT contvol				;AN000;
 28032                                  VOLOK:
 28033 000050AD B90300                  	MOV	CX,3		; Get 3-letter extension
 28034                                  contvol:
 28035 000050B0 E81300                  	CALL	MUSTGETWORD
 28036                                  NODOT:
 28037 000050B3 88D0                    	MOV	AL,DL
 28038                                  
 28039                                  	; MSDOS 6.0
 28040                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28041                                  	; 18/12/2022
 28042 000050B5 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28043                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28044                                  
 28045 000050BB C3                      	retn
 28046                                  
 28047                                  NONAM:
 28048 000050BC 01CF                    	ADD	DI,CX
 28049 000050BE 4E                      	DEC	SI
 28050 000050BF C3                      	retn
 28051                                  
 28052                                  GETWORD:
 28053 000050C0 E8A300                  	CALL	GETLET		
 28054 000050C3 76F7                    	JBE	short NONAM	; Exit if invalid character
 28055 000050C5 4E                      	DEC	SI
 28056                                  
 28057                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28058                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28059                                  
 28060                                  MUSTGETWORD:
 28061 000050C6 E89D00                  	CALL	GETLET
 28062                                  
 28063                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28064                                  
 28065                                  ;IF NOT TABLELOOK
 28066                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28067                                  ;ENDIF
 28068 000050C9 750C                    	JNZ	short MustCheckCX
 28069                                  
 28070                                  ;hkn; SS override
 28071 000050CB 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28072 000050D1 7419                    	JZ	short FILLNAM
 28073 000050D3 3C20                    	CMP	AL," "
 28074 000050D5 7515                    	JNZ	short FILLNAM
 28075                                  
 28076                                  MustCheckCX:
 28077 000050D7 E3ED                    	JCXZ	MUSTGETWORD
 28078 000050D9 49                      	DEC	CX
 28079 000050DA 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28080 000050DC 7504                    	JNZ	short NOSTAR
 28081 000050DE B03F                    	MOV	AL,"?"
 28082 000050E0 F3AA                    	REP	STOSB
 28083                                  NOSTAR:
 28084 000050E2 AA                      	STOSB
 28085 000050E3 3C3F                    	CMP	AL,"?"
 28086 000050E5 75DF                    	JNZ	short MUSTGETWORD
 28087 000050E7 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28088 000050EA EBDA                    	JMP	short MUSTGETWORD
 28089                                  FILLNAM:
 28090 000050EC B020                    	MOV	AL," "
 28091 000050EE F3AA                    	REP	STOSB
 28092 000050F0 4E                      	DEC	SI
 28093 000050F1 C3                      	retn
 28094                                  
 28095                                  SCANB:
 28096 000050F2 AC                      	LODSB
 28097 000050F3 E8A100                  	CALL	SPCHK
 28098 000050F6 74FA                    	JZ	short SCANB
 28099 000050F8 4E                      	DEC	SI
 28100                                  scanb_retn:
 28101 000050F9 C3                      	retn
 28102                                  
 28103                                  ;----------------------------------------------------------------------------
 28104                                  ;
 28105                                  ; Procedure Name : NameTrans
 28106                                  ;
 28107                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28108                                  ; allow spaces in pathnames
 28109                                  ;
 28110                                  ;   Inputs:	DS:SI points to start of path element
 28111                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28112                                  ;		ES = DOSGroup
 28113                                  ;		DS:SI advanced after name
 28114                                  ;   Registers modified: DI,AX,DX,CX
 28115                                  ;
 28116                                  ;----------------------------------------------------------------------------
 28117                                  
 28118                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28119                                  	; 20/05/2019 - Retro DOS v4.0
 28120                                  NameTrans:
 28121                                  ;hkn; SS override
 28122 000050FA 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28123 00005100 16                      	push	ss
 28124 00005101 07                      	pop	es
 28125                                  
 28126                                  ;hkn; NAME1 is in DOSDATA
 28127 00005102 BF[4B05]                	MOV	DI,NAME1
 28128 00005105 57                      	PUSH	DI
 28129 00005106 B82020                  	MOV	AX,'  '
 28130 00005109 B90500                  	MOV	CX,5
 28131 0000510C AA                      	STOSB
 28132 0000510D F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28133 0000510F 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28134 00005111 88C2                    	MOV	DL,AL
 28135 00005113 AA                      	STOSB
 28136 00005114 5F                      	POP	DI
 28137                                  
 28138 00005115 E87BFF                  	CALL	NORMSCAN
 28139                                  
 28140                                  ;hkn; SS override for NAME1
 28141 00005118 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28142 0000511E 75D9                    	jnz	short scanb_retn
 28143 00005120 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28144 00005126 C3                      	retn
 28145                                  
 28146                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28147                                  ;============================================================================
 28148                                  
 28149                                  ; 20/05/2019 - Retro DOS v4.0
 28150                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28151                                  
 28152                                  ;If TableLook
 28153                                  
 28154                                  ;hkn; Table	SEGMENT
 28155                                  ;	PUBLIC	CharType
 28156                                  ;----------------------------------------------------------------------------
 28157                                  
 28158                                  ; Character type table for file name scanning
 28159                                  ; Table provides a mapping of characters to validity bits.
 28160                                  ; Four bits are provided for each character. Values 7Dh and above
 28161                                  ; have all bits set, so that part of the table is chopped off, and
 28162                                  ; the translation routine is responsible for screening these values.
 28163                                  ; The bit values are defined in DOSSYM.INC
 28164                                  
 28165                                  ;	      ; ^A and NUL
 28166                                  ;CharType:
 28167                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28168                                  ;	      ; ^C and ^B
 28169                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28170                                  ;	      ; ^E and ^D
 28171                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28172                                  ;	      ; ^G and ^F
 28173                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28174                                  ;	      ; TAB and BS
 28175                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28176                                  ;	      ; ^K and ^J
 28177                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28178                                  ;	      ; ^M and ^L
 28179                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28180                                  ;	      ; ^O and ^N
 28181                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28182                                  ;	      ; ^Q and ^P
 28183                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28184                                  ;	      ; ^S and ^R
 28185                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28186                                  ;	      ; ^U and ^T
 28187                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28188                                  ;	      ; ^W and ^V
 28189                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28190                                  ;	      ; ^Y and ^X
 28191                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28192                                  ;	      ; ESC and ^Z
 28193                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28194                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28196                                  ;	      ; ^_ and ^^
 28197                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28198                                  ;	      ; ! and SPACE
 28199                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28200                                  ;	      ; # and "
 28201                                  ;	 db   LOW (NOT FFCB+FCHK)
 28202                                  ;	      ; $ - )
 28203                                  ;	 db   3 dup (0FFh)
 28204                                  ;	      ; + and *
 28205                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28206                                  ;	      ; - and '
 28207                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28208                                  ;	      ; / and .
 28209                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28210                                  ;	      ; 0 - 9
 28211                                  ;	 db   5 dup (0FFh)
 28212                                  ;	      ; ; and :
 28213                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28214                                  ;	      ; = and <
 28215                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28216                                  ;	      ; ? and >
 28217                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28218                                  ;	      ; A - Z
 28219                                  ;	 db   13 dup (0FFh)
 28220                                  ;	      ; \ and [
 28221                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28222                                  ;	      ; ^ and ]
 28223                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28224                                  ;	      ; _ - {
 28225                                  ;	 db   15 dup (0FFh)
 28226                                  ;	      ; } and |
 28227                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28228                                  
 28229                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28230                                  ;					; character in the table
 28231                                  
 28232                                  ;FCHK	equ 1		; normal name char, no chks needed
 28233                                  ;FDELIM	equ 2		; is a delimiter
 28234                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28235                                  ;FFCB	equ 8		; is valid in an FCB
 28236                                  
 28237                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28238                                  ;----------------------------------------------------------------------------
 28239                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28240                                  
 28241                                  CharType: ; 63 bytes
 28242 00005127 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28243 0000512F 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28244 00005137 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28245 0000513F FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28246 00005147 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28247 0000514F FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28248 00005157 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28249 0000515F FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28250                                  
 28251                                  CharType_last equ ($ - CharType) * 2
 28252                                  
 28253                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28254                                  ;----------------------------------------------------------------------------
 28255                                  ;CharType:
 28256                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28257                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28258                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28259                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28260                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28261                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28262                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28263                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28264                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28265                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28266                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28267                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28268                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28269                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28270                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28271                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28272                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28273                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28274                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28275                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28276                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28277                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28278                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28279                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28280                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28281                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28282                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28283                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28284                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28285                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28286                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28287                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28288                                  
 28289                                  ;hkn; Table	ENDS
 28290                                  
 28291                                  ;ENDIF
 28292                                  
 28293                                  ; 20/05/2019 - Retro DOS v4.0
 28294                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28295                                  
 28296                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28297                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28298                                  
 28299                                  ;----------------------------------------------------------------------------
 28300                                  ;
 28301                                  ; Procedure Names : GetLet, UCase, GetLet3
 28302                                  ;
 28303                                  ; These routines take a character, convert it to upper case, and check
 28304                                  ; for delimiters.  Three different entry points:
 28305                                  ;	GetLet -  DS:[SI] = character to convert
 28306                                  ;	UCase  -  AL = character to convert
 28307                                  ;	GetLet3 - AL = character
 28308                                  ;		  [BX] = translation table to use
 28309                                  ;
 28310                                  ;	Exit (in all cases) : AL = upper case character
 28311                                  ;			      CY set if char is control char other than TAB
 28312                                  ;			      ZF set if char is a delimiter
 28313                                  ;	Uses : AX, flags
 28314                                  ;
 28315                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28316                                  ; inline version.  Return with carry set is only possible in the inline
 28317                                  ; version. The table lookup version is the one in use.
 28318                                  ;
 28319                                  ;----------------------------------------------------------------------------
 28320                                  
 28321                                  ; This entry point has character at [SI]
 28322                                  
 28323                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28324                                  GETLET:	
 28325 00005166 AC                      	LODSB
 28326                                  
 28327                                  ; This entry point has character in AL
 28328                                  
 28329                                  	;entry	UCase
 28330                                  UCase:	
 28331                                  	; 09/08/2018
 28332                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28333                                  _UCase:
 28334 00005167 53                      	PUSH	BX
 28335 00005168 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28336                                  
 28337                                  ; Convert the character in AL to upper case
 28338                                  
 28339                                  gl_0:
 28340 0000516B 3C61                    	CMP	AL,"a"
 28341 0000516D 7214                    	JB	short gl_2	; Already upper case, go check type
 28342 0000516F 3C7A                    	CMP	AL,"z"
 28343 00005171 7702                    	JA	short gl_1
 28344 00005173 2C20                    	SUB	AL,20H		; Convert to upper case
 28345                                  
 28346                                  ; Map European character to upper case
 28347                                  
 28348                                  gl_1:
 28349 00005175 3C80                    	CMP	AL,80H
 28350 00005177 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28351 00005179 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28352                                  
 28353                                  	; M048 - Start 
 28354                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28355                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28356                                  	; preserve it.
 28357                                  
 28358                                  	; 09/08/2018 - Retro DOS v3.0
 28359                                  	; MSDOS 3.3
 28360                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28361                                  	;CS	XLAT
 28362                                  
 28363                                  	; 20/05/2019 - Retro DOS v4.0
 28364                                  
 28365                                  	; MSDOS 6.0
 28366 0000517B 1E                      	push	ds
 28367                                  	;getdseg <ds>
 28368 0000517C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28369 00005181 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28370 00005182 1F                      	pop	ds
 28371                                  
 28372                                  	; M048 - End
 28373                                  
 28374                                  ; Now check the type
 28375                                  
 28376                                  ;If TableLook
 28377                                  gl_2:
 28378                                  	; 20/05/2019 - Retro DOS v4.0
 28379 00005183 50                      	PUSH	AX
 28380                                  
 28381                                  	; MSDOS 3.3
 28382                                  	;mov	bx,CharType
 28383                                  	;; 09/08/2018
 28384                                  	;;xlat	byte [cs:bx]
 28385                                  	;cs	xlat	
 28386                                  	
 28387                                  	; MSDOS 6.0
 28388 00005184 E81800                  	CALL	GetCharType	; returns type flags in AL
 28389                                  	
 28390                                  	;test	al,1	
 28391 00005187 A801                    	TEST	AL,FCHK 	; test for normal character
 28392 00005189 58                      	POP	AX
 28393 0000518A 5B                      	POP	BX
 28394 0000518B C3                      	RETN
 28395                                  
 28396                                  ; This entry has character in AL and lookup table in BX
 28397                                  
 28398                                  	; MSDOS 6.0
 28399                                  ;	;entry GetLet3
 28400                                  GETLET3: ; 10/08/2018
 28401 0000518C 53                      	PUSH	BX
 28402 0000518D EBDC                    	JMP	short gl_0
 28403                                  ;ELSE
 28404                                  ;
 28405                                  ;gl_2:
 28406                                  ;	POP	BX
 28407                                  ;	CMP	AL,"."
 28408                                  ;	retz
 28409                                  ;	CMP	AL,'"'
 28410                                  ;	retz
 28411                                  ;	CALL	PATHCHRCMP
 28412                                  ;	retz
 28413                                  ;	CMP	AL,"["
 28414                                  ;	retz
 28415                                  ;	CMP	AL,"]"
 28416                                  ;	retz
 28417                                  ;ENDIF
 28418                                  
 28419                                  ;---------------------------------------------------------------------
 28420                                  ;
 28421                                  ; DELIM - check if character is a delimiter
 28422                                  ;	Entry : AX = character to check
 28423                                  ;	Exit  : ZF set if character is not a delimiter
 28424                                  ;	Uses  : Flags
 28425                                  ;
 28426                                  ;--------------------------------------------------------------------
 28427                                  
 28428                                  	;entry	DELIM
 28429                                  DELIM:
 28430                                  ;IF TableLook
 28431                                  	; 20/05/2019 - Retro DOS v4.0
 28432 0000518F 50                      	PUSH	AX
 28433                                  
 28434                                  	; MSDOS 3.3
 28435                                  	;push	bx
 28436                                  	;mov	bx,CharType
 28437                                  	;;09/08/2018
 28438                                  	;;xlat	byte [cs:bx]
 28439                                  	;cs	xlat
 28440                                  	;pop	bx
 28441                                  
 28442                                  	; MSDOS 6.0
 28443 00005190 E80C00                  	CALL	GetCharType
 28444                                  	
 28445                                  	;test	al,2
 28446 00005193 A802                    	TEST	AL,FDELIM
 28447 00005195 58                      	POP	AX
 28448 00005196 C3                      	RETN
 28449                                  ;ELSE
 28450                                  ;	CMP	AL,":"
 28451                                  ;	retz
 28452                                  ;
 28453                                  ;	CMP	AL,"<"
 28454                                  ;	retz
 28455                                  ;	CMP	AL,"|"
 28456                                  ;	retz
 28457                                  ;	CMP	AL,">"
 28458                                  ;	retz
 28459                                  ;
 28460                                  ;	CMP	AL,"+"
 28461                                  ;	retz
 28462                                  ;	CMP	AL,"="
 28463                                  ;	retz
 28464                                  ;	CMP	AL,";"
 28465                                  ;	retz
 28466                                  ;	CMP	AL,","
 28467                                  ;	retz
 28468                                  ;ENDIF
 28469                                  
 28470                                  ;-------------------------------------------------------------------------
 28471                                  ;
 28472                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28473                                  ;	Entry : AL = character to check
 28474                                  ;	Exit  : ZF set if character is a space
 28475                                  ;	Uses  : flags
 28476                                  ;
 28477                                  ;-------------------------------------------------------------------------
 28478                                  
 28479                                  	;entry SPCHK
 28480                                  SPCHK:
 28481                                  ;IF TableLook
 28482                                  	; 20/05/2019 - Retro DOS v4.0
 28483 00005197 50                      	PUSH	AX
 28484                                  
 28485                                  	; MSDOS 3.3
 28486                                  	;push	bx
 28487                                  	;mov	bx,CharType
 28488                                  	;; 09/08/2018
 28489                                  	;;xlat	byte [cs:bx]
 28490                                  	;cs	xlat
 28491                                  	;pop	bx
 28492                                  
 28493                                  	; MSDOS 6.0
 28494 00005198 E80400                  	CALL	GetCharType
 28495                                  	
 28496                                  	;test	al,4
 28497 0000519B A804                    	TEST	AL,FSPCHK
 28498 0000519D 58                      	POP	AX
 28499 0000519E C3                      	RETN
 28500                                  ;ELSE
 28501                                  ;	CMP	AL,9		; Filter out tabs too
 28502                                  ;	retz
 28503                                  ;; WARNING! " " MUST be the last compare
 28504                                  ;	CMP	AL," "
 28505                                  ;	return
 28506                                  ;ENDIF
 28507                                  
 28508                                  ;-------------------------------------------------------------------------
 28509                                  ;
 28510                                  ;  GetCharType - return flag bits indicating character type
 28511                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28512                                  ;	defined above at label CharType.
 28513                                  ;
 28514                                  ;	Entry : AL = character to return type flags for
 28515                                  ;	Exit  : AL = type flags
 28516                                  ;	Uses  : AL, flags
 28517                                  ;
 28518                                  ;-------------------------------------------------------------------------
 28519                                  
 28520                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28521                                  
 28522                                  	; 20/05/2019 - Retro DOS v4.0
 28523                                  	; MSDOS 6.0
 28524                                  GetCharType:
 28525                                  	;cmp	al,7Eh
 28526 0000519F 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28527 000051A1 7316                    	jae	short gct_90		; return standard value
 28528                                  
 28529 000051A3 53                      	push	bx
 28530 000051A4 BB[2751]                	mov	bx,CharType		; load lookup table
 28531 000051A7 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28532                                  	;xlat	cs:[bx] 		; get flags
 28533 000051A9 2ED7                    	cs	xlat	
 28534 000051AB 5B                      	pop	bx
 28535                                  
 28536                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28537                                  ; we have to shift the flags down to the low nibble
 28538                                  
 28539 000051AC 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28540                                  
 28541 000051AE D0E8                    	shr	al,1			; we want high nibble, shift it down
 28542 000051B0 D0E8                    	shr	al,1
 28543 000051B2 D0E8                    	shr	al,1
 28544 000051B4 D0E8                    	shr	al,1
 28545                                  gct_80:
 28546 000051B6 240F                    	and	al,0Fh			; clear the unused nibble
 28547 000051B8 C3                      	retn
 28548                                  gct_90:
 28549 000051B9 B00F                    	mov	al,0Fh			; set all flags
 28550 000051BB C3                      	retn
 28551                                  
 28552                                  ;----------------------------------------------------------------------------
 28553                                  ;
 28554                                  ; Procedure : PATHCHRCMP
 28555                                  ;
 28556                                  ;----------------------------------------------------------------------------
 28557                                  
 28558                                  PATHCHRCMP:
 28559 000051BC 3C2F                    	CMP	AL,'/'
 28560 000051BE 7606                    	JBE	short PathRet
 28561 000051C0 3C5C                    	CMP	AL,'\'
 28562 000051C2 C3                      	retn
 28563                                  GotFor:
 28564 000051C3 B05C                    	MOV	AL,'\'
 28565 000051C5 C3                      	retn
 28566                                  PathRet:
 28567 000051C6 74FB                    	JZ	short GotFor
 28568 000051C8 C3                      	retn
 28569                                  
 28570                                  ;============================================================================
 28571                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28572                                  ;============================================================================
 28573                                  ; 30/07/2018 - Retro DOS v3.0
 28574                                  ; 29/04/2019 - Retro DOS v4.0
 28575                                  
 28576                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28577                                  
 28578                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28579                                  
 28580                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28581                                  ;	NAME	IBMCTRLC
 28582                                  
 28583                                  ;**	Low level routines for detecting special characters on CON input,
 28584                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28585                                  ;	process termination code, and the INT 0 divide overflow handler.
 28586                                  ;
 28587                                  ;	FATAL
 28588                                  ;	FATAL1
 28589                                  ;	reset_environment
 28590                                  ;	DSKSTATCHK
 28591                                  ;	SPOOLINT
 28592                                  ;	STATCHK
 28593                                  ;	CNTCHAND
 28594                                  ;	DIVOV
 28595                                  ;	CHARHARD
 28596                                  ;	HardErr
 28597                                  ;
 28598                                  ;	Revision history:
 28599                                  ;
 28600                                  ;	    AN000	version 4.0   Jan 1988
 28601                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28602                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28603                                  ;
 28604                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28605                                  ;	      flags register. In order to return to user normally DOS used to
 28606                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28607                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28608                                  ;
 28609                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28610                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28611                                  ;	      charhard.
 28612                                  
 28613                                  ; 29/04/2019 - Retro DOS v4.0
 28614                                  	; MSDOS 6.0
 28615                                  ;		public	LowInt23Addr		
 28616                                  LowInt23Addr: ;	LABEL	DWORD
 28617 000051C9 [E510]0000              	DW	LowInt23, 0
 28618                                  
 28619                                  ;		public	LowInt24Addr
 28620                                  LowInt24Addr: ;	LABEL	DWORD
 28621 000051CD [F910]0000              	DW	LowInt24, 0
 28622                                  
 28623                                  ;		public	LowInt28Addr
 28624                                  LowInt28Addr: ;	LABEL	DWORD
 28625 000051D1 [0D11]0000              	DW	LowInt28, 0
 28626                                  
 28627                                  ;Break	<Checks for ^C in CON I/O>
 28628                                  
 28629                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28630                                  ; 05/05/2019 - Retro DOS v4.0
 28631                                  
 28632                                  ;---------------------------------------------------------------------------
 28633                                  ;
 28634                                  ; Procedure Name : DSKSTATCHK
 28635                                  ;
 28636                                  ; Check for ^C if only one level in
 28637                                  ;
 28638                                  ;---------------------------------------------------------------------------
 28639                                  
 28640                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28641                                  
 28642                                  DSKSTATCHK:        
 28643                                  	;CMP	BYTE [INDOS],1
 28644 000051D5 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28645                                  	;retnz			; Do NOTHING
 28646                                  	; 16/12/2022
 28647 000051DB 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28648                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28649                                  	;jz	short _RET37 ; dskstatchk1
 28650                                  	;retn
 28651                                  ;_RET37:
 28652                                  ;dskstatchk1:
 28653 000051DD 51                      	PUSH    CX
 28654 000051DE 06                              PUSH    ES
 28655 000051DF 53                              PUSH    BX
 28656 000051E0 1E                              PUSH    DS
 28657 000051E1 56                              PUSH    SI
 28658                                          
 28659                                  	;PUSH	CS
 28660                                          ;POP	ES
 28661                                          ;PUSH	CS
 28662                                          ;POP	DS
 28663                                  
 28664 000051E2 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28665 000051E4 8EC3                    	MOV	ES,BX		; for deviocall2
 28666 000051E6 8EDB                    	MOV	DS,BX
 28667                                  
 28668                                  	; 16/12/2022
 28669                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28670                                  
 28671                                  	; 05/05/2019
 28672                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28673                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28674                                  	;mov	word [ss:DSKSTST],0
 28675                                  
 28676                                  	; 16/12/2022
 28677                                  	; 25/06/2019
 28678 000051E8 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28679 000051ED C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28680 000051F2 C706[9503]0000          	mov	word [DSKSTST],0
 28681                                  
 28682 000051F8 BB[9203]                        MOV     BX,DSKSTCALL
 28683                                  
 28684                                  	;LDS	SI,[ss:BCON]
 28685                                          ; 25/062019
 28686 000051FB C536[3200]              	lds	si,[BCON]
 28687                                  
 28688                                  ; 16/12/2022
 28689                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28690                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28691                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28692                                  ;	mov	word [ss:DSKSTST],0
 28693                                  ;	mov	bx,DSKSTCALL
 28694                                  ;	lds	si,[ss:BCON]
 28695                                  
 28696 000051FF E866F5                  	CALL	DEVIOCALL2
 28697                                   	; 15/03/2018
 28698                                  	;;test	word [ss:DSKSTST],200h
 28699                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28700                                  	; 05/05/2019
 28701 00005202 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28702 00005208 7408                    	jz	short _GotCh		; No characters available
 28703                                  
 28704 0000520A 30C0                            XOR     AL,AL                   ; Set zero
 28705                                  RET36:
 28706 0000520C 5E                              POP     SI
 28707 0000520D 1F                              POP     DS
 28708 0000520E 5B                              POP     BX
 28709 0000520F 07                              POP     ES
 28710 00005210 59                              POP     CX
 28711                                  	; 16/12/2022
 28712                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28713                                  _RET37:
 28714 00005211 C3                              RETN
 28715                                  
 28716                                  _GotCh:
 28717 00005212 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28718                                  
 28719 00005216 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28720 00005218 75F2                            JNZ     SHORT RET36
 28721 0000521A 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28722 00005220 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28723 00005226 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28724                                  	; 09/09/2018
 28725 0000522B 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28726 00005232 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28727 00005239 E82CF5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28728 0000523C 5E                              POP     SI
 28729 0000523D 1F                              POP     DS
 28730 0000523E 5B                              POP     BX                      ; Clean stack
 28731 0000523F 07                              POP     ES
 28732 00005240 59                              POP     CX
 28733 00005241 E9D000                          JMP	CNTCHAND ; 10/08/2018
 28734                                  
 28735                                  	; 05/05/2019
 28736                                  NOSTOP:
 28737                                  	; MSDOS 6.0
 28738 00005244 3C10                    	CMP	AL,"P"-"@"
 28739 00005246 7509                    	JNZ	short check_next
 28740                                  				    	; SS override
 28741 00005248 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28742 0000524E 7406                    	JZ	short INCHKJ		; no
 28743 00005250 C3                      	retn
 28744                                  check_next:
 28745                                  	;IF	NOT TOGLPRN
 28746                                  	;CMP	AL,"N"-"@"
 28747                                  	;JZ	short INCHKJ
 28748                                  	;ENDIF
 28749                                  
 28750 00005251 3C03                    	CMP	AL,"C"-"@"
 28751 00005253 7401                    	JZ	short INCHKJ
 28752                                  check_end:
 28753 00005255 C3                      	retn
 28754                                  
 28755                                  	; MSDOS 3.3
 28756                                          ;CMP     AL,"P"-"@"  ; cmp al,16	
 28757                                          ;JZ	short INCHKJ
 28758                                  
 28759                                  	; 15/04/2018
 28760                                          ;;IF	NOT TOGLPRN
 28761                                          ;CMP	AL,"N"-"@"
 28762                                          ;JZ	SHORT INCHKJ
 28763                                          ;;ENDIF
 28764                                  	
 28765                                  	;CMP     AL,"C"-"@"  ; cmp al,3	
 28766                                          ;JZ	short INCHKJ
 28767                                  	;RETN
 28768                                  
 28769                                  	; 08/09/2018
 28770                                  INCHKJ:	; 10/08/2018
 28771 00005256 E9A500                  	JMP	INCHK
 28772                                  
 28773                                  ;----------------------------------------------------------------------------
 28774                                  ;
 28775                                  ; Procedure Name : SpoolInt
 28776                                  ;
 28777                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28778                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28779                                  ; the middle of an INT 24.
 28780                                  ;
 28781                                  ;----------------------------------------------------------------------------
 28782                                  
 28783                                  SPOOLINT:
 28784 00005259 9C                              PUSHF
 28785                                  	; 15/03/2018
 28786 0000525A 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28787 00005260 7423                            JZ      SHORT POPFRET
 28788 00005262 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28789 00005268 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28790                                  
 28791                                  	; 30/07/2018
 28792                                  
 28793                                  	; Note that we are going to allow an external program to issue system 
 28794                                  	; calls at this time. We MUST preserve IdleInt across this.
 28795                                  
 28796 0000526A 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28797                                  
 28798                                  	; 05/05/2019 - Retro DOS v4.0
 28799                                   
 28800                                  	; MSDOS 6.0
 28801 0000526F 36803E[0F12]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28802 00005275 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28803 00005277 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28804 00005279 EB05                    	jmp	short spool_ret_addr
 28805                                  
 28806                                  do_low_int28:
 28807                                  	;call	far [ss:LowInt28Addr]
 28808 0000527B 2EFF1E[D151]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28809                                  
 28810                                  spool_ret_addr:
 28811                                  	;INT	int_spooler		; INT 28h
 28812                                  
 28813 00005280 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28814                                  POPFRET:
 28815 00005285 9D                              POPF
 28816                                  _RET18:  
 28817 00005286 C3                      	RETN
 28818                                  
 28819                                  ; 05/05/2019 - Retro DOS v4.0
 28820                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 28821                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28822                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 28823                                  
 28824                                  ;----------------------------------------------------------------------------
 28825                                  ;
 28826                                  ; Procedure Name : STATCHK
 28827                                  ;
 28828                                  ;----------------------------------------------------------------------------
 28829                                  
 28830                                  STATCHK:
 28831 00005287 E84BFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 28832                                                                          ; input redirection
 28833 0000528A 53                              PUSH    BX
 28834 0000528B 31DB                            XOR     BX,BX
 28835 0000528D E88CE4                          CALL	GET_IO_SFT
 28836 00005290 5B                              POP     BX
 28837 00005291 72F3                            JC      SHORT _RET18
 28838                                  
 28839 00005293 B401                            MOV     AH,1
 28840 00005295 E8F9F2                          CALL	IOFUNC
 28841 00005298 74BF                            JZ      SHORT SPOOLINT
 28842 0000529A 3C13                            CMP     AL,'S'-'@'
 28843 0000529C 75A6                            JNZ     SHORT NOSTOP
 28844                                  
 28845                                  	; 05/05/2019
 28846                                  	; MSDOS 6.0			; SS override
 28847 0000529E 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 28848 000052A4 75AF                    	JNZ	short check_end		; AN000; yes
 28849                                  
 28850 000052A6 30E4                            XOR     AH,AH
 28851 000052A8 E8E6F2                          CALL	IOFUNC                  ; Eat Cntrl-S
 28852 000052AB EB4A                            JMP     SHORT PAUSOSTRT
 28853                                  PRINTOFF:
 28854                                  PRINTON:
 28855 000052AD 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 28856                                  
 28857                                  	; 30/07/2018 - Retro DOS v3.0
 28858 000052B2 53                      	PUSH	BX
 28859 000052B3 BB0400                  	MOV	BX,4
 28860 000052B6 E863E4                  	call	GET_IO_SFT
 28861 000052B9 5B                      	POP	BX
 28862 000052BA 72CA                    	jc	short _RET18
 28863 000052BC 06                      	PUSH	ES
 28864 000052BD 57                      	PUSH	DI
 28865 000052BE 1E                      	PUSH	DS
 28866 000052BF 07                      	POP	ES
 28867 000052C0 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 28868                                  	;test	word [es:di+5],800h
 28869                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 28870                                  	; 05/05/2019
 28871 000052C2 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 28872 000052C7 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 28873                                  
 28874                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 28875                                  					; See if allowed
 28876 000052C9 50                      	push	ax
 28877 000052CA B82611                  	mov	ax,1126h
 28878 000052CD CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28879                                  			; Return: CF set on error, AX = error code
 28880                                  			; STACK unchanged
 28881 000052CF 58                      	pop	ax
 28882                                  
 28883 000052D0 730F                    	JNC	short NORM_PR 		; Echo is OK
 28884                                  
 28885                                  					; SS override
 28886 000052D2 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 28887                                  
 28888                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 28889                                  
 28890 000052D8 50                      	push    ax
 28891 000052D9 B82411                  	mov     ax,1124h
 28892 000052DC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28893                                  			; ES:DI -> SFT, SS = DOS CS
 28894 000052DE 58                      	pop     ax
 28895                                  
 28896 000052DF EB10                    	JMP	SHORT RETP6
 28897                                  NORM_PR:
 28898 000052E1 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 28899 000052E7 7505                    	JNZ	short PRNOPN
 28900 000052E9 E800F4                  	call	DEV_CLOSE_SFT
 28901 000052EC EB03                    	JMP	SHORT RETP6
 28902                                  PRNOPN:
 28903 000052EE E8F3F3                  	call	DEV_OPEN_SFT
 28904                                  RETP6:
 28905 000052F1 5F                      	POP	DI
 28906 000052F2 07                      	POP	ES
 28907                                  STATCHK_RETN:
 28908 000052F3 C3                              RETN
 28909                                  PAUSOLP:
 28910 000052F4 E862FF                          CALL    SPOOLINT
 28911                                  PAUSOSTRT:
 28912 000052F7 B401                            MOV     AH,1
 28913 000052F9 E895F2                          CALL	IOFUNC
 28914 000052FC 74F6                            JZ      SHORT PAUSOLP
 28915                                  INCHK:
 28916 000052FE 53                              PUSH    BX
 28917 000052FF 31DB                            XOR     BX,BX
 28918 00005301 E818E4                          CALL	GET_IO_SFT
 28919 00005304 5B                              POP     BX
 28920 00005305 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 28921 00005307 30E4                            XOR     AH,AH
 28922 00005309 E885F2                          CALL	IOFUNC
 28923                                  	; 30/07/2018
 28924                                  	; MSDOS 3.3
 28925                                          ;CMP	AL,'P'-'@' ;cmp al,16
 28926                                          ;JNZ	SHORT NOPRINT
 28927                                  
 28928                                  	;cmp	byte [SS:SCAN_FLAG],0
 28929                                  	;JZ	SHORT PRINTON	
 28930                                  	;mov	byte [ss:SCAN_FLAG],0
 28931                                  
 28932                                  	; 05/05/2019
 28933                                  	; MSDOS 6.0
 28934 0000530C 3C10                    	CMP	AL,"P"-"@"
 28935                                  	;;;;  7/14/86	ALT_Q key fix
 28936 0000530E 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 28937                                  ;NOPRINT:	
 28938                                  	;IF	NOT TOGLPRN
 28939                                  	;CMP	AL,"N"-"@"
 28940                                  	;JZ	short PRINTOFF
 28941                                  	;ENDIF
 28942 00005310 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 28943                                  	;retnz
 28944 00005312 75DF                    	jnz	short STATCHK_RETN
 28945                                  
 28946                                  	; !! NOTE: FALL THROUGH !!
 28947                                  
 28948                                  ;---------------------------------------------------------------------------
 28949                                  ;
 28950                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 28951                                  ;
 28952                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 28953                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 28954                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 28955                                  ; processing to continue; 2) the original interrupt return address to the code
 28956                                  ; that performed the function call in the first place. If the user CTRL-C
 28957                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 28958                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 28959                                  ; is simulated.
 28960                                  ;
 28961                                  ;---------------------------------------------------------------------------
 28962                                  
 28963                                  CNTCHAND:
 28964                                  	; MSDOS 6.0			; SS override
 28965                                  					; AN002; from RAWOUT
 28966                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 28967                                  	;JNZ	short around_deadlock 	; AN002;
 28968                                  
 28969                                  	; 05/05/2019 - Retro DOS v4.0
 28970 00005314 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 28971 0000531A 7508                    	JNZ	short around_deadlock 	; AN002;
 28972                                  
 28973 0000531C B003                            MOV     AL,3			; Display "^C"
 28974 0000531E E864C4                          CALL	BUFOUT
 28975 00005321 E8FFC2                          CALL	CRLF
 28976                                  around_deadlock:
 28977 00005324 16                              PUSH    SS
 28978 00005325 1F                              POP     DS
 28979 00005326 803E[5703]00                    CMP     BYTE [CONSWAP],0
 28980 0000532B 7403                            JZ      SHORT NOSWAP
 28981 0000532D E856E0                          CALL	SWAPBACK
 28982                                  NOSWAP:
 28983 00005330 FA                      	CLI				; Prepare to play with stack
 28984 00005331 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 28985 00005335 8B26[8405]              	MOV	SP,[USER_SP]
 28986 00005339 E858B1                          CALL	restore_world       ; User registers now restored
 28987                                  
 28988                                  	; 30/07/2018 - Retro DOS v3.0 
 28989                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 28990                                          ; 14/03/2018 - Retro DOS v2.0
 28991                                  	;MOV	BYTE [CS:INDOS],0	
 28992                                          ;MOV	BYTE [CS:ERRORMODE],0
 28993                                          ;MOV	[CS:ConC_Spsave],SP
 28994                                  	;clc	;30/07/2018
 28995                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 28996                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 28997                                  			; Return: return via RETF 2 with CF set
 28998                                  			; DOS will abort program with errorlevel 0
 28999                                  			; else
 29000                                  			; interrupted DOS call continues
 29001                                  
 29002                                  	; 05/05/2019 - Retro DOS v4.0
 29003                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29004                                  
 29005                                  	; CS was used to address these variables. We have to use DOSDATA
 29006                                  	
 29007 0000533C 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29008                                  			; (pop es, after 'call restore_world')	
 29009 0000533D 1E                      	push	ds
 29010                                  	;getdseg <ds>			; ds -> dosdata
 29011 0000533E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29012 00005343 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29013 00005348 C606[2003]00            	mov	byte [ERRORMODE],0
 29014 0000534D 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29015                                  	; User SP has changed because of push. Adjust for it
 29016 00005351 8306[3203]02            	add	word [ConC_Spsave],2
 29017                                  
 29018 00005356 803E[0F12]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29019 0000535B 1F                       	pop	ds	; restore ds
 29020 0000535C 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29021 0000535E F8                      	CLC				
 29022 0000535F CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29023 00005361 EB06                    	jmp	short ctrlc_ret_addr
 29024                                  
 29025                                  	; 05/05/2019
 29026                                  do_low_int23:
 29027 00005363 F8                      	clc
 29028 00005364 2EFF1E[C951]            	call	far [cs:LowInt23Addr]	
 29029                                  
 29030                                  	; 30/07/2018 
 29031                                  
 29032                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29033                                  
 29034                                  ; The user has returned to us. The circumstances we allow are:
 29035                                  ;
 29036                                  ;   IRET	We retry the operation by redispatching the system call
 29037                                  ;   CLC/RETF	POP the stack and retry
 29038                                  ;   ... 	Exit the current process with ^C exit
 29039                                  ;
 29040                                  ; User's may RETURN to us and leave interrupts on. 
 29041                                  ; Turn 'em off just to be sure
 29042                                  
 29043                                  ctrlc_ret_addr: ; 05/05/2019
 29044                                  
 29045 00005369 FA                      	CLI
 29046                                  
 29047                                  	; MSDOS 3.3 
 29048                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29049                                  	;PUSHF				; and the flags (maybe new call)
 29050                                  	;POP	AX
 29051                                  
 29052                                  	; 05/05/2019
 29053                                  	; MSDOS 6.0
 29054                                  
 29055                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29056                                  
 29057 0000536A 50                      	push	ax
 29058 0000536B 8CD8                    	mov	ax,ds
 29059                                  	;getdseg <ds>			; ds -> dosdata
 29060 0000536D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29061 00005372 A3[0A0D]                	mov	[TEMPSEG],ax
 29062 00005375 58                      	pop	ax
 29063 00005376 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29064 00005379 9C                      	pushf				; and the flags (maybe new call)
 29065 0000537A 58                      	pop	ax
 29066                                  
 29067                                  ; See if the input stack is identical to the output stack
 29068                                  
 29069                                  	; MSDOS 3.3
 29070                                  	;CMP	SP,[CS:ConC_Spsave]
 29071                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29072                                  
 29073                                  	; MSDOS 6.0
 29074 0000537B 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29075 0000537F 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29076                                  
 29077                                  ; Repeat the operation by redispatching the system call.
 29078                                  
 29079                                  ctrlc_repeat:
 29080                                  	; MSDOS 3.3
 29081                                  	;MOV	AX,[CS:USER_IN_AX]
 29082                                  	; 05/05/2019
 29083                                  	; MSDOS 6.0
 29084 00005381 A1[3A03]                	mov	ax,[USER_IN_AX]
 29085 00005384 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29086                                  	; MSDOS 3.3 & MSDOS 6.0 
 29087                                  	;transfer COMMAND
 29088                                  COMMANDJ:
 29089 00005388 E9BCAF                  	JMP	COMMAND
 29090                                  
 29091                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29092                                  ; RETF'd leaving some flags on the stack and examine the input
 29093                                  
 29094                                  ctrlc_try_new:
 29095 0000538B 83C402                  	ADD	SP,2			; pop those flags
 29096                                  	;;test	ax,1
 29097                                  	;TEST	AX,f_Carry		; did he return with carry?
 29098 0000538E A801                    	test	al,f_Carry ; test al,1
 29099 00005390 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29100                                  
 29101                                  	; MSDOS 6.0
 29102 00005392 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29103                                  
 29104                                  	; Well...  time to abort the user.  
 29105                                  	; Signal a ^C exit and use the EXIT system call..
 29106                                  
 29107                                  ctrlc_abort:
 29108                                  	; MSDOS 3.3
 29109                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29110                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29111                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29112                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29113                                  	;;JMP	SHORT COMMANDJ
 29114                                  	;JMP	COMMAND
 29115                                  
 29116                                  	; 05/05/2019 - Retro DOS v4.0
 29117                                  	; MSDOS 6.0
 29118 00005396 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29119 00005399 1E                      	push	ds
 29120                                  	;getdseg <ds>			; ds -> dosdata
 29121 0000539A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29122 0000539F C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29123 000053A4 1F                      	pop	ds
 29124                                  	;transfer COMMAND		; give up by faking $EXIT
 29125 000053A5 EBE1                    	JMP	SHORT COMMANDJ
 29126                                  	;JMP	COMMAND
 29127                                  
 29128                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29129                                  ;----------------------------------------------------------------------------
 29130                                  ;
 29131                                  ; Procedure Name : DIVOV
 29132                                  ;
 29133                                  ; Default handler for division overflow trap
 29134                                  ;
 29135                                  ;----------------------------------------------------------------------------
 29136                                  
 29137                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29138                                  DIVOV: 
 29139                                  	; 05/05/2019 - Retro DOS v4.0
 29140                                  	; 30/07/2018
 29141                                  	; 07/07/2018 - Retro DOS v3.0
 29142 000053A7 BE[F509]                	mov	si,DIVMES
 29143 000053AA 2E8B1E[080A]            	mov	bx,[cs:DivMesLen]
 29144                                  	;mov	ax,cs
 29145                                  	;mov	ss,ax
 29146                                  	; 05/05/2019
 29147                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29148 000053AF 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29149 000053B4 BC[A007]                	mov     sp,AUXSTACK
 29150                                  	;call	RealDivOv ; MSDOS 3.3
 29151 000053B7 E80200                  	call	_OUTMES ; MSDOS 6.0
 29152 000053BA EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29153                                  
 29154                                  ; 30/07/2018
 29155                                  
 29156                                  ; MSDOS 6.0
 29157                                  ;---------------------------------------------------------------------------
 29158                                  ;
 29159                                  ; Procedure Name : OutMes
 29160                                  ;
 29161                                  ;
 29162                                  ; OutMes: perform message output
 29163                                  ; Inputs:   SS:SI points to message
 29164                                  ;	    BX has message length
 29165                                  ; Outputs:  message to BCON
 29166                                  ;
 29167                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29168                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29169                                  ;NB. This procedure is called only from DIVOV. -SR
 29170                                  ;
 29171                                  ;---------------------------------------------------------------------------
 29172                                  
 29173                                  ;MSDOS 3.3
 29174                                  ;---------------------------------------------------------------------------
 29175                                  ; RealDivOv: perform actual divide overflow stuff.
 29176                                  ; Inputs:   none
 29177                                  ; Outputs:  message to BCON
 29178                                  ;---------------------------------------------------------------------------
 29179                                  
 29180                                  	; 05/05/2019 - Retro DOS v4.0
 29181                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29182                                  
 29183                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29184                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29185                                  
 29186                                  ;---------------------------------------------------------------------------
 29187                                  ;
 29188                                  ; Procedure Name : OutMes
 29189                                  ;
 29190                                  ; OutMes: perform message output
 29191                                  ; Inputs:   SS:SI points to message
 29192                                  ;	    BX has message length
 29193                                  ; Outputs:  message to BCON
 29194                                  ;
 29195                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29196                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29197                                  ;NB. This procedure is called only from DIVOV. -SR
 29198                                  ;
 29199                                  ;---------------------------------------------------------------------------
 29200                                  
 29201                                  	; 30/07/2018
 29202                                  	; MSDOS 6.0
 29203                                  _OUTMES:
 29204                                  	; MSDOS 3.3
 29205                                  ;RealDivOv:
 29206                                  	; 07/07/2018 - Retro DOS v3.0
 29207                                          ;Context ES
 29208 000053BC 16                      	push	ss ; 05/05/2019
 29209                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29210 000053BD 07                      	POP	ES
 29211                                          ;Context DS
 29212 000053BE 16                      	push	ss ; 05/05/2019	
 29213                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29214 000053BF 1F                      	POP	DS
 29215 000053C0 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29216 000053C5 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29217 000053CA C706[9503]0000                  MOV     WORD [DSKSTST],0
 29218                                  	; BX = [DivMesLen] = 19
 29219 000053D0 891E[A403]                      MOV     [DSKSTCNT],BX
 29220 000053D4 BB[9203]                        MOV     BX,DSKSTCALL
 29221 000053D7 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29222                                  	; 08/09/2018
 29223                                  	;mov	[DEVIOBUF_PTR],si
 29224                                  	; MSDOS 6.0
 29225                                  					; CS is used for string, fill in 
 29226                                  					; segment address 
 29227 000053DB 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29228                                  
 29229 000053DF C536[3200]                      LDS     SI,[BCON]
 29230 000053E3 E882F3                          CALL	DEVIOCALL2
 29231                                  
 29232                                  	;; 14/03/2018
 29233                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29234                                  	;; 08/09/2018
 29235                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29236                                          ;MOV	WORD [CS:DSKSTCNT],1
 29237                                          
 29238                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29239                                  
 29240                                  	; ES still points to DOSDATA. ES is
 29241                                  					; not destroyed by deviocall2. So use
 29242                                  					; ES override.
 29243                                  
 29244 000053E6 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29245 000053ED 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29246                                  
 29247 000053F4 C3                      	RETN
 29248                                  
 29249                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29250                                  ;---------------------------------------------------------------------------
 29251                                  ;
 29252                                  ; Procedure Name : CHARHARD
 29253                                  ;
 29254                                  ;
 29255                                  ; Character device error handler
 29256                                  ; Same function as HARDERR
 29257                                  ;
 29258                                  ;---------------------------------------------------------------------------
 29259                                  
 29260                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29261                                  CHARHARD:
 29262                                  	; 05/05/2019 - Retro DOS v4.0
 29263                                  	; 30/07/2018
 29264                                  	; 08/07/2018 - Retro DOS v3.0
 29265                                  
 29266                                  	; MSDOS 6.0
 29267                                  		   			; M024 - start
 29268 000053F5 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29269                                  	;jne	short @f		; Y: allow fail
 29270 000053FB 750B                    	jne	short chard1
 29271                                  
 29272 000053FD 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29273                                  
 29274 00005400 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29275 00005406 7503                    	jnz	short ctrlp		; Y: 
 29276                                  ;@@:
 29277                                  chard1:					; M024 - end
 29278                                  	; MSDOS 6.0 & MSDOS 3.3
 29279                                  
 29280                                  ; Character device error handler
 29281                                  ; Same function as HARDERR
 29282                                  
 29283                                  	;or	ah,38h
 29284 00005408 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29285                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29286 0000540B 368826[4B03]            	mov	[SS:ALLOWED],ah
 29287                                  
 29288                                  	; 15/03/2018
 29289 00005410 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29290 00005415 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29291 0000541A 56                              PUSH    SI
 29292                                  	;and	di,0FFh
 29293 0000541B 81E7FF00                        AND     DI,STECODE
 29294 0000541F 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29295 00005421 E86400                          CALL    FATALC
 29296 00005424 5E                              POP     SI
 29297                                  	;return
 29298 00005425 C3                              RETN
 29299                                  
 29300                                  ;---------------------------------------------------------------------------
 29301                                  ;
 29302                                  ; Procedure Name : HardErr
 29303                                  ;
 29304                                  ; Hard disk error handler. Entry conditions:
 29305                                  ;	DS:BX = Original disk transfer address
 29306                                  ;	DX = Original logical sector number
 29307                                  ;	CX = Number of sectors to go (first one gave the error)
 29308                                  ;	AX = Hardware error code
 29309                                  ;	DI = Original sector transfer count	
 29310                                  ;	ES:BP = Base of drive parameters
 29311                                  ;	[READOP] = 0 for read, 1 for write
 29312                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29313                                  ; Output:
 29314                                  ;	[FAILERR] will be set if user responded FAIL
 29315                                  ;
 29316                                  ;--------------------------------------------------------------------------
 29317                                  
 29318                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29319                                  HARDERR:
 29320                                  	; 05/05/2019 - Retro DOS v4.0
 29321                                  	; 30/07/2018
 29322                                  	; 08/07/2018 - Retro DOS v3.0
 29323 00005426 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29324                                          ;and	di,0FFh
 29325 00005427 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29326                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29327                                  	;cmp	di,0
 29328 0000542B 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29329 0000542E 750A                            JNZ     short NOSETWRPERR
 29330 00005430 50                              PUSH    AX
 29331                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29332                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29333                                          ;;MOV	AL,[ES:BP+0]
 29334                                  	; 15/12/2022
 29335 00005431 268A4600                	mov	al,[ES:BP]
 29336                                          	; 15/03/2018
 29337 00005435 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29338 00005439 58                              POP     AX
 29339                                  NOSETWRPERR:
 29340 0000543A 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29341 0000543C 01C2                            ADD     DX,AX                   ; First sector number to retry
 29342 0000543E 52                              PUSH    DX
 29343                                  	; 08/07/2018
 29344                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29345 0000543F 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29346 00005443 5A                              POP     DX
 29347 00005444 01C3                            ADD     BX,AX                   ; First address for retry
 29348 00005446 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29349                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29350 00005448 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29351 0000544C 721A                            JB      SHORT ERRINT
 29352 0000544E FEC4                            INC     AH                      ; Flag for FAT
 29353                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29354                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29355 00005450 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29356 00005454 7308                    	JAE	short TESTDIR 		; No
 29357                                  		 ; Err in FAT must force recomp of freespace
 29358                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29359                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29360 00005456 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29361 0000545C EB0A                    	JMP	SHORT ERRINT
 29362                                  TESTDIR:
 29363 0000545E FEC4                            INC     AH
 29364                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29365 00005460 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29366 00005464 7202                            JB      SHORT ERRINT
 29367 00005466 FEC4                            INC     AH                      ; Must be in data area
 29368                                  ERRINT:
 29369 00005468 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29370 0000546A 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29371                                  
 29372                                  	; 15/08/2018
 29373                                  					; SS override for allowed and EXITHOLD
 29374 0000546F 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29375                                  
 29376                                          ;entry   FATAL
 29377                                  FATAL:
 29378                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29379                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29380                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29381                                  	; 15/12/2022
 29382 00005474 268A4600                	MOV	AL,[ES:BP]        
 29383                                  
 29384                                  	;entry   FATAL1
 29385                                  FATAL1:  
 29386                                  	; 15/03/2018      
 29387 00005478 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29388 0000547D 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29389                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29390                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29391 00005482 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29392 00005486 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29393                                  
 29394                                  	; DI has the INT-24-style extended error. We now map the error code 
 29395                                  	; for this into the normalized get extended error set by using the 
 29396                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29397                                  	; the device returned codes and leave all others beyond the look up 
 29398                                  	; table alone.
 29399                                  
 29400                                  	; 08/07/2018 - Retro DOS v3.0
 29401                                  FATALC:
 29402 00005488 E89701                  	call	SET_I24_EXTENDED_ERROR
 29403                                  	;cmp	di,0Ch
 29404 0000548B 83FF0C                  	CMP	DI,error_I24_gen_failure
 29405 0000548E 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29406 00005490 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29407                                  					;  Only come via GetExtendedError
 29408                                  ;** ----------------------------------------------------------------
 29409                                  ;
 29410                                  ; Entry point used by REDIRector on Network I 24 errors.
 29411                                  ;
 29412                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29413                                  ;
 29414                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29415                                  ;     EXITHOLD set for restore of ES:BP.
 29416                                  ; ------------------------------------------------------------------
 29417                                  	;entry	NET_I24_ENTRY
 29418                                  NET_I24_ENTRY:
 29419                                  GOT_RIGHT_CODE:
 29420 00005493 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29421 00005499 7404                            JZ	SHORT NoSetFail
 29422 0000549B B003                    	MOV	AL,3
 29423 0000549D EB6C                    	JMP	short FailRet
 29424                                  NoSetFail:
 29425 0000549F 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29426 000054A4 16                              PUSH	SS
 29427 000054A5 07                              POP	ES
 29428                                      
 29429                                  	; Wango!!! We may need to free some user state info... In 
 29430                                  	; particular, we may have locked down a JFN for a user and he may 
 29431                                  	; NEVER return to us. Thus,we need to free it here and then 
 29432                                  	; reallocate it when we come back.
 29433                                  
 29434 000054A6 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29435 000054AC 740C                    	JZ	short _NoFree
 29436 000054AE 1E                      	push	ds
 29437 000054AF 56                      	push	si
 29438 000054B0 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29439 000054B5 C604FF                  	MOV	BYTE [SI],0FFH
 29440 000054B8 5E                      	pop	si
 29441 000054B9 1F                      	pop	ds
 29442                                  
 29443                                  _NoFree:
 29444 000054BA FA                      	CLI
 29445                                  					; Prepare to play with stack
 29446 000054BB 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29447 000054C0 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29448                                  
 29449                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29450                                  
 29451                                  	;; Extended Open hooks
 29452                                  					; AN000;IFS.I24 error disabled
 29453                                  	;test	byte [ss:EXTOPEN_ON],2
 29454 000054C5 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29455 000054CB 7404                    	JZ	short i24yes		; AN000;IFS.no
 29456                                  faili24:				; AN000;
 29457 000054CD B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29458 000054CF EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29459                                  i24yes: 				; AN000;
 29460                                  	;; Extended Open hooks
 29461                                  
 29462 000054D1 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29463 000054D6 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29464                                  
 29465                                  	;;int	24h	
 29466                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29467                                  					; must preserve ES
 29468                                  	; 05/05/2019
 29469 000054DB 26803E[0F12]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29470 000054E1 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29471 000054E3 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29472                                  					; must preserve ES
 29473 000054E5 EB05                    	jmp	short criterr_ret_addr
 29474                                  
 29475                                  do_low_int24:
 29476                                  	; 05/05/2019
 29477                                  	; MSDOS 6.0
 29478 000054E7 2EFF1E[CD51]            	call    far [cs:LowInt24Addr]
 29479                                  criterr_ret_addr:
 29480 000054EC 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29481 000054F1 268C16[8605]                    MOV     [ES:USER_SS],SS
 29482 000054F6 8CC5                            MOV     BP,ES
 29483 000054F8 8ED5                            MOV     SS,BP
 29484                                  passi24:
 29485 000054FA 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29486 000054FF 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29487 00005504 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29488 0000550A FB                              STI
 29489                                  FailRet:
 29490 0000550B 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29491                                  	
 29492                                  	; 08/07/2018
 29493                                  
 29494                                  	; Triage the user's reply.
 29495                                  
 29496 00005510 3C01                    	CMP	AL,1
 29497 00005512 723D                    	JB	short CheckIgnore	; 0 => ignore
 29498 00005514 7445                    	JZ	short CheckRetry	; 1 => retry
 29499 00005516 3C03                    	CMP	AL,3			; 3 => fail
 29500 00005518 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29501                                  
 29502                                  	; The reply was fail. See if we are allowed to fail.
 29503                                  
 29504                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29505                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29506                                  	;test	byte [ss:ALLOWED],8
 29507 0000551A 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29508 00005520 7443                    	jz	short DoAbort	; No, do abort
 29509                                  DoFail:
 29510 00005522 B003                    	MOV	AL,3		; just in case...
 29511                                  				; AN000;EO. I24 error disabled
 29512                                  	; 05/05/2019
 29513                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29514 00005524 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29515 0000552A 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29516                                  	
 29517 0000552C 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29518                                  CleanUp:
 29519 00005531 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29520 00005537 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29521                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29522                                  	;jnz	short CleanUp2
 29523                                  	;retn
 29524                                  	; 17/12/2022
 29525 0000553D 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29526                                  CleanUp2:
 29527 0000553F 1E                      	push	ds
 29528 00005540 56                      	push	si
 29529 00005541 50                      	push	ax
 29530 00005542 36A1[AA05]              	MOV	AX,[ss:SFN]
 29531 00005546 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29532 0000554B 8804                    	MOV	[SI],AL
 29533 0000554D 58                      	pop	ax
 29534 0000554E 5E                      	pop	si
 29535 0000554F 1F                      	pop	ds
 29536                                  Cleanup_retn:
 29537 00005550 C3                      	retn
 29538                                  
 29539                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29540                                  
 29541                                  CheckIgnore:
 29542                                  	;test	byte [ss:ALLOWED],20h
 29543 00005551 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29544 00005557 74C9                    	jz	short DoFail			 ; No, do fail
 29545 00005559 EBD6                    	jmp	short CleanUp
 29546                                  
 29547                                  	; The reply was RETRY. See if we are allowed to retry.
 29548                                  
 29549                                  CheckRetry:
 29550                                  	;test	byte [ss:ALLOWED],10h
 29551 0000555B 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29552 00005561 74BF                    	jz	short DoFail			; No, do fail
 29553 00005563 EBCC                    	JMP	short CleanUp
 29554                                  
 29555                                  	; The reply was ABORT.
 29556                                  DoAbort:
 29557 00005565 16                      	push	ss
 29558 00005566 1F                      	pop	ds
 29559                                  
 29560 00005567 803E[5703]00            	CMP	byte [CONSWAP],0
 29561 0000556C 7403                    	JZ	short NOSWAP2
 29562 0000556E E815DE                  	call	SWAPBACK
 29563                                  NOSWAP2:
 29564                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29565                                  	; turn this abort into a fail.
 29566                                  
 29567                                  	;test	[fAborting],0FFh
 29568                                  	;jnz	short DoFail
 29569                                  
 29570 00005571 803E[5903]00            	cmp	byte [fAborting],0
 29571 00005576 75AA                    	JNZ	short DoFail
 29572                                  
 29573                                  	; Set return code
 29574                                  
 29575 00005578 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29576 0000557D 30C0                    	XOR	AL,AL
 29577                                  
 29578                                  	; we are truly aborting the process. Go restore information from 
 29579                                  	; the PDB as necessary.
 29580                                  
 29581 0000557F E9990D                  	jmp	exit_inner
 29582                                  
 29583                                  ;** --------------------------------------------------------------------------
 29584                                  ;
 29585                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29586                                  ; different, then an old-style return is performed. If they are the same,
 29587                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29588                                  ; the source of the terminate addresses.
 29589                                  ;
 29590                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29591                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29592                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29593                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29594                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29595                                  ; operation. In essence, we dis-allow the abort response.
 29596                                  ;
 29597                                  ; output:   none.
 29598                                  ; ----------------------------------------------------------------------------
 29599                                  
 29600                                  	;entry	reset_environment
 29601                                  	
 29602                                  reset_environment:
 29603                                  	; 30/07/2018 - Retro DOS v3.0
 29604                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29605                                  
 29606                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29607                                  
 29608 00005582 1E                      	PUSH	DS			; save PDB of process
 29609                                  
 29610                                  	; There are no critical sections in force. Although we may enter 
 29611                                  	; here with critical sections locked down, they are no longer 
 29612                                  	; relevant. We may safely free all allocated resources.
 29613                                  
 29614 00005583 B482                    	MOV	AH,82h
 29615                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29616                                  	;int	2Ah 	
 29617 00005585 CD2A                    	INT	int_IBM
 29618                                  
 29619                                  					; SS override
 29620 00005587 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29621                                  
 29622                                  					; DOS 4.00 doesn't need it
 29623                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29624                                  					; Allow REDIR to clear some stuff
 29625                                  					; On process exit.
 29626 0000558D B82211                  	mov     ax, 1122h
 29627 00005590 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29628                                  			; SS = DOS CS
 29629                                  	;mov	al,22h	
 29630 00005592 B022                    	MOV	AL,int_terminate
 29631 00005594 E86FB9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29632                                  
 29633 00005597 59                      	POP	CX			; get ThisPDB
 29634 00005598 06                      	push	es
 29635 00005599 53                      	push	bx			; save return address
 29636                                  
 29637 0000559A 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29638 0000559F 8EDB                    	MOV	DS,BX
 29639 000055A1 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29640                                  
 29641                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29642                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29643                                  	; is not Exit_keep_process
 29644                                  	
 29645 000055A4 39D8                    	CMP	AX,BX
 29646 000055A6 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29647 000055A8 39CB                    	CMP	BX,CX
 29648 000055AA 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29649 000055AC 50                      	PUSH	AX			; save parent
 29650                                  
 29651                                  					; SS override
 29652                                  	;cmp	byte [SS:EXIT_TYPE],3
 29653 000055AD 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29654 000055B3 7406                    	JZ	short reset_to_parent 	; keeping this process
 29655                                  
 29656                                  	; We are truly removing a process. Free all allocation blocks 
 29657                                  	; belonging to this PDB
 29658                                  
 29659                                  	;invoke	arena_free_process
 29660 000055B5 E89B0D                  	call	arena_free_process
 29661                                  
 29662                                  	; Kill off remainder of this process. Close file handles and signal 
 29663                                  	; to relevant network folks that this process is dead. Remember that 
 29664                                  	; CurrentPDB is STILL the current process!
 29665                                  
 29666                                  	;invoke	DOS_ABORT
 29667 000055B8 E8B6D9                  	call	DOS_ABORT
 29668                                  
 29669                                  reset_to_parent:
 29670                                  					; SS override
 29671 000055BB 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29672                                  
 29673                                  reset_return:				; come here for normal return
 29674                                  	;Context DS			; DS is used to refer to DOSDATA  
 29675 000055C0 16                      	push	ss
 29676 000055C1 1F                      	pop	ds	
 29677                                  
 29678 000055C2 B0FF                    	MOV	AL,-1
 29679                                  
 29680                                  	; make sure that everything is clean In this case ignore any errors, 
 29681                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29682                                  
 29683                                  	;EnterCrit critDisk
 29684 000055C4 E8CCBD                  	call	ECritDisk
 29685                                  	;invoke	FLUSHBUF
 29686 000055C7 E8B605                  	call	FLUSHBUF
 29687                                  	;LeaveCrit critDisk
 29688 000055CA E8E1BD                  	call	LCritDisk
 29689                                  
 29690                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29691                                  
 29692 000055CD E879F7                  	call	CHECK_VIRT_OPEN
 29693 000055D0 FA                      	CLI
 29694 000055D1 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29695 000055D6 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29696 000055DB C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29697 000055E0 8F06[8005]              	POP	WORD [EXITHOLD]
 29698 000055E4 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29699                                  
 29700                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29701                                  
 29702 000055E8 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29703 000055EC 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29704 000055F0 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29705                                  
 29706 000055F4 E89DAE                  	call	restore_world
 29707                                  
 29708                                  	; 05/05/2019
 29709 000055F7 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29710                                  
 29711                                  	; MSDOS 6.0
 29712 000055F8 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29713 000055F9 8CD8                    	mov	ax,ds			; and not on stack.
 29714                                  	;getdseg <ds>			; ds -> dosdata
 29715 000055FB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29716 00005600 A3[0A0D]                	mov	[TEMPSEG],ax
 29717 00005603 58                      	pop	ax
 29718                                  					; set up ds to DOSDATA
 29719                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29720 00005604 A3[8405]                	mov	[USER_SP],ax
 29721                                  
 29722 00005607 58                      	POP	AX			; suck off CS:IP of interrupt...
 29723 00005608 58                      	POP	AX
 29724 00005609 58                      	POP	AX
 29725                                  
 29726                                  ; M011 : BEGIN
 29727                                  
 29728                                  	; MSDOS 3.3
 29729                                  ;	MOV	AX,0F202h	; STI
 29730                                  
 29731                                  	; MSDOS 6.0
 29732 0000560A 9F                      	LAHF
 29733 0000560B 86E0                    	XCHG	AH,AL
 29734 0000560D 2402                    	AND	AL,2
 29735 0000560F B4F2                    	MOV	AH,0F2h
 29736                                  
 29737                                  ; M011 : END
 29738                                  
 29739                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29740 00005611 50                      	PUSH	AX
 29741                                   
 29742                                  	;PUSH	word [CS:EXITHOLD+2]
 29743                                  	;PUSH	word [CS:EXITHOLD]
 29744                                  	
 29745                                  	; MSDOS 6.0
 29746 00005612 FF36[8205]              	PUSH	word [EXITHOLD+2]
 29747 00005616 FF36[8005]              	PUSH	word [EXITHOLD]
 29748                                  
 29749                                  	;MOV	AX,[CS:USER_SP]
 29750                                  
 29751                                  	; MSDOS 6.0
 29752 0000561A A1[8405]                	MOV	AX,[USER_SP]
 29753 0000561D 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29754                                  
 29755 00005621 CF                      	IRET			; Long return back to user terminate address
 29756                                  
 29757                                  ;---------------------------------------------------------------------------
 29758                                  ;
 29759                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29760                                  ;
 29761                                  ; This routine handles extended error codes.
 29762                                  ; Input : DI = error code from device
 29763                                  ; Output: All EXTERR fields are set
 29764                                  ;
 29765                                  ;--------------------------------------------------------------------------
 29766                                  
 29767                                  SET_I24_EXTENDED_ERROR:
 29768 00005622 50                      	PUSH	AX
 29769                                  					; ErrMap24End is in DOSDATA
 29770 00005623 B8[BA0E]                	MOV	AX,ErrMap24End
 29771 00005626 2D[AA0E]                	SUB	AX,ErrMap24
 29772                                  					; Change to dosdata to access 
 29773                                  					; ErrMap24 and EXTERR -SR
 29774                                  	; 05/05/2019 - Retro DOS v4.0
 29775                                  	
 29776                                  	; MSDOS 6.0
 29777 00005629 1E                      	push	ds
 29778                                  	;getdseg <ds>			; ds ->dosdata
 29779 0000562A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29780                                  
 29781                                  	; AX is the index of the first unavailable error. Do not translate 
 29782                                  	; if greater or equal to AX.
 29783                                  
 29784 0000562F 39C7                    	CMP	DI,AX
 29785 00005631 89F8                    	MOV	AX,DI
 29786 00005633 7306                    	JAE	short NoTrans
 29787                                  
 29788                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29789 00005635 8A85[AA0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29790 00005639 30E4                    	XOR	AH,AH
 29791                                  NoTrans:
 29792                                  	;MOV	[CS:EXTERR],AX
 29793 0000563B A3[2403]                	mov	[EXTERR],AX
 29794 0000563E 1F                      	pop	ds
 29795                                  	;assume	ds:nothing
 29796 0000563F 58                      	POP	AX
 29797                                  
 29798                                  	; Now Extended error is set correctly. Translate it to get correct 
 29799                                  	; error locus class and recommended action.
 29800                                  
 29801 00005640 56                      	PUSH	SI
 29802                                  					; ERR_TABLE_24 is in DOSCODE 
 29803 00005641 BE[5A0E]                	MOV	SI,ERR_TABLE_24
 29804 00005644 E880B0                  	call	CAL_LK			; Set other extended error fields
 29805 00005647 5E                      	POP	SI
 29806 00005648 C3                      	retn
 29807                                  
 29808                                  ;============================================================================
 29809                                  ; FAT.ASM, MSDOS 6.0, 1991
 29810                                  ;============================================================================
 29811                                  ; 30/07/2018 - Retro DOS v3.0
 29812                                  ; 20/05/2019 - Retro DOS v4.0
 29813                                  
 29814                                  ;	TITLE	FAT - FAT maintenance routines
 29815                                  ;	NAME	FAT
 29816                                  
 29817                                  ;**	FAT.ASM
 29818                                  ;----------------------------------------------------------------------------
 29819                                  ;	Low level local device routines for performing disk change sequence,
 29820                                  ;	setting cluster validity, and manipulating the FAT
 29821                                  ;
 29822                                  ;	IsEof
 29823                                  ;	UNPACK
 29824                                  ;	PACK
 29825                                  ;	MAPCLUSTER
 29826                                  ;	FATREAD_SFT
 29827                                  ;	FATREAD_CDS
 29828                                  ;	FAT_operation
 29829                                  ;
 29830                                  ;	Revision history:
 29831                                  ;
 29832                                  ;	  AN000  version Jan. 1988
 29833                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 29834                                  ;
 29835                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 29836                                  ;	       from CL0FATENTRY rather than disk.
 29837                                  
 29838                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 29839                                  
 29840                                  ;Break <IsEOF - check the quantity in BX for EOF>
 29841                                  ;----------------------------------------------------------------------------
 29842                                  ;
 29843                                  ; Procedure Name : IsEOF
 29844                                  ;
 29845                                  ; IsEOF - check the fat value in BX for eof.
 29846                                  ;
 29847                                  ;   Inputs:	ES:BP point to DPB
 29848                                  ;		BX has fat value
 29849                                  ;   Outputs:	JAE eof
 29850                                  ;   Registers modified: none
 29851                                  ;
 29852                                  ;---------------------------------------------------------------------------
 29853                                  
 29854                                  IsEOF:
 29855                                  	;cmp	word [es:bp+0Dh],0FF6h
 29856 00005649 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 29857 0000564F 730B                    	JAE	short EOF16			; yes, check for eof there
 29858                                  
 29859                                  ;J.K. 8/27/86
 29860                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 29861                                  ;of any media that has "F0"(Other) as a MediaByte.
 29862                                  ;Hopely, this does not create any side effect for those who may use any value
 29863                                  ;other than "FF8-FFF" as an EOF for their own file.
 29864                                  
 29865 00005651 81FBF00F                	cmp	bx,0FF0h
 29866 00005655 7404                    	je	short IsEOF_other
 29867                                  
 29868 00005657 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 29869                                  IsEOF_other:
 29870 0000565B C3                      	retn
 29871                                  EOF16:
 29872 0000565C 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 29873 0000565F C3                      	retn
 29874                                  
 29875                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 29876                                  
 29877                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 29878                                  ;---------------------------------------------------------------------------
 29879                                  ;
 29880                                  ; Procedur Name : UNPACK
 29881                                  ;
 29882                                  ; Inputs:
 29883                                  ;	BX = Cluster number (may be full 16-bit quantity)
 29884                                  ;	ES:BP = Base of drive parameters
 29885                                  ; Outputs:
 29886                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 29887                                  ;	Zero set means DI=0 (free cluster)
 29888                                  ;	Carry set means error (currently user FAILed to I 24)
 29889                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 29890                                  ;
 29891                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 29892                                  ;
 29893                                  ;----------------------------------------------------------------------------
 29894                                  	
 29895                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29896                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 29897                                  
 29898                                  	; 20/05/2019 - Retro DOS v4.0
 29899                                  UNPACK:
 29900                                  	; MSDOS 6.0			; M014 - Start
 29901 00005660 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 29902 00005662 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 29903 00005664 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 29904 00005668 09FF                    	or	di,di 			; return z if di=0
 29905 0000566A C3                      	retn				; done
 29906                                  up_cont:				; M014 - End
 29907                                  	; MSDOS 3.3 & MSDOS 6.0
 29908                                  	;cmp	bx,[es:bp+0Dh]
 29909 0000566B 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 29910 0000566F 7726                    	JA	short HURTFAT
 29911 00005671 E8DC00                  	CALL	MAPCLUSTER
 29912 00005674 721E                    	jc	short _DoContext
 29913 00005676 8B3D                    	MOV	DI,[DI]
 29914 00005678 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 29915 0000567A 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 29916 0000567E 81FEF60F                	CMP	SI,4096-10
 29917 00005682 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 29918 00005684 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 29919 00005686 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 29920                                  High12:
 29921 00005688 D1EF                    	SHR	DI,1
 29922 0000568A D1EF                    	SHR	DI,1
 29923 0000568C D1EF                    	SHR	DI,1
 29924 0000568E D1EF                    	SHR	DI,1
 29925                                  Unpack12:
 29926 00005690 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 29927                                  _DoContext:
 29928 00005694 16                      	PUSH	SS
 29929 00005695 1F                      	POP	DS
 29930 00005696 C3                      	retn
 29931                                  HURTFAT:
 29932                                  	;;mov	word [es:bp+1Eh],0FFFFh
 29933                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 29934 00005697 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 29935 0000569D 50                      	PUSH	AX
 29936 0000569E B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 29937                                  
 29938                                  ;hkn; SS override
 29939 000056A0 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 29940                                  ;
 29941                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 29942                                  ;
 29943 000056A6 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 29944 000056A9 E8C8FD                  	call	FATAL
 29945 000056AC 3C03                    	CMP	AL,3
 29946 000056AE F8                      	CLC
 29947 000056AF 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 29948 000056B1 F9                      	STC				; User said FAIL
 29949                                  OKU_RET:
 29950 000056B2 58                      	POP	AX
 29951                                  hurtfat_retn:
 29952 000056B3 C3                      	retn
 29953                                  
 29954                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 29955                                  
 29956                                  ;Break	<PACK -- PACK FAT ENTRIES>
 29957                                  ;----------------------------------------------------------------------------
 29958                                  ;
 29959                                  ; Procedure Name : PACK
 29960                                  ;
 29961                                  ; Inputs:
 29962                                  ;	BX = Cluster number
 29963                                  ;	DX = Data
 29964                                  ;	ES:BP = Pointer to drive DPB
 29965                                  ; Outputs:
 29966                                  ;	The data is stored in the FAT at the given cluster.
 29967                                  ;	SI,DX,DI all destroyed
 29968                                  ;	Carry set means error (currently user FAILed to I 24)
 29969                                  ;	No other registers affected
 29970                                  ;
 29971                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 29972                                  ;
 29973                                  ;---------------------------------------------------------------------------
 29974                                  
 29975                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29976                                  	; 20/05/2019 - Retro DOS v4.0
 29977                                  PACK:
 29978                                  	; MSDOS 6.0			; M014 - start
 29979 000056B4 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 29980 000056B6 7505                    	jnz	short p_cont		; N: proceed with normal pack
 29981 000056B8 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 29982 000056BC C3                      	retn				; done
 29983                                  p_cont:					; M014 - end
 29984                                  	; MSDOS 3.3 & MSDOS 6.0
 29985 000056BD E89000                  	CALL	MAPCLUSTER
 29986 000056C0 72D2                    	JC	short _DoContext
 29987 000056C2 8B35                    	MOV	SI,[DI]
 29988 000056C4 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 29989 000056C6 51                      	PUSH	CX			; move data to upper 12 bits
 29990 000056C7 B104                    	MOV	CL,4
 29991 000056C9 D3E2                    	SHL	DX,CL
 29992 000056CB 59                      	POP	CX
 29993 000056CC 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 29994 000056CF EB14                    	JMP	SHORT PACKIN
 29995                                  ALIGNED:
 29996                                  	;cmp	word [es:bp+0Dh],0FF6h
 29997 000056D1 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 29998 000056D7 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 29999 000056D9 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30000 000056DD 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30001 000056E1 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30002                                  Pack16:
 30003 000056E3 31F6                    	XOR	SI,SI			; MZ no original data
 30004                                  PACKIN:
 30005 000056E5 09D6                    	OR	SI,DX
 30006 000056E7 8935                    	MOV	[DI],SI
 30007                                  
 30008                                  ;hkn; SS override
 30009 000056E9 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30010                                  	; MSDOS 6.0
 30011 000056EE F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30012                                  					;LB. if already dirty		  ;AN000;
 30013 000056F2 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30014                                  	; 10/06/2019
 30015 000056F4 E89105                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30016                                  	
 30017                                  	;or	byte [si+5],40h
 30018 000056F7 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30019                                  yesdirty11:				;LB.				;AN000;
 30020                                  ;hkn; SS override
 30021 000056FB 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30022                                  ;hkn; SS is DOSDATA
 30023 00005701 16                      	push	ss
 30024 00005702 1F                      	pop	ds
 30025 00005703 74AE                    	jz	short hurtfat_retn	; Carry clear
 30026 00005705 50                      	PUSH	AX
 30027 00005706 53                      	PUSH	BX
 30028 00005707 51                      	PUSH	CX
 30029 00005708 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30030 0000570B 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30031                                  	;;add	si,16 ; MSDOS 3.3
 30032                                  	;add	si,20 ; MSDOS 6.0
 30033 0000570F 83C614                  	ADD	SI,BUFINSIZ
 30034 00005712 8824                    	MOV	[SI],AH
 30035                                  ;hkn; SS is DOSDATA
 30036                                  	;Context DS
 30037 00005714 16                      	push	ss
 30038 00005715 1F                      	pop	ds
 30039                                  	
 30040 00005716 50                      	PUSH	AX
 30041                                  	
 30042                                  	; MSDOS 6.0
 30043 00005717 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30044 0000571B 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30045                                  
 30046                                  	; MSDOS 3.3 & MSDOS 6.0
 30047 0000571F 8B16[9005]              	MOV	DX,[CLUSSEC]
 30048 00005723 BE0100                  	MOV	SI,1
 30049 00005726 30C0                    	XOR	AL,AL
 30050 00005728 E85903                  	call	GETBUFFRB
 30051 0000572B 58                      	POP	AX
 30052 0000572C 721C                    	JC	short POPP_RET
 30053 0000572E C53E[E205]              	LDS	DI,[CURBUF]
 30054                                  	
 30055                                  	; MSDOS 6.0
 30056 00005732 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30057                                  					;LB. if already dirty		  ;AN000;
 30058 00005736 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30059 00005738 E84D05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30060                                  	
 30061                                  	;or	byte [di+5],40h
 30062 0000573B 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30063                                  yesdirty12:
 30064                                  	;;add	di,16
 30065                                  	;add	di,20 ; MSDOS 6.0
 30066 0000573F 83C714                  	ADD	DI,BUFINSIZ
 30067 00005742 4F                      	DEC	DI
 30068                                  	;add	di,[es:bp+2]
 30069 00005743 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30070 00005747 8805                    	MOV	[DI],AL
 30071 00005749 F8                      	CLC
 30072                                  POPP_RET:
 30073 0000574A 16                      	PUSH	SS
 30074 0000574B 1F                      	POP	DS
 30075 0000574C 59                      	POP	CX
 30076 0000574D 5B                      	POP	BX
 30077 0000574E 58                      	POP	AX
 30078 0000574F C3                      	retn
 30079                                  
 30080                                  ; 31/07/2018 - Retro DOS v3.0
 30081                                  
 30082                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30083                                  ;---------------------------------------------------------------------------
 30084                                  ;
 30085                                  ; Procedure Name : MAPCLUSTER
 30086                                  ;
 30087                                  ; Inputs:
 30088                                  ;	ES:BP Points to DPB
 30089                                  ;	BX Is cluster number
 30090                                  ; Function:
 30091                                  ;	Get a pointer to the cluster
 30092                                  ; Outputs:
 30093                                  ;	DS:DI Points to contents of FAT for given cluster
 30094                                  ;	DS:SI Points to start of buffer
 30095                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30096                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30097                                  ;	Carry set if failed.
 30098                                  ; SI is destroyed.
 30099                                  ;
 30100                                  ;---------------------------------------------------------------------------
 30101                                  
 30102                                  	; 20/05/2019 - Retro DOS v4.0
 30103                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30104                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30105                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30106                                  
 30107                                  MAPCLUSTER:
 30108                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30109 00005750 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30110                                  	;SAVE	<AX,BX,CX,DX>
 30111 00005755 50                      	push	ax
 30112 00005756 53                      	push	bx
 30113 00005757 51                      	push	cx
 30114 00005758 52                      	push	dx
 30115 00005759 89D8                    	MOV	AX,BX			; AX = BX
 30116 0000575B 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30117 00005761 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30118 00005763 D1E8                    	SHR	AX,1			; AX = BX/2
 30119                                  Map16:	
 30120                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30121 00005765 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30122                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30123 00005767 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30124 00005769 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30125 0000576B 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30126                                  
 30127                                  ;IF FastDiv
 30128                                  ;
 30129                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30130                                  ; case and apply a really fast algorithm to get the desired results
 30131                                  ;
 30132                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30133                                  ; Fast method takes 39+20*4=119
 30134                                  ;
 30135                                  ; This saves a bunch.
 30136                                  
 30137 0000576F 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30138 00005773 7510                    	jne	short _DoDiv		; 4  for no jump
 30139 00005775 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30140 00005777 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30141 0000577B 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30142                                  	; MDOS 3.3
 30143                                  	;shr	al,1	
 30144                                  	; MDOS 6.0
 30145 0000577D D1EF                    	shr	di,1			; 2
 30146 0000577F D0D8                    	rcr	al,1			; 2
 30147                                  	; MDOS 3.3 (& MSDOS 6.0)
 30148 00005781 30E4                    	xor	ah,ah			; 3
 30149 00005783 EB04                    	jmp	short DivDone		; 16
 30150                                  _DoDiv:
 30151                                  ;ENDIF
 30152                                  	; MSDOS 3.3
 30153                                  	;xor	dx,dx
 30154                                  	; MSDOS 6.0
 30155 00005785 89FA                    	mov	dx,di			; 2
 30156                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30157 00005787 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30158                                  ;IF FastDiv
 30159                                  DivDone:
 30160                                  ;ENDIF
 30161                                  	;add	ax,[es:bp+6]
 30162 00005789 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30163 0000578D 49                      	DEC	CX			; CX is sector size - 1
 30164                                  	;SAVE	<AX,DX,CX>
 30165 0000578E 50                      	push	ax
 30166 0000578F 52                      	push	dx
 30167 00005790 51                      	push	cx
 30168 00005791 89C2                    	MOV	DX,AX
 30169                                  
 30170                                  	; MSDOS 6.0
 30171 00005793 C706[0706]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 30172                                  	; MDOS 3.3 (& MSDOS 6.0)
 30173 00005799 30C0                    	XOR	AL,AL
 30174 0000579B BE0100                  	MOV	SI,1
 30175                                  	;invoke	GETBUFFRB
 30176 0000579E E8E302                  	call	GETBUFFRB
 30177                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30178 000057A1 59                      	pop	cx
 30179 000057A2 58                      	pop	ax
 30180 000057A3 5A                      	pop	dx
 30181 000057A4 7257                    	JC	short MAP_POP
 30182                                  
 30183 000057A6 C536[E205]              	LDS	SI,[CURBUF]
 30184                                  	;;lea	di,[si+16]
 30185                                  	;lea	di,[si+20] ; MSDOS 6.0
 30186 000057AA 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30187 000057AD 01C7                    	ADD	DI,AX
 30188 000057AF 39C8                    	CMP	AX,CX
 30189 000057B1 7537                    	JNZ	short MAPRET
 30190 000057B3 8A05                    	MOV	AL,[DI]
 30191                                  	;Context DS		 	;hkn; SS is DOSDATA
 30192 000057B5 16                      	push	ss
 30193 000057B6 1F                      	pop	ds	
 30194 000057B7 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30195 000057BB A2[8E05]                	MOV	[CLUSSAVE],AL
 30196 000057BE 8916[9005]              	MOV	[CLUSSEC],DX
 30197                                  	; MSDOS 6.0
 30198 000057C2 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 30199 000057C8 42                      	INC	DX
 30200 000057C9 C706[0706]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 30201                                  	; MDOS 3.3 (& MSDOS 6.0)
 30202 000057CF 30C0                    	XOR	AL,AL
 30203 000057D1 BE0100                  	MOV	SI,1
 30204                                  	;invoke	GETBUFFRB
 30205 000057D4 E8AD02                  	call	GETBUFFRB
 30206 000057D7 7224                    	JC	short MAP_POP
 30207 000057D9 C536[E205]              	LDS	SI,[CURBUF]
 30208 000057DD 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30209 000057E0 8A05                    	MOV	AL,[DI]
 30210                                  	;Context DS			;hkn; SS is DOSDATA
 30211 000057E2 16                      	push	ss
 30212 000057E3 1F                      	pop	ds
 30213 000057E4 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30214                                  
 30215                                  ;hkn; CLUSSAVE is in DOSDATA
 30216 000057E7 BF[8E05]                	MOV	DI,CLUSSAVE
 30217                                  MAPRET:
 30218                                  	;RESTORE <DX,CX,BX>
 30219 000057EA 5A                      	pop	dx
 30220 000057EB 59                      	pop	cx
 30221 000057EC 5B                      	pop	bx
 30222 000057ED 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30223 000057EF 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30224 000057F5 7302                    	JAE	short MapSet		; MZ no, set flags
 30225 000057F7 89D8                    	MOV	AX,BX
 30226                                  MapSet:
 30227 000057F9 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30228                                  	;RESTORE <AX>
 30229 000057FB 58                      	pop	ax
 30230 000057FC C3                      	retn
 30231                                  
 30232                                  MAP_POP:
 30233                                  	;RESTORE <DX,CX,BX,AX>
 30234 000057FD 5A                      	pop	dx
 30235 000057FE 59                      	pop	cx
 30236 000057FF 5B                      	pop	bx
 30237 00005800 58                      	pop	ax
 30238                                  fatread_sft_retn: ; 17/12/2022
 30239 00005801 C3                      	retn
 30240                                  
 30241                                  ; 20/05/2019 - Retro DOS v4.0
 30242                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30243                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30244                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30245                                  
 30246                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30247                                  ;----------------------------------------------------------------------------
 30248                                  ;
 30249                                  ; Procedure Name : FATREAD_SFT
 30250                                  ;
 30251                                  ; Inputs:
 30252                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30253                                  ;		giving a NET SFT will produce system crashing results).
 30254                                  ;	DS DOSDATA
 30255                                  ; Function:
 30256                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30257                                  ;	if disk changed.
 30258                                  ;	In other respects, same as FATREAD_CDS.
 30259                                  ;	(note ES:DI destroyed!)
 30260                                  ; Outputs:
 30261                                  ;	Carry set if error (currently user FAILed to I 24)
 30262                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30263                                  ;	as far as invalidating curdir_ID is concerned.
 30264                                  ;	Since getting a true disk changed on this call is a screw up
 30265                                  ;	anyway, that's the way it goes.
 30266                                  ;
 30267                                  ;---------------------------------------------------------------------------
 30268                                  
 30269                                  FATREAD_SFT:
 30270 00005802 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30271                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30272                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30273                                  	; 15/12/2022
 30274 00005806 268A4600                	mov	AL,[ES:BP]
 30275 0000580A A2[7605]                	MOV	[THISDRV],AL
 30276 0000580D E86BAE                  	call	GOTDPB			;Set THISDPB
 30277                                  	;CALL	FAT_GOT_DPB
 30278                                  	; 17/12/2022
 30279 00005810 EB78                    	jmp	FAT_GOT_DPB
 30280                                  ;fatread_sft_retn:
 30281                                  	;retn
 30282                                  
 30283                                  ;----------------------------------------------------------------------------
 30284                                  ;
 30285                                  ; Procedure Name : FATREAD_CDS
 30286                                  ;
 30287                                  ; Inputs:
 30288                                  ;	DS:DOSDATA
 30289                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30290                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30291                                  ; Function:
 30292                                  ;	If disk may have been changed, media is determined and buffers are
 30293                                  ;	flagged invalid. If not, no action is taken.
 30294                                  ; Outputs:
 30295                                  ;	ES:BP = Drive parameter block
 30296                                  ;	THISDPB = ES:BP
 30297                                  ;	THISDRV set
 30298                                  ;	Carry set if error (currently user FAILed to I 24)
 30299                                  ; DS preserved , all other registers destroyed
 30300                                  ;
 30301                                  ;---------------------------------------------------------------------------
 30302                                  
 30303                                  	; 20/05/2019 - Retro DOS v4.0
 30304                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30305                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30306                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30307                                  
 30308                                  FATREAD_CDS:
 30309 00005812 06                      	PUSH	ES
 30310 00005813 57                      	PUSH	DI
 30311                                  	;les	bp,[es:di+45h]
 30312 00005814 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30313                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30314                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30315                                  	; 15/12/2022
 30316 00005818 268A4600                	mov	AL,[ES:BP]
 30317 0000581C A2[7605]                	MOV	[THISDRV],AL
 30318 0000581F E859AE                  	call	GOTDPB			;Set THISDPB
 30319 00005822 E86500                  	CALL	FAT_GOT_DPB
 30320 00005825 5F                      	POP	DI			;Get back CDS pointer
 30321 00005826 07                      	POP	ES
 30322 00005827 72D8                    	jc	short fatread_sft_retn
 30323 00005829 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30324                                  
 30325                                  ;	Media changed. We now need to find all CDS structures which use this
 30326                                  ;	DPB and invalidate their ID pointers.
 30327                                  
 30328                                  MED_CHANGE:
 30329 0000582B 31C0                    	XOR	AX,AX
 30330 0000582D 48                      	DEC	AX			; AX = -1
 30331 0000582E 1E                      	PUSH	DS
 30332 0000582F 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30333 00005833 30ED                    	XOR	CH,CH			; CX is number of structures
 30334                                  	;lds	si,[es:di+45h]
 30335 00005835 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30336                                  
 30337                                  ;hkn; SS override
 30338                                  
 30339                                  ;	Find all CDSs with this DevPtr
 30340                                  ;
 30341                                  ;	(ax) = -1
 30342                                  ;	(ds:si) = DevPtr
 30343                                  
 30344 00005839 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30345                                  frcd20: 
 30346                                  	;;test	word [es:di+43h],8000h
 30347                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30348 0000583E 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30349 00005843 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30350                                  
 30351                                  	; MSDOS 3.3
 30352                                  	;push	es
 30353                                  	;push	di
 30354                                  	;les	di,[es:di+45h]
 30355                                  	;;les	di,[ES:DI+curdir.devptr]
 30356                                  	;call	POINTCOMP
 30357                                  	;pop	di
 30358                                  	;pop	es
 30359                                  	;jnz	short frcd25
 30360                                  
 30361                                  	; MSDOS 6.0
 30362 00005845 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30363 00005849 7512                    	jne	short frcd25		; no match
 30364 0000584B 8CDB                    	mov	bx,ds
 30365 0000584D 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30366 00005851 750A                    	jne	short frcd25		; CDS not for this drive
 30367                                  
 30368                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30369                                  	;test	[es:di+49h],ax
 30370 00005853 26854549                	test	[ES:DI+curdir.ID],AX
 30371 00005857 7404                    	JZ	short frcd25		; If root (0), leave root
 30372                                  	;mov	[es:di+49h],ax
 30373 00005859 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30374                                  frcd25:	
 30375                                  	;;add	di,81  ; MSDOS 3.3
 30376                                  	;add	di,88  ; MSDOS 6.0	 
 30377 0000585D 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30378 00005860 E2DC                    	LOOP	frcd20
 30379 00005862 1F                      	POP	DS
 30380                                  NO_CHANGE:
 30381 00005863 C42E[8A05]              	LES	BP,[THISDPB]
 30382 00005867 F8                      	CLC
 30383 00005868 C3                      	retn
 30384                                  
 30385                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30386                                  ;----------------------------------------------------------------------------
 30387                                  ;
 30388                                  ; Procedure Name : FAT_operation
 30389                                  ;
 30390                                  ;----------------------------------------------------------------------------
 30391                                  
 30392                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30393                                  
 30394                                  FAT_operation:
 30395                                  	; 31/07/2018 - Retro DOS v3.0
 30396                                  FATERR:
 30397                                  	;mov	word [es:bp+1Eh],-1
 30398                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30399 00005869 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30400                                  					; Err in FAT must force recomp of freespace
 30401                                  	;and	di,0FFh
 30402 0000586F 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30403                                  	;mov	byte [ALLOWED],18h
 30404 00005873 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30405                                  	;mov	ah,1Ah
 30406 00005878 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30407 0000587A A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30408 0000587D E8F8FB                  	call	FATAL1
 30409 00005880 C42E[8A05]              	LES	BP,[THISDPB]
 30410 00005884 3C03                    	CMP	AL,3
 30411 00005886 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30412 00005888 F9                      	STC				; User said FAIL
 30413 00005889 C3                      	retn
 30414                                  
 30415                                  FAT_GOT_DPB:
 30416                                  	;Context DS			;hkn; SS is DOSDATA
 30417 0000588A 16                      	push	ss			
 30418 0000588B 1F                      	pop	ds
 30419                                  	;mov	al,0Fh
 30420 0000588C B00F                    	MOV	AL,DMEDHL
 30421                                  	;mov	ah,[es:bp+1]
 30422 0000588E 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30423 00005892 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30424 00005895 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30425 0000589A C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30426                                  	;;mov	al,[es:bp+16h]
 30427                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30428 000058A0 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30429 000058A4 A2[6703]                	MOV	[CALLMED],AL
 30430 000058A7 06                      	PUSH	ES
 30431 000058A8 1E                      	PUSH	DS
 30432                                  
 30433                                  ;hkn; DEVCALL is in DOSDATA
 30434 000058A9 BB[5A03]                	MOV	BX,DEVCALL
 30435                                  	;;lds	si,[es:bp+12h]
 30436                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30437 000058AC 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30438 000058B0 07                      	POP	ES			; ES:BX Points to call header
 30439 000058B1 E8B4EE                  	call	DEVIOCALL2
 30440                                  	;Context DS		 	;hkn; SS is DOSDATA
 30441 000058B4 16                      	push	ss
 30442 000058B5 1F                      	pop	ds
 30443 000058B6 07                      	POP	ES			; Restore ES:BP
 30444 000058B7 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30445                                  	;test	di,8000h
 30446                                  	;jnz	short FATERR
 30447 000058BB 09FF                    	or	di,di
 30448 000058BD 78AA                    	js	short FATERR		; have error
 30449 000058BF 30E4                    	XOR	AH,AH
 30450                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30451                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30452 000058C1 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30453 000058C5 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30454                                  ; See if we had changed volume id by creating one on the diskette
 30455 000058C8 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30456 000058CC 7508                    	jnz	short CHECK_BYT
 30457 000058CE C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30458 000058D3 E9A700                  	jmp	GOGETBPB		; Need to get device driver to read in
 30459                                  					; new volume label.
 30460                                  CHECK_BYT:
 30461 000058D6 0A26[6803]              	OR	AH,[CALLRBYT]
 30462                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30463                                  	;JMP	short NEWDSK
 30464                                  	; 17/12/2022
 30465 000058DA 7865                    	js	short NEWDSK
 30466                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30467                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30468                                  	;JMP	short NEWDSK
 30469                                  
 30470                                  CHECK_ZR:
 30471 000058DC 743C                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30472 000058DE F8                      	CLC
 30473 000058DF C3                      	retn				; If Media not changed (NZ)
 30474                                  
 30475                                  DISK_CHNG_ERR:
 30476 000058E0 06                      	PUSH	ES
 30477 000058E1 55                      	PUSH	BP
 30478                                  	;;les	bp,[es:bp+12h]
 30479                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30480 000058E2 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30481                                  	;;test	word [es:bp+4],800h
 30482                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30483 000058E6 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30484 000058EB 5D                      	POP	BP
 30485 000058EC 07                      	POP	ES
 30486 000058ED 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30487 000058EF 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30488 000058F0 57                      	PUSH	DI
 30489 000058F1 16                      	push	ss			;hkn; SS is DOSDATA
 30490 000058F2 1F                      	pop	ds
 30491                                  	;mov	byte [ALLOWED],18h
 30492 000058F3 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30493 000058F8 06                      	PUSH	ES
 30494 000058F9 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30495 000058FD 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30496 00005901 07                      	POP	ES
 30497 00005902 893E[2803]              	MOV	[EXTERRPT],DI
 30498                                  	;mov	ax,0Fh
 30499 00005906 B80F00                  	MOV	AX,error_I24_wrong_disk
 30500 00005909 C606[7505]01            	MOV	byte [READOP],1		; Write
 30501                                  	;invoke	HARDERR
 30502 0000590E E815FB                  	call	HARDERR
 30503 00005911 5F                      	POP	DI			; Get back buffer for ignore
 30504 00005912 1F                      	POP	DS
 30505 00005913 3C03                    	CMP	AL,3
 30506                                  FAIL_OPJ2:
 30507 00005915 741D                    	JZ	short FAIL_OP
 30508 00005917 E970FF                  	JMP	FAT_GOT_DPB		; Retry
 30509                                  
 30510                                  CHKBUFFDIRT:
 30511                                  	; 20/05/2019 - Retro DOS v4.0
 30512                                  
 30513                                  	; MSDOS 3.3
 30514                                  	;lds	di,[BUFFHEAD]
 30515                                  
 30516                                  	; MSDOS 6.0
 30517 0000591A 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30518 00005920 741F                    	je	short NEWDSK			; no, skip the check
 30519 00005922 E8F800                  	call	GETCURHEAD			; get pointer to first buffer
 30520                                  nbuffer:
 30521                                  	;cmp	al,[di+4]
 30522 00005925 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30523 00005928 750E                    	jne	short lfnxt			; no, go for next buffer
 30524                                  	;test   byte [di+5],40h
 30525 0000592A F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30526 0000592E 7408                    	jz	short lfnxt			; no, go for next buffer
 30527                                  	;Context DS
 30528 00005930 16                      	push	ss
 30529 00005931 1F                      	pop	ds
 30530 00005932 F8                      	clc
 30531 00005933 C3                      	retn
 30532                                  
 30533                                  FAIL_OP:					; This label & code is here
 30534                                  	;Context DS				;  for reachability
 30535 00005934 16                      	push	ss
 30536 00005935 1F                      	pop	ds
 30537 00005936 F9                      	STC
 30538 00005937 C3                      	retn
 30539                                  
 30540                                  lfnxt:
 30541                                  	; 15/08/2018 - Retro DOS v3.0
 30542                                  	; MSDOS 3.3
 30543                                  	;lds	di,[di]
 30544                                  
 30545                                  	; 20/05/2019 - Retro DOS v4.0
 30546 00005938 8B3D                    	mov	di,[di]
 30547                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30548                                  	
 30549                                  	; MSDOS 3.3
 30550                                  	;cmp	di,-1
 30551                                  	;jne	short nbuffer
 30552                                  	
 30553                                  	; MSDOS 6.0
 30554 0000593A 36393E[BA0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30555 0000593F 75E4                    	jne	short nbuffer			; no, check this guy also
 30556                                  
 30557                                  ; If no dirty buffers, assume Media changed
 30558                                  NEWDSK:
 30559                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30560                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30561 00005941 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30562                                  						;  recompute
 30563                                  	; MSDOS 3.3
 30564                                  	;call	SETVISIT
 30565                                  	; MSDOS 6.0
 30566 00005947 E8D300                  	call	 GETCURHEAD
 30567                                  nxbuffer:
 30568                                  	; MSDOS 3.3
 30569                                  	;or 	byte [di+5],20h
 30570                                  	; MSDOS 3.3 & MSDOS 6.0
 30571                                  	;cmp	[di+4],al
 30572 0000594A 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30573 0000594D 7510                    	jne	short lfnxt2
 30574                                  	;test	byte [di+5],40h
 30575 0000594F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30576 00005953 758B                    	jnz	short DISK_CHNG_ERR
 30577                                  	;mov	word [di+4],20FFh
 30578 00005955 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30579 0000595A E8D200                  	call	SCANPLACE
 30580                                  	; MSDOS 6.0
 30581 0000595D EB02                    	jmp	short skpbuff
 30582                                  lfnxt2:
 30583 0000595F 8B3D                    	mov	di,[di]
 30584                                  	;mov	di,[di+BUFFINFO.buf_next]
 30585                                  skpbuff:
 30586                                  	; MSDOS 6.0
 30587 00005961 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30588 00005966 75E2                    	jne	short nxbuffer
 30589                                  
 30590 00005968 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30591 0000596E 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30592 00005970 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30593 00005975 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30594 00005977 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30595                                  ;lfnxt2:
 30596                                  	; MSDOS 3.3
 30597                                  	;call	SKIPVISIT
 30598                                  	;jnz	short nxbuffer
 30599                                  GOGETBPB:
 30600                                  	; MSDOS 3.3 & MSDOS 6.0
 30601                                  	;;lds	di,[es:bp+12h]
 30602                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30603 0000597D 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30604                                  	; 20/05/2019
 30605                                  	;test	word [di+4],2000h
 30606                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30607 00005981 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30608 00005985 7510                    	JNZ	short GETFREEBUF
 30609                                  	;context DS	    		;hkn; SS is DOSDATA
 30610 00005987 16                      	push	ss
 30611 00005988 1F                      	pop	ds
 30612 00005989 BB0200                  	MOV	BX,2
 30613 0000598C E8D1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30614                                  FAIL_OPJ:
 30615 0000598F 72A3                    	JC	short FAIL_OP
 30616 00005991 C53E[E205]              	LDS	DI,[CURBUF]
 30617 00005995 EB13                    	JMP	SHORT GOTGETBUF
 30618                                  
 30619                                  GETFREEBUF:
 30620 00005997 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30621 00005998 55                      	PUSH	BP
 30622                                  	; MSDOS 3.3
 30623                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30624                                  	; MSDOS 6.0
 30625 00005999 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30626                                  ;hkn; SS override
 30627 0000599B 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30628 000059A0 E87A00                  	call	GETCURHEAD		;LB.			  ;AN000;
 30629                                  	; MSDOS 3.3 & MSDOS 6.0
 30630 000059A3 E84202                  	call	BUFWRITE
 30631 000059A6 5D                      	POP	BP
 30632 000059A7 07                      	POP	ES
 30633                                  	;JC	short FAIL_OPJ
 30634 000059A8 728A                    	jc	short FAIL_OP
 30635                                  GOTGETBUF:
 30636                                  	;;add	di,16
 30637                                  	;add	di,20 ; MSDOS 6.0
 30638 000059AA 83C714                  	ADD	DI,BUFINSIZ
 30639                                  
 30640                                  ;hkn; SS override
 30641 000059AD 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30642                                  	;Context DS			;hkn; SS is DOSDATA
 30643 000059B2 16                      	push	ss
 30644 000059B3 1F                      	pop	ds
 30645 000059B4 893E[6803]              	MOV	[CALLXAD],DI
 30646                                  	;mov	al,16h
 30647 000059B8 B016                    	MOV	AL,DBPBHL
 30648                                  	;mov	ah,[es:bp+1]
 30649 000059BA 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30650 000059BE A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30651 000059C1 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30652 000059C6 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30653                                  	;;mov	al,[es:bp+16h]
 30654                                  	;mov	al,[es:bp+17h]
 30655 000059CC 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30656 000059D0 A2[6703]                	MOV	[CALLMED],AL
 30657 000059D3 06                      	PUSH	ES
 30658 000059D4 1E                      	PUSH	DS
 30659                                  	;;push	word [es:bp+14h]
 30660                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30661 000059D5 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30662                                  	;;push	word [es:bp+12h]
 30663                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30664 000059D9 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30665                                  
 30666                                  ;hkn; DEVCALL is in DOSDATA
 30667 000059DD BB[5A03]                	MOV	BX,DEVCALL
 30668 000059E0 5E                      	POP	SI
 30669 000059E1 1F                      	POP	DS			; DS:SI Points to device header
 30670 000059E2 07                      	POP	ES			; ES:BX Points to call header
 30671                                  	;invoke	DEVIOCALL2
 30672 000059E3 E882ED                  	call	DEVIOCALL2
 30673 000059E6 07                      	POP	ES			; Restore ES:BP
 30674                                  	;Context DS
 30675 000059E7 16                      	push	ss		 	;hkn; SS is DOSDATA
 30676 000059E8 1F                      	pop	ds
 30677 000059E9 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30678                                  	; MSDOS 3.3
 30679                                  	;test	di,8000h
 30680                                  	;jnz	short FATERRJ
 30681                                  	; MSDOS 6.0
 30682 000059ED 09FF                    	or	di,di
 30683 000059EF 7829                    	js	short FATERRJ 		; have error
 30684                                  	;;mov	al,[es:bp+16h]
 30685                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30686 000059F1 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30687 000059F5 C536[6C03]              	LDS	SI,[CALLBPB]
 30688                                  	;;mov	word [es:bp+1Ch],0
 30689                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30690 000059F9 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30691                                  	;invoke	$SETDPB
 30692 000059FF E852B6                  	call	_$SETDPB
 30693                                  
 30694                                  ;hkn; SS override
 30695 00005A02 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30696                                  	;mov	al,[es:bp+8]
 30697 00005A07 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30698                                  
 30699                                  	; MSDOS 3.3
 30700                                  	;;mov	ah,[es:bp+0Fh]
 30701                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30702                                  	;;mov	[DI-8],ax
 30703                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30704                                  
 30705                                  	; MSDOS 6.0
 30706                                  	;mov	[di-0Ah],al
 30707 00005A0B 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30708                                  						;>32mb		  ;AN000;
 30709                                  	;mov	ax,[es:bp+0Fh]
 30710 00005A0E 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30711                                  	;mov	[di-9h],ax			  ;AC000;
 30712 00005A12 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30713                                  					;>32mb Correct buffer info ;AC000;
 30714                                  	;Context DS			;hkn; SS is DOSDATA
 30715 00005A15 16                      	push	ss
 30716 00005A16 1F                      	pop	ds
 30717 00005A17 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30718 00005A19 C3                      	retn
 30719                                  
 30720                                  FATERRJ: 
 30721 00005A1A E94CFE                  	JMP	FATERR
 30722                                  
 30723                                  ;============================================================================
 30724                                  ; STDBUF.ASM
 30725                                  ;============================================================================
 30726                                  ; Retro DOS v2.0 - 12/03/2018
 30727                                  
 30728                                  ;
 30729                                  ; Standard buffer management for MSDOS
 30730                                  ;
 30731                                  
 30732                                  ;.xlist
 30733                                  ;.xcref
 30734                                  ;INCLUDE STDSW.ASM
 30735                                  ;.cref
 30736                                  ;.list
 30737                                  
 30738                                  ;TITLE	STDBUF - MSDOS buffer management
 30739                                  ;NAME	STDBUF
 30740                                  
 30741                                  ;INCLUDE BUF.ASM
 30742                                  
 30743                                  ;============================================================================
 30744                                  ; BUF.ASM
 30745                                  ;============================================================================
 30746                                  ; 31/07/2018 - Retro DOS v3.0
 30747                                  ; Retro DOS v2.0 - 12/03/2018
 30748                                  ;
 30749                                  ; buffer management for MSDOS
 30750                                  ;
 30751                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30752                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30753                                  ;
 30754                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30755                                  ;
 30756                                  ;SETVISIT:
 30757                                  ;	; 31/07/2018 - Retro DOS v3.0
 30758                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30759                                  ;; Inputs:
 30760                                  ;;      None
 30761                                  ;; Function:
 30762                                  ;;      Set up a scan of I/O buffers
 30763                                  ;; Outputs:
 30764                                  ;;      All visit flags = 0
 30765                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30766                                  ;;                    may cause a scan to stop in the middle leaving some
 30767                                  ;;                    visit flags set, and some not set.
 30768                                  ;;      DS:DI Points to [BUFFHEAD]
 30769                                  ;; No other registers altered
 30770                                  ;
 30771                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30772                                  ;	PUSH    AX
 30773                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30774                                  ;	;mov	al,0DFh
 30775                                  ;	mov	al,~buf_visit
 30776                                  ;SETLOOP:
 30777                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30778                                  ;	;and	[DI+5],al
 30779                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30780                                  ;       LDS     DI,[DI]
 30781                                  ;       CMP     DI,-1
 30782                                  ;       JNZ     SHORT SETLOOP
 30783                                  ;       POP     AX ; 09/09/2018
 30784                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30785                                  ;SVISIT_RETN:
 30786                                  ;       RETN
 30787                                  ;
 30788                                  ;SKIPVISIT:
 30789                                  ;	; 31/07/2018 - Retro DOS v3.0
 30790                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30791                                  ;
 30792                                  ;; Inputs:
 30793                                  ;;      DS:DI Points to a buffer
 30794                                  ;; Function:
 30795                                  ;;      Skip visited buffers
 30796                                  ;; Outputs:
 30797                                  ;;      DS:DI Points to next unvisited buffer
 30798                                  ;;      Zero is set if skip to LAST buffer
 30799                                  ;; No other registers altered
 30800                                  ;
 30801                                  ;       CMP     DI,-1
 30802                                  ;       ;retz
 30803                                  ;       JZ	SHORT SVISIT_RETN
 30804                                  ;
 30805                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 30806                                  ;       ;;;retnz
 30807                                  ;       ;;JNZ	SHORT SVISIT_RETN
 30808                                  ;
 30809                                  ;	;test	byte [di+5],20h
 30810                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 30811                                  ;	JNZ	short SKIPLOOP
 30812                                  ;	
 30813                                  ;	push	ax
 30814                                  ;	or	al,1
 30815                                  ;	pop	ax
 30816                                  ;	retn	
 30817                                  ;
 30818                                  ;SKIPLOOP:
 30819                                  ;	LDS     DI,[DI]
 30820                                  ;       JMP     SHORT SKIPVISIT
 30821                                  
 30822                                  ;============================================================================
 30823                                  ; BUF.ASM, MSDOS 6.0, 1991
 30824                                  ;============================================================================
 30825                                  ; 31/07/2018 - Retro DOS v3.0
 30826                                  ; 04/05/2019 - Retro DOS v4.0
 30827                                  
 30828                                  ;	TITLE	BUF - MSDOS buffer management
 30829                                  ;	NAME	BUF
 30830                                  
 30831                                  ;**	BUF.ASM - Low level routines for buffer cache management
 30832                                  ;
 30833                                  ;	GETCURHEAD
 30834                                  ;	ScanPlace
 30835                                  ;	PLACEBUF
 30836                                  ;	PLACEHEAD
 30837                                  ;	PointComp
 30838                                  ;	GETBUFFR
 30839                                  ;	GETBUFFRB
 30840                                  ;	FlushBuf
 30841                                  ;	BufWrite
 30842                                  ;	SET_RQ_SC_PARMS
 30843                                  ;
 30844                                  ;	Revision history:
 30845                                  ;
 30846                                  ;		AN000  version 4.00  Jan. 1988
 30847                                  ;		A004   PTM 3765 -- Disk reset failed
 30848                                  ;		M039 DB 10/17/90 - Disk write optimization
 30849                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 30850                                  
 30851                                  ;Break	<GETCURHEAD -- Get current buffer header>
 30852                                  ;----------------------------------------------------------------------------
 30853                                  ; Procedure Name : GetCurHead
 30854                                  ; Inputs:
 30855                                  ;	 No Inputs
 30856                                  ; Function:
 30857                                  ;	Returns the pointer to the first buffer in Queue
 30858                                  ;	and updates FIRST_BUFF_ADDR
 30859                                  ;       and invalidates LASTBUFFER (recency pointer)
 30860                                  ; Outputs:
 30861                                  ;	DS:DI = pointer to the first buffer in Queue
 30862                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 30863                                  ;       LASTBUFFER = -1
 30864                                  ; No other registers altered
 30865                                  ;----------------------------------------------------------------------------
 30866                                  
 30867                                  ; 04/05/2019 - Retro DOS v4.0
 30868                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 30869                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30870                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 30871                                  
 30872                                  GETCURHEAD:
 30873 00005A1D 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 30874 00005A22 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 30875 00005A29 36893E[BA0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 30876 00005A2E C3                      	retn
 30877                                  
 30878                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 30879                                  ;----------------------------------------------------------------------------
 30880                                  ; Procedure Name : ScanPlace
 30881                                  ; Inputs:
 30882                                  ;	Same as PLACEBUF
 30883                                  ; Function:
 30884                                  ;	Save scan location and call PLACEBUF
 30885                                  ; Outputs:
 30886                                  ;	DS:DI Points to saved scan location
 30887                                  ; All registers, except DS:DI, preserved.
 30888                                  ;----------------------------------------------------------------------------
 30889                                  ;M039: Rewritten to preserve registers.
 30890                                  
 30891                                  ;SCANPLACE:
 30892                                  ;	; 31/07/2018 - Retro DOS v3.0
 30893                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30894                                  ;	push	es
 30895                                  ;	les	si,[di]
 30896                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 30897                                  ;	call	PLACEBUF
 30898                                  ;	push	es
 30899                                  ;	pop	ds
 30900                                  ;	mov	di,si
 30901                                  ;	pop	es
 30902                                  ;scanplace_retn:
 30903                                  ;	retn	
 30904                                  	
 30905                                  	; MSDOS 6.0
 30906                                  SCANPLACE:
 30907 00005A2F FF35                    	push	word [di]
 30908                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 30909 00005A31 E80200                  	call	PLACEBUF
 30910 00005A34 5F                      	pop	di
 30911 00005A35 C3                      	retn
 30912                                  
 30913                                  ;----------------------------------------------------------------------------
 30914                                  ; Procedure Name : PlaceBuf
 30915                                  ; Input:
 30916                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 30917                                  ; Function:
 30918                                  ;	Remove buffer from queue and re-insert it in proper place.
 30919                                  ; NO registers altered
 30920                                  ;----------------------------------------------------------------------------
 30921                                  
 30922                                  ;procedure PLACEBUF,NEAR
 30923                                  
 30924                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30925                                  	; 20/05/2019 - Retro DOS v4.0
 30926                                  PLACEBUF:
 30927                                  	; 31/07/2018 - Retro DOS v3.0
 30928                                  
 30929                                  	; MSDOS 6.0
 30930 00005A36 50                      	push	AX			;Save only regs we modify	;AN000;
 30931 00005A37 53                      	push	BX							;AN000;
 30932 00005A38 56                      	push	SI							;AN000;
 30933                                  	
 30934 00005A39 8B05                    	mov	ax,[di]
 30935                                  	;mov	ax,[di+BUFFINFO.buf_next]
 30936 00005A3B 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 30937                                  	
 30938 00005A40 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 30939 00005A42 7420                    	je	short nret			;Yes, special case	;AN000;
 30940 00005A44 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 30941 00005A46 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 30942 00005A48 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 30943 00005A4C EB16                    	jmp	short nret 			;Continue with repositioning;AN000;
 30944                                  not_first:
 30945                                  	;mov	si,[di+2]
 30946 00005A4E 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 30947 00005A51 8904                    	mov	[si],ax
 30948                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 30949 00005A53 96                      	xchg	si,ax
 30950                                  	;mov	[si+2],ax
 30951 00005A54 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 30952                                  	
 30953 00005A57 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 30954 00005A5A 893C                    	mov	[si],di
 30955                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 30956 00005A5C 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 30957 00005A5F 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 30958 00005A62 891D                    	mov	[di],bx
 30959                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 30960                                  nret:									;AN000;
 30961 00005A64 5E                      	pop	SI							;AN000;
 30962 00005A65 5B                      	pop	BX							;AN000;
 30963 00005A66 58                      	pop	AX							;AN000;
 30964                                  									;AN000;
 30965                                  	;cmp	byte [di+4],0FFh
 30966 00005A67 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 30967 00005A6B 7505                            jne	short pbx			; M039: -no, jump.
 30968 00005A6D 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 30969                                  pbx:	
 30970 00005A72 C3                      	retn								;AN000;
 30971                                  
 30972                                  	; 31/07/2018 - Retro DOS v3.0
 30973                                  
 30974                                  	; MSDOS 3.3
 30975                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30976                                  
 30977                                  ;PLACEBUF:
 30978                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 30979                                  ;	
 30980                                  ;       CALL	save_world
 30981                                  ;       LES     CX,[DI]
 30982                                  ;       CMP     CX,-1           	; Buf is LAST?
 30983                                  ;       JZ      SHORT NRET		; Buffer already last
 30984                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 30985                                  ;       PUSH    DS
 30986                                  ;       POP     ES              	; Buf is ES:DI
 30987                                  ;	; 15/03/2018
 30988                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 30989                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 30990                                  ;       JNZ     SHORT BUFLOOP
 30991                                  ;       MOV     [SS:BUFFHEAD],CX
 30992                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 30993                                  ;       JMP     SHORT LOOKEND
 30994                                  ;BUFLOOP:
 30995                                  ;	; 31/07/2018
 30996                                  ;	mov	ax,ds
 30997                                  ;	mov	bx,si
 30998                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 30999                                  ;       LDS     SI,[SI]
 31000                                  ;       CALL    POINTCOMP
 31001                                  ;       jnz	short BUFLOOP
 31002                                  ;	;
 31003                                  ;	mov	ds,ax
 31004                                  ;	mov	si,bx
 31005                                  ;	mov	[SI],cx
 31006                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31007                                  ;	mov	[SI+2],bp
 31008                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31009                                  ;LOOKEND:
 31010                                  ;	mov	ax,ds
 31011                                  ;	mov	bx,si
 31012                                  ;       LDS     SI,[SI]
 31013                                  ;       CMP     SI,-1
 31014                                  ;       jnz     short LOOKEND
 31015                                  ;GOTHEEND:
 31016                                  ;       mov	ds,ax
 31017                                  ;	mov	[BX],di
 31018                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31019                                  ;       MOV     WORD [ES:DI],-1
 31020                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31021                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31022                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31023                                  ;NRET:
 31024                                  ;       CALL	restore_world
 31025                                  ;	
 31026                                  ;	;cmp	byte [di+4],-1
 31027                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31028                                  ;	jnz     short scanplace_retn
 31029                                  ;	call    PLACEHEAD
 31030                                  ;	retn
 31031                                  
 31032                                  ;EndProc PLACEBUF
 31033                                  
 31034                                  ;M039 - Removed PLACEHEAD.
 31035                                  ;----------------------------------------------------------------------------
 31036                                  ; places buffer at head
 31037                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31038                                  ;	ONE IN THE LIST!!!!!!!
 31039                                  ; BUGBUG ---- this routine can be removed because it has only
 31040                                  ; BUGBUG ---- one instruction. This routine is called from
 31041                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31042                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31043                                  ; BUGBUG ---- But kept as it is for modularity
 31044                                  ;----------------------------------------------------------------------------
 31045                                  ;procedure   PLACEHEAD,NEAR
 31046                                  ;	mov	word ptr [BufferQueue], di
 31047                                  ;	ret
 31048                                  ;EndProc PLACEHEAD
 31049                                  ;M039
 31050                                  
 31051                                  ;----------------------------------------------------------------------------
 31052                                  ; Procedure Name : PLACEHEAD
 31053                                  ;
 31054                                  ; SAME AS PLACEBUF except places buffer at head
 31055                                  ;----------------------------------------------------------------------------
 31056                                  
 31057                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31058                                  	; 05/09/2018
 31059                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31060                                  ;PLACEHEAD:
 31061                                  ;	; 31/07/2018 - Retro DOS v3.0
 31062                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31063                                  ;
 31064                                  ;       CALL	save_world
 31065                                  ;       PUSH	DS
 31066                                  ;       POP	ES
 31067                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31068                                  ;       LDS     SI,[SS:BUFFHEAD]
 31069                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31070                                  ;	CALL    POINTCOMP
 31071                                  ;       JZ      SHORT GOTHEEND2
 31072                                  ;	MOV	[ES:DI],SI
 31073                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31074                                  ;       MOV	[ES:DI+2],DS
 31075                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31076                                  ;       MOV	[SS:BUFFHEAD],DI
 31077                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31078                                  ;LOOKEND2:
 31079                                  ;       mov	ax,ds
 31080                                  ;	mov	bx,si
 31081                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31082                                  ;       LDS     SI,[SI]
 31083                                  ;       CALL    POINTCOMP
 31084                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31085                                  ;       mov	ds,ax
 31086                                  ;	mov	word [bx],-1
 31087                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31088                                  ;	mov	word [bx+2],-1
 31089                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31090                                  ;GOTHEEND2:
 31091                                  ;      	call	restore_world
 31092                                  ;placehead_retn:
 31093                                  ;	retn
 31094                                  
 31095                                  ; 20/05/2019 - Retro DOS v4.0
 31096                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31097                                  
 31098                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31099                                  ;----------------------------------------------------------------------------
 31100                                  ;
 31101                                  ; Procedure Name : PointComp
 31102                                  ; Inputs:
 31103                                  ;         DS:SI & ES:DI
 31104                                  ; Function:
 31105                                  ;          Checks for ((SI==DI) && (ES==DS))
 31106                                  ;	   Assumes that pointers are normalized for the
 31107                                  ;	   same segment
 31108                                  ;
 31109                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31110                                  ; DO NOT USE FOR < or >
 31111                                  ; No Registers altered
 31112                                  ;
 31113                                  ;----------------------------------------------------------------------------
 31114                                  
 31115                                  POINTCOMP:
 31116                                  	; 31/07/2018 - Retro DOS v3.0
 31117                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31118 00005A73 39FE                    	CMP	SI,DI
 31119 00005A75 750A                    	jnz	short _ret_label	; return if nz
 31120                                  	;jnz	short placehead_retn 
 31121 00005A77 51                      	PUSH	CX
 31122 00005A78 52                      	PUSH	DX
 31123 00005A79 8CD9                    	MOV	CX,DS
 31124 00005A7B 8CC2                    	MOV	DX,ES
 31125 00005A7D 39D1                    	CMP	CX,DX
 31126 00005A7F 5A                      	POP	DX
 31127 00005A80 59                      	POP	CX
 31128                                  _ret_label:
 31129 00005A81 C3                      	retn
 31130                                  
 31131                                  ; 01/08/2018 - Retro DOS v3.0
 31132                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31133                                  
 31134                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31135                                  
 31136                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31137                                  ;----------------------------------------------------------------------------
 31138                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31139                                  ;	It gets the specified local sector into one of the I/O buffers
 31140                                  ;	and shuffles the queue
 31141                                  ; 
 31142                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31143                                  ;		       ELSE no pre-read
 31144                                  ;		(DX) = Desired physical sector number	      (LOW)
 31145                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31146                                  ;		(ES:BP) = Pointer to drive parameters
 31147                                  ;		ALLOWED set in case of INT 24
 31148                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31149                                  ;		'C' clear if OK
 31150                                  ;		CURBUF Points to the Buffer for the sector
 31151                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31152                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31153                                  ;----------------------------------------------------------------------------
 31154                                  
 31155                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31156                                  ;----------------------------------------------------------------------------
 31157                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 31158                                  ;	It gets the specified sector into one of the I/O buffers
 31159                                  ;	and shuffles the queue. We need a special entry point so that
 31160                                  ;	we can read the alternate FAT sector if the first read fails, also
 31161                                  ;	so we can mark the buffer as a FAT sector.
 31162                                  ; 
 31163                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31164                                  ;		       ELSE no pre-read
 31165                                  ;		(DX) = Desired physical sector number	     (LOW)
 31166                                  ;		(SI) != 0
 31167                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31168                                  ;		(ES:BP) = Pointer to drive parameters
 31169                                  ;		ALLOWED set in case of INT 24
 31170                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31171                                  ;		'C' clear if OK
 31172                                  ;		CUR ddBUF Points to the Buffer for the sector
 31173                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31174                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31175                                  ;----------------------------------------------------------------------------
 31176                                  
 31177                                  	; 20/05/2019 - Retro DOS v4.0
 31178                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31179                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31180                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31181                                  GETBUFFR:
 31182 00005A82 31F6                    	XOR	SI,SI
 31183                                  
 31184                                  ;	This entry point is called for FAT buffering with SI != 0
 31185                                  
 31186                                  GETBUFFRB:
 31187 00005A84 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31188                                  	; 15/12/2022
 31189 00005A87 268A4600                	mov	al,[ES:BP]
 31190                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31191                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31192 00005A8B C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31193                                  	; MSDOS 6.0
 31194                                  ;hkn; SS override
 31195 00005A8F 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 31196                                  
 31197                                  ;	See if this is the buffer that was most recently returned.
 31198                                  ;	A big performance win if it is.
 31199                                  
 31200 00005A94 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31201 00005A97 7412                    	je	short getb5			; No
 31202                                  	;cmp	dx,[di+6]
 31203 00005A99 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31204 00005A9C 750D                    	JNZ	short getb5			; Wrong sector
 31205                                  	
 31206                                  	; MSDOS 6.0
 31207                                  	;cmp	cx,[di+8]
 31208 00005A9E 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 31209 00005AA1 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 31210                                  	
 31211                                  	;cmp	al,[di+4]
 31212 00005AA3 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31213                                  	;JZ	getb35				; Just asked for same buffer
 31214 00005AA6 7503                    	jnz	short getb5
 31215                                  	;jmp	getb35
 31216                                  	; 17/12/2022
 31217                                  	; 28/07/2019
 31218 00005AA8 E9C800                  	jmp	getb35x
 31219                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31220                                  	;jmp	getb35
 31221                                  
 31222                                  ;	It's not the buffer most recently returned. See if it's in the
 31223                                  ;	cache.
 31224                                  ;
 31225                                  ;	(cx:dx) = sector #
 31226                                  ;	(al) = drive #
 31227                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31228                                  ;	??? list may be incomplete ???
 31229                                  
 31230                                  getb5:	
 31231                                  	; MSDOS 3.3
 31232                                  	;lds	di,[SS:BUFFHEAD]
 31233                                  	; MSDOS 6.0
 31234 00005AAB E86FFF                  	CALL	GETCURHEAD			; get Q Head
 31235                                  getb10:	
 31236                                  	;cmp	dx,[di+6]
 31237 00005AAE 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31238 00005AB1 750D                    	jne	short getb12			; wrong sector lo
 31239                                  	
 31240                                  	; MSDOS 6.0
 31241                                  	;cmp	cx,[di+8]
 31242 00005AB3 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31243 00005AB6 7508                    	jne	short getb12			; wrong sector hi
 31244                                  	
 31245                                  	;cmp	al,[di+4]
 31246 00005AB8 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31247                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31248 00005ABB 7503                    	jne	short getb12
 31249 00005ABD E98D00                  	jmp	getb25
 31250                                  getb12:	
 31251                                  	; MSDOS 3.3
 31252                                  	;;mov	di,[DI]
 31253                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31254                                  	;
 31255                                  	; 15/08/2018
 31256                                  	;lds	di,[di]
 31257                                  
 31258                                  	;cmp	di,-1 ; 0FFFFh
 31259                                  	;jne	short getb10
 31260                                  	;lds	di,[SS:BUFFHEAD]
 31261                                  
 31262                                  	; MSDOS 6.0
 31263 00005AC0 8B3D                    	mov	di,[di]
 31264                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31265 00005AC2 363B3E[BA0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31266 00005AC7 75E5                    	jne	short getb10			; no, continue looking
 31267                                  
 31268                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31269                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31270                                  ;	new sector into it.
 31271                                  ;
 31272                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31273                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31274                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31275                                  ;	down a chain, but should be hashed.
 31276                                  ;
 31277                                  ;	(DS:DI) = first buffer in the queue
 31278                                  ;	(CX:DX) = sector # we want
 31279                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31280                                  
 31281                                  	; MSDOS 3.3 & MSDOS 6.0
 31282                                  ;hkn; SS override
 31283 00005AC9 51                      	PUSH	CX  ; MSDOS 6.0
 31284 00005ACA 56                      	push	si
 31285 00005ACB 52                      	push	dx
 31286 00005ACC 55                      	push	bp
 31287 00005ACD 06                      	push	es
 31288 00005ACE E81701                  	CALL	BUFWRITE			; Write out the dirty buffer
 31289 00005AD1 07                      	pop	es
 31290 00005AD2 5D                      	pop	bp
 31291 00005AD3 5A                      	pop	dx
 31292 00005AD4 5E                      	pop	si
 31293 00005AD5 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31294                                  	;jc	short getbx			; if got hard error
 31295 00005ADA 7303                    	jnc	short getb13
 31296 00005ADC E99E00                  	jmp	getbx
 31297                                  
 31298                                  getb13:
 31299                                  	; MSDOS 6.0
 31300 00005ADF E89301                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31301                                  
 31302                                  ;	We're ready to read in the buffer, if need be. If the caller
 31303                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31304                                  
 31305 00005AE2 30E4                    	XOR	AH,AH				; initial flags
 31306                                  ;hkn; SS override
 31307                                  	;test	byte [ss:PREREAD],0FFh
 31308                                  	;jnz	short getb20
 31309 00005AE4 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31310 00005AE9 754A                    	JNZ	short getb20			; no, we're done
 31311                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31312                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31313 00005AEB 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31314 00005AEE B90100                  	MOV	CX,1
 31315 00005AF1 56                      	push	si
 31316 00005AF2 57                      	push	di
 31317 00005AF3 52                      	push	dx
 31318                                  	; MSDOS 6.0
 31319 00005AF4 06                      	push	es ; ***
 31320                                  
 31321                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31322                                  ;	this point. -mrw 10/88
 31323                                  	
 31324 00005AF5 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31325 00005AFB 7407                    	jz	short getb14
 31326 00005AFD 1E                      	push	ds ; **
 31327 00005AFE 53                      	push	bx ; *
 31328 00005AFF 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31329                                  getb14:
 31330                                  ;M039: Eliminated redundant HMA code.
 31331                                  
 31332                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31333 00005B04 09F6                    	OR	SI,SI			; FAT sector ?
 31334 00005B06 7407                    	JZ	short getb15		
 31335                                  
 31336 00005B08 E8A9DC                  	call	FATSECRD
 31337                                  	;mov	ah,2
 31338 00005B0B B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31339                                  
 31340 00005B0D EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31341                                  
 31342                                  getb15:
 31343 00005B0F E8CEDC                  	call	DREAD			; Buffer is marked free if read barfs
 31344 00005B12 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31345                                  getb17:
 31346                                  	; 17/12/2022	
 31347                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31348                                  ;%if 0
 31349                                  	; MSDOS 6.0							  ;I001
 31350 00005B14 9C                      	pushf								  ;I001
 31351 00005B15 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31352 00005B1B 7411                    	jz	short not_in_hma	; no				  ;I001
 31353                                  	;mov	cx,[es:bp+2]
 31354 00005B1D 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31355 00005B21 D1E9                    	shr	cx,1							  ;I001
 31356 00005B23 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31357 00005B24 89DE                    	mov	si,bx							  ;I001
 31358 00005B26 5F                      	pop	di ; *							  ;I001
 31359 00005B27 07                      	pop	es ; **							  ;I001
 31360 00005B28 FC                      	cld								  ;I001
 31361 00005B29 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31362 00005B2A F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31363 00005B2C 06                      	push	es							  ;I001
 31364 00005B2D 1F                      	pop	ds							  ;I001
 31365                                  ;%endif
 31366                                  
 31367                                  ; 17/12/2022
 31368                                  %if 0
 31369                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31370                                  	; MSDOS 5.0
 31371                                  	pushf
 31372                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31373                                  	jz	short not_in_hma	; no
 31374                                  	popf
 31375                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31376                                  	shr	cx,1
 31377                                  	mov	si,bx
 31378                                  	pop	di ; *
 31379                                  	pop	es ; **
 31380                                  	cld
 31381                                  	rep	movsw
 31382                                  	push	es
 31383                                  	pop	ds
 31384                                  	jmp	short getb19 ; 27/11/2022
 31385                                  %endif
 31386                                  
 31387                                  not_in_hma:								  ;I001
 31388 00005B2E 9D                      	popf							 	  ;I001
 31389                                  getb19:
 31390 00005B2F 07                      	pop	es ; ***
 31391 00005B30 5A                      	pop	dx
 31392 00005B31 5F                      	pop	di
 31393 00005B32 5E                      	pop	si
 31394 00005B33 7248                    	JC	short getbx
 31395                                  
 31396                                  ;	The buffer has the data setup in it (if we were to read)
 31397                                  ;	Setup the various buffer fields
 31398                                  ;
 31399                                  ;	(ds:di) = buffer address
 31400                                  ;	(es:bp) = DPB address
 31401                                  ;	(HIGH_SECTOR:DX) = sector #
 31402                                  ;	(ah) = BUF_FLAGS value
 31403                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31404                                  
 31405                                  ;hkn; SS override
 31406                                  getb20:	; MSDOS 6.0
 31407 00005B35 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31408                                  	;mov	[di+8],cx
 31409 00005B3A 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31410                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31411                                   	;mov	[di+6],dx
 31412 00005B3D 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31413                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31414                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31415 00005B40 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31416                                  	;;mov	[di+0Ch],es
 31417                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31418 00005B43 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31419                                  	; 15/12/2022
 31420 00005B46 268A4600                	mov	al,[es:bp]
 31421                                  	;mov	al,[es:bp+0]
 31422                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31423                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31424                                  	;mov	[di+4],ax
 31425 00005B4A 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31426                                  getb25:	
 31427                                  	; MSDOS 3.3
 31428                                  	;mov     ax,1
 31429                                  
 31430                                  	; MSDOS 6.0
 31431                                  	;mov	byte [di+0Ah],1
 31432 00005B4D C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31433 00005B51 31C0                    	XOR	AX,AX
 31434                                  
 31435                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31436 00005B53 09F6                    	OR	SI,SI				; FAT sector ?
 31437 00005B55 740B                    	JZ	short getb30
 31438                                  
 31439                                  	;mov	al,[es:bp+8]
 31440 00005B57 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31441                                  	
 31442                                  	; MSDOS 6.0
 31443 00005B5B 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31444                                  	;mov	ax,[es:bp+0Fh]
 31445 00005B5E 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31446                                  						;  sectors
 31447                                  	; MSDOS 3.3
 31448                                  	;;mov	ah,[es:bp+0Fh]
 31449                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31450                                  
 31451                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31452                                  ;		is set
 31453                                  
 31454                                  getb30:	
 31455                                  	; MSDOS 6.0
 31456                                  	;mov	[di+0Bh],ax
 31457 00005B62 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31458                                  
 31459                                  	; MSDOS 3.3
 31460                                  	;;mov	[di+8],ax ; 15/08/2018	
 31461                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31462                                  
 31463 00005B65 E8CEFE                  	CALL	PLACEBUF
 31464                                  
 31465                                  ;hkn; SS override for next 4
 31466                                  getb35: 
 31467                                  	; 17/12/2022
 31468                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31469                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31470                                  	;MOV	[SS:CURBUF+2],DS
 31471                                  	;MOV	[SS:LastBuffer+2],DS
 31472                                  	;MOV	[SS:CURBUF],DI
 31473                                  	;MOV	[SS:LastBuffer],DI
 31474                                  	;CLC
 31475                                  
 31476                                  	; 17/12/2022
 31477                                  	; 07/12/2022
 31478                                  	; Retro DOS v4.0
 31479 00005B68 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31480 00005B6D 36893E[1E00]            	mov	[ss:LastBuffer],di
 31481 00005B72 F8                      	clc
 31482                                  getb35x: ; 28/07/2019
 31483 00005B73 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31484 00005B78 36893E[E205]            	MOV	[ss:CURBUF],di
 31485                                  
 31486                                  ;	Return with 'C' set appropriately
 31487                                  ;	(dx) = caller's original value
 31488                                  
 31489                                  getbx:	
 31490 00005B7D 16                      	push	ss
 31491 00005B7E 1F                      	pop	ds
 31492                                  	;retn
 31493                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31494                                  getbuffrb_retn:
 31495                                  ;flushbuf_retn:	; 17/12/2022
 31496 00005B7F C3                      	retn
 31497                                  
 31498                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31499                                  ;----------------------------------------------------------------------------
 31500                                  ; Input:
 31501                                  ;	DS = DOSGROUP
 31502                                  ;	AL = Physical unit number local buffers only
 31503                                  ;	   = -1 for all units and all remote buffers
 31504                                  ; Function:
 31505                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31506                                  ;	Carry set if error (user FAILed to I 24)
 31507                                  ;	    Flush operation completed.
 31508                                  ; DS Preserved, all others destroyed (ES too)
 31509                                  ;----------------------------------------------------------------------------
 31510                                  
 31511                                  	; 20/05/2019 - Retro DOS v4.0
 31512                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31513                                  
 31514                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31515                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31516                                  FLUSHBUF:
 31517                                  	; MSDOS 3.3
 31518                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31519                                  	;lds	di,[BUFFHEAD]
 31520                                  
 31521                                  	; MSDOS 6.0
 31522 00005B80 E89AFE                  	call	GETCURHEAD
 31523                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31524 00005B83 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31525 00005B89 7508                    	jnz	short scan_buf_queue
 31526 00005B8B 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31527 00005B91 7423                    	je	short end_scan
 31528                                  	
 31529                                  scan_buf_queue:
 31530 00005B93 E82900                  	call	CHECKFLUSH
 31531                                  	;push	ax  ; MSDOS 3.3
 31532                                  	; MSDOS 6.0
 31533                                  	;mov	ah,[di+4]
 31534 00005B96 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31535 00005B99 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31536 00005B9E 7408                    	je	short free_the_buf
 31537                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31538 00005BA0 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31539 00005BA6 7405                    	jz	short dont_free_the_buf
 31540                                  	; MSDOS 3.3
 31541                                  	;;mov	al,[di+4]
 31542                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31543                                  	;cmp	[SS:WPERR],al					;hkn;
 31544                                  	; 15/08/2018
 31545                                  	;jne	short dont_free_the_buf	
 31546                                  free_the_buf:
 31547                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31548 00005BA8 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31549                                  dont_free_the_buf:
 31550                                  	;pop	ax  ; MSDOS 3.3 	   	
 31551                                  
 31552                                  	; MSDOS 3.3
 31553                                  	;mov	di,[DI]
 31554                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31555                                  	;
 31556                                  	; 15/08/2018
 31557                                  	;lds	di,[di]
 31558                                  	;
 31559                                  	;cmp	di,-1 ; 0FFFFh
 31560                                  	;jnz	short scan_buf_queue 
 31561                                  	
 31562                                  	; MSDOS 6.0
 31563 00005BAD 8B3D                    	mov	di,[di]
 31564                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31565 00005BAF 363B3E[BA0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31566 00005BB4 75DD                    	jne	short scan_buf_queue
 31567                                  
 31568                                  end_scan:
 31569 00005BB6 16                      	push	ss
 31570 00005BB7 1F                      	pop	ds
 31571                                  	; 01/08/2018 - Retro DOS v3.0
 31572                                  	;cmp	byte [FAILERR],0
 31573                                  	;jne	short bad_flush
 31574                                  	;retn
 31575                                  ;bad_flush:
 31576                                  	;stc
 31577                                  	;retn
 31578                                  
 31579                                  	; 17/12/2022
 31580                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31581                                  	; 01/08/2018 - Retro DOS v3.0
 31582 00005BB8 803E[4A03]01            	cmp	byte [FAILERR],1
 31583 00005BBD F5                      	cmc
 31584                                  flushbuf_retn:
 31585 00005BBE C3                      	retn
 31586                                  	
 31587                                  	; 17/12/2022
 31588                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31589                                  	;cmp	byte [FAILERR],0
 31590                                  	;jne	short bad_flush
 31591                                  	;retn
 31592                                  ;bad_flush:
 31593                                  	;stc
 31594                                  	;retn
 31595                                  
 31596                                  ;----------------------------------------------------------------------------
 31597                                  ;
 31598                                  ; Procedure Name : CHECKFLUSH
 31599                                  ;
 31600                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31601                                  ;	   DS:DI - pointer to buffer
 31602                                  ;
 31603                                  ; Function : Write out a buffer if it is dirty
 31604                                  ;
 31605                                  ; Carry set if problem (currently user FAILed to I 24)
 31606                                  ;
 31607                                  ;----------------------------------------------------------------------------
 31608                                  
 31609                                  CHECKFLUSH:
 31610                                  	; MSDOS 6.0
 31611 00005BBF B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 31612                                  	;cmp	[di+4],ah
 31613 00005BC1 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31614 00005BC4 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31615 00005BC6 38C4                    	CMP	AH,AL			; 
 31616 00005BC8 7406                    	JZ	short DOBUFFER		; do this buffer
 31617                                  	;cmp	al,[di+4]
 31618 00005BCA 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31619 00005BCD F8                      	CLC
 31620 00005BCE 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31621                                  DOBUFFER:
 31622                                  	;test	byte [di+5],40h
 31623 00005BD0 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31624 00005BD4 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31625 00005BD6 50                      	PUSH	AX
 31626                                  	;push	word [di+4]
 31627 00005BD7 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31628 00005BDA E80B00                  	CALL	BUFWRITE
 31629 00005BDD 58                      	POP	AX
 31630 00005BDE 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31631                                  	;and	ah,0BFh
 31632 00005BE0 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31633                                  	;mov	[di+4],ax
 31634 00005BE3 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31635                                  LEAVE_BUF:
 31636 00005BE6 58                      	POP	AX			; Search info
 31637                                  checkflush_retn:
 31638 00005BE7 C3                      	retn
 31639                                  
 31640                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31641                                  ;----------------------------------------------------------------------------
 31642                                  ;
 31643                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31644                                  ;
 31645                                  ;	ENTRY	DS:DI Points to the buffer
 31646                                  ;
 31647                                  ;	EXIT	Buffer marked free
 31648                                  ;		Carry set if error (currently user FAILed to I 24)
 31649                                  ;
 31650                                  ;	USES	All buf DS:DI
 31651                                  ;		HIGH_SECTOR
 31652                                  ;----------------------------------------------------------------------------
 31653                                  
 31654                                  	; 20/05/2019 - Retro DOS v4.0
 31655                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31656                                  
 31657                                  
 31658                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31659                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31660                                  
 31661                                  BUFWRITE:
 31662                                  	; 10/09/2018
 31663                                  	; 01/08/2018 - Retro DOS v3.0
 31664                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31665 00005BE8 B8FF00                  	MOV	AX,00FFH
 31666                                  	;xchg	ax,[di+4]
 31667 00005BEB 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31668 00005BEE 3CFF                    	CMP	AL,0FFH
 31669 00005BF0 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31670                                  	;test	ah,40h
 31671 00005BF2 F6C440                  	test	AH,buf_dirty
 31672 00005BF5 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31673                                  	; MSDOS 6.0
 31674 00005BF7 E89400                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31675                                  
 31676                                  ;hkn; SS override
 31677 00005BFA 363A06[2203]            	CMP	AL,[SS:WPERR]
 31678 00005BFF 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31679                                  
 31680                                  ;hkn; SS override
 31681                                  	; MSDOS 6.0
 31682 00005C01 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31683                                  	
 31684                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31685                                  	;les	bp,[di+13] ; MSDOS 6.0
 31686 00005C05 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31687                                  	;;lea	bx,[di+16]
 31688                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31689 00005C08 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31690                                  	;mov	dx,[di+6]
 31691 00005C0B 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31692                                  	
 31693                                  	; MSDOS 6.0
 31694                                  	;mov	cx,[di+8]
 31695 00005C0E 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31696                                  
 31697                                  ;hkn; SS override
 31698 00005C11 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31699 00005C16 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31700                                  	; MSDOS 3.3
 31701                                  	;; mov	cx,[DI+8]
 31702                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31703                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31704 00005C19 30ED                    	XOR	CH,CH
 31705                                  	;;mov	ah,ch ; MSDOS 3.3
 31706                                  
 31707                                  ;hkn; SS override for ALLOWED
 31708                                  	;mov	byte [SS:ALLOWED],18h
 31709 00005C1B 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31710                                  	;test	byte [di+5],8
 31711                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31712                                  	;test	ah,8
 31713 00005C21 F6C408                  	test	AH,buf_isDATA
 31714 00005C24 7406                    	JZ	short NO_IGNORE
 31715                                  	;or	byte [SS:ALLOWED],20h
 31716 00005C26 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31717                                  NO_IGNORE:
 31718                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31719                                  	; MSDOS 6.0
 31720                                  	;mov	ax,[di+11]
 31721 00005C2C 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31722                                  
 31723 00005C2F 57                      	PUSH	DI		; Save buffer pointer
 31724 00005C30 31FF                    	XOR	DI,DI		; Indicate failure
 31725                                  
 31726 00005C32 1E                      	push	ds ; *
 31727 00005C33 53                      	push	bx ; **
 31728                                  WRTAGAIN:
 31729 00005C34 57                      	push	di ; ***
 31730 00005C35 51                      	push	cx ; ****
 31731 00005C36 50                      	push	ax ; *****
 31732                                  	;MOV	CX,1
 31733                                  	; 17/12/2022
 31734                                  	; ch = 0
 31735 00005C37 B101                    	mov	cl,1 ; 24/07/2019
 31736                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31737                                  	;mov	cx,1
 31738 00005C39 53                      	push	bx ; ******
 31739 00005C3A 52                      	push	dx ; *******
 31740 00005C3B 1E                      	push	ds ; ********
 31741                                  
 31742                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31743                                  
 31744                                  	; MSDOS 6.0
 31745 00005C3C 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31746 00005C42 7418                    	jz	short NBUFFINHMA
 31747 00005C44 51                      	push	cx
 31748 00005C45 06                      	push	es
 31749 00005C46 89DE                    	mov	si,bx
 31750 00005C48 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31751 00005C4C D1E9                    	shr	cx,1
 31752 00005C4E 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31753 00005C53 89FB                    	mov	bx,di
 31754 00005C55 FC                      	cld
 31755 00005C56 F3A5                    	rep	movsw
 31756 00005C58 06                      	push	es
 31757 00005C59 1F                      	pop	ds
 31758 00005C5A 07                      	pop	es
 31759 00005C5B 59                      	pop	cx
 31760                                  NBUFFINHMA:
 31761 00005C5C E8E1DB                  	call	DWRITE		; Write out the dirty buffer
 31762 00005C5F 1F                      	pop	ds ; ********
 31763 00005C60 5A                      	pop	dx ; *******
 31764 00005C61 5B                      	pop	bx ; ******
 31765 00005C62 58                      	pop	ax ; *****
 31766 00005C63 59                      	pop	cx ; ****
 31767 00005C64 5F                      	pop	di ; ***
 31768 00005C65 7201                    	JC	short NOSET
 31769 00005C67 47                      	INC	DI		; If at least ONE write succeedes, the operation
 31770                                  NOSET:				;	succeedes.
 31771 00005C68 01C2                    	ADD	DX,AX
 31772 00005C6A E2C8                    	LOOP	WRTAGAIN
 31773 00005C6C 5B                      	pop	bx ; **
 31774 00005C6D 1F                      	pop	ds ; *
 31775 00005C6E 09FF                    	OR	DI,DI		; Clears carry
 31776 00005C70 7501                    	JNZ	short BWROK	; At least one write worked
 31777 00005C72 F9                      	STC			; DI never got INCed, all writes failed.
 31778                                  BWROK:	
 31779 00005C73 5F                      	POP	DI
 31780 00005C74 C3                      	retn
 31781                                  
 31782                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 31783                                  ;----------------------------------------------------------------------------
 31784                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 31785                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 31786                                  ;	SC_DRIVE even if SC is disabled to save the testing
 31787                                  ;	code and time
 31788                                  ;
 31789                                  ;	ENTRY	ES:BP = drive parameter block
 31790                                  ;
 31791                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 31792                                  ;		[SC_DRIVE]= drive #
 31793                                  ;
 31794                                  ;	USES	Flags
 31795                                  ;----------------------------------------------------------------------------
 31796                                  
 31797                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31798                                  ; 04/05/2019 - Retro DOS v4.0
 31799                                  
 31800                                  SET_RQ_SC_PARMS:
 31801                                  ;hkn; SS override for all variables used in this procedure.
 31802 00005C75 50                      	push	ax
 31803                                  	;mov	ax,[es:bp+2]
 31804 00005C76 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 31805 00005C7A 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 31806                                  	;;mov	al,[es:bp+0]
 31807                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31808                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 31809                                  	; 15/12/2022
 31810 00005C7E 268A4600                	mov	al,[ES:BP]
 31811 00005C82 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 31812 00005C86 58                      	pop	ax
 31813                                  srspx:	
 31814 00005C87 C3                      	retn					;LB. return
 31815                                  
 31816                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 31817                                  ;----------------------------------------------------------------------------
 31818                                  ; Input:
 31819                                  ;	none
 31820                                  ; Function:
 31821                                  ;	increment dirty buffers count
 31822                                  ; Output:
 31823                                  ;	dirty buffers count is incremented
 31824                                  ;
 31825                                  ; All registers preserved
 31826                                  ;----------------------------------------------------------------------------
 31827                                  
 31828                                  INC_DIRTY_COUNT:
 31829                                  ;; BUGBUG  ---- remove this routine
 31830                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 31831 00005C88 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 31832 00005C8D C3                      	retn
 31833                                  
 31834                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 31835                                  ;----------------------------------------------------------------------------
 31836                                  ; Input:
 31837                                  ;	none
 31838                                  ; Function:
 31839                                  ;	decrement dirty buffers count
 31840                                  ; Output:
 31841                                  ;	dirty buffers count is decremented
 31842                                  ;
 31843                                  ; All registers preserved
 31844                                  ;----------------------------------------------------------------------------
 31845                                  
 31846                                  DEC_DIRTY_COUNT:
 31847 00005C8E 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 31848 00005C94 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 31849 00005C96 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 31850                                  					; error condition to underflow here? ;hkn;
 31851                                  ddcx:	
 31852 00005C9B C3                      	retn
 31853                                  
 31854                                  ;============================================================================
 31855                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 31856                                  ;============================================================================
 31857                                  ; 02/08/2018 - Retro DOS v3.0
 31858                                  ; 29/04/2019 - Retro DOS v4.0
 31859                                  
 31860                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 31861                                  
 31862                                  ; Pseudo EXEC system call for DOS
 31863                                  
 31864                                  ;	TITLE	MSPROC - process maintenance
 31865                                  ;	NAME	MSPROC
 31866                                  
 31867                                  ; =========================================================================
 31868                                  ;**	Process related system calls and low level routines for DOS 2.X.
 31869                                  ;	I/O specs are defined in DISPATCH.
 31870                                  ;
 31871                                  ;	$WAIT
 31872                                  ;	$EXEC
 31873                                  ;	$Keep_process
 31874                                  ;	Stay_resident
 31875                                  ;	$EXIT
 31876                                  ;	$ABORT
 31877                                  ;	abort_inner
 31878                                  ;
 31879                                  ;	Modification history:
 31880                                  ;
 31881                                  ;		Created: ARR 30 March 1983
 31882                                  ;		AN000	version 4.0 jan. 1988
 31883                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 31884                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 31885                                  ;
 31886                                  ;		M000	added support for loading programs into UMBs 7/9/90
 31887                                  ;
 31888                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 31889                                  ;		       dossym.inc. 7/30/90
 31890                                  ;		M005 - Support for EXE programs with out STACK segment and 
 31891                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 31892                                  ;		       stack is provided at the end of the program. Note that
 31893                                  ;		       only SP is changed.
 31894                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 31895                                  ;
 31896                                  ;		M028 - 4b04 implementation
 31897                                  ;
 31898                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 31899                                  ;			in memory block >= 64K, sp = 0. If memory block
 31900                                  ;			obtained is <64K, point sp at the end of the memory
 31901                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 31902                                  ;			added for a stack segment which may be needed if it
 31903                                  ;			is loaded in low memory situations.
 31904                                  ;
 31905                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 31906                                  ;
 31907                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 31908                                  ;			a bad environment if it reached 32767 bytes. Changed
 31909                                  ;			to allow 32768 bytes of environment.
 31910                                  ;
 31911                                  ;		M047 - Release the allocated UMB when we failed to load a 
 31912                                  ;		       COM file high. Also ensure that if the biggest block
 31913                                  ;		       into which we load the com file is less than 64K then
 31914                                  ;		       we provide atleast 256 bytes of stack to the user.
 31915                                  ;
 31916                                  ;		M050 - Made Lie table search CASE insensitive
 31917                                  ;
 31918                                  ;		M060 - Removed special version table from the kernal and
 31919                                  ;                      put it in a device drive which puts the address
 31920                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 31921                                  ;		       as a DWORD.
 31922                                  ;
 31923                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 31924                                  ;		       entry do not try to load low if there is no space in
 31925                                  ;		       UMBs.
 31926                                  ;
 31927                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 31928                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 31929                                  ;		       change return address to LeaveDos if AL=5.
 31930                                  ;
 31931                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 31932                                  ;                      controls building a version of MSDOS.SYS that only
 31933                                  ;                      runs programs from a fixed list (defined in the
 31934                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 31935                                  ;                      for details.  This feature is used to build a
 31936                                  ;                      "special" version of DOS that can be handed out to
 31937                                  ;                      OEM/ISV customers as part of a "service" disk.
 31938                                  ;
 31939                                  ; =========================================================================
 31940                                  
 31941                                  ;SAVEXIT  EQU  10
 31942                                  
 31943                                  ;BREAK	<$WAIT - return previous process error code>
 31944                                  ; =========================================================================
 31945                                  ;	$WAIT - Return previous process error code.
 31946                                  ;
 31947                                  ;	Assembler usage:
 31948                                  ;
 31949                                  ;	    MOV     AH, WaitProcess
 31950                                  ;	    INT     int_command
 31951                                  ;
 31952                                  ;	ENTRY	none
 31953                                  ;	EXIT	(ax) = exit code
 31954                                  ;	USES	all
 31955                                  ; =========================================================================
 31956                                  
 31957                                  	; 20/05/2019 - Retro DOS v4.0
 31958                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 31959                                  
 31960                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31961                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 31962                                  _$WAIT:
 31963                                  	; 02/08/2018 - Retro DOS v3.0
 31964                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 31965                                  
 31966 00005C9C 31C0                    	xor	AX,AX
 31967 00005C9E 368706[3403]            	xchg	AX,[ss:exit_code]
 31968 00005CA3 E9DEA9                  	jmp	SYS_RET_OK
 31969                                  
 31970                                  ; =========================================================================
 31971                                  ;BREAK <$exec - load/go a program>
 31972                                  ;	EXEC.ASM - EXEC System Call
 31973                                  ;
 31974                                  ;
 31975                                  ; Assembler usage:
 31976                                  ;	    lds     DX, Name
 31977                                  ;	    les     BX, Blk
 31978                                  ;	    mov     AH, Exec
 31979                                  ;	    mov     AL, FUNC
 31980                                  ;	    int     INT_COMMAND
 31981                                  ;
 31982                                  ;	AL  Function
 31983                                  ;	--  --------
 31984                                  ;	 0  Load and execute the program.
 31985                                  ;	 1  Load, create the program header but do not
 31986                                  ;	    begin execution.
 31987                                  ;	 3  Load overlay. No header created.
 31988                                  ;
 31989                                  ;	    AL = 0 -> load/execute program
 31990                                  ;
 31991                                  ;	    +---------------------------+
 31992                                  ;	    | WORD segment address of	|
 31993                                  ;	    | environment.		|
 31994                                  ;	    +---------------------------+
 31995                                  ;	    | DWORD pointer to ASCIZ	|
 31996                                  ;	    | command line at 80h	|
 31997                                  ;	    +---------------------------+
 31998                                  ;	    | DWORD pointer to default	|
 31999                                  ;	    | FCB to be passed at 5Ch	|
 32000                                  ;	    +---------------------------+
 32001                                  ;	    | DWORD pointer to default	|
 32002                                  ;	    | FCB to be passed at 6Ch	|
 32003                                  ;	    +---------------------------+
 32004                                  ;
 32005                                  ;	    AL = 1 -> load program
 32006                                  ;
 32007                                  ;	    +---------------------------+
 32008                                  ;	    | WORD segment address of	|
 32009                                  ;	    | environment.		|
 32010                                  ;	    +---------------------------+
 32011                                  ;	    | DWORD pointer to ASCIZ	|
 32012                                  ;	    | command line at 80h	|
 32013                                  ;	    +---------------------------+
 32014                                  ;	    | DWORD pointer to default	|
 32015                                  ;	    | FCB to be passed at 5Ch	|
 32016                                  ;	    +---------------------------+
 32017                                  ;	    | DWORD pointer to default	|
 32018                                  ;	    | FCB to be passed at 6Ch	|
 32019                                  ;	    +---------------------------+
 32020                                  ;	    | DWORD returned value of	|
 32021                                  ;	    | CS:IP			|
 32022                                  ;	    +---------------------------+
 32023                                  ;	    | DWORD returned value of	|
 32024                                  ;	    | SS:IP			|
 32025                                  ;	    +---------------------------+
 32026                                  ;
 32027                                  ;	    AL = 3 -> load overlay
 32028                                  ;
 32029                                  ;	    +---------------------------+
 32030                                  ;	    | WORD segment address where|
 32031                                  ;	    | file will be loaded.	|
 32032                                  ;	    +---------------------------+
 32033                                  ;	    | WORD relocation factor to |
 32034                                  ;	    | be applied to the image.	|
 32035                                  ;	    +---------------------------+
 32036                                  ;
 32037                                  ; Returns:
 32038                                  ;	    AX = error_invalid_function
 32039                                  ;	       = error_bad_format
 32040                                  ;	       = error_bad_environment
 32041                                  ;	       = error_not_enough_memory
 32042                                  ;	       = error_file_not_found
 32043                                  ; =========================================================================
 32044                                  ;
 32045                                  ;   Revision history:
 32046                                  ;
 32047                                  ;	 A000	version 4.00  Jan. 1988
 32048                                  ;
 32049                                  ; =========================================================================
 32050                                  
 32051                                  Exec_Internal_Buffer		EQU	OPENBUF
 32052                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32053                                  
 32054                                  ; =========================================================================
 32055                                  
 32056                                  ;IF1		; warning message on buffers
 32057                                  ;%out	Please make sure that the following are contiguous and of the
 32058                                  ;%out	following sizes:
 32059                                  ;%out
 32060                                  ;%out	OpenBuf     128
 32061                                  ;%out	RenBuf	    128
 32062                                  ;%out	SearchBuf    53
 32063                                  ;%out	DummyCDS    curdirLen
 32064                                  ;ENDIF
 32065                                  
 32066                                  ; =========================================================================
 32067                                  
 32068                                  ; =========================================================================
 32069                                  ;
 32070                                  ; =========================================================================
 32071                                  
 32072                                  	; 20/05/2019 - Retro DOS v4.0
 32073                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32074                                  
 32075                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32076                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32077                                  	
 32078                                  _$EXEC:
 32079                                  	; 02/08/2018 - Retro DOS v3.0
 32080                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32081                                  
 32082                                  EXEC001S:
 32083                                  	;LocalVar    Exec_Blk		,DWORD
 32084                                  	;LocalVar    Exec_Func		,BYTE
 32085                                  	;LocalVar    Exec_Load_High	,BYTE
 32086                                  	;LocalVar    Exec_FH		,WORD
 32087                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32088                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32089                                  	;LocalVar    Exec_Environ	,WORD
 32090                                  	;LocalVar    Exec_Size		,WORD
 32091                                  	;LocalVar    Exec_Load_Block	,WORD
 32092                                  	;LocalVar    Exec_DMA		,WORD
 32093                                  	;LocalVar    ExecNameLen 	,WORD
 32094                                  	;LocalVar    ExecName		,DWORD
 32095                                  	;
 32096                                  	;LocalVar    Exec_DMA_Save	,WORD
 32097                                  	;LocalVar    Exec_NoStack	,BYTE
 32098                                  
 32099                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32100                                  	;%define	Exec_Blk	dword [bp-4]
 32101                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32102                                  	%define		Exec_BlkL	word [bp-4]	
 32103                                  	%define		Exec_BlkH	word [bp-2]
 32104                                  	%define		Exec_Func	byte [bp-5]
 32105                                  	%define		Exec_Load_High	byte [bp-6]
 32106                                  	%define		Exec_FH		word [bp-8]
 32107                                  	%define		Exec_Rel_Fac	word [bp-10]
 32108                                  	%define		Exec_Res_Len_Para word [bp-12]
 32109                                  	%define		Exec_Environ	word [bp-14]
 32110                                  	%define		Exec_Size	word [bp-16]
 32111                                  	%define		Exec_Load_Block	word [bp-18]
 32112                                  	%define		Exec_DMA	word [bp-20]
 32113                                  	%define		ExecNameLen	word [bp-22]
 32114                                  	;%define	ExecName	dword [bp-26]
 32115                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32116                                  	%define		ExecNameL	word [bp-26]	
 32117                                  	%define		ExecNameH	word [bp-24]
 32118                                  	; MSDOS 6.0
 32119                                  	%define		Exec_DMA_Save	word [bp-28]
 32120                                  	%define		Exec_NoStack	byte [bp-29]
 32121                                  	
 32122                                  	; ==================================================================
 32123                                  	; validate function
 32124                                  	; ==================================================================
 32125                                  		      	
 32126                                  	; M068 - Start
 32127                                  	;
 32128                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32129                                  	; possibility that the count may not be decremented all the way to
 32130                                  	; 0. A typical case is if the program for which we intended to keep 
 32131                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32132                                  	; calls), exits pre-maturely due to error conditions.
 32133                                  
 32134                                  	; MSDOS 6.0
 32135 00005CA6 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32136                                  
 32137                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32138                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32139                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32140                                  
 32141 00005CAC 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32142                                  	;jne	short @f
 32143 00005CAE 7505                    	jne	short Exec_@f		; N: continue
 32144                                  					; Y: change ret addr. to LeaveDos.
 32145 00005CB0 59                      	pop	cx			; Note CX is not input to ExecReady
 32146 00005CB1 B9[4C04]                	mov	cx,LeaveDOS
 32147 00005CB4 51                      	push	cx
 32148                                  ;@@:
 32149                                  Exec_@f:
 32150                                  	; M068 - End
 32151                                  	
 32152                                  	;Enter
 32153                                  
 32154 00005CB5 55                      	push	bp
 32155 00005CB6 89E5                    	mov	bp,sp
 32156                                  	;;sub	sp,26	; MSDOS 3.3
 32157                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32158                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32159                                  	; 17/12/2022
 32160                                  	; 20/05/2019
 32161 00005CB8 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32162                                  
 32163                                  	; MSDOS 6.0
 32164 00005CBB 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32165                                  					; M030
 32166 00005CBD 7614                    	jna	short Exec_Check_2
 32167                                  
 32168                                  	; MSDOS 3.3
 32169                                  	;cmp	AL,3
 32170                                  	;jna	short Exec_Check_2
 32171                                  
 32172                                  Exec_Bad_Fun:
 32173 00005CBF 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32174                                  					; Extended Error Locus	;smr;SS Override
 32175                                  	;mov	al,1
 32176 00005CC5 B001                    	mov	al,error_invalid_function
 32177                                  
 32178                                  Exec_Ret_Err:
 32179                                  	;Leave
 32180 00005CC7 89EC                    	mov	sp,bp
 32181 00005CC9 5D                      	pop	bp
 32182                                  	;transfer SYS_RET_ERR
 32183 00005CCA E9C0A9                  	jmp	SYS_RET_ERR
 32184                                  
 32185                                  	; MSDOS 6.0
 32186                                  ExecReadyJ:
 32187 00005CCD E80318                  	call	ExecReady		; M028
 32188 00005CD0 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32189                                  
 32190                                  Exec_Check_2:
 32191 00005CD3 3C02                    	cmp	AL,2			
 32192 00005CD5 74E8                    	je	short Exec_Bad_Fun
 32193                                  
 32194                                  	; MSDOS 6.0
 32195 00005CD7 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32196 00005CD9 74E4                    	je	short Exec_Bad_Fun
 32197                                  	
 32198 00005CDB 3C05                    	cmp	al,5			; M028 ; M030
 32199 00005CDD 74EE                    	je	short ExecReadyJ	; M028
 32200                                  
 32201                                  	;mov	[bp-4],bx
 32202 00005CDF 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32203                                  	;mov	[bp-2],es
 32204 00005CE2 8C46FE                  	mov	Exec_BlkH,ES
 32205                                  	;mov	[bp-5],al
 32206 00005CE5 8846FB                  	mov	Exec_Func,AL
 32207                                  	;mov	byte [bp-6],0
 32208 00005CE8 C646FA00                	mov	Exec_Load_High,0
 32209                                  
 32210                                  	;mov	[bp-26],dx
 32211 00005CEC 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32212                                  	;mov	[bp-24],ds
 32213 00005CEF 8C5EE8                  	mov	ExecNameH,DS
 32214 00005CF2 89D6                    	mov	SI,DX			; move pointer to convenient place
 32215                                  	;invoke	DStrLen
 32216 00005CF4 E885B5                  	call	DStrLen
 32217                                  	;mov	[bp-22],cx
 32218 00005CF7 894EEA                  	mov	ExecNameLen,CX		; save length
 32219                                  
 32220                                  	; MSDOS 6.0
 32221 00005CFA 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32222 00005CFE 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32223                                  
 32224 00005D02 30C0                    	xor	AL,AL			; open for reading
 32225 00005D04 55                      	push	BP
 32226                                  
 32227                                  	; MSDOS 6.0
 32228                                  	;or	byte [ss:DOS_FLAG],1
 32229 00005D05 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32230                                  					; the redir that this open call is
 32231                                  					; due to an exec.
 32232                                  
 32233                                  	;invoke	$OPEN			; is the file there?
 32234 00005D0B E80B13                  	call	_$OPEN
 32235                                  
 32236                                  	; MSDOS 6.0
 32237 00005D0E 9C                      	pushf
 32238                                  	; 02/06/2019
 32239                                  	;and	byte [ss:DOS_FLAG],0FEh
 32240 00005D0F 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32241 00005D15 9D                      	popf
 32242                                  
 32243 00005D16 5D                      	pop	BP
 32244                                  
 32245                                  	; MSDOS 3.3 & MSDOS 6.0
 32246 00005D17 72AE                    	jc	short Exec_Ret_Err
 32247                                  
 32248                                  	;mov	[bp-8],ax
 32249 00005D19 8946F8                  	mov	Exec_FH,AX
 32250 00005D1C 89C3                    	mov	BX,AX
 32251 00005D1E 30C0                    	xor	AL,AL
 32252                                  	;invoke	$Ioctl
 32253 00005D20 E8F8C5                  	call	_$IOCTL
 32254 00005D23 7207                    	jc	short Exec_BombJ
 32255                                  
 32256                                  	;test	dl,80h
 32257 00005D25 F6C280                  	test	DL,devid_ISDEV
 32258 00005D28 740A                    	jz	short Exec_Check_Environ
 32259                                  
 32260                                  	;mov	al,2
 32261 00005D2A B002                    	mov	AL,error_file_not_found
 32262                                  Exec_BombJ:
 32263 00005D2C E9CA00                  	jmp	Exec_Bomb
 32264                                  
 32265                                  BadEnv:
 32266                                  	;mov	al,0Ah
 32267 00005D2F B00A                    	mov	AL,error_bad_environment
 32268 00005D31 E9C500                  	jmp	Exec_Bomb
 32269                                  
 32270                                  Exec_Check_Environ:
 32271                                  	;mov	word [bp-18],0
 32272 00005D34 C746EE0000              	mov	Exec_Load_Block,0
 32273                                  	;mov	word [bp-14],0
 32274 00005D39 C746F20000              	mov	Exec_Environ,0
 32275                                  					; overlays... no environment
 32276                                  	;test	byte [bp-5],2
 32277 00005D3E F646FB02                	test	Exec_Func,exec_func_overlay
 32278 00005D42 7552                    	jnz	short Exec_Read_Header
 32279                                  
 32280                                  	;lds	si,[bp-4]
 32281 00005D44 C576FC                  	lds	SI,Exec_Blk		; get block
 32282 00005D47 8B04                    	mov	ax,[SI]
 32283                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32284 00005D49 09C0                    	or	AX,AX
 32285 00005D4B 750C                    	jnz	short Exec_Scan_Env
 32286                                  
 32287 00005D4D 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32288                                  	;mov	ax,[44]
 32289 00005D52 A12C00                  	mov	AX,[PDB.ENVIRON]
 32290                                  
 32291                                  ; MSDOS 6.0
 32292                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32293                                  ;
 32294                                  ; Exec_environ is being correctly initialized after the environment has been
 32295                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32296                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32297                                  ; parent's environment.
 32298                                  ;	mov	Exec_Environ,AX
 32299                                  ;
 32300                                  ;----------------------------------------------------------------------------
 32301                                  
 32302                                  	;mov	[bp-14],ax
 32303                                  	;mov	Exec_Environ,ax
 32304                                  
 32305 00005D55 09C0                    	or	AX,AX
 32306 00005D57 743D                    	jz	short Exec_Read_Header
 32307                                  
 32308                                  Exec_Scan_Env:
 32309 00005D59 8EC0                    	mov	ES,AX
 32310 00005D5B 31FF                    	xor	DI,DI
 32311                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32312 00005D5D B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32313 00005D60 30C0                    	xor	AL,AL
 32314                                  
 32315                                  Exec_Get_Environ_Len:
 32316 00005D62 F2AE                    	repnz	scasb			; find that nul byte
 32317 00005D64 75C9                    	jnz	short BadEnv
 32318                                  
 32319 00005D66 49                      	dec	CX			; Dec CX for the next nul byte test
 32320 00005D67 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32321                                  
 32322 00005D69 AE                      	scasb				; is there another nul byte?
 32323 00005D6A 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32324                                  
 32325 00005D6C 57                      	push	DI
 32326                                  	;lea	bx,[DI+11h]
 32327 00005D6D 8D5D11                  	lea	BX,[DI+0Fh+2]
 32328                                  	;add	bx,[bp-22]
 32329 00005D70 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32330                                  					; remember argv[0] length
 32331                                  					; round up and remember argc
 32332 00005D73 B104                    	mov	CL,4
 32333 00005D75 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32334 00005D77 06                      	push	ES
 32335                                  	;invoke	$Alloc			; can we get the space?
 32336 00005D78 E84406                  	call	_$ALLOC
 32337 00005D7B 1F                      	pop	DS
 32338 00005D7C 59                      	pop	CX
 32339                                  
 32340                                  	;jnc	short Exec_Save_Environ
 32341                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32342                                  	; 17/12/2022
 32343 00005D7D 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32344                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32345                                  	;jnc	short Exec_Save_Environ
 32346                                  	;jmp	SHORT Exec_No_Mem
 32347                                  
 32348                                  Exec_Save_Environ:
 32349 00005D7F 8EC0                    	mov	ES,AX
 32350                                  	;mov	[bp-14],ax
 32351 00005D81 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32352 00005D84 31F6                    	xor	SI,SI
 32353 00005D86 89F7                    	mov	DI,SI
 32354 00005D88 F3A4                    	rep	movsb			; copy the environment
 32355 00005D8A B80100                  	mov	AX,1
 32356 00005D8D AB                      	stosw
 32357                                  	;lds	si,[bp-26]
 32358 00005D8E C576E6                  	lds	SI,ExecName
 32359                                  	;mov	cx,[bp-22]
 32360 00005D91 8B4EEA                  	mov	CX,ExecNameLen
 32361 00005D94 F3A4                    	rep	movsb
 32362                                  
 32363                                  Exec_Read_Header:
 32364                                  	; We read in the program header into the above data area and
 32365                                  	; determine where in this memory the image will be located.
 32366                                  
 32367                                  	;Context DS
 32368 00005D96 16                      	push	ss
 32369 00005D97 1F                      	pop	ds
 32370                                  	;mov	cx,26
 32371 00005D98 B91A00                  	mov	CX,exec_header_len	; header size
 32372 00005D9B BA[C70F]                	mov	DX,exec_signature
 32373 00005D9E 06                      	push	ES
 32374 00005D9F 1E                      	push	DS
 32375 00005DA0 E88304                  	call	ExecRead
 32376 00005DA3 1F                      	pop	DS
 32377 00005DA4 07                      	pop	ES
 32378 00005DA5 7250                    	jc	short Exec_Bad_File
 32379                                  
 32380 00005DA7 09C0                    	or	AX,AX
 32381 00005DA9 744C                    	jz	short Exec_Bad_File
 32382                                  	;cmp	ax,26
 32383 00005DAB 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32384 00005DAE 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32385                                  
 32386 00005DB0 F706[D30F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32387 00005DB6 7504                    	jnz	short Exec_Check_Sig
 32388                                  
 32389                                  	;mov	byte [bp-6],0FFh
 32390 00005DB8 C646FAFF                	mov	Exec_Load_High,-1
 32391                                  
 32392                                  Exec_Check_Sig:
 32393 00005DBC A1[C70F]                	mov	AX,[exec_signature]	; rms;NSS
 32394                                  	;cmp	ax,5A4Dh ; 'MZ'
 32395 00005DBF 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32396 00005DC2 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32397                                  
 32398                                  	;cmp	ax,4D5Ah ; 'ZM'
 32399 00005DC4 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32400 00005DC7 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32401                                  
 32402                                  Exec_Com_Filej:
 32403 00005DC9 E9E901                  	jmp	Exec_Com_File
 32404                                  
 32405                                  	; We have the program header... determine memory requirements
 32406                                  
 32407                                  Exec_Save_Start:
 32408 00005DCC A1[CB0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32409 00005DCF B105                    	mov	CL,5			; convert to paragraphs
 32410 00005DD1 D3E0                    	shl	AX,CL
 32411 00005DD3 2B06[CF0F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32412                                  	;mov	[bp-12],ax
 32413 00005DD7 8946F4                  	mov	Exec_Res_Len_Para,AX
 32414                                  
 32415                                  		; Do we need to allocate memory?
 32416                                  		; Yes if function is not load-overlay
 32417                                  
 32418                                  	;test	byte [bp-5],2
 32419 00005DDA F646FB02                	test	Exec_Func,exec_func_overlay
 32420 00005DDE 7445                    	jz	short Exec_Allocate	; allocation of space
 32421                                  
 32422                                  		; get load address from block
 32423                                  
 32424                                  	;les	di,[bp-4]
 32425 00005DE0 C47EFC                  	les	DI,Exec_Blk
 32426 00005DE3 268B05                  	mov	ax,[es:di]
 32427                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32428                                  	;mov	[bp-20],ax
 32429 00005DE6 8946EC                  	mov	Exec_DMA,AX
 32430                                  
 32431                                  	; 17/12/2022
 32432                                  	;;mov	ax,[es:di+2]
 32433                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32434                                  	;;mov	[bp-10],ax
 32435                                  	;mov	Exec_Rel_Fac,AX
 32436                                  
 32437                                  	; 17/12/2022
 32438                                  	; 30/11/2022 (!most proper code!)
 32439                                  	;mov	dx,[es:di+2]
 32440 00005DE9 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32441                                  	;mov	[bp-10],dx
 32442 00005DED 8956F6                  	mov	Exec_Rel_Fac,dx
 32443                                  	; ax = Exec_DMA
 32444 00005DF0 E9DE00                  	jmp	Exec_Find_Res
 32445                                  
 32446                                  ; 17/12/2022
 32447                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32448                                  ; 27/09/2023
 32449                                  %if 0
 32450                                  	; 02/06/2019 - Retro DOS v4.0
 32451                                  	;mov	ax,[bp-20]  ; *+*
 32452                                  	mov	AX,Exec_DMA ; *+*
 32453                                  	; 10/08/2018
 32454                                  	jmp	Exec_Find_Res		; M000
 32455                                  %endif
 32456                                  
 32457                                  Exec_No_Mem:
 32458                                  	;mov	al,8
 32459 00005DF3 B008                    	mov	AL,error_not_enough_memory
 32460 00005DF5 EB02                    	jmp	short Exec_Bomb
 32461                                  
 32462                                  Exec_Bad_File:
 32463                                  	;mov	al,0Bh
 32464 00005DF7 B00B                    	mov	AL,error_bad_format
 32465                                  
 32466                                  Exec_Bomb:
 32467                                  	;mov	bx,[bp-8]
 32468 00005DF9 8B5EF8                  	mov	BX,Exec_FH
 32469 00005DFC E84004                  	call	Exec_Dealloc
 32470                                  	;LeaveCrit CritMem
 32471 00005DFF E8ACB5                  	call	LCritMEM
 32472                                  	;save	<AX,BP>
 32473 00005E02 50                      	push	ax
 32474 00005E03 55                      	push	bp
 32475                                  	;invoke	$CLOSE
 32476 00005E04 E83E0A                  	call	_$CLOSE
 32477                                  	;restore <BP,AX>
 32478 00005E07 5D                      	pop	bp
 32479 00005E08 58                      	pop	ax
 32480 00005E09 E9BBFE                  	jmp	Exec_Ret_Err
 32481                                  
 32482                                  Exec_Chk_Mem: 
 32483                                  
 32484                                  ; 17/12/2022
 32485                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32486                                  ;%if 0
 32487                                  	; MSDOS 6.0    			; M063 - Start
 32488                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32489                                  	; 10/06/2019
 32490 00005E0C A0[0203]                	mov	al,[AllocMethod]
 32491                                  	;mov	bl,[ss:ALLOCMSAVE]
 32492 00005E0F 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32493                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32494 00005E13 881E[0203]              	mov	[AllocMethod],bl
 32495                                  	
 32496 00005E17 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32497 00005E1A 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32498                                  	;				; N: continue
 32499                                  	;
 32500 00005E1C A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32501 00005E1E 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32502                                  	; 02/06/2019
 32503                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32504 00005E20 A1[8A00]                	mov	ax,[SAVE_AX]
 32505                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32506                                  					; M063 - End
 32507 00005E23 EB2B                    	jmp	short Exec_Norm_Alloc1
 32508                                  ;%endif
 32509                                  
 32510                                  ; 17/12/2022
 32511                                  %if 0
 32512                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32513                                  	; MSDOS 6.0    			; M063 - Start
 32514                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32515                                  	mov	bl,[ss:ALLOCMSAVE]
 32516                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32517                                  
 32518                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32519                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32520                                  	;				; N: continue
 32521                                  	;
 32522                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32523                                  	jz	short Exec_No_Mem	; N: no memory 
 32524                                  
 32525                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32526                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32527                                  					; M063 - End
 32528                                  %endif
 32529                                  
 32530                                  Exec_Allocate:
 32531                                  	; 09/09/2018
 32532                                  
 32533                                  	; M005 - START
 32534                                  	; If there is no STACK segment for this exe file and if this
 32535                                  	; not an overlay and the resident size is less than 64K - 
 32536                                  	; 256 bytes we shall add 256 bytes to the programs 
 32537                                  	; resident memory requirement and set Exec_SP to this value.
 32538                                  	
 32539                                  	; 17/12/2022
 32540 00005E25 29DB                    	sub	bx,bx ; 0	
 32541                                  
 32542                                  	; MSDOS 6.0
 32543                                  	;;mov	byte [bp-29],0
 32544                                  	;mov	Exec_NoStack,0
 32545                                  	; 17/12/2022
 32546 00005E27 885EE3                  	mov	Exec_NoStack,bl ; 0
 32547 00005E2A 391E[D50F]              	cmp	[exec_SS],bx ; 0
 32548                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32549 00005E2E 7511                    	jne	short ea1		; Y: continue normal processing
 32550 00005E30 391E[D70F]              	cmp	[exec_SP],bx ; 0
 32551                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32552 00005E34 750B                    	jne	short ea1		; Y: continue normal processing
 32553                                  
 32554                                  	;inc	byte [bp-29]
 32555 00005E36 FE46E3                  	inc	Exec_NoStack
 32556 00005E39 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32557 00005E3C 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32558                                  
 32559 00005E3E 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32560                                  ea1:
 32561                                  	; M005 - END
 32562                                  
 32563                                  	; MSDOS 6.0			; M000 - start
 32564                                  	; 20/05/2019
 32565                                  	; (ds = ss = DOSDATA)
 32566 00005E41 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32567                                  					; Q: is the alloc strat high_first
 32568 00005E46 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32569                                  					; Y: set high_only bit
 32570 00005E48 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32571                                  					; M000 - end
 32572                                  Exec_Norm_Alloc:
 32573 00005E4D A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32574                                  Exec_Norm_Alloc1:	; 02/06/2019
 32575                                  					; M000: attempt at allocating memory
 32576                                  	; MSDOS 3.3
 32577                                  	;push	ax			; M000
 32578                                  
 32579 00005E50 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32580 00005E53 1E                      	push	DS
 32581                                  	;invoke	$Alloc			; should have carry set and BX has max
 32582 00005E54 E86805                  	call	_$ALLOC
 32583 00005E57 1F                      	pop	DS
 32584                                  
 32585                                  	; MSDOS 6.0
 32586 00005E58 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32587                                  	; MSDOS 3.3
 32588                                  	;pop	ax			; M000
 32589                                  
 32590 00005E5B 83C010                  	add	AX,10h			; room for header
 32591 00005E5E 83FB11                  	cmp	BX,11h			; enough room for a header
 32592                                  	; MSDOS 6.0
 32593 00005E61 72A9                    	jb	short Exec_Chk_Mem	; M000
 32594                                  	; MSDOS 3.3	
 32595                                  	;jb	short Exec_No_Mem
 32596                                  
 32597 00005E63 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32598                                  	; MSDOS 6.0
 32599 00005E65 77A5                    	ja	short Exec_Chk_Mem	; M000
 32600                                  	; MSDOS 3.3
 32601                                  	;ja	short Exec_No_Mem
 32602                                  
 32603                                  	;test	byte [bp-6],0FFh
 32604 00005E67 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32605 00005E6B 7518                    	jnz	short Exec_BX_Max	; use max
 32606                                  
 32607                                  	; 09/09/2018
 32608                                  
 32609 00005E6D 0306[D10F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32610                                  	; MSDOS 6.0
 32611 00005E71 7299                    	jc	short Exec_Chk_Mem		; M000
 32612                                  	; MSDOS 3.3
 32613                                  	;jc	short Exec_No_Mem
 32614                                  
 32615 00005E73 39D8                    	cmp	AX,BX			; enough space?
 32616                                  	; MSDOS 6.0
 32617 00005E75 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32618                                  	; MSDOS 3.3
 32619                                  	;ja	short Exec_No_Mem
 32620                                  
 32621 00005E77 2B06[D10F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32622 00005E7B 0306[D30F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32623 00005E7F 7204                    	jc	short Exec_BX_Max
 32624                                  
 32625 00005E81 39D8                    	cmp	AX,BX
 32626 00005E83 7602                    	jbe	short Exec_Got_Block
 32627                                  
 32628                                  Exec_BX_Max:
 32629 00005E85 89D8                    	mov	AX,BX
 32630                                  
 32631                                  Exec_Got_Block:
 32632                                  	; 03/08/2018 - Retro DOS v3.0
 32633                                  
 32634 00005E87 1E                      	push	DS
 32635 00005E88 89C3                    	mov	BX,AX
 32636                                  	;mov	[bp-16],bx
 32637 00005E8A 895EF0                  	mov	Exec_Size,BX
 32638                                  	;invoke	$Alloc			; get the space
 32639 00005E8D E82F05                  	call	_$ALLOC
 32640 00005E90 1F                      	pop	DS
 32641                                  	; MSDOS 6.0
 32642                                  	;jc	short Exec_Chk_Mem	; M000
 32643                                  	; MSDOS 3.3
 32644                                  	;;jc	short Exec_No_Mem
 32645                                  	; 20/05/2019
 32646 00005E91 7303                    	jnc	short ea0
 32647 00005E93 E976FF                  	jmp	Exec_Chk_Mem
 32648                                  ea0:
 32649                                  	; MSDOS 6.0
 32650 00005E96 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32651 00005E9A 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32652                                  
 32653                                  ;M029; Begin changes
 32654                                  ; This code does special handling for programs with no stack segment. If so,
 32655                                  ;check if the current block is larger than 64K. If so, we do not modify
 32656                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32657                                  ;case Exec_SS is not changed.
 32658                                  
 32659                                  	; MSDOS 6.0
 32660                                  	;cmp	byte [bp-29],0
 32661 00005E9E 807EE300                	cmp	Exec_NoStack,0
 32662                                  	;je	@f
 32663 00005EA2 7412                    	je	short ea2
 32664                                  
 32665 00005EA4 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32666                                  	;jae	@f			; Y: Exec_SP = 0
 32667 00005EA8 730C                    	jae	short ea2
 32668                                  
 32669                                  ;Make Exec_SP point at the top of the memory block
 32670                                  
 32671 00005EAA B104                    	mov	cl,4
 32672 00005EAC D3E3                    	shl	bx,cl			; get byte offset
 32673 00005EAE 81EB0001                	sub	bx,100h			; take care of PSP
 32674 00005EB2 891E[D70F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32675                                  ea2:
 32676                                  ;@@:
 32677                                  ;M029; end changes
 32678                                  
 32679                                  	;mov	[bp-18],ax
 32680 00005EB6 8946EE                  	mov	Exec_Load_Block,AX
 32681 00005EB9 83C010                  	add	AX,10h
 32682                                  	;test	byte [bp-6],0FFh
 32683 00005EBC F646FAFF                	test	Exec_Load_High,-1
 32684 00005EC0 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32685                                  
 32686                                  	;add	ax,[bp-16]
 32687 00005EC2 0346F0                  	add	AX,Exec_Size		; go to end
 32688                                  	;sub	ax,[bp-12]
 32689 00005EC5 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32690 00005EC8 83E810                  	sub	AX,10h			; drop off pdb
 32691                                  
 32692                                  Exec_Use_AX:
 32693                                  	;mov	[bp-10],ax
 32694 00005ECB 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32695                                  	;mov	[bp-20],ax
 32696 00005ECE 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32697                                  
 32698                                  	; Determine the location in the file of the beginning of
 32699                                  	; the resident
 32700                                  
 32701                                  ; 17/12/2022
 32702                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32703                                  ;%if 0
 32704                                  
 32705                                  Exec_Find_Res:
 32706                                  	; MSDOS 6.0
 32707                                  	;;mov	dx,[bp-20]
 32708                                  	;mov	DX,Exec_DMA ; *+*
 32709                                  	;;mov	[bp-28],dx
 32710                                  	;mov	Exec_DMA_Save,DX
 32711                                  
 32712                                  	; 17/12/2022
 32713                                  	; AX = Exec_DMA
 32714                                  
 32715                                  	; 02/06/2019 - Retro DOS v4.0
 32716                                  	;mov	[bp-28],ax ; *+*
 32717 00005ED1 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32718                                  
 32719                                  ;%endif
 32720                                  
 32721                                  ; 17/12/2022
 32722                                  %if 0
 32723                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32724                                  Exec_Find_Res:
 32725                                  	;mov	dx,[bp-20]
 32726                                  	mov	DX,Exec_DMA ; *+*
 32727                                  	;mov	[bp-28],dx
 32728                                  	mov	Exec_DMA_Save,DX
 32729                                  %endif
 32730                                  
 32731                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32732 00005ED4 8B16[CF0F]              	mov	DX,[exec_par_dir]
 32733 00005ED8 52                      	push	DX
 32734 00005ED9 B104                    	mov	CL,4
 32735 00005EDB D3E2                    	shl	DX,CL			; low word of location
 32736 00005EDD 58                      	pop	AX
 32737 00005EDE B10C                    	mov	CL,12
 32738 00005EE0 D3E8                    	shr	AX,CL			; high word of location
 32739 00005EE2 89C1                    	mov	CX,AX			; CX <- high
 32740                                  
 32741                                  		; Read in the resident image (first, seek to it)
 32742                                  	;mov	bx,[bp-8]
 32743 00005EE4 8B5EF8                  	mov	BX,Exec_FH
 32744 00005EE7 1E                      	push	DS
 32745 00005EE8 30C0                    	xor	AL,AL
 32746                                  	;invoke	$Lseek			; Seek to resident
 32747 00005EEA E8D40A                  	call	_$LSEEK
 32748 00005EED 1F                      	pop	DS
 32749 00005EEE 7303                    	jnc	short Exec_Big_Read
 32750                                  
 32751 00005EF0 E906FF                  	jmp	Exec_Bomb
 32752                                  
 32753                                  Exec_Big_Read:				; Read resident into memory
 32754                                  	;mov	bx,[bp-12]
 32755 00005EF3 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32756 00005EF6 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32757 00005EFA 7203                    	jb	short Exec_Read_OK
 32758                                  
 32759 00005EFC BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32760                                  
 32761                                  Exec_Read_OK:
 32762                                  	;sub	[bp-12],bx
 32763 00005EFF 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32764 00005F02 53                      	push	BX
 32765 00005F03 B104                    	mov	CL,4
 32766 00005F05 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 32767 00005F07 89D9                    	mov	CX,BX			; Count in correct register
 32768 00005F09 1E                      	push	DS
 32769                                  	;mov	ds,[bp-20]
 32770 00005F0A 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 32771                                  
 32772 00005F0D 31D2                    	xor	DX,DX
 32773 00005F0F 51                      	push	CX			; Save our count
 32774 00005F10 E81303                  	call	ExecRead
 32775 00005F13 59                      	pop	CX			; Get old count to verify
 32776 00005F14 1F                      	pop	DS
 32777 00005F15 7248                    	jc	short Exec_Bad_FileJ
 32778                                  
 32779 00005F17 39C1                    	cmp	CX,AX			; Did we read enough?
 32780 00005F19 5B                      	pop	BX			; Get paragraph count back
 32781 00005F1A 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 32782                                  
 32783                                  	; The read did not match the request. If we are off by 512
 32784                                  	; bytes or more then the header lied and we have an error.
 32785                                  
 32786 00005F1C 29C1                    	sub	CX,AX
 32787 00005F1E 81F90002                	cmp	CX,512
 32788 00005F22 733B                    	jae	short Exec_Bad_FileJ
 32789                                  
 32790                                  	; We've read in CX bytes... bump DTA location
 32791                                  
 32792                                  ExecCheckEnd:
 32793                                  	;add	[bp-20],bx
 32794 00005F24 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 32795                                  	;test	word [bp-12],0FFFFh
 32796 00005F27 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 32797 00005F2C 75C5                    	jnz	short Exec_Big_Read
 32798                                  
 32799                                  	; The image has now been read in. We must perform relocation
 32800                                  	; to the current location.
 32801                                  
 32802                                  exec_do_reloc:
 32803                                  	;mov	cx,[bp-10]
 32804 00005F2E 8B4EF6                  	mov	CX,Exec_Rel_Fac
 32805 00005F31 A1[D50F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 32806 00005F34 01C8                    	add	AX,CX			; and relocate him
 32807 00005F36 A3[C10F]                	mov	[exec_init_SS],AX 	; rms;NSS
 32808                                  
 32809 00005F39 A1[D70F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 32810 00005F3C A3[BF0F]                	mov	[exec_init_SP],AX 	; rms;NSS
 32811                                  
 32812 00005F3F C406[DB0F]              	les	AX,[exec_IP]		; rms;NSS
 32813 00005F43 A3[C30F]                	mov	[exec_init_IP],AX 	; rms;NSS
 32814 00005F46 8CC0                    	mov	AX,ES			; rms;NSS
 32815 00005F48 01C8                    	add	AX,CX			; relocated...
 32816 00005F4A A3[C50F]                	mov	[exec_init_CS],AX 	; rms;NSS
 32817                                  
 32818 00005F4D 31C9                    	xor	CX,CX
 32819 00005F4F 8B16[DF0F]              	mov	DX,[exec_rle_table]	; rms;NSS
 32820                                  	;mov	bx,[bp-8]
 32821 00005F53 8B5EF8                  	mov	BX,Exec_FH
 32822 00005F56 1E                      	push	DS
 32823 00005F57 31C0                    	xor	AX,AX
 32824                                  	;invoke	$Lseek
 32825 00005F59 E8650A                  	call	_$LSEEK
 32826 00005F5C 1F                      	pop	DS
 32827 00005F5D 7303                    	jnc	short exec_get_entries
 32828                                  
 32829                                  Exec_Bad_FileJ:
 32830 00005F5F E995FE                  	jmp	Exec_Bad_File
 32831                                  
 32832                                  exec_get_entries:
 32833 00005F62 8B16[CD0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 32834                                  
 32835                                  exec_read_reloc:
 32836 00005F66 52                      	push	DX
 32837                                  	;mov	dx,OPENBUF
 32838 00005F67 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 32839                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 32840                                  	;mov	cx,396 ; MSDOS 6.0
 32841 00005F6A B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 32842 00005F6D 1E                      	push	DS
 32843 00005F6E E8B502                  	call	ExecRead
 32844 00005F71 07                      	pop	ES
 32845 00005F72 5A                      	pop	DX
 32846 00005F73 72EA                    	jc	short Exec_Bad_FileJ
 32847                                  
 32848                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 32849                                  	;mov	cx,99 ;  MSDOS 6.0
 32850 00005F75 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 32851                                  					; Pointer to byte location in header
 32852                                  	;mov	di,OPENBUF
 32853 00005F78 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 32854                                  	;mov	si,[bp-10]
 32855 00005F7B 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 32856                                  
 32857                                  exec_reloc_one:
 32858 00005F7E 09D2                    	or	DX,DX			; Any more entries?
 32859 00005F80 7416                    	jz	short Exec_Set_PDBJ
 32860                                  
 32861                                  exec_get_addr:
 32862 00005F82 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 32863 00005F85 8CD8                    	mov	AX,DS			; Relocate address of item
 32864                                  
 32865                                  	; MSDOS 6.0
 32866                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 32867                                  	;add	ax,[bp-28]
 32868 00005F87 0346E4                  	add	AX,Exec_DMA_Save
 32869                                  
 32870 00005F8A 8ED8                    	mov	DS,AX
 32871 00005F8C 0137                    	add	[BX],SI
 32872 00005F8E 83C704                  	add	DI,4
 32873 00005F91 4A                      	dec	DX
 32874 00005F92 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 32875                                  
 32876                                  	; We've exhausted a single buffer's worth. Read in the next
 32877                                  	; piece of the relocation table.
 32878                                  
 32879 00005F94 06                      	push	ES
 32880 00005F95 1F                      	pop	DS
 32881 00005F96 EBCE                    	jmp	short exec_read_reloc
 32882                                  
 32883                                  Exec_Set_PDBJ:
 32884                                  	; MSDOS 6.0
 32885                                  	
 32886                                  	; We now determine if this is a buggy exe packed file and if 
 32887                                  	; so we patch in the right code. Note that fixexepatch will
 32888                                  	; point to a ret if dos loads low. The load segment as 
 32889                                  	; determined above will be in exec_dma_save
 32890                                  	
 32891 00005F98 06                      	push	es
 32892 00005F99 50                      	push	ax			; M030
 32893 00005F9A 51                      	push	cx			; M030
 32894                                  	;mov	es,[bp-28]
 32895 00005F9B 8E46E4                  	mov	es,Exec_DMA_Save
 32896 00005F9E 36A1[C50F]              	mov	ax,[ss:exec_init_CS]	; M030
 32897 00005FA2 368B0E[C30F]            	mov	cx,[ss:exec_init_IP]	; M030
 32898 00005FA7 36FF16[1012]            	call	word [ss:FixExePatch]
 32899                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32900                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 32901                                  	;call	word [ss:Rational386PatchPtr]
 32902 00005FAC 59                      	pop	cx			; M030
 32903 00005FAD 58                      	pop	ax			; M030
 32904 00005FAE 07                      	pop	es
 32905                                  
 32906 00005FAF E9DE00                  	jmp	Exec_Set_PDB
 32907                                  
 32908                                  Exec_No_Memj:
 32909 00005FB2 E93EFE                  	jmp	Exec_No_Mem
 32910                                  
 32911                                  	; we have a .COM file. First, determine if we are merely
 32912                                  	; loading an overlay.
 32913                                  
 32914                                  Exec_Com_File:
 32915                                  	;test	byte [bp-5],2
 32916 00005FB5 F646FB02                	test	Exec_Func,exec_func_overlay
 32917 00005FB9 742D                    	jz	short Exec_Alloc_Com_File
 32918                                  	;lds	si,[bp-4]
 32919 00005FBB C576FC                  	lds	SI,Exec_Blk		; get arg block
 32920 00005FBE AD                      	lodsw				; get load address
 32921                                  	;mov	[bp-20],ax
 32922 00005FBF 8946EC                  	mov	Exec_DMA,AX
 32923 00005FC2 B8FFFF                  	mov	AX,0FFFFh
 32924 00005FC5 EB63                    	jmp	short Exec_Read_Block	; read it all!
 32925                                  
 32926                                  Exec_Chk_Com_Mem:			
 32927                                  	; MSDOS 6.0	     		; M063 - Start
 32928 00005FC7 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32929 00005FCB 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 32930 00005FD0 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32931 00005FD5 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32932 00005FD8 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 32933                                  					; N: continue
 32934                                  	
 32935 00005FDA A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32936 00005FDC 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 32937                                  	
 32938                                  	;mov	ax,[bp-18]
 32939 00005FDE 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 32940 00005FE1 31DB                    	xor	bx,bx			; M047: bx => free arena
 32941 00005FE3 E87502                  	call	ChangeOwner		; M047: free this block
 32942                                  	
 32943 00005FE6 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 32944                                  					; M063 - End
 32945                                  	
 32946                                  	; We must allocate the max possible size block (ick!)
 32947                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 32948                                  	; size of block.
 32949                                  
 32950                                  Exec_Alloc_Com_File:
 32951                                  	; MSDOS 6.0			; M000 -start
 32952 00005FE8 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 32953                                  					; Q: is the alloc strat high_first
 32954 00005FEE 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 32955                                  					; Y: set high_only bit
 32956 00005FF0 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 32957                                  					; M000 - end
 32958                                  Exec_Norm_Com_Alloc:			; M000
 32959                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32960 00005FF6 BBFFFF                  	mov	BX,0FFFFh
 32961                                  	;invoke	$Alloc			; largest piece available as error
 32962 00005FF9 E8C303                  	call	_$ALLOC
 32963 00005FFC 09DB                    	or	BX,BX
 32964                                  	; MSDOS 6.0
 32965 00005FFE 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 32966                                  	; MSDOS 3.3
 32967                                  	;jz	short Exec_No_Memj
 32968                                  
 32969                                  	;mov	[bp-16],bx
 32970 00006000 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 32971 00006003 53                      	push	BX
 32972                                  	;invoke	$ALLOC			; largest piece available
 32973 00006004 E8B803                  	call	_$ALLOC
 32974 00006007 5B                      	pop	BX			; get size of block...
 32975                                  	;mov	[bp-18],ax
 32976 00006008 8946EE                  	mov	Exec_Load_Block,AX
 32977                                  
 32978 0000600B 83C010                  	add	AX,10h			; increment for header
 32979                                  	;mov	[bp-20],ax
 32980 0000600E 8946EC                  	mov	Exec_DMA,AX
 32981                                  
 32982 00006011 31C0                    	xor	AX,AX			; presume 64K read...
 32983 00006013 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 32984 00006017 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 32985                                  
 32986 00006019 89D8                    	mov	AX,BX			; convert size to bytes
 32987 0000601B B104                    	mov	CL,4
 32988 0000601D D3E0                    	shl	AX,CL
 32989                                  	; 17/12/2022
 32990                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32991                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 32992                                  	; MSDOS 5.0
 32993                                  	;cmp	AX,100h   
 32994                                  	; 02/06/2019 - Retro DOS v4.0
 32995                                  	; MSDOS 6.0
 32996                                          ; 17/12/2022
 32997 0000601F 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 32998 00006022 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 32999                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33000                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33001                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33002                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33003                                  
 33004                                  					; M047: size of the block is < 64K
 33005 00006024 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33006                                  
 33007                                  Exec_Read_Com:
 33008                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33009 00006027 2D0001                  	sub	AX,100h 		; remember size of psp
 33010                                  Exec_Read_Block:
 33011 0000602A 50                      	push	AX			; save number to read
 33012                                  	;mov	bx,[bp-8]
 33013 0000602B 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33014 0000602E 31C9                    	xor	CX,CX			; but seek to 0:0
 33015 00006030 89CA                    	mov	DX,CX
 33016 00006032 31C0                    	xor	AX,AX			; seek relative to beginning
 33017                                  	;invoke	$Lseek			; back to beginning of file
 33018 00006034 E88A09                  	call	_$LSEEK
 33019 00006037 59                      	pop	CX			; number to read
 33020                                  	;mov	ds,[bp-20]
 33021 00006038 8E5EEC                  	mov	DS,Exec_DMA
 33022 0000603B 31D2                    	xor	DX,DX
 33023 0000603D 51                      	push	CX
 33024 0000603E E8E501                  	call	ExecRead
 33025 00006041 5E                      	pop	SI			; get number of bytes to read
 33026 00006042 7303                    	jnc	short OkRead
 33027 00006044 E9B0FD                  	jmp	Exec_Bad_File
 33028                                  
 33029                                  	; 10/09/2018
 33030                                  OkRead:
 33031 00006047 39F0                    	cmp	AX,SI			; did we read them all?
 33032                                  	; MSDOS 6.0
 33033                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33034                                  	; MSDOS 3.3
 33035                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33036 00006049 7503                    	jne	short OkRead2
 33037 0000604B E979FF                  	jmp	Exec_Chk_Com_Mem
 33038                                  OkRead2:
 33039                                  	; MSDOS 6.0
 33040 0000604E 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33041 00006053 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33042                                  
 33043                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33044                                  	;test	byte [bp-5],2
 33045 00006058 F646FB02                	test	Exec_Func,exec_func_overlay
 33046 0000605C 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33047                                  
 33048                                  	;mov	ax,[bp-20]
 33049 0000605E 8B46EC                  	mov	AX,Exec_DMA
 33050 00006061 83E810                  	sub	AX,10h
 33051 00006064 36A3[C50F]              	mov	[SS:exec_init_CS],AX
 33052 00006068 36C706[C30F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33053                                  
 33054                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33055                                  	; of 0 on stack.
 33056                                  
 33057 0000606F 81C6FE00                	add	SI,0FEh 		; make room for stack
 33058                                  
 33059                                  	; MSDOS 6.0
 33060 00006073 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33061 00006076 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33062 00006078 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33063                                  
 33064                                  Exec_St_Ok:
 33065                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33066 0000607C 368936[BF0F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33067 00006081 36A3[C10F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33068 00006085 8ED8                    	mov	DS,AX
 33069 00006087 C7040000                	mov	WORD [SI],0		; 0 for return
 33070                                  
 33071                                  	; MSDOS 6.0
 33072                                  
 33073                                  	; M068
 33074                                  	;
 33075                                  	; We now determine if this is a Copy Protected App. If so the 
 33076                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33077                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33078                                  
 33079 0000608B 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33080                                  
 33081                                  Exec_Set_PDB:
 33082                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33083                                  	;mov	bx,[bp-8]
 33084 00006090 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33085 00006093 E8A901                  	call	Exec_Dealloc
 33086 00006096 55                      	push	BP
 33087                                  	;invoke	$Close			; release the jfn
 33088 00006097 E8AB07                  	call	_$CLOSE
 33089 0000609A 5D                      	pop	BP
 33090 0000609B E89301                  	call	Exec_Alloc
 33091                                  	;test	byte [bp-5],2
 33092 0000609E F646FB02                	test	Exec_Func,exec_func_overlay
 33093 000060A2 743A                    	jz	short Exec_Build_Header
 33094                                  
 33095                                  	; MSDOS 6.0
 33096 000060A4 E8C201                  	call	Scan_Execname
 33097 000060A7 E8D601                  	call	Scan_Special_Entries
 33098                                  ;SR;
 33099                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33100                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33101                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33102                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33103                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33104                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33105                                  ;issues the version check, it gets the lie version until the next overlay
 33106                                  ;call is issued.
 33107                                  
 33108 000060AA 36803E[3E10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33109 000060B0 7426                    	je	short norm_ovl		;yes, no special handling
 33110 000060B2 56                      	push	si
 33111 000060B3 06                      	push	es
 33112 000060B4 36C436[3F10]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33113                                  	 
 33114                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33115 000060B9 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33116 000060BD 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33117                                  	
 33118 000060BF 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33119 000060C4 36FF36[BC0E]            	push	word [ss:SPECIAL_VERSION]
 33120 000060C9 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33121                                  		;;; PDB.VERSION
 33122 000060CE EB06                    	jmp	short setver_done
 33123                                  sysinit_done:
 33124 000060D0 36C606[3E10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33125                                  setver_done:
 33126 000060D6 07                      	pop	es
 33127 000060D7 5E                      	pop	si
 33128                                  norm_ovl:
 33129                                  	;leave
 33130 000060D8 89EC                    	mov	sp,bp		
 33131 000060DA 5D                      	pop	bp
 33132                                  
 33133                                  	;transfer SYS_RET_OK		; overlay load -> done
 33134 000060DB E9A6A5                  	jmp	SYS_RET_OK
 33135                                  
 33136                                  Exec_Build_Header:
 33137                                  	;mov	dx,[bp-18]
 33138 000060DE 8B56EE                  	mov	DX,Exec_Load_Block
 33139                                  					; assign the space to the process
 33140                                  	;mov	si,1
 33141 000060E1 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33142                                  	;mov	ax,[bp-14]
 33143 000060E4 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33144 000060E7 09C0                    	or	AX,AX
 33145 000060E9 7405                    	jz	short No_Owner		; no environment
 33146                                  
 33147 000060EB 48                      	dec	AX			; point to header
 33148 000060EC 8ED8                    	mov	DS,AX
 33149 000060EE 8914                    	mov	[SI],DX 		; assign ownership
 33150                                  No_Owner:
 33151                                  	;mov	ax,[bp-18]
 33152                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33153                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33154                                  	; 17/12/2022
 33155 000060F0 89D0                    	mov	ax,dx ; 06/06/2019
 33156                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33157                                  	
 33158 000060F2 48                      	dec	AX
 33159 000060F3 8ED8                    	mov	DS,AX			; point to header
 33160 000060F5 8914                    	mov	[SI],DX 		; assign ownership
 33161                                  
 33162                                  	; MSDOS 6.0
 33163 000060F7 1E                      	push	DS			;AN000;MS. make ES=DS
 33164 000060F8 07                      	pop	ES			;AN000;MS.
 33165                                  	;mov	di,8
 33166 000060F9 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33167 000060FC E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33168                                  					;	   ds:si->name, cx=name length
 33169 000060FF 51                      	push	CX			;AN007;;MS. save for fake version
 33170 00006100 56                      	push	SI			;AN007;;MS. save for fake version
 33171                                  
 33172                                  MoveName:				;AN000;
 33173 00006101 AC                      	lodsb				;AN000;;MS. get char
 33174 00006102 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33175 00006104 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33176                                  					;AN000;
 33177 00006106 AA                      	stosb				;AN000;;MS. move char
 33178                                  					; MSKK bug fix - limit length copied
 33179 00006107 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33180 0000610A 7302                    	jae	short Mem_Done		; jump if so
 33181                                  	;
 33182 0000610C E2F3                    	loop	MoveName		;AN000;;MS. continue
 33183                                  Mem_Done:				;AN000;
 33184 0000610E 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33185                                  	;cmp	di,16
 33186 00006110 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33187 00006113 7301                    	jae	short Fill8		;AN000;MS.
 33188                                  	
 33189 00006115 AA                      	stosb				;AN000;MS.
 33190                                  	
 33191                                  Fill8:					;AN000;
 33192 00006116 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33193 00006117 59                      	pop	CX			;AN007;MS.
 33194                                  	
 33195 00006118 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33196                                  
 33197                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33198 0000611B 52                      	push	DX
 33199                                  	;mov	si,[bp-16]
 33200 0000611C 8B76F0                  	mov	SI,Exec_Size
 33201 0000611F 01D6                    	add	SI,DX
 33202                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33203 00006121 E8F6AF                  	call	_$DUP_PDB
 33204 00006124 5A                      	pop	DX
 33205                                  
 33206                                  	;push	word [bp-14]
 33207 00006125 FF76F2                  	push	Exec_Environ
 33208                                  	;pop	WORD [ES:2Ch]
 33209 00006128 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33210                                  
 33211                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33212                                  					; version number in PSP
 33213 0000612D 36FF36[BC0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33214 00006132 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33215                                  		; PDB.VERSION
 33216                                  
 33217                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33218                                  	;lds	si,[bp-4]
 33219 00006137 C576FC                  	lds	SI,Exec_Blk		; get the block
 33220 0000613A 1E                      	push	DS			; save its location
 33221 0000613B 56                      	push	SI
 33222                                  	;lds	si,[si+6]
 33223 0000613C C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33224                                  
 33225                                  	; DS points to user space 5C FCB
 33226                                  
 33227 0000613F B90C00                  	mov	CX,12			; copy drive, name and ext
 33228 00006142 51                      	push	CX
 33229 00006143 BF5C00                  	mov	DI,5Ch
 33230 00006146 8A1C                    	mov	BL,[SI]
 33231 00006148 F3A4                    	rep	movsb
 33232                                  
 33233                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33234                                  
 33235 0000614A 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33236 0000614C AB                      	stosw
 33237 0000614D AB                      	stosw
 33238                                  
 33239                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33240                                  
 33241 0000614E 59                      	pop	CX
 33242 0000614F 5E                      	pop	SI			; get block
 33243 00006150 1F                      	pop	DS
 33244 00006151 1E                      	push	DS			; save (again)
 33245 00006152 56                      	push	SI
 33246                                  	;lds	si,[si+0Ah]
 33247 00006153 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33248                                  
 33249                                  	; DS points to user space 6C FCB
 33250                                  
 33251 00006156 8A3C                    	mov	BH,[SI] 		; do same as above
 33252 00006158 F3A4                    	rep	movsb
 33253 0000615A AB                      	stosw
 33254 0000615B AB                      	stosw
 33255 0000615C 5E                      	pop	SI			; get block (last time)
 33256 0000615D 1F                      	pop	DS
 33257                                  	;ld	si,[si+2]
 33258 0000615E C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33259                                  
 33260                                  	; DS points to user space 80 command line
 33261                                  
 33262 00006161 80C980                  	or	CL,80h
 33263 00006164 89CF                    	mov	DI,CX
 33264 00006166 F3A4                    	rep	movsb			; Wham!
 33265                                  
 33266                                  	; Process BX into default AX (validity of drive specs on args).
 33267                                  	; We no longer care about DS:SI.
 33268                                  
 33269 00006168 FEC9                    	dec	CL			; get 0FFh in CL
 33270 0000616A 88F8                    	mov	AL,BH
 33271 0000616C 30FF                    	xor	BH,BH
 33272                                  	;invoke	GetVisDrv
 33273 0000616E E8410A                  	call	GetVisDrv
 33274 00006171 7302                    	jnc	short Exec_BL
 33275                                  
 33276 00006173 88CF                    	mov	BH,CL
 33277                                  
 33278                                  Exec_BL:
 33279 00006175 88D8                    	mov	AL,BL
 33280 00006177 30DB                    	xor	BL,BL
 33281                                  	;invoke	GetVisDrv
 33282 00006179 E8360A                  	call	GetVisDrv
 33283 0000617C 7302                    	jnc	short Exec_Set_Return
 33284                                  
 33285 0000617E 88CB                    	mov	BL,CL
 33286                                  
 33287                                  Exec_Set_Return:
 33288                                  	;invoke	Get_User_Stack			; get his return address
 33289 00006180 E847A3                  	call	Get_User_Stack
 33290                                  
 33291                                  	;push	word [si+14h]
 33292 00006183 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33293                                  	;push	word [si+12h]
 33294 00006186 FF7412                  	push	word [SI+user_env.user_IP]
 33295                                  	;push	word [si+14h]
 33296 00006189 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33297                                  	;push	word [si+12h]
 33298 0000618C FF7412                  	push	word [SI+user_env.user_IP]
 33299                                  	;pop	word [ES:0Ah]
 33300 0000618F 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33301                                  	;pop	word [ES:0Ch]
 33302 00006194 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33303                                  
 33304 00006199 31C0                    	xor	AX,AX
 33305 0000619B 8ED8                    	mov	DS,AX
 33306                                  					; save them where we can get them
 33307                                  					; later when the child exits.
 33308                                  	;pop	word [88h]
 33309 0000619D 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33310                                  	;pop	word [90h]
 33311 000061A1 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33312                                  
 33313 000061A5 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33314 000061AC 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33315 000061B1 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33316                                  
 33317                                  	;test	byte [bp-5],1
 33318 000061B6 F646FB01                	test	Exec_Func,exec_func_no_execute
 33319 000061BA 7427                    	jz	short exec_go
 33320                                  
 33321 000061BC 36C536[BF0F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33322                                  	;les	di,[bp-4]
 33323 000061C1 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33324                                  	;mov	[es:di+10h],ds
 33325 000061C4 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33326                                  
 33327 000061C8 4E                      	dec	SI			; 'push' default AX
 33328 000061C9 4E                      	dec	SI
 33329 000061CA 891C                    	mov	[SI],BX 		; save default AX reg
 33330                                  	;mov	[es:di+0Eh], si
 33331 000061CC 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33332                                  
 33333 000061D0 36C506[C30F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33334                                  	;mov	[es:di+14h],ds
 33335 000061D5 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33336                                  	;mov	[es:di+12h],ax
 33337 000061D9 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33338                                  	
 33339                                  	;leave
 33340 000061DD 89EC                    	mov	sp,bp
 33341 000061DF 5D                      	pop	bp	
 33342                                  
 33343                                  	;transfer SYS_RET_OK
 33344 000061E0 E9A1A4                  	jmp	SYS_RET_OK
 33345                                  
 33346                                  exec_go:
 33347 000061E3 36C536[C30F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33348 000061E8 36C43E[BF0F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33349 000061ED 8CC0                    	mov	AX,ES
 33350                                  
 33351                                  	; MSDOS 6.0
 33352 000061EF 36803E[0F12]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33353 000061F5 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33354                                  
 33355 000061F7 1E                      	push	ds			; Y: control must go to low mem stub
 33356                                  		
 33357 000061F8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33358                                  					;    control to user 
 33359 000061FD 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33360                                  					; M004: Set bit to signal int 21
 33361                                  					; ah = 25 & ah= 49. See dossym.inc 
 33362                                  					; under TAG M003 & M009 for 
 33363                                  					; explanation
 33364 00006202 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33365                                  					; M068: going to be turned OFF.
 33366                                  	
 33367 00006206 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33368 00006208 1F                      	pop	ds
 33369                                  	
 33370 00006209 50                      	push	ax			; ret far into the low mem stub
 33371 0000620A B8[1311]                	mov	ax,disa20_xfer
 33372 0000620D 50                      	push	ax
 33373 0000620E 8CC0                    	mov	AX,ES			; restore ax
 33374 00006210 CB                      	retf
 33375                                  
 33376                                  Xfer_To_User:
 33377                                  	; DS:SI points to entry point
 33378                                  	; AX:DI points to initial stack
 33379                                  	; DX has PDB pointer
 33380                                  	; BX has initial AX value
 33381                                  
 33382 00006211 FA                      	cli
 33383                                  	; 15/08/2018
 33384 00006212 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33385                                  
 33386 00006218 8ED0                    	mov	SS,AX			; set up user's stack
 33387 0000621A 89FC                    	mov	SP,DI			; and SP
 33388 0000621C FB                      	sti
 33389                                  
 33390 0000621D 1E                      	push	DS			; fake long call to entry
 33391 0000621E 56                      	push	SI
 33392 0000621F 8EC2                    	mov	ES,DX			; set up proper seg registers
 33393 00006221 8EDA                    	mov	DS,DX
 33394 00006223 89D8                    	mov	AX,BX			; set up proper AX
 33395                                  
 33396 00006225 CB                      	retf
 33397                                  
 33398                                  ; 04/08/2018 - Retro DOS v3.0
 33399                                  
 33400                                  ;----------------------------------------------------------------------------
 33401                                  ;
 33402                                  ;----------------------------------------------------------------------------
 33403                                  
 33404                                  ExecRead:
 33405 00006226 E81600                  	CALL	Exec_Dealloc
 33406                                  	;mov	bx,[bp-8]
 33407 00006229 8B5EF8                  	MOV	bx,Exec_FH
 33408                                  
 33409 0000622C 55                      	PUSH	BP
 33410 0000622D E82607                  	call	_$READ
 33411 00006230 5D                      	POP	BP
 33412                                  
 33413                                  	;CALL	Exec_Alloc
 33414                                  	;retn
 33415                                  	; 18/12/2022
 33416                                  	;jmp	short Exec_Alloc
 33417                                  
 33418                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33419                                  
 33420                                  ;----------------------------------------------------------------------------
 33421                                  ;
 33422                                  ;----------------------------------------------------------------------------
 33423                                  
 33424                                  Exec_Alloc:
 33425 00006231 53                      	push	BX
 33426                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33427                                  	; 20/05/2019 - Retro DOS v4.0
 33428                                  	; MSDOS 6.0
 33429 00006232 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33430 00006237 E81000                  	call	ChangeOwners
 33431 0000623A E871B1                  	call	LCritMEM
 33432 0000623D 5B                      	pop	BX
 33433 0000623E C3                      	retn
 33434                                  
 33435                                  ;----------------------------------------------------------------------------
 33436                                  ;
 33437                                  ;----------------------------------------------------------------------------
 33438                                  
 33439                                  Exec_Dealloc:
 33440 0000623F 53                      	push	BX
 33441                                  	;mov	bx,0
 33442 00006240 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33443 00006242 E84EB1                  	call	ECritMEM
 33444 00006245 E80200                  	call	ChangeOwners
 33445 00006248 5B                      	pop	BX
 33446 00006249 C3                      	retn
 33447                                  
 33448                                  ; 18/12/2022
 33449                                  %if 0
 33450                                  ;----------------------------------------------------------------------------
 33451                                  ;
 33452                                  ;----------------------------------------------------------------------------
 33453                                  
 33454                                  Exec_Alloc:
 33455                                  	push	BX
 33456                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33457                                  	; 20/05/2019 - Retro DOS v4.0
 33458                                  	; MSDOS 6.0
 33459                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33460                                  	call	ChangeOwners
 33461                                  	call	LCritMEM
 33462                                  	pop	BX
 33463                                  	retn
 33464                                  
 33465                                  %endif
 33466                                  
 33467                                  ;----------------------------------------------------------------------------
 33468                                  ;
 33469                                  ;----------------------------------------------------------------------------
 33470                                  
 33471                                  ChangeOwners:
 33472 0000624A 9C                      	pushf
 33473 0000624B 50                      	push	AX
 33474                                  	;mov	ax,[bp-14]
 33475 0000624C 8B46F2                  	mov	AX,Exec_Environ
 33476 0000624F E80900                  	call	ChangeOwner
 33477                                  	;mov	ax,[bp-18]
 33478 00006252 8B46EE                  	mov	AX,Exec_Load_Block
 33479 00006255 E80300                  	call	ChangeOwner
 33480 00006258 58                      	pop	AX
 33481 00006259 9D                      	popf
 33482                                  chgown_retn:
 33483 0000625A C3                      	retn
 33484                                  
 33485                                  ;----------------------------------------------------------------------------
 33486                                  ;
 33487                                  ;----------------------------------------------------------------------------
 33488                                  
 33489                                  ChangeOwner:
 33490 0000625B 09C0                    	or	AX,AX			; is area allocated?
 33491 0000625D 74FB                    	jz	short chgown_retn	; no, do nothing
 33492 0000625F 48                      	dec	AX
 33493 00006260 1E                      	push	DS
 33494 00006261 8ED8                    	mov	DS,AX
 33495 00006263 891E0100                	mov	[ARENA.OWNER],BX
 33496 00006267 1F                      	pop	DS
 33497 00006268 C3                      	retn
 33498                                  
 33499                                  ;----------------------------------------------------------------------------
 33500                                  ;
 33501                                  ;----------------------------------------------------------------------------
 33502                                  
 33503                                  ; 20/05/2019 - Retro DOS v4.0
 33504                                  
 33505                                  	; MSDOS 6.0
 33506                                  Scan_Execname:
 33507 00006269 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33508                                  Scan_Execname1:				; M028
 33509                                  Save_Begin:				;
 33510 0000626C 89F1                    	mov	CX,SI			; CX= starting addr
 33511                                  Scan0:					;
 33512 0000626E AC                      	lodsb				; get char
 33513                                  
 33514 0000626F 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33515 00006271 74F9                    	jz	short Save_Begin	; yes, save si
 33516 00006273 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33517 00006275 74F5                    	jz	short Save_Begin	; yes, save si
 33518 00006277 3C00                    	cmp	AL,0			; is end of name
 33519 00006279 75F3                    	jnz	short Scan0		; no, continue scanning
 33520 0000627B 29CE                    	sub	SI,CX			; get name's length
 33521 0000627D 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33522                                  
 33523 0000627F C3                      	retn
 33524                                  
 33525                                  ;----------------------------------------------------------------------------
 33526                                  ;
 33527                                  ;----------------------------------------------------------------------------
 33528                                  
 33529                                  ; 20/05/2019 - Retro DOS v4.0
 33530                                  
 33531                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33532                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33533                                  
 33534                                  	; MSDOS 6.0
 33535                                  
 33536                                  Scan_Special_Entries:
 33537                                  
 33538 00006280 49                      	dec	CX			; cx= name length
 33539                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33540                                  					;reset to current version
 33541                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33542                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33543                                  	;mov	word [ss:SPECIAL_VERSION],5
 33544                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33545                                  
 33546                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33547 00006281 36C706[BC0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33548                                  				; 1506h for Retro DOS v4.0 (MSDOS 6.21)
 33549                                  ;***	call	Reset_Version
 33550                                  
 33551                                  ;M060	push	SS
 33552                                  ;M060	pop	ES
 33553                                  
 33554 00006288 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33555 0000628D 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33556 0000628F 09F8                    	or	AX,DI			;M060; be sure the table exists
 33557 00006291 7427                    	jz	short End_List		;M060; If ZR then no table
 33558                                  
 33559                                  GetEntries:
 33560 00006293 268A05                  	mov	AL,[ES:DI]		; end of list
 33561 00006296 08C0                    	or	AL,AL
 33562 00006298 7420                    	jz	short End_List		; yes
 33563                                  
 33564 0000629A 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33565 0000629F 38C8                    	cmp	AL,CL			; same length ?
 33566 000062A1 751B                    	jnz	short SkipOne 		; no
 33567                                  
 33568 000062A3 47                      	inc	DI			; es:di -> special name
 33569 000062A4 51                      	push	CX			; save length and name addr
 33570 000062A5 56                      	push	SI
 33571                                  
 33572                                  ; M050 - BEGIN
 33573                                  
 33574 000062A6 50                      	push	ax			; save len
 33575                                  sse_next_char:
 33576 000062A7 AC                      	lodsb
 33577 000062A8 E8BCEE                  	call	UCase
 33578 000062AB AE                      	scasb
 33579 000062AC 750D                    	jne	short Not_Matched
 33580 000062AE E2F7                    	loop	sse_next_char
 33581                                  	
 33582                                  ;	repz	cmpsb			; same name ?
 33583                                  ;	jnz	short Not_Matched	; no
 33584                                  
 33585 000062B0 58                      	pop	ax			; take len off the stack
 33586                                  
 33587                                  ; M050 - END
 33588                                  
 33589 000062B1 268B05                  	mov	AX,[ES:DI]		; get special version
 33590 000062B4 36A3[BC0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33591                                  
 33592                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33593                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33594                                  
 33595 000062B8 5E                      	pop	SI
 33596 000062B9 59                      	pop	CX
 33597                                  	; 18/12/2022
 33598                                  	;jmp	SHORT End_List
 33599                                  
 33600                                  	; 18/12/2022
 33601                                  End_List:
 33602 000062BA C3                      	retn
 33603                                  
 33604                                  Not_Matched:
 33605 000062BB 58                      	pop	ax			; get len from stack ; M050
 33606 000062BC 5E                      	pop	SI			; restore si,cx
 33607 000062BD 59                      	pop	CX
 33608                                  
 33609                                  SkipOne:
 33610 000062BE 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33611 000062C3 30E4                    	xor	AH,AH			; position to next entry
 33612 000062C5 01C7                    	add	DI,AX
 33613                                  
 33614 000062C7 83C703                  	add	DI,3			; DI -> next entry length
 33615                                  ;***	add	DI,4			; DI -> next entry length
 33616                                  
 33617 000062CA EBC7                    	jmp	short GetEntries
 33618                                  
 33619                                  	; 18/12/2022
 33620                                  ;End_List:
 33621                                  	;retn
 33622                                  
 33623                                  ; 04/08/2018 - Retro DOS v3.0
 33624                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 33625                                  
 33626                                  ;----------------------------------------------------------------------------
 33627                                  ;SUBTTL Terminate and stay resident handler
 33628                                  ;
 33629                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 33630                                  ;	    truncate the current block.
 33631                                  ;
 33632                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33633                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 33634                                  ;	    and restoring the vectors.
 33635                                  ;
 33636                                  ;----------------------------------------------------------------------------
 33637                                  
 33638                                  	; 20/05/2019 - Retro DOS v4.0
 33639                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33640                                  
 33641                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33642                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33643                                  
 33644                                  _$KEEP_PROCESS:
 33645 000062CC 50                      	push	AX			; keep exit code around
 33646                                  	;mov	byte [SS:EXIT_TYPE],3
 33647 000062CD 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33648 000062D3 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33649 000062D8 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33650 000062DB 7303                    	jae	short Keep_Shrink	; info
 33651                                  
 33652 000062DD BA0600                  	mov	DX,6h
 33653                                  
 33654                                  Keep_Shrink:
 33655 000062E0 89D3                    	mov	BX,DX
 33656 000062E2 53                      	push	BX
 33657 000062E3 06                      	push	ES
 33658 000062E4 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 33659 000062E7 1F                      	pop	DS
 33660 000062E8 5B                      	pop	BX
 33661 000062E9 7207                    	jc	short Keep_Done		; failed on modification
 33662                                  
 33663 000062EB 8CD8                    	mov	AX,DS
 33664 000062ED 01D8                    	add	AX,BX
 33665                                  	;mov	[2],ax
 33666 000062EF A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33667                                  
 33668                                  Keep_Done:
 33669 000062F2 58                      	pop	AX
 33670 000062F3 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33671                                  
 33672                                  ;----------------------------------------------------------------------------
 33673                                  ;
 33674                                  ;----------------------------------------------------------------------------
 33675                                  
 33676                                  STAY_RESIDENT:
 33677                                  	;mov	ax,3100h
 33678 000062F5 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33679 000062F8 83C20F                  	add	DX,15
 33680 000062FB D1DA                    	rcr	DX,1
 33681 000062FD B103                    	mov	CL,3
 33682 000062FF D3EA                    	shr	DX,CL
 33683                                  
 33684 00006301 E943A0                  	jmp	COMMAND
 33685                                  
 33686                                  ;----------------------------------------------------------------------------
 33687                                  ;SUBTTL $EXIT - return to parent process
 33688                                  ;   Assembler usage:
 33689                                  ;	    MOV     AL, code
 33690                                  ;	    MOV     AH, Exit
 33691                                  ;	    INT     int_command
 33692                                  ;   Error return:
 33693                                  ;	    None.
 33694                                  ;
 33695                                  ;----------------------------------------------------------------------------
 33696                                  
 33697                                  	; 20/05/2019 - Retro DOS v4.0
 33698                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33699                                  
 33700                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33701                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33702                                  _$EXIT:
 33703                                  	; 04/08/2018 - Retro DOS v3.0
 33704                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33705 00006304 30E4                    	xor	AH,AH
 33706 00006306 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33707 0000630B 08E4                    	or	AH,AH
 33708                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33709 0000630D 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33710 00006313 7406                    	jz	short exit_inner
 33711                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33712 00006315 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33713                                  
 33714                                  	;entry	Exit_inner
 33715                                  exit_inner:
 33716 0000631B E8ACA1                  	call	Get_User_Stack		;PBUGBUG
 33717                                  
 33718 0000631E 36FF36[3003]            	push	word [ss:CurrentPDB]
 33719                                  	;pop	word [si+14h]
 33720 00006323 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33721 00006326 EB08                    	jmp	short abort_inner
 33722                                  
 33723                                  ;BREAK <$ABORT -- Terminate a process>
 33724                                  ;----------------------------------------------------------------------------
 33725                                  ; Inputs:
 33726                                  ;	user_CS:00 must point to valid program header block
 33727                                  ; Function:
 33728                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33729                                  ;	to the terminate address
 33730                                  ; Returns:
 33731                                  ;	TO THE TERMINATE ADDRESS
 33732                                  ;----------------------------------------------------------------------------
 33733                                  
 33734                                  _$ABORT:
 33735 00006328 30C0                    	xor	AL,AL
 33736                                  	;mov	byte [SS:EXIT_TYPE],0
 33737                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33738 0000632A 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33739                                  
 33740                                  	; abort_inner must have AL set as the exit code! The exit type
 33741                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33742                                  	; to be correct as the one that is terminating.
 33743                                  
 33744                                  abort_inner:
 33745 00006330 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33746 00006335 36A3[3403]              	mov	[SS:exit_code],AX
 33747 00006339 E88EA1                  	call	Get_User_Stack
 33748                                  
 33749                                  	;mov	ds,[si+14h]
 33750 0000633C 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33751 0000633F 31C0                    	xor	AX,AX
 33752 00006341 8EC0                    	mov	ES,AX
 33753                                  	;mov	si,10
 33754 00006343 BE0A00                  	mov	SI,SAVEXIT
 33755                                  	;mov	di,88h
 33756 00006346 BF8800                  	mov	DI,addr_int_terminate
 33757 00006349 A5                      	movsw
 33758 0000634A A5                      	movsw
 33759 0000634B A5                      	movsw
 33760 0000634C A5                      	movsw
 33761 0000634D A5                      	movsw
 33762 0000634E A5                      	movsw
 33763 0000634F E930F2                  	jmp	reset_environment
 33764                                  
 33765                                  ;----------------------------------------------------------------------------
 33766                                  ;
 33767                                  ; fixexepatch will point to this is DOS loads low. 
 33768                                  ;
 33769                                  ;----------------------------------------------------------------------------
 33770                                  ; MSDOS 6.0
 33771                                  
 33772                                  ; 29/04/2019 - Retro DOS v4.0
 33773                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 33774                                  
 33775                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33776                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 33777                                  
 33778                                  RetExePatch: ; proc near
 33779                                  	
 33780 00006352 C3                      	retn
 33781                                  
 33782                                  ;============================================================================
 33783                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 33784                                  ;============================================================================
 33785                                  ; 04/08/2018 - Retro DOS v3.0
 33786                                  ; 14/05/2019 - Retro DOS v4.0
 33787                                  
 33788                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 33789                                  
 33790                                  ;**
 33791                                  ;	Microsoft Confidential
 33792                                  ;	Copyright (C) Microsoft Corporation 1991
 33793                                  ;	All Rights Reserved.
 33794                                  ;
 33795                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 33796                                  ;	I/O specs are defined in DISPATCH.
 33797                                  ;
 33798                                  ;	$ALLOC
 33799                                  ;	$SETBLOCK
 33800                                  ;	$DEALLOC
 33801                                  ;	$AllocOper
 33802                                  ;	arena_free_process
 33803                                  ;	arena_next
 33804                                  ;	check_signature
 33805                                  ;	Coalesce
 33806                                  ;
 33807                                  ;	Modification history:
 33808                                  ;
 33809                                  ;	    Created: ARR 30 March 1983
 33810                                  ;
 33811                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 33812                                  ;		      M003 - added support for link/unlink UMBs from
 33813                                  ;			     DOS arena chain. 7/18/90
 33814                                  ;		      M009 - Added error returns invalid function and 
 33815                                  ;			     arena trashed in set link state call.
 33816                                  ;		      M010 - Release UMB arenas allocated to current PDB
 33817                                  ;			     if UMB_HEAD is initialized.
 33818                                  ;
 33819                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 33820                                  ;			     support. Please see under M009 in 
 33821                                  ;			     ..\inc\dossym.inc. 8/31/90.
 33822                                  ;
 33823                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 33824                                  ;			     sure that umb_head arena is valid and also make
 33825                                  ;			     sure that the previous arena is pointing to 
 33826                                  ;			     umb_head.
 33827                                  ;
 33828                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 33829                                  ;			     set allloc strategy.
 33830                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 33831                                  ;			     bx in AllocSetStrat.
 33832                                  ;
 33833                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 33834                                  ;			     a bit to indicate to dos dispatcher to turn
 33835                                  ;			     a20 off before iret. See M016.
 33836                                  ;
 33837                                  
 33838                                  ;	BREAK	<memory allocation utility routines>
 33839                                  
 33840                                  
 33841                                  ; 15/04/2018 - Retro DOS v2.0
 33842                                  ;----------------------------------------------------------------------------
 33843                                  ; xenix memory calls for MSDOS
 33844                                  ;
 33845                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 33846                                  ; arena_owner_system are all equal to zero and are contained in DI.
 33847                                  ;
 33848                                  ;INCLUDE DOSSEG.ASM
 33849                                  
 33850                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 33851                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 33852                                  
 33853                                  ;.xlist
 33854                                  ;.xcref
 33855                                  ;INCLUDE DOSSYM.ASM
 33856                                  ;INCLUDE DEVSYM.ASM
 33857                                  ;.cref
 33858                                  ;.list
 33859                                  
 33860                                  ;TITLE ALLOC.ASM - memory arena manager
 33861                                  ;NAME Alloc
 33862                                  
 33863                                  ;SUBTTL memory allocation utility routines
 33864                                  ;PAGE
 33865                                  ;
 33866                                  ; arena data
 33867                                  ;
 33868                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 33869                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 33870                                  ;       i_need  FirstArena,WORD         ; first free block found
 33871                                  ;       i_need  BestArena,WORD          ; best free block found
 33872                                  ;       i_need  LastArena,WORD          ; last free block found
 33873                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 33874                                  
 33875                                  ;**	Arena_Free_Process
 33876                                  ;----------------------------------------------------------------------------
 33877                                  ;	Free all arena blocks allocated to a prOcess
 33878                                  ;
 33879                                  ;	ENTRY	(bx) = PID of process
 33880                                  ;	EXIT	none
 33881                                  ;	USES	????? BUGBUG
 33882                                  ;----------------------------------------------------------------------------
 33883                                  
 33884                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33885                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 33886                                  
 33887                                  arena_free_process:
 33888                                  	; 14/05/2019 - Retro DOS v4.0
 33889                                  	; 04/08/2018 - Retro DOS v3.0
 33890 00006353 36A1[2400]                      MOV	AX,[SS:arena_head]
 33891                                  arena_free_process_start:
 33892 00006357 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 33893                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 33894 0000635A E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 33895                                  
 33896                                  arena_free_process_loop:
 33897                                          ;retc
 33898 0000635D 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 33899 0000635F 06                      	PUSH    ES
 33900 00006360 1F                              POP     DS
 33901                                  	;cmp	[1],bx 
 33902 00006361 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 33903 00006365 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 33904                                  	;mov	[1],di
 33905 00006367 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 33906                                  
 33907                                  arena_free_next:
 33908                                  	;cmp	byte [di],5Ah ;'Z'
 33909 0000636B 803D5A                          CMP     BYTE [DI],arena_signature_end
 33910                                                                          ; end of road, Jack?
 33911                                          ;retz				; never come back no more
 33912                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 33913                                  	; 14/05/2019
 33914                                  	; MSDOS 6.0
 33915 0000636E 7405                    	jz	short arena_chk_umbs
 33916                                          
 33917 00006370 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 33918 00006373 EBE8                            JMP     SHORT arena_free_process_loop
 33919                                  
 33920                                  	; MSDOS 6.0
 33921                                  arena_chk_umbs:				; M010 - Start
 33922                                  	; 20/05/2019
 33923 00006375 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 33924 00006379 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 33925 0000637C 741E                    	je	short ret_label		; N: we're done
 33926                                  	
 33927 0000637E 8CDF                    	mov	di,ds			; di = last arena
 33928 00006380 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 33929 00006382 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 33930 00006384 EBD1                    	jmp	short arena_free_process_start
 33931                                  					; M010 - End
 33932                                  ;AFP_RETN:
 33933                                  ;	RETN
 33934                                  
 33935                                  ;	BREAK	<Arena Helper Routines>
 33936                                  
 33937                                  ;**	Arena_Next - Find Next item in Arena
 33938                                  ;----------------------------------------------------------------------------
 33939                                  ;	ENTRY	DS - pointer to block head
 33940                                  ;		(di) = 0
 33941                                  ;	EXIT	AX,ES - pointers to next head
 33942                                  ;		'C' set iff arena damaged
 33943                                  ;----------------------------------------------------------------------------
 33944                                  
 33945                                  arena_next:
 33946 00006386 8CD8                            MOV     AX,DS                   ; AX <- current block
 33947 00006388 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 33948 0000638C 40                              INC     AX                      ; remember that header!
 33949                                  
 33950                                  ;       fall into check_signature and return
 33951                                  ;
 33952                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 33953                                  ;       RETN
 33954                                  
 33955                                  ;**	Check_Signature - Check Memory Block Signature
 33956                                  ;----------------------------------------------------------------------------
 33957                                  ;	ENTRY	(AX) = address of block header
 33958                                  ;		(di) = 0
 33959                                  ;	EXIT	 ES = AX
 33960                                  ;		'C' clear if signature good
 33961                                  ;		'C' set if signature bad
 33962                                  ;	USES	ES, Flags
 33963                                  ;----------------------------------------------------------------------------
 33964                                  
 33965                                  check_signature:        
 33966                                  
 33967 0000638D 8EC0                    	MOV     ES,AX                   ; ES <- AX
 33968                                  	;cmp	byte [es:di],4Dh ; 'M'
 33969 0000638F 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 33970                                                                          ; IF next signature = not_end THEN
 33971 00006393 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 33972                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 33973 00006395 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 33974                                                                          ; IF next signature = end then
 33975 00006399 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 33976 0000639B F9                              STC                             ; set error
 33977                                  ret_label: ; MSDOS 6.0
 33978                                  AFP_RETN:
 33979                                   	; Retro DOS v2.0 - 05/03/2018
 33980                                  check_signature_ok:
 33981                                  COALESCE_RETN:
 33982 0000639C C3                      	RETN
 33983                                  
 33984                                  ;**	Coalesce - Combine free blocks ahead with current block
 33985                                  ;----------------------------------------------------------------------------
 33986                                  ;	Coalesce adds the block following the argument to the argument block,
 33987                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 33988                                  ;	some callers (such as $setblock) use it to join a free block to it's
 33989                                  ;	preceeding allocated block.
 33990                                  ;
 33991                                  ;	ENTRY	(ds) = pointer to the head of a free block
 33992                                  ;		(di) = 0
 33993                                  ;	EXIT	'C' clear if OK
 33994                                  ;		  (ds) unchanged, this block updated
 33995                                  ;		  (ax) = address of next block, IFF not at end
 33996                                  ;		'C' set if arena trashed
 33997                                  ;	USES	(cx)
 33998                                  ;----------------------------------------------------------------------------
 33999                                          
 34000                                  Coalesce:
 34001                                  	;cmp	byte [di],5Ah ; 'Z'
 34002 0000639D 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34003                                                                          ; IF current signature = END THEN
 34004                                          ;retz				;   GOTO ok
 34005 000063A0 74FA                            jz	short COALESCE_RETN
 34006 000063A2 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34007                                          ;retc				; IF no error THEN GOTO check
 34008 000063A5 72F5                    	jc	short COALESCE_RETN
 34009                                  
 34010                                  coalesce_check:
 34011                                  	;cmp	[es:1],di
 34012 000063A7 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34013                                          ;retnz				; IF next block isnt free THEN return
 34014 000063AC 75EE                            JNZ	SHORT COALESCE_RETN
 34015                                  	;mov	cx,[ES:3]
 34016 000063AE 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34017 000063B3 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34018                                          ;ADD	[3],CX
 34019 000063B4 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34020 000063B8 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34021 000063BB 880D                            MOV     [DI],CL
 34022 000063BD EBDE                            JMP     SHORT Coalesce		; try again
 34023                                  
 34024                                  ; 04/08/2018 - Retro DOS v3.0
 34025                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34026                                  
 34027                                  ;	BREAK  <$Alloc - allocate space in memory>
 34028                                  
 34029                                  ; MSDOS 6.0
 34030                                  ;----------------------------------------------------------------------------
 34031                                  ;**	$Alloc - Allocate Memory Space
 34032                                  ;
 34033                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34034                                  ;	Alloc returns a pointer to a free block of memory that
 34035                                  ;	has the requested size in paragraphs.
 34036                                  ;
 34037                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34038                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34039                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34040                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34041                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34042                                  ;
 34043                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34044                                  ;	starts from arena_head.
 34045                                  ;
 34046                                  ;	Assembler usage:
 34047                                  ;           MOV     BX,size
 34048                                  ;           MOV     AH,Alloc
 34049                                  ;           INT     21h
 34050                                  ;
 34051                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34052                                  ;	so that we start searching the arena at it's first non-trivial free
 34053                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34054                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34055                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34056                                  ;	verify that this is true; if so, this can stay as is
 34057                                  ;
 34058                                  ;	ENTRY	(bx) = requested size, in bytes
 34059                                  ;		(DS) = (ES) = DOSGROUP
 34060                                  ;	EXIT	'C' clear if memory allocated
 34061                                  ;		  (ax:0) = address of requested memory
 34062                                  ;		'C' set if request failed
 34063                                  ;		  (AX) = error_not_enough_memory
 34064                                  ;		    (bx) = max size we could have allocated
 34065                                  ;		  (ax) = error_arena_trashed
 34066                                  ;	USES	All
 34067                                  ;----------------------------------------------------------------------------
 34068                                  
 34069                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34070                                  ;----------------------------------------------------------------------------
 34071                                  ;SUBTTL $Alloc - allocate space in memory
 34072                                  ;
 34073                                  ;   Assembler usage:
 34074                                  ;           MOV     BX,size
 34075                                  ;           MOV     AH,Alloc
 34076                                  ;           INT     21h
 34077                                  ;         AX:0 is pointer to allocated memory
 34078                                  ;         BX is max size if not enough memory
 34079                                  ;
 34080                                  ;   Description:
 34081                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34082                                  ;       memory that has the requested  size  in  paragraphs.
 34083                                  ;
 34084                                  ;   Error return:
 34085                                  ;           AX = error_not_enough_memory
 34086                                  ;              = error_arena_trashed
 34087                                  ;----------------------------------------------------------------------------
 34088                                  
 34089                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34090                                  
 34091                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34092                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34093                                  
 34094                                  _$ALLOC:
 34095                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34096                                  	; 14/05/2019 - Retro DOS v4.0
 34097                                  	; 04/08/2018 - Retro DOS v3.0
 34098                                  	;EnterCrit critMem
 34099 000063BF E8D1AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34100                                  
 34101                                  ; 17/12/2022
 34102                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34103                                  ;%if 0
 34104                                  	; 14/05/2019
 34105 000063C2 16                      	push	ss
 34106 000063C3 1F                      	pop	ds
 34107                                  
 34108                                  	; MSDOS 6.0
 34109                                  	;mov	ax,[ss:arena_head]
 34110                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34111                                  
 34112 000063C4 A1[2400]                	mov	ax,[arena_head]
 34113 000063C7 A3[8E00]                	mov	[START_ARENA],ax			
 34114                                  	
 34115                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34116 000063CA F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34117                                  					; Q: should we start scanning from 
 34118                                  					;    UMB's
 34119 000063CF 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34120                                  		
 34121                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34122                                  	;cmp	word [UMB_HEAD],-1
 34123                                  	;je	short norm_alloc	; N: scan from arena_head
 34124                                  
 34125                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34126 000063D1 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34127 000063D6 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34128                                  	
 34129                                  	;mov	ax,[ss:UMB_HEAD]
 34130                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34131 000063D8 A1[8C00]                	mov	ax,[UMB_HEAD]
 34132 000063DB A3[8E00]                	mov	[START_ARENA],ax
 34133                                  					; M000 - end
 34134                                  norm_alloc:
 34135 000063DE 31C0                            XOR     AX,AX
 34136 000063E0 89C7                            MOV     DI,AX
 34137                                  	; 15/03/2018
 34138                                          ;MOV	[SS:FirstArena],AX	; init the options
 34139                                          ;MOV	[SS:BestArena],AX
 34140                                          ;MOV	[SS:LastArena],AX
 34141                                  	; 14/05/2019
 34142 000063E2 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34143 000063E5 A3[4203]                        MOV	[BestArena],AX
 34144 000063E8 A3[4403]                        MOV	[LastArena],AX
 34145 000063EB 50                              PUSH    AX                      ; alloc_max <- 0
 34146                                  	; 04/08/2018
 34147                                  start_scan:
 34148                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34149                                  	;MOV	AX,[arena_head]
 34150                                  
 34151                                  	; 14/05/2019	
 34152                                  	; MSDOS 6.0
 34153                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34154 000063EC A1[8E00]                	mov	ax,[START_ARENA]
 34155                                  
 34156                                  	; 27/09/2023 (BugFix) (*) 
 34157                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34158                                  start_scan_x:
 34159                                  
 34160 000063EF E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34161 000063F2 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34162                                  
 34163                                  ;%endif
 34164                                  
 34165                                  ; 17/12/2022
 34166                                  %if 0
 34167                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34168                                  
 34169                                  	; MSDOS 6.0
 34170                                  	mov	ax,[ss:arena_head]
 34171                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34172                                  
 34173                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34174                                  					; Q: should we start scanning from 
 34175                                  					;    UMB's
 34176                                  	jz	short norm_alloc	; N: scan from arena_head
 34177                                  		
 34178                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34179                                  	;je	short norm_alloc	; N: scan from arena_head
 34180                                  
 34181                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34182                                  	jz	short norm_alloc	; N: scan from arena_head
 34183                                  	
 34184                                  	mov	ax,[ss:UMB_HEAD]
 34185                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34186                                  					; M000 - end
 34187                                  norm_alloc:
 34188                                          XOR     AX,AX
 34189                                          MOV     DI,AX
 34190                                  	; 15/03/2018
 34191                                  	MOV	[SS:FirstArena],AX	; init the options
 34192                                  	MOV	[SS:BestArena],AX
 34193                                  	MOV	[SS:LastArena],AX
 34194                                          PUSH    AX                      ; alloc_max <- 0
 34195                                  	; 04/08/2018
 34196                                  start_scan:
 34197                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34198                                  	; 14/05/2019	
 34199                                  	; MSDOS 6.0
 34200                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34201                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34202                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34203                                  %endif
 34204                                  
 34205                                  alloc_scan:
 34206 000063F4 06                              PUSH    ES
 34207 000063F5 1F                              POP     DS                      ; DS <- ES
 34208 000063F6 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34209 000063FA 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34210                                  
 34211                                  alloc_next:
 34212                                  	; MSDOS 6.0			; M000 - start 
 34213 000063FC 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34214 00006402 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34215                                  	
 34216 00006404 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34217                                  					; Q: is alloc strategy high_first
 34218 0000640A 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34219 0000640C 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34220 00006410 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34221                                  					;    arena_head
 34222 00006415 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34223 00006417 8CD8                    	mov	ax,ds			; ax = current block
 34224 00006419 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34225 0000641E EB03                    	jmp	short alloc_chk_end
 34226                                  
 34227                                  norm_strat:
 34228                                  	;cmp	byte [di],5Ah ; 'Z'
 34229 00006420 803D5A                          CMP     BYTE [DI],arena_signature_end
 34230                                                                          ; IF current block is last THEN
 34231                                  alloc_chk_end:
 34232 00006423 740E                            JZ      SHORT alloc_end		;   GOTO end
 34233 00006425 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34234 00006428 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34235                                  
 34236                                  alloc_err:
 34237 0000642A 58                              POP     AX
 34238                                  
 34239                                  alloc_trashed:
 34240                                  	;LeaveCrit critMem
 34241 0000642B E880AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34242                                          ;error	error_arena_trashed
 34243                                  	;mov	al,7
 34244 0000642E B007                    	MOV	AL,error_arena_trashed
 34245                                  alloc_errj:
 34246 00006430 E95AA2                  	JMP	SYS_RET_ERR
 34247                                  
 34248                                  alloc_end:
 34249                                  	; 18/05/2019
 34250 00006433 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34251 00006439 7403                    	jz	short alloc_chk 
 34252 0000643B E98400                  	jmp	alloc_do_split
 34253                                  
 34254                                  alloc_chk:
 34255                                  	; MSDOS 6.0
 34256 0000643E 36A1[2400]              	mov	ax,[ss:arena_head]
 34257 00006442 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34258 00006447 740E                    	je	short alloc_fail	; Y: not enough memory
 34259                                  					; N:
 34260                                  					; Q: is the alloc strat HIGH_ONLY
 34261 00006449 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34262 0000644F 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34263                                  	
 34264 00006451 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34265                                  	; 27/09/2023 (*)
 34266 00006455 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34267                                  	;jmp	short start_scan
 34268                                  					; M000 - end
 34269                                  
 34270                                  alloc_fail:
 34271                                          ;invoke Get_User_Stack
 34272 00006457 E870A0                          CALL	Get_User_Stack
 34273 0000645A 5B                      	POP     BX
 34274                                          ;MOV	[SI].user_BX,BX
 34275                                  	;MOV	[SI+2],BX
 34276 0000645B 895C02                  	mov	[SI+user_env.user_BX],bx
 34277                                  	;LeaveCrit critMem
 34278 0000645E E84DAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34279                                  	;error	error_not_enough_memory
 34280                                  	;mov	al,8
 34281 00006461 B008                    	MOV	AL,error_not_enough_memory
 34282                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34283 00006463 EBCB                    	jmp	short alloc_errj
 34284                                  	;JMP	SYS_RET_ERR
 34285                                  
 34286                                  alloc_free:
 34287 00006465 E835FF                          CALL    Coalesce		; add following free block to current
 34288 00006468 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34289 0000646A 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34290 0000646E 5A                              POP     DX                      ; check for max found size
 34291 0000646F 39D1                            CMP     CX,DX
 34292 00006471 7602                            JNA     SHORT alloc_test
 34293 00006473 89CA                            MOV     DX,CX
 34294                                  
 34295                                  alloc_test:
 34296 00006475 52                              PUSH    DX
 34297 00006476 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34298 00006478 7782                    	JA      SHORT alloc_next	;   GOTO next
 34299                                  
 34300                                  	; 15/03/2018
 34301 0000647A 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34302 00006480 7505                    	JNZ	SHORT alloc_best
 34303 00006482 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34304                                  alloc_best:
 34305 00006487 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34306 0000648D 740E                            JZ      SHORT alloc_make_best	; initial best
 34307 0000648F 06                              PUSH	ES
 34308 00006490 368E06[4203]                    MOV     ES,[SS:BestArena]
 34309 00006495 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34310 0000649A 07                              POP	ES
 34311 0000649B 7605                            JBE     SHORT alloc_last
 34312                                  alloc_make_best:
 34313 0000649D 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34314                                  alloc_last:
 34315 000064A2 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34316 000064A7 E952FF                          JMP     alloc_next
 34317                                  ;
 34318                                  ; split the block high
 34319                                  ;
 34320                                  alloc_do_split_high:
 34321 000064AA 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34322 000064AF 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34323 000064B3 29D9                            SUB     CX,BX
 34324 000064B5 8CDA                            MOV     DX,DS
 34325 000064B7 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34326 000064B9 01CA                            ADD     DX,CX                   ; point to next block
 34327 000064BB 8EC2                            MOV     ES,DX                   ; no decrement!
 34328 000064BD 49                              DEC     CX
 34329 000064BE 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34330 000064C0 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34331                                  ;
 34332                                  ; we have scanned memory and have found all appropriate blocks
 34333                                  ; check for the type of allocation desired; first and best are identical
 34334                                  ; last must be split high
 34335                                  ;
 34336                                  alloc_do_split:
 34337                                  
 34338                                  ; 17/12/2022
 34339                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34340                                  ;%if 0
 34341                                  	; 14/05/2019
 34342                                  	; MSDOS 6.0			; M000 - start
 34343                                  	;xor	cx,cx
 34344 000064C2 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34345                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34346 000064C7 80E13F                  	and	cl,3Fh
 34347                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34348 000064CA 80F901                  	cmp	cl,BEST_FIT
 34349 000064CD 77DB                    	ja	short alloc_do_split_high
 34350                                  ;%endif
 34351                                  
 34352                                  	; 17/12/2022
 34353                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34354                                  	; MSDOS 6.0 & MSDOS 5.0
 34355                                  	;xor	cx,cx
 34356                                  	;mov	cl,[ss:AllocMethod]
 34357                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34358                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34359                                  	;ja	short alloc_do_split_high
 34360                                  
 34361                                  	; 15/03/2018
 34362                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34363                                  	; 04/08/2018
 34364                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34365                                          ;JA	SHORT alloc_do_split_high
 34366                                          
 34367 000064CF 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34368 000064D4 7205                    	JB      SHORT alloc_get_size
 34369 000064D6 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34370                                  
 34371                                  alloc_get_size:
 34372 000064DB 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34373 000064DF 29D9                            SUB     CX,BX                   ; get room left over
 34374 000064E1 8CD8                            MOV     AX,DS
 34375 000064E3 89C2                            MOV     DX,AX                   ; save for owner setting
 34376 000064E5 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34377 000064E7 01D8                            ADD     AX,BX
 34378 000064E9 40                              INC     AX                      ; remember the header
 34379 000064EA 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34380 000064EC 49                              DEC     CX                      ; CX <- size of split block
 34381                                  alloc_set_sizes:
 34382 000064ED 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34383 000064F1 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34384                                  	;mov	bl,4Dh ; 'M'
 34385 000064F6 B34D                            MOV     BL,arena_signature_normal
 34386 000064F8 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34387 000064FA 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34388 000064FD 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34389                                  
 34390                                  alloc_set_owner:
 34391 00006502 8EDA                            MOV     DS,DX
 34392 00006504 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34393 00006508 A30100                          MOV     [ARENA.OWNER],AX
 34394 0000650B 8CD8                            MOV     AX,DS
 34395 0000650D 40                              INC     AX
 34396 0000650E 5B                              POP     BX
 34397                                  	;LeaveCrit critMem
 34398 0000650F E89CAE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34399                                  	
 34400                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34401                                  alloc_ok:
 34402                                          ;transfer SYS_RET_OK
 34403 00006512 E96FA1                  	JMP	SYS_RET_OK
 34404                                  
 34405                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34406                                  
 34407                                  ; MSDOS 6.0
 34408                                  ;----------------------------------------------------------------------------
 34409                                  ;**	$SETBLOCK - Change size of an Alocated Block
 34410                                  ;
 34411                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34412                                  ;	any following free space onto this block; then we try to trim the
 34413                                  ;	block down to the size requested.
 34414                                  ;
 34415                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34416                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34417                                  ;	Thus the maximum-size-possible value that we return has already
 34418                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34419                                  ;
 34420                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34421                                  ;		finish it's work.  FOr this reason we build the allocsf
 34422                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34423                                  ;		code.
 34424                                  ;
 34425                                  ;	ENTRY	(es) = segment of old block
 34426                                  ;		(bx) = newsize
 34427                                  ;		(ah) = SETBLOCK
 34428                                  ;
 34429                                  ;	EXIT	'C' clear if OK
 34430                                  ;		'C' set if error
 34431                                  ;		  (ax) = error_invalid_block
 34432                                  ;		       = error_arena_trashed
 34433                                  ;		       = error_not_enough_memory
 34434                                  ;		       = error_invalid_function
 34435                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34436                                  ;	USES	???? BUGBUG
 34437                                  ;----------------------------------------------------------------------------
 34438                                  
 34439                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34440                                  ;----------------------------------------------------------------------------
 34441                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34442                                  ;
 34443                                  ;   Assembler usage:
 34444                                  ;           MOV     ES,block
 34445                                  ;           MOV     BX,newsize
 34446                                  ;           MOV     AH,setblock
 34447                                  ;           INT     21h
 34448                                  ;         if setblock fails for growing, BX will have the maximum
 34449                                  ;         size possible
 34450                                  ;   Error return:
 34451                                  ;           AX = error_invalid_block
 34452                                  ;              = error_arena_trashed
 34453                                  ;              = error_not_enough_memory
 34454                                  ;              = error_invalid_function
 34455                                  ;----------------------------------------------------------------------------
 34456                                  
 34457                                  _$SETBLOCK:        
 34458                                  	; 04/08/2018 - Retro DOS v3.0
 34459                                  	;EnterCrit   critMem
 34460 00006515 E87BAE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34461                                  
 34462 00006518 BF0000                  	MOV     DI,ARENA.SIGNATURE
 34463 0000651B 8CC0                            MOV     AX,ES
 34464 0000651D 48                              DEC     AX
 34465 0000651E E86CFE                          CALL    check_signature
 34466 00006521 7303                            JNC     SHORT setblock_grab
 34467                                  
 34468                                  setblock_bad:
 34469 00006523 E905FF                          JMP     alloc_trashed
 34470                                  
 34471                                  setblock_grab:
 34472 00006526 8ED8                            MOV     DS,AX
 34473 00006528 E872FE                          CALL    Coalesce
 34474 0000652B 72F6                            JC      SHORT setblock_bad
 34475 0000652D 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34476 00006531 51                              PUSH    CX
 34477 00006532 39CB                            CMP     BX,CX
 34478 00006534 76A5                            JBE     SHORT alloc_get_size
 34479 00006536 E91EFF                          JMP     alloc_fail
 34480                                  
 34481                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34482                                  
 34483                                  ; MSDOS 6.0
 34484                                  ;----------------------------------------------------------------------------
 34485                                  ;**	$DEALLOC - Free Heap Memory
 34486                                  ;
 34487                                  ;	ENTRY	(es) = address of item
 34488                                  ;
 34489                                  ;	EXIT	'C' clear of OK
 34490                                  ;		'C' set if error
 34491                                  ;		  (AX) = error_invalid_block
 34492                                  ;	USES	???? BUGBUG
 34493                                  
 34494                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34495                                  ;----------------------------------------------------------------------------
 34496                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34497                                  ;
 34498                                  ;   Assembler usage:
 34499                                  ;           MOV     ES,block
 34500                                  ;           MOV     AH,dealloc
 34501                                  ;           INT     21h
 34502                                  ;
 34503                                  ;   Error return:
 34504                                  ;           AX = error_invalid_block
 34505                                  ;              = error_arena_trashed
 34506                                  ;---------------------------------------------------------------------------- 
 34507                                  
 34508                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34509                                  _$DEALLOC:
 34510                                  	; 14/05/2019 - Retro DOS v4.0    
 34511                                  	; 04/08/2018 - Retro DOS v3.0
 34512                                  	;EnterCrit   critMem
 34513 00006539 E857AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34514                                  
 34515                                  	; MSDOS 6.0			; M016, M068 - Start
 34516 0000653C 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34517                                  					; Q: was the previous call an int 21
 34518                                  					;    exec call
 34519 00006542 740E                    	jz	short deallocate	; N: continue
 34520 00006544 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34521 0000654A 7506                    	jne	short deallocate	; N: continue
 34522 0000654C 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34523                                  deallocate:				; M016, M068 - End
 34524 00006552 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34525 00006555 8CC0                            MOV     AX,ES
 34526 00006557 48                              DEC     AX
 34527 00006558 E832FE                          CALL    check_signature
 34528 0000655B 720A                            JC      SHORT dealloc_err
 34529 0000655D 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34530                                  	;LeaveCrit critMem
 34531 00006562 E849AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34532                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34533                                          ;transfer SYS_RET_OK
 34534                                  dealloc_ok:
 34535 00006565 EBAB                    	jmp	short alloc_ok
 34536                                  	;JMP	SYS_RET_OK
 34537                                  
 34538                                  dealloc_err:
 34539                                  	;LeaveCrit critMem
 34540 00006567 E844AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34541                                          ;error	error_invalid_block
 34542                                  	;mov	al,9
 34543 0000656A B009                    	MOV	AL,error_invalid_block
 34544                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34545                                  dealloc_errj:
 34546                                  AllocOperErrj:	; 17/12/2022
 34547 0000656C E91EA1                  	JMP	SYS_RET_ERR
 34548                                  
 34549                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34550                                  
 34551                                  ; MSDOS 6.0
 34552                                  ;----------------------------------------------------------------------------
 34553                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34554                                  ;
 34555                                  ;	Assembler usage:
 34556                                  ;           MOV     AH,AllocOper
 34557                                  ;           MOV     BX,method
 34558                                  ;           MOV     AL,func
 34559                                  ;           INT     21h
 34560                                  ;
 34561                                  ;	ENTRY	
 34562                                  ;		(al) = 0
 34563                                  ;		  Get allocation Strategy in (ax)
 34564                                  ;
 34565                                  ;		(al) = 1, (bx) = method = zw0000xy
 34566                                  ;		  Set allocation strategy.
 34567                                  ;		   w  = 1  => HIGH_ONLY
 34568                                  ;		   z  = 1  => HIGH_FIRST
 34569                                  ;		   xy = 00 => FIRST_FIT
 34570                                  ;		      = 01 => BEST_FIT
 34571                                  ;		      = 10 => LAST_FIT
 34572                                  ;
 34573                                  ;		(al) = 2
 34574                                  ;		  Get UMB link state in (al)
 34575                                  ;
 34576                                  ;		(al) = 3
 34577                                  ;		  Set UMB link state
 34578                                  ;		   (bx) = 0 => Unlink UMBs
 34579                                  ;		   (bx) = 1 => Link UMBs
 34580                                  ;
 34581                                  ;
 34582                                  ;	EXIT	'C' clear if OK
 34583                                  ;
 34584                                  ;		 if (al) = 0
 34585                                  ;		  (ax) = existing method
 34586                                  ;		 if (al) = 1
 34587                                  ;		  Sets allocation strategy
 34588                                  ;		 if (al) = 2
 34589                                  ;		  (al) = 0 => UMBs not linked
 34590                                  ;		  (al) = 1 => UMBs linked in
 34591                                  ;		 if (al) = 3
 34592                                  ;		  Links/Unlinks the UMBs into DOS chain
 34593                                  ;
 34594                                  ;		'C' set if error
 34595                                  ;		  AX = error_invalid_function
 34596                                  ;
 34597                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34598                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34599                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34600                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34601                                  ;		    arena' if an arena sig is damaged.
 34602                                  ;----------------------------------------------------------------------------
 34603                                  
 34604                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34605                                  ;----------------------------------------------------------------------------
 34606                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34607                                  ;
 34608                                  ;   Assembler usage:
 34609                                  ;           MOV     AH,AllocOper
 34610                                  ;           MOV     BX,method
 34611                                  ;           MOV     AL,func
 34612                                  ;           INT     21h
 34613                                  ;
 34614                                  ;   Error return:
 34615                                  ;           AX = error_invalid_function
 34616                                  ;----------------------------------------------------------------------------
 34617                                  
 34618                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34619                                  _$ALLOCOPER:
 34620                                  	; 14/05/2019 - Retro DOS v4.0
 34621                                  	; MSDOS 6.0
 34622 0000656F 08C0                    	or	al,al ; 0
 34623 00006571 741E                    	jz	short AllocGetStrat
 34624                                  	; 17/12/2022
 34625                                  	;cmp	al,1
 34626                                  	;jz	short AllocSetStrat
 34627                                  
 34628                                  	; 01/12/2022
 34629                                  	;cmp	al, 2
 34630                                  	;jb	short AllocSetStrat
 34631                                  	;ja	short AllocSetLink
 34632                                  	;;jmp	short AllocGetLink
 34633                                  ;AllocGetLink:
 34634                                  	; MSDOS 6.0
 34635                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34636                                  	;and 	al,LINKSTATE		
 34637                                  	;;transfer SYS_RET_OK
 34638                                  	;jmp	SYS_RET_OK
 34639                                  
 34640 00006573 3C02                    	cmp	al,2
 34641                                  	; 17/12/2022
 34642 00006575 7223                    	jb	short AllocSetStrat ; al = 1
 34643 00006577 7432                    	je	short AllocGetLink
 34644                                  
 34645                                  	;cmp	al,2
 34646                                  	;jz	short AllocGetLink
 34647 00006579 3C03                    	cmp	al,3
 34648 0000657B 7436                    	jz	short AllocSetLink
 34649                                  
 34650                                  	; 15/04/2018
 34651                                  	;CMP	AL,1
 34652                                          ;JB	SHORT AllocOperGet
 34653                                          ;JZ	SHORT AllocOperSet
 34654                                  
 34655                                  AllocOperError:
 34656                                  	; 04/08/2018 - Retro DOS v3.0
 34657                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 34658                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34659 0000657D 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34660                                  	;error	error_invalid_function
 34661                                  	;mov	al,1
 34662 00006583 B001                    	MOV	AL,error_invalid_function
 34663                                  	; 17/12/2022
 34664                                  ;AllocOperErrj:
 34665                                  	;JMP	SYS_RET_ERR
 34666                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34667                                  	;jmp	short dealloc_errj
 34668                                  	; 17/12/2022
 34669 00006585 EBE5                    	jmp	short AllocOperErrj
 34670                                  
 34671                                  AllocArenaError:
 34672                                  	; MSDOS 6.0
 34673 00006587 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34674                                  					; M009: Extended Error Locus
 34675                                  	;error	error_arena_trashed	; M009:
 34676                                  	;mov	al,7
 34677 0000658D B007                    	MOV	AL,error_arena_trashed
 34678                                  	;JMP	SYS_RET_ERR
 34679 0000658F EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34680                                  
 34681                                  AllocGetStrat: 
 34682                                  	; MSDOS 6.0
 34683                                  AllocOperGet:
 34684 00006591 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34685 00006595 30E4                            XOR     AH,AH
 34686                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34687                                  	;transfer SYS_RET_OK
 34688                                  AllocOperOk:
 34689                                  	; 17/12/2022
 34690                                  	;jmp	short dealloc_ok
 34691 00006597 E9EAA0                  	JMP	SYS_RET_OK
 34692                                  
 34693                                  AllocSetStrat: 
 34694                                  	; 14/05/2019
 34695                                  	; MSDOS 6.0
 34696 0000659A 53                      	push	bx			; M000 - start
 34697                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34698                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34699                                  	; 17/12/2022
 34700 0000659B 80E33F                  	and	bl,3Fh
 34701 0000659E 83FB02                  	cmp	bx,2			; BX must be 0-2
 34702                                  	;cmp	bl,2
 34703 000065A1 5B                      	pop	bx			; M000 - end
 34704 000065A2 77D9                    	ja	short AllocOperError
 34705                                  
 34706                                  AllocOperSet:
 34707 000065A4 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34708                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34709                                  	;transfer SYS_RET_OK
 34710                                  AllocOperOkj:
 34711 000065A9 EBEC                    	jmp	short AllocOperOk
 34712                                  	;JMP	SYS_RET_OK
 34713                                  
 34714                                  AllocGetLink:
 34715                                  	; MSDOS 6.0
 34716 000065AB 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34717                                  	;and	al,1
 34718 000065AF 2401                    	and 	al,LINKSTATE		
 34719                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34720                                  	;transfer SYS_RET_OK
 34721                                  AllocOperOkj2:
 34722                                  	; 17/12/2022
 34723 000065B1 EBE4                    	jmp	short AllocOperOk
 34724                                  	;jmp	short AllocOperOkj
 34725                                  	;;JMP	SYS_RET_OK
 34726                                  
 34727                                  AllocSetLink:
 34728                                  	; MSDOS 6.0			; M009 - start
 34729 000065B3 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34730 000065B8 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34731 000065BB 74C0                    	je	short AllocOperError	; N: error
 34732                                  					; Y: continue
 34733                                  					; M009 - end
 34734 000065BD 83FB01                  	cmp	bx,1			
 34735 000065C0 7204                    	jb	short UnlinkUmbs
 34736 000065C2 741C                    	jz	short LinkUmbs
 34737                                  	
 34738 000065C4 EBB7                    	jmp	short AllocOperError
 34739                                  	
 34740                                  UnlinkUmbs:
 34741                                  	;test	byte [ss:UMBFLAG],1
 34742 000065C6 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34743 000065CC 7410                    	jz	short unlinked		; Y: return 
 34744                                  	
 34745 000065CE E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34746 000065D1 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34747                                  	
 34748                                  					; make it last
 34749 000065D3 C60600005A              	mov	byte [0],arena_signature_end
 34750                                  	
 34751                                  	;and	byte [ss:UMBFLAG],0FEh
 34752 000065D8 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34753                                  	
 34754                                  unlinked:
 34755                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34756                                  	;transfer SYS_RET_OK
 34757                                  	; 17/12/2022
 34758 000065DE EBB7                    	jmp	short AllocOperOk
 34759                                  	;jmp	short AllocOperOkj2
 34760                                  	;;JMP	SYS_RET_OK
 34761                                  
 34762                                  LinkUmbs:
 34763 000065E0 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 34764 000065E6 7510                    	jnz	short linked		; Y: return
 34765                                  	
 34766 000065E8 E80F00                  	call	GetLastArena		; get arena before umb_head
 34767 000065EB 729A                    	jc	short AllocArenaError	; M009: arena trashed
 34768                                  	
 34769                                  					; make it normal. M061: ds points to
 34770                                  					; arena before umb_head
 34771 000065ED C60600004D              	mov	byte [0],arena_signature_normal
 34772                                  	
 34773 000065F2 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 34774                                  linked:
 34775                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34776                                  	;transfer SYS_RET_OK
 34777                                  	; 17/12/2022
 34778 000065F8 EB9D                    	jmp	short AllocOperOk
 34779                                  	;jmp	short unlinked
 34780                                  	;;JMP	SYS_RET_OK
 34781                                  
 34782                                  ; MSDOS 6.0
 34783                                  ;--------------------------------------------------------------------------
 34784                                  ; Procedure Name : GetLastArena		-  M003
 34785                                  ;
 34786                                  ; Inputs	 : cx = umb_head
 34787                                  ;
 34788                                  ;
 34789                                  ; Outputs	 : If UMBs are linked
 34790                                  ;			ES = umb_head
 34791                                  ;			DS = arena before umb_head
 34792                                  ;		   else
 34793                                  ;			DS = last arena
 34794                                  ;			ES = next arena. will be umb_head if NC.
 34795                                  ;
 34796                                  ;		   CY if error
 34797                                  ;
 34798                                  ; Uses		 : DS, ES, DI, BX
 34799                                  ;--------------------------------------------------------------------------
 34800                                  
 34801                                  ; 14/05/2019 - Retro DOS v4.0
 34802                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 34803                                  
 34804                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34805                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 34806                                  	
 34807                                  GetLastArena:
 34808 000065FA 50                      	push	ax			; save ax
 34809                                  
 34810 000065FB 36A1[2400]              	mov	ax,[ss:arena_head]
 34811 000065FF 8EC0                    	mov	es,ax			; es = arena_head
 34812 00006601 31FF                    	xor	di,di
 34813                                  
 34814 00006603 26803D5A                	cmp     byte [es:di],arena_signature_end
 34815                                  					; Q: is this the last arena
 34816 00006607 7419                    	je	short GLA_done		; Y: return last arena in ES		
 34817                                  					
 34818                                  GLA_next:
 34819 00006609 8ED8                    	mov	ds,ax
 34820 0000660B E878FD                  	call	arena_next		; ax, es -> next arena
 34821                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34822                                  	;jc	short GLA_err
 34823                                  	; 17/12/2022
 34824 0000660E 7228                    	jc	short GLA_err2
 34825                                  
 34826 00006610 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34827 00006616 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 34828                                  					;    umb_head
 34829                                  					; N: terminating condition is 05Ah
 34830                                  
 34831 00006618 26803D5A                	cmp     byte [es:di],arena_signature_end
 34832                                  					; Q: is this the last arena
 34833 0000661C EB02                    	jmp	short GLA_@f
 34834                                  GLA_chkumb:
 34835 0000661E 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34836                                  GLA_@f:
 34837 00006620 75E7                    	jne	short GLA_next		; N: get next arena
 34838                                  
 34839                                  GLA_done:
 34840                                  					; M061 - Start
 34841 00006622 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34842 00006628 750B                    	jnz	short GLA_ret		; Y: we're done
 34843                                  					; N: let us confirm that the next 
 34844                                  					;    arena is umb_head
 34845 0000662A 8ED8                    	mov	ds,ax
 34846 0000662C E857FD                  	call	arena_next		; ax, es -> next arena
 34847                                  	;jc	short GLA_err
 34848 0000662F 7207                    	jc	short GLA_err2
 34849 00006631 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34850 00006633 7502                    	jne	short GLA_err		; N: error
 34851                                  					; M061 - End
 34852                                  GLA_ret:
 34853                                  	; 17/12/2022				
 34854                                  	;clc
 34855                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34856                                  	;clc
 34857 00006635 58                      	pop	ax			; M061
 34858 00006636 C3                      	retn				; M061
 34859                                  
 34860                                  GLA_err:
 34861 00006637 F9                      	stc				; M061
 34862                                  GLA_err2:
 34863 00006638 58                      	pop	ax
 34864 00006639 C3                      	retn
 34865                                  
 34866                                  ;============================================================================
 34867                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 34868                                  ;============================================================================
 34869                                  ; 04/08/2018 - Retro DOS v3.0
 34870                                  
 34871                                  ;	TITLE SRVCALL - Server DOS call
 34872                                  ;	NAME  SRVCALL
 34873                                  
 34874                                  ;**	SRVCALL.ASM - Server DOS call functions
 34875                                  ;
 34876                                  ;
 34877                                  ;	$ServerCall
 34878                                  ;
 34879                                  ;	Modification history:
 34880                                  ;
 34881                                  ;	    Created: ARR 08 August 1983
 34882                                  
 34883                                  ;AsmVars <Installed>
 34884                                  
 34885                                  ;include dpl.asm
 34886                                  
 34887                                  ;Installed = TRUE
 34888                                  
 34889                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 34890                                  ; ---------------------------------------------------------------------------
 34891                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34892                                  
 34893                                  ;BREAK <ServerCall -- Server DOS call>
 34894                                  
 34895                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 34896                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 34897                                  
 34898                                  ;hkn; TABLE	SEGMENT
 34899                                  ;Public SRVC001S,SRVC001E
 34900                                  ;SRVC001S label byte
 34901                                  
 34902                                  SRVC001S:
 34903                                  
 34904 0000663A [3E66]                  SERVERTAB:	dw	SERVER_DISP
 34905 0000663C [9066]                  SERVERLEAVE:	dw	SERVERRETURN
 34906 0000663E 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 34907 0000663F [F866]                  		dw	SRV_CALL	; 0
 34908 00006641 [9166]                  		dw	COMMIT_ALL	; 1
 34909 00006643 [C766]                  		dw	CLOSE_NAME	; 2
 34910 00006645 [D266]                  		dw	CLOSE_UID	; 3
 34911 00006647 [D966]                  		dw	CLOSE_UID_PID	; 4
 34912 00006649 [E066]                  		dw	GET_LIST	; 5
 34913 0000664B [3967]                  		dw	GET_DOS_DATA	; 6
 34914 0000664D [5D67]                  		dw	SPOOL_OPER	; 7
 34915 0000664F [5D67]                  		dw	SPOOL_OPER	; 8
 34916 00006651 [5D67]                  		dw	SPOOL_OPER	; 9
 34917 00006653 [6967]                  		dw	_$SetExtendedError  ; 10
 34918                                  
 34919                                  SERVER_DISP_END:  ;  LABEL BYTE
 34920                                  
 34921                                  ;SRVC001E label byte
 34922                                  
 34923                                  SRVC001E:
 34924                                  
 34925                                  ;hkn; TABLE	ENDS
 34926                                  
 34927                                  ;----------------------------------------------------------------------------
 34928                                  ;
 34929                                  ; Procedure Name : $ServerCall
 34930                                  ;
 34931                                  ; Inputs:
 34932                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 34933                                  ; Function:
 34934                                  ;	AL=0	Server DOS call
 34935                                  ;	AL=1	Commit All files
 34936                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 34937                                  ;	AL=3	Close all files for DPL_UID
 34938                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 34939                                  ;	AL=5	Get open file list entry
 34940                                  ;		    IN: BX File Index
 34941                                  ;			CX User Index
 34942                                  ;		    OUT:ES:DI -> Name
 34943                                  ;			BX = UID
 34944                                  ;		    CX = # locked blocks held by this UID
 34945                                  ;	AL=6	Get DOS data area
 34946                                  ;		    OUT: DS:SI -> Start
 34947                                  ;			CX size in bytes of swap if indos
 34948                                  ;			DX size in bytes of swap always
 34949                                  ;	AL=7	Get truncate flag
 34950                                  ;	AL=8	Set truncate flag
 34951                                  ;	AL=9	Close all spool files
 34952                                  ;	AL=10	SetExtendedError
 34953                                  ;
 34954                                  ;----------------------------------------------------------------------------
 34955                                  
 34956                                  _$ServerCall:
 34957                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34958                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 34959                                  	; 10/06/2019
 34960                                  	; 29/04/2019 - Retro DOS v4.0
 34961                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 34962                                  
 34963                                  	; 05/08/2018 - Retro DOS v3.0
 34964                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 34965 00006655 3C07                    	CMP	AL,7
 34966 00006657 7204                    	JB	short SET_STUFF
 34967 00006659 3C09                    	CMP	AL,9
 34968 0000665B 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 34969                                  SET_STUFF:
 34970 0000665D 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 34971                                  	;mov	bx,[si+12h]
 34972 0000665F 8B5C12                  	MOV	BX,[SI+DPL.UID]
 34973                                  
 34974                                  	; MSDOS 6.0
 34975                                  ;SR;
 34976                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 34977                                  ; of USER_ID
 34978                                  
 34979 00006662 36F606[2F10]01          	test	byte [SS:IsWin386],1
 34980 00006668 7505                    	jnz	short skip_win386
 34981                                  
 34982                                  ;hkn; SS override for user_id and proc_id
 34983                                  	; 15/08/2018
 34984 0000666A 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 34985                                  
 34986                                  skip_win386:
 34987 0000666F 8B5C14                  	MOV	BX,[SI+DPL.PID]
 34988 00006672 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 34989                                  NO_SET_ID:
 34990                                  	; 10/06/2019 - Retro DOS v4.0
 34991 00006677 2EFF36[3C66]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 34992 0000667C 2EFF36[3A66]            	PUSH	word [cS:SERVERTAB]	; push table address
 34993 00006681 50                      	PUSH	AX
 34994 00006682 E81EAC                  	call	TableDispatch
 34995                                  
 34996                                  ;hkn; SS override
 34997                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 34998 00006685 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34999                                  	;error	error_invalid_function
 35000                                  	;mov	al,1
 35001 0000668B B001                    	MOV	AL,error_invalid_function
 35002                                  servercall_error:
 35003 0000668D E9FD9F                  	JMP	SYS_RET_ERR
 35004                                  
 35005                                  SERVERRETURN:
 35006 00006690 C3                      	retn
 35007                                  
 35008                                  ; Commit - iterate through the open file list and make sure that the
 35009                                  ; directory entries are correctly updated.
 35010                                  
 35011                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35012                                  COMMIT_ALL:
 35013 00006691 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35014 00006693 16                      	push	ss
 35015 00006694 1F                      	pop	ds
 35016 00006695 E8FBAC                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35017                                  CommitLoop:
 35018 00006698 53                      	push	bx
 35019 00006699 E82401                  	call	SFFromSFN
 35020 0000669C 7222                    	JC	short CommitDone
 35021 0000669E 26833D00                	cmp	word [es:di],0
 35022                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35023                                  					; if (ThisSFT->refcount != 0)
 35024 000066A2 7418                    	JZ	short CommitNext
 35025                                  	;cmp	word [es:di],0FFFFh ; -1
 35026 000066A4 26833DFF                	cmp	word [ES:DI],sf_busy
 35027                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35028                                  					; BUSY SFTs have god knows what
 35029 000066A8 7412                    	JZ	short CommitNext	;   in them.
 35030                                  	; 17/12/2022
 35031 000066AA 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35032                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35033 000066AF 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35034                                  					;	doesn't deadlock
 35035 000066B1 893E[9E05]              	MOV	[THISSFT],DI
 35036 000066B5 8C06[A005]              	MOV	[THISSFT+2],ES
 35037 000066B9 E876CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35038                                  CommitNext:
 35039 000066BC 5B                      	pop	bx
 35040 000066BD 43                      	INC	BX
 35041 000066BE EBD8                    	JMP	short CommitLoop
 35042                                  CommitDone:
 35043 000066C0 E8EBAC                  	call	LCritSFT
 35044 000066C3 5B                      	pop	bx
 35045                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35046                                  Commit_Ok:
 35047 000066C4 E9BD9F                  	jmp	SYS_RET_OK
 35048                                  	
 35049                                  
 35050                                  CLOSE_NAME:
 35051                                  
 35052                                  ;if installed
 35053                                  
 35054                                  ;hkn; SS override
 35055                                  	;call	far [ss:MFTcloN]
 35056 000066C7 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35057                                  ;else
 35058                                  ;	Call	MFTcloN
 35059                                  ;endif
 35060                                  
 35061                                  CheckReturns:
 35062 000066CC 7202                    	JC	short func_err
 35063                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35064                                  	;transfer SYS_RET_OK
 35065                                  Commit_Okj:
 35066 000066CE EBF4                    	jmp	short Commit_Ok
 35067                                  	;jmp	SYS_RET_OK
 35068                                  
 35069                                  func_err:
 35070                                  	;transfer SYS_RET_ERR
 35071                                  	;jmp	SYS_RET_ERR
 35072 000066D0 EBBB                    	jmp	short servercall_error
 35073                                  
 35074                                  CLOSE_UID:
 35075                                  
 35076                                  ;if installed
 35077                                  ;hkn; SS override
 35078                                  	;call	far [ss:MFTclU]
 35079 000066D2 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35080                                  ;else
 35081                                  ;	Call	MFTclU
 35082                                  ;endif
 35083 000066D7 EBF3                    	JMP	short CheckReturns
 35084                                  
 35085                                  CLOSE_UID_PID:
 35086                                  
 35087                                  ;if installed
 35088                                  ;hkn; SS override
 35089                                  	;call	far [ss:MFTCloseP]
 35090 000066D9 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35091                                  ;else
 35092                                  ;	Call	MFTCloseP
 35093                                  ;endif
 35094 000066DE EBEC                    	JMP	short CheckReturns
 35095                                  
 35096                                  GET_LIST:
 35097                                  
 35098                                  ;if installed
 35099                                  ;hkn; SS override
 35100                                  	;call	far [ss:MFT_get]
 35101 000066E0 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35102                                  ;else
 35103                                  ;	Call	MFT_get
 35104                                  ;endif
 35105 000066E5 72E9                    	JC	short func_err
 35106 000066E7 E8E09D                  	call	Get_User_Stack
 35107                                  	;mov	[si+2],bx
 35108 000066EA 895C02                  	MOV	[SI+user_env.user_BX],BX
 35109                                  	;mov	[si+10],di
 35110 000066ED 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35111                                  	;mov	[si+16],es
 35112 000066F0 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35113                                  SetCXOK:
 35114                                  	;mov	[si+4],cx
 35115 000066F3 894C04                  	MOV	[SI+user_env.user_CX],CX
 35116                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35117                                  	;transfer SYS_RET_OK
 35118                                  Commit_Okj2:
 35119                                  	; 17/12/2022
 35120 000066F6 EBCC                    	jmp	short Commit_Ok
 35121                                  	;jmp	short Commit_Okj
 35122                                  	;;jmp	SYS_RET_OK
 35123                                  
 35124                                  SRV_CALL:
 35125 000066F8 58                      	POP	AX			; get rid of call to $srvcall
 35126 000066F9 1E                      	push	ds
 35127 000066FA 56                      	push	si
 35128 000066FB E8CC9D                  	call	Get_User_Stack
 35129 000066FE 5F                      	pop	di
 35130 000066FF 07                      	pop	es
 35131                                  
 35132                                  ; DS:SI point to stack
 35133                                  ; ES:DI point to DPL
 35134                                  
 35135 00006700 E87FAB                  	call	XCHGP
 35136                                  
 35137                                  ; DS:SI point to DPL
 35138                                  ; ES:DI point to stack
 35139                                  ;
 35140                                  ; We now copy the registers from DPL to save stack
 35141                                  
 35142 00006703 56                      	push	si
 35143 00006704 B90600                  	MOV	CX,6
 35144 00006707 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35145 00006709 47                      	INC	DI
 35146 0000670A 47                      	INC	DI			; Skip user_BP
 35147 0000670B A5                      	MOVSW				; DS
 35148 0000670C A5                      	MOVSW				; ES
 35149 0000670D 5E                      	pop	si			; DS:SI -> DPL
 35150 0000670E 8B04                    	mov	ax,[SI]
 35151                                  	;MOV	AX,[SI+DPL.AX]
 35152                                  	;mov	bx,[si+2]
 35153 00006710 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35154                                  	;mov	cx,[si+4]
 35155 00006713 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35156                                  	;mov	dx,[si+6]
 35157 00006716 8B5406                  	MOV	DX,[SI+DPL.DX]
 35158                                  	;mov	di,[si+10]
 35159 00006719 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35160                                  	;mov	es,[si+14]
 35161 0000671C 8E440E                  	MOV	ES,[SI+DPL.ES]
 35162                                  	;push	word [si+8]
 35163 0000671F FF7408                  	PUSH	word [SI+DPL.SI]
 35164                                  	;mov	ds,[si+12]
 35165 00006722 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35166 00006725 5E                      	POP	SI
 35167                                  
 35168                                  ;hkn; SS override for next 3
 35169 00006726 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35170 0000672B 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35171 00006730 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35172 00006736 E98E9C                  	jmp	REDISP
 35173                                  
 35174                                  GET_DOS_DATA:
 35175 00006739 16                      	push	ss
 35176 0000673A 07                      	pop	es
 35177 0000673B BF[2003]                	MOV     DI,SWAP_START
 35178 0000673E B9[AC0A]                	MOV     CX,SWAP_END
 35179 00006741 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35180 00006744 29F9                    	SUB     CX,DI
 35181 00006746 29FA                    	SUB     DX,DI
 35182 00006748 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35183 0000674A 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35184 0000674D D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35185 0000674F E8789D                  	call	Get_User_Stack
 35186                                  	;mov	[si+14],es
 35187 00006752 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35188                                  	;mov	[si+8],di
 35189 00006755 897C08                  	MOV     [SI+user_env.user_SI],DI
 35190                                  	;mov	[si+6],dx
 35191 00006758 895406                  	MOV     [SI+user_env.user_DX],DX
 35192 0000675B EB96                    	JMP	short SetCXOK
 35193                                  
 35194                                  SPOOL_OPER:
 35195                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35196                                  
 35197 0000675D 50                      	push    ax
 35198 0000675E B82511                  	mov     ax,1125h
 35199 00006761 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35200                                  			; STACK: WORD subfunction
 35201                                  			; Return: CF set on error, AX = error code
 35202                                  			; STACK unchanged
 35203 00006763 5B                      	pop	bx
 35204                                  	; 17/12/2022
 35205                                  	;JC	short func_err2
 35206 00006764 7390                    	jnc	short Commit_Okj2
 35207                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35208                                  	;;jmp	SYS_RET_OK
 35209                                  	;jmp	short Commit_Okj2
 35210                                  	
 35211                                  func_err2:
 35212 00006766 E9249F                  	jmp	SYS_RET_ERR
 35213                                  
 35214                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35215                                  ;--------------------------------------------------------------------------
 35216                                  ;
 35217                                  ; Procedure Name : $SetExtendedError
 35218                                  ;
 35219                                  ; $SetExtendedError takes extended error information and loads it up for the
 35220                                  ; next extended error call.  This is used by interrupt-level proccessors to
 35221                                  ; mask their actions.
 35222                                  ;
 35223                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35224                                  ;   Outputs: none
 35225                                  ;
 35226                                  ;---------------------------------------------------------------------------
 35227                                  
 35228                                  _$SetExtendedError:
 35229                                  
 35230                                  ;hkn; SS override for all variables used
 35231                                  
 35232 00006769 8B04                    	mov	ax,[si]
 35233                                  	;MOV	AX,[SI+DPL.AX]
 35234 0000676B 36A3[2403]              	MOV	[SS:EXTERR],AX
 35235                                  	;mov	ax,[si+10]
 35236 0000676F 8B440A                  	MOV	AX,[SI+DPL.DI]
 35237 00006772 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35238                                  	;mov	ax,[si+14]
 35239 00006776 8B440E                  	MOV	AX,[SI+DPL.ES]
 35240 00006779 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35241                                  	;mov	ax,[si+2]
 35242 0000677D 8B4402                  	MOV	AX,[SI+DPL.BX]
 35243 00006780 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35244                                  	;mov	ax,[si+4]
 35245 00006784 8B4404                  	MOV	AX,[SI+DPL.CX]
 35246 00006787 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35247 0000678C C3                      	retn
 35248                                  
 35249                                  ;============================================================================
 35250                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35251                                  ;============================================================================
 35252                                  ; 05/08/2018 - Retro DOS v3.0
 35253                                  ; 05/05/2019 - Retro DOS v4.0
 35254                                  
 35255                                  ;**	Handle related utilities for MSDOS 2.X.
 35256                                  ;----------------------------------------------------------------------------
 35257                                  ;	pJFNFromHandle	written
 35258                                  ;	SFFromHandle	written
 35259                                  ;	SFFromSFN	written
 35260                                  ;	JFNFree 	written
 35261                                  ;	SFNFree 	written
 35262                                  ;
 35263                                  ;	Modification history:
 35264                                  ;
 35265                                  ;	    Created: MZ 1 April 1983
 35266                                  ;----------------------------------------------------------------------------
 35267                                  
 35268                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35269                                  
 35270                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35271                                  ;----------------------------------------------------------------------------
 35272                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35273                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35274                                  ;
 35275                                  ;	NOTE:
 35276                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35277                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35278                                  ;
 35279                                  ;	ENTRY	(bx) = handle
 35280                                  ;	EXIT	'C' clear if ok
 35281                                  ;		  (es:di) = address of JFN value
 35282                                  ;		'C' set if error
 35283                                  ;		  (ax) = error code
 35284                                  ;	USES	AX, DI, ES, Flags
 35285                                  ;----------------------------------------------------------------------------
 35286                                  
 35287                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35288                                  
 35289                                  pJFNFromHandle:
 35290                                  	; 05/05/2019 - Retro DOS v4.0
 35291                                  	;getdseg <es>			; es -> dosdata
 35292 0000678D 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35293                                  	
 35294                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35295 00006792 268E06[3003]            	mov	es,[es:CurrentPDB]
 35296                                  
 35297                                  	;cmp	bx,[ES:32h]
 35298 00006797 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35299 0000679C 7204                    	JB	short pjfn10		; no, get offset
 35300                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35301                                  	;mov	al,6
 35302 0000679E B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35303                                  ReturnCarry:
 35304 000067A0 F9                      	STC                             ; signal error
 35305 000067A1 C3                      	retn				; go back
 35306                                  pjfn10: 
 35307                                  	;les	di,[es:34h]
 35308 000067A2 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35309 000067A7 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35310                                  	;clc
 35311                                  pJFNFromHandle_error:
 35312 000067A9 C3                      	retn
 35313                                  
 35314                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35315                                  ;----------------------------------------------------------------------------
 35316                                  ;
 35317                                  ; Procedure Name : SFFromHandle
 35318                                  ;
 35319                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35320                                  ;
 35321                                  ;   Input:      BX has handle
 35322                                  ;   Output:     Carry Set
 35323                                  ;                   AX has error code
 35324                                  ;               Carry Reset
 35325                                  ;                   ES:DI has pointer to SF entry
 35326                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35327                                  ; NOTE:
 35328                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35329                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35330                                  ;
 35331                                  ;----------------------------------------------------------------------------
 35332                                  
 35333                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35334                                  
 35335                                  SFFromHandle:
 35336 000067AA E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35337                                  	;retc				; return if error
 35338 000067AD 72FA                    	jc	short pJFNFromHandle_error
 35339 000067AF 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35340                                  	;JNZ	short GetSF		; nope, suck out SF
 35341                                  	;;mov	al,6
 35342                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35343                                  	;jmp	short ReturnCarry	; signal it
 35344                                  	; 17/12/2022
 35345                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35346 000067B3 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35347                                  	;JNZ	short GetSF		; nope, suck out SF
 35348                                  	;;mov	al,6
 35349                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35350                                  	;jmp	short ReturnCarry	; signal it
 35351                                  GetSF:
 35352 000067B5 53                      	push	bx			; save handle
 35353 000067B6 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35354 000067B9 30FF                    	XOR     BH,BH                   ; ignore upper half
 35355 000067BB E80200                  	CALL    SFFromSFN               ; get real sf spot
 35356 000067BE 5B                      	pop	bx			; restore
 35357 000067BF C3                      	retn                        	; say goodbye
 35358                                  
 35359                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35360                                  
 35361                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35362                                  ;----------------------------------------------------------------------------
 35363                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35364                                  ;	is more than just a simple index instruction because the SF table
 35365                                  ;	can be made up of multiple pieces chained together. We follow the
 35366                                  ;	chain to the right piece and then do the index operation.
 35367                                  ;
 35368                                  ;   NOTE:
 35369                                  ;	This routine is called from SFFromHandle which is called
 35370                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35371                                  ;
 35372                                  ;	ENTRY	BX has SF index
 35373                                  ;	EXIT	'C' clear if OK
 35374                                  ;		  ES:DI points to SF entry
 35375                                  ;		'C' set if index too large
 35376                                  ;	USES	BX, DI, ES
 35377                                  ;----------------------------------------------------------------------------
 35378                                  
 35379                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35380                                  
 35381                                  SFFromSFN:
 35382                                  	; 05/05/2019 - Retro DOS v4.0
 35383                                  	;getdseg <es>			; es -> dosdata
 35384 000067C0 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35385                                  
 35386                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35387 000067C5 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35388                                  sfsfn5:	
 35389                                  	;cmp	bx,[es:di+4]
 35390 000067CA 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35391 000067CE 720E                    	JB	short sfsfn7		; yes, go grab it
 35392                                  	;sub	bx,[es:di+4]
 35393 000067D0 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35394 000067D4 26C43D                  	les	di,[es:di] ; 14/08/2018
 35395                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35396 000067D7 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35397 000067DA 75EE                    	JNZ	short sfsfn5		; no, try again
 35398 000067DC F9                      	STC
 35399 000067DD C3                      	retn				; return with error, not found
 35400                                  sfsfn7:
 35401 000067DE 50                      	push	ax
 35402                                  	;mov	ax,53 ; MSDOS 3.3
 35403                                  	;mov	ax,59 ; MSDOS 6.0
 35404                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35405                                  	
 35406                                  	; 17/12/2022
 35407 000067DF B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35408                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35409                                  	;mov	ax,SF_ENTRY.size ; 59
 35410                                  	
 35411 000067E1 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35412 000067E3 01C7                    	ADD	DI,AX			; add base of SF block
 35413 000067E5 58                      	pop	ax
 35414                                  	;add	di,6
 35415 000067E6 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35416 000067E9 C3                      	retn				; return with 'C' clear
 35417                                  
 35418                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35419                                  
 35420                                  ;**	JFNFree - Find a Free JFN Slot
 35421                                  ;----------------------------------------------------------------------------
 35422                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35423                                  ;
 35424                                  ;	ENTRY	(ss) = DOSDATA
 35425                                  ;	EXIT	'C' clear if OK
 35426                                  ;		  (bx) = new handle
 35427                                  ;		  (es:di) = pointer to JFN slot
 35428                                  ;		'C' set if error
 35429                                  ;		  (al) = error code
 35430                                  ;	USES	bx, di, es, flags
 35431                                  ;----------------------------------------------------------------------------
 35432                                  
 35433                                  JFNFree:
 35434 000067EA 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35435                                  jfnf1:	
 35436 000067EC E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35437 000067EF 7209                    	JC	short jfnf5		; no more handles
 35438 000067F1 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35439 000067F5 7405                    	je	short jfnfx		; yes, carry is clear
 35440 000067F7 43                      	INC     BX                      ; no, next handle
 35441 000067F8 EBF2                    	JMP	short jfnf1		; and try again
 35442                                  
 35443                                  	; Error. 'C' set
 35444                                  jfnf5:	
 35445                                  	;mov	al,4
 35446 000067FA B004                    	MOV	AL,error_too_many_open_files
 35447                                  jfnfx:	
 35448 000067FC C3                      	retn				; bye
 35449                                  
 35450                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35451                                  
 35452                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35453                                  ;----------------------------------------------------------------------------
 35454                                  ;	SFNFree scans through the sf table looking for a free entry
 35455                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35456                                  ;
 35457                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35458                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35459                                  ;	we can't just mark it busy because we may get blown out of our open
 35460                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35461                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35462                                  ;	an SFT with this value we look to see if it belongs to this user
 35463                                  ;	and process.  If it does belong to us then it must be an orphan
 35464                                  ;	and we reclaim it.
 35465                                  ;
 35466                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35467                                  ;		over and over, but we could at least set a high water mark...
 35468                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35469                                  ;		even though this is not a frequently called routine - jgl
 35470                                  ;
 35471                                  ;	ENTRY	(ss) = DOSDATA
 35472                                  ;	EXIT	'C' clear if no error
 35473                                  ;		  (bx) = SFN
 35474                                  ;		  (es:di) = pointer to SFT
 35475                                  ;		  es:[di].SFT_REF_COUNT = -1
 35476                                  ;		'C' set if error
 35477                                  ;		  (al) = error code
 35478                                  ;	USES	bx, di, es, Flags
 35479                                  ;----------------------------------------------------------------------------
 35480                                  
 35481                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35482                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35483                                  
 35484                                  SFNFree:
 35485                                  	; 12/08/2018
 35486                                  	; 05/08/2018 - Retro DOS v3.0
 35487                                  	;
 35488                                  	; MSDOS 6.0
 35489 000067FD 50                      	push	ax
 35490 000067FE 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35491                                  sfnf5:	
 35492 00006800 53                      	push	bx
 35493 00006801 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35494 00006804 5B                      	pop	bx
 35495 00006805 723A                    	jc	short sfnf95		; no more free SFNs
 35496 00006807 26833D00                	cmp	word [ES:DI],0
 35497                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35498 0000680B 741D                    	je	short sfnf20			; yep, got one
 35499                                  	
 35500                                  	;cmp	word [es:di],0FFFFh ; -1
 35501 0000680D 26833DFF                	cmp	word [ES:DI],sf_busy
 35502                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35503 00006811 7403                    	je	short sfnf10		; special busy mark
 35504                                  sfnf7:	
 35505 00006813 43                      	inc	bx			; try the next one
 35506 00006814 EBEA                    	jmp	short sfnf5
 35507                                  
 35508                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35509                                  ;	it was abandoned during a earlier call and we can use it.
 35510                                  ;
 35511                                  ;	(bx)	= SFN
 35512                                  ;	(es:di) = pointer to SFT
 35513                                  ;	(TOS)	= caller's (ax)
 35514                                  
 35515                                  sfnf10:	
 35516 00006816 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35517                                  	;cmp	[es:di+2Fh],ax
 35518 0000681A 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35519 0000681E 75F3                    	jnz	short sfnf7		; not ours
 35520 00006820 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35521                                  	;cmp	[es:di+31h],ax
 35522 00006824 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35523 00006828 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35524                                  
 35525                                  ;	We have an SFT to allocate
 35526                                  ;
 35527                                  ;	(bx)	= SFN
 35528                                  ;	(es:di) = pointer to SFT
 35529                                  ;	(TOS)	= caller's (ax)
 35530                                  
 35531                                  sfnf20:
 35532                                  	; cf = 0 ;; Retro DOS v3.0
 35533                                  
 35534                                  	;mov	word [es:di],0FFFFh
 35535 0000682A 26C705FFFF              	mov	word [ES:DI],sf_busy
 35536                                  					; make sure that this is allocated
 35537                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35538                                  
 35539 0000682F 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35540                                  	;mov	[es:di+2Fh],ax
 35541 00006833 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35542 00006837 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35543                                  	;mov	[es:di+31h],ax
 35544 0000683B 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35545                                  sfnf21: ;; Retro DOS v3.0
 35546                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35547                                  	;pop	ax
 35548                                  	;;clc
 35549                                  	;retn				; return with no error
 35550                                  	; 17/12/2022
 35551 0000683F 58                      	pop	ax
 35552                                  	;clc
 35553 00006840 C3                      	retn
 35554                                  
 35555                                  ;**	Error - no more free SFNs
 35556                                  ;
 35557                                  ;	'C' set
 35558                                  ;	(TOS) = saved ax
 35559                                  
 35560                                  sfnf95: 
 35561 00006841 58                      	pop	ax
 35562                                  	;mov	al,4
 35563 00006842 B004                    	mov	al,error_too_many_open_files
 35564 00006844 C3                      	retn				; return with 'C' and error
 35565                                  
 35566                                  ;============================================================================
 35567                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35568                                  ;============================================================================
 35569                                  ; 13/07/2018 - Retro DOS v3.0
 35570                                  ; 20/05/2019 - Retro DOS v4.0
 35571                                  
 35572                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35573                                  
 35574                                  ;	BREAK <$Close - return a handle to the system>
 35575                                  ;----------------------------------------------------------------------------
 35576                                  ;
 35577                                  ;**	$Close - Close a file Handle
 35578                                  ;
 35579                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35580                                  ;		path
 35581                                  ;
 35582                                  ;	Assembler usage:
 35583                                  ;	    MOV     BX, handle
 35584                                  ;	    MOV     AH, Close
 35585                                  ;	    INT     int_command
 35586                                  ;
 35587                                  ;	ENTRY	(bx) = handle
 35588                                  ;	EXIT	<normal INT21 return convention>
 35589                                  ;	USES	all
 35590                                  ;
 35591                                  ;----------------------------------------------------------------------------
 35592                                  
 35593                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35594                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35595                                  
 35596                                  _$CLOSE:
 35597                                  ;	Grab the SFT pointer from the JFN.
 35598                                  
 35599 00006845 E85A02                  	call	CheckOwner		; get system file entry
 35600 00006848 722B                    	jc	short CloseError	; error return
 35601 0000684A 16                      	push	ss
 35602 0000684B 1F                      	pop	ds			; For DOS_CLOSE
 35603 0000684C 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35604 00006850 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35605                                  
 35606                                  ; DS:SI point to JFN table entry.
 35607                                  ; ES:DI point to SFT
 35608                                  ;
 35609                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35610                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35611                                  ; If the file was not a net FCB, we free the JFN too.
 35612                                  
 35613                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35614 00006854 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35615 00006858 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35616                                  	;mov	al,[ES:DI+2]
 35617 0000685A 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35618                                  	;and	al,0F0h
 35619 0000685E 24F0                    	AND	AL,SHARING_MASK
 35620                                  	;cmp	al,70h
 35621 00006860 3C70                    	CMP	AL,SHARING_NET_FCB
 35622 00006862 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35623                                  
 35624                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 35625                                  ; -1.
 35626                                  
 35627                                  FreeJFN:
 35628 00006864 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 35629 00006867 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35630                                  PostFree:
 35631                                  
 35632                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35633                                  
 35634 0000686B E86FC7                  	call	DOS_CLOSE
 35635                                  
 35636                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35637                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35638                                  
 35639 0000686E 7205                    	JC	short CloseError
 35640                                  	;mov	ah,3Eh
 35641 00006870 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35642                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35643                                  CloseOk:
 35644 00006872 E90F9E                  	jmp	SYS_RET_OK
 35645                                  CloseError:
 35646 00006875 E9159E                  	jmp	SYS_RET_ERR
 35647                                  
 35648                                  ;	BREAK <$Commit - commit the file>
 35649                                  ;----------------------------------------------------------------------------
 35650                                  ;
 35651                                  ;**	$Commit - Commit a File
 35652                                  ;
 35653                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35654                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 35655                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35656                                  ;	and fix this!! jgl
 35657                                  ;
 35658                                  ;	Assembler usage:
 35659                                  ;	    MOV     BX, handle
 35660                                  ;	    MOV     AH, Commit
 35661                                  ;	    INT     int_command
 35662                                  ;
 35663                                  ;	ENTRY	(bx) = handle
 35664                                  ;	EXIT	none
 35665                                  ;	USES	all
 35666                                  ;;----------------------------------------------------------------------------
 35667                                  
 35668                                  _$COMMIT:
 35669                                  ;	Grab the SFT pointer from the JFN.
 35670                                  
 35671 00006878 E82702                  	call	CheckOwner		; get system file entry
 35672 0000687B 7213                    	JC	short CommitError	; error return
 35673 0000687D 16                      	push	ss
 35674 0000687E 1F                      	pop	ds			; For DOS_COMMIT
 35675 0000687F 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35676 00006883 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35677                                  
 35678                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35679                                  ;
 35680                                  ;	ES:DI point to SFT
 35681                                  
 35682 00006887 E8A8C8                  	call	DOS_COMMIT
 35683 0000688A 7204                    	JC	short CommitError
 35684                                  	; 07/12/2022
 35685                                  	;jc	short CloseError
 35686                                  	;mov	ah,68h
 35687 0000688C B468                    	MOV	AH,COMMIT
 35688                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35689                                  	;jmp	SYS_RET_OK
 35690                                  CommitOk:
 35691 0000688E EBE2                    	jmp	short CloseOk	
 35692                                  
 35693                                  CommitError:
 35694                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35695                                  	;jmp	SYS_RET_ERR
 35696 00006890 EBE3                    	jmp	short CloseError
 35697                                  
 35698                                  ;	BREAK <$ExtHandle - extend handle count>
 35699                                  
 35700                                  ;**	$ExtHandle - Extend Handle Count
 35701                                  ;----------------------------------------------------------------------------
 35702                                  ;	Assembler usage:
 35703                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35704                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35705                                  ;	    INT     int_command 		 busy )
 35706                                  ;
 35707                                  ;	ENTRY	(bx) = new number of handles
 35708                                  ;	EXIT	'C' clear if OK
 35709                                  ;		'C' set iff err
 35710                                  ;		  (ax) = error code
 35711                                  ;			 AX = error_not_enough_memory
 35712                                  ;			      error_too_many_open_files
 35713                                  ;	USES	all
 35714                                  ;----------------------------------------------------------------------------
 35715                                  
 35716                                  _$ExtHandle:
 35717 00006892 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 35718                                  	;cmp	bx,20
 35719 00006894 83FB14                  	CMP	BX,FILPERPROC
 35720 00006897 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35721 00006899 BB1400                  	MOV	BX,FILPERPROC
 35722                                  exth2:	
 35723 0000689C 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35724                                  	;mov	cx,[ES:32h]
 35725 000068A1 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35726 000068A6 39CB                    	CMP	BX,CX			; the requested == current
 35727 000068A8 7455                    	JE	short ok_done 		; yes and exit
 35728 000068AA 7722                    	JA	short larger		; go allocate new table
 35729                                  
 35730                                  ;	We're going to shrink the # of handles available
 35731                                  
 35732 000068AC BD0100                  	MOV	BP,1			; shrink
 35733                                  	;mov	ds,[ES:36h]
 35734 000068AF 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35735 000068B4 89DE                    	MOV	SI,BX			;
 35736 000068B6 29D9                    	SUB	CX,BX			; get difference
 35737                                  
 35738                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35739                                  chck_handles:
 35740 000068B8 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35741 000068BB 753D                    	JNZ	short too_many_files	; status
 35742 000068BD 46                      	INC	SI
 35743 000068BE E2F8                    	LOOP	chck_handles
 35744 000068C0 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35745 000068C3 7709                    	JA	short larger		; no
 35746                                  
 35747 000068C5 BD0200                  	MOV	BP,2			; psp
 35748                                  	;mov	di,24
 35749 000068C8 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35750 000068CB 53                      	PUSH	BX
 35751 000068CC EB1D                    	JMP	short movhandl
 35752                                  
 35753                                  larger:
 35754 000068CE 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35755 000068D1 747F                    	JZ	short invalid_func	; 10/08/2018
 35756 000068D3 F8                      	CLC
 35757 000068D4 53                      	PUSH	BX			; save requested number
 35758 000068D5 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35759 000068D8 B104                    	MOV	CL,4
 35760                                  	;ror	bx,cl			; MSDOS 3.3
 35761 000068DA D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 35762 000068DC 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 35763                                  
 35764 000068E0 55                      	PUSH	BP
 35765 000068E1 E8DBFA                  	call	_$ALLOC			; allocate memory
 35766 000068E4 5D                      	POP	BP
 35767 000068E5 7266                    	JC	short no_memory		; not enough meory
 35768                                  
 35769 000068E7 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 35770 000068E9 31FF                    	XOR	DI,DI
 35771                                  movhandl:
 35772 000068EB 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 35773                                  
 35774 000068F0 F7C50300                	test	BP,3			; enlarge ?
 35775 000068F4 740C                    	JZ	short enlarge 		; yes
 35776 000068F6 59                      	POP	CX			; cx = the amount you shrink
 35777 000068F7 51                      	PUSH	CX
 35778 000068F8 EB0C                    	JMP	short copy_hand
 35779                                  
 35780                                  ;	Done.  'C' clear
 35781                                  
 35782                                  ; 17/12/2022
 35783                                  ;ok_done:
 35784                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35785                                  ;	;jmp	short CommitOk
 35786                                  ;	; 17/12/2022
 35787                                  ;	jmp	SYS_RET_OK
 35788                                  
 35789                                  too_many_files:
 35790                                  	;mov	al,4
 35791 000068FA B004                    	MOV	AL,error_too_many_open_files
 35792                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35793                                  	;jmp	SYS_RET_ERR
 35794                                  CommitErrorj:
 35795                                  	;jmp	short CommitError
 35796                                  	; 17/12/2022
 35797 000068FC E98E9D                  	jmp	SYS_RET_ERR
 35798                                  
 35799                                  ; 17/12/2022 
 35800                                  ok_done:
 35801                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35802                                  	;jmp	short CommitOk
 35803                                  	; 17/12/2022
 35804 000068FF E9829D                  	jmp	SYS_RET_OK
 35805                                  
 35806                                  enlarge:
 35807                                  	;mov	cx,[32h]
 35808 00006902 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 35809                                  copy_hand:
 35810 00006906 89CA                    	MOV	DX,CX
 35811                                  	;lds	si,[34h]
 35812 00006908 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 35813 0000690C F3A4                    	REP	MOVSB			; copy infomation to new table
 35814 0000690E 59                      	POP	CX			; get new number of handles
 35815 0000690F 51                      	PUSH	CX			; save it again
 35816 00006910 29D1                    	SUB	CX,DX			; get the difference
 35817 00006912 B0FF                    	MOV	AL,-1			; set availability to handles
 35818 00006914 F3AA                    	REP	STOSB
 35819 00006916 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 35820                                  	;cmp	word [34h],0
 35821 0000691B 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 35822 00006920 750D                    	JNZ	short update_info	; yes, go update PDB entries
 35823 00006922 55                      	PUSH	BP
 35824 00006923 1E                      	PUSH	DS			; save old table segment
 35825 00006924 06                      	PUSH	ES			; save new table segment
 35826 00006925 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 35827 00006929 E80DFC                  	call	_$DEALLOC		; deallocate old table meomory
 35828 0000692C 07                      	POP	ES			; restore new table segment
 35829 0000692D 1F                      	POP	DS			; restore old table segment
 35830 0000692E 5D                      	POP	BP
 35831                                  
 35832                                  update_info:
 35833 0000692F F7C50200                	test	BP,2			; psp?
 35834 00006933 7408                    	JZ	short non_psp 		; no
 35835                                  	;mov	word [34h],18h ; 24
 35836 00006935 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 35837 0000693B EB06                    	JMP	short final
 35838                                  non_psp:
 35839                                  	;mov	word [34h],0
 35840 0000693D C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 35841                                  final:
 35842                                  	;mov	[36h],es	
 35843 00006943 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 35844                                  	;pop	word [32h]
 35845 00006947 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 35846                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35847                                  	;jmp	SYS_RET_OK
 35848                                  ok_done_j:
 35849 0000694B EBB2                    	jmp	short ok_done
 35850                                  
 35851                                  no_memory:
 35852 0000694D 5B                      	POP	BX			; clean stack
 35853                                  	;mov	al,8
 35854 0000694E B008                    	MOV	AL,error_not_enough_memory
 35855                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35856                                  	;jmp	SYS_RET_ERR
 35857                                  CommitErrorj2:
 35858 00006950 EBAA                    	jmp	short CommitErrorj
 35859                                  
 35860                                  invalid_func:
 35861                                  	;mov	al,1
 35862 00006952 B001                    	MOV	AL,error_invalid_function
 35863                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35864                                  	;jmp	SYS_RET_ERR
 35865                                  CommitErrorj3:
 35866                                  	;jmp	short CommitErrorj2
 35867                                  	; 17/12/2022
 35868 00006954 EBA6                    	jmp	short CommitErrorj
 35869                                  
 35870                                  ; 20/05/2019 - Retro DOS v4.0
 35871                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 35872                                  
 35873                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35874                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 35875                                  
 35876                                  ;	BREAK <$READ - Read from a file handle>
 35877                                  ;----------------------------------------------------------------------------
 35878                                  ;
 35879                                  ;**	$Read - Read from a File Handle
 35880                                  ;
 35881                                  ;   Assembler usage:
 35882                                  ;
 35883                                  ;	LDS	DX, buf
 35884                                  ;	MOV	CX, count
 35885                                  ;	MOV	BX, handle
 35886                                  ;	MOV	AH, Read
 35887                                  ;	INT	int_command
 35888                                  ;	  AX has number of bytes read
 35889                                  ;
 35890                                  ;	ENTRY	(bx) = file handle
 35891                                  ;		(cx) = byte count
 35892                                  ;		(ds:dx) = buffer address
 35893                                  ;	EXIT	Through system call return so that to user:
 35894                                  ;		  'C' clear if OK
 35895                                  ;		    (ax) = bytes read
 35896                                  ;		  'C' set if error
 35897                                  ;		    (ax) = error code
 35898                                  ;
 35899                                  ;----------------------------------------------------------------------------
 35900                                  
 35901                                  _$READ:
 35902 00006956 BE[A033]                	MOV	SI,DOS_READ
 35903                                  ReadDo:
 35904 00006959 E831FE                  	call	pJFNFromHandle
 35905 0000695C 7208                    	JC	short ReadError
 35906                                  
 35907 0000695E 268A05                  	MOV	AL,[ES:DI]
 35908 00006961 E83E01                  	call	CheckOwner		; get the handle
 35909 00006964 7303                    	JNC	short ReadSetup		; no errors do the operation
 35910                                  
 35911                                  ;	Have an error. 'C' set
 35912                                  
 35913                                  ReadError:
 35914                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35915                                  	;;jmp	SYS_RET_ERR		; go to error traps
 35916                                  	;jmp	short CommitErrorj3
 35917                                  	; 17/12/2022
 35918 00006966 E9249D                  	jmp	SYS_RET_ERR
 35919                                  
 35920                                  ReadSetup:
 35921 00006969 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 35922 0000696E 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 35923                                  	; 20/05/2019 - Retro DOS v4.0
 35924                                  	; MSDOS 6.0 
 35925                                  ;; Extended Open
 35926                                  	;test	byte [es:di+3],20h
 35927 00006973 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 35928                                  						 ;AN000;;EO. need i24
 35929 00006978 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 35930 0000697A 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 35931                                  					;AN000;;EO. set it off;smr;SS Override
 35932                                  needi24:				;AN000;
 35933                                  ;; Extended Open
 35934 00006980 36FF36[2C03]            	push	word [SS:DMAADD]
 35935 00006985 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 35936                                  
 35937                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35938                                  
 35939                                  	; 26/07/2019
 35940                                  
 35941                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35942                                  	;
 35943                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 35944                                  	; there is not another caller; it is better to put the code in this proc
 35945                                   	; here instead of calling it as a subroutine; but I have modified code
 35946                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 35947                                  
 35948                                  	; MSDOS 6.0
 35949 0000698A E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 35950                                  	
 35951                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35952                                  	; MSDOS 3.3
 35953                                  	;MOV	BX,DX			; copy offset
 35954                                  	;push	cx			; don't stomp on count
 35955                                  	;MOV	CL,4			; bits to shift bytes->para
 35956                                  	;SHR	BX,CL			; get number of paragraphs
 35957                                  	;pop	cx			; get count back
 35958                                  	;MOV	AX,DS			; get original segment
 35959                                  	;ADD	AX,BX			; get new segment
 35960                                  	;MOV	DS,AX			; in seg register
 35961                                  	;AND	DX,0Fh			; normalize offset
 35962                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 35963                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 35964                                  						;smr;SS Override
 35965                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35966                                  	
 35967 0000698D 16                      	push	ss			; go for DOS addressability
 35968 0000698E 1F                      	pop	ds
 35969                                  
 35970 0000698F FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 35971                                  
 35972 00006991 8F06[2E03]              	pop	word [DMAADD+2]
 35973 00006995 8F06[2C03]              	pop	word [DMAADD]
 35974                                  	;JNC	short READ_OK		;AN002;
 35975                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 35976                                  	; 17/12/2022
 35977 00006999 72CB                    	jc	short ReadError
 35978                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35979                                  	;jnc	short READ_OK		;AN002;
 35980                                  	;jmp	short ReadError
 35981                                  
 35982                                  READ_OK:
 35983 0000699B 89C8                    	MOV	AX,CX			; get correct return in correct reg
 35984                                  Read_Okj:
 35985                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35986                                  	;;jmp	SYS_RET_OK		; successful return
 35987                                  	;jmp	short ok_done_j
 35988                                  	; 17/12/2022
 35989 0000699D E9E49C                  	jmp	SYS_RET_OK
 35990                                  
 35991                                  ; 13/07/2018 - Retro DOS v3.0
 35992                                  
 35993                                  ;----------------------------------------------------------------------------
 35994                                  
 35995                                  ;   Input: DS:DX points to user's buffer addr
 35996                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 35997                                  ;   Output: [DMAADD] set
 35998                                  
 35999                                  ; 20/05/2019 - Retro DOS v4.0
 36000                                  ; 26/07/2019
 36001                                  ;	; MSDOS 6.0
 36002                                  ;Align_Buffer:
 36003                                  ;	MOV	BX,DX			; copy offset
 36004                                  ;	push	cx			; don't stomp on count
 36005                                  ;	MOV	CL,4			; bits to shift bytes->para
 36006                                  ;	SHR	BX,CL			; get number of paragraphs
 36007                                  ;	pop	cx			; get count back
 36008                                  ;	MOV	AX,DS			; get original segment
 36009                                  ;	ADD	AX,BX			; get new segment
 36010                                  ;	MOV	DS,AX			; in seg register
 36011                                  ;	AND	DX,0Fh			; normalize offset
 36012                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36013                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36014                                  ;						;smr;SS Override
 36015                                  ;	retn
 36016                                  
 36017                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36018                                  Align_Buffer:
 36019 000069A0 89D3                    	MOV	BX,DX			; copy offset
 36020 000069A2 51                      	push	cx			; don't stomp on count
 36021 000069A3 B104                    	MOV	CL,4			; bits to shift bytes->para
 36022 000069A5 D3EB                    	SHR	BX,CL			; get number of paragraphs
 36023 000069A7 59                      	pop	cx			; get count back
 36024 000069A8 8CD8                    	MOV	AX,DS			; get original segment
 36025 000069AA 01D8                    	ADD	AX,BX			; get new segment
 36026 000069AC 8ED8                    	MOV	DS,AX			; in seg register
 36027 000069AE 83E20F                  	AND	DX,0Fh			; normalize offset
 36028 000069B1 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36029 000069B6 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36030                                  						;smr;SS Override
 36031 000069BB C3                      	retn
 36032                                  
 36033                                  ; 20/05/2019 - Retro DOS v4.0
 36034                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36035                                  
 36036                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36037                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36038                                  
 36039                                  ;BREAK <$WRITE - write to a file handle>
 36040                                  ;----------------------------------------------------------------------------
 36041                                  ;
 36042                                  ;   Assembler usage:
 36043                                  ;	    LDS     DX, buf
 36044                                  ;	    MOV     CX, count
 36045                                  ;	    MOV     BX, handle
 36046                                  ;	    MOV     AH, Write
 36047                                  ;	    INT     int_command
 36048                                  ;	  AX has number of bytes written
 36049                                  ;   Errors:
 36050                                  ;	    AX = write_invalid_handle
 36051                                  ;	       = write_access_denied
 36052                                  ;
 36053                                  ;   Returns in register AX
 36054                                  ;
 36055                                  ;----------------------------------------------------------------------------
 36056                                  
 36057                                  _$WRITE:
 36058 000069BC BE[C935]                	MOV	SI,DOS_WRITE
 36059 000069BF EB98                    	JMP	short ReadDo
 36060                                  
 36061                                  ;BREAK <$LSEEK - move r/w pointer>
 36062                                  ;----------------------------------------------------------------------------
 36063                                  ;
 36064                                  ;   Assembler usage:
 36065                                  ;	    MOV     DX, offsetlow
 36066                                  ;	    MOV     CX, offsethigh
 36067                                  ;	    MOV     BX, handle
 36068                                  ;	    MOV     AL, method
 36069                                  ;	    MOV     AH, LSeek
 36070                                  ;	    INT     int_command
 36071                                  ;	  DX:AX has the new location of the pointer
 36072                                  ;   Error returns:
 36073                                  ;	    AX = error_invalid_handle
 36074                                  ;	       = error_invalid_function
 36075                                  ;   Returns in registers DX:AX
 36076                                  ;
 36077                                  ;----------------------------------------------------------------------------
 36078                                  
 36079                                  ; 21/05/2019 - Retro DOS v4.0
 36080                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36081                                  
 36082                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36083                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36084                                  
 36085                                  _$LSEEK:
 36086 000069C1 E8DE00                  	call	CheckOwner		; get system file entry
 36087                                  
 36088                                  	; 17/12/2022
 36089                                  ;LSeekError:
 36090                                  	;JNC	short CHKOWN_OK		;AN002;
 36091                                  	;JMP	short ReadError		;AN002; error return
 36092                                  	; 17/12/2022
 36093                                  	; 02/06/2019
 36094 000069C4 72A0                    	jc	short ReadError
 36095                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36096                                  	;JNC	short CHKOWN_OK		;AN002;
 36097                                  	;JMP	short ReadError		;AN002; error return
 36098                                  
 36099                                  CHKOWN_OK:
 36100                                  					;AN002;
 36101 000069C6 3C02                    	CMP	AL,2			; is the seek value correct?
 36102 000069C8 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36103                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36104 000069CA 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36105                                  					;smr;SS Override
 36106                                  	;mov	al,1
 36107 000069D0 B001                    	mov	al,error_invalid_function ; invalid method
 36108                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36109                                  LSeekError2:
 36110 000069D2 EB92                    	jmp	short ReadError
 36111                                  
 36112                                  LSeekDisp:
 36113 000069D4 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36114 000069D6 720A                    	JB	short LSeekStore	; just store CX:DX
 36115 000069D8 771B                    	JA	short LSeekEOF		; seek from end of file
 36116                                  	;add	dx,[es:di+21]
 36117 000069DA 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36118                                  	;adc	cx,[es:di+23]
 36119 000069DE 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36120                                  LSeekStore:
 36121 000069E2 89C8                    	MOV	AX,CX			; AX:DX
 36122 000069E4 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36123                                  LSeekSetpos:
 36124                                  	;mov	[es:di+21],ax
 36125 000069E5 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36126                                  	;mov	[es:di+23],dx
 36127 000069E9 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36128 000069ED E8DA9A                  	call	Get_User_Stack
 36129                                  	;mov	[si+6],dx
 36130 000069F0 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36131                                  	;jmp	SYS_RET_OK		; successful return
 36132                                  	; 25/06/2019
 36133                                  	;jmp	SYS_RET_OK_clc
 36134                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36135                                  	;jmp	SYS_RET_OK_clc
 36136                                  LSeekOk:
 36137 000069F3 EBA8                    	jmp     short Read_Okj
 36138                                  
 36139                                  LSeekEOF:
 36140                                  	;;test	word [es:di+5],8000h
 36141                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36142                                  	; 21/05/2019 - Retro DOS v4.0
 36143 000069F5 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36144 000069FA 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36145                                  LOCAL_LSeek:
 36146                                  	;add	dx,[es:di+17]
 36147 000069FC 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36148                                  	;adc	cx,[es:di+19]
 36149 00006A00 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36150 00006A04 EBDC                    	JMP	short LSeekStore	; go and set the position
 36151                                  
 36152                                  Check_LSeek_Mode:
 36153                                  	;;test	word [es:di+2],8000h
 36154                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36155                                  	; 21/05/2019
 36156 00006A06 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36157 00006A0B 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36158                                  	;mov	ax,[es:di+2]
 36159 00006A0D 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36160                                  	;and	ax, 0F0h
 36161 00006A11 25F000                  	AND	AX,SHARING_MASK
 36162                                  	;cmp	ax,40h
 36163 00006A14 83F840                  	CMP	AX,SHARING_DENY_NONE
 36164 00006A17 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36165                                  	;cmp	ax,30h
 36166 00006A19 83F830                  	CMP	AX,SHARING_DENY_READ
 36167 00006A1C 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36168                                  NET_LSEEK:
 36169                                  ;	JMP	short LOCAL_LSeek
 36170                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36171                                  	;CallInstall Net_Lseek,MultNET,33
 36172                                  	;JNC	short LSeekSetPos
 36173                                  
 36174 00006A1E B82111                  	mov     ax,1121h
 36175 00006A21 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36176                                  			; CX:DX = offset (in bytes) from end
 36177                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36178                                  			; SS = DOS CS
 36179                                  			; Return: CF set on error
 36180                                  			; CF clear if successful, DX:AX = new file position
 36181 00006A23 73C0                    	jnb     short LSeekSetpos
 36182                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36183                                  	;jmp	SYS_RET_ERR
 36184                                  ;LSeekError3:
 36185                                  	; 17/12/2022
 36186                                  LSeekError:
 36187                                  	;jmp	short LSeekError2
 36188                                  DupErr:	; 17/12/2022
 36189 00006A25 E9659C                  	jmp	SYS_RET_ERR
 36190                                  
 36191                                  ;BREAK <FileTimes - modify write times on a handle>
 36192                                  ;----------------------------------------------------------------------------
 36193                                  ;
 36194                                  ;   Assembler usage:
 36195                                  ;	    MOV AH, FileTimes (57H)
 36196                                  ;	    MOV AL, func
 36197                                  ;	    MOV BX, handle
 36198                                  ;	; if AL = 1 then then next two are mandatory
 36199                                  ;	    MOV CX, time
 36200                                  ;	    MOV DX, date
 36201                                  ;	    INT 21h
 36202                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36203                                  ;	; for the handle.
 36204                                  ;
 36205                                  ;	AL=02		 get extended attributes
 36206                                  ;	   BX=handle
 36207                                  ;	   CX=size of buffer (0, return max size )
 36208                                  ;	   DS:SI query list (si=-1, selects all EA)
 36209                                  ;	   ES:DI buffer to hold EA list
 36210                                  ;
 36211                                  ;	AL=03		 get EA name list
 36212                                  ;	   BX=handle
 36213                                  ;	   CX=size of buffer (0, return max size )
 36214                                  ;	   ES:DI buffer to hold name list
 36215                                  ;
 36216                                  ;	AL=04		 set extended attributes
 36217                                  ;	   BX=handle
 36218                                  ;	   ES:DI buffer of EA list
 36219                                  ;
 36220                                  ;
 36221                                  ;   Error returns:
 36222                                  ;	    AX = error_invalid_function
 36223                                  ;	       = error_invalid_handle
 36224                                  ;
 36225                                  ;----------------------------------------------------------------------------
 36226                                  
 36227                                  ; 21/05/2019 - Retro DOS v4.0
 36228                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36229                                  
 36230                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36231                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36232                                  
 36233                                  _$FILE_TIMES:
 36234                                  	; 13/07/2018 - Retro DOS v3.0
 36235                                  
 36236                                  	; MSDOS 3.3
 36237                                  	;cmp	al,2			; correct subfunction ?
 36238                                  	;jb	short ft1
 36239                                  
 36240                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36241                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36242                                  						;SS Overr
 36243                                  	;;mov	al,1
 36244                                  	;mov	al,error_invalid_function ; give bad return
 36245                                  	;jmp	SYS_RET_ERR
 36246                                  
 36247                                  	; MSDOS 6.0
 36248 00006A28 3C02                    	cmp	al,2			; correct subfunction ?
 36249 00006A2A 7340                    	jae	short inval_func
 36250                                  ;ft1:
 36251 00006A2C E87300                  	call	CheckOwner		; get sft
 36252                                  	; 17/12/2022
 36253 00006A2F 72F4                    	jc	short LSeekError	; bad handle
 36254                                  
 36255 00006A31 08C0                    	or	al,al			; get time/date ?
 36256 00006A33 7515                    	jnz	short ft_set_time
 36257                                  
 36258                                  ;------ here we get the time & date from the sft for the user
 36259                                  
 36260 00006A35 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36261                                  	;mov	cx,[es:di+13]
 36262 00006A36 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36263                                  	;mov	dx,[es:di+15]
 36264 00006A3A 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36265 00006A3E FB                      	sti
 36266 00006A3F E8889A                  	call	Get_User_Stack
 36267                                  	;mov	[si+4],cx
 36268 00006A42 894C04                  	mov	[si+user_env.user_CX],cx
 36269                                  	;mov	[si+6],dx
 36270 00006A45 895406                  	mov	[si+user_env.user_DX],dx
 36271 00006A48 EB1F                    	jmp	short ok_ret
 36272                                  
 36273                                  ;------ here we set the time in sft
 36274                                  
 36275                                  ft_set_time:
 36276 00006A4A E846A9                  	call    ECritSFT
 36277                                  	;mov	[es:di+13],cx
 36278 00006A4D 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36279                                  	;mov	[es:di+15],dx
 36280 00006A51 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36281                                  
 36282 00006A55 31C0                    	xor	ax, ax
 36283 00006A57 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36284                                  
 36285                                  ;------ set the flags in SFT entry
 36286                                  	;and	word [es:di+5],0FFBFh
 36287                                  	; 18/12/2022
 36288                                  	;and	byte [es:di+5],0BFh
 36289 00006A5C 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36290                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36291                                  							; mark file as dirty
 36292                                  	;or	word [es:di+5],4000h
 36293                                  	; 17/12/2022
 36294                                  	;or	byte [es:di+6],40h
 36295 00006A61 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36296                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36297                                  							; ask close not to
 36298                                  							;   bother about date
 36299                                  							;   and time
 36300 00006A66 E845A9                  	call	LCritSFT
 36301                                  ok_ret:
 36302                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36303                                  	; 17/12/2022
 36304 00006A69 E9189C                  	jmp	SYS_RET_OK
 36305                                  	;jmp	short LSeekOk
 36306                                  
 36307                                  inval_func:
 36308                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36309 00006A6C 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36310                                  						;SS Overr
 36311                                  	;mov	al,1
 36312 00006A72 B001                    	mov	al,error_invalid_function ; give bad return
 36313                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36314                                  ft_error:
 36315                                  	;;jmp	SYS_RET_ERR
 36316                                  	;jmp	short LSeekError3
 36317                                  	; 17/12/2022
 36318 00006A74 EBAF                    	jmp	short LSeekError
 36319                                  
 36320                                  ; 21/05/2019 - Retro DOS v4.0
 36321                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36322                                  
 36323                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36324                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36325                                  
 36326                                  ;BREAK <$DUP - duplicate a jfn>
 36327                                  ;----------------------------------------------------------------------------
 36328                                  ;
 36329                                  ;   Assembler usage:
 36330                                  ;	    MOV     BX, fh
 36331                                  ;	    MOV     AH, Dup
 36332                                  ;	    INT     int_command
 36333                                  ;	  AX has the returned handle
 36334                                  ;   Errors:
 36335                                  ;	    AX = dup_invalid_handle
 36336                                  ;	       = dup_too_many_open_files
 36337                                  ;
 36338                                  ;----------------------------------------------------------------------------
 36339                                  
 36340                                  _$DUP:
 36341 00006A76 89D8                    	MOV	AX,BX			; save away old handle in AX
 36342 00006A78 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36343                                  DupErrorCheck:
 36344 00006A7B 72A8                    	JC	short DupErr		; nope, bye
 36345 00006A7D 06                      	push	es
 36346 00006A7E 57                      	push	di			; save away SFT
 36347 00006A7F 5E                      	pop	si			; into convenient place DS:SI
 36348 00006A80 1F                      	pop	ds
 36349 00006A81 93                      	XCHG	AX,BX			; get back old handle
 36350 00006A82 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36351 00006A85 729E                    	JC	short DupErr		; errors go home
 36352 00006A87 E861C0                  	call	DOS_Dup_Direct
 36353 00006A8A E800FD                  	call	pJFNFromHandle		; get pointer
 36354 00006A8D 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36355 00006A90 881C                    	MOV	[SI],BL			; stuff in new SFT
 36356                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36357                                  	;jmp	SYS_RET_OK		; and go home
 36358 00006A92 EBD5                    	jmp	short ok_ret
 36359                                  
 36360                                  	; 17/12/2022
 36361                                  ;DupErr:
 36362                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36363                                  	;;jmp	SYS_RET_ERR
 36364                                  	;jmp	short ft_error
 36365                                  
 36366                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36367                                  ;----------------------------------------------------------------------------
 36368                                  ;
 36369                                  ;   Assembler usage:
 36370                                  ;	    MOV     BX, fh
 36371                                  ;	    MOV     CX, newfh
 36372                                  ;	    MOV     AH, Dup2
 36373                                  ;	    INT     int_command
 36374                                  ;   Error returns:
 36375                                  ;	    AX = error_invalid_handle
 36376                                  ;
 36377                                  ;----------------------------------------------------------------------------
 36378                                  
 36379                                  _$DUP2:
 36380 00006A94 53                      	push	bx
 36381 00006A95 51                      	push	cx			; save source
 36382 00006A96 89CB                    	MOV	BX,CX			; get one to close
 36383 00006A98 E8AAFD                  	call	_$CLOSE			; close destination handle
 36384 00006A9B 5B                      	pop	bx
 36385 00006A9C 58                      	pop	ax			; old in AX, new in BX
 36386 00006A9D E8EDFC                  	call	pJFNFromHandle		; get pointer
 36387 00006AA0 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36388                                  
 36389                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36390                                  ;----------------------------------------------------------------------------
 36391                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36392                                  ;   process without the process knowing it (delete/rename of open files, for
 36393                                  ;   example), it is possible for the redirector to issue a call to a handle
 36394                                  ;   that it soes not rightfully own. We check here to make sure that the
 36395                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36396                                  ;   SFFromHandle to really make sure that the SFT is good.
 36397                                  ;
 36398                                  ;	ENTRY	BX has the handle
 36399                                  ;		User_ID is the current user
 36400                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36401                                  ;		Carry Set => AX has error code
 36402                                  ;	USES	none
 36403                                  ;----------------------------------------------------------------------------
 36404                                  
 36405                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36406                                  	; 21/05/2019 - Retro DOS v4.0
 36407                                  CheckOwner:
 36408                                  	; 13/07/2018 - Retro DOS v3.0
 36409                                  
 36410 00006AA2 E805FD                  	call	SFFromHandle
 36411 00006AA5 721B                    	jc	short co_ret_label	; retc
 36412                                  
 36413 00006AA7 50                      	push	ax
 36414                                  
 36415                                  	; MSDOS 6.0
 36416                                  
 36417                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36418                                  ;SR; are shared across multiple VMs in win386.
 36419                                  
 36420 00006AA8 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36421 00006AAE 7404                    	jz	short no_win386		;win386 is not present
 36422 00006AB0 31C0                    	xor	ax,ax			;set the zero flag
 36423 00006AB2 EB08                    	jmp	short _skip_win386	
 36424                                  
 36425                                  no_win386:
 36426 00006AB4 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36427                                  	;cmp	ax,[es:di+47]
 36428 00006AB8 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36429                                  
 36430                                  _skip_win386:
 36431 00006ABC 58                      	pop	ax
 36432                                  	
 36433                                  	; 17/12/2022
 36434 00006ABD 7403                    	jz	short co_ret_label
 36435                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36436                                  	;jnz	short CheckOwner_err
 36437                                  	;retn
 36438                                  	
 36439                                  CheckOwner_err:
 36440                                  	;mov	al,6
 36441 00006ABF B006                    	mov	al,error_invalid_handle
 36442 00006AC1 F9                      	stc
 36443                                  
 36444                                  co_ret_label:
 36445 00006AC2 C3                      	retn
 36446                                  
 36447                                  ;============================================================================
 36448                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36449                                  ;============================================================================
 36450                                  ; Retro	DOS v3.0 - 11/07/2018
 36451                                  ; 21/05/2019 - Retro DOS v4.0
 36452                                  
 36453                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36454                                  ;	NAME	MACRO
 36455                                  
 36456                                  ;	Microsoft Confidential
 36457                                  ;	Copyright (C) Microsoft Corporation 1991
 36458                                  ;	All Rights Reserved.
 36459                                  
 36460                                  ;**	MACRO.ASM
 36461                                  ;
 36462                                  ;	$AssignOper
 36463                                  ;	FIND_DPB
 36464                                  ;	InitCDS
 36465                                  ;	$UserOper
 36466                                  ;	GetVisDrv
 36467                                  ;	GetThisDrv
 36468                                  ;	GetCDSFromDrv
 36469                                  ;
 36470                                  ;   Revision history:
 36471                                  ;
 36472                                  ;	Created: MZ 4 April 1983
 36473                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36474                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36475                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36476                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36477                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36478                                  ;				    aliasing.
 36479                                  ;
 36480                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36481                                  ;   each valid drive letter the text of the current directory on that drive.
 36482                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36483                                  ;   be at the root. A current directory is either the raw local directory
 36484                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36485                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36486                                  ;
 36487                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36488                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36489                                  ;   this and all * are expanded into ?'s.
 36490                                  ;
 36491                                  ;   The second part of name translation involves subtree aliasing. A list of
 36492                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36493                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36494                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36495                                  ;   replaced with the other subtree in the pair.
 36496                                  ;
 36497                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36498                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36499                                  ;   The output of the previous translation is examined to see if any of the
 36500                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36501                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36502                                  ;   'mount' one device under another.
 36503                                  ;
 36504                                  ;   The final form of name translation involves the mapping of a user's
 36505                                  ;   logical drive number into the internal physical drive. This is
 36506                                  ;   accomplished by converting the drive number into letter:CON, performing
 36507                                  ;   the above translation and then converting the character back into a drive
 36508                                  ;   number.
 36509                                  ;
 36510                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36511                                  ;   take a path and form the real text of the pathname with all . and ..
 36512                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36513                                  ;   TransPath.
 36514                                  ;
 36515                                  ;	A000	version 4.00  Jan. 1988
 36516                                  
 36517                                  ;Installed = TRUE
 36518                                  
 36519                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36520                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36521                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36522                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36523                                  ;					; current drive)
 36524                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36525                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36526                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36527                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36528                                  ;	I_need	MYNAME,16		; machine name
 36529                                  ;	I_need	MYNUM,WORD		; machine number
 36530                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36531                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36532                                  ;	I_need	DrvErr,BYTE		; drive error
 36533                                  
 36534                                  ;BREAK <$AssignOper -- Set up a Macro>
 36535                                  ;----------------------------------------------------------------------------
 36536                                  ; Inputs:
 36537                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36538                                  ;	AL = 01 set assign mode 		    (SetMode)
 36539                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36540                                  ;	AL = 03 Define Macro (attch start)
 36541                                  ;	    BL = Macro type
 36542                                  ;	       = 0 alias
 36543                                  ;	       = 1 file/device
 36544                                  ;	       = 2 drive
 36545                                  ;	       = 3 Char device -> network
 36546                                  ;	       = 4 File device -> network
 36547                                  ;	    DS:SI -> ASCIZ source name
 36548                                  ;	    ES:DI -> ASCIZ destination name
 36549                                  ;	AL = 04 Cancel Macro
 36550                                  ;	    DS:SI -> ASCIZ source name
 36551                                  ;	AL = 05 Modified get attach list entry
 36552                                  ;	AL = 06 Get ifsfunc item
 36553                                  ;	AL = 07 set in_use of a drive's CDS
 36554                                  ;	     DL = drive number, 0=default  0=A,,
 36555                                  ;	AL = 08 reset in_use of a drive's CDS
 36556                                  ;	     DL = drive number, 0=A, 1=B,,,
 36557                                  ; Function:
 36558                                  ;	Do macro stuff
 36559                                  ; Returns:
 36560                                  ;	Std Xenix style error return
 36561                                  ;----------------------------------------------------------------------------
 36562                                  
 36563                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36564                                  	; 21/05/2019 - Retro DOS v4.0
 36565                                  _$AssignOper:
 36566                                  	; MSDOS 6.0
 36567 00006AC3 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36568 00006AC5 7525                    	JNZ	short chk08		      ; no			;AN000;
 36569                                  srinuse:								;AN000;
 36570 00006AC7 50                      	PUSH	AX			      ; save al 		;AN000;
 36571 00006AC8 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36572 00006ACA E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36573 00006ACD 58                      	POP	AX			      ; 			;AN000;
 36574 00006ACE 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36575                                  	;cmp	word [si+45h],0
 36576 00006AD0 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36577 00006AD4 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36578 00006AD6 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36579 00006AD8 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36580                                  	;or	word [si+43h],4000h
 36581                                  	; 17/12/2022
 36582                                  	;or	byte [si+44h],40h
 36583 00006ADA 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36584                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36585 00006ADE EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36586                                  resetdrv:
 36587                                  	;and	word [si+43h],0BFFFh									;AN000;
 36588                                  	; 18/12/2022
 36589 00006AE0 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36590                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36591 00006AE4 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36592                                  
 36593                                  	; 17/12/2022
 36594                                  baddrv: 								;AN000;
 36595 00006AE6 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36596                                  
 36597                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36598                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36599                                  	; 17/12/2022
 36600                                  	; 21/05/2019
 36601                                  ASS_ERR:
 36602 00006AE9 E9A19B                  	jmp	SYS_RET_ERR
 36603                                  
 36604                                  chk08:									;AN000;
 36605 00006AEC 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36606 00006AEE 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36607                                  
 36608                                    ;IF	NOT INSTALLED
 36609                                  	;transfer NET_ASSOPER
 36610                                    ;ELSE
 36611                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36612 00006AF0 50                      	PUSH	AX
 36613                                  	;mov	ax,111Eh
 36614                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36615 00006AF1 B81E11                  	mov	ax,(MultNET*256)+30
 36616 00006AF4 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36617                                  			; SS = DOS CS
 36618                                  			; STACK: WORD function to execute
 36619                                  			; Return: CF set on error, AX = error code
 36620                                  			; STACK unchanged
 36621 00006AF6 5B                      	POP	BX			; Don't zap error code in AX
 36622 00006AF7 72F0                    	JC	short ASS_ERR
 36623                                  okdone:
 36624 00006AF9 E9889B                  	jmp	SYS_RET_OK
 36625                                  
 36626                                  	; 17/12/2022
 36627                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36628                                  ;ASS_ERR:
 36629                                  	;jmp	SYS_RET_ERR
 36630                                  
 36631                                    ;ENDIF
 36632                                  
 36633                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36634                                  ;----------------------------------------------------------------------------
 36635                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36636                                  ;
 36637                                  ;	ENTRY	AL has drive number A = 0
 36638                                  ;	EXIT	'C' set
 36639                                  ;		    No DPB for this drive number
 36640                                  ;		'C' clear
 36641                                  ;		    DS:SI points to DPB for drive
 36642                                  ;	USES	SI, DS, Flags
 36643                                  ;----------------------------------------------------------------------------
 36644                                  
 36645                                  	; 21/05/2019 - Retro DOS v4.0
 36646                                  FIND_DPB:
 36647 00006AFC 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36648                                  fdpb5:	
 36649 00006B01 83FEFF                  	CMP	SI,-1
 36650 00006B04 7409                    	JZ	short fdpb10
 36651 00006B06 3A04                    	cmp	al,[si]
 36652                                  	;CMP	AL,[SI+DPB.DRIVE]
 36653 00006B08 7406                    	jz	short ret_label15	; Carry clear (retz)
 36654                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36655                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36656 00006B0A C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36657 00006B0D EBF2                    	JMP	short fdpb5
 36658                                  fdpb10:	
 36659 00006B0F F9                      	STC
 36660                                  ret_label15:
 36661 00006B10 C3                      	retn
 36662                                  
 36663                                  ;	Break <InitCDS - set up an empty CDS>
 36664                                  ;----------------------------------------------------------------------------
 36665                                  ;**	InitCDS - Setup an Empty CDS
 36666                                  ;
 36667                                  ;	ENTRY	ThisCDS points to CDS
 36668                                  ;		AL has uppercase drive letter
 36669                                  ;	EXIT	ThisCDS is now empty
 36670                                  ;		(ES:DI) = CDS
 36671                                  ;		'C' set if no DPB associated with drive
 36672                                  ;	USES	AH,ES,DI, Flags
 36673                                  ;----------------------------------------------------------------------------
 36674                                  
 36675                                  ; 21/05/2019 - Retro DOS v4.0
 36676                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36677                                  
 36678                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36679                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36680                                  
 36681                                  InitCDS:
 36682                                  	; 19/08/2018
 36683                                  	; 05/08/2018 - Retro DOS v3.0
 36684                                  	; MSDOS 6.0
 36685 00006B11 50                      	push	ax			; save (AL) for caller
 36686 00006B12 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36687                                  	;mov	word [es:di+67],0
 36688 00006B17 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36689 00006B1D 2C40                    	SUB	AL,"A"-1                ; A = 1
 36690 00006B1F 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36691 00006B24 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36692 00006B26 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36693 00006B27 50                      	PUSH	AX			; save drive number for later
 36694 00006B28 0441                    	add	al,"A"
 36695 00006B2A B43A                    	MOV	AH,':'
 36696 00006B2C 268905                  	mov	[ES:DI],ax
 36697                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36698                                  	;mov	ax,"\"
 36699                                  	;mov	[es:di+2],ax
 36700                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36701 00006B2F 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36702                                  	;or	word [es:di+67],4000h
 36703                                  	;or	byte [es:di+68],40h
 36704 00006B35 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36705 00006B3A 29C0                    	sub	ax,ax
 36706                                  	;MOV	[es:di+73],ax ; 0
 36707 00006B3C 26894549                	MOV	[ES:DI+curdir.ID],ax
 36708                                  	;mov	[es:di+75],ax ; 0
 36709 00006B40 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36710 00006B44 B002                    	mov	al,2
 36711                                  	;mov	[es:di+79],aX ; 2
 36712 00006B46 2689454F                	MOV	[ES:DI+curdir.end],ax
 36713 00006B4A 58                      	POP	AX			; (al) = drive number
 36714 00006B4B 1E                      	push	ds
 36715 00006B4C 56                      	push	si
 36716 00006B4D E8ACFF                  	call	FIND_DPB
 36717 00006B50 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36718                                  	;mov	[es:di+69],si
 36719 00006B52 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36720                                  	;mov	[es:di+71],ds
 36721 00006B56 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36722                                  icds5:	
 36723 00006B5A 5E                      	pop	si
 36724 00006B5B 1F                      	pop	ds
 36725                                  icdsx:	
 36726 00006B5C 58                      	pop	ax
 36727                                  RET45:
 36728 00006B5D C3                      	retn
 36729                                  
 36730                                  ;Break <$UserOper - get/set current user ID (for net)>
 36731                                  ;----------------------------------------------------------------------------
 36732                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36733                                  ;	maintain this string and do no verifications.
 36734                                  ;
 36735                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36736                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36737                                  ;		DS:DX is user string pointer (calls 1,2)
 36738                                  ;		ES:DI is user buffer (call 3)
 36739                                  ;		BX is assign index (calls 2,3,4,5)
 36740                                  ;		CX is user number (call 1)
 36741                                  ;		DX is flag word (call 4)
 36742                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36743                                  ;			and user CX is set to the user number
 36744                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36745                                  ;		If AL = 5 then DX is flag word
 36746                                  ;----------------------------------------------------------------------------
 36747                                  
 36748                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36749                                  	; 21/05/2019 - Retro DOS v4.0
 36750                                  _$UserOper:
 36751                                  	; 05/08/2018 - Retro DOS v3.0
 36752                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36753 00006B5E 50                      	PUSH	AX
 36754 00006B5F 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36755 00006B61 58                      	POP	AX
 36756 00006B62 7211                    	JB	short UserGet 		; return to user the string
 36757 00006B64 742E                    	JZ	short UserSet 		; set the current user
 36758 00006B66 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36759 00006B68 763D                    	JBE	short UserPrint		; yep
 36760                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36761 00006B6A 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 36762                                  					; Extended Error Locus
 36763                                  	;error	error_invalid_function	; not 0,1,2,3
 36764                                  	;mov	al,1
 36765 00006B70 B001                    	MOV	AL,error_invalid_function
 36766                                  useroper_error:
 36767                                  	; 17/12/2022
 36768                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36769 00006B72 E9189B                  	JMP	SYS_RET_ERR
 36770                                  	;jmp	short ASS_ERR
 36771                                  
 36772                                  UserGet:
 36773                                  ; Transfer MYNAME to DS:DX
 36774                                  ; Set Return CX to MYNUM
 36775 00006B75 1E                      	PUSH	DS			; switch registers
 36776 00006B76 07                      	POP	ES
 36777 00006B77 89D7                    	MOV	DI,DX			; destination
 36778 00006B79 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 36779 00006B7E E84999                  	call	Get_User_Stack
 36780                                  	;mov	[si+4],cx
 36781 00006B81 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 36782 00006B84 16                      	push	ss			; point to DOSDATA
 36783 00006B85 1F                      	pop	ds
 36784 00006B86 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 36785                                  UserMove:
 36786 00006B89 B90F00                  	MOV	CX,15
 36787 00006B8C F3A4                    	REP	MOVSB			; blam.
 36788 00006B8E 31C0                    	XOR	AX,AX			; 16th byte is 0
 36789 00006B90 AA                      	STOSB
 36790                                  UserBye:
 36791 00006B91 E9F09A                  	jmp	SYS_RET_OK		; no errors here
 36792                                  
 36793                                  UserSet:
 36794                                  ; Transfer DS:DX to MYNAME
 36795                                  ; CX to MYNUM
 36796 00006B94 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 36797 00006B99 89D6                    	MOV	SI,DX			; user space has source
 36798 00006B9B 16                      	push	ss
 36799 00006B9C 07                      	pop	es
 36800 00006B9D BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 36801 00006BA0 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 36802 00006BA5 EBE2                    	JMP	short UserMove
 36803                                  
 36804                                  UserPrint:
 36805                                  
 36806                                    ;IF NOT Installed
 36807                                    ;	transfer PRINTER_GETSET_STRING
 36808                                    ;ELSE
 36809 00006BA7 50                      	PUSH	AX
 36810                                  	;mov	ax,111Fh
 36811                                  	;MOV	AX,(MultNET SHL 8) OR 31
 36812 00006BA8 B81F11                  	mov	ax,(MultNET<<8)|31
 36813 00006BAB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 36814                                  			; STACK: WORD function
 36815                                  			; Return: CF set on error, AX = error code
 36816                                  			; STACK unchanged
 36817 00006BAD 5A                      	POP	DX			; Clean stack
 36818                                  	;JNC	short OKPA
 36819 00006BAE 73E1                    	jnc	short UserBye ; 21/05/2019
 36820                                  	; 17/12/2022
 36821 00006BB0 EBC0                    	jmp	short useroper_error
 36822                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36823                                  	;jnb     short OKPA
 36824                                  	;jmp     short useroper_error
 36825                                  
 36826                                  	; 17/12/2022
 36827                                  ;OKPA:
 36828                                  ;	jmp	short UserBye
 36829                                  
 36830                                    ;ENDIF
 36831                                  
 36832                                  
 36833                                  ;Break	<GetVisDrv - return visible drive>
 36834                                  ;----------------------------------------------------------------------------
 36835                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 36836                                  ;
 36837                                  ;   Inputs:	AL has drive identifier (0=default)
 36838                                  ;   Outputs:	Carry Set - invalid drive/macro
 36839                                  ;		Carry Clear - AL has physical drive (0=A)
 36840                                  ;		    ThisCDS points to CDS
 36841                                  ;   Registers modified: AL
 36842                                  ;----------------------------------------------------------------------------
 36843                                  
 36844                                  	; 21/05/2019 - Retro DOS v4.0
 36845                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 36846                                  
 36847                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36848                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 36849                                  GetVisDrv:
 36850                                  	; 05/08/2018 - Retro DOS v3.0
 36851                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 36852 00006BB2 E81900                  	CALL	GETTHISDRV		; get inuse drive
 36853 00006BB5 72A6                    	jc	short RET45
 36854 00006BB7 1E                      	push	ds
 36855 00006BB8 56                      	push	si
 36856 00006BB9 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 36857                                  	;test	word [si+67],2000h
 36858                                  	; 17/12/2022
 36859                                  	;test	byte [si+68],20h
 36860 00006BBE F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 36861                                  	;TEST	word [SI+curdir.flags],curdir_splice
 36862 00006BC2 5E                      	pop	si
 36863 00006BC3 1F                      	pop	ds
 36864 00006BC4 7497                    	jz	short RET45		; if not spliced, return OK
 36865                                  	; MSDOS 6.0
 36866                                  	;mov	byte [ss:DrvErr],0Fh
 36867 00006BC6 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 36868 00006BCC F9                      	STC				; signal error
 36869 00006BCD C3                      	retn
 36870                                  
 36871                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 36872                                  ;----------------------------------------------------------------------------
 36873                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 36874                                  ;	macro pointer
 36875                                  ;
 36876                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 36877                                  ;   Outputs:
 36878                                  ;		Carry Set - invalid drive/macro
 36879                                  ;		Carry Clear - AL has physical drive (0=A)
 36880                                  ;		   ThisCDS points to macro
 36881                                  ;   Registers modified: AL
 36882                                  ;----------------------------------------------------------------------------
 36883                                  
 36884                                  	; 21/05/2019 - Retro DOS v4.0
 36885                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 36886                                  
 36887                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36888                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 36889                                  GETTHISDRV:
 36890                                  	; 05/08/2018
 36891                                  	; 12/07/2018 - Retro DOS v3.0
 36892                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 36893                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36894 00006BCE 08C0                    	OR	AL,AL			; are we using default drive?
 36895 00006BD0 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 36896 00006BD2 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 36897                                  	;INC	ax			; Counteract next instruction
 36898                                  	; 04/09/2018
 36899                                  	;inc	al
 36900                                  	; 07/12/2022
 36901 00006BD6 40                      	inc	ax
 36902                                  GTD10:	
 36903                                  	;DEC	AX
 36904                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36905 00006BD7 48                      	dec	ax			; 0 = A
 36906                                  	;dec	al
 36907 00006BD8 1E                      	PUSH	DS			; save world
 36908 00006BD9 56                      	PUSH	SI
 36909                                  	;mov	byte [ss:EXTERR_LOCUS],2
 36910 00006BDA 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 36911 00006BE0 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 36912 00006BE6 7420                    	JZ	SHORT GTD20		; Logical
 36913 00006BE8 50                      	PUSH	AX
 36914 00006BE9 06                      	PUSH	ES
 36915 00006BEA 57                      	PUSH	DI
 36916 00006BEB 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 36917                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 36918 00006BF2 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 36919 00006BF7 0441                    	ADD	AL,'A'
 36920 00006BF9 E815FF                  	CALL	InitCDS			; InitCDS(c);
 36921                                  	;test	word [es:di+67],4000h
 36922                                  	; 17/12/2022
 36923                                  	;test	byte [es:di+68],40h
 36924 00006BFC 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36925                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 36926 00006C01 5F                      	POP	DI
 36927 00006C02 07                      	POP	ES
 36928 00006C03 58                      	POP	AX
 36929 00006C04 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 36930 00006C06 EB18                    	JMP	SHORT GTDX		; carry clear
 36931                                  GTD20:
 36932 00006C08 E81800                  	CALL	GetCDSFromDrv
 36933 00006C0B 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 36934                                  	;test	word [si+43h],4000h
 36935                                  	; 17/12/2022
 36936                                  	;test	byte [si+44h],40h
 36937 00006C0D F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36938                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 36939 00006C11 750D                    	JNZ	SHORT GTDX		; carry clear
 36940                                  GTD30:	
 36941                                  	; 21/05/2019
 36942                                  	; MSDOS 6.0
 36943 00006C13 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 36944 00006C15 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 36945                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 36946 00006C19 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 36947 00006C1F F9                      	STC
 36948                                  GTDX:	
 36949 00006C20 5E                      	POP	SI			; restore world
 36950 00006C21 1F                      	POP	DS
 36951 00006C22 C3                      	RETN
 36952                                   
 36953                                  
 36954                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 36955                                  ;----------------------------------------------------------------------------
 36956                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 36957                                  ;	pointer, returning an error if the drive number is greater than the
 36958                                  ;	number of CDS's
 36959                                  ;
 36960                                  ;   Inputs:	AL is physical unit # A=0...
 36961                                  ;   Outputs:	Carry Set if Bad Drive
 36962                                  ;		Carry Clear
 36963                                  ;		    DS:SI -> CDS
 36964                                  ;		    [THISCDS] = DS:SI
 36965                                  ;   Registers modified: DS,SI
 36966                                  ;----------------------------------------------------------------------------
 36967                                  
 36968                                  	; 21/05/2019 - Retro DOS v4.0
 36969                                  GetCDSFromDrv:
 36970 00006C23 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 36971 00006C28 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 36972 00006C2A F9                      	STC				; signal error
 36973 00006C2B C3                      	RETN				; bye
 36974                                  GetCDS:
 36975 00006C2C 53                      	PUSH	BX
 36976 00006C2D 50                      	PUSH	AX
 36977 00006C2E 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 36978                                  	;mov	bl,81 ; MSDOS 3.3
 36979                                  	;mov	bl,88 ; MSDOS 6.0 
 36980 00006C33 B358                    	MOV	BL,curdir.size		; size in convenient spot
 36981 00006C35 F6E3                    	MUL	BL			; get net offset
 36982 00006C37 01C6                    	ADD	SI,AX			; convert to true pointer
 36983 00006C39 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 36984 00006C3E 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 36985 00006C43 58                      	POP	AX
 36986 00006C44 5B                      	POP	BX
 36987 00006C45 F8                      	CLC				; no error
 36988 00006C46 C3                      	RETN				; bye!
 36989                                  
 36990                                  ;============================================================================
 36991                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 36992                                  ;============================================================================
 36993                                  ; Retro	DOS v3.0 - 12/07/2018
 36994                                  ; 22/05/2019 - Retro DOS v4.0
 36995                                  
 36996                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 36997                                  ;----------------------------------------------------------------------------
 36998                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 36999                                  ;       gritty substitution.
 37000                                  ;
 37001                                  ;   Inputs:     DS:DX - pointer to FCB
 37002                                  ;               ES:DI - point to destination
 37003                                  ;   Outputs:    Carry Set - invalid path in final map
 37004                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37005                                  ;                   Sattrib is set from possibly extended FCB
 37006                                  ;                   ExtFCB set if extended FCB found
 37007                                  ;   Registers modified: most
 37008                                  ;----------------------------------------------------------------------------
 37009                                  
 37010                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37011                                  TransFCB:
 37012                                  	; 22/05/2019 - Retro DOS v4.0
 37013                                  	; 12/07/2018 - Retro DOS v3.0
 37014                                  	;LocalVar FCBTmp,16
 37015                                  	;ENTER
 37016 00006C47 55                      	push	bp
 37017 00006C48 89E5                    	mov	bp,sp
 37018                                  	;sub	sp,15	; MSDOS 3.3
 37019 00006C4A 83EC10                  	sub	sp,16	; MSDOS 6.0
 37020 00006C4D 16                      	push	ss
 37021 00006C4E 07                      	pop	es
 37022 00006C4F 06                      	push	es
 37023 00006C50 57                      	push	di
 37024                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37025                                  	;LEA	DI,FCBTmp 
 37026 00006C51 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37027 00006C54 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37028 00006C5A 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37029 00006C60 E89FB0                  	call	GetExtended             ; get FCB, extended or not
 37030                                  	; 06/12/2022
 37031 00006C63 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37032 00006C65 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37033 00006C68 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37034 00006C6C 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37035                                  GetDrive:
 37036 00006C72 AC                      	lodsb				; get drive byte
 37037 00006C73 E858FF                  	call	GETTHISDRV
 37038 00006C76 722A                    	jc	short BadPack
 37039 00006C78 E87403                  	call	TextFromDrive           ; convert 0-based drive to text
 37040                                  
 37041                                  ; Scan the source to see if there are any illegal chars
 37042                                  
 37043                                  	;mov	bx,CharType		; load lookup table
 37044 00006C7B B90B00                  	mov	cx,11
 37045 00006C7E 56                      	push	si			; back over name, ext
 37046                                  FCBScan:
 37047 00006C7F AC                      	lodsb				; get a byte
 37048                                  	
 37049                                  	; 09/08/2018
 37050                                  	;;xlat	byte [es:bx]
 37051                                  	;es	xlat
 37052                                  
 37053                                  	; 22/05/2019 - Retro DOS v4.0	
 37054 00006C80 E81CE5                  	call	GetCharType		; get flags
 37055                                  
 37056                                  	;test	al,8	
 37057 00006C83 A808                    	test	al,FFCB
 37058 00006C85 741B                    	jz	short BadPack
 37059                                  NextCh: 
 37060 00006C87 E2F6                    	loop	FCBScan
 37061 00006C89 5E                      	pop	si
 37062 00006C8A 89FB                    	mov	bx,di
 37063 00006C8C E8CCB4                  	call	PackName                ; crunch the path
 37064 00006C8F 5F                      	pop	di			; get original destination
 37065 00006C90 07                      	pop	es
 37066 00006C91 16                      	push	ss			; get DS addressability
 37067 00006C92 1F                      	pop	ds
 37068                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37069                                  	;LEA	SI,FCBTmp		; point at new pathname
 37070 00006C93 8D76F0                  	lea	si,[bp-16]
 37071 00006C96 803F00                  	cmp	byte [bx],0
 37072 00006C99 7407                    	jz	short BadPack
 37073 00006C9B 55                      	push	bp
 37074 00006C9C E80E00                  	call	TransPathSet            ; convert the path
 37075 00006C9F 5D                      	pop	bp
 37076 00006CA0 7303                    	jnc	short FCBRet		; bye with transPath error code
 37077                                  BadPack:
 37078 00006CA2 F9                      	STC
 37079                                  	;mov	al,3
 37080 00006CA3 B003                    	MOV     AL,error_path_not_found
 37081                                  FCBRet: 
 37082                                  	;LEAVE
 37083 00006CA5 89EC                    	mov	sp,bp
 37084 00006CA7 5D                      	pop	bp
 37085                                  TransPath_retn:
 37086 00006CA8 C3                      	retn
 37087                                  
 37088                                  ; 12/07/2018 - Retro DOS v3.0
 37089                                  
 37090                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37091                                  ;----------------------------------------------------------------------------
 37092                                  ;
 37093                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37094                                  ;       substitution, insertion of current directory and fixing . and ..
 37095                                  ;       entries. Perform splicing. Allow input string to match splice
 37096                                  ;       exactly.
 37097                                  ;
 37098                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37099                                  ;       matches splice.
 37100                                  ;
 37101                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37102                                  ;
 37103                                  ;   The following anomalous behaviour is required:
 37104                                  ;
 37105                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37106                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37107                                  ;       Raw net I/O sets ThisCDS => NULL.
 37108                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37109                                  ;
 37110                                  ;   Other behaviour:
 37111                                  ;
 37112                                  ;       ThisCDS set up.
 37113                                  ;       FatRead done on local CDS.
 37114                                  ;       ValidateCDS done on local CDS.
 37115                                  ;
 37116                                  ;   Brief flowchart:
 37117                                  ;
 37118                                  ;       if fSharing then
 37119                                  ;           set up DummyCDS (ThisCDS)
 37120                                  ;           canonicalize (sets cMeta)
 37121                                  ;           splice
 37122                                  ;           fatRead
 37123                                  ;           return
 37124                                  ;       if \\ or d:\\ lead then
 37125                                  ;           set up null CDS (ThisCDS)
 37126                                  ;           canonicalize (sets cMeta)
 37127                                  ;           return
 37128                                  ;       if device then
 37129                                  ;           set up dummyCDS (ThisCDS)
 37130                                  ;           canonicalize (sets cMeta)
 37131                                  ;           return
 37132                                  ;       if file then
 37133                                  ;           getCDS (sets (ThisCDS) from name)
 37134                                  ;           validateCDS (may reset current dir)
 37135                                  ;           Copy current dir
 37136                                  ;           canonicalize (set cMeta)
 37137                                  ;           splice
 37138                                  ;           generate correct CDS (ThisCDS)
 37139                                  ;           if local then
 37140                                  ;               fatread
 37141                                  ;           return
 37142                                  ;
 37143                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37144                                  ;               DI - point to buffer in DOSDATA
 37145                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37146                                  ;                   syntax, etc. or user FAILed to I 24.
 37147                                  ;               WFP_Start - points to beginning of buffer
 37148                                  ;               Curr_Dir_End - points to end of current dir in path
 37149                                  ;               DS - DOSDATA
 37150                                  ;   Registers modified: most
 37151                                  ;
 37152                                  ;----------------------------------------------------------------------------
 37153                                  
 37154                                  ; 22/05/2019
 37155                                  ; 13/05/2019 - Retro DOS v4.0
 37156                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37157                                  
 37158                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37159                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37160                                  
 37161                                  TransPath:
 37162 00006CA9 30C0                    	XOR     AL,AL
 37163 00006CAB EB02                    	JMP     SHORT SetSplice
 37164                                  TransPathSet:
 37165 00006CAD B0FF                    	MOV     AL,-1
 37166                                  SetSplice:
 37167 00006CAF 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37168 00006CB3 B0FF                    	MOV     AL,-1
 37169                                  TransPathNoSet:
 37170 00006CB5 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37171 00006CB9 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37172 00006CBF 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37173 00006CC4 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37174 00006CCB 16                      	push	ss
 37175 00006CCC 07                      	pop	es
 37176                                  	;lea	bp,[di+134]
 37177 00006CCD 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37178                                  ;
 37179                                  ; if this is through the server dos call, fsharing is set. We set up a
 37180                                  ; dummy cds and let the operation go.
 37181                                  ;
 37182 00006CD1 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37183 00006CD7 7435                    	JZ	short CheckUNC		; skip to UNC check
 37184                                  ;
 37185                                  ; ES:DI point to buffer
 37186                                  ;
 37187 00006CD9 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37188 00006CDC E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37189 00006CDF 722A                    	jc	short NoPath
 37190 00006CE1 E80B03                  	CALL	TextFromDrive		; drop in new
 37191 00006CE4 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37192 00006CE7 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37193 00006CEA 72BC                    	jc	short TransPath_retn	; errors
 37194                                  ;
 37195                                  ; Perform splices for net guys.
 37196                                  ;
 37197 00006CEC 16                      	push	ss
 37198 00006CED 1F                      	pop	ds
 37199 00006CEE 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37200 00006CF2 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37201 00006CF7 7403                    	JZ	short NoServerSplice
 37202 00006CF9 E83102                  	CALL    Splice
 37203                                  NoServerSplice:
 37204 00006CFC 16                      	push	ss
 37205 00006CFD 1F                      	pop	ds                      ; for FATREAD
 37206 00006CFE C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37207 00006D02 E88EA6                  	call	ECritDisk
 37208 00006D05 E80AEB                  	call	FATREAD_CDS
 37209 00006D08 E8A3A6                  	call	LCritDisk
 37210                                  NoPath:
 37211                                  	;mov	al,3
 37212 00006D0B B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37213 00006D0D C3                      	retn				; any errors are in Carry flag
 37214                                  
 37215                                  ; Let the network decide if the name is for a spooled device. It will map
 37216                                  ; the name if so.
 37217                                  
 37218                                  CheckUNC:
 37219 00006D0E 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37220                                  	;CallInstall NetSpoolCheck,MultNET,35
 37221 00006D15 B82311                  	mov	ax,1123h
 37222 00006D18 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37223                                  			; DS:SI -> ASCIZ filename to canonicalize
 37224                                  			; ES:DI -> 128-byte buffer for qualified name
 37225                                  			; Return: CF set if not resolved
 37226 00006D1A 7329                    	JNC	short UNCDone
 37227                                  
 37228                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37229                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37230                                  ; input, then the name has been changed to the remote spooler by the above net
 37231                                  ; call. Also, there may be a drive in front of the \\.
 37232                                  
 37233                                  NO_CHECK:
 37234 00006D1C E8B902                  	CALL    DriveFromText		; eat drive letter
 37235 00006D1F 50                      	PUSH    AX                      ; save it
 37236 00006D20 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37237 00006D22 E897E4                  	call    PATHCHRCMP              ; convert to normal form
 37238 00006D25 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37239 00006D27 E892E4                  	call    PATHCHRCMP              ; convert to normal form
 37240 00006D2A 751F                    	JNZ	short CheckDevice	; not a path char
 37241 00006D2C 38C4                    	CMP     AH,AL                   ; are they same?
 37242 00006D2E 751B                    	JNZ	short CheckDevice	; nope
 37243                                  
 37244                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37245                                  ; local machine root path
 37246                                  
 37247 00006D30 58                      	POP     AX
 37248 00006D31 A5                      	MOVSW                           ; get the lead \\.
 37249                                  UNCCpy:
 37250 00006D32 AC                      	LODSB                           ; get a byte
 37251 00006D33 E831E4                   	call	UCase                   ;AN000;; convert the char
 37252 00006D36 08C0                    	OR      AL,AL
 37253 00006D38 740E                    	JZ	short UNCTerm		; end of string. All done.
 37254 00006D3A E87FE4                  	call    PATHCHRCMP              ; is it a path char?
 37255 00006D3D 89FB                    	MOV     BX,DI                   ; backup position
 37256 00006D3F AA                      	STOSB
 37257 00006D40 75F0                    	JNZ	short UNCCpy		; no, go copy
 37258 00006D42 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37259                                  UNCDone:
 37260 00006D45 16                      	push	ss
 37261 00006D46 1F                      	pop	ds
 37262 00006D47 C3                       	retn				; return error code
 37263                                  UNCTerm:
 37264 00006D48 AA                      	STOSB                           ;AN000;
 37265 00006D49 EBFA                    	JMP	short UNCDone		;AN000;
 37266                                  
 37267                                  CheckDevice:
 37268                                  
 37269                                  ; Check DS:SI for device. First eat any path stuff
 37270                                  
 37271 00006D4B 58                      	POP     AX                      ; retrieve drive info
 37272 00006D4C 803C00                  	CMP     BYTE [SI],0		; check for null file
 37273 00006D4F 7504                    	JNZ	short CheckPath
 37274                                  	;mov	al,2 
 37275 00006D51 B002                    	MOV     AL,error_file_not_found ; bad file error
 37276 00006D53 F9                      	STC                             ; signal error on null input
 37277 00006D54 C3                      	RETN				; bye!
 37278                                  CheckPath:
 37279 00006D55 50                      	push	ax
 37280 00006D56 55                      	push	bp			; save drive number
 37281                                  
 37282                                  
 37283                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37284                                  %if 0
 37285                                  	; MSDOS 6.0
 37286                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37287                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37288                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37289                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37290                                  ;;;end up having a 5D in the opcode's displacement field. The
 37291                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37292                                  ;;;
 37293                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37294                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37295                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37296                                  ;;;
 37297                                  ;;;More info:
 37298                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37299                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37300                                  ;;;
 37301                                  	call	no5Dshere
 37302                                  start5Dhack:
 37303                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37304                                  backfrom5Dhack:
 37305                                  
 37306                                  %endif
 37307                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37308                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37309 00006D57 E8B8D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37310                                  
 37311 00006D5A 5D                      	pop	bp
 37312 00006D5B 58                      	pop	ax			; get drive letter back
 37313 00006D5C 731C                    	JNC	short DoFile		; yes we have a file.
 37314                                  
 37315                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37316                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37317                                  ; call.
 37318                                  
 37319 00006D5E 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37320 00006D64 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37321 00006D67 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37322                                  
 37323                                  ; Now that we have noted that we have a device, we put it into a form that
 37324                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37325                                  ; string. We relax this to state that if the d:\ is present then the path
 37326                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37327                                  ; a device.
 37328                                  
 37329 00006D6D E87F02                  	CALL    TextFromDrive
 37330 00006D70 B02F                    	MOV     AL,'/'                  ; path sep.
 37331 00006D72 AA                      	STOSB
 37332 00006D73 E8E0A4                  	call	StrCpy			; move remainder of string
 37333                                  
 37334 00006D76 F8                      	CLC                             ; everything OK.
 37335 00006D77 16                      	push	ss
 37336 00006D78 1F                      	pop	ds                      ; remainder of OK stuff
 37337                                  DoFile_retn:
 37338 00006D79 C3                      	retn
 37339                                  
 37340                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37341                                  %if 0
 37342                                  
 37343                                  no5Dshere:
 37344                                  	; 10/08/2018
 37345                                  	jmp	CheckThisDevice		; snoop for device
 37346                                  %endif
 37347                                  
 37348                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37349                                  
 37350                                  ; We have a file. Get the raw CDS.
 37351                                  
 37352                                  DoFile:
 37353                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37354                                  
 37355 00006D7A E835FE                  	call	GetVisDrv               ; get proper CDS
 37356                                  	;mov	al,3 
 37357 00006D7D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37358 00006D7F 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37359                                  
 37360                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37361                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37362                                  ; Use the one that we are going to use (ES:DI).
 37363                                  
 37364                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37365 00006D81 1E                      	push	ds
 37366 00006D82 56                      	push	si
 37367 00006D83 06                      	push	es
 37368 00006D84 57                      	push	di
 37369 00006D85 E8CED5                  	call	ValidateCDS             ; poke CDS and make everything OK
 37370                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37371 00006D88 5F                      	pop	di
 37372 00006D89 07                      	pop	es
 37373 00006D8A 5E                      	pop	si
 37374 00006D8B 1F                      	pop	ds
 37375                                  	;mov	al,3
 37376 00006D8C B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37377                                  	;retc				; someone failed an operation
 37378 00006D8E 72E9                    	jc	short DoFile_retn
 37379                                  
 37380                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37381                                  ; current directory. Copy it in.
 37382                                  
 37383 00006D90 1E                      	push	ds
 37384 00006D91 56                      	push	si
 37385 00006D92 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37386 00006D97 89FB                    	MOV     BX,DI                   ; point to destination
 37387                                  	;add	bx,[si+79] ; MSDOS 6.0
 37388 00006D99 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37389                                  	;lea	bp,[di+134]
 37390 00006D9C 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37391                                  					;AN000;
 37392 00006DA0 E8C2A4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37393 00006DA3 4F                      	DEC     DI                      ; point to NUL byte
 37394                                  
 37395                                  ; Make sure that there is a path char at end.
 37396                                  
 37397 00006DA4 B05C                    	MOV     AL,'\'
 37398 00006DA6 263845FF                	CMP     [ES:DI-1],AL
 37399 00006DAA 7401                    	JZ	short GetOrig
 37400 00006DAC AA                      	STOSB
 37401                                  
 37402                                  ; Now get original string.
 37403                                  
 37404                                  GetOrig:
 37405 00006DAD 4F                      	DEC     DI                      ; point to path char
 37406 00006DAE 5E                      	pop	si
 37407 00006DAF 1F                      	pop	ds
 37408                                  
 37409                                  ; BX points to the end of the root part of the CDS (at where a path char
 37410                                  ; should be). Now, we decide whether we use this root or extend it with the
 37411                                  ; current directory. See if the input string begins with a leading 
 37413 00006DB0 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37414 00006DB3 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37415 00006DB5 08C0                    	OR      AL,AL                   ; end of string?
 37416 00006DB7 7410                    	JZ	short DoCanon		; yes, skip.
 37417                                  ;
 37418                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37419                                  ; to this root. Make sure that there is a path char there and advance the
 37420                                  ; source string over all leading \'s.
 37421                                  ;
 37422 00006DB9 89DF                    	MOV     DI,BX                   ; back up to root point.
 37423                                  SkipPath:
 37424 00006DBB AC                      	LODSB
 37425 00006DBC E8FDE3                  	call    PATHCHRCMP
 37426 00006DBF 74FA                    	JZ	short SkipPath
 37427 00006DC1 4E                      	DEC     SI
 37428 00006DC2 08C0                    	OR      AL,AL
 37429 00006DC4 7403                    	JZ	short DoCanon
 37430                                  
 37431                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37432                                  ; for yucks.
 37433                                  
 37434                                  PathAssure:
 37435 00006DC6 B05C                    	MOV     AL,'\'	; 5Ch
 37436 00006DC8 AA                      	STOSB
 37437                                  
 37438                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37439                                  ; BP is the max extent to advance DI
 37440                                  ; BX is the backup limit for ..
 37441                                  
 37442                                  DoCanon:
 37443 00006DC9 E85200                  	CALL    Canonicalize            ; wham.
 37444                                  	;retc				; badly formatted path.
 37445 00006DCC 72AB                    	jc	short DoFile_retn
 37446                                  
 37447                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37448                                  ; to wfp_start and do string substitution. BP is still the max position in
 37449                                  ; buffer.
 37450                                  
 37451 00006DCE 16                      	push	ss
 37452 00006DCF 1F                      	pop	ds
 37453 00006DD0 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37454 00006DD4 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37455 00006DD8 E81C02                  	CALL    PathPref                ; is there a prefix?
 37456 00006DDB 7514                    	JNZ	short DoSplice		; no, do splice
 37457                                  
 37458                                  ; We have a match. Check to see if we ended in a path char.
 37459                                  
 37460 00006DDD 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37461 00006DE0 E8D9E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37462 00006DE3 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37463                                  Pathline:                               ; 2/13/KK
 37464 00006DE5 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37465 00006DE9 7406                    	JZ	short DoSplice
 37466 00006DEB 47                      	INC     DI                      ; point to after current path char
 37467 00006DEC 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37468                                  
 37469                                  ; Splice the result.
 37470                                  
 37471                                  DoSplice:
 37472 00006DF1 16                      	push	ss
 37473 00006DF2 1F                      	pop	ds			; back to DOSDATA
 37474 00006DF3 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37475 00006DF7 31C9                    	XOR     CX,CX
 37476 00006DF9 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37477 00006DFE 7403                    	JZ	short SkipSplice
 37478 00006E00 E82A01                  	CALL    Splice                  ; replaces in place.
 37479                                  SkipSplice:
 37480                                  
 37481                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37482                                  ; device.
 37483                                  
 37484 00006E03 16                      	push	ss
 37485 00006E04 1F                      	pop	ds
 37486 00006E05 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37487                                  	;test	word [es:di+67],8000h
 37488                                  	; 17/12/2022
 37489                                  	;test	byte [es:di+68],80h
 37490 00006E09 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37491                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37492 00006E0E 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37493 00006E10 E30B                    	JCXZ    Done
 37494 00006E12 E87EA5                  	call	ECritDisk
 37495 00006E15 E8FAE9                  	call	FATREAD_CDS
 37496 00006E18 E893A5                  	call	LCritDisk
 37497                                  	;mov	al, 3
 37498 00006E1B B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37499                                  Done:   
 37500 00006E1D C3                      	retn                         ; any errors in carry flag.
 37501                                  
 37502                                  ; 13/07/2018
 37503                                  
 37504                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37505                                  ;----------------------------------------------------------------------------
 37506                                  ;   Canonicalize - copy path removing . and .. entries.
 37507                                  ;
 37508                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37509                                  ;               ES:DI - point to buffer
 37510                                  ;               BX - backup limit (offset from ES) points to slash
 37511                                  ;               BP - end of buffer
 37512                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37513                                  ;                   syntax, etc.
 37514                                  ;               Carry Clear -
 37515                                  ;                   DS:DI - advanced to end of string
 37516                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37517                                  ;   Registers modified: AX CX DX (in addition to those above)
 37518                                  ;----------------------------------------------------------------------------
 37519                                  
 37520                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37521                                  
 37522                                  Canonicalize:
 37523                                  
 37524                                  ; We copy all leading path separators.
 37525                                  
 37526 00006E1E AC                      	LODSB                           ;   while (PathChr (*s))
 37527 00006E1F E89AE3                  	call    PATHCHRCMP
 37528 00006E22 7507                    	JNZ	short CanonDec
 37529 00006E24 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37530 00006E26 7319                    	JAE	short CanonBad		;           goto error;
 37531 00006E28 AA                      	STOSB
 37532 00006E29 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37533                                  CanonDec:
 37534 00006E2B 4E                      	DEC     SI
 37535                                  
 37536                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37537                                  ; component (no leading path separators) and ES:DI being the destination
 37538                                  ; buffer.
 37539                                  
 37540                                  CanonLoop:
 37541                                  
 37542                                  ; If we are at the end of the source string, then we need to check to see that
 37543                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37544                                  ; Otherwise, do nothing
 37545                                  
 37546 00006E2C 31C0                    	XOR     AX,AX
 37547 00006E2E 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37548 00006E30 751A                    	JNZ	short DoComponent
 37549 00006E32 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37550 00006E37 7505                    	JNZ	short DoTerminate
 37551 00006E39 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37552 00006E3B AA                      	STOSB
 37553 00006E3C 88E0                    	MOV     AL,AH
 37554                                  DoTerminate:
 37555 00006E3E AA                      	STOSB                           ;           *d++ = 0;
 37556 00006E3F F8                      	CLC                             ;           return (0);
 37557 00006E40 C3                      	retn
 37558                                  
 37559                                  CanonBad:
 37560 00006E41 E8CC01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37561                                  	;mov	al,3
 37562 00006E44 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37563 00006E46 7402                    	JZ	short PathEnc		; path character encountered in string
 37564                                  	;mov	al,2
 37565 00006E48 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37566                                  PathEnc:
 37567 00006E4A F9                      	STC
 37568                                  CanonBad_retn:
 37569 00006E4B C3                      	retn
 37570                                  
 37571                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37572                                  ; it to 8.3
 37573                                  
 37574                                  DoComponent:                            ;           }
 37575 00006E4C E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37576 00006E4F 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37577                                  
 37578                                  ; We special case the . and .. cases.  These will be backed up.
 37579                                  
 37580                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37581 00006E51 26833D2E                	CMP	WORD [ES:DI],002Eh
 37582 00006E55 7408                    	JZ	short Skip1
 37583                                  	;CMP	WORD PTR ES:[DI],'..'
 37584 00006E57 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37585 00006E5C 750A                    	JNZ	short CanonNormal
 37586 00006E5E 4F                      	DEC     DI                      ;           d--;
 37587                                  Skip1:  
 37588 00006E5F E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37589                                  	;mov	al,3
 37590 00006E62 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37591 00006E64 72E5                    	jc	short CanonBad_retn
 37592 00006E66 EB02                    	JMP     short CanonPath         ;           }
 37593                                  
 37594                                  ; We have a normal path. Advance destination pointer over it.
 37595                                  
 37596                                  CanonNormal:                            ;       else
 37597 00006E68 01CF                    	ADD     DI,CX                   ;           d += ct;
 37598                                  
 37599                                  ; We have successfully copied a component. We are now pointing at a path
 37600                                  ; sep char or are pointing at a nul or are pointing at something else.
 37601                                  ; If we point at something else, then we have an error.
 37602                                  
 37603                                  CanonPath:
 37604 00006E6A E81600                  	CALL    PathSep
 37605 00006E6D 75D2                    	JNZ	short CanonBad		; something else...
 37606                                  
 37607                                  ; Copy the first path char we see.
 37608                                  
 37609 00006E6F AC                      	LODSB                           ; get the char
 37610 00006E70 E849E3                  	call    PATHCHRCMP              ; is it path char?
 37611 00006E73 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37612 00006E75 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37613 00006E77 73C8                    	JAE	short CanonBad		; yep, error.
 37614 00006E79 AA                      	STOSB                           ; copy the one byte
 37615                                  
 37616                                  ; Skip all remaining path chars
 37617                                  
 37618                                  CanonPathLoop:
 37619 00006E7A AC                      	LODSB                           ; get next byte
 37620 00006E7B E83EE3                  	call    PATHCHRCMP              ; path char again?
 37621 00006E7E 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37622 00006E80 4E                      	DEC     SI                      ; back up
 37623 00006E81 EBA9                    	JMP	short  CanonLoop	; go copy component
 37624                                  
 37625                                  ;BREAK <PathSep - determine if char is a path separator>
 37626                                  ;----------------------------------------------------------------------------
 37627                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37628                                  ;   Inputs:     DS:SI - point to a char
 37629                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37630                                  ;               Zero set if AL is / \ or NUL
 37631                                  ;               Zero reset otherwise
 37632                                  ;   Registers modified: AL
 37633                                  ;----------------------------------------------------------------------------
 37634                                  
 37635                                  PathSep:
 37636 00006E83 8A04                    	MOV     AL,[SI]                 ; get the character
 37637                                  PathSepGotCh:				; already have character
 37638 00006E85 08C0                    	OR      AL,AL                   ; test for zero
 37639 00006E87 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37640                                  	;call	PATHCHRCMP              ; check for path character
 37641                                  	;retn				; and return HIS determination
 37642                                  	; 18/12/2022
 37643 00006E89 E930E3                  	jmp	PATHCHRCMP
 37644                                  
 37645                                  
 37646                                  ;BREAK <SkipBack - move backwards to a path separator>
 37647                                  ;----------------------------------------------------------------------------
 37648                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37650                                  ;               BX has current directory back up limit (point to a / \)
 37651                                  ;   Outputs:    ES:DI backed up to point to a path char
 37652                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37653                                  ;               Carry set if illegal backup
 37654                                  ;               Carry Clear if ok
 37655                                  ;   Registers modified: DI,AL
 37656                                  ;----------------------------------------------------------------------------
 37657                                  
 37658                                  SkipBack:
 37659 00006E8C 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37660 00006E8E 720B                    	JB	short SkipBad		;       if (d < dlim)
 37661 00006E90 4F                      	DEC     DI                      ;           goto err;
 37662 00006E91 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37663 00006E94 E825E3                  	call    PATHCHRCMP              ;           break;
 37664 00006E97 75F3                    	JNZ	short SkipBack		;       }
 37665 00006E99 F8                      	CLC                             ;   return (0);
 37666 00006E9A C3                      	retn				;
 37667                                  SkipBad:                                ;err:
 37668                                  	;mov	al,3
 37669 00006E9B B003                    	MOV     AL,error_path_not_found ; bad path error
 37670 00006E9D F9                      	STC                             ;   return (-1);
 37671 00006E9E C3                      	retn				;
 37672                                  
 37673                                  ;Break <CopyComponent - copy out a file path component>
 37674                                  ;----------------------------------------------------------------------------
 37675                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37676                                  ;
 37677                                  ;   Inputs:     DS:SI - source path
 37678                                  ;               ES:DI - destination
 37679                                  ;               ES:BP - end of buffer
 37680                                  ;   Outputs:    Carry Set - too long
 37681                                  ;               Carry Clear - DS:SI moved past component
 37682                                  ;                   CX has length of destination
 37683                                  ;   Registers modified: AX,CX,DX
 37684                                  ;----------------------------------------------------------------------------
 37685                                  
 37686                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37687                                  
 37688                                  CopyComponent:
 37689                                  
 37690                                  %define CopyBP	 [BP]		; word
 37691                                  %define CopyD	 [BP+2]		; dword
 37692                                  %define CopyDoff [BP+2]		; word
 37693                                  %define CopyS	 [BP+6]		; dword
 37694                                  %define CopySoff [BP+6]		; word
 37695                                  %define CopyTemp [BP+10]	; byte
 37696                                  
 37697 00006E9F 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37698 00006EA2 1E                      	push	ds
 37699 00006EA3 56                      	push	si
 37700 00006EA4 06                      	push	es
 37701 00006EA5 57                      	push	di
 37702 00006EA6 55                      	push	bp
 37703 00006EA7 89E5                    	MOV     BP,SP
 37704 00006EA9 B42E                    	MOV     AH,'.'
 37705 00006EAB AC                      	LODSB
 37706 00006EAC AA                      	STOSB
 37707 00006EAD 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37708 00006EAF 7518                    	JNZ	short NormalComp
 37709 00006EB1 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37710 00006EB4 740B                    	JZ	short NulTerm
 37711                                  TryTwoDot:
 37712 00006EB6 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37713 00006EB7 AA                      	STOSB
 37714 00006EB8 38E0                    	CMP     AL,AH
 37715 00006EBA 7557                    	JNZ	short CopyBad
 37716 00006EBC E8C4FF                  	CALL    PathSep
 37717 00006EBF 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37718                                  NulTerm:                                ;               return -1;
 37719 00006EC1 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37720 00006EC3 AA                      	STOSB
 37721 00006EC4 897606                  	MOV     CopySoff,SI
 37722 00006EC7 EB47                    	JMP     SHORT _GoodRet		;       }
 37723                                  NormalComp:                             ;   else {
 37724 00006EC9 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37725 00006ECC E82BE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37726 00006ECF 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37727 00006ED2 743F                    	JZ	short CopyBad		;           return (-1);
 37728 00006ED4 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37729 00006EDA 7510                    	JNZ	short DoPack
 37730 00006EDC 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37731 00006EDF 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37732 00006EE4 7F2D                    	JG	short CopyBad		;               return (-1);
 37733 00006EE6 7504                    	JNZ	short DoPack		;           else
 37734 00006EE8 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37735 00006EEA 742F                    	JZ	short CopyBadPath	;               return (-1);
 37736                                  DoPack:                                 ;           }
 37737 00006EEC 897606                  	MOV     CopySoff,SI ; [bp+6]
 37738 00006EEF 16                      	push	ss
 37739 00006EF0 1F                      	pop	ds
 37740 00006EF1 BE[4B05]                	MOV     SI,NAME1
 37741 00006EF4 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37742 00006EF7 57                      	push	di
 37743 00006EF8 E860B2                  	call	PackName                ;       PackName (Name1, temp);
 37744 00006EFB 5F                      	pop	di
 37745 00006EFC E86FA3                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37746 00006EFF 49                      	DEC     CX
 37747 00006F00 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37748                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37749                                  	;cmp	cx,[bp+0]
 37750                                  	; 15/12/2022
 37751                                  	;cmp	cx,[bp]
 37752 00006F03 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 37753 00006F06 730B                    	JAE	short CopyBad		;           return (-1);
 37754 00006F08 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 37755 00006F0A C47E02                  	LES     DI,CopyD    ; [bp+2]	
 37756 00006F0D E855A3                  	call	FStrCpy
 37757                                  _GoodRet:				;       }
 37758 00006F10 F8                      	CLC
 37759 00006F11 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 37760                                  CopyBad:
 37761 00006F13 F9                      	STC
 37762 00006F14 E8F900                  	CALL    ScanPathChar            ; check for path chars in rest of string
 37763                                  	;mov	al,2
 37764 00006F17 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 37765 00006F19 7503                    	JNZ	short CopyEnd
 37766                                  CopyBadPath:
 37767 00006F1B F9                      	STC
 37768                                  	;mov	al,3
 37769 00006F1C B003                    	MOV     AL,error_path_not_found ; Set bad path error
 37770                                  CopyEnd:
 37771 00006F1E 5D                      	pop	bp
 37772 00006F1F 5F                      	pop	di
 37773 00006F20 07                      	pop	es
 37774 00006F21 5E                      	pop	si
 37775 00006F22 1F                      	pop	ds
 37776 00006F23 9F                      	LAHF
 37777 00006F24 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 37778 00006F27 E844A3                  	call	StrLen
 37779 00006F2A 49                      	DEC     CX
 37780 00006F2B 9E                      	SAHF
 37781 00006F2C C3                      	retn
 37782                                  
 37783                                  ; 14/05/2019 - Retro DOS v4.0
 37784                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 37785                                  
 37786                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37787                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 37788                                  
 37789                                  ;Break <Splice - pseudo mount by string substitution>
 37790                                  ;----------------------------------------------------------------------------
 37791                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 37792                                  ;       ThisCDS to point to physical drive CDS.
 37793                                  ;   Inputs:     DS:SI point to string
 37794                                  ;               NoSetDir = TRUE => exact matches with splice fail
 37795                                  ;   Outputs:    DS:SI points to thisCDS
 37796                                  ;               ES:DI points to DPB
 37797                                  ;               String at DS:SI may be reduced in length by removing prefix
 37798                                  ;               and substituting drive letter.
 37799                                  ;               CX = 0 If no splice done
 37800                                  ;               CX <> 0 otherwise
 37801                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 37802                                  ;                   left alone
 37803                                  ;               ThisDPB points to proper DPB
 37804                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 37805                                  ;----------------------------------------------------------------------------
 37806                                  
 37807                                  Splice:
 37808 00006F2D 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 37809 00006F33 7469                    	JZ	short AllDone
 37810 00006F35 36FF36[A205]            	push	word [SS:THISCDS]
 37811 00006F3A 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 37812 00006F3F 1E                      	push	ds
 37813 00006F40 56                      	push	si
 37814 00006F41 5F                      	pop	di
 37815 00006F42 07                      	pop	es
 37816 00006F43 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 37817                                  SpliceScan:
 37818 00006F45 E8DBFC                  	call	GetCDSFromDrv
 37819 00006F48 724A                    	JC	short SpliceDone
 37820 00006F4A FEC0                    	INC     AL
 37821                                  	; 17/12/2022
 37822                                  	;test	byte [si+68],20h
 37823 00006F4C F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 37824                                  	;;test	word [si+67],2000h
 37825                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37826 00006F50 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 37827 00006F52 57                      	push	di
 37828 00006F53 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 37829 00006F56 7403                    	JZ	short SpliceFound	;
 37830                                  SpliceSkip:
 37831 00006F58 5F                      	pop	di
 37832 00006F59 EBEA                    	JMP	short SpliceScan	;               continue;
 37833                                  SpliceFound:
 37834 00006F5B 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 37835 00006F5F 7508                    	JNZ	short SpliceDo
 37836 00006F61 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 37837 00006F67 75EF                    	JNZ	short SpliceSkip
 37838                                  SpliceDo:
 37839 00006F69 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 37840 00006F6B 06                      	push	es
 37841 00006F6C 1F                      	pop	ds
 37842 00006F6D 5F                      	pop	di
 37843 00006F6E E88000                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 37844 00006F71 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 37845 00006F75 09C0                    	OR      AX,AX
 37846 00006F77 7808                    	JS	short NoPoke
 37847 00006F79 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 37848 00006F7B 29F0                    	SUB     AX,SI
 37849 00006F7D 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 37850                                  NoPoke:
 37851 00006F81 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 37852 00006F84 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 37853 00006F86 B05C                    	MOV     AL,"\"
 37854 00006F88 AA                      	STOSB
 37855                                  SpliceCopy:                             ;               strcpy (src, p);
 37856 00006F89 E8D9A2                  	call	FStrCpy
 37857 00006F8C 83C404                  	ADD     SP,4                    ; throw away saved stuff
 37858 00006F8F 80C901                  	OR      CL,1                    ; signal splice done.
 37859 00006F92 EB0C                    	JMP     SHORT DoSet             ;               return;
 37860                                  SpliceDone:                             ;               }
 37861 00006F94 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 37862 00006F99 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 37863                                  AllDone:
 37864 00006F9E 31C9                    	XOR     CX,CX
 37865                                  DoSet:
 37866 00006FA0 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 37867                                  	;les	di,[si+69]
 37868 00006FA5 C47C45                  	LES     DI,[SI+curdir.devptr]	
 37869 00006FA8 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 37870 00006FAD 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 37871                                  Splice_retn:
 37872 00006FB2 C3                      	retn
 37873                                  
 37874                                  ; 15/05/2019 - Retro DOS v4.0
 37875                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 37876                                  
 37877                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37878                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 37879                                  
 37880                                  ;Break <$NameTrans - partially process a name>
 37881                                  ;----------------------------------------------------------------------------
 37882                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 37883                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 37884                                  ;   to Transpath playing games with devices, we need to insure that the output
 37885                                  ;   has drive letter and : in it.
 37886                                  ;
 37887                                  ;   Inputs:     DS:SI - source string for translation
 37888                                  ;               ES:DI - pointer to buffer
 37889                                  ;   Outputs:
 37890                                  ;       Carry Clear
 37891                                  ;               Buffer at ES:DI is filled in with data
 37892                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 37893                                  ;       Carry Set
 37894                                  ;               AX = error_path_not_found
 37895                                  ;   Registers modified: all
 37896                                  ;----------------------------------------------------------------------------
 37897                                  
 37898                                  _$NameTrans:
 37899 00006FB3 1E                      	push	ds
 37900 00006FB4 56                      	push	si
 37901 00006FB5 06                      	push	es
 37902 00006FB6 57                      	push	di
 37903 00006FB7 51                      	push	cx ; MSDOS 6.0
 37904                                  	
 37905                                  	; MSDOS 6.0	
 37906                                  ; M027 - Start
 37907                                  ;
 37908                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 37909                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 37910                                  ; device if the old call set the volume attribute bit. Note that devname in
 37911                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 37912                                  ; and restore CX.
 37913                                  
 37914                                  	;mov	ch,16h
 37915 00006FB8 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 37916 00006FBA E8BA02                  	call	SetAttrib
 37917                                  
 37918                                  ; M027 - End
 37919                                  
 37920                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37921 00006FBD BF[BE03]                	MOV     DI,OPENBUF
 37922 00006FC0 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 37923 00006FC3 59                      	pop	cx ; MSDOS 6.0
 37924 00006FC4 5F                      	pop     di
 37925 00006FC5 07                      	pop	es
 37926 00006FC6 5E                      	pop     si
 37927 00006FC7 1F                      	pop     ds
 37928 00006FC8 7303                    	JNC	short TransOK
 37929 00006FCA E9C096                  	jmp	SYS_RET_ERR
 37930                                  TransOK:
 37931 00006FCD BE[BE03]                	MOV     SI,OPENBUF
 37932 00006FD0 16                      	push	ss
 37933 00006FD1 1F                      	pop	ds
 37934                                  ;GotText:
 37935 00006FD2 E890A2                  	call	FStrCpy
 37936 00006FD5 E9AC96                  	jmp	SYS_RET_OK
 37937                                  
 37938                                  ;Break   <DriveFromText - return drive number from a text string>
 37939                                  ;----------------------------------------------------------------------------
 37940                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 37941                                  ;   pointer.
 37942                                  ;
 37943                                  ;   Inputs:     DS:SI point to a text string
 37944                                  ;   Outputs:    AL has drive number
 37945                                  ;               DS:SI advanced
 37946                                  ;   Registers modified: AX,SI.
 37947                                  ;----------------------------------------------------------------------------
 37948                                  
 37949                                  DriveFromText:
 37950 00006FD8 30C0                    	XOR     AL,AL                   ;       drive = 0;
 37951 00006FDA 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 37952 00006FDD 74D3                    	jz	short Splice_retn
 37953 00006FDF 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 37954 00006FE3 75CD                    	jnz	short Splice_retn
 37955 00006FE5 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 37956 00006FE6 0C20                    	OR      AL,20h
 37957                                  	;sub	al,60h
 37958 00006FE8 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 37959 00006FEA 75C6                    	jnz	short Splice_retn
 37960 00006FEC B0FF                    	MOV     AL,-1                   ; nuke AL...
 37961 00006FEE C3                      	retn				;           }
 37962                                  
 37963                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 37964                                  ;----------------------------------------------------------------------------
 37965                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 37966                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 37967                                  ;
 37968                                  ;   Inputs:     AL has 0-based drive number
 37969                                  ;   Outputs:    ES:DI advanced
 37970                                  ;   Registers modified: AX
 37971                                  ;----------------------------------------------------------------------------
 37972                                  
 37973                                  TextFromDrive:
 37974 00006FEF FEC0                    	INC     AL
 37975                                  TextFromDrive1:
 37976                                  	;add	al,40h
 37977 00006FF1 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 37978 00006FF3 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 37979 00006FF5 AB                      	STOSW
 37980                                  PathPref_retn:
 37981 00006FF6 C3                      	retn
 37982                                  
 37983                                  ;Break   <PathPref - see if one path is a prefix of another>
 37984                                  ;----------------------------------------------------------------------------
 37985                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 37986                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 37987                                  ;   prefix: A:\ and A:\FOO
 37988                                  ;
 37989                                  ;   Inputs:     DS:SI potential prefix
 37990                                  ;               ES:DI string
 37991                                  ;   Outputs:    Zero set => prefix found
 37992                                  ;                   DI/SI advanced past matching part
 37993                                  ;               Zero reset => no prefix, DS/SI garbage
 37994                                  ;   Registers modified: CX
 37995                                  ;----------------------------------------------------------------------------
 37996                                  
 37997                                  PathPref:
 37998 00006FF7 E882A2                  	call	DStrLen                 ; get length
 37999 00006FFA 49                      	DEC     CX                      ; do not include nul byte
 38000 00006FFB F3A6                    	REPZ    CMPSB                   ; compare
 38001 00006FFD 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38002 00006FFF 50                      	push	ax			; save char register
 38003 00007000 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38004 00007003 E8B6E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38005 00007006 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38006                                  NotSep:                                 ; 2/13/KK
 38007 00007008 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38008 0000700B E877FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38009                                  Prefix:
 38010 0000700E 58                      	pop	ax			; get back original
 38011 0000700F C3                      	retn
 38012                                  
 38013                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38014                                  ;----------------------------------------------------------------------------
 38015                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38016                                  ;     a path separator.
 38017                                  ;
 38018                                  ;     Input:    DS:SI target string (null terminated)
 38019                                  ;     Output:   Zero set => path separator encountered in string
 38020                                  ;               Zero clear => null encountered
 38021                                  ;     Registers modified: SI
 38022                                  ;----------------------------------------------------------------------------
 38023                                  
 38024                                  ScanPathChar:
 38025 00007010 AC                      	LODSB                           ; fetch a character
 38026 00007011 E871FE                  	call    PathSepGotCh
 38027 00007014 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38028                                  	;call	PATHCHRCMP              ; path separator?
 38029                                  	;retn
 38030                                  	; 18/12/2022
 38031 00007016 E9A3E1                  	jmp	PATHCHRCMP
 38032                                  
 38033                                  ;============================================================================
 38034                                  ; FILE.ASM, MSDOS 6.0, 1991
 38035                                  ;============================================================================
 38036                                  ; 14/07/2018 - Retro DOS v3.0
 38037                                  
 38038                                  ; 13/05/2019 - Retro DOS v4.0
 38039                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38040                                  
 38041                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38042                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38043                                  
 38044                                  ; MSDOS 2.11
 38045                                  ;BREAK <$Open - open a file handle>
 38046                                  ;----------------------------------------------------------------------------
 38047                                  ;   Assembler usage:
 38048                                  ;           LDS     DX, Name
 38049                                  ;           MOV     AH, Open
 38050                                  ;           MOV     AL, access
 38051                                  ;           INT     int_command
 38052                                  ;
 38053                                  ;       ACCESS          Function
 38054                                  ;       ------          --------
 38055                                  ;       open_for_read   file is opened for reading
 38056                                  ;       open_for_write  file is opened for writing
 38057                                  ;       open_for_both   file is opened for both reading and writing.
 38058                                  ;
 38059                                  ;   Error returns:
 38060                                  ;           AX = error_invalid_access
 38061                                  ;              = error_file_not_found
 38062                                  ;              = error_access_denied
 38063                                  ;              = error_too_many_open_files
 38064                                  ;----------------------------------------------------------------------------
 38065                                  
 38066                                  ; MSDOS 6.0
 38067                                  ;	BREAK <$Open - open a file from a path string>
 38068                                  ;----------------------------------------------------------------------------
 38069                                  ;
 38070                                  ;**	$OPen - Open a File
 38071                                  ;
 38072                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38073                                  ;	file and and returns a handle
 38074                                  ;
 38075                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38076                                  ;		(AL) = open mode
 38077                                  ;	EXIT	'C' clear if OK
 38078                                  ;		  (ax) = file handle
 38079                                  ;		'C' set if error
 38080                                  ;		  (ax) = error code
 38081                                  ;	USES	all
 38082                                  ;
 38083                                  ;----------------------------------------------------------------------------
 38084                                  
 38085                                  ; 13/05/2019 - Retro DOS v4.0
 38086                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38087                                  
 38088                                  _$OPEN:       
 38089 00007019 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38090                                  _$Open2:
 38091                                  	;mov	ch,16h
 38092 0000701B B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38093 0000701D E85702                  	call	SetAttrib
 38094 00007020 B9[212C]                	mov	cx,DOS_OPEN
 38095                                  
 38096                                  	;xor	ah,ah  ; MSDOS 3.3
 38097                                  
 38098 00007023 50                      	push	ax
 38099                                  
 38100                                  ;*	General file open/create code. The $CREATE call and the various
 38101                                  ;	$OPEN calls all come here.
 38102                                  ;
 38103                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38104                                  ;	path names, etc., and then dispatch to our individual handlers.
 38105                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38106                                  ;
 38107                                  ;	(TOS) = create mode
 38108                                  ;	(CX) = address of routine to call to do actual function
 38109                                  ;	(DS:DX) = ASCIZ name
 38110                                  ;	SAttrib = Attribute mask
 38111                                  
 38112                                  ;	Get a free SFT and mark it "being allocated"
 38113                                  
 38114                                  AccessFile:
 38115 00007024 E86CA3                  	call	ECritSFT
 38116 00007027 E8D3F7                  	call	SFNFree			; get a free sfn
 38117 0000702A E881A3                  	call	LCritSFT
 38118 0000702D 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38119 0000702F 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38120 00007034 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38121 00007039 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38122                                  
 38123                                  ;	Find a free area in the user's JFN table.
 38124                                  
 38125 0000703E E8A9F7                  	call	JFNFree			; get a free jfn
 38126 00007041 7303                    	jnc	short SaveJFN
 38127                                  OpenFailJ:
 38128 00007043 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38129                                  
 38130                                  SaveJFN:
 38131 00007046 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38132 0000704B 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38133 00007050 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38134                                  
 38135                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38136                                  ;	reusing the same JFN.
 38137                                  
 38138 00007055 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38139 0000705A 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38140 0000705D 89D6                    	MOV	SI,DX			; get name in appropriate place
 38141 0000705F BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38142 00007062 51                      	push	cx			; save routine to call
 38143 00007063 E843FC                  	call	TransPath		; convert the path
 38144 00007066 5B                      	pop	bx			; (bx) = routine to call
 38145                                  
 38146 00007067 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38147 0000706C 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38148 0000706E 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38149 00007074 7404                    	JZ	short SetSearch
 38150                                  	;mov	al,2
 38151 00007076 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38152                                  OpenCleanJ:
 38153 00007078 EB50                    	JMP	short OpenClean
 38154                                  
 38155                                  SetSearch:
 38156 0000707A 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38157                                  
 38158                                  ;	We need to get the new inheritance bits.
 38159                                  
 38160 0000707B 31C9                    	xor	cx,cx
 38161                                  	; MSDOS 6.0
 38162                                  	;mov	[si+2],cx ; 0
 38163 0000707D 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38164                                  	;mov    [si+51],cx ; 0
 38165 00007080 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38166                                  	;
 38167 00007083 81FB[212C]              	CMP	BX,DOS_OPEN
 38168 00007087 7509                    	JNZ	short _DoOper
 38169                                  	;test   al,80h
 38170 00007089 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38171 0000708B 7405                    	JZ	short _DoOper ; 10/08/2018
 38172 0000708D 247F                    	AND	AL,7Fh			; mask off inherit bit
 38173                                  	;mov	cx,1000h
 38174 0000708F B90010                  	MOV	CX,sf_no_inherit
 38175                                  _DoOper:
 38176                                  	;; MSDOS 3.3
 38177                                  	;;mov	word [si+2], 0
 38178                                  	;;mov	word [si+33h], 0
 38179                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38180                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38181                                  
 38182                                  	; MSDOS 6.0
 38183                                  ;**	Check if this is an extended open. If so you must set the
 38184                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38185                                  ;	Set_EXT_mode in creat.asm
 38186                                  
 38187                                  	; MSDOS 6.0
 38188                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38189 00007092 57                      	push	di
 38190 00007093 06                      	push	es
 38191 00007094 1E                      	push	ds
 38192 00007095 07                      	pop	es
 38193 00007096 56                      	push	si
 38194 00007097 5F                      	pop	di			; (es:di) = SFT address
 38195 00007098 E872BB                  	call	Set_EXT_mode
 38196                                  	;RESTORE <es, di>
 38197 0000709B 07                      	pop	es
 38198 0000709C 5F                      	pop	di
 38199                                  
 38200                                  	;Context DS
 38201 0000709D 16                      	push	ss
 38202 0000709E 1F                      	pop	ds	
 38203                                  
 38204 0000709F 51                      	push	cx
 38205 000070A0 FFD3                    	CALL	BX			; blam!
 38206 000070A2 59                      	pop	cx
 38207 000070A3 C536[9E05]              	LDS	SI,[THISSFT]
 38208 000070A7 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38209                                  	;jc	short OpenE ; MSDOS 3.3
 38210                                  
 38211                                  ;	The SFT was successfully opened. Remove busy mark.
 38212                                  
 38213                                  OpenOK:
 38214                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38215 000070A9 C7040100                	mov	word [SI],1
 38216                                  	;or	[SI+5],cx
 38217 000070AD 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38218                                  
 38219                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38220                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38221                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38222                                  ;
 38223                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38224                                  ; sharer.
 38225                                  
 38226 000070B0 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38227 000070B4 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38228                                  
 38229 000070B9 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38230                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38231                                  OpenOkj:
 38232 000070C0 E9C195                  	jmp	SYS_RET_OK		; bye with no errors
 38233                                  
 38234                                  	; MSDOS 6.0
 38235                                  ;Extended Open hooks check
 38236                                  OpenE2:					;AN000;;EO.
 38237 000070C3 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38238 000070C6 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38239 000070C8 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38240                                  
 38241                                  ;	Extended Open hooks check
 38242                                  ;
 38243                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38244                                  
 38245                                  OpenClean:
 38246 000070CA 5B                      	pop	bx			; clean off stack
 38247                                  OpenE:
 38248                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38249 000070CB C7040000                	mov	word [SI],0
 38250 000070CF 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38251 000070D4 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38252 000070D7 EB02                    	JMP	SHORT OpenCritLeave
 38253                                  
 38254                                  OpenFail:
 38255 000070D9 FB                      	STI
 38256 000070DA 59                      	pop	cx			; Clean stack
 38257                                  OpenCritLeave:
 38258 000070DB 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38259                                  
 38260                                  	; MSDOS 6.0
 38261                                  ; File Tagging DOS 4.00
 38262 000070E2 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38263                                  					;AN000;;FT. code page mismatch
 38264 000070E8 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38265 000070EA E9A895                  	jmp	From_GetSet		;AN000;;FT. yes
 38266                                  NORERR: 				;AN000;
 38267                                  ; File Tagging DOS 4.00
 38268                                  
 38269 000070ED E99D95                  	jmp	SYS_RET_ERR		; no free, return error
 38270                                  
 38271                                  ; MSDOS 2.11
 38272                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38273                                  ;----------------------------------------------------------------------------
 38274                                  ;   Assembler usage:
 38275                                  ;           LDS     DX, name
 38276                                  ;           MOV     AH, Creat
 38277                                  ;           MOV     CX, access
 38278                                  ;           INT     21h
 38279                                  ;       ; AX now has the handle
 38280                                  ;
 38281                                  ;   Error returns:
 38282                                  ;           AX = error_access_denied
 38283                                  ;              = error_path_not_found
 38284                                  ;              = error_too_many_open_files
 38285                                  ;----------------------------------------------------------------------------
 38286                                  
 38287                                  ; MSDOS 6.0
 38288                                  ;	BREAK <$Creat - create a brand-new file>
 38289                                  ;----------------------------------------------------------------------------
 38290                                  ;
 38291                                  ;**	$Creat - Create a File
 38292                                  ;
 38293                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38294                                  ;	initial attributes contained in CX
 38295                                  ;
 38296                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38297                                  ;		(CX) = initial attributes
 38298                                  ;	EXIT	'C' set if error
 38299                                  ;		  (ax) = error code
 38300                                  ;		'C' clear if OK
 38301                                  ;		  (ax) = file handle
 38302                                  ;	USES	all
 38303                                  ;
 38304                                  ;----------------------------------------------------------------------------
 38305                                  
 38306                                  _$CREAT:
 38307 000070F0 51                      	push	cx			; Save attributes on stack
 38308 000070F1 B9[F72A]                	mov	CX,DOS_CREATE		; routine to call
 38309                                  AccessSet:
 38310                                  	;mov	byte [ss:SATTRIB],6
 38311 000070F4 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38312                                  	; 10/08/2018
 38313 000070FA E927FF                  	JMP	AccessFile		; use good ol' open
 38314                                  
 38315                                  ; MSDOS 6.0 (MSDOS 3.3)
 38316                                  ;	BREAK <$CHMOD - change file attributes>
 38317                                  ;----------------------------------------------------------------------------
 38318                                  ;
 38319                                  ;**	$CHMOD - Change File Attributes
 38320                                  ;
 38321                                  ;   Assembler usage:
 38322                                  ;	    LDS     DX, name
 38323                                  ;	    MOV     CX, attributes
 38324                                  ;	    MOV     AL,func (0=get, 1=set)
 38325                                  ;	    INT     21h
 38326                                  ;   Error returns:
 38327                                  ;	    AX = error_path_not_found
 38328                                  ;	    AX = error_access_denied
 38329                                  ;
 38330                                  ;----------------------------------------------------------------------------
 38331                                  
 38332                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38333                                  _$CHMOD:
 38334                                  	; 05/08/2018 - Retro DOS v3.0
 38335                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38336 000070FD BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38337 00007100 50                      	push	ax
 38338 00007101 51                      	push	cx			; save function and attributes
 38339 00007102 89D6                    	MOV	SI,DX			; get things in appropriate places
 38340 00007104 E8A6FB                  	call	TransPathSet		; get correct path
 38341 00007107 59                      	pop	cx
 38342 00007108 58                      	pop	ax			; and get function and attrs back
 38343 00007109 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38344 0000710B 16                      	push	ss			; set up for later possible calls
 38345 0000710C 1F                      	pop	ds
 38346 0000710D 803E[7A05]FF            	CMP	byte [CMETA],-1
 38347 00007112 754E                    	JNZ	short ChModErr
 38348                                  	;mov	byte [SATTRIB],16h
 38349 00007114 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38350 00007119 2C01                    	SUB	AL,1			; fast way to discriminate
 38351 0000711B 720B                    	JB	short ChModGet		; 0 -> go get value
 38352 0000711D 7417                    	JZ	short ChModSet		; 1 -> go set value
 38353                                  	;mov	byte [EXTERR_LOCUS],1
 38354 0000711F C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38355                                  	;mov	al,1
 38356 00007124 B001                    	mov	al,error_invalid_function ; bad value
 38357                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38358                                  chmod_errj:	
 38359                                  	;;jmp	SYS_RET_ERR
 38360                                  	;jmp	short ChModE	
 38361 00007126 EBC5                    	jmp	short NORERR	; 06/12/2022
 38362                                  ChModGet:
 38363 00007128 E8B6B8                  	call	GET_FILE_INFO		; suck out the ol' info
 38364 0000712B 7237                    	JC	short ChModE		; error codes are already set for ret
 38365 0000712D E89A93                  	call	Get_User_Stack		; point to user saved vaiables
 38366                                  	;mov	[SI+4],ax
 38367 00007130 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38368                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38369                                  OpenOkj2:
 38370                                  	; 17/12/2022
 38371                                  	;;jmp	SYS_RET_OK		; say sayonara
 38372                                  	;jmp	short OpenOkj
 38373                                  	; 25/06/2019
 38374 00007133 E95195                  	jmp	SYS_RET_OK_clc
 38375                                  
 38376                                  ChModSet:
 38377 00007136 89C8                    	MOV	AX,CX			; get attrs in position
 38378 00007138 E804B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38379 0000713B 7227                    	JC	short ChModE		; errors are set
 38380                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38381                                  	;jmp	SYS_RET_OK
 38382                                  OpenOkj3:
 38383                                  	;jmp	short OpenOkj2
 38384                                  	; 17/12/2022
 38385 0000713D E94495                  	jmp	SYS_RET_OK
 38386                                  
 38387                                  ; 17/12/2022
 38388                                  %if 0
 38389                                  ChModErr:
 38390                                  NotFound:	; 17/12/2022
 38391                                  	;mov	al,3
 38392                                  	mov	al,error_path_not_found
 38393                                  ChModE:
 38394                                  UnlinkE:	; 17/12/2022
 38395                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38396                                  	;;jmp	SYS_RET_ERR
 38397                                  	;jmp	short chmod_errj
 38398                                  	; 17/12/2022
 38399                                  	jmp	short NORERR
 38400                                  %endif
 38401                                  
 38402                                  ; 22/05/2019 - Retro DOS v4.0
 38403                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38404                                  
 38405                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38406                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38407                                  
 38408                                  ;	BREAK <$UNLINK - delete a file entry>
 38409                                  ;----------------------------------------------------------------------------
 38410                                  ;
 38411                                  ;**	$UNLINK - Delete a File
 38412                                  ;
 38413                                  ;
 38414                                  ;	Assembler usage:
 38415                                  ;	    LDS     DX, name
 38416                                  ;	    IF VIA SERVER DOS CALL
 38417                                  ;	     MOV     CX,SEARCH_ATTRIB
 38418                                  ;	    MOV     AH, Unlink
 38419                                  ;	    INT     21h
 38420                                  ;
 38421                                  ;	ENTRY	(ds:dx) = path name
 38422                                  ;		(cx) = search_attribute, if via server_dos
 38423                                  ;	EXIT	'C' clear if no error
 38424                                  ;		'C' set if error
 38425                                  ;		  (ax) = error code
 38426                                  ;			= error_file_not_found
 38427                                  ;			= error_access_denied
 38428                                  ;
 38429                                  ;----------------------------------------------------------------------------
 38430                                  
 38431                                  _$UNLINK:
 38432 00007140 51                      	push	cx			; Save possible CX input parm
 38433 00007141 89D6                    	MOV	SI,DX			; Point at input string
 38434 00007143 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38435 00007146 E864FB                  	call	TransPathSet		; go get normalized path
 38436 00007149 59                      	pop	cx
 38437 0000714A 7216                    	JC	short ChModErr		; badly formed path
 38438 0000714C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38439 00007152 750E                    	JNZ	short NotFound
 38440 00007154 16                      	push	ss
 38441 00007155 1F                      	pop	ds
 38442                                  	;mov	ch,6
 38443 00007156 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38444 00007158 E81C01                  	call	SetAttrib
 38445 0000715B E871B4                  	call	DOS_DELETE		; remove that file
 38446                                  	;JC	short UnlinkE 		; error is there
 38447                                  	; 17/12/2022
 38448 0000715E 728D                    	jc	short NORERR
 38449                                  
 38450                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38451                                  UnlinkOk:
 38452                                  	;jmp	SYS_RET_OK		; okey doksy
 38453 00007160 EBDB                    	jmp	short OpenOkj3
 38454                                  
 38455                                  	; 17/12/2022
 38456                                  ChModErr:	; 17/12/2022
 38457                                  NotFound:
 38458                                  	;mov	al,3
 38459 00007162 B003                    	MOV	AL,error_path_not_found
 38460                                  ChModE:		; 17/12/2022
 38461                                  UnlinkE:
 38462                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38463                                  	;;jmp	SYS_RET_ERR		; bye
 38464                                  	;jmp	short ChModE
 38465                                  	; 17/12/2022
 38466 00007164 EB87                    	jmp	short NORERR
 38467                                  
 38468                                  ;BREAK <$RENAME - move directory entries around>
 38469                                  ;----------------------------------------------------------------------------
 38470                                  ;
 38471                                  ;   Assembler usage:
 38472                                  ;	    LDS     DX, source
 38473                                  ;	    LES     DI, dest
 38474                                  ;	    IF VIA SERVER DOS CALL
 38475                                  ;	      MOV   CX,SEARCH_ATTRIB
 38476                                  ;	    MOV     AH, Rename
 38477                                  ;	    INT     21h
 38478                                  ;
 38479                                  ;   Error returns:
 38480                                  ;	    AX = error_file_not_found
 38481                                  ;	       = error_not_same_device
 38482                                  ;	       = error_access_denied
 38483                                  ;
 38484                                  ;----------------------------------------------------------------------------
 38485                                  
 38486                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38487                                  _$RENAME:
 38488                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38489 00007166 51                      	push	cx
 38490 00007167 1E                      	push	ds
 38491 00007168 52                      	push	dx			; save source and possible CX arg
 38492 00007169 06                      	PUSH	ES
 38493 0000716A 1F                      	POP	DS			; move dest to source
 38494 0000716B 89FE                    	MOV	SI,DI			; save for offsets
 38495 0000716D BF[3E04]                	MOV	DI,RENBUF
 38496 00007170 E83AFB                  	call	TransPathSet		; munge the paths
 38497 00007173 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38498 00007178 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38499 0000717D 5E                      	pop	si
 38500 0000717E 1F                      	pop	ds
 38501 0000717F 59                      	pop	cx			; get back source and possible CX arg
 38502                                  epjc2:	
 38503 00007180 72E0                    	JC	short ChModErr		; get old error
 38504 00007182 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38505 00007188 75D8                    	JNZ	short NotFound
 38506 0000718A 51                      	push	cx			; Save possible CX arg
 38507 0000718B BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38508 0000718E E81CFB                  	call	TransPathSet		; wham
 38509 00007191 59                      	pop	cx
 38510 00007192 72EC                    	JC	short epjc2
 38511 00007194 16                      	push	ss
 38512 00007195 1F                      	pop	ds
 38513 00007196 803E[7A05]FF            	CMP	byte [CMETA],-1
 38514 0000719B 72C5                    	JB	short NotFound
 38515                                  
 38516                                  	; MSDOS 6.0
 38517 0000719D FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38518 000071A1 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38519 000071A5 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38520 000071A8 16                      	PUSH	SS			   ;AN000;;MS.
 38521 000071A9 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38522 000071AA 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38523                                  rnloop: 				   ;AN000;
 38524 000071AC E874FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38525 000071AF 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38526 000071B1 E880A0                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38527 000071B4 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38528 000071B6 FEC0                    	INC	AL			   ;AN000;;MS.	next
 38529 000071B8 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38530                                  rnerr:					   ;AN000;
 38531 000071BA 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38532                                  	;error	error_current_directory    ;AN000;;MS.
 38533 000071BD B010                    	mov	al,error_current_directory 
 38534                                  	;jmp	SYS_RET_ERR
 38535                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38536 000071BF EBA3                    	jmp	short UnlinkE
 38537                                  dorn:					   ;AN000;
 38538 000071C1 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38539 000071C6 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38540                                  
 38541 000071CB 16                      	push	ss
 38542 000071CC 1F                      	pop	ds
 38543                                  
 38544                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38545                                  	;mov	ch,16h
 38546 000071CD B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38547                                  					; rename appropriate files
 38548 000071CF E8A500                  	call	SetAttrib
 38549 000071D2 E8D8B5                  	call	DOS_RENAME		; do the deed
 38550 000071D5 728D                    	JC	short UnlinkE 		; errors
 38551                                  
 38552                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38553                                  	;jmp	SYS_RET_OK
 38554 000071D7 EB87                    	jmp	short UnlinkOk
 38555                                  
 38556                                  
 38557                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38558                                  
 38559                                  ; 14/07/2018 - Retro DOS v3.0
 38560                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38561                                  
 38562                                  ;Break <$CreateNewFile - Create a new directory entry>
 38563                                  ;----------------------------------------------------------------------------
 38564                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38565                                  ;	was no previous directory entry, and fail if a directory entry with
 38566                                  ;	the same name existed previously.
 38567                                  ;
 38568                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38569                                  ;		CX contains default file attributes
 38570                                  ;   Outputs:	Carry Clear:
 38571                                  ;		    AX has file handle opened for read/write
 38572                                  ;		Carry Set:
 38573                                  ;		    AX has error code
 38574                                  ;   Registers modified: All
 38575                                  ;----------------------------------------------------------------------------
 38576                                  
 38577                                  _$CreateNewFile:
 38578 000071D9 51                      	push	cx			; Save attributes on stack
 38579 000071DA B9[C42B]                	MOV	CX,DOS_Create_New	; routine to call
 38580 000071DD E914FF                  	JMP	AccessSet		; use good ol' open
 38581                                  
 38582                                  ;**	BinToAscii - convert a number to a string.
 38583                                  ;----------------------------------------------------------------------------
 38584                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38585                                  ;	This routine is used to generate temp file names so we don't spend
 38586                                  ;	the time and code needed for a true hex number, we just use
 38587                                  ;	A thorugh O.
 38588                                  ;
 38589                                  ;	ENTRY	(ax) = value
 38590                                  ;		(es:di) = destination
 38591                                  ;	EXIT	(es:di) updated by 4
 38592                                  ;	USES	cx, di, flags
 38593                                  ;----------------------------------------------------------------------------
 38594                                  
 38595                                  ; MSDOS 3.3
 38596                                  ;BinToAscii:
 38597                                  ;	mov     cx,4
 38598                                  ;bta5:
 38599                                  ;	push    cx
 38600                                  ;	mov     cl,4
 38601                                  ;	rol     ax,cl
 38602                                  ;	push    ax
 38603                                  ;	and     al,0Fh
 38604                                  ;	add     al,'0'
 38605                                  ;	cmp     al,'9'
 38606                                  ;	jbe     short bta6
 38607                                  ;	add     al,7
 38608                                  ;bta6: 
 38609                                  ;	stosb
 38610                                  ;	pop     ax
 38611                                  ;	pop     cx
 38612                                  ;	loop    bta5
 38613                                  ;	retn
 38614                                  
 38615                                  ; MSDOS 6.0
 38616                                  BinToAscii:
 38617 000071E0 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38618                                  bta5:	
 38619 000071E3 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38620 000071E5 50                      	push	ax			; preserve remainder of digits
 38621 000071E6 240F                    	AND	AL,0Fh			; grab low nibble
 38622 000071E8 0441                    	ADD	AL,'A'			; turn into ascii
 38623 000071EA AA                      	STOSB				; drop in the character
 38624 000071EB 58                      	pop	ax			; (ax) = shifted number
 38625 000071EC FECD                    	dec	ch
 38626 000071EE 75F3                    	jnz	short bta5		; process 4 digits
 38627 000071F0 C3                      	retn
 38628                                  
 38629                                  ;Break	<$CreateTempFile - create a unique name>
 38630                                  ;----------------------------------------------------------------------------
 38631                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38632                                  ;	Method used is to get the current time, convert to a name and attempt
 38633                                  ;	a create new. Repeat until create new succeeds.
 38634                                  ;
 38635                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38636                                  ;		CX  contains default attributes
 38637                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38638                                  ;		AX has handle
 38639                                  ;   Registers modified: all
 38640                                  ;----------------------------------------------------------------------------
 38641                                  
 38642                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38643                                  
 38644                                  _$CreateTempFile:
 38645                                  	;Enter
 38646 000071F1 55                      	push	bp
 38647 000071F2 89E5                    	mov	bp,sp
 38648                                  
 38649                                  	;LocalVar  EndPtr,DWORD
 38650                                  	;LocalVar  FilPtr,DWORD
 38651                                  	;LocalVar  Attr,WORD
 38652                                  
 38653 000071F4 83EC0A                  	sub	sp,10
 38654                                  
 38655                                  	;test	cx,0FFD8h
 38656 000071F7 F7C1D8FF                	test	CX,~attr_changeable
 38657 000071FB 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38658                                  
 38659                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38660                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38661                                  ; below. The code loops on error_access_denied, but if one of the non
 38662                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38663                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38664                                  ; need to detect these cases before getting to the loop.
 38665                                  
 38666                                  	;mov	ax, 5
 38667 000071FD B80500                  	MOV	AX,error_access_denied
 38668 00007200 EB69                    	JMP	SHORT SETTMPERR
 38669                                  
 38670                                  OKatts:
 38671                                  	;MOV	attr,CX 		; save attribute
 38672 00007202 894EF6                  	mov     [bp-10],cx
 38673                                  	;MOV	FilPtrL,DX		; pointer to file
 38674 00007205 8956F8                  	mov	[bp-8],dx
 38675                                  	;MOV	FilPtrH,DS
 38676 00007208 8C5EFA                  	mov	[bp-6],ds
 38677                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38678 0000720B 8C5EFE                  	mov	[bp-2],ds
 38679 0000720E 1E                      	PUSH	DS
 38680 0000720F 07                      	POP	ES			; destination for nul search
 38681 00007210 89D7                    	MOV	DI,DX
 38682 00007212 89F9                    	MOV	CX,DI
 38683 00007214 F7D9                    	NEG	CX			; number of bytes remaining in segment
 38684                                  	; MSDOS 6.0
 38685 00007216 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38686 00007218 7501                    	JNZ	short okok		;AN000;MS. no
 38687                                  	;MOV	CX,-1			;AN000;MS.
 38688                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38689                                  	; 17/12/2022
 38690 0000721A 49                      	dec	cx  ; mov cx,-1
 38691                                  	;mov	cx,-1 ; 0FFFh
 38692                                  okok:					;AN000;
 38693 0000721B 31C0                    	XOR	AX,AX			;AN000;
 38694 0000721D F2AE                    	REPNZ	SCASB			;AN000;
 38695                                  					;AN000;
 38696 0000721F 4F                      	DEC	DI			; point back to the null
 38697 00007220 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38698 00007224 E895DF                  	call	PATHCHRCMP		; Is it a path separator?
 38699 00007227 7403                    	JZ	short SETENDPTR		; Yes
 38700                                  STOREPTH:
 38701 00007229 B05C                    	MOV	AL,'\'
 38702 0000722B AA                      	STOSB				; Add a path separator (and INC DI)
 38703                                  SETENDPTR:
 38704                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38705 0000722C 8856FC                  	mov	[bp-4],dl
 38706                                  CreateLoop:
 38707 0000722F 16                      	push	ss			; let ReadTime see variables
 38708 00007230 1F                      	pop	ds
 38709 00007231 55                      	push	bp
 38710 00007232 E83F99                  	call	READTIME		; go get time
 38711 00007235 5D                      	pop	bp
 38712                                  ;
 38713                                  ; Time is in CX:DX. Go drop it into the string.
 38714                                  ;
 38715                                  	;les	di,EndPtr		; point to the string
 38716 00007236 C47EFC                  	les	di,[BP-4]
 38717 00007239 89C8                    	mov	ax,cx
 38718 0000723B E8A2FF                  	call	BinToAscii		; store upper word
 38719 0000723E 89D0                    	mov	ax,dx
 38720 00007240 E89DFF                  	call	BinToAscii		; store lower word
 38721 00007243 30C0                    	xor	al,al
 38722 00007245 AA                      	STOSB				; nul terminate
 38723                                  	;LDS	DX,FilPtr		; get name
 38724 00007246 C556F8                  	lds	dx,[bp-8]
 38725                                  	;MOV	CX,Attr 		; get attr
 38726 00007249 8B4EF6                  	mov	cx,[bp-10]
 38727 0000724C 55                      	push	bp
 38728 0000724D E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38729 00007250 5D                      	pop	bp
 38730 00007251 7319                    	JNC	short CreateDone	; failed, go try again
 38731                                  
 38732                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38733                                  ; error and figure out what to do.
 38734                                  
 38735                                  	;; MSDOS 3.3			; M049 - start
 38736                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38737                                  ;;	cmp	al,error_file_exists
 38738                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38739                                  ;;	cmp	al,error_access_denied
 38740                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38741                                  
 38742                                  	; MSDOS 6.0
 38743                                  	;cmp	al,50h
 38744 00007253 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38745 00007255 74D8                    	JZ	short CreateLoop	; Y: try again
 38746                                  	;cmp	al,5
 38747 00007257 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 38748 00007259 7510                    	JNZ	short SETTMPERR		; N: Error out
 38749                                  					; Y: Check to see if we got this due
 38750                                  					;    to the network drive. Note that
 38751                                  					;    the redir will set the exterr
 38752                                  					;    to error_cannot_make if this is 
 38753                                  					;    so. 
 38754 0000725B 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 38755                                  					; See if it's REALLY an att mismatch
 38756 00007261 7408                    	je	short SETTMPERR		; no, network error, stop
 38757                                  ;M070
 38758                                  ; If the user failed on an I24, we do not want to try again
 38759                                  ;
 38760 00007263 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 38761                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 38762                                  
 38763                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 38764                                  	; 17/12/2022
 38765 00007269 75C4                    	jne	short CreateLoop ; 10/06/2019 
 38766                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38767                                  	;jz	short SETTMPERR
 38768                                  	;jmp	short CreateLoop
 38769                                  
 38770                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 38771                                  					; M049 - end
 38772                                  SETTMPERR:
 38773 0000726B F9                      	STC
 38774                                  CreateDone:
 38775                                  	;Leave
 38776 0000726C 89EC                    	mov	sp,bp
 38777 0000726E 5D                      	pop	bp
 38778 0000726F 7203                    	JC	short CreateFail
 38779 00007271 E91094                  	jmp	SYS_RET_OK		; success!
 38780                                  CreateFail:
 38781 00007274 E91694                  	jmp	SYS_RET_ERR
 38782                                  
 38783                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 38784                                  ;   (CH) or to the value in CL if the current system call is through
 38785                                  ;   serverdoscall.
 38786                                  ;
 38787                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 38788                                  ;		fSharing == TRUE => set sattrib to CL
 38789                                  ;   Outputs:	none
 38790                                  ;   Registers changed:	CX
 38791                                  
 38792                                  SetAttrib:
 38793 00007277 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 38794 0000727D 7502                    	jnz	short Set
 38795 0000727F 88E9                    	mov	cl,ch
 38796                                  Set:
 38797 00007281 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 38798 00007286 C3                      	retn
 38799                                  
 38800                                  ; 14/07/2018 - Retro DOS v3.0
 38801                                  ; MSDOS 6.0
 38802                                  
 38803                                  ; 29/04/2019 - Retro DOS v4.0
 38804                                  
 38805                                  ;Break	<Extended_Open- Extended open the file>
 38806                                  ;----------------------------------------------------------------------------
 38807                                  ; Input: AL= 0 reserved  AH=6CH
 38808                                  ;	 BX= mode
 38809                                  ;	 CL= create attribute  CH=search attribute (from server)
 38810                                  ;	 DX= flag
 38811                                  ;	 DS:SI = file name
 38812                                  ;	 ES:DI = parm list
 38813                                  ;			   DD  SET EA list (-1) null
 38814                                  ;			   DW  n  parameters
 38815                                  ;			   DB  type (TTTTTTLL)
 38816                                  ;			   DW  IOMODE
 38817                                  ; Function: Extended Open
 38818                                  ; Output: carry clear
 38819                                  ;		     AX= handle
 38820                                  ;		     CX=1 file opened
 38821                                  ;			2 file created/opened
 38822                                  ;			3 file replaced/opened
 38823                                  ;	  carry set: AX has error code
 38824                                  ;----------------------------------------------------------------------------
 38825                                  
 38826                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38827                                  _$Extended_Open:			  ;AN000;
 38828                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 38829 00007287 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 38830 0000728C 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 38831                                  	; 17/12/2022
 38832 00007293 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 38833                                  	;;test	dx,0FE00h
 38834                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 38835 00007296 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 38836 00007298 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 38837 0000729A 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 38838 0000729D 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 38839                                  	;and	dl,0Fh
 38840 0000729F 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 38841 000072A2 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 38842 000072A5 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 38843                                  	;and	ah,0F0h
 38844 000072A7 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 38845 000072AA 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 38846 000072AD 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 38847                                  
 38848 000072AF 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 38849 000072B4 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 38850 000072B9 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 38851 000072BE 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 38852 000072C3 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 38853 000072C8 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 38854 000072CD 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 38855 000072D2 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 38856 000072D7 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 38857 000072D9 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 38858 000072DB EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 38859                                  ext_inval2:				  ;AN000;;EO.
 38860                                  	;mov	al,1
 38861 000072DD B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 38862                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38863                                  eo_err:
 38864                                  	;jmp	SYS_RET_ERR
 38865 000072DF EB93                    	jmp	short CreateFail
 38866                                  
 38867                                  ext_inval_parm:				  ;AN000;EO..
 38868 000072E1 59                      	POP	CX			  ;AN000;EO..  pop up satck
 38869 000072E2 5E                      	POP	SI			  ;AN000;EO..
 38870                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 38871                                  	;mov	al,13
 38872 000072E3 B00D                    	mov	al,error_invalid_data
 38873                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38874                                  	;;jmp	SYS_RET_ERR
 38875                                  	;jmp	short eo_err
 38876                                  	; 17/12/2022
 38877 000072E5 EB8D                    	jmp	short CreateFail
 38878                                  
 38879                                  	; 17/12/2022	
 38880                                  ;error_return:				  ;AN000;EO.
 38881                                  ;	retn				  ;AN000;EO.. return with error
 38882                                  
 38883                                  goopen2:				  ;AN000;
 38884                                  	; 17/12/2022
 38885                                  	;test	bh,20h				 
 38886 000072E7 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 38887                                  	;;test	bx,2000h
 38888                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 38889 000072EA 7406                    	JZ	short goopen		  ;AN000;EO.. no
 38890                                  	;or	byte [SS:EXTOPEN_ON],2
 38891 000072EC 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 38892                                  goopen:					  ;AN000;
 38893                                  	;or	byte [SS:EXTOPEN_ON],1 
 38894 000072F2 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 38895                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 38896                                  	; 18/12/2022
 38897 000072F8 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 38898                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 38899 000072FE 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 38900 00007304 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 38901 00007306 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 38902 00007309 723F                    	JC	short error_return	  ;AN000;;EO. error
 38903                                  
 38904 0000730B 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38905 00007311 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38906                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38907 00007313 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 38908 0000731A EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 38909                                  
 38910                                  	; 17/12/2022
 38911                                  ;ok_return2:
 38912                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 38913                                  
 38914                                  chknext:
 38915                                  	; 17/12/2022
 38916 0000731C 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 38917                                  	;;test	word [SS:EXTOPEN_FLAG],1
 38918                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 38919 00007322 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 38920 00007324 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 38921 00007327 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 38922 00007329 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38923 0000732F 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38924 00007331 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 38925 00007338 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 38926 0000733E 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 38927 00007340 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 38928 00007347 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38929                                  error_return2:
 38930 00007349 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 38931                                  error_return:	 ;17/12/2022
 38932 0000734A C3                      	retn				  ;AN000;;EO. return with error
 38933                                  
 38934                                  	; 17/12/2022
 38935                                  ok_return:
 38936                                  ok_return2:
 38937 0000734B E93693                  	jmp	SYS_RET_OK
 38938                                  
 38939                                  exist_open:				  ;AN000;
 38940 0000734E 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 38941 00007354 7402                    	jz	short noserver		  ;AN000;;EO. no
 38942 00007356 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 38943                                  noserver:
 38944 00007358 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 38945 0000735B 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 38946 0000735D 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 38947 00007363 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 38948                                  local_extopen:
 38949                                  	;cmp	ax,2
 38950 00007365 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 38951 00007368 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 38952                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 38953                                  	; 17/12/2022
 38954 0000736A 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 38955                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 38956                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 38957                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 38958                                  	; 17/12/2022
 38959 00007370 745D                    	jz	short extexit ; 10/06/2019
 38960                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38961                                  	;jnz	short do_creat
 38962                                  	;jmp	short extexit
 38963                                  do_creat:
 38964 00007372 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 38965 00007377 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 38966 0000737C 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 38967 0000737E E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 38968 00007381 724C                    	JC	short extexit 		  ;AN000;;EO. error
 38969                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38970 00007383 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 38971                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 38972 0000738A EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38973                                  
 38974                                  ext_ok:
 38975 0000738C 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 38976 00007392 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 38977                                  	;mov	word [SS:EXTOPEN_FLAG],1
 38978 00007394 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 38979                                  setXAttr:
 38980                                  	; 29/04/2019
 38981 0000739B 50                      	push	ax
 38982 0000739C E82B91                  	call	Get_User_Stack		  ;AN000;;EO.
 38983 0000739F 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 38984                                  	;mov	[si+4],ax
 38985 000073A3 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 38986 000073A6 58                      	pop	ax			  ;AN000;;EO.
 38987 000073A7 8904                    	mov	[si],ax
 38988                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 38989                                  	; 17/12/2022
 38990 000073A9 EBA0                    	jmp	short ok_return
 38991                                  ;ok_return:				  ;AN000;
 38992                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 38993                                  
 38994                                  extexit2:				  ;AN000; ERROR RECOVERY
 38995 000073AB 5B                      	POP	BX			  ;AN000;EO. close the handle
 38996 000073AC 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 38997                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 38998 000073AD 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 38999                                  					  ;AN000;EO. from create;smr;SS Override
 39000 000073B3 750C                    	JNZ	short justopen		  ;AN000;EO.
 39001 000073B5 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39002 000073BA C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39003 000073BC E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39004 000073BF EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39005                                  
 39006                                  justopen:				  ;AN000;
 39007 000073C1 E881F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39008                                  reserror:				  ;AN000;
 39009 000073C4 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39010 000073C5 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39011                                  
 39012                                  ext_file_unfound:			  ;AN000;
 39013                                  	;mov	ax,2
 39014 000073C7 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39015 000073CA EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39016                                  ext_inval:				  ;AN000;
 39017                                  	;mov	ax,1
 39018 000073CC B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39019                                  lockoperr:	; 17/12/2022
 39020                                  extexit:
 39021 000073CF E9BB92                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39022                                  
 39023                                  ;============================================================================
 39024                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39025                                  ;============================================================================
 39026                                  ; 14/07/2018 - Retro DOS v3.0
 39027                                  ; 22/05/2019 - Retro DOS v4.0
 39028                                  
 39029                                  ;BREAK <$LockOper - Lock Calls>
 39030                                  ;----------------------------------------------------------------------------
 39031                                  ;
 39032                                  ;   Assembler usage:
 39033                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39034                                  ;	    MOV     CX, OffsetHigh
 39035                                  ;	    MOV     DX, OffsetLow
 39036                                  ;	    MOV     SI, LengthHigh
 39037                                  ;	    MOV     DI, LengthLow
 39038                                  ;	    MOV     AH, LockOper
 39039                                  ;	    MOV     AL, Request
 39040                                  ;	    INT     21h
 39041                                  ;
 39042                                  ;   Error returns:
 39043                                  ;	    AX = error_invalid_handle
 39044                                  ;	       = error_invalid_function
 39045                                  ;	       = error_lock_violation
 39046                                  ;
 39047                                  ;   Assembler usage:
 39048                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39049                                  ;
 39050                                  ;				    0? lock all
 39051                                  ;				    8? lock write
 39052                                  ;				    ?2 lock multiple
 39053                                  ;				    ?3 unlock multiple
 39054                                  ;				    ?4 lock/read
 39055                                  ;				    ?5 write/unlock
 39056                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39057                                  ;	    MOV     BX, Handle
 39058                                  ;	    MOV     CX, count or size
 39059                                  ;	    LDS     DX, buffer
 39060                                  ;	    INT     21h
 39061                                  ;
 39062                                  ;   Error returns:
 39063                                  ;	    AX = error_invalid_handle
 39064                                  ;	       = error_invalid_function
 39065                                  ;	       = error_lock_violation
 39066                                  ;
 39067                                  ;----------------------------------------------------------------------------
 39068                                  
 39069                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39070                                  _$LockOper:
 39071 000073D2 3C01                    	CMP	AL,1
 39072 000073D4 770B                    	JA	short lock_bad_func
 39073                                  
 39074 000073D6 57                      	PUSH	DI			       ; Save LengthLow
 39075 000073D7 E8D0F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39076 000073DA 731D                    	JNC	short lock_do 		       ; have valid handle
 39077 000073DC 5F                      	POP	DI			       ; Clean stack
 39078                                  	;mov	al,6
 39079 000073DD B006                    	mov	al,error_invalid_handle
 39080                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39081                                  ;lockoperr:
 39082                                  	;jmp	SYS_RET_ERR
 39083                                  	; 17/12/2022
 39084 000073DF EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39085                                  
 39086                                  lock_bad_func:
 39087                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39088 000073E1 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39089                                  	;mov	al,1
 39090 000073E7 B001                    	mov	al,error_invalid_function
 39091                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39092                                  lockoperrj:
 39093                                  	;jmp	SYS_RET_ERR
 39094 000073E9 EBE4                    	jmp	short lockoperr
 39095                                  
 39096                                  	; 22/05/2019 - Retro DOS v4.0
 39097                                  
 39098                                  	; MSDOS 6.0 
 39099                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39100                                  ; Dead code deleted, MD, 23 Mar 90
 39101                                  
 39102                                  ;lock_do:
 39103                                  ;	; MSDOS 3.3
 39104                                  ;	or	al,al
 39105                                  ;	pop	ax
 39106                                  ;	jz	short DOS_Lock
 39107                                  ;DOS_Unlock:
 39108                                  ;	;test	word [es:di+5],8000h
 39109                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39110                                  ;	JZ	short LOCAL_UNLOCK
 39111                                  ;	push    ax
 39112                                  ;	mov     ax,110Bh
 39113                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39114                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39115                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39116                                  ;			; SFT DPB field -> DPB of drive containing file
 39117                                  ;			; Return: CF set error
 39118                                  ;	pop     bx
 39119                                  ;	jmp     short ValChk
 39120                                  ;
 39121                                  ;LOCAL_UNLOCK:
 39122                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39123                                  ;ValChk:
 39124                                  ;	JNC	short Lock_OK
 39125                                  ;lockerror:
 39126                                  ;	jmp	SYS_RET_ERR
 39127                                  ;Lock_OK:
 39128                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39129                                  ;	jmp	SYS_RET_OK
 39130                                  ;DOS_Lock:
 39131                                  ;	;test	word [es:di+5],8000h
 39132                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39133                                  ;	JZ	short LOCAL_LOCK
 39134                                  ;	;CallInstall NET_XLock,MultNET,10
 39135                                  ;	mov     ax, 110Ah
 39136                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39137                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39138                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39139                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39140                                  ;			; Return: CF set error
 39141                                  ;	JMP	short ValChk
 39142                                  ;
 39143                                  ;LOCAL_LOCK:
 39144                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39145                                  ;	JMP	short ValChk
 39146                                  
 39147                                  ; 17/12/2022
 39148                                  LOCAL_UNLOCK:
 39149                                  	; MSDOS 3.3
 39150                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39151                                  	; MSDOS 6.0
 39152 000073EB FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39153                                  ValChk:
 39154 000073EF 7302                    	JNC	short Lock_OK
 39155                                  lockerror:
 39156                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39157                                  	;;jmp	SYS_RET_ERR
 39158                                  	;jmp	short lockoperrj
 39159                                  	; 17/12/2022
 39160 000073F1 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39161                                  Lock_OK:
 39162                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39163                                  	; 10/06/2019
 39164 000073F3 A1[0C06]                	mov	ax,[TEMP_VAR]
 39165 000073F6 E98B92                  	jmp	SYS_RET_OK
 39166                                  
 39167                                  	; 22/05/2019
 39168                                  lock_do:
 39169                                  	; MSDOS 6.0
 39170 000073F9 89C3                    	MOV	BX,AX				; save AX
 39171 000073FB BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39172                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39173                                  	;;mov	[bp+0],dx
 39174                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39175                                  	; 15/12/2022
 39176 000073FE 895600                  	mov	[bp],dx
 39177                                  	;mov	[bp+2],cx
 39178 00007401 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39179 00007404 59                      	POP	CX				; get low length
 39180                                  	;mov	[bp+4],cx
 39181 00007405 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39182                                  	;mov	[bp+6],si
 39183 00007408 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39184 0000740B B90100                  	MOV	CX,1				; one range
 39185                                  
 39186                                  ;	PUSH	CS				;
 39187                                  ;	POP	DS				; DS:DX points to
 39188                                  
 39189 0000740E 16                      	push	ss
 39190 0000740F 1F                      	pop	ds
 39191                                  
 39192 00007410 89EA                    	MOV	DX,BP				; Lock_Buffer
 39193                                  	;test	al,1
 39194 00007412 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39195                                  	;JNZ	short DOS_Unlock		; yes
 39196                                  	;JMP	short DOS_Lock			; function 0
 39197                                  	; 17/12/2022
 39198                                  	; 10/06/2019
 39199 00007414 740E                    	jz	short DOS_Lock
 39200                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39201                                  	;JNZ	short DOS_Unlock
 39202                                  	;JMP	short DOS_Lock
 39203                                  
 39204                                  DOS_Unlock:
 39205                                  	;;test	word [es:di+5],8000h
 39206                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39207 00007416 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39208 0000741B 74CE                    	JZ	short LOCAL_UNLOCK
 39209                                  
 39210                                  lock_unlock: ; 22/05/2019
 39211                                  	
 39212                                  	;CallInstall Net_Xlock,MultNET,10
 39213                                  	
 39214                                  	; MSDOS 3.3
 39215                                  	;mov     ax,110Bh
 39216                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39217                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39218                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39219                                  			; SFT DPB field -> DPB of drive containing file
 39220                                  			; Return: CF set error
 39221                                  	; MSDOS 6.0
 39222 0000741D B80A11                  	mov     ax,110Ah
 39223 00007420 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39224                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39225                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39226                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39227                                  			; Return: CF set error
 39228                                  
 39229 00007422 EBCB                    	JMP	SHORT ValChk
 39230                                  
 39231                                  ; 17/12/2022
 39232                                  %if 0
 39233                                  LOCAL_UNLOCK:
 39234                                  	; MSDOS 3.3
 39235                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39236                                  	; MSDOS 6.0
 39237                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39238                                  ValChk:
 39239                                  	JNC	short Lock_OK
 39240                                  lockerror:
 39241                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39242                                  	;jmp	SYS_RET_ERR
 39243                                  	jmp	short lockoperrj
 39244                                  Lock_OK:
 39245                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39246                                  	; 10/06/2019
 39247                                  	mov	ax,[TEMP_VAR]
 39248                                  	jmp	SYS_RET_OK
 39249                                  %endif
 39250                                  
 39251                                  DOS_Lock:
 39252                                  	;;test	word [es:di+5],8000h
 39253                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39254 00007424 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39255 00007429 7407                    	JZ	short LOCAL_LOCK
 39256                                  
 39257                                  	;CallInstall NET_XLock,MultNET,10
 39258                                  
 39259 0000742B B80A11                  	mov     ax,110Ah
 39260 0000742E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39261                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39262                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39263                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39264                                  			; Return: CF set error
 39265                                  
 39266 00007430 EBBD                    	JMP	short ValChk
 39267                                  
 39268                                  LOCAL_LOCK:
 39269                                  	; MSDOS 3.3
 39270                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39271                                  	; MSDOS 6.0
 39272 00007432 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39273                                  
 39274 00007436 EBB7                    	JMP	short ValChk
 39275                                  
 39276                                  ; 14/07/2018 - Retro DOS v3.0
 39277                                  ; LOCK_CHECK
 39278                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39279                                  
 39280                                  ;----------------------------------------------------------------------------
 39281                                  ; Inputs:
 39282                                  ;	Outputs of SETUP
 39283                                  ;	[USER_ID] Set
 39284                                  ;	[PROC_ID] Set
 39285                                  ; Function:
 39286                                  ;	Check for lock violations on local I/O
 39287                                  ;	Retries are attempted with sleeps in between
 39288                                  ; Outputs:
 39289                                  ;    Carry clear
 39290                                  ;	Operation is OK
 39291                                  ;    Carry set
 39292                                  ;	A lock violation detected
 39293                                  ; Outputs of SETUP preserved
 39294                                  ;----------------------------------------------------------------------------
 39295                                  
 39296                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39297                                  	; 22/05/2019 - Retro DOS v4.0
 39298                                  LOCK_CHECK:
 39299 00007438 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39300                                  LockRetry:
 39301 0000743C 53                      	push	bx		; save regs
 39302 0000743D 50                      	push	ax ; MSDOS 6.0
 39303                                  
 39304                                  	;MSDOS 3.3
 39305                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39306                                  	;MSDOS 6.0
 39307 0000743E FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39308                                  
 39309 00007442 58                      	pop	ax ; MSDOS 6.0
 39310 00007443 5B                      	pop	bx		; restrore regs
 39311 00007444 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39312                                  LockN:
 39313 00007446 E8409E                  	call	Idle		; wait a while
 39314 00007449 4B                      	DEC	BX		; remember a retry
 39315 0000744A 75F0                    	JNZ	short LockRetry	; more retries left...
 39316 0000744C F9                      	STC
 39317                                  lc_ret_label:
 39318 0000744D C3                      	retn
 39319                                  
 39320                                  ; 14/07/2018 - Retro DOS v3.0
 39321                                  ; LOCK_VIOLATION
 39322                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39323                                  
 39324                                  ;----------------------------------------------------------------------------
 39325                                  ; Inputs:
 39326                                  ;	[THISDPB] set
 39327                                  ;	[READOP] indicates whether error on read or write
 39328                                  ; Function:
 39329                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39330                                  ; Outputs:
 39331                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39332                                  ;	Carry clear if user wants a retry
 39333                                  ;
 39334                                  ; DS, ES, DI, CX preserved, others destroyed
 39335                                  ;----------------------------------------------------------------------------
 39336                                  
 39337                                  LOCK_VIOLATION:
 39338 0000744E 1E                      	PUSH	DS
 39339 0000744F 06                      	PUSH	ES
 39340 00007450 57                      	PUSH	DI
 39341 00007451 51                      	PUSH	CX
 39342                                  	;mov	ax,21h
 39343 00007452 B82100                  	MOV	AX,error_lock_violation
 39344                                  	;mov	byte [ALLOWED],18h
 39345 00007455 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39346 0000745A C42E[8A05]              	LES	BP,[THISDPB]
 39347 0000745E BF0100                  	MOV	DI,1		; Fake some registers
 39348 00007461 89F9                    	MOV	CX,DI
 39349                                  	;mov	dx,[es:bp+11]
 39350 00007463 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39351 00007467 E8BCDF                  	call	HARDERR
 39352 0000746A 59                      	POP	CX
 39353 0000746B 5F                      	POP	DI
 39354 0000746C 07                      	POP	ES
 39355 0000746D 1F                      	POP	DS
 39356 0000746E 3C01                    	CMP	AL,1
 39357 00007470 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39358 00007472 F9                      	STC
 39359 00007473 C3                      	retn
 39360                                  
 39361                                  ; 14/07/2018 - Retro DOS v3.0
 39362                                  
 39363                                  ;----------------------------------------------------------------------------
 39364                                  
 39365                                  ;	do a retz to return error
 39366                                  
 39367                                  	; 22/05/2019 - Retro DOS v4.0
 39368                                  CheckShare:
 39369                                  	; MSDOS 3.3
 39370                                  	;cmp	byte [cs:fShare],0
 39371                                  	;retn
 39372                                  
 39373                                  	; MSDOS 6.0
 39374 00007474 1E                      	push	ds			;smr;
 39375                                  	;getdseg <ds>			; ds -> dosdata
 39376 00007475 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39377 0000747A 803E[0303]00            	cmp	byte [fShare],0
 39378 0000747F 1F                      	pop	ds			;smr;
 39379 00007480 C3                      	retn
 39380                                  	
 39381                                  ;============================================================================
 39382                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39383                                  ;============================================================================
 39384                                  ; 14/07/2018 - Retro DOS v3.0
 39385                                  ; 22/05/2019 - Retro DOS v4.0
 39386                                  
 39387                                  ; SHARE_CHECK
 39388                                  ;----------------------------------------------------------------------------
 39389                                  ; Inputs:
 39390                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39391                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39392                                  ;       [WFP_START] has full path of name
 39393                                  ;       [USER_ID] Set
 39394                                  ;       [PROC_ID] Set
 39395                                  ; Function:
 39396                                  ;       Check for sharing violations on local file/device access
 39397                                  ; Outputs:
 39398                                  ;    Carry clear
 39399                                  ;       Sharing approved
 39400                                  ;    Carry set
 39401                                  ;       A sharing violation detected
 39402                                  ;           AX is error code
 39403                                  ; USES    ALL but DS
 39404                                  ;----------------------------------------------------------------------------
 39405                                  
 39406                                  	; 22/05/2019 - Retro DOS v4.0
 39407                                  SHARE_CHECK:
 39408                                  	; 26/07/2019
 39409 00007481 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39410                                  shchk_retn:
 39411 00007485 C3                      	retn
 39412                                  
 39413                                  ; SHARE_VIOLATION
 39414                                  ;----------------------------------------------------------------------------
 39415                                  ; Inputs:
 39416                                  ;       [THISDPB] Set
 39417                                  ;       AX has error code
 39418                                  ; Function:
 39419                                  ;       Handle Sharing errors
 39420                                  ; Outputs:
 39421                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39422                                  ;       Carry clear if user wants a retry
 39423                                  ;
 39424                                  ; DS, ES, DI preserved, others destroyed
 39425                                  ;----------------------------------------------------------------------------
 39426                                  
 39427                                  SHARE_VIOLATION:
 39428 00007486 1E                      	PUSH    DS
 39429 00007487 06                      	PUSH	ES
 39430 00007488 57                      	PUSH    DI
 39431 00007489 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39432                                  	;mov	byte [ALLOWED],18h
 39433 0000748E C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39434 00007493 C42E[8A05]              	LES     BP,[THISDPB]
 39435 00007497 BF0100                  	MOV     DI,1			; Fake some registers
 39436 0000749A 89F9                    	MOV     CX,DI
 39437                                  	;mov	dx,[es:bp+17]
 39438 0000749C 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39439 000074A0 E883DF                  	call	HARDERR
 39440 000074A3 5F                      	POP     DI
 39441 000074A4 07                      	POP	ES
 39442 000074A5 1F                      	POP     DS
 39443 000074A6 3C01                    	CMP     AL,1
 39444 000074A8 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39445 000074AA F9                      	STC
 39446 000074AB C3                      	retn
 39447                                  
 39448                                  ;----------------------------------------------------------------------------
 39449                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39450                                  ;       NOT perform a close, it merely asserts that the sharing information
 39451                                  ;       for the SFT/UID/PID may be safely released.
 39452                                  ;
 39453                                  ;   Inputs:     ES:DI points to an SFT
 39454                                  ;   Outputs:    None
 39455                                  ;   Registers modified: all except DS,ES,DI
 39456                                  ;----------------------------------------------------------------------------
 39457                                  
 39458                                  ShareEnd:
 39459                                  	; 26/07/2019
 39460 000074AC FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39461 000074B0 C3                      	retn
 39462                                  
 39463                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39464                                  ;----------------------------------------------------------------------------
 39465                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39466                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39467                                  ;
 39468                                  ;   Inputs:     ThisSFT points to the SFT
 39469                                  ;               WFP_Start points to the WFP
 39470                                  ;   Outputs:    Carry clear => successful entry
 39471                                  ;               Carry set => failed system call
 39472                                  ;   Registers modified: all
 39473                                  ;----------------------------------------------------------------------------
 39474                                  
 39475                                  ShareEnter:
 39476 000074B1 51                      	push	cx
 39477                                  retry:
 39478 000074B2 8B0E[1A00]              	mov     cx,[RetryCount]
 39479                                  attempt:
 39480 000074B6 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39481 000074BA 31C0                    	XOR     AX,AX
 39482                                   	;mov	[es:di+51],axfff
 39483 000074BC 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39484 000074C0 51                      	push	cx
 39485 000074C1 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39486 000074C4 59                      	pop	cx
 39487 000074C5 730A                    	jnc	short done		; success, let the user see this
 39488 000074C7 E8BF9D                  	call	Idle                    ; wait a while
 39489 000074CA E2EA                    	loop    attempt                 ; go back for another attempt
 39490 000074CC E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39491 000074CF 73E1                    	jnc	short retry		; user said to retry, go do it
 39492                                  done:
 39493 000074D1 59                      	pop	cx
 39494 000074D2 C3                      	retn
 39495                                  
 39496                                  ;============================================================================
 39497                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39498                                  ;============================================================================
 39499                                  ; 29/04/2019 - Retro DOS 4.0
 39500                                  
 39501                                  ;** EXEPATCH.ASM 
 39502                                  ;----------------------------------------------------------------------------
 39503                                  ;	Contains the foll:
 39504                                  ;
 39505                                  ;		- code to find and overlay buggy unpack code
 39506                                  ;		- new code to be overlayed on buggy unpack code 
 39507                                  ;		- old code sequence to identify buggy unpack code
 39508                                  ;
 39509                                  ;	Revision history:
 39510                                  ;
 39511                                  ;		Created: 5/14/90
 39512                                  ;----------------------------------------------------------------------------
 39513                                  
 39514                                  ;----------------------------------------------------------------------------
 39515                                  ;
 39516                                  ; M020 : Fix for rational bug - for details see routine header
 39517                                  ; M028 : 4b04 implementation
 39518                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39519                                  ; M032 : set turnoff bit only if DOS in HMA.
 39520                                  ; M033 : if IP < 2 then not exepacked.
 39521                                  ; M046 : support for a 4th version of exepacked files.
 39522                                  ; M068 : support for copy protected apps.
 39523                                  ; M071 : use A20OFF_COUNT of 10.
 39524                                  ;
 39525                                  ;----------------------------------------------------------------------------
 39526                                  
 39527                                  PATCH1_COM_OFFSET	EQU	06CH
 39528                                  PATCH1_OFFSET		EQU	028H
 39529                                  PATCH1_CHKSUM		EQU	0EF4EH
 39530                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39531                                  
 39532                                  PATCH2_COM_OFFSET	EQU	076H
 39533                                  PATCH2_OFFSET		EQU	032H
 39534                                  
 39535                                  	; The strings that start at offset 076h have two possible 
 39536                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39537                                  
 39538                                  PATCH2_CHKSUM		EQU	78B2H
 39539                                  CHKSUM2_LEN		EQU	119H/2
 39540                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39541                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39542                                  
 39543                                  PATCH3_COM_OFFSET	EQU	074H
 39544                                  PATCH3_OFFSET		EQU	032H
 39545                                  PATCH3_CHKSUM		EQU	4EDEH
 39546                                  CHKSUM3_LEN		EQU	117H/2
 39547                                  
 39548                                  ;**	Data structure passed for ExecReady call
 39549                                  ;
 39550                                  ;struc ERStruc
 39551                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39552                                  ; .ER_Flags:	resw	1
 39553                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39554                                  ; .ER_PSP:	resw	1	; PSP of the program
 39555                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39556                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39557                                  ; .size:
 39558                                  ;endstruc
 39559                                  
 39560                                  ;DOSCODE SEGMENT
 39561                                  
 39562                                  	; 22/05/2019 - Retro DOS v4.0
 39563                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39564                                  
 39565                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39566                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39567                                  
 39568                                  ; M028 - BEGIN
 39569                                  
 39570                                  ;--------------------------------------------------------------------------
 39571                                  ;
 39572                                  ;	Procedure Name		: ExecReady
 39573                                  ;
 39574                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39575                                  ;
 39576                                  ;--------------------------------------------------------------------------
 39577                                  
 39578                                  ExecReady:
 39579 000074D3 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39580                                  	;;test	word [si+2],1
 39581                                  	; 17/12/2022
 39582 000074D5 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39583                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39584 000074D9 7413                    	jz	short er_setver		; only setver for .COM files
 39585                                  
 39586                                  	;mov	ax,[si+8]
 39587 000074DB 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39588 000074DE 83C010                  	add	ax,10h
 39589 000074E1 8EC0                    	mov	es,ax
 39590                                  
 39591                                  	;mov	cx,[si+10]
 39592 000074E3 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39593                                  	;mov	cx,[si+12]
 39594 000074E6 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39595                                  
 39596 000074E9 36FF16[1012]            	call	[ss:FixExePatch]
 39597                                  	
 39598                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39599                                  	;call	[ss:Rational386PatchPtr]
 39600                                  
 39601                                  er_setver:
 39602                                  	;;test	word [si+2],2		; Q: is this an overlay
 39603                                  	; 17/12/2022
 39604 000074EE F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39605                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39606 000074F2 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39607                                  					; N: set up lie version first
 39608 000074F4 1E                      	push	ds
 39609 000074F5 56                      	push	si
 39610                                  	;lds	si,[si+4]
 39611 000074F6 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39612 000074F9 E870ED                  	call	Scan_Execname1
 39613 000074FC E881ED                  	call	Scan_Special_Entries
 39614 000074FF 5E                      	pop	si
 39615 00007500 1F                      	pop	ds
 39616                                  	;mov	es,[si+8]
 39617 00007501 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39618 00007504 36A1[BC0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39619 00007508 26A34000                	mov	[es:PDB.Version],ax
 39620                                  
 39621                                  er_chkdoshi:
 39622 0000750C 36803E[0F12]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39623 00007512 741F                    	je	short er_done		; M032: N: done
 39624                                  
 39625                                  					; M068 - Start
 39626                                  	;mov	ax,[si+8]
 39627 00007514 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39628                                  
 39629                                  	;or	byte [ss:DOS_FLAG],4
 39630 00007517 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39631                                  					; ah = 25 & ah= 49. See dossym.inc 
 39632                                  					; under TAG M003 & M009 for 
 39633                                  					; explanation
 39634                                  	;;test	word [si+2],1
 39635                                  	; 17/12/2022
 39636 0000751D F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39637                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39638 00007521 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39639                                  					;    a20off_psp and ret
 39640 00007523 1E                         	push	ds
 39641 00007524 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39642 00007526 E85D03                  	call	IsCopyProt		; check if copy protected
 39643 00007529 1F                      	pop	ds
 39644                                  
 39645                                  er_setA20:
 39646                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39647                                  	; is non-zero at this point it indicates that the A20 is to be 
 39648                                  	; turned off for that many int 21 calls made by the app. In 
 39649                                  	; addition the A20 has to be turned off when we exit from this 
 39650                                  	; call. Hence the inc.
 39651                                  
 39652 0000752A 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39653 0000752F 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39654                                  					; turned OFF.
 39655                                  er_done:				; M068 - End
 39656 00007533 31C0                    	xor	ax,ax
 39657 00007535 C3                      	retn
 39658                                  
 39659                                  ; M028 - END
 39660                                  
 39661                                  
 39662                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39663                                  %if 0
 39664                                  
 39665                                  ;----------------------------------------------------------------------------
 39666                                  ;
 39667                                  ; procedure : Rational386Patch
 39668                                  ;
 39669                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39670                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39671                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39672                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39673                                  ;
 39674                                  ; This routine applies patches to the Rational DOS Extender to work around
 39675                                  ; most of the register trashing bugs.
 39676                                  ;
 39677                                  ; Note that there are additional register trashing bugs not fixed by these
 39678                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39679                                  ; may be modified on interrupts.
 39680                                  ;
 39681                                  ; There are two different Rational DOS Extender patchs in this module.
 39682                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39683                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39684                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39685                                  ; or not.
 39686                                  ;
 39687                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39688                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39689                                  ; running in the HMA.
 39690                                  ;
 39691                                  ; This patch detection and replacement is based on an example supplied by
 39692                                  ; Ben Williams at Rational.
 39693                                  ;
 39694                                  ;----------------------------------------------------------------------------
 39695                                  
 39696                                  ; 22/05/2019 - Retro DOS v4.0
 39697                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39698                                  
 39699                                  ;----------------------------------------------------------------------------
 39700                                  ;
 39701                                  ; INPUT : ES = segment where program got loaded
 39702                                  ;
 39703                                  ;----------------------------------------------------------------------------
 39704                                  
 39705                                  rpFind1:
 39706                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39707                                  
 39708                                  rpFind1Len equ	$ - rpFind1
 39709                                  
 39710                                  ;	cli
 39711                                  ;	in	al, 21h
 39712                                  ;	pusha
 39713                                  ;	xor	ax, ax
 39714                                  ;	out	43h, al
 39715                                  ;	mov	dx, ...
 39716                                  
 39717                                  rpFind1a:
 39718                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39719                                  
 39720                                  rpFind1aLen equ	$ - rpFind1a
 39721                                  
 39722                                  ;	mov	al, 0Eh
 39723                                  ;	out	37h, al
 39724                                  ;	xor	ax, ax
 39725                                  ;	out	0F2h, al
 39726                                  
 39727                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39728                                  
 39729                                  rpFind2:
 39730                                  	db	0Fh, 20h, 0C0h
 39731                                  
 39732                                  rpFind2Len equ	$ - rpFind2
 39733                                  
 39734                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39735                                  
 39736                                  rpFind3:
 39737                                  	db	0Fh, 22h, 0C0h, 0EAh
 39738                                  
 39739                                  rpFind3Len equ	$ - rpFind3
 39740                                  
 39741                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39742                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39743                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39744                                  
 39745                                  ; note, there is no rpRepl1 string
 39746                                  
 39747                                  rpRepl2:
 39748                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 39749                                  
 39750                                  rpRepl2Len equ	$ - rpRepl2
 39751                                  
 39752                                  ;	push	eax
 39753                                  ;	push	cx
 39754                                  ;	mov	eax, cr0
 39755                                  
 39756                                  rpRepl3:
 39757                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 39758                                  
 39759                                  rpRepl3Len equ	$ - rpRepl3
 39760                                  
 39761                                  ;	mov	ss, bx
 39762                                  ;	pop	cx
 39763                                  ;	pop	eax
 39764                                  
 39765                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 39766                                  
 39767                                  rpFind4:
 39768                                  	db	93h, 58h, 8Bh, 0CCh
 39769                                  
 39770                                  rpFind4Len equ	$ - rpFind4
 39771                                  
 39772                                  ;	xchg	bx, ax
 39773                                  ;	pop	ax
 39774                                  ;	mov	cx, sp
 39775                                  
 39776                                  rpFind5:
 39777                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 39778                                  
 39779                                  rpFind5Len equ	$ - rpFind5
 39780                                  
 39781                                  ;	mov	ax, DE0Ch
 39782                                  ;	int	67h
 39783                                  ;	mov	sp, cx
 39784                                  ;	jmp	bx
 39785                                  
 39786                                  rpRepl4:
 39787                                  	db	93h, 58h, 8Bh, 0CCh
 39788                                  	db	02Eh, 066h, 0A3h
 39789                                  
 39790                                  rpRepl4o1Len equ $ - rpRepl4
 39791                                  
 39792                                  	db	00h, 00h
 39793                                  	db	02Eh, 066h, 89h, 36h
 39794                                  
 39795                                  rpRepl4o2Len equ $ - rpRepl4
 39796                                  
 39797                                  	db	00h, 00h
 39798                                  
 39799                                  rpRepl4Len equ	$ - rpRepl4
 39800                                  
 39801                                  ;	xchg	bx, ax
 39802                                  ;	pop	ax
 39803                                  ;	mov	cx, sp
 39804                                  ;	mov	dword ptr cs:[xxxx], eax
 39805                                  ;	mov	dword ptr cs:[xxxx], esi
 39806                                  
 39807                                  rpRepl5:
 39808                                  	db	8Bh, 0E1h
 39809                                  	db	2Eh, 66h, 0A1h
 39810                                  
 39811                                  rpRepl5o1Len equ $ - rpRepl5
 39812                                  
 39813                                  	db	00h, 00h
 39814                                  	db	2Eh, 66h, 8Bh, 36h
 39815                                  
 39816                                  rpRepl5o2Len equ $ - rpRepl5
 39817                                  
 39818                                  	db	00h, 00h
 39819                                  	db	0FFh, 0E3h
 39820                                  
 39821                                  rpRepl5Len equ	$ - rpRepl5
 39822                                  
 39823                                  ;	mov	sp, cx
 39824                                  ;	mov	eax, dword ptr cs:[xxxx]
 39825                                  ;	mov	esi, dword ptr cs:[xxxx]
 39826                                  ;	jmp	bx
 39827                                  
 39828                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 39829                                  
 39830                                  rpFind6:
 39831                                  	db	0FAh, 52h, 51h
 39832                                  
 39833                                  rpFind6Len equ	$ - rpFind6
 39834                                  
 39835                                  ;	cli
 39836                                  ;	push	dx
 39837                                  ;	push	cx
 39838                                  
 39839                                  rpFind7a:
 39840                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 39841                                  
 39842                                  rpFind7aLen equ	$ - rpFind7a
 39843                                  
 39844                                  ;	mov	ax, 0DE0Ch
 39845                                  ;	call	fword ptr es:[xxxx]
 39846                                  
 39847                                  rpFind7b:
 39848                                  	db	59h, 5Ah, 5Bh
 39849                                  
 39850                                  rpFind7bLen equ	$ - rpFind7b
 39851                                  
 39852                                  ;	pop	cx
 39853                                  ;	pop	dx
 39854                                  ;	pop	bx
 39855                                  
 39856                                  rpRepl6 :
 39857                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 39858                                  
 39859                                  rpRepl6Len equ	$ - rpRepl6
 39860                                  
 39861                                  ;	cli
 39862                                  ;	push	eax
 39863                                  ;	push	ebx
 39864                                  ;	push	ecx
 39865                                  ;	push	edx
 39866                                  
 39867                                  rpRepl7:
 39868                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 39869                                  
 39870                                  rpRepl7Len equ	$ - rpRepl7
 39871                                  
 39872                                  ;	pop	edx
 39873                                  ;	pop	ecx
 39874                                  ;	pop	ebx
 39875                                  ;	pop	eax
 39876                                  ;	pop	bx
 39877                                  
 39878                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 39879                                  
 39880                                  rpFind8:
 39881                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 39882                                  
 39883                                  rpFind8Len equ	$ - rpFind8
 39884                                  
 39885                                  ;	pusha
 39886                                  ;	push	es
 39887                                  ;	push	ds
 39888                                  ;	mov	ax, dgroup	;jump back to here from replace8
 39889                                  ;	mov	ds, ax
 39890                                  
 39891                                  rpFind9 :
 39892                                  	db	1Fh, 07h, 61h
 39893                                  
 39894                                  rpFind9Len equ	$ - rpFind9
 39895                                  
 39896                                  ;	pop	ds
 39897                                  ;	pop	es
 39898                                  ;	popa
 39899                                  
 39900                                  rpRepl8:
 39901                                   	db	66h, 60h, 06h, 1Eh
 39902                                  
 39903                                  rpRepl8Len equ	$ - rpRepl8
 39904                                  
 39905                                  ;	pushad
 39906                                  ;	push	es
 39907                                  ;	push	ds
 39908                                  
 39909                                  rpRepl9:
 39910                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 39911                                  
 39912                                  rpRepl9Len equ	$ - rpRepl9
 39913                                  
 39914                                  ;	pop	ds
 39915                                  ;	pop	es
 39916                                  ;	popad
 39917                                  ;	retn			;no need to jmp back to main-line
 39918                                  
 39919                                  ;----------------------------------------------------------------------------
 39920                                  
 39921                                  struc SearchPair
 39922                                   .sp_off1: resw 1	; offset of 1st search string
 39923                                   .sp_len1: resw 1	; length of 1st search string
 39924                                   .sp_off2: resw 1	; 2nd string
 39925                                   .sp_len2: resw 1	; 2nd string
 39926                                   .sp_diff: resw 1	; max difference between offsets
 39927                                   .size:
 39928                                  endstruc
 39929                                  
 39930                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 39931                                  
 39932                                  rpBug1Strs:
 39933                                  	dw	rpFind2
 39934                                  	dw	rpFind2Len ; 3
 39935                                  	dw	rpFind3
 39936                                  	dw	rpFind3Len ; 4
 39937                                  	dw	20h
 39938                                  
 39939                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 39940                                  
 39941                                  rpBug2Strs:
 39942                                  	dw	rpFind4
 39943                                  	dw	rpFind4Len ; 4
 39944                                  	dw	rpFind5
 39945                                  	dw	rpFind5Len ; 9
 39946                                  	dw	80h
 39947                                  
 39948                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 39949                                  
 39950                                  rpBug3Strs:
 39951                                  	dw	rpFind6
 39952                                  	dw	rpFind6Len ; 3
 39953                                  	dw	rpFind7a
 39954                                  	dw	rpFind7aLen ; 7
 39955                                  	dw	80h
 39956                                  
 39957                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 39958                                  
 39959                                  rpBug4Strs:
 39960                                  	dw	rpFind8
 39961                                  	dw	4
 39962                                  	dw	rpFind9
 39963                                  	dw	rpFind9Len ; 3
 39964                                  	dw	80h
 39965                                  
 39966                                  ;----------------------------------------------------------------------------
 39967                                  
 39968                                  struc StackVars
 39969                                   .sv_wVersion:	resw 1		; Rational extender version #
 39970                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 39971                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 39972                                   .size:
 39973                                  endstruc
 39974                                  
 39975                                  ;----------------------------------------------------------------------------
 39976                                  
 39977                                  ; 22/05/2019 - Retro DOS v4.0
 39978                                  
 39979                                  Rational386Patch:
 39980                                  	; Do a few quick checks to see if this looks like a Rational
 39981                                  	; Extended application. Hopefully this will quickly weed out
 39982                                  	; most non Rational apps.
 39983                                  
 39984                                  	cmp	word [es:0],395		; version number goes here - versions
 39985                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 39986                                  
 39987                                  	cmp	word [es:0Ch],20h	; always has this value here
 39988                                  	jne	short rp3QuickOut
 39989                                  
 39990                                  	push	ax
 39991                                  
 39992                                  	mov	ax,18h 			; extender has 18h at
 39993                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 39994                                  	jne	short rp3QO_ax
 39995                                  	cmp	[es:28],ax
 39996                                  	jne	short rp3QO_ax
 39997                                  	cmp	[es:36],ax
 39998                                  	je	short rp3Maybe
 39999                                  rp3QO_ax:
 40000                                  	pop	ax
 40001                                  rp3QuickOut:
 40002                                  	retn
 40003                                  
 40004                                  ; It might be the rational extender, do more extensive checking
 40005                                  
 40006                                  rp3Maybe:
 40007                                  	cld
 40008                                  	push	bx			; note ax pushed above
 40009                                  	push	cx
 40010                                  	push	dx
 40011                                  	push	si
 40012                                  	push	di
 40013                                  	push	es
 40014                                  	push	ds			; we use all of them
 40015                                  	push	bp
 40016                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40017                                  	mov	bp,sp
 40018                                  
 40019                                  	push	cs
 40020                                  	pop	ds
 40021                                  
 40022                                  	mov	ax,[es:0]		; save version #
 40023                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40024                                  	mov	[bp],ax	
 40025                                  					; check that binary version # matches
 40026                                  	call	VerifyVersion		;   ascii string
 40027                                  	jne	short rp3Exit_j
 40028                                  
 40029                                  ; Looks like this is it, find where to put the patch code.  The
 40030                                  ; patch will be located on top of Rational code specific to 80286
 40031                                  ; processors, so these patchs MUST NOT be applied if running on
 40032                                  ; an 80286 system.
 40033                                  
 40034                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40035                                  
 40036                                  	mov	cx,4500h		; force search len to 4700h (searches
 40037                                  	;mov	[bp+2],cx
 40038                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40039                                  
 40040                                  	mov	es,[es:20h]		; es=code segment
 40041                                  
 40042                                  	mov	si,rpFind1		; string to find
 40043                                  	mov	dx,rpFind1Len ; 10	; length to match
 40044                                  	call	ScanCodeSeq		; look for code seq
 40045                                  	jz	short rpGotPatch
 40046                                  
 40047                                  ; According to Rational, some very old versions of the extender may not
 40048                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40049                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40050                                  
 40051                                  	mov	si,rpFind1a
 40052                                  	mov	dx,rpFind1aLen  ;8
 40053                                  	call	ScanCodeSeq
 40054                                  	jz	short rpGotPatch
 40055                                  
 40056                                  rp3Exit_j:
 40057                                  	jmp	rp3Exit
 40058                                  
 40059                                  ; Found the location to write patch code! DI = offset in code seg.
 40060                                  
 40061                                  rpGotPatch:
 40062                                  	;mov	[bp+4],di
 40063                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40064                                  
 40065                                  ;----------------------------------------------------------------------------
 40066                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40067                                  
 40068                                  	;cmp	word [bp+0],381
 40069                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40070                                  	cmp	word [bp],381
 40071                                  	jae	short rpBug2			;   < 3.81
 40072                                  
 40073                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40074                                  	call	FindBadCode
 40075                                  	jc	short rpBug2
 40076                                  
 40077                                  ; si = rpFind2 offset, di = rpFind3 offset
 40078                                  
 40079                                  	push	di
 40080                                  	mov	di,si				; rpFind2 offset
 40081                                  	mov	dx,rpFind2Len ; 3
 40082                                  
 40083                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40084                                  	jne	short rp_no_cx
 40085                                  
 40086                                  	dec	di				;   yes, gobble up push cx too
 40087                                  	inc	dx
 40088                                  rp_no_cx:
 40089                                  	mov	si,rpRepl2			; patch out find2 sequence
 40090                                  	mov	cx,rpRepl2Len  ; 6
 40091                                  	call	GenPatch
 40092                                  
 40093                                  	pop	di				; rpFind3 offset
 40094                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40095                                  	jne	short rp_no_cx2
 40096                                  
 40097                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40098                                  rp_no_cx2:
 40099                                  	;mov	ax,[bp+4]
 40100                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40101                                  	;mov	[es:di+4],ax
 40102                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40103                                  
 40104                                  	push	di				; save find3 offset
 40105                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40106                                  	mov	cx,rpRepl3Len ; 5
 40107                                  	call	CopyPatch
 40108                                  
 40109                                  	pop	bx				; find3 offset
 40110                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40111                                  	call	GenJump 			; jmp back from patch area
 40112                                  	;mov	[bp+4],di
 40113                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40114                                  						;   area pointer
 40115                                  
 40116                                  ;----------------------------------------------------------------------------
 40117                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40118                                  
 40119                                  rpBug2:
 40120                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40121                                  	call	FindBadCode
 40122                                  	jc	short rpBug3
 40123                                  
 40124                                  ; si = rpFind4 offset, di = rpFind5 offset
 40125                                  
 40126                                  	;push	word [bp+4]
 40127                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40128                                  						;   (where repl4 goes)
 40129                                  	push	di				; save find5 offset
 40130                                  
 40131                                  	mov	di,si
 40132                                  	mov	dx,rpFind4Len ; 4
 40133                                  	mov	si,rpRepl4
 40134                                  	mov	cx,rpRepl4Len ; 15
 40135                                  	call	GenPatch			; patch out find4 code
 40136                                  
 40137                                  	pop	di				; find5 offset
 40138                                  	add	di,5				; keep 5 bytes of find5 code
 40139                                  	;mov	bx,[bp+4]
 40140                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40141                                  	push	bx				; save repl5 location
 40142                                  	call	GenJump
 40143                                  
 40144                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40145                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40146                                  	call	CopyPatch			;   so no need to jmp back to
 40147                                  						;   main-line code
 40148                                  
 40149                                  ; patches have been made, now update the patch code to store/load dwords just
 40150                                  ; after the code in the patch area
 40151                                  
 40152                                  	pop	di				; repl5 location
 40153                                  	pop	si				; repl4 location
 40154                                  
 40155                                  	;mov	ax,[bp+4]
 40156                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40157                                  
 40158                                  	;mov	[es:si+7],ax
 40159                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40160                                  	;mov	[es:di+5],ax
 40161                                  	mov	[es:di+rpRepl5o1Len],ax
 40162                                  	add	ax,4
 40163                                  	;mov	[es:si+0Dh],ax
 40164                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40165                                  	;mov	[es:di+0Bh],ax
 40166                                  	mov	[es:di+rpRepl5o2Len],ax
 40167                                  
 40168                                  	;add	word [bp+4],8
 40169                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40170                                  						; patch area
 40171                                  
 40172                                  ;----------------------------------------------------------------------------
 40173                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40174                                  
 40175                                  rpBug3:
 40176                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40177                                  	call	FindBadCode
 40178                                  	jc	short rpBug4
 40179                                  
 40180                                  	;add	di,9
 40181                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40182                                  	push	si				;   code and locate find7b
 40183                                  	mov	si,rpFind7b			;   sequence
 40184                                  	mov	dx,rpFind7bLen ; 3
 40185                                  	call	ScanCodeSeq_di
 40186                                  	pop	si
 40187                                  	jnz	short rpBug4
 40188                                  
 40189                                  	push	di				; save find7b code offset
 40190                                  
 40191                                  	mov	di,si
 40192                                  	mov	dx,rpFind6Len ; 3
 40193                                  	mov	si,rpRepl6
 40194                                  	mov	cx,rpRepl6Len ; 9
 40195                                  	call	GenPatch			; patch out find6 code
 40196                                  
 40197                                  	pop	di
 40198                                  	mov	dx,rpFind7bLen ; 3
 40199                                  	mov	si,rpRepl7
 40200                                  	mov	cx,rpRepl7Len ; 9
 40201                                  	call	GenPatch			; patch out find7b code
 40202                                  
 40203                                  ;----------------------------------------------------------------------------
 40204                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40205                                  
 40206                                  rpBug4:
 40207                                  	;cmp	word [bp+0],360
 40208                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40209                                  	cmp	word [bp],360
 40210                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40211                                  
 40212                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40213                                  	call	FindBadCode
 40214                                  	jc	short rp3Exit
 40215                                  
 40216                                  	push	di				; save find9 code offset
 40217                                  
 40218                                  	mov	di,si
 40219                                  	mov	dx,3
 40220                                  	mov	si,rpRepl8
 40221                                  	mov	cx,rpRepl8Len ; 4
 40222                                  	call	GenPatch			; patch out find8 code
 40223                                  
 40224                                  	pop	di				; find9 offset
 40225                                  	;mov	bx,[bp+4]
 40226                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40227                                  	call	GenJump 			;   patch area
 40228                                  
 40229                                  	mov	si,rpRepl9			; copy replacement code to
 40230                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40231                                  	call	CopyPatch			;   so no jmp back to main-line
 40232                                  
 40233                                  rp3Exit:
 40234                                  	add	sp,StackVars.size
 40235                                  	pop	bp
 40236                                  	pop	ds
 40237                                  	pop	es
 40238                                  	pop	di
 40239                                  	pop	si
 40240                                  	pop	dx
 40241                                  	pop	cx
 40242                                  	pop	bx
 40243                                  	pop	ax
 40244                                  	retn
 40245                                  
 40246                                  ;----------------------------------------------------------------------------
 40247                                  ;
 40248                                  ; FindBadCode
 40249                                  ;
 40250                                  ; Searches Rational code segment looking for a pair of find strings (all
 40251                                  ; patches have at least two find strings).
 40252                                  ;
 40253                                  ; Entry:
 40254                                  ;	ES    = code segment to search
 40255                                  ;	DS:BX = search pair structure for this search
 40256                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40257                                  ;
 40258                                  ; Exit:
 40259                                  ;	CY flag clear if both strings found, and
 40260                                  ;	SI    = offset in ES of 1st string
 40261                                  ;	DI    = offset in ES of 2nd string
 40262                                  ;	CY set if either string not found, or strings too far apart
 40263                                  ;
 40264                                  ; Used:
 40265                                  ;	CX
 40266                                  ;
 40267                                  ;----------------------------------------------------------------------------
 40268                                  
 40269                                  ;struc SearchPair
 40270                                  ; .sp_off1: resw 1	; offset of 1st search string
 40271                                  ; .sp_len1: resw 1	; length of 1st search string
 40272                                  ; .sp_off2: resw 1	; 2nd string
 40273                                  ; .sp_len2: resw 1	; 2nd string
 40274                                  ; .sp_diff: resw 1	; max difference between offsets
 40275                                  ; .size:
 40276                                  ;endstruc
 40277                                  
 40278                                  FindBadCode:
 40279                                  	;mov	cx,[bp+2]
 40280                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40281                                  
 40282                                  	mov	si,[bx]	; mov si,[bx+0]
 40283                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40284                                  	
 40285                                  	;mov	dx,[bx+2]
 40286                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40287                                  	call	ScanCodeSeq
 40288                                  	jnz	short fbc_error		; done if 1st not found
 40289                                  
 40290                                  	push	di			; save 1st string offset
 40291                                  
 40292                                  	;mov	si,[bx+4]
 40293                                  	mov	si,[bx+SearchPair.sp_off2]
 40294                                  	;mov	dx,[bx+6]
 40295                                  	mov	dx,[bx+SearchPair.sp_len2]
 40296                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40297                                  
 40298                                  	pop	si			; restore 1st string offset
 40299                                  	jnz	short fbc_error
 40300                                  
 40301                                  	mov	ax,di			; sanity check that
 40302                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40303                                  	jc	short fbc_error
 40304                                  	;cmp	ax,[bx+8]
 40305                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40306                                  	ja	short fbc_error
 40307                                  
 40308                                  	clc
 40309                                  	retn
 40310                                  
 40311                                  fbc_error:
 40312                                  	stc
 40313                                  	retn
 40314                                  
 40315                                  ;----------------------------------------------------------------------------
 40316                                  ;
 40317                                  ; GenPatch
 40318                                  ;
 40319                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40320                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40321                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40322                                  ; code.
 40323                                  ;
 40324                                  ; Entry:
 40325                                  ;	ES:DI = start of buggy code to be patched
 40326                                  ;	DX    = length of buggy code to be patched
 40327                                  ;	DS:SI = replacement patch code
 40328                                  ;	CX    = length of replacement patch code
 40329                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40330                                  ;
 40331                                  ; Exit:
 40332                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40333                                  ;
 40334                                  ; Used:
 40335                                  ;	AX, BX, SI, Flags
 40336                                  ;
 40337                                  ;----------------------------------------------------------------------------
 40338                                  
 40339                                  GenPatch:
 40340                                  	push	di			;save offset of buggy code
 40341                                  
 40342                                  	;mov	bx,[bp+4]
 40343                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40344                                  					;jump from buggy code to patch area
 40345                                  	call	GenJump
 40346                                  
 40347                                  	call	CopyPatch		;copy replacement code to patch area
 40348                                  
 40349                                  	pop	bx			;offset of buggy code + buggy code
 40350                                  	add	bx,dx			;  length = return from patch offset
 40351                                  
 40352                                  	call	GenJump 		;jump from patch area back to main-
 40353                                  	;mov	[bp+4],di
 40354                                  	mov	[bp+StackVars.sv_pPatch],di
 40355                                  					;  line code, update patch pointer
 40356                                  	retn
 40357                                  
 40358                                  ;----------------------------------------------------------------------------
 40359                                  ;
 40360                                  ; CopyPatch
 40361                                  ;
 40362                                  ; Copies patch code to patch location.
 40363                                  ;
 40364                                  ; Entry:
 40365                                  ;	DS:SI = patch code to be copied
 40366                                  ;	ES    = segment of code to patch
 40367                                  ;	CX    = length of code to copy
 40368                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40369                                  ;
 40370                                  ; Exit:
 40371                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40372                                  ;
 40373                                  ; Used:
 40374                                  ;	SI, Flags
 40375                                  ;
 40376                                  ;----------------------------------------------------------------------------
 40377                                  
 40378                                  CopyPatch:
 40379                                  	push	cx
 40380                                  	;mov	di,[bp+4]
 40381                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40382                                  	cld
 40383                                  	rep movsb
 40384                                  	pop	cx
 40385                                  	;mov	[bp+4],di
 40386                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40387                                  	retn
 40388                                  
 40389                                  ;----------------------------------------------------------------------------
 40390                                  ;
 40391                                  ; GenJump
 40392                                  ;
 40393                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40394                                  ;
 40395                                  ; Entry:
 40396                                  ;	ES:DI = from location (where to put jmp instruction)
 40397                                  ;	BX    = to location (where to jump to)
 40398                                  ;
 40399                                  ; Exit:
 40400                                  ;	DI = byte after generated jump
 40401                                  ;
 40402                                  ; Used:
 40403                                  ;	AX
 40404                                  ;
 40405                                  ;----------------------------------------------------------------------------
 40406                                  
 40407                                  GenJump:
 40408                                  	mov	al,0E9h		; jmp rel16 opcode
 40409                                  	stosb
 40410                                  
 40411                                  	mov	ax,bx		; calc offset to 'to' location
 40412                                  	sub	ax,di
 40413                                  	sub	ax,2
 40414                                  
 40415                                  	stosw			; output offset
 40416                                  
 40417                                  	retn
 40418                                  
 40419                                  ;----------------------------------------------------------------------------
 40420                                  ;
 40421                                  ; ScanCodeSeq
 40422                                  ;
 40423                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40424                                  ;
 40425                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40426                                  ;
 40427                                  ;----------------------------------------------------------------------------
 40428                                  
 40429                                  ScanCodeSeq:
 40430                                  	mov	di,200h
 40431                                  ScanCodeSeq_di:
 40432                                  	push	cx
 40433                                  	sub	cx,dx
 40434                                  	inc	cx
 40435                                  scsagain:
 40436                                  	push	si
 40437                                  	push	di
 40438                                  	push	cx
 40439                                  	mov	cx,dx
 40440                                  	rep	cmpsb
 40441                                  	pop	cx
 40442                                  	pop	di
 40443                                  	pop	si
 40444                                  	je	short scsfound
 40445                                  	inc	di
 40446                                  	loop	scsagain
 40447                                  scsfound:
 40448                                  	pop	cx
 40449                                  vvexit:		; 18/12/2022
 40450                                  	retn
 40451                                  	
 40452                                  ;----------------------------------------------------------------------------
 40453                                  ;
 40454                                  ; VerifyVersion
 40455                                  ;
 40456                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40457                                  ; from ES:2A.
 40458                                  ;
 40459                                  ;       Entry: AX = binary version number 
 40460                                  ;       Exit : Z flag set if version numbers match
 40461                                  ;
 40462                                  ;----------------------------------------------------------------------------
 40463                                  
 40464                                  VerifyVersion:
 40465                                  	mov	si,[es:2Ah]		; offset of version number
 40466                                  					;  in ascii
 40467                                  	mov	bl,10
 40468                                  	add	si,3			; point to last digit
 40469                                  
 40470                                  	call	VVDigit
 40471                                  	jne	short vvexit
 40472                                  	call	VVDigit
 40473                                  	jne	short vvexit
 40474                                  	cmp	byte [es:si],'.'
 40475                                  	jne	short vvexit
 40476                                  	dec	si
 40477                                  	;call	VVDigit
 40478                                  	; 18/12/2022
 40479                                  	;jmp	short VVDigit
 40480                                  ;vvexit:
 40481                                  	;retn
 40482                                  VVDigit:
 40483                                  	div	bl
 40484                                  	add	ah,'0'
 40485                                  	dec	si
 40486                                  	cmp	[es:si+1],ah
 40487                                  	mov	ah,0			; do not xor or sub we need Z
 40488                                  	retn
 40489                                  
 40490                                  %endif
 40491                                  
 40492                                  ;-----------------------------------------------------------------------
 40493                                  
 40494                                  ; 23/05/2019 - Retro DOS v4.0
 40495                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40496                                  
 40497                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40498                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40499                                  
 40500                                  exepatch_start:	 ; label byte
 40501                                  
 40502                                  	; The following is the code that'll be layed over the buggy unpack
 40503                                  	; code.
 40504                                  str1:
 40505 00007536 06                      	db  06h	  		;push	es		 
 40506 00007537 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40507                                  
 40508                                  first_stop equ	$-str1
 40509                                  			
 40510 00007539 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40511                                  
 40512                                  first:  ; label	byte
 40513                                  
 40514 0000753B 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40515 0000753D 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40516 0000753F BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40517 00007542 57                      	db  57h	    		;push	di
 40518 00007543 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40519 00007546 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40520 00007548 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40521 0000754A 47                      	db  47h	    		;inc	di			
 40522 0000754B 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40523 0000754D 5F                      	db  5Fh	    		;pop	di
 40524 0000754E 58                      	db  58h	    		;pop	ax
 40525                                  
 40526                                  second_stop equ	$-first
 40527                                  
 40528 0000754F 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40529                                  
 40530                                  second: ; label	byte
 40531                                  
 40532 00007551 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40533                                  		    		;NextRec:				
 40534 00007553 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40535                                  		    		;norm_agn:				
 40536 00007556 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40537 00007558 F7D0                    	db  0F7h,0D0h		;not	ax		
 40538 0000755A D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40539 0000755C 7413                    	db  74h,13h		;jz	short SI_ok			
 40540 0000755E 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40541 00007560 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40542 00007563 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40543 00007565 7308                    	db  73h,08h		;jnc	short SItoDS			
 40544 00007567 F7DA                    	db  0F7h,0DAh		;neg	dx			
 40545 00007569 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40546 0000756B 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40547 0000756D 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40548                                  				;SItoDS: 				
 40549 0000756F 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40550                                  				;SI_ok:					
 40551 00007571 87F7                    	db  87h,0F7h		;xchg	si,di			
 40552 00007573 1E                      	db  1Eh			;push	ds			
 40553 00007574 06                      	db  06h			;push	es			
 40554 00007575 1F                      	db  1Fh			;pop	ds			
 40555 00007576 07                      	db  07h			;pop	es			
 40556 00007577 FECD                    	db  0FEh,0CDh		;dec	ch			
 40557 00007579 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40558 0000757B AC                      	db  0ACh		;lodsb			
 40559 0000757C 92                      	db  92h			;xchg	dx,ax
 40560 0000757D 4E                      	db  4Eh			;dec	si
 40561 0000757E AD                      	db  0ADh		;lodsw			
 40562 0000757F 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40563 00007581 46                      	db  46h			;inc	si		
 40564 00007582 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40565 00007584 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40566 00007586 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40567 00007588 7505                    	db  75h,05h		;jne	short TryEnum
 40568 0000758A AC                      	db  0ACh		;lodsb				
 40569 0000758B F3AA                    	db  0F3h,0AAh		;rep stosb			
 40570                                  
 40571                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40572 0000758D EB06                    	db  0EBh,06h		;jmp	short TryNext
 40573                                  
 40574                                  				;TryEnum:
 40575 0000758F 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40576 00007591 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40577 00007593 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40578                                  				;TryNext:
 40579                                  
 40580 00007595 92                      	db  92h			;xchg	dx,ax
 40581                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40582                                  
 40583 00007596 A801                    	db  0A8h,01h		;test	al,1			
 40584 00007598 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40585 0000759A 9090                    	db  90h,90h		;nop,nop
 40586                                  	
 40587                                  last_stop equ $-second
 40588                                  size_str1 equ $-str1
 40589                                  
 40590                                  	; The following is the code that we need to look for in the exe
 40591                                  	; file.
 40592                                  
 40593                                  scan_patch1: ; label byte
 40594                                  
 40595 0000759C 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40596 0000759E 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40597 000075A0 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40598 000075A2 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40599 000075A4 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40600 000075A6 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40601 000075A9 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40602 000075AC B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40603 000075AE F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40604 000075B0 47                      	db  47h			;inc	di			
 40605 000075B1 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40606 000075B3 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40607 000075B5 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40608 000075B7 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40609 000075B9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40610                                  				;NextRec:
 40611 000075BC B104                    	db  0B1h,04h		;mov	cl,4
 40612 000075BE 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40613 000075C0 F7D0                    	db  0F7h,0D0h		;not	ax		
 40614 000075C2 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40615 000075C4 7409                    	db  74h,09h		;jz	short SI_ok
 40616 000075C6 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40617 000075C8 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40618 000075CA 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40619 000075CC 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 40620                                  	       			;SI_ok:
 40621 000075CF 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40622 000075D1 F7D0                    	db  0F7h,0D0h		;not	ax
 40623 000075D3 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40624 000075D5 7409                    	db  74h,09h		;jz	short DI_ok
 40625 000075D7 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40626 000075D9 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40627 000075DB 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40628 000075DD 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40629                                  				;DI_ok:
 40630                                  
 40631                                  size_scan_patch1 equ $-scan_patch1
 40632                                  
 40633                                  scan_patch2: ; label byte
 40634                                  			
 40635 000075E0 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40636 000075E2 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40637 000075E4 48                      	db  48h			;dec	ax
 40638 000075E5 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40639 000075E7 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40640 000075E9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40641 000075EC B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40642 000075EF B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40643 000075F1 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40644 000075F3 47                      	db  47h			;inc	di			
 40645 000075F4 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40646 000075F6 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40647 000075F8 48                      	db  48h			;dec	ax
 40648 000075F9 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40649 000075FB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40650                                  				;NextRec:
 40651 000075FE B104                    	db  0B1h,04h		;mov	cl,4
 40652 00007600 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40653 00007602 F7D0                    	db  0F7h,0D0h		;not	ax		
 40654 00007604 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40655 00007606 740A                    	db  74h,0Ah		;jz	short SI_ok
 40656 00007608 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40657 0000760A 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40658 0000760C 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40659 0000760E 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40660                                  				;or	si,0FFF0H
 40661                                  				;SI_ok:
 40662 00007612 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40663 00007614 F7D0                    	db  0F7h,0D0h		;not	ax
 40664 00007616 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40665 00007618 740A                    	db  74h,0Ah		;jz	short DI_ok
 40666 0000761A 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40667 0000761C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40668 0000761E 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40669 00007620 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40670                                  				;or	di,0FFF0H
 40671                                  				;DI_ok:
 40672                                  
 40673                                  size_scan_patch2 equ $-scan_patch2
 40674                                  
 40675                                  scan_patch3: ; label byte
 40676                                  
 40677 00007624 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40678 00007626 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40679 00007628 48                      	db  48h			;dec	ax
 40680 00007629 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40681 0000762B 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40682 0000762D BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40683 00007630 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40684 00007633 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40685 00007635 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40686 00007637 47                      	db  47h			;inc	di			
 40687 00007638 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40688 0000763A 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40689 0000763C 48                      	db  48h			;dec	ax
 40690 0000763D 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40691 0000763F BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40692                                  				;NextRec:
 40693 00007642 B104                    	db  0B1h,04h		;mov	cl,4
 40694 00007644 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40695 00007646 F7D0                    	db  0F7h,0D0h		;not	ax		
 40696 00007648 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40697 0000764A 7409                    	db  74h,09h		;jz	short SI_ok
 40698 0000764C 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40699 0000764E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40700 00007650 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 40701 00007652 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 40702                                  				;SI_ok:
 40703 00007655 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40704 00007657 F7D0                    	db  0F7h,0D0h		;not	ax
 40705 00007659 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40706 0000765B 7409                    	db  74h,09h		;jz	short DI_ok
 40707 0000765D 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40708 0000765F 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40709 00007661 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40710 00007663 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40711                                  				;DI_ok:
 40712                                  
 40713                                  size_scan_patch3 equ $-scan_patch3
 40714                                  
 40715                                  scan_com: ; label byte
 40716                                  
 40717 00007666 AC                      	db  0ACh		;lodsb			
 40718 00007667 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 40719 00007669 4E                      	db  4Eh			;dec	si
 40720 0000766A AD                      	db  0ADh		;lodsw			
 40721 0000766B 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40722 0000766D 46                      	db  46h			;inc	si		
 40723 0000766E 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40724 00007670 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40725 00007672 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40726 00007674 7506                    	db  75h,06h		;jne	short TryEnum
 40727 00007676 AC                      	db  0ACh		;lodsb				
 40728 00007677 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40729 00007679 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40730                                  				;TryEnum:
 40731 0000767C 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40732 0000767E 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 40733 00007680 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40734                                  				;TryNext:
 40735 00007682 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 40736 00007684 A801                    	db  0A8h,01h		;test	al,1			
 40737                                  ;	db  74h,0BAh		;jz	short NextRec			
 40738                                  
 40739                                  size_scan_com	equ	$-scan_com
 40740                                  
 40741                                  ;-----------------------------------------------------------------------
 40742                                  
 40743                                  ; 23/05/2019 - Retro DOS v4.0
 40744                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40745                                  
 40746                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40747                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 40748                                  
 40749                                  ExePatch:
 40750 00007686 E80600                  	call	ExePackPatch
 40751 00007689 36FF16[1212]            	call	word [ss:RationalPatchPtr]
 40752 0000768E C3                      	retn
 40753                                  
 40754                                  ;-----------------------------------------------------------------------
 40755                                  ;
 40756                                  ; Procedure Name 	: ExePackPatch
 40757                                  ;
 40758                                  ; Inputs	 	: DS 			-> DOSDATA
 40759                                  ;			  ES:0 			-> read in image
 40760                                  ;			  ax:cx = start cs:ip of program
 40761                                  ; Output		:		
 40762                                  ;
 40763                                  ;	1. If ES <= 0fffh
 40764                                  ;	   2. if exepack signature ('RB') found
 40765                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 40766                                  ;	       	 4. if rest of the code & checksum compares
 40767                                  ;	  	    5. overlay buggy code with code in 
 40768                                  ;		       doscode:str1.
 40769                                  ;		 6. endif
 40770                                  ;	      7. endif
 40771                                  ;	   8. endif
 40772                                  ;	9. endif
 40773                                  ;
 40774                                  ;
 40775                                  ; Uses			: NONE
 40776                                  ;
 40777                                  ;-----------------------------------------------------------------------
 40778                                  		
 40779                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40780                                  	; 23/05/2019 - Retro DOS v4.0	
 40781                                  ExePackPatch:
 40782 0000768F 53                      	push	bx
 40783 00007690 8CC3                    	mov	bx,es			; bx has load segment
 40784 00007692 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 40785 00007696 7602                    	jbe	short ep_cont		; N: 
 40786 00007698 5B                      	pop	bx			; Y: no need to patch
 40787 00007699 C3                      	retn
 40788                                  ep_cont:
 40789 0000769A 1E                      	push	ds
 40790 0000769B 06                      	push	es
 40791 0000769C 50                      	push	ax
 40792 0000769D 51                      	push	cx
 40793 0000769E 56                      	push	si
 40794 0000769F 57                      	push	di
 40795                                  	
 40796                                  		; M033 - start
 40797                                  		; exepacked programs have an IP of 12h (>=2)
 40798                                  
 40799 000076A0 83E902                  	sub	cx,2			; Q: is IP >=2 
 40800 000076A3 7303                    	jnb	short epp_1		; N: exit
 40801 000076A5 E9C500                  	jmp	ep_notpacked
 40802                                  					; ax:cx now points to location of
 40803                                  					; 'RB' if this is an exepacked file.
 40804                                  		; M033 - end
 40805                                  epp_1:
 40806 000076A8 89CF                    	mov	di,cx
 40807 000076AA 8EC0                    	mov	es,ax
 40808 000076AC 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 40809                                  					; unpack_offset
 40810                                  
 40811 000076B1 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 40812                                  	;ljne	ep_notpacked
 40813 000076B6 7403                    	je	short epp_2
 40814 000076B8 E9B200                  	jmp	ep_notpacked
 40815                                  epp_2:
 40816 000076BB 0E                      	push	cs
 40817 000076BC 1F                      	pop	ds			; set ds to cs
 40818                                  
 40819                                  	;add	di,6Ch
 40820 000076BD 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 40821                                  					;          file where we hope to find
 40822                                  					;	   scan string. 
 40823                                  
 40824 000076C0 E8B200                  	call	chk_common_str		; check for match
 40825                                  
 40826 000076C3 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 40827                                  					; N: check at patch2_offset
 40828                                  					; Y: check for rest of patch string
 40829 000076C5 BE[9C75]                	mov	si,scan_patch1
 40830                                  					; ds:si -> scan string 
 40831 000076C8 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 40832                                  
 40833                                  	;add	di,28h
 40834                                  	; 07/12/2022
 40835 000076CD 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 40836                                  					;          file where we hope to find
 40837                                  					;	   scan string. 
 40838                                  	;mov	cx,68
 40839 000076D0 B94400                  	mov	cx,size_scan_patch1
 40840                                  	;mov	bx,142
 40841 000076D3 BB8E00                  	mov	bx,CHKSUM1_LEN
 40842                                  	;mov	ax,0EF4Eh
 40843 000076D6 B84EEF                  	mov	ax,PATCH1_CHKSUM
 40844 000076D9 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 40845 000076DC 7208                    	jc	short ep_done1		; Q: did we pass the test
 40846                                  					; N: exit
 40847                                  					; Y: overlay code with new 
 40848 000076DE BE[3675]                	mov	si,str1
 40849                                  	;mov	cx,102
 40850 000076E1 B96600                  	mov	cx,size_str1
 40851                                  	
 40852 000076E4 F3A4                    	rep	movsb
 40853                                  ep_done1:
 40854 000076E6 E98400                  	jmp	ep_done
 40855                                  
 40856                                  ep_chkpatch2:
 40857                                  	;mov	di,76h
 40858 000076E9 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 40859                                  					; in another version of unpack
 40860 000076EC E88600                  	call	chk_common_str		; check for match
 40861                                  
 40862 000076EF 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 40863                                  					; N: check for patch3_offset
 40864                                  					; Y: check for rest of patch string
 40865                                  
 40866 000076F1 BE[E075]                	mov	si,scan_patch2
 40867                                  					; ds:si -> scan string 
 40868                                  	;mov	di,32h
 40869 000076F4 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 40870                                  					;          file where we hope to find
 40871                                  	;mov	cx,68			;	   scan string. 
 40872 000076F7 B94400                  	mov	cx,size_scan_patch2
 40873                                  	;mov	bx,140
 40874 000076FA BB8C00                  	mov	bx,CHKSUM2_LEN
 40875                                  	;mov	ax,78B2h
 40876 000076FD B8B278                  	mov	ax,PATCH2_CHKSUM
 40877 00007700 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 40878                                  
 40879                                  					; M046 - Start
 40880                                  					; Q: did we pass the test
 40881 00007703 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 40882                                  					; N: try with a different chksum
 40883                                  
 40884                                  
 40885 00007705 BE[E075]                	mov	si,scan_patch2
 40886                                  					; ds:si -> scan string 
 40887                                  	;mov	cx,68
 40888 00007708 B94400                  	mov	cx,size_scan_patch2
 40889                                  	;mov	bx,129
 40890 0000770B BB8100                  	mov	bx,CHKSUM2A_LEN
 40891                                  	;mov	ax,1C47h
 40892 0000770E B8471C                  	mov	ax,PATCH2A_CHKSUM
 40893 00007711 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 40894                                  					; Q: did we pass the test
 40895 00007714 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 40896                                  					; Y: overlay code with new 
 40897                                  						
 40898                                  ep_patchcode2:			       	; M046 - End
 40899 00007716 BE[3675]                	mov	si,str1
 40900                                  	;mov	cx,3
 40901 00007719 B90300                  	mov	cx,first_stop
 40902 0000771C F3A4                    	rep	movsb
 40903 0000771E B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 40904 00007721 AB                      	stosw
 40905 00007722 83C602                  	add	si,2
 40906                                  	;mov	cx,20
 40907 00007725 B91400                  	mov	cx,second_stop
 40908 00007728 F3A4                    	rep	movsb
 40909 0000772A AB                      	stosw				; put in dec ax and nop
 40910 0000772B 83C602                  	add	si,2
 40911                                  	;mov	cx,75
 40912 0000772E B94B00                  	mov	cx,last_stop
 40913 00007731 F3A4                    	rep	movsb
 40914 00007733 EB38                    	jmp	short ep_done
 40915                                  
 40916                                  ep_chkpatch3:
 40917                                  	;mov	di,74h
 40918 00007735 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 40919                                  					; in another version of unpack
 40920 00007738 E83A00                  	call	chk_common_str		; check for match
 40921                                  
 40922 0000773B 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 40923                                  					; N: exit
 40924                                  					; Y: check for rest of patch string
 40925 0000773D BE[2476]                	mov	si,scan_patch3
 40926                                  					; ds:si -> scan string 
 40927                                  	;mov	di,32h
 40928 00007740 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 40929                                  					;          file where we hope to find
 40930                                  					;	   scan string. 
 40931                                  	;mov	cx,66
 40932 00007743 B94200                  	mov	cx,size_scan_patch3
 40933                                  	;mov	bx,139
 40934 00007746 BB8B00                  	mov	bx,CHKSUM3_LEN
 40935                                  	;mov	ax,4EDEh
 40936 00007749 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 40937 0000774C E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 40938 0000774F 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 40939                                  					; N: exit
 40940                                  					; Y: overlay code with new 
 40941 00007751 BE[3675]                	mov	si,str1
 40942                                  	;mv	cx,3
 40943 00007754 B90300                  	mov	cx,first_stop
 40944 00007757 F3A4                    	rep	movsb
 40945 00007759 B048                    	mov	al,48h			; al = opcode for dec ax
 40946 0000775B AA                      	stosb
 40947 0000775C 83C602                  	add	si,2
 40948                                  	;mov	cx,20
 40949 0000775F B91400                  	mov	cx,second_stop
 40950 00007762 F3A4                    	rep	movsb
 40951 00007764 AA                      	stosb				; put in dec ax
 40952 00007765 83C602                  	add	si,2
 40953                                  	;mov	cx,75
 40954 00007768 B94B00                  	mov	cx,last_stop
 40955 0000776B F3A4                    	rep	movsb
 40956                                  
 40957                                  ep_notpacked:
 40958                                  	;stc
 40959                                  ep_done:
 40960 0000776D 5F                      	pop	di
 40961 0000776E 5E                      	pop	si
 40962 0000776F 59                      	pop	cx
 40963 00007770 58                      	pop	ax
 40964 00007771 07                      	pop	es
 40965 00007772 1F                      	pop	ds
 40966 00007773 5B                      	pop	bx
 40967 00007774 C3                      	retn
 40968                                  
 40969                                  ;-------------------------------------------------------------------------
 40970                                  ;
 40971                                  ; 	Procedure Name	: chk_common_str
 40972                                  ;
 40973                                  ;	Input		: DS = DOSCODE
 40974                                  ;			; ES:DI points to string in packed file
 40975                                  ;
 40976                                  ;	Output		; Z if match else NZ
 40977                                  ;
 40978                                  ;-------------------------------------------------------------------------
 40979                                  
 40980                                  	; 23/05/2019 - Retro DOS v4.0
 40981                                  chk_common_str:
 40982 00007775 BE[6676]                	mov	si,scan_com
 40983                                  					; ds:si -> scan string 
 40984                                  	;mov	cx,32
 40985 00007778 B92000                  	mov	cx,size_scan_com
 40986                                  
 40987 0000777B F3A6                    	repe	cmpsb	       
 40988                                  
 40989                                  					; M046 - start
 40990                                  	; a fourth possible version of these exepacked programs have a 
 40991                                  	; 056h instead of 06Bh. See scan_com above
 40992                                  	;
 40993                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 40994                                  	;
 40995                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 40996                                  	; we shall try to match the rest of the string
 40997                                  	;
 40998                                  
 40999 0000777D 7409                    	jz	short ccs_done
 41000 0000777F 26807DFF56              	cmp	byte [es:di-1],56h
 41001 00007784 7502                    	jnz	short ccs_done
 41002                                  
 41003 00007786 F3A6                    	repe	cmpsb	    
 41004                                  ccs_done:				; M046 - end
 41005 00007788 C3                      	retn
 41006                                  
 41007                                  ;-------------------------------------------------------------------------
 41008                                  ;
 41009                                  ;	Procedure Name	: chk_patchsum
 41010                                  ;
 41011                                  ;	Input		: DS:SI -> string we're looking for
 41012                                  ;			: ES:DI -> offset in packed file
 41013                                  ;			: CX 	= scan length
 41014                                  ;			: BX	= length of check sum
 41015                                  ;			: AX 	= value of check sum
 41016                                  ;
 41017                                  ;	Output		: if patch & check sum compare
 41018                                  ;				NC
 41019                                  ;			  else
 41020                                  ;				CY
 41021                                  ;
 41022                                  ;	Uses		: AX, BX, CX, SI
 41023                                  ;
 41024                                  ;-------------------------------------------------------------------------
 41025                                  
 41026                                  	; 23/05/2019 - Retro DOS v4.0
 41027                                  chk_patchsum:
 41028 00007789 57                      	push	di
 41029                                  
 41030 0000778A F3A6                    	repe	cmpsb			   
 41031                                  
 41032 0000778C 751A                    	jnz	short cp_fail		; Q: does the patch match
 41033                                  					; N: exit
 41034                                  					; Y:	
 41035                                  
 41036                                  		; we do a check sum starting from the location of the 
 41037                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41038                                  		; unpacking code.
 41039                                  
 41040 0000778E 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41041 00007793 89D9                    	mov	cx,bx			; cx = length of check sum
 41042                                  
 41043 00007795 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41044 00007797 31C0                    	xor	ax,ax
 41045                                  ep_chksum:
 41046 00007799 260305                  	add	ax,[es:di]
 41047 0000779C 83C702                  	add	di,2
 41048 0000779F E2F8                    	loop	ep_chksum
 41049                                  
 41050 000077A1 5F                      	pop	di			; restore di
 41051                                  
 41052 000077A2 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41053 000077A4 7502                    	jne	short cp_fail		; N: exit
 41054                                  					; Y: 
 41055 000077A6 F8                      	clc	
 41056 000077A7 C3                      	retn
 41057                                  
 41058                                  cp_fail:
 41059 000077A8 F9                      	stc
 41060 000077A9 C3                      	retn
 41061                                  
 41062                                  ; M020 : BEGIN
 41063                                  ;
 41064                                  ;----------------------------------------------------------------------------
 41065                                  ;
 41066                                  ; procedure : RationalPatch
 41067                                  ;
 41068                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41069                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41070                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41071                                  ;
 41072                                  ; THE BUG is in the following code sequence:
 41073                                  ;
 41074                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41075                                  ;90		even				; word align
 41076                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41077                                  ;e8 xx xx	call	set_A20			; enable A20
 41078                                  ;
 41079                                  ; This patch routine replaces the mov & the loop with a far call into a
 41080                                  ; routine in DOS data segment which is in low memory (because A20 line
 41081                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41082                                  ; a mov & loop.
 41083                                  ;
 41084                                  ; Identification of Buggy Rational EXE
 41085                                  ; ====================================
 41086                                  ;
 41087                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41088                                  ;
 41089                                  ; OFFSET				Contains
 41090                                  ; ------				--------
 41091                                  ; 0000h			100 times Version number in binary
 41092                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41093                                  ;
 41094                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41095                                  ;
 41096                                  ; 002ah			offset where version number is stored in ASCII
 41097                                  ;				e.g. '3.48A'
 41098                                  ;
 41099                                  ; 0030h			offset of copyright string. Copyright strings either
 41100                                  ;			start with "DOS/16M Copyright...." or
 41101                                  ;			"Copyright.....". The string contains
 41102                                  ;			"Rational Systems, Inc."
 41103                                  ;
 41104                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41105                                  ;				from the program image
 41106                                  ; 0016h			word : size of buggy code segment
 41107                                  ;
 41108                                  ;	Buggy code is definite to start after offset 200h in its segment
 41109                                  ;
 41110                                  ;----------------------------------------------------------------------------
 41111                                  
 41112                                  ; 23/05/2019 - Retro DOS v4.0
 41113                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41114                                  
 41115                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41116                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41117                                  
 41118                                  RScanPattern1:
 41119 000077AA 000020000000400001-     	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41119 000077B3 00                 
 41120                                  
 41121                                  RLen1 equ $ - RScanPattern1
 41122                                  
 41123                                  RScanPattern2:
 41124 000077B4 8B0E100090E2FEE8        	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41125                                  
 41126                                  RLen2 equ $ - RScanPattern2
 41127                                  
 41128                                  RScanPattern3:
 41129 000077BC 8B0E1000E2FEE8          	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41130                                  
 41131                                  RLen3 equ $ - RScanPattern2
 41132                                  
 41133                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41134                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41135                                  
 41136                                  ;----------------------------------------------------------------------------
 41137                                  ;
 41138                                  ; INPUT : ES = segment where program got loaded
 41139                                  ;
 41140                                  ;----------------------------------------------------------------------------
 41141                                  
 41142                                  RationalPatch:
 41143 000077C3 FC                      	cld
 41144 000077C4 50                      	push	ax
 41145 000077C5 53                      	push	bx
 41146 000077C6 51                      	push	cx
 41147 000077C7 52                      	push	dx
 41148 000077C8 56                      	push	si
 41149 000077C9 57                      	push	di
 41150 000077CA 06                      	push	es
 41151 000077CB 1E                      	push	ds			; we use all of them
 41152 000077CC BF0A00                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41153 000077CF 0E                      	push	cs
 41154 000077D0 1F                      	pop	ds
 41155                                  	
 41156 000077D1 BE[AA77]                	mov	si,RScanPattern1
 41157                                  	;mov	cx,10
 41158 000077D4 B90A00                  	mov	cx,RLen1
 41159 000077D7 F3A6                    	rep	cmpsb			; do we have the pattern ?
 41160 000077D9 754A                    	jne	short rpexit
 41161 000077DB 26A10000                	mov	ax,[es:0]
 41162 000077DF 3D5C01                  	cmp	ax,348			; is it a buggy version ?
 41163 000077E2 7241                    	jb	short rpexit
 41164 000077E4 3D7F01                  	cmp	ax,383			; is it a buggy version
 41165 000077E7 773C                    	ja	short rpexit
 41166                                  
 41167 000077E9 E85A00                  	call	VerifyVersion
 41168 000077EC 7537                    	jne	short rpexit
 41169                                  
 41170 000077EE 268B0E1600              	mov	cx,[es:16h]		; Length of buggy code seg
 41171 000077F3 81E90002                	sub	cx,200h			; Length we search (we start
 41172                                  					;  at offset 200h)
 41173 000077F7 268E062000              	mov	es,[es:20h]		; es=buggy code segment
 41174 000077FC BE[B477]                	mov	si,RScanPattern2
 41175                                  	;mov	dx,8	
 41176 000077FF BA0800                  	mov	dx,RLen2
 41177 00007802 E82900                  	call	ScanCodeSeq		; look for code seq with nop
 41178 00007805 740B                    	jz	short rpfound
 41179                                  
 41180 00007807 BE[BC77]                	mov	si,RScanPattern3
 41181                                  	;mov	dx,15
 41182 0000780A BA0F00                  	mov	dx,RLen3
 41183 0000780D E81E00                  	call	ScanCodeSeq		; look for code seq w/o nop
 41184 00007810 7513                    	jnz	short rpexit
 41185                                  
 41186                                  rpfound:
 41187                                  	
 41188                                  ;	we set up a far call into DOS data
 41189                                  ;	dx has the length of the code seq we were searching for
 41190                                  
 41191 00007812 B09A                    	mov	al,9Ah			; far call opcode
 41192 00007814 AA                      	stosb
 41193 00007815 B8[1412]                	mov	ax,RatBugCode
 41194 00007818 AB                      	stosw
 41195 00007819 8CD0                    	mov	ax,ss
 41196 0000781B AB                      	stosw
 41197 0000781C 89D1                    	mov	cx,dx
 41198 0000781E 83E906                  	sub	cx,6			; filler (with NOPs)
 41199 00007821 B090                    	mov	al,90h
 41200 00007823 F3AA                    	rep	stosb
 41201                                  rpexit:
 41202 00007825 1F                      	pop	ds
 41203 00007826 07                      	pop	es
 41204 00007827 5F                      	pop	di
 41205 00007828 5E                      	pop	si
 41206 00007829 5A                      	pop	dx
 41207 0000782A 59                      	pop	cx
 41208 0000782B 5B                      	pop	bx
 41209 0000782C 58                      	pop	ax
 41210 0000782D C3                      	retn
 41211                                  
 41212                                  ; M020 END
 41213                                  
 41214                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41215                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41216                                  
 41217                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41218                                  
 41219                                  ;----------------------------------------------------------------------------
 41220                                  ;
 41221                                  ; ScanCodeSeq
 41222                                  ;
 41223                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41224                                  ;
 41225                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41226                                  ;
 41227                                  ;----------------------------------------------------------------------------
 41228                                  
 41229                                  ScanCodeSeq:
 41230                                  	; 17/12/2022
 41231 0000782E BF0002                  	mov	di,200h
 41232                                  ;ScanCodeSeq_di:
 41233 00007831 51                      	push	cx
 41234 00007832 29D1                    	sub	cx,dx
 41235 00007834 41                      	inc	cx
 41236                                  	; 17/12/2022
 41237                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41238                                  	;mov	di,200h
 41239                                  scsagain:
 41240 00007835 56                      	push	si
 41241 00007836 57                      	push	di
 41242 00007837 51                      	push	cx
 41243 00007838 89D1                    	mov	cx,dx
 41244 0000783A F3A6                    	rep	cmpsb
 41245 0000783C 59                      	pop	cx
 41246 0000783D 5F                      	pop	di
 41247 0000783E 5E                      	pop	si
 41248 0000783F 7403                    	je	short scsfound
 41249 00007841 47                      	inc	di
 41250 00007842 E2F1                    	loop	scsagain
 41251                                  scsfound:
 41252 00007844 59                      	pop	cx
 41253                                  vvexit:		; 18/12/2022
 41254 00007845 C3                      	retn
 41255                                  
 41256                                  
 41257                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41258                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41259                                  
 41260                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41261                                  
 41262                                  ;----------------------------------------------------------------------------
 41263                                  ;
 41264                                  ; VerifyVersion
 41265                                  ;
 41266                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41267                                  ; from ES:2A.
 41268                                  ;
 41269                                  ;       Entry: AX = binary version number 
 41270                                  ;       Exit : Z flag set if version numbers match
 41271                                  ;
 41272                                  ;----------------------------------------------------------------------------
 41273                                  
 41274                                  VerifyVersion:
 41275 00007846 268B362A00              	mov	si,[es:2Ah]		; offset of version number
 41276                                  					;  in ascii
 41277 0000784B B30A                    	mov	bl,10
 41278 0000784D 83C603                  	add	si,3			; point to last digit
 41279                                  
 41280 00007850 E80E00                  	call	VVDigit
 41281 00007853 75F0                    	jne	short vvexit
 41282 00007855 E80900                  	call	VVDigit
 41283 00007858 75EB                    	jne	short vvexit
 41284 0000785A 26803C2E                	cmp	byte [es:si],'.' ; 2Eh
 41285 0000785E 75E5                    	jne	short vvexit
 41286 00007860 4E                      	dec	si
 41287                                  	;call	VVDigit
 41288                                  	; 18/12/2022
 41289                                  	;jmp	short VVDigit
 41290                                  ;vvexit:
 41291                                  	;retn
 41292                                  VVDigit:
 41293 00007861 F6F3                    	div	bl
 41294 00007863 80C430                  	add	ah,'0' ; 30h
 41295 00007866 4E                      	dec	si
 41296 00007867 26386401                	cmp	[es:si+1],ah
 41297 0000786B B400                    	mov	ah,0			; do not xor or sub we need Z
 41298 0000786D C3                      	retn
 41299                                  
 41300                                  ;---------------------------------------------------------------------------
 41301                                  ;
 41302                                  ;	M068
 41303                                  ;
 41304                                  ; 	Procedure Name	: IsCopyProt
 41305                                  ;
 41306                                  ;	Inputs		: DS:100 -> start of com file just read in
 41307                                  ;
 41308                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41309                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41310                                  ;			  copy protect scheme that relies on the A20 line
 41311                                  ;			  being turned off for it's scheme to work.
 41312                                  ;
 41313                                  ;			  Note: The int 21 function dispatcher will turn 
 41314                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41315                                  ;				and dec the A20OFF_COUNT before	iretting 
 41316                                  ;				to the user. 
 41317                                  ;
 41318                                  ;	Uses		: ES, DI, SI, CX
 41319                                  ;
 41320                                  ;---------------------------------------------------------------------------
 41321                                  
 41322                                  ; 23/05/2019 - Retro DOS v4.0
 41323                                  
 41324                                  CPStartOffset	EQU	0175h
 41325                                  CPID1Offset	EQU	011Bh
 41326                                  CPID2Offset	EQU	0173h
 41327                                  CPID3Offset	EQU	0146h
 41328                                  CPID4Offset	EQU	0124h
 41329                                  ID1		EQU	05343h
 41330                                  ID2		EQU	05044h
 41331                                  ID3		EQU	0F413h
 41332                                  ID4		EQU	08000h
 41333                                  
 41334                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41335                                  
 41336                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41337                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41338                                  
 41339                                  CPScanPattern:
 41340 0000786E 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41341 00007872 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41342 00007876 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41343 0000787C 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41344 00007880 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41345 00007883 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41346                                  
 41347                                  CPSPlen	EQU $ - CPScanPattern
 41348                                  
 41349                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41350                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41351                                  
 41352                                  IsCopyProt:
 41353 00007886 813E1B014353            	cmp	word [CPID1Offset],ID1
 41354 0000788C 752D                    	jne	short CP_done
 41355                                  
 41356 0000788E 813E73014450            	cmp	word [CPID2Offset],ID2
 41357 00007894 7525                    	jne	short CP_done
 41358                                  
 41359 00007896 813E460113F4            	cmp	word [CPID3Offset],ID3
 41360 0000789C 751D                    	jne	short CP_done
 41361                                  
 41362 0000789E 813E24010080            	cmp	word [CPID4Offset],ID4
 41363 000078A4 7515                    	jne	short CP_done
 41364                                  
 41365 000078A6 0E                      	push	cs
 41366 000078A7 07                      	pop	es
 41367 000078A8 BF[6E78]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41368                                  
 41369 000078AB BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41370                                  					; of pattern
 41371                                  
 41372 000078AE B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41373 000078B1 F3A6                    	repe	cmpsb
 41374 000078B3 7506                    	jnz	short CP_done
 41375                                  
 41376 000078B5 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41377                                  CP_done:
 41378 000078BB C3                      	retn
 41379                                  	
 41380                                  ;DOSCODE ENDS
 41381                                  
 41382                                  	;END
 41383                                  
 41384                                  ;----------------------------------------------------------------------------
 41385                                  
 41386                                  ;align 2 ; 05/09/2018 (Error!)
 41387                                  
 41388                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41389                                  ;align 16 ; 08/09/2018 (OK.)
 41390                                  align 2
 41391                                  
 41392                                  ; 06/08/2018 - Retro DOS v3.0
 41393                                  ;============================================================================
 41394                                  ; MSINIT.ASM
 41395                                  ;============================================================================
 41396                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41397                                  ;
 41398                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41399                                  ;
 41400                                  	; 15/07/2018 - Retro DOS v3.0
 41401                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41402                                  
 41403                                  ; temp iret instruction
 41404                                  
 41405                                  
 41406                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41407                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41408                                  
 41409                                  initiret: ; MSDOS 6.0
 41410                                  SYSBUF:
 41411                                  ;IRETT: ; 06/05/2019
 41412 000078BC CF                      	iret
 41413                                  
 41414                                  ; 22/04/2019 - Retro DOS v4.0
 41415                                  
 41416                                  ; pointer to the BIOS data segment that will be available just to the
 41417                                  ; initialization code
 41418                                  
 41419 000078BD 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41420                                  
 41421                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41422                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41423                                  
 41424                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41425                                  
 41426                                  ParaRound:
 41427 000078BF 83C00F                  	add	ax, 15
 41428 000078C2 D1D8                    	rcr	ax, 1
 41429 000078C4 D1E8                    	shr	ax, 1
 41430 000078C6 D1E8                    	shr	ax, 1
 41431 000078C8 D1E8                    	shr	ax, 1
 41432 000078CA C3                      	retn
 41433                                  
 41434                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41435                                  
 41436                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41437                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41438                                  	
 41439                                  	; 30/05/2019
 41440                                  	; 22/04/2019 - Retro DOS v4.0
 41441                                  	; 07/07/2018 - Retro DOS v3.0
 41442                                  	; Retro DOS v2.0 - 03/03/2018
 41443                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41444                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41445                                  DOSINIT:
 41446                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41447                                  	;
 41448                                  	; Far call from SYSINIT
 41449                                  	; DX = Memory size in paragraphs
 41450                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41451                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41452                                  	;
 41453                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41454                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41455                                  
 41456 000078CB FA                              CLI
 41457 000078CC FC                              CLD
 41458                                  
 41459                                  	; 03/11/2022
 41460                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41461                                  	
 41462                                  	; 17/12/2022
 41463                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41464                                  	;push	dx ; =*=		; save parameters from BIOS
 41465                                  	
 41466 000078CD 56                      	push	si
 41467 000078CE 1E                      	push	ds
 41468 000078CF 57                      	push	di			;save di (ptr to BiosComBlock)
 41469                                  
 41470 000078D0 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41471                                  
 41472                                  ; First, move the DOS data segment to its final location in low memory
 41473                                  
 41474                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41475                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41476 000078D2 B8[847D]                	mov	ax,MEMSTRT		; get offset of end of init code
 41477                                  
 41478                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41479                                  	;and	ax,~15	; 0FFF0h	; boundary
 41480                                  
 41481                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41482                                  					; code segment
 41483                                  
 41484                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41485 000078D5 83C00F                  	add	ax,15			; round to nearest paragraph
 41486 000078D8 83E0F0                  	and	ax,~15			; boundary
 41487                                  
 41488 000078DB 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41489                                  					; code segment
 41490                                  	; 05/12/2022
 41491                                  	; 30/04/2019 - Retro DOS v4.0
 41492                                  	;xor	si,si
 41493                                  	
 41494 000078DD 8CC8                    	mov	ax,cs
 41495 000078DF 8ED8                    	mov	ds,ax			; ds = current code segment
 41496                                  					; DS:SI now points to dosdata
 41497                                  
 41498                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41499                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41500                                  					;  BData segment. Cannot use
 41501                                  					;  getdseg macro here!!!
 41502                                  	; 17/12/2022
 41503 000078E1 8E06[BD78]              	mov	es,[InitBioDataSeg]
 41504                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41505                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41506                                  
 41507                                  	;mov	es,[es:3]
 41508 000078E5 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41509                                  
 41510 000078EA 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41511                                  
 41512                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41513                                  	;mov	cx,4976  ; 25/05/2019
 41514                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41515                                  	;mov	cx,4962
 41516                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41517 000078EC B96013                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41518 000078EF F3A4                    	rep	movsb			; move data to final location
 41519                                  	
 41520 000078F1 5F                      	pop	di			; restore ptr to BiosComBlock
 41521 000078F2 1F                      	pop	ds			; restore parms from BIOS
 41522 000078F3 5E                      	pop	si
 41523                                  	; 17/12/2022
 41524                                  	;pop	dx ; 30/05/2019	
 41525                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41526                                  	;pop	dx ; =*=		
 41527                                  
 41528 000078F4 06                      	push	es
 41529 000078F5 1E                      	push	ds
 41530 000078F6 07                      	pop	es			; es:si -> device chain
 41531 000078F7 1F                      	pop	ds			; ds points to dosdata
 41532                                  
 41533                                  ;SR;
 41534                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41535                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41536                                  ;lie table handling for device drivers. This can be expanded later on to
 41537                                  ;establish a communication block from the BIOS to the DOS.
 41538                                  
 41539                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41540                                  	;mov	[1042h],bx
 41541 000078F8 893E[3F10]              	mov	[BiosDataPtr],di
 41542 000078FC 891E[4110]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41543                                  
 41544 00007900 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41545                                  
 41546                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41547                                  
 41548 00007905 2E8C1E[CB51]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41549 0000790A 2E8C1E[CF51]            	mov	[cs:LowInt24Addr+2],ds
 41550 0000790F 2E8C1E[D351]            	mov	[cs:LowInt28Addr+2],ds
 41551                                  
 41552                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41553                                  	;mov	[584h],sp
 41554                                  	;mov	[586h],ss
 41555 00007914 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41556 00007918 8926[8405]              	mov	[USER_SP],sp
 41557 0000791C 8C16[8605]              	mov	[USER_SS],ss
 41558                                  
 41559 00007920 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41560 00007922 8ED0                    	mov	ss,ax
 41561                                  
 41562                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41563                                  	;mov	sp,offset dosdata:dskstack
 41564 00007924 BC[2009]                	mov	sp,DSKSTACK
 41565                                  
 41566                                  ;M023
 41567                                  ; Init patch ptrs to default values
 41568                                  
 41569                                  	;mov	word [1212h],RetExePatch
 41570                                  	;mov	word [1214h],RetExePatch
 41571                                  	;mov	word [61h],RetExePatch
 41572 00007927 C706[1012][5263]        	mov	word [FixExePatch],RetExePatch	; M023
 41573 0000792D C706[1212][5263]        	mov	word [RationalPatchPtr],RetExePatch ; M023
 41574 00007933 C706[6100][5263]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41575                                  
 41576                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41577                                  %if 0	
 41578                                  
 41579                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41580                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41581                                  ; running in the HMA.
 41582                                  
 41583                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41584                                  	cmp	al,2		;   386 or later?
 41585                                  	mov	ax,Rational386Patch
 41586                                  	jae	short di_set_patch
 41587                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41588                                  di_set_patch:
 41589                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41590                                  
 41591                                  %endif
 41592                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41593                                  
 41594 00007939 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41595                                  
 41596                                  	; ax now holds segment of DOS code
 41597 0000793B A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41598                                  
 41599 0000793E 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41600 00007942 8936[4800]              	mov	word [NULDEV],si
 41601                                  ;SR;
 41602                                  ; There are some locations in the Win386 instance data structures
 41603                                  ; which need to be set up with the DOS data segment. First, initialize
 41604                                  ; the segment part of the instance table pointer in the SIS.
 41605                                  
 41606                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41607 00007946 8C1E[F10F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41608                                  
 41609                                  ; Now initialize the segment part of the pointer to the data in each
 41610                                  ; instance table entry.
 41611                                  
 41612 0000794A 56                      	push	si		; preserve pointer to device chain
 41613                                  	; 18/12/2022
 41614                                  	; cx = 0
 41615 0000794B B107                    	mov	cl,7
 41616                                  	;mov	cx,7		; There are 7 entries in the instance table
 41617                                  				; M019
 41618                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41619 0000794D BE[F50F]                	mov	si,Instance_Table+2 ; point si to segment field
 41620                                  Instance_init_loop:
 41621 00007950 8C1C                    	mov	[si],ds		; set offset in instance entry
 41622                                  	;add	si,6
 41623 00007952 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41624 00007955 E2F9                    	loop	Instance_init_loop
 41625                                  
 41626                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41627                                  
 41628                                  	; 18/12/2022
 41629 00007957 B105                    	mov	cl,5
 41630                                  	;mov	cx,5		; There are five entries in the instance table
 41631                                  
 41632                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41633                                  	;mov	si,11EDh	; point si to segment field
 41634 00007959 BE[EB11]                	mov	si,OldInstanceJunk+6
 41635                                  OldInstance_init_loop:
 41636 0000795C 8C1C                    	mov	[si],ds		; set offset in instance entry
 41637 0000795E 83C606                  	add	si,6		; move on to next entry
 41638 00007961 E2F9                    	loop	OldInstance_init_loop
 41639 00007963 5E                      	pop	si		; restore pointer to device chain
 41640                                  
 41641                                  ; End of WIN386 2.xx compatibility bullshit
 41642                                  
 41643                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41644                                  %if 0	
 41645                                     	; 30/04/2019
 41646                                  	;push	es
 41647                                  	;pop	ds
 41648                                  			; ds:si points to console device
 41649                                  
 41650                                  	; 24/04/2019 - Retro DOS v4.0
 41651                                  
 41652                                  	; 15/07/2018
 41653                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41654                                  	; (Set INT 2Ah handler address to an 'IRET')
 41655                                  
 41656                                  	; need crit vector inited to use deviocall
 41657                                  	;push	ds			; preserve segment of device chain
 41658                                  	push	es ; 30/04/2019
 41659                                  
 41660                                  %endif
 41661                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41662 00007964 06                      	push	es
 41663                                  	; 17/12/2022
 41664                                  	;pop	ds
 41665                                  	;push	ds
 41666                                  
 41667 00007965 31C0                    	xor	ax,ax
 41668 00007967 8ED8                    	mov	ds,ax			; point DS to int vector table
 41669 00007969 B8[BC78]                	mov	ax,initiret
 41670                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41671 0000796C A3A800                  	mov	[addr_int_ibm],ax
 41672 0000796F 8CC8                    	mov	ax,cs
 41673                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 41674 00007971 A3AA00                  	mov	[addr_int_ibm+2],ax
 41675 00007974 1F                      	pop	ds			; restore segment of device chain
 41676                                  
 41677 00007975 E81F02                  	call	CHARINIT  		; initialize console driver
 41678 00007978 56                      	push	si			; save pointer to header
 41679                                  
 41680 00007979 16                      	push	ss			; move pointer to dos data...
 41681 0000797A 07                      	pop	es			; ...into ES
 41682                                  
 41683                                  	;initialize sft for file 0 (CON)
 41684                                  
 41685                                          ; 07/07/2018 - Retro DOS v3.0
 41686                                  	; 24/04/2019 - Retro DOS v4.0
 41687                                  	;mov	di,SFTABL+6 
 41688 0000797B BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41689 0000797E B80300                          MOV     AX,3
 41690 00007981 AB                              STOSW           	; Refcount
 41691 00007982 FEC8                            DEC     AL
 41692 00007984 AB                              STOSW           	; Access rd/wr, compatibility
 41693 00007985 30C0                            XOR     AL,AL
 41694 00007987 AA                              STOSB           	; attribute
 41695                                  	;mov	al,0C3h
 41696 00007988 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41697 0000798A AB                      	STOSW			; flags
 41698 0000798B 89F0                            mov	ax,si
 41699 0000798D AB                              stosw			; device pointer in devptr	
 41700 0000798E 8CD8                            mov	ax,ds
 41701 00007990 AB                      	stosw
 41702 00007991 31C0                    	xor	ax,ax	; 0
 41703 00007993 AB                      	stosw			; firclus
 41704 00007994 AB                      	stosw			; time
 41705 00007995 AB                      	stosw			; date
 41706 00007996 48                      	dec	ax	; -1
 41707 00007997 AB                      	stosw			; size
 41708 00007998 AB                      	stosw
 41709 00007999 40                      	inc	ax	; 0
 41710 0000799A AB                      	stosw			; position
 41711 0000799B AB                      	stosw
 41712                                  	;add	di,7
 41713 0000799C 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41714                                  				; point at name
 41715                                  	;add	si,10
 41716 0000799F 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41717                                  				; point to name
 41718 000079A2 B90400                  	mov	cx,4
 41719 000079A5 F3A5                    	rep	movsw		; name
 41720 000079A7 B103                    	mov	cl,3
 41721 000079A9 B020                    	mov	al," "
 41722 000079AB F3AA                    	rep	stosb		; extension
 41723                                  
 41724 000079AD 5E                      	pop	si		; get back pointer to header
 41725                                  
 41726                                  				; mark device as CON I/O
 41727                                  	; 15/07/2018
 41728                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41729 000079AE 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41730                                  	; 12/03/2018
 41731                                  	;mov	[ss:32h],si
 41732 000079B2 368936[3200]            	MOV     [SS:BCON],SI
 41733                                  	;mov	[ss:34h],ds
 41734 000079B7 368C1E[3400]                    MOV     [SS:BCON+2],DS
 41735                                  
 41736                                  	; initialize each device until the clock device is found
 41737                                  
 41738                                  CHAR_INIT_LOOP:
 41739 000079BC C534                            LDS     SI,[SI]			; AUX device
 41740 000079BE E8D601                  	call	CHARINIT 
 41741                                         	;15/07/2018
 41742                                  	;test	byte [SI+4],8
 41743 000079C1 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 41744 000079C5 74F5                            JZ      SHORT CHAR_INIT_LOOP
 41745                                  	; 12/03/2018
 41746                                  	;mov	[ss:2Eh],si
 41747 000079C7 368936[2E00]                    MOV     [SS:BCLOCK],SI
 41748                                  	;mov	[ss:30h],ds
 41749 000079CC 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 41750                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 41751                                  
 41752                                  	;mov	bp,4970			; bp = pointer to free mem
 41753                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 41754                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 41755                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 41756 000079D1 BD6013                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 41757                                  
 41758 000079D4 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 41759 000079D9 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 41760                                  PERDRV:
 41761                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 41762 000079DE C534                            LDS	SI,[SI]			; Next device
 41763 000079E0 83FEFF                          CMP	SI,-1	; 0FFFFh
 41764 000079E3 7479                    	JZ	SHORT CONTINIT
 41765                                  
 41766 000079E5 E8AF01                          call	CHARINIT
 41767                                  
 41768                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 41769                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 41770                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 41771                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 41772                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 41773                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 41774                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 41775                                  
 41776                                          ; 15/07/2018
 41777                                  	;test	word [SI+4],8000h		; DEVTYP
 41778                                          ; 17/12/2022
 41779                                  	;test	byte [SI+5],80h
 41780 000079E8 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 41781                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 41782 000079EC 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 41783                                  
 41784 000079EE 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 41785 000079F3 30ED                    	XOR     CH,CH
 41786                                          ; 07/07/2018
 41787                                  	;MOV	[SI+10],CL		; Number of units in name field
 41788 000079F5 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 41789 000079F8 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 41790 000079FD 30F6                    	XOR     DH,DH
 41791 000079FF 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 41792 00007A04 1E                      	PUSH    DS
 41793 00007A05 56                              PUSH    SI
 41794 00007A06 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 41795                                  
 41796                                  PERUNIT:
 41797 00007A0B 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 41798 00007A0D 43                              INC     BX
 41799 00007A0E 43                              INC     BX                      ; On to next BPB
 41800                                  	; 15/12/2022
 41801                                  	; 07/07/2018
 41802                                          ;mov	[ES:BP+DPB.DRIVE],DL
 41803 00007A0F 26885600                	MOV     [ES:BP],DL
 41804                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41805                                  	;;mov	[ES:BP+0],DL
 41806                                  	;mov	[ES:BP+DPB.DRIVE],DL
 41807                                  
 41808                                  	;MOV	[ES:BP+1],DH
 41809 00007A13 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 41810 00007A17 53                              PUSH    BX
 41811 00007A18 51                              PUSH    CX
 41812 00007A19 52                              PUSH    DX
 41813                                  
 41814                                          ;invoke	$SETDPB
 41815 00007A1A E83796                          CALL	_$SETDPB		; build DPB!
 41816                                  
 41817                                  	; 07/07/2018
 41818                                  	;MOV	AX,[ES:BP+2]
 41819 00007A1D 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 41820                                          ; 12/03/2018
 41821 00007A21 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 41822 00007A26 7604                    	JBE     SHORT NOTMAX		; N:
 41823 00007A28 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 41824                                  NOTMAX:					
 41825                                  	; set the next dpb field in the currently built bpb
 41826                                  	; and mark as never accessed
 41827                                          
 41828                                  	; 24/04/2019
 41829 00007A2C 89E8                    	mov	ax,bp			; get pointer to DPB
 41830                                  	;add	ax,33
 41831 00007A2E 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 41832                                  					; set seg & offset of next DPB
 41833                                  	;mov	[es:bp+25],ax
 41834 00007A31 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 41835                                  	;mov	[es:bp+27],es
 41836 00007A35 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 41837                                  					; mark as never accessed
 41838                                  	;mov	byte [es:bp+24],0FFh
 41839 00007A39 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 41840                                  
 41841 00007A3E 5A                      	POP     DX
 41842 00007A3F 59                              POP     CX
 41843 00007A40 5B                              POP     BX
 41844 00007A41 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 41845 00007A43 5E                              POP     SI
 41846 00007A44 1F                              POP     DS
 41847                                  					; ds:si -> device header
 41848                                  					; store it in the corresponding dpb
 41849                                  	; 07/07/2018
 41850                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 41851 00007A45 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 41852                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 41853 00007A49 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 41854                                  
 41855 00007A4D 1E                              PUSH    DS			; save pointer to device header
 41856 00007A4E 56                              PUSH    SI
 41857 00007A4F FEC6                            INC     DH			; inc unit #
 41858 00007A51 FEC2                            INC     DL			; inc drive #
 41859 00007A53 8ED8                            MOV     DS,AX			; restore segment of BPB array
 41860                                          ;add	bp,33 ; 24/04/2019
 41861 00007A55 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 41862 00007A58 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 41863                                          
 41864 00007A5A 5E                      	POP     SI			; restore pointer to device header
 41865 00007A5B 1F                              POP     DS
 41866 00007A5C EB80                    	JMP	PERDRV			; process all drivers in chain
 41867                                  
 41868                                  CONTINIT:
 41869                                  	; 24/04/2019
 41870                                  	;sub	bp,33			; set link in last DPB to -1
 41871 00007A5E 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 41872                                  					; set last link offset & segment
 41873                                  	;mov	word [bp+25],0FFFFh
 41874 00007A61 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 41875                                  	;mov	word [bp+27],0FFFFh
 41876 00007A66 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 41877                                  	;add	bp,33
 41878 00007A6B 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 41879                                  					; the DPB chain is done.  
 41880 00007A6E 16                      	push	ss
 41881 00007A6F 1F                      	pop	ds
 41882                                  
 41883 00007A70 89E8                    	mov	ax,bp
 41884 00007A72 E84AFE                  	call	ParaRound		; round up to segment
 41885                                  
 41886 00007A75 8CDA                    	mov	dx,ds			; dx = dosdata segment
 41887 00007A77 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 41888                                  
 41889 00007A79 BB0F00                  	mov	bx,0Fh
 41890                                  	
 41891                                  	; 24/05/2019
 41892                                  	;mov	cx,[ENDMEM]
 41893                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41894                                  	; 17/12/2022
 41895                                  	;mov	cx,[ENDMEM] 
 41896                                  					; set seg inpacketto dosdata					
 41897 00007A7C 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 41898                                  
 41899                                  ; Patch in the segments of the interrupt vectors with current code segment.
 41900                                  ; Also patch in the segment of the pointers in the dosdata area.
 41901                                  ;
 41902                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 41903                                  ; calls were done. The procedure patch_misc_segments is called multiple
 41904                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 41905                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 41906                                  
 41907 00007A80 52                      	push	dx			; preserve first free segment
 41908                                  
 41909 00007A81 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 41910 00007A84 8EC0                    	mov	es,ax			; es = segment of DOS
 41911 00007A86 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 41912                                  
 41913 00007A8C E8E101                  	call	patch_vec_segments	; uses AX as doscode segment
 41914 00007A8F E81602                  	call	patch_misc_segments	; patch in segments for sharer and 
 41915                                  					; other tables with seg in ES.
 41916                                  	; 17/12/2022
 41917                                  	; cx = 0
 41918 00007A92 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 41919                                  
 41920 00007A96 5A                      	pop	dx			; restore first free segment
 41921                                  
 41922                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 41923                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 41924                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 41925                                  ; low_mem_stub by seg_reinit.
 41926                                  
 41927                                  	;xor	ax,ax ; 0
 41928                                  	;mov	ds,ax
 41929                                  	;mov	es,ax
 41930                                  	; 17/12/2022
 41931                                  	; cx = 0
 41932                                  	;xor	cx,cx ; 0
 41933 00007A97 8ED9                    	mov	ds,cx
 41934 00007A99 8EC1                    	mov	es,cx
 41935                                  
 41936                                  	; set the segment of int 24 vector that was 
 41937                                  	; left out by patch_vec_segments above.
 41938                                  
 41939                                  	; 17/12/2022
 41940                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41941                                  ;%if 0
 41942                                  	; 24/05/2019
 41943                                  	;;mov	di,90h
 41944                                  	;;mov	di,4*int_fatal_abort
 41945                                  	;mov	di,addr_int_fatal_abort
 41946 00007A9B BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 41947                                  
 41948 00007A9E 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 41949                                  	;mov	[di+2],ax  ; int 24h segment
 41950 00007AA2 8905                    	mov	[di],ax ; 24/05/2019
 41951                                  
 41952                                  	;;mov	di,82h
 41953                                  	;mov	di,INTBASE+2
 41954                                  
 41955                                  ;%endif
 41956                                  	; 17/12/2022
 41957                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41958                                  	;;mov	di,90h
 41959                                  	;;mov	di,4*int_fatal_abort
 41960                                  	;mov	di,addr_int_fatal_abort
 41961                                  	;mov	ax,[ss:TEMP_DOSLOC]
 41962                                  	;mov	[di+2],ax  ; int 24h segment
 41963                                  	;;mov	di,82h
 41964                                  	;mov	di,INTBASE+2
 41965                                  
 41966                                  	; set default divide trap offset
 41967                                  
 41968                                  	;mov	word ptr ds:[0],offset doscode:divov
 41969 00007AA4 C7060000[A753]          	mov	word [0],DIVOV	
 41970                                  
 41971                                  	; set vectors 20-28 and 2a-3f to point to iret.
 41972                                  
 41973                                  	;mov	di,80h
 41974 00007AAA BF8000                  	mov	di,INTBASE
 41975                                  	;mov	ax,offset doscode:irett
 41976 00007AAD B8[2103]                	mov	ax,IRETT
 41977                                  
 41978                                  	; 17/12/2022
 41979                                  	; cx = 0
 41980 00007AB0 B109                    	mov	cl,9
 41981                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 41982                                  					;   sets offsets for ints 20h-28h
 41983                                  iset1:
 41984 00007AB2 AB                      	stosw
 41985 00007AB3 83C702                  	add	di,2
 41986 00007AB6 E2FA                    	loop	iset1
 41987                                  
 41988 00007AB8 83C704                  	add	di,4			; skip vector 29h
 41989                                  
 41990                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 41991                                  ;					;   sets offsets for ints 2ah-2fh
 41992                                  ;iset2:
 41993                                  ;	stosw
 41994                                  ;	add	di,2
 41995                                  ;	loop	iset2
 41996                                  
 41997                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 41998                                  ; patch_vec_segments above. So skip it.
 41999                                  
 42000                                  ;	add	di,8			; skip vector 30h & 31h 
 42001                                  
 42002                                  	;;;
 42003                                  	; 06/05/2019 - Retro DOS v4.0
 42004                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42005                                  	; 17/12/2022
 42006 00007ABB B105                    	mov	cl,5 ; 28/06/2019
 42007                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42008                                  	;mov	cx,6
 42009                                  iset2:
 42010 00007ABD AB                      	stosw
 42011 00007ABE 83C702                  	add	di,2
 42012 00007AC1 E2FA                    	loop	iset2
 42013                                  
 42014                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42015                                  	; 17/12/2022
 42016 00007AC3 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42017                                  	;add	di,8
 42018                                  	;;;
 42019                                  
 42020                                  	; 17/12/2022
 42021 00007AC6 B10E                    	mov	cl,14
 42022                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42023                                  					;   sets offsets for ints 32h-3fh
 42024                                  iset3:
 42025 00007AC8 AB                      	stosw
 42026 00007AC9 83C702                  	add	di,2
 42027 00007ACC E2FA                    	loop	iset3
 42028                                  
 42029                                  ;if installed
 42030                                  	; set the offset of int2f handler
 42031                                  	;mov	word [0BCh],INT2F
 42032 00007ACE C706BC00[5007]          	mov	word [02Fh*4],INT2F
 42033                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42034 00007AD4 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42035                                  	;mov	[0BEh],ax
 42036 00007AD8 A3BE00                  	mov	[(02Fh*4)+2],ax
 42037                                  ;endif
 42038                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42039                                  	; long jump will be patched in by seg_reinit
 42040                                  
 42041                                  	;mov	byte [C0h],0EAh
 42042 00007ADB C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42043                                  	;mov	byte [C1h],CALL_ENTRY
 42044 00007AE0 C706C100[2203]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42045                                  
 42046 00007AE6 C7068000[1B03]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42047 00007AEC C7068400[4703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42048 00007AF2 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42049 00007AF8 89168A00                	mov	word [addr_int_terminate+2],dx	
 42050 00007AFC C7069400[7A05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42051 00007B02 C7069800[0106]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42052 00007B08 C7069C00[F562]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42053                                  
 42054 00007B0E 16                      	push	ss
 42055 00007B0F 1F                      	pop	ds
 42056                                  	
 42057                                  	; 24/05/2019
 42058                                  	;push	ss
 42059                                  	;pop	es
 42060                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42061                                  	; 17/12/2022
 42062                                  	;push	ss
 42063                                  	;pop	es
 42064                                  
 42065 00007B10 52                      	push	dx			; remember address of arena
 42066                                  
 42067 00007B11 42                      	inc	dx			; leave room for arena header
 42068                                  	;mov	[330h],dx
 42069 00007B12 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42070                                  
 42071 00007B16 31FF                    	xor	di,di			; point es:di at end of memory
 42072 00007B18 8EC2                    	mov	es,dx			; ...where psp will be
 42073 00007B1A 31C0                    	xor	ax,ax
 42074                                  	;mov	cx,80h			; psp is 128 words
 42075                                  	; 17/12/2022
 42076 00007B1C B180                    	mov	cl,128 ; 28/06/2019
 42077                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42078                                  	;mov	cx,128
 42079                                  
 42080 00007B1E F3AB                    	rep	stosw			; zero out psp area
 42081 00007B20 A1[4603]                        mov     ax,[ENDMEM]
 42082                                  	
 42083                                  	; 17/12/2022
 42084                                  	; cx = 0
 42085 00007B23 E87B96                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42086                                  
 42087                                  	; ds, es now point to PSP
 42088                                  
 42089 00007B26 16                      	push	ss
 42090 00007B27 1F                      	pop	ds
 42091                                  
 42092                                  	;mov	di,24
 42093 00007B28 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42094 00007B2B 31C0                    	xor	ax,ax
 42095 00007B2D AB                      	stosw
 42096 00007B2E AA                      	stosb				; 0,1 and 2 are con device
 42097 00007B2F B0FF                    	mov	al,0FFh
 42098                                  	;mov	cx,FILPERPROC-3 ; 17
 42099                                  	; 17/12/2022
 42100                                  	; cx = 4
 42101 00007B31 B111                    	mov	cl,FILPERPROC-3 ; 17
 42102 00007B33 F3AA                    	rep	stosb			; rest are unused
 42103                                  
 42104 00007B35 16                      	push	ss
 42105 00007B36 07                      	pop	es
 42106                                  					; must be set to print messages
 42107 00007B37 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42108                                  
 42109                                  ; after this point the char device functions for con will work for
 42110                                  ; printing messages
 42111                                  
 42112                                  	; 24/04/2019 - Retro DOS v4.0
 42113                                  
 42114                                  ; 12/05/2019
 42115                                  ;
 42116                                  ;write_version_msg:
 42117                                  ;
 42118                                  ;	;if	(not ibm)
 42119                                  ;	;mov	si,offset doscode:header
 42120                                  ;	mov	si,HEADER
 42121                                  ;outmes:
 42122                                  ;	;lods	cs:byte ptr [si]
 42123                                  ;	cs
 42124                                  ;	lodsb
 42125                                  ;	cmp	al,"$"
 42126                                  ;	je	short outdone
 42127                                  ;	call	OUTT
 42128                                  ;	jmp	short outmes
 42129                                  ;outdone:
 42130                                  ;	push	ss			; out stomps on segments
 42131                                  ;	pop	ds
 42132                                  ;	push	ss
 42133                                  ;	pop	es
 42134                                  ;	;endif
 42135                                  
 42136                                  	; at this point es is dosdata
 42137                                  
 42138                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42139                                  	; in sysinittable (ms_data.asm)
 42140                                  
 42141                                  	;mov	si,0D28h
 42142 00007B3B BE[280D]                	mov	si,SysInitTable
 42143                                  
 42144                                  	; 17/12/2022
 42145                                  	; ds = es = ss
 42146                                  
 42147                                  	; 17/12/2022
 42148                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42149                                  ;%if 0
 42150                                  	;;mov	[es:si+6],es
 42151                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42152                                  	;;mov	[es:si+2],es
 42153                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42154                                  	
 42155 00007B3E 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42156 00007B41 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42157                                  
 42158                                  	; buffhead -> dosdata:hashinitvar 
 42159                                  
 42160                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42161 00007B44 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42162                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42163                                  	;mov	si,6Dh
 42164 00007B48 BE[6D00]                	mov	si,HASHINITVAR
 42165                                  	;mov	[es:BUFFHEAD],si
 42166 00007B4B 8936[3800]              	mov	[BUFFHEAD],si
 42167                                  
 42168 00007B4F 5A                              pop     dx                      ; restore address of arena
 42169                                  
 42170                                  	;mov	[032Ch+2],dx
 42171 00007B50 8916[2E03]                      mov     [DMAADD+2],dx
 42172                                  
 42173                                  	;mov	[es:arena_head],dx
 42174 00007B54 8916[2400]              	mov	[arena_head],dx
 42175                                  
 42176                                  ;%endif
 42177                                  
 42178                                  ; 17/12/2022
 42179                                  %if 0
 42180                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42181                                  	;;;
 42182                                  	;mov	[es:si+6],es
 42183                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42184                                  	;mov	[es:si+2],es
 42185                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42186                                  
 42187                                  	; buffhead -> dosdata:hashinitvar 
 42188                                  
 42189                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42190                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42191                                  	;mov	si,6Dh
 42192                                  	mov	si,HASHINITVAR
 42193                                  	mov	[es:BUFFHEAD],si
 42194                                  
 42195                                          pop     dx                      ; restore address of arena
 42196                                  
 42197                                  	;mov	[032Ch+2],dx
 42198                                          mov     [DMAADD+2],dx
 42199                                  
 42200                                  	mov	[es:arena_head],dx
 42201                                  	;;;
 42202                                  %endif
 42203                                  
 42204 00007B58 8EDA                            mov     ds,dx
 42205                                  
 42206                                  	;mov	byte [0],'Z'
 42207 00007B5A C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42208                                          ;mov	word [1],0
 42209 00007B5F C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42210                                  
 42211 00007B65 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42212 00007B69 29D0                    	sub	ax,dx
 42213 00007B6B 48                              dec     ax
 42214 00007B6C A30300                          mov     [ARENA.SIZE],ax
 42215                                  
 42216                                  	; point to sft 0
 42217                                  
 42218                                  	;mov	di,offset dosdata:sftabl + sftable
 42219                                  	;mov	di,SFTABL+6
 42220 00007B6F BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42221 00007B72 B80300                          mov     ax,3
 42222 00007B75 AB                              stosw           		; adjust refcount
 42223                                  
 42224                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42225                                  
 42226                                          ;mov	di,offset dosdata:sysinittable
 42227                                  	;mov	di,0D28h
 42228 00007B76 BF[280D]                	mov	di,SysInitTable	
 42229                                  
 42230 00007B79 42                      	inc	dx			; advance dx from arena to psp
 42231 00007B7A 8EDA                    	mov	ds,dx			; point ds to psp
 42232                                  
 42233                                  					; pass the address os seg_reinit 
 42234                                  					; in dx
 42235 00007B7C BA[EA7B]                	mov	dx,seg_reinit
 42236 00007B7F B9[3675]                	mov	cx,exepatch_start
 42237 00007B82 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42238                                  
 42239 00007B86 B8[BC78]                	mov	ax,SYSBUF
 42240 00007B89 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42241                                  	
 42242 00007B8C 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42243 00007B91 368E16[8605]                    mov     ss,[ss:USER_SS]
 42244                                  
 42245 00007B96 CB                              retf
 42246                                  
 42247                                  ;
 42248                                  ; END OF DOSINIT
 42249                                  ;
 42250                                  ;--------------------------------------------------------------------------
 42251                                  
 42252                                  CHARINIT:
 42253                                  	; 24/04/2019 - Retro DOS v4.0
 42254                                  	; 07/07/2018 - Retro DOS v3.0
 42255                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42256 00007B97 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42257                                  	;mov	byte [ss:035Bh],0
 42258 00007B9D 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42259                                  	;mov	byte [ss:035Ch],0
 42260 00007BA3 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42261                                  	;mov	word [ss:035BD],0
 42262 00007BA9 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42263 00007BB0 06                              PUSH	ES
 42264 00007BB1 53                              PUSH	BX
 42265 00007BB2 50                              PUSH	AX
 42266 00007BB3 BB[5A03]                        MOV	BX,DEVCALL
 42267                                          ;PUSH	CS
 42268 00007BB6 16                      	PUSH	SS ; 30/04/2019
 42269 00007BB7 07                              POP	ES
 42270 00007BB8 E8ADCB                          CALL	DEVIOCALL2	
 42271 00007BBB 58                      	POP	AX
 42272 00007BBC 5B                              POP	BX
 42273 00007BBD 07                              POP	ES
 42274 00007BBE C3                              RETN
 42275                                  
 42276                                  ; 25/04/2019 - Retro DOS v4.0
 42277                                  
 42278                                  ;-----------------------------------------------------------------------------
 42279                                  ;
 42280                                  ;	check_XMM: routine to check presence of XMM driver
 42281                                  ;
 42282                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42283                                  ;
 42284                                  ;	USED:	none
 42285                                  ;
 42286                                  ;-----------------------------------------------------------------------------
 42287                                  
 42288                                  check_XMM: ; proc near
 42289                                  ;
 42290                                  ; determine whether or not an XMM driver is installed
 42291                                  ;
 42292 00007BBF 50                      	push	ax
 42293                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42294 00007BC0 B80043                  	mov	ax,4300h
 42295 00007BC3 CD2F                    	int	2Fh
 42296                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42297                                  		; Return: AL = 80h XMS driver installed
 42298                                  		; AL <> 80h no driver
 42299 00007BC5 3C80                    	cmp	al,80h			; Q: installed
 42300 00007BC7 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42301                                  ;
 42302                                  ; get the XMM control functions entry point, save it, we
 42303                                  ; need to call it later.
 42304                                  ;
 42305 00007BC9 53                      	push	bx
 42306 00007BCA 52                      	push	dx
 42307 00007BCB 1E                      	push	ds
 42308 00007BCC 06                      	push	es
 42309                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42310 00007BCD B81043                  	mov	ax,4310h
 42311 00007BD0 CD2F                    	int	2Fh
 42312                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42313                                  		; Return: ES:BX -> driver entry point
 42314                                  
 42315 00007BD2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42316                                  
 42317 00007BD7 891E[6111]              	mov	[XMMcontrol],bx
 42318 00007BDB 8C06[6311]              	mov	[XMMcontrol+2],es
 42319                                  cXMMexit:
 42320 00007BDF F8                      	clc
 42321 00007BE0 07                      	pop	es
 42322 00007BE1 1F                      	pop	ds
 42323 00007BE2 5A                      	pop	dx
 42324 00007BE3 5B                      	pop	bx
 42325 00007BE4 58                      	pop	ax
 42326 00007BE5 C3                      	retn				; done
 42327                                  ;
 42328                                  ; set carry if XMM driver not present
 42329                                  ;
 42330                                  cXMM_no_driver:
 42331 00007BE6 F9                      	stc
 42332 00007BE7 58                      	pop	ax
 42333 00007BE8 C3                      	retn
 42334                                  
 42335                                  ;-----------------------------------------------------------------------------
 42336                                  ;
 42337                                  ; Procedure Name : seg_reinit
 42338                                  ;
 42339                                  ; Inputs	 : ES has final dos code location
 42340                                  ;		   AX = 0 / 1
 42341                                  ;
 42342                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42343                                  ;		   if AX =0
 42344                                  ;		      if first entry
 42345                                  ;			 patch segment & offset of vectors with stub
 42346                                  ;			 and stub with segment in ES
 42347                                  ;		      else
 42348                                  ;			 patch stub with segment in ES
 42349                                  ;
 42350                                  ;		   else if AX = 1
 42351                                  ;			patch segment of vectors with segment in ES	
 42352                                  ;
 42353                                  ; NOTE		 : This routine can be called at most twice!
 42354                                  ;
 42355                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42356                                  ;-----------------------------------------------------------------------------
 42357                                  
 42358 00007BE9 00                      num_entry: db	0		; keeps track of the # of times this routine
 42359                                  				; has been called. (0 or 1)
 42360                                  
 42361                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42362                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42363                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42364                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42365                                  
 42366                                  seg_reinit:	; proc	far
 42367 00007BEA 1E                      	push	ds
 42368                                  
 42369 00007BEB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42370                                  
 42371 00007BF0 E8B500                  	call	patch_misc_segments	; patch in segments for sharer and 
 42372                                  					; other tables with seg in ES.
 42373                                  	; 17/12/2022
 42374                                  	; cx = 0
 42375 00007BF3 39C8                    	cmp	ax,cx ; 0
 42376                                  	;cmp	ax,0
 42377 00007BF5 756C                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42378                                  
 42379                                  	; 17/12/2022
 42380 00007BF7 2E380E[E97B]            	cmp	[cs:num_entry],cl ; 0
 42381                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42382 00007BFC 7508                    	jne	short second_entry	; N: just patch the stub with 
 42383                                  					;    segment in ES
 42384                                  					; Y: patch the vectors with stub 
 42385 00007BFE 8CD8                    	mov	ax,ds
 42386 00007C00 E86D00                  	call	patch_vec_segments	; patch the segment of vectors
 42387 00007C03 E8EC00                  	call	patch_offset		; patch the offsets of vectors 
 42388                                  					; with those in the stub.
 42389                                  	; 17/12/2022
 42390                                  	; cx = 0
 42391                                  second_entry:
 42392 00007C06 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42393                                  
 42394                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42395                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42396 00007C08 BF[6010]                	mov	di,DOSINTTABLE
 42397                                  	; 17/12/2022
 42398                                  	; cx = 0
 42399                                  	;mov	cx,9
 42400 00007C0B B109                    	mov	cl,9
 42401 00007C0D 1E                      	push	ds			
 42402 00007C0E 07                      	pop	es			; es:di -> DOSINTTABLE
 42403                                  
 42404                                  dosinttabloop:
 42405 00007C0F 83C702                  	add	di,2
 42406 00007C12 AB                      	stosw
 42407 00007C13 E2FA                    	loop	dosinttabloop	
 42408                                  
 42409                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42410                                  ; use the HMA, so we don't want to check CS
 42411                                  
 42412                                  ;ifndef ROMDOS
 42413 00007C15 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42414 00007C18 724E                    	jb	short sr_done		; N: done
 42415                                  ;endif
 42416 00007C1A E8A2FF                  	call	check_XMM		; Y: set up the XMS entry point
 42417 00007C1D 7249                    	jc	short sr_done		; failed to set up XMS do not do
 42418                                  					; A20 toggling in the stub.
 42419                                  	; 17/12/2022
 42420                                  	; cx = 0
 42421 00007C1F E84B01                  	call	patch_in_nops		; enable the stub to check A20 state
 42422                                  ; M021-
 42423                                  	;mov	byte [1211h],1
 42424 00007C22 C606[0F12]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42425                                  				
 42426                                  					; set pointer to the routine that 
 42427                                  					; patches buggy exepacked code.
 42428                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42429 00007C27 C706[1012][8676]        	mov	word [FixExePatch],ExePatch
 42430                                  					; M068: set pointer to the routine 
 42431                                  					; M068: that detects copy protected
 42432                                  					; M068: apps
 42433                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42434 00007C2D C706[6100][8678]        	mov	word [ChkCopyProt],IsCopyProt
 42435                                  
 42436                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42437                                  
 42438                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42439                                  ;
 42440                                  ;; M020 - begin
 42441                                  ;
 42442                                  ;	call	WhatCPUType
 42443                                  ;	cmp	al,1
 42444                                  ;	jne	short sr_done 		; we need Rational Patch only
 42445                                  ;					;  on 286 systems
 42446                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42447                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42448                                  ;
 42449                                  ;; M020 - end
 42450                                  ;
 42451                                  ;	jmp	short sr_done
 42452                                  ;
 42453                                  ;patch_vec_seg:				; patch vectors with segment in es
 42454                                  ;	mov	ax,es
 42455                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42456                                  ;					; NOTE we don't have to patch the 
 42457                                  ;					; offsets as they have been already
 42458                                  ;					; set to the doscode offsets at
 42459                                  ;					; DOSINIT.
 42460                                  ;sr_done:
 42461                                  ;	mov	byte [cs:num_entry],1
 42462                                  ;	pop	ds
 42463                                  ;	retf	; ! far return !
 42464                                  
 42465                                  ;----------------------------------------------------------------------------
 42466                                  ;
 42467                                  ; Procedure Name : WhatCPUType
 42468                                  ;
 42469                                  ; Inputs	 : none
 42470                                  ;
 42471                                  ; Outputs	 : AL = 0 if CPU <  286
 42472                                  ;		      = 1 if CPU == 286
 42473                                  ;		      = 2 if CPU >= 386
 42474                                  ;
 42475                                  ; Regs. Mod.	 : AX
 42476                                  ;
 42477                                  ;----------------------------------------------------------------------------
 42478                                  
 42479                                  WhatCPUType:
 42480                                  	; 25/04/2019 - Retro DOS v4.0
 42481                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42482                                  
 42483                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42484                                  
 42485                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42486                                  ; 	it is called from both CODE and SYSINITSEG.
 42487                                  ;
 42488                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42489                                  ;  Returns: AX = 0 if 8086 or 8088
 42490                                  ;              = 1 if 80286
 42491                                  ;              = 2 if 80386
 42492                                  
 42493                                  	; 04/11/2022
 42494                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42495                                  
 42496                                  Get_CPU_Type:	;macro
 42497 00007C33 9C                      	pushf
 42498 00007C34 53                      	push	bx			; preserve bx
 42499 00007C35 31DB                    	xor	bx,bx			; init bx to zero
 42500                                  
 42501 00007C37 31C0                    	xor	ax,ax			; 0000 into AX
 42502 00007C39 50                      	push	ax			; put it on the stack...
 42503 00007C3A 9D                      	popf				; ...then shove it into the flags
 42504 00007C3B 9C                      	pushf				; get it back out of the flags...
 42505 00007C3C 58                      	pop	ax			; ...and into ax
 42506 00007C3D 2500F0                  	and	ax,0F000h		; mask off high four bits
 42507 00007C40 3D00F0                  	cmp	ax,0F000h		; was it all 1's?
 42508 00007C43 740E                    	je	short cpu_8086		; aye; it's an 8086 or 8088
 42509                                  
 42510 00007C45 B800F0                  	mov	ax,0F000h		; now try to set the high four bits..
 42511 00007C48 50                      	push	ax
 42512 00007C49 9D                      	popf
 42513 00007C4A 9C                      	pushf
 42514 00007C4B 58                      	pop	ax			; ...and see what happens
 42515 00007C4C 2500F0                  	and	ax,0F000h		; any high bits set ?
 42516 00007C4F 7401                    	jz	short cpu_286		; nay; it's an 80286
 42517                                  
 42518                                  cpu_386:				; bx starts as zero
 42519 00007C51 43                      	inc	bx			; inc twice if 386
 42520                                  cpu_286:				; just inc once if 286
 42521 00007C52 43                      	inc	bx
 42522                                  cpu_8086:				; don't inc at all if 086
 42523 00007C53 89D8                    	mov	ax,bx			; put CPU type value in ax
 42524 00007C55 5B                      	pop	bx			; restore original bx
 42525 00007C56 9D                      	popf
 42526                                  	
 42527                                  	;endm
 42528                                  
 42529                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42530                                  	;retn
 42531                                  
 42532                                  	; 04/11/2022
 42533                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42534 00007C57 3C01                    	cmp	al,1
 42535 00007C59 750D                    	jne	short sr_done 		; we need Rational Patch only
 42536                                  					;  on 286 systems
 42537 00007C5B C706[1212][C377]        	mov	word [RationalPatchPtr],RationalPatch
 42538                                  
 42539 00007C61 EB05                    	jmp	short sr_done
 42540                                  
 42541                                  patch_vec_seg:				; patch vectors with segment in es
 42542 00007C63 8CC0                    	mov	ax,es
 42543 00007C65 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42544                                  					; NOTE we don't have to patch the 
 42545                                  					; offsets as they have been already
 42546                                  					; set to the doscode offsets at
 42547                                  					; DOSINIT.
 42548                                  sr_done:
 42549 00007C68 2EC606[E97B]01          	mov	byte [cs:num_entry],1
 42550 00007C6E 1F                      	pop	ds
 42551 00007C6F CB                      	retf	; ! far return !
 42552                                  
 42553                                  ;----------------------------------------------------------------------------
 42554                                  ;
 42555                                  ; Procedure Name : patch_vec_segments
 42556                                  ;
 42557                                  ; Inputs	 : ax -> has segment address to patch in
 42558                                  ;		   ds -> DOSDATA
 42559                                  ;
 42560                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42561                                  ;			
 42562                                  ;			0,20-28,3a-3f
 42563                                  ;
 42564                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42565                                  ;
 42566                                  ;----------------------------------------------------------------------------
 42567                                  
 42568                                  patch_vec_segments:
 42569                                  
 42570 00007C70 06                      	push	es
 42571                                  
 42572 00007C71 31C9                    	xor	cx,cx ; 0
 42573 00007C73 8EC1                    	mov	es,cx
 42574                                  
 42575                                  	;mov	di,82h
 42576 00007C75 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42577                                  
 42578 00007C78 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42579                                  
 42580                                  					; set vectors 20 & 21
 42581                                  	; 04/11/2022
 42582                                  	;mov	cx,2
 42583                                  	; 17/12/2022
 42584                                  	;mov	cl,2
 42585                                  ps_set1:
 42586 00007C7C AB                      	stosw	; int 20h segment
 42587                                  	;add	di,2
 42588                                  	; 17/12/2022
 42589 00007C7D 47                      	inc	di
 42590 00007C7E 47                      	inc	di
 42591                                  	;loop	ps_set1
 42592                                  
 42593                                  	; 17/12/2022
 42594 00007C7F AB                      	stosw	; int 21h segment
 42595                                  	;inc	di
 42596                                  	;inc	di
 42597                                  
 42598                                  	;add	di,4			; skip int 22h vector
 42599 00007C80 83C706                  	add	di,6 ; *
 42600                                  
 42601 00007C83 AB                      	stosw				; set int 23h
 42602 00007C84 83C706                  	add	di,6			; skip int 24h
 42603                                  
 42604                                  					; set vectors 25-28 and 2a-3f 
 42605                                  	; 04/11/2022
 42606                                  	;mov	cx,4			; set 4 segments
 42607                                  	; 17/12/2022
 42608 00007C87 B104                    	mov	cl,4
 42609                                  ps_set2:
 42610 00007C89 AB                      	stosw				
 42611                                  	;add	di,2
 42612                                  	; 17/12/2022
 42613 00007C8A 47                      	inc	di
 42614 00007C8B 47                      	inc	di
 42615 00007C8C E2FB                    	loop	ps_set2
 42616                                  
 42617 00007C8E 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42618                                  					;   already be set.
 42619                                  	; 04/11/2022
 42620                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42621                                  	; 17/12/2022
 42622 00007C91 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42623                                  ps_set3:
 42624 00007C93 AB                      	stosw
 42625                                  	;add	di,2
 42626                                  	; 17/12/2022
 42627 00007C94 47                      	inc	di
 42628 00007C95 47                      	inc	di
 42629 00007C96 E2FB                    	loop	ps_set3
 42630                                  
 42631                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42632                                  ; below. So skip it.
 42633                                  
 42634 00007C98 83C708                  	add	di,8			; skip vector 30h & 31h 
 42635                                  	
 42636                                  	; 04/11/2022
 42637                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42638                                  	; 17/12/2022
 42639 00007C9B B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 42640                                  ps_set4:
 42641 00007C9D AB                      	stosw
 42642                                  	;add	di,2
 42643                                  	; 17/12/2022
 42644 00007C9E 47                      	inc	di
 42645 00007C9F 47                      	inc	di
 42646 00007CA0 E2FB                    	loop	ps_set4
 42647                                  
 42648                                  ; set offset of int2f
 42649                                  
 42650                                  ;if installed
 42651                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42652                                  ;endif
 42653                                  	;mov	[es:0C3h],ax
 42654 00007CA2 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42655                                  	; 17/12/2022
 42656                                  	; cx = 0
 42657 00007CA6 07                      	pop	es
 42658 00007CA7 C3                      	retn
 42659                                  
 42660                                  ;---------------------------------------------------------------------------
 42661                                  ;
 42662                                  ; Procedure Name : patch_misc_segments
 42663                                  ;
 42664                                  ; Inputs	 : es = segment to patch in
 42665                                  ;		   ds = dosdata
 42666                                  ;
 42667                                  ; outputs	 : patches in the sharer and other tables in the dos
 42668                                  ;		   with right dos code segment in es
 42669                                  ;
 42670                                  ; Regs Mod	 : DI,SI,CX
 42671                                  ;
 42672                                  ;---------------------------------------------------------------------------
 42673                                  
 42674                                  patch_misc_segments:
 42675                                  
 42676 00007CA8 53                      	push	bx
 42677 00007CA9 06                      	push	es
 42678 00007CAA 50                      	push	ax
 42679                                  
 42680 00007CAB 8CC0                    	mov	ax,es			; ax - > DOS segment
 42681                                  	
 42682 00007CAD 1E                      	push	ds
 42683 00007CAE 07                      	pop	es			; es -> DOSDATA
 42684                                  	
 42685                                  ; initialize the jump table for the sharer...
 42686                                  
 42687                                  	;mov	di,offset dosdata:jshare
 42688                                  	;mov	di,90h
 42689 00007CAF BF[9000]                	mov	di,JShare
 42690                                  	;mov	bx,[0AAAh]
 42691 00007CB2 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42692                                  					; table was patched during the first
 42693                                  					; call to this routine
 42694 00007CB6 B90F00                  	mov	cx,15
 42695                                  jumptabloop:
 42696                                  	;add	di,2			; skip offset
 42697                                  	; 17/12/2022
 42698 00007CB9 47                      	inc	di
 42699 00007CBA 47                      	inc	di
 42700 00007CBB 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42701 00007CBE 7405                    	je	short share_patch	; Y: patch in sharer table
 42702                                  					; N: 
 42703 00007CC0 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42704 00007CC3 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42705                                  share_patch:
 42706 00007CC5 AB                      	stosw				; drop in segment
 42707                                  no_share_patch:
 42708 00007CC6 E2F1                    	loop	jumptabloop
 42709                                  					; BUGBUG patching the country info 
 42710                                  					; with dosdata can be done inline
 42711                                  					; in dosinit.
 42712                                  					; for dos 3.3 country info
 42713                                  					; table address
 42714                                  
 42715                                  	;mov	si,offset dosdata:country_cdpg
 42716                                  	;mov	si,122Ah   
 42717 00007CC8 BE[2812]                	mov	si,COUNTRY_CDPG
 42718                                  					; initialize double word
 42719                                  					; pointers with dosdata in ds
 42720                                  	;mov	[si+4Fh],ds
 42721                                  	;mov	[si+54h],ds
 42722                                  	;mov	[si+59h],ds
 42723                                  	;mov	[si+5Eh],ds
 42724                                  	;mov	[si+80h],ds
 42725                                  	;mov	[si+63h],ds
 42726 00007CCB 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 42727 00007CCE 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 42728 00007CD1 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 42729 00007CD4 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 42730 00007CD7 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 42731 00007CDB 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 42732                                  
 42733                                  					; fastopen routines are in doscode
 42734                                  					; so patch with doscode seg in ax
 42735                                  
 42736                                  	;mov	si,offset dosdata:fastopentable
 42737                                  	;mov	si,0D30h
 42738 00007CDE BE[300D]                	mov	si,FastOpenTable
 42739                                  
 42740                                  	; 17/12/2022
 42741                                  	; bx = [TEMP_DOSLOC]
 42742 00007CE1 83FBFF                  	cmp	bx,-1
 42743                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 42744 00007CE4 7405                    	je	short fast_patch	; Y: patch segment
 42745                                  	;mov	cx,[TEMP_DOSLOC]
 42746                                  					; Q: has fastopen patched in it's
 42747                                  					;    segment
 42748                                  	; 17/12/2022
 42749 00007CE6 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 42750                                  	;;cmp	cx,[si+4]
 42751                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 42752 00007CE9 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 42753                                  
 42754                                  fast_patch:
 42755                                  	;mov	[si+4],ax
 42756 00007CEB 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 42757                                  no_fast_patch:
 42758                                  	; 17/12/2022
 42759                                  	; cx = 0
 42760 00007CEE 58                      	pop	ax
 42761 00007CEF 07                      	pop	es
 42762 00007CF0 5B                      	pop	bx
 42763                                  
 42764 00007CF1 C3                      	retn
 42765                                  
 42766                                  ;--------------------------------------------------------------------------
 42767                                  ;
 42768                                  ; Procedure Name : patch_offset
 42769                                  ; 
 42770                                  ; Inputs	 : NONE
 42771                                  ;
 42772                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 42773                                  ;		   0,20-28,3a-3f, and 30,31
 42774                                  ;
 42775                                  ;
 42776                                  ; Regs. Mod	 : AX,DI,CX
 42777                                  ;--------------------------------------------------------------------------
 42778                                  
 42779                                  patch_offset:
 42780 00007CF2 06                      	push	es		; preserve es
 42781                                  
 42782 00007CF3 31C0                    	xor	ax,ax
 42783 00007CF5 8EC0                    	mov	es,ax
 42784                                  				; set default divide trap address
 42785                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 42786                                  	;mov	word [es:0],108Ah
 42787 00007CF7 26C7060000[8810]        	mov	word [es:0],ldivov
 42788                                  
 42789                                  	;mov	di,80h
 42790 00007CFE BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 42791                                  	;mov	ax,offset dosdata:lirett
 42792                                  	;mov	ax,10DAh
 42793 00007D01 B8[D810]                	mov	ax,lirett
 42794                                  				; set vectors 20 & 21 to point to iret.
 42795                                  	; 17/12/2022
 42796                                  	; cx = 0
 42797                                  
 42798                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 42799                                  po_iset1:
 42800 00007D04 AB                      	stosw	; int 20h offset
 42801                                  	;add	di,2 ; *
 42802                                  	;loop	po_iset1
 42803                                  	; 17/12/2022
 42804 00007D05 47                      	inc	di
 42805 00007D06 47                      	inc	di
 42806 00007D07 AB                      	stosw	; int 21h offset
 42807                                  
 42808                                  	;add	di,4		; skip vector 22h
 42809                                  	; 17/12/2022
 42810 00007D08 83C706                  	add	di,6 ; *	
 42811                                  
 42812 00007D0B AB                      	stosw			; set offset of 23h
 42813                                  	;add	di,6		; skip 24h
 42814                                  	; 19/09/2023
 42815 00007D0C 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 42816                                  
 42817                                  				; set vectors 25-28 and 2a-3f to iret.
 42818                                  	; 04/11/2022
 42819                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 42820                                  	; 19/09/2023
 42821                                  	; 17/12/2022
 42822                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 42823                                  po_iset2:
 42824 00007D0F AB                      	stosw		; set offset for int 28h ; 19/09/2023
 42825                                  	;add	di,2
 42826                                  	; 19/09/2023
 42827                                  	; 17/12/2022
 42828                                  	;inc	di
 42829                                  	;inc	di
 42830                                  	; 19/09/2023
 42831                                  	;loop	po_iset2
 42832                                  
 42833                                  	;add	di,4		; skip vector 29h
 42834                                  	; 19/09/2023
 42835 00007D10 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 42836                                  
 42837                                  	; 04/11/2022
 42838                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 42839                                  	; 17/12/2022
 42840                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 42841 00007D13 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 42842                                  po_iset3:
 42843 00007D15 AB                      	stosw
 42844                                  	;add	di,2
 42845                                  	; 17/12/2022
 42846 00007D16 47                      	inc	di
 42847 00007D17 47                      	inc	di
 42848 00007D18 E2FB                    	loop	po_iset3
 42849                                  
 42850                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 42851                                  ; below. So skip it.
 42852                                  
 42853                                  	;add	di,8		; skip vector 30h & 31h 
 42854                                  	; 17/12/2022
 42855 00007D1A 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 42856                                  
 42857                                  	; 04/11/2022
 42858                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 42859                                  				;   sets offsets for ints 32h-3fh
 42860                                  	; 17/12/2022
 42861 00007D1D B10E                    	mov	cl,14 ; 26/06/2019
 42862                                  po_iset4:
 42863 00007D1F AB                      	stosw
 42864                                  	;add	di,2
 42865                                  	; 17/12/2022
 42866 00007D20 47                      	inc	di
 42867 00007D21 47                      	inc	di
 42868 00007D22 E2FB                    	loop	po_iset4
 42869                                  
 42870                                  ;if installed
 42871                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 42872                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 42873 00007D24 26C706BC00[C410]        	mov	word [es:(2Fh*4)],lint2f
 42874                                  ;endif
 42875                                  
 42876                                  ; set up entry point call at vectors 30-31h
 42877                                  	;mov	byte [es:0C0h],0EAh
 42878 00007D2B 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 42879                                  	;mov	word [es:0C1h],10D0h
 42880                                  
 42881 00007D31 26C706C100[CE10]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 42882                                  
 42883                                  							; 19/09/2023
 42884                                  	;mov	word [es:80h],1094h
 42885 00007D38 26C7068000[9210]        	mov	word [es:addr_int_abort],lquit		; int 20h
 42886                                  	;mov	word [es:84h],109Eh
 42887 00007D3F 26C7068400[9C10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 42888                                  	;mov	word [es:94h],10A8h
 42889 00007D46 26C7069400[A610]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 42890                                  	;mov	word [es:98h],10B2h
 42891 00007D4D 26C7069800[B010]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 42892                                  	;mov	word [es:9Ch],10BCh
 42893 00007D54 26C7069C00[BA10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 42894                                  
 42895                                  	; 17/12/2022
 42896                                  	; CX = 0
 42897 00007D5B 07                      	pop	es		; restore es
 42898 00007D5C C3                      	retn
 42899                                  
 42900                                  ;--------------------------------------------------------------------------
 42901                                  ;
 42902                                  ; 	Procedure Name	:	patch_in_nops
 42903                                  ;
 42904                                  ; 	Entry		: 	ES -> DOSDATA
 42905                                  ;
 42906                                  ;	Regs Mod	: 	cx, di
 42907                                  ;
 42908                                  ;	Description:
 42909                                  ;		This routine patches in 2 nops at the offsets specified in 
 42910                                  ;	patch_table. This basically enables the low mem stub to start 
 42911                                  ;	making XMS calls.
 42912                                  ;
 42913                                  ;--------------------------------------------------------------------------
 42914                                  
 42915                                  	; 04/11/2022
 42916                                  	; (MSDOS 5.0 MSDOS.SYS)
 42917                                  	; DOSCODE:0BC50h
 42918                                  
 42919                                  patch_table:	; label	byte
 42920                                  	;dw	offset dosdata:i0patch
 42921                                  	;dw	offset dosdata:i20patch
 42922                                  	;dw	offset dosdata:i21patch
 42923                                  	;dw	offset dosdata:i25patch
 42924                                  	;dw	offset dosdata:i26patch
 42925                                  	;dw	offset dosdata:i27patch
 42926                                  	;dw	offset dosdata:i2fpatch
 42927                                  	;dw	offset dosdata:cpmpatch
 42928 00007D5D [8810]                  	dw	i0patch
 42929 00007D5F [9210]                  	dw	i20patch
 42930 00007D61 [9C10]                  	dw	i21patch
 42931 00007D63 [A610]                  	dw	i25patch
 42932 00007D65 [B010]                  	dw	i26patch
 42933 00007D67 [BA10]                  	dw	i27patch
 42934 00007D69 [C410]                  	dw	i2fpatch
 42935 00007D6B [CE10]                  	dw	cpmpatch
 42936                                  
 42937                                  patch_table_size equ ($-patch_table)/2
 42938                                  
 42939                                  patch_in_nops:
 42940 00007D6D 50                      	push	ax
 42941 00007D6E 56                      	push	si
 42942 00007D6F BE[5D7D]                	mov	si,patch_table
 42943 00007D72 B89090                  	mov	ax,9090h ; nop, nop
 42944                                  	; 17/12/2022
 42945                                  	; cx = 0
 42946                                  	;mov	cx,8
 42947                                  	;mov	cx,patch_table_size ; 8
 42948 00007D75 B108                    	mov	cl,patch_table_size ; 8
 42949                                  pin_loop:
 42950 00007D77 2E8B3C                  	mov	di,[cs:si]
 42951 00007D7A AB                      	stosw
 42952                                  	;add	si,2
 42953                                  	; 17/12/2022
 42954 00007D7B 46                      	inc	si
 42955 00007D7C 46                      	inc	si
 42956 00007D7D E2F8                    	loop	pin_loop
 42957 00007D7F 5E                      	pop	si
 42958 00007D80 58                      	pop	ax
 42959 00007D81 C3                      	retn
 42960                                  
 42961                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42962                                  ; ---------------------------------------------------------------------------
 42963                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 42964                                  ; ---------------------------------------------------------------------------
 42965                                  
 42966                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 42967                                  DOSCODE_END:
 42968                                  	;times	9 db 0	; db 9 dup(0)
 42969                                  	; 18/12/2022
 42970 00007D82 0000                    	dw	0  ;	times 2 db 0
 42971                                  
 42972                                  ;align 16
 42973                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 42974                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 42975                                  
 42976                                  ; ---------------------------------------------------------------------------
 42977                                  
 42978                                  
 42979                                  ;memstrt label word
 42980                                  ; ---------------------------------------------------------------------------
 42981                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 42982                                  ; ---------------------------------------------------------------------------
 42983                                  
 42984                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 42985                                  
 42986                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 42987                                  ; the dos initialization segment
 42988                                  
 42989                                  ;ifndef ROMDOS
 42990                                  
 42991                                  ;doscode ends
 42992                                  
 42993                                  ;else
 42994                                  
 42995                                  ;;dosinitseg ends
 42996                                  
 42997                                  ;endif ; ROMDOS
 42998                                  
 42999                                  ;============================================================================
 43000                                  
 43001                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43002                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43003                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43004                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43005                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43006                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43007                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43008                                  
 43009                                  ;; burasý doscode sonu
 43010                                  
 43011                                  ;============================================================================
 43012                                  ; DOSDATA
 43013                                  ;============================================================================
 43014                                  ; 29/04/2019 - Retro DOS 4.0
 43015                                  
 43016                                  ;[BITS 16]
 43017                                  
 43018                                  ;[ORG 0]
 43019                                  
 43020                                  ; 25/04/2019 - Retro DOS v4.0
 43021                                  
 43022                                  ;============================================================================
 43023                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43024                                  ;============================================================================
 43025                                  
 43026                                  ;align 16
 43027                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43028                                  	; (4970 bytes for MSDOS 6.21)
 43029                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43030                                  
 43031                                  ;============================================================================
 43032                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43033                                  ;============================================================================
 43034                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43035                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43036                                  ; 16/07/2018 - Retro DOS 3.0	
 43037                                  
 43038                                  ;Break <Initialized data and data used at DOS initialization>
 43039                                  ;----------------------------------------------------------------------------
 43040                                  
 43041                                  ; We need to identify the parts of the data area that are relevant to tasks
 43042                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43043                                  ; data will be gathered with the system code. The process data under 2.x will
 43044                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43045                                  ;
 43046                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43047                                  ; describing that data item.
 43048                                  
 43049                                  ;DOSDATA SEGMENT
 43050                                  
 43051                                  ; 04/11/2022
 43052                                  ;[ORG 0]
 43053                                  
 43054                                  ; ----------------------------------------------------------------------------
 43055                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43056                                  ; ----------------------------------------------------------------------------
 43057                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43058                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43059                                  ; ----------------------------------------------------------------------------
 43060                                  
 43061                                  ; 04/11/2022
 43062                                  
 43063                                  ;DOSDATA:0000h
 43064                                  
 43065 00007D84 90<rep Ch>              align 16
 43066                                  
 43067                                  ; ----------------------------------------------------------------------------
 43068                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43069                                  ; ----------------------------------------------------------------------------
 43070                                  
 43071                                  segment .data  vstart=0 ; 06/12/2022
 43072                                  								
 43073                                  ; ============================================================================
 43074                                  
 43075                                  ; 06/12/2022
 43076                                  ;DOSDATASTART equ $
 43077                                  DOSDATASTART:
 43078                                  
 43079                                  
 43080                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43081                                  
 43082                                  	;; 03/11/2022
 43083                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43084                                  
 43085                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43086                                  	;db	4 dup (?)	
 43087 00000000 00<rep 4h>              	times	4 db 0
 43088                                  
 43089                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43090                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43091                                  	;dw	0
 43092                                  
 43093                                  	;EVEN
 43094                                  
 43095                                  ;align 2
 43096                                  
 43097                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43098                                  ; area compatability. This location must be incremented EACH TIME the data
 43099                                  ; area here gets mucked with.
 43100                                  ;
 43101                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43102                                  
 43103                                  MSCT001S:	; LABEL BYTE
 43104                                  	
 43105                                  DataVersion:	
 43106 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43107                                  
 43108                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43109                                  ;hkn; been removed to DOSCODE above
 43110                                  
 43111                                  ;M044
 43112                                  ; First part of save area for saving last para of Window memory
 43113                                  
 43114                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43115 00000006 00<rep 8h>              	times	8 db 0
 43116                                  
 43117                                  	; MSDOS 6.21 DOSDATA:000Eh
 43118                                  MYNUM:			; Offset 000Eh
 43119 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43120                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43121 00000010 0000                    	dw	0
 43122                                  OpenLRU:
 43123 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43124                                  OEM_HANDLER: 		
 43125 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43126                                  
 43127                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43128                                  ;;			way that we leave DOS???? - jgl
 43129                                  
 43130                                  LeaveAddr:
 43131 00000018 [4C04]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43132                                  RetryCount:		
 43133 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43134                                  RetryLoop:
 43135 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43136                                  LastBuffer:
 43137 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43138                                  CONTPOS:
 43139 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43140                                  arena_head:
 43141 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43142                                  
 43143                                  ;; 16/07/2018
 43144                                  ;;***************************************************************************
 43145                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43146                                  ;;***************************************************************************
 43147                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43148                                  ;;
 43149                                  ;;	AH = 52h
 43150                                  ;;
 43151                                  ;;	on return:
 43152                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43153                                  ;;		Known "invars" fields follow (varies with DOS version):
 43154                                  ;;
 43155                                  ;;	Offset Size		 Description
 43156                                  ;;
 43157                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43158                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43159                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43160                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43161                                  ;;		      0 indicates no unread input (DOS 3.x)
 43162                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43163                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43164                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43165                                  ;;	  08   dword  pointer to $CLOCK device driver
 43166                                  ;;	  0C   dword  pointer to CON device driver
 43167                                  ;;	  10   byte   number of logical drives in system
 43168                                  ;;	  11   word   maximum bytes/block of any block device
 43169                                  ;;	  13   dword  pointer to DOS cache buffer header
 43170                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43171                                  ;;		      point to the next device in device chain
 43172                                  ;;
 43173                                  ;;***************************************************************************
 43174                                  
 43175                                  ; The following block of data is used by SYSINIT. 
 43176                                  ; Do not change the order or size of this block
 43177                                  
 43178                                  ;SYSINITVAR:
 43179                                  ;----------------------------------------------------------------------------
 43180                                  SYSINITVARS:
 43181                                  DPBHEAD:
 43182 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43183                                  SFT_ADDR:
 43184 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43185                                  BCLOCK:
 43186 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43187                                  BCON:
 43188 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43189                                  MAXSEC:
 43190 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43191                                  BUFFHEAD:
 43192 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43193                                  CDSADDR:
 43194 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43195                                  SFTFCB:
 43196 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43197                                  KEEPCOUNT:
 43198 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43199                                  NUMIO:
 43200 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43201                                  CDSCOUNT:
 43202 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43203                                  
 43204                                  ; A fake header for the NUL device
 43205                                  NULDEV:
 43206 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43207                                  	;dw	8004h
 43208 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43209 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43210 00000050 [CB0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43211 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43212                                  SPLICES:
 43213 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43214                                  
 43215                                  Special_Entries:
 43216 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43217                                  UU_IFS_DOS_CALL:
 43218 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43219                                  ; 
 43220                                  ; UU_IFS_HEADER:
 43221                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43222                                  
 43223                                  ChkCopyProt:
 43224 00000061 0000                    	dw	0	; M068
 43225                                  A20OFF_PSP:
 43226 00000063 0000                    	dw	0	; M068
 43227                                  BUFFERS_PARM1:
 43228 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43229                                  BUFFERS_PARM2:
 43230 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43231                                  BOOTDRIVE:
 43232 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43233                                  DDMOVE:
 43234 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43235                                  EXT_MEM_SIZE:
 43236 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43237                                  
 43238                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43239                                  ;
 43240                                  ; Replaced by next two declarations
 43241                                  ;
 43242                                  ;UU_BUF_HASH_PTR:
 43243                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43244                                  ;UU_BUF_HASH_COUNT:
 43245                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43246                                  
 43247                                  BufferQueue:
 43248 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43249                                  DirtyBufferCount:
 43250 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43251                                  			; BUGBUG ---- change to byte
 43252                                  SC_CACHE_PTR:
 43253 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43254                                  SC_CACHE_COUNT:
 43255 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43256                                  BuffInHMA:
 43257 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43258                                  LoMemBuff:
 43259 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43260                                  			;  in Low mem when buffs are in HMA
 43261                                  ;
 43262                                  ; All variables which have UU_ as prefix can be reused for other
 43263                                  ; purposes and can be renamed. All these variables were used for
 43264                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43265                                  ; manager ---- MOHANS
 43266                                  ;
 43267                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43268                                  UU_BUF_EMS_FIRST_PAGE:	
 43269 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43270                                  
 43271                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43272                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43273                                  ;	dw	0			
 43274                                  
 43275                                  CL0FATENTRY:
 43276 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43277                                  			; is used in pack/unpack rts.
 43278                                  			; in fat.asm if cluster 0 is specified.
 43279                                  			; SR;
 43280                                  IoStatFail:
 43281 00000083 00                      	db	0	; IoStatFail has been added to 
 43282                                  			; record a fail on an I24 
 43283                                  			; issued from IOFUNC on a status call. 
 43284                                  
 43285                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43286                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43287                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43288                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43289                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43290                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43291                                  ;
 43292                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43293                                  						; state of the 	buffers page.
 43294                                  						; This one byte is retained to 
 43295                                  						; keep the size of this data 
 43296                                  						; block the same.;
 43297                                  ALLOCMSAVE:
 43298 00000084 00                      	db	0	; M063: temp var. used to 
 43299                                  			; M063: save alloc method in
 43300                                  			; M063: msproc.asm
 43301                                  A20OFF_COUNT:
 43302 00000085 00                      	db	0	; M068: indiactes the # of 
 43303                                  			; M068: int 21 calls for 
 43304                                  			; M068: which A20 is off
 43305                                  DOS_FLAG:
 43306 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43307                                  			; definitions
 43308                                  UNPACK_OFFSET:
 43309 00000087 0000                    	dw	0	; saves pointer to the start
 43310                                  			; of unpack code in exepatch.
 43311                                  			; asm.
 43312                                  UMBFLAG:
 43313 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43314                                  			; M003: link state of the UMBs
 43315                                  			; M003: whether linked or not 
 43316                                  			; M003: to the DOS arena chain
 43317                                  SAVE_AX:
 43318 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43319                                  			; M000: in msproc.asm
 43320                                  UMB_HEAD:
 43321 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43322                                  			; M000: the first umb arena by 
 43323                                  			; M000: BIOS sysinit.
 43324                                  START_ARENA:
 43325 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43326                                  			; M000: from which DOS will 
 43327                                  			; M000: start its scan for alloc.
 43328                                  
 43329                                  ; End of SYSINITVar block
 43330                                  ;----------------------------------------------------------------------------
 43331                                  
 43332                                  ; 25/04/2019 - Retro DOS v4.0
 43333                                  
 43334                                  ; 16/07/2018
 43335                                  ; MSDOS 3.3 (& MDOS 6.0)
 43336                                  
 43337                                  ;
 43338                                  ; Sharer jump table
 43339                                  ;
 43340                                  
 43341                                  ;PUBLIC	JShare
 43342                                  	;EVEN
 43343                                  
 43344                                  ;JShare	LABEL	DWORD
 43345                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43346                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43347                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43348                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43349                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43350                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43351                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43352                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43353                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43354                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43355                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43356                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43357                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43358                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43359                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43360                                  
 43361                                  align 2
 43362                                  
 43363                                  JShare:
 43364 00000090 [4A07]0000              		DW	BadCall,0
 43365 00000094 [4E07]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43366 00000098 [4E07]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43367 0000009C [4A07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43368 000000A0 [4A07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43369 000000A4 [4A07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43370 000000A8 [4A07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43371 000000AC [4A07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43372 000000B0 [4E07]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43373 000000B4 [4A07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43374 000000B8 [4A07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43375 000000BC [4A07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43376 000000C0 [4E07]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43377 000000C4 [4A07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43378 000000C8 [4A07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43379                                  
 43380                                  
 43381                                  ;============================================================================
 43382                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43383                                  ;============================================================================
 43384                                  ; 25/04/2019 - Retro DOS 4.0 
 43385                                  ; 16/07/2018 - Retro DOS 3.0	
 43386                                  
 43387                                  ;Break <Initialized data and data used at DOS initialization>
 43388                                  ;----------------------------------------------------------------------------
 43389                                  
 43390                                  ; We need to identify the parts of the data area that are relevant to tasks
 43391                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43392                                  ; data will be gathered with the system code.  The process data under 2.x will
 43393                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43394                                  ;
 43395                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43396                                  ; describing that data item.
 43397                                  
 43398                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43399                                  
 43400                                  ;
 43401                                  ; Table of routines for assignable devices
 43402                                  ;
 43403                                  ; MSDOS allows assignment if the following standard devices:
 43404                                  ;   stdin  (usually CON input)
 43405                                  ;   stdout (usually CON output)
 43406                                  ;   auxin  (usually AUX input)
 43407                                  ;   auxout (usually AUX output)
 43408                                  ;   stdlpt (usually PRN output)
 43409                                  ;
 43410                                  ; SPECIAL NOTE:
 43411                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43412                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43413                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43414                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43415                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43416                                  ;   as EOF).
 43417                                  
 43418                                  ; Default SFTs for boot up
 43419                                  
 43420                                  		;PUBLIC	SFTABL
 43421                                  
 43422                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43423 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43424 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43425 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43426                                  		;times 295 db 0 ; MSDOS 6.0
 43427 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43428                                  
 43429                                  ; the next two variables relate to the position of the logical stdout/stdin
 43430                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43431                                  ; console.
 43432                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43433 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43434 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43435                                  					;	   of buffered input call
 43436 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43437 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43438                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43439 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43440 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43441 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43442                                  switch_character:
 43443 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43444 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43445 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43446 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43447 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43448                                  
 43449                                  ; The following table is a list of addresses that the sharer patches to be
 43450                                  ; PUSH AX to enable the critical sections
 43451                                  
 43452                                  		; DOSDATA:0315h (MSDOS 6.21)
 43453                                  
 43454                                  ;PUBLIC	CritPatch
 43455                                  
 43456                                  CritPatch:	; LABEL WORD
 43457                                  
 43458                                  ;IRP sect,<critDisk,critDevice>
 43459                                  
 43460                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43461                                  ;
 43462                                  ;SR; Change code patch address to a variable in data segment
 43463                                  ;
 43464                                  ;       dw OFFSET DOSDATA: redir_patch
 43465                                  ;       dw OFFSET DOSDATA: redir_patch
 43466                                  ;
 43467                                  ;;hkn	Short_Addr  E&sect
 43468                                  ;;hkn	Short_Addr  L&sect
 43469                                  ;
 43470                                  ;ELSE
 43471                                  ;	DW	0
 43472                                  ;	DW	0
 43473                                  ;ENDIF
 43474                                  ;ENDM
 43475                                  ;	DW	0
 43476                                  
 43477                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43478                                   
 43479 00000315 [0C0D]                  	dw 	redir_patch
 43480 00000317 [0C0D]                  	dw 	redir_patch			
 43481 00000319 [0C0D]                  	dw	redir_patch
 43482 0000031B [0C0D]                  	dw 	redir_patch
 43483                                  
 43484 0000031D 0000                    	dw	0
 43485                                  
 43486                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43487                                  ; Also, IBM server 1.0 requires this also.
 43488                                  
 43489                                  	;EVEN			; Force swap area to start on word boundry
 43490 0000031F 90                      align 2
 43491                                  	;PUBLIC	SWAP_START
 43492                                  SWAP_START:	; LABEL BYTE
 43493 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43494 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43495 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43496 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43497 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43498                                  
 43499                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43500 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43501 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43502                                  ; end warning
 43503                                   
 43504 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43505                                  
 43506 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43507 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43508 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43509 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43510 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43511 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43512                                  ;				; F.C. 2/17/86
 43513 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43514 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43515                                  ;align 2
 43516                                  SWAP_ALWAYS:	; 05/08/2018
 43517 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43518                                  				;   extended error type stuff.
 43519                                  				;   NOTE: does not have Correct value on
 43520                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43521                                  				;   GetExtendedError system calls)
 43522 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43523 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43524 00000340 0000                    FirstArena:	dw 0		; first free block found
 43525 00000342 0000                    BestArena:	dw 0		; best free block found
 43526 00000344 0000                    LastArena:	dw 0		; last free block found
 43527 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43528 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43529 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43530 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43531 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43532 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43533 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43534                                  
 43535                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43536                                  	;EVEN
 43537 0000034F 90                      align 2
 43538                                  		; DOSDATA:0350h (MSDOS 6.21)
 43539 00000350 00                      DAY:		db 0		; Day of month
 43540 00000351 00                      MONTH:		db 0		; Month of year
 43541 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43542 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43543 00000356 00                      WEEKDAY:	db 0		; Day of week
 43544                                  ; end warning
 43545                                  
 43546 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43547 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43548 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43549                                  
 43550                                  ; Combination of all device call parameters
 43551                                  	;PUBLIC	DEVCALL 	;
 43552                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43553                                  DEVCALL: ; 08/08/2018
 43554 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43555 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43556 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43557 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43558 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43559                                  
 43560                                  	;PUBLIC	CALLUNIT
 43561                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43562                                  CALLFLSH: ; LABEL   WORD	;
 43563 00000367 00                      CALLMED:	db 0		; media byte
 43564                                  CALLBR:	  ; LABEL   DWORD	;
 43565                                  	;PUBLIC	CALLXAD 	;
 43566                                  CALLXAD:  ; LABEL   DWORD	;
 43567 00000368 00                      CALLRBYT:	db 0		;
 43568                                  	;PUBLIC	CALLVIDM	;
 43569                                  CALLVIDM: ; LABEL   DWORD	;
 43570 00000369 00<rep 3h>              	times 3 db 0	;
 43571                                  	;PUBLIC CallBPB		;
 43572                                  CALLBPB:  ; LABEL   DWORD	;
 43573                                  CALLSCNT:			;
 43574 0000036C 0000                    		dw 0		;
 43575                                  	;PUBLIC	CALLSSEC	;
 43576                                  CALLSSEC: ; LABEL   WORD	;
 43577 0000036E 0000                    		dw 0		;
 43578 00000370 00000000                CALLVIDRW:	dd 0		;
 43579                                  ;MSDOS 6.0
 43580 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43581 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43582                                  
 43583                                  ; Same as above for I/O calls	;
 43584                                  				;
 43585                                  	;PUBLIC	IOCall		;
 43586                                  ;IOCALL	SRHEAD	<>		;
 43587                                  IOCALL:	; 07/08/2018
 43588 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43589 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43590 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43591 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43592 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43593                                  IOFLSH:	  ; LABEL   WORD	;
 43594                                          ;PUBLIC  IORCHR		;
 43595                                  IORCHR:	  ; LABEL   BYTE	;
 43596 00000389 00                      IOMED:		db 0		;
 43597 0000038A 00000000                IOXAD:		dd 0		;
 43598 0000038E 0000                    IOSCNT:		dw 0		;	
 43599 00000390 0000                    IOSSEC:		dw 0		;
 43600                                  
 43601                                  ; Call struct for DSKSTATCHK	;
 43602 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43603 00000393 00                      		db 0
 43604 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43605 00000395 0000                    DSKSTST:	dw 0		;
 43606 00000397 00<rep 8h>              	times 8	db 0		;
 43607 0000039F 00                      DSKCHRET:	db 0		;
 43608                                  
 43609                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43610                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43611                                  ;hkn   short_addr  DEVIOBUF	;
 43612                                  	
 43613 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43614 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43615 000003A4 0100                    DSKSTCNT:	dw 1		;
 43616 000003A6 0000                    		dw 0		;
 43617                                  
 43618 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43619                                  
 43620                                  ;MSDOS 6.0
 43621                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43622 000003A9 00000000                		dd 0		;MS. position
 43623 000003AD 00000000                		dd 0		;MS. length
 43624                                  
 43625                                  ;hkn; the foll. was moved from dosmes.asm.
 43626                                  
 43627                                  	;EVEN
 43628 000003B1 90                      align 2				; needed to maintain offsets
 43629                                  
 43630                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43631                                  USERNUM:
 43632 000003B2 0000                     		dw 0		; 24 bit user number
 43633 000003B4 00                      		db 0
 43634                                  ;IF IBM
 43635                                  ;IF IBMCOPYRIGHT
 43636                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43637                                  ;ELSE
 43638                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43639                                  ;ENDIF
 43640                                  ;ELSE
 43641 000003B5 FF                      OEMNUM:		DB 0FFh
 43642                                  ;ENDIF
 43643                                  
 43644                                  ;============================================================================
 43645                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43646                                  ;============================================================================
 43647                                  ; 25/04/2019 - Retro DOS 4.0
 43648                                  
 43649                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43650                                  ; ----------------------------------------------------------
 43651                                  ; This data section which was named as uninitialized data
 43652                                  ; (as overlayed by initialization code) but follows 
 43653                                  ; initialized data section from DOSDATA:03B6h address
 43654                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43655                                  ; and there is not overlaying..)
 43656                                  ; **********************************************************
 43657                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43658                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43659                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43660                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43661                                  ; TIMEBUF is at offset 03B6h.
 43662                                  ; **********************************************************	
 43663                                  
 43664                                  ;Break <Uninitialized data overlayed by initialization code>
 43665                                  ;----------------------------------------------------------------------------
 43666                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43667                                  ; Init code overlaps with data area below
 43668                                  
 43669                                  ; 	ORG     0
 43670                                  
 43671                                  MSDAT001S:	; label byte
 43672                                  
 43673                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43674                                  TIMEBUF: ;	times 6 db 0
 43675 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43676 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43677                                  
 43678                                  ; The following areas are used as temp buffer in EXEC system call
 43679                                  
 43680                                  ; DOSDATA:03BEh
 43681                                  OPENBUF: ;times 64  dw	0
 43682 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43683                                  RENBUF:	
 43684 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43685                                  
 43686                                  ; Buffer for search calls
 43687                                  SEARCHBUF:	
 43688 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43689                                  DUMMYCDS:  ;times 88 db 0
 43690 000004F3 00<rep 58h>             	times	curdirLen db 0
 43691                                  
 43692                                  ; End of contiguous buffer
 43693                                   
 43694                                  ; Temporary directory entry for use by many routines. Device directory
 43695                                  ; entries (bogus) are built here.
 43696                                  
 43697                                  ; DOSDATA:054Bh
 43698                                  
 43699                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43700                                  
 43701                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43702                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43703                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43704                                  
 43705                                  NAME1:	
 43706 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43707                                  NAME2:
 43708 00000557 00<rep Dh>              	times	13 db	0 		;
 43709                                  DESTSTART:
 43710 00000564 0000                    	dw	0			;
 43711                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43712                                  	;times	5  db	0
 43713 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 43714                                  
 43715                                  ; End Temporary directory entry.
 43716                                  
 43717 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 43718                                  EXTFCB:	
 43719 0000056C 00                      	db	0		; TRUE => extended FCB in use
 43720                                  SATTRIB:
 43721 0000056D 00                      	db	0		; Storage for search attributes
 43722                                  OPEN_ACCESS:
 43723 0000056E 00                      	db	0		; access of open system call
 43724                                  FOUNDDEL:
 43725 0000056F 00                      	db	0		; true => file was deleted
 43726                                  FOUND_DEV:
 43727 00000570 00                      	db	0		; true => search found a device
 43728                                  FSPLICE:
 43729 00000571 00                      	db	0		; true => do a splice in transpath
 43730                                  FSHARING:
 43731 00000572 00                      	db	0		; TRUE => no redirection
 43732                                  SECCLUSPOS:
 43733 00000573 00                      	db	0		; Position of first sector within cluster
 43734 00000574 00                      TRANS:	db	0		;
 43735 00000575 00                      READOP:	db	0		;
 43736                                  THISDRV:
 43737 00000576 00                      	db	0		;
 43738                                  CLUSFAC:
 43739 00000577 00                      	db	0		;
 43740                                  CLUSSPLIT:
 43741 00000578 00                      	db	0		;
 43742                                  INSMODE:
 43743 00000579 00                      	db	0		; true => insert mode in buffered read
 43744 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 43745 0000057B 00                      VOLID:	db	0		;
 43746                                  EXIT_TYPE:
 43747 0000057C 00                      	db	0		; type of exit...
 43748                                   
 43749                                  	;EVEN
 43750                                  
 43751 0000057D 90                      align 2
 43752                                  
 43753                                  ; DOSDATA:057Eh
 43754                                  
 43755                                  ; WARNING - the following two items are accessed as a word
 43756                                  
 43757                                  CREATING:
 43758 0000057E 00                      	db	0		; true => creating a file
 43759 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 43760                                  				; = DIRFREE iff BUGBUG
 43761                                  EXITHOLD:
 43762 00000580 00000000                	dd	0		; Temp location for proc terminate
 43763                                  USER_SP:
 43764 00000584 0000                    	dw	0		; User SP for system call
 43765                                  USER_SS:
 43766 00000586 0000                    	dw	0		; User SS for system call
 43767                                  CONTSTK:
 43768 00000588 0000                    	dw	0		;
 43769                                  THISDPB:
 43770 0000058A 00000000                	dd	0		;
 43771                                  CLUSSAVE:
 43772 0000058E 0000                    	dw	0		;
 43773                                  CLUSSEC:
 43774 00000590 00000000                	dd	0		;>32mb			AC0000
 43775                                  PREREAD:
 43776 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 43777 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 43778                                  FATBYTE:
 43779 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 43780                                  ; DOSDATA:059Ah
 43781 0000059A 00000000                DEVPT:	dd	0		;
 43782                                  THISSFT:
 43783 0000059E 00000000                	dd	0		; Address of user SFT
 43784                                  THISCDS:
 43785 000005A2 00000000                	dd	0		; Address of current CDS
 43786                                  THISFCB:
 43787 000005A6 00000000                	dd	0		; Address of user FCB
 43788 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 43789 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 43790 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 43791                                  WFP_START:
 43792 000005B2 0000                    	dw	0		;
 43793                                  REN_WFP:
 43794 000005B4 0000                    	dw	0		;
 43795                                  CURR_DIR_END:
 43796 000005B6 0000                    	dw	0		;
 43797                                  NEXTADD:
 43798 000005B8 0000                    	dw	0		;
 43799                                  LASTPOS:
 43800 000005BA 0000                    	dw	0		;
 43801                                  CLUSNUM:
 43802 000005BC 0000                    	dw	0		;
 43803 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 43804                                  DIRSTART:
 43805 000005C2 0000                    	dw	0		;
 43806 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 43807 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 43808                                                                  ; sectors
 43809                                  BYTSECPOS:
 43810 000005CC 0000                    	dw	0		; Position of first byte within sector
 43811                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 43812 000005CE 0000<rep 2h>                    times	2 dw 0
 43813                                  BYTCNT1:
 43814 000005D2 0000                    	dw	0		; No. of bytes in first sector
 43815                                  BYTCNT2:
 43816 000005D4 0000                    	dw	0		; No. of bytes in last sector
 43817 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 43818                                  ; DOSDATA:05D8h
 43819                                  ENTFREE:
 43820 000005D8 0000                    	dw	0		;
 43821                                  ENTLAST:
 43822 000005DA 0000                    	dw	0		;
 43823                                  NXTCLUSNUM:
 43824 000005DC 0000                    	dw	0		;
 43825                                  GROWCNT:
 43826 000005DE 00000000                	dd	0		;
 43827 000005E2 00000000                CURBUF:	dd	0		;
 43828 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 43829 000005EA 0000                    SAVEBX:	dw	0		;
 43830 000005EC 0000                    SAVEDS:	dw	0		;
 43831                                  RESTORE_TMP:
 43832 000005EE 0000                    	dw	0		; return address for restore world
 43833 000005F0 0000                    NSS:	dw	0
 43834 000005F2 0000                    NSP:	dw	0
 43835                                  ; DOSDATA:05F4h
 43836                                  EXTOPEN_FLAG:
 43837 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 43838                                  EXTOPEN_ON:
 43839 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 43840                                  EXTOPEN_IO_MODE:
 43841 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 43842                                  SAVE_DI:
 43843 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 43844                                  SAVE_ES:
 43845 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 43846                                  SAVE_DX:
 43847 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 43848                                  SAVE_CX:
 43849 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 43850                                  SAVE_BX:
 43851 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 43852                                  SAVE_SI:
 43853 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 43854                                  SAVE_DS:
 43855 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 43856                                  
 43857                                  ; DOSDATA:0607h
 43858                                  
 43859                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 43860                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 43861                                  ; the high 16, the low 16 are still in the register.
 43862                                  
 43863                                  HIGH_SECTOR:	
 43864 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 43865                                  ;OffsetMagicPatch:
 43866                                  ;	dw	MagicPatch ;scottq 8/6/92
 43867                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43868 00000609 0000                    	dw	0
 43869                                  				;see dos\mpatch.asm
 43870                                  DISK_FULL:
 43871 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 43872                                  TEMP_VAR:
 43873 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 43874                                  TEMP_VAR2:
 43875 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 43876 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 43877                                  DOS34_FLAG:
 43878 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 43879                                  NO_FILTER_PATH:
 43880 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 43881                                  NO_FILTER_DPATH:
 43882 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 43883                                  ; M008
 43884                                  AbsRdWr_SS:
 43885 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 43886                                  AbsRdWr_SP:
 43887 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 43888                                  
 43889                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 43890                                  ; M008
 43891                                   
 43892                                   
 43893                                  ; make those pushes fast!!!
 43894                                  
 43895                                  ;EVEN
 43896                                  
 43897 0000061F 90                      align 2
 43898                                  
 43899                                  StackSize   equ 180h  ; 384	; gross but effective
 43900                                  
 43901                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 43902                                  ;				; made up their minds about
 43903                                   
 43904                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 43905                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 43906                                  
 43907                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 43908                                   
 43909 00000620 00<rep 180h>                    times	StackSize db	0	;
 43910                                  AUXSTACK:			; LABEL   BYTE
 43911                                   
 43912 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 43913                                  DSKSTACK:			; LABEL   BYTE
 43914                                   
 43915 00000920 00<rep 180h>                    times	StackSize db	0	;
 43916                                  IOSTACK:			; LABEL   BYTE
 43917                                  
 43918                                  ; DOSDATA:0AA0h 
 43919                                   
 43920                                  ; patch space for Boca folks.
 43921                                  ; Say What????!!! This does NOT go into the swappable area!
 43922                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 43923                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 43924                                   
 43925                                  IBMPATCH: ; label byte
 43926                                  PRINTER_FLAG:
 43927 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 43928                                  VOLCHNG_FLAG:
 43929 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 43930                                  VIRTUAL_OPEN:
 43931 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 43932                                   
 43933                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 43934                                  
 43935                                  FSeek_drive:
 43936 00000AA3 00                      	db	0		;AN000; fastseek drive #
 43937                                  FSeek_firclus:
 43938 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 43939                                  FSeek_logclus:
 43940 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 43941                                  FSeek_logsave:
 43942 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 43943                                  
 43944                                  ; DOSDATA:0AAAh
 43945                                  
 43946                                  TEMP_DOSLOC:
 43947 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 43948                                  				;at SYSINIT time.
 43949                                  SWAP_END:  ; LABEL   BYTE
 43950                                   
 43951                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 43952                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 43953                                  ; to include this byte.
 43954                                   
 43955 00000AAC 00                      	db	0
 43956                                  
 43957                                  ; DOSDATA:0AADh
 43958                                   
 43959                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 43960                                  
 43961                                  ;DOSDATA    ENDS
 43962                                  
 43963                                  ;============================================================================
 43964                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 43965                                  ;============================================================================
 43966                                  ; 27/04/2019 - Retro DOS 4.0
 43967                                  ; 16/07/2018 - Retro DOS 3.0
 43968                                  
 43969                                  ;DOSDATA Segment
 43970                                  
 43971                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 43972                                  
 43973                                  ;
 43974                                  ; upper case table
 43975                                  ; ---------------------------------------------------------------------------
 43976                                  UCASE_TAB:	; label   byte
 43977 00000AAD 8000                    	dw	128
 43978 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 43979 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 43980 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 43981 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 43982 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 43983 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 43984 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 43985 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 43986 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 43987 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 43988 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 43989 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 43990 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 43991 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 43992 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 43993 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 43994                                  ;
 43995                                  ; file upper case table
 43996                                  ; ---------------------------------------------------------------------------
 43997                                  FILE_UCASE_TAB:	; label  byte
 43998 00000B2F 8000                    	dw	128
 43999 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44000 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44001 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44002 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44003 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44004 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44005 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44006 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44007 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44008 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44009 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44010 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44011 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44012 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44013 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44014 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44015                                  ;
 44016                                  ; file char list
 44017                                  ; ---------------------------------------------------------------------------
 44018                                  FILE_CHAR_TAB:	; label  byte
 44019 00000BB1 1600                    	dw	22				; length
 44020 00000BB3 0100FF                  	db	1,0,255 			; include all
 44021 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44022 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44022 00000BC2 7C3C3E2B3D3B2C     
 44023                                  	;db	24 dup (?)			; reserved
 44024 00000BC9 00<rep 18h>             	times	24 db 0
 44025                                  
 44026                                  ;
 44027                                  ; collate table
 44028                                  ; ---------------------------------------------------------------------------
 44029                                  COLLATE_TAB:	; label   byte
 44030 00000BE1 0001                    	dw	256
 44031 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44032 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44033 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44034 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44035 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44036 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44037 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44038 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44039 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44040 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44041 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44042 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44043 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44044 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44045 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44046 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44047 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44048 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44049 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44050 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44051 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44052 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44053 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44054 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44055 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44056 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44057 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44058 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44059 00000CC3 E053                    	db	224,"S"
 44060 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44061 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44062 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44063 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44064                                  
 44065                                  ; ------------------------------------------------<MSKK01>----------------------
 44066                                  
 44067                                  ; DOSDATA:0CE3h
 44068                                  
 44069                                  ; 29/04/2019
 44070                                  
 44071                                  ; dbcs is not supported in DOS 3.3
 44072                                  ;		   DBCS_TAB	    CC_DBCS <>
 44073                                  ;
 44074                                  ; DBCS for DOS 4.00			   2/12/KK
 44075                                  
 44076                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44077                                  ; ------------------------------------------------<MSKK01>----------------------
 44078                                  ;ifdef	DBCS
 44079                                  ; ifdef	  JAPAN
 44080                                  ;		dw	6		; <MSKK01>
 44081                                  ;		db	081h,09fh	; <MSKK01>
 44082                                  ;		db	0e0h,0fch	; <MSKK01>
 44083                                  ;		db	0,0		; <MSKK01>
 44084                                  ;
 44085                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44086                                  ; endif
 44087                                  ; ifdef	  TAIWAN
 44088                                  ;		dw	4		; <TAIWAN>
 44089                                  ;		db	081h,0FEh	; <TAIWAN>
 44090                                  ;		db	0,0		; <TAIWAN>
 44091                                  ;
 44092                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44093                                  ; endif
 44094                                  ; ifdef   KOREA                         ; Keyl
 44095                                  ;               dw      4               ; <KOREA>
 44096                                  ;               db      0A1h,0FEh       ; <KOREA>
 44097                                  ;               db      0,0             ; <KOREA>
 44098                                  ;
 44099                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44100                                  ;  endif
 44101                                  ;else
 44102 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44103                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44104 00000CE5 00<rep 10h>             		times	16 db 0
 44105                                  
 44106                                  ;		dw	6		;  2/12/KK
 44107                                  ;		db	081h,09Fh	;  2/12/KK
 44108                                  ;		db	0E0h,0FCh	;  2/12/KK
 44109                                  ;		db	0,0		;  2/12/KK
 44110                                  ;
 44111                                  ;endif
 44112                                  ; ------------------------------------------------<MSKK01>----------------------
 44113                                  
 44114                                  ; DOSDATA:0CF5h
 44115                                  
 44116                                  ; ---------------------------------------------------------------------------
 44117                                  ;
 44118                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44119                                  ;     ENTRY: AL = Character to map
 44120                                  ;     EXIT:  AL = The converted character
 44121                                  ; Alters no registers except AL and flags.
 44122                                  ; The routine should do nothing to chars below 80H.
 44123                                  ; ---------------------------------------------------------------------------
 44124                                  ; Example:
 44125                                  
 44126                                  MAP_CASE:
 44127                                  ;Procedure MAP_CASE,FAR
 44128                                  
 44129 00000CF5 3C80                    	CMP	AL,80h
 44130 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44131 00000CF9 CB                      	RETF
 44132                                  Map1:
 44133 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44134 00000CFC 1E                      	PUSH	DS
 44135 00000CFD 53                      	PUSH	BX
 44136 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44137                                  FINISH:
 44138 00000D01 0E                      	PUSH	CS		;Move to DS
 44139 00000D02 1F                      	POP	DS
 44140 00000D03 D7                      	XLAT			;Get upper case character
 44141 00000D04 5B                      	POP	BX
 44142 00000D05 1F                      	POP	DS
 44143                                  L_RET:	
 44144 00000D06 CB                      	RETF
 44145                                  
 44146                                  ;EndProc MAP_CASE
 44147                                  
 44148                                  ; ---------------------------------------------------------------------------
 44149                                  
 44150                                  ; The variables for ECS version are moved here for the same data alignments
 44151                                  ; as IBM-DOS and MS-DOS.
 44152                                  
 44153                                  InterChar:
 44154 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44155                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44156                                  DUMMY:	; LABEL   WORD
 44157                                  InterCon:  
 44158 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44159                                  SaveCurFlg:
 44160 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44161                                  
 44162                                  ; ---------------------------------------------------------------------------
 44163                                  
 44164 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44165                                  redir_patch:
 44166 00000D0C 00                      	  db	0
 44167                                  
 44168                                  ; DOSDATA:0D0Dh
 44169                                  
 44170                                  Mark1:	; label byte
 44171                                  
 44172                                  ;IF2
 44173                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44174                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44175                                  ;	ENDIF
 44176                                  ;ENDIF
 44177                                  
 44178 00000D0D 00<rep 5h>              	  times 5 db 0
 44179                                  
 44180                                  ;############################################################################
 44181                                  ;
 44182                                  ; ** HACK FOR DOS 4.0 REDIR **
 44183                                  ; 
 44184                                  ; The redir requires the following:
 44185                                  ;
 44186                                  ;	MSVERS	offset D12H
 44187                                  ;	YRTAB	offset D14H
 44188                                  ; 	MONTAB	offset D1CH
 44189                                  ;
 44190                                  ; WARNING! WARNING!
 44191                                  ; 
 44192                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44193                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44194                                  ;
 44195                                  ; CURRENTLY MARK1 = 0D0DH
 44196                                  ;
 44197                                  ;############################################################################
 44198                                  
 44199                                  	;ORG	0D12h
 44200                                  
 44201                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44202                                  
 44203                                  	;db	6
 44204                                  	;db	20
 44205                                  
 44206                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44207                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44208 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44209 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44210                                  
 44211                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44212                                  ;
 44213                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44214                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44215                                  
 44216                                  ; Days in year
 44217                                  
 44218                                  YRTAB:   
 44219 00000D14 C8A6                    	DB	200,166			; Leap year
 44220 00000D16 C8A5                    	DB	200,165
 44221 00000D18 C8A5                    	DB	200,165
 44222 00000D1A C8A5                    	DB	200,165
 44223                                  
 44224                                  ; Days of each month
 44225                                  
 44226                                  MONTAB:        
 44227 00000D1C 1F                      	DB      31                      ; January
 44228                                  february:
 44229 00000D1D 1C                      	DB	28 			; February--reset each 
 44230                                  					; time year changes
 44231 00000D1E 1F                              DB      31                      ; March
 44232 00000D1F 1E                              DB      30                      ; April
 44233 00000D20 1F                              DB      31                      ; May
 44234 00000D21 1E                              DB      30                      ; June
 44235 00000D22 1F                              DB      31                      ; July
 44236 00000D23 1F                              DB      31                      ; August
 44237 00000D24 1E                              DB      30                      ; September
 44238 00000D25 1F                              DB      31                      ; October
 44239 00000D26 1E                              DB      30                      ; November
 44240 00000D27 1F                              DB      31                      ; December
 44241                                  
 44242                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44243                                  
 44244                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44245                                  
 44246                                  SysInitTable:
 44247                                  	;dw	SYSINITVAR
 44248 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44249 00000D2A 0000                            dw      0		; segment
 44250 00000D2C [2812]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44251 00000D2E 0000                            dw      0		; segment of pointer
 44252                                  
 44253                                  ; DOS 3.3 F.C. 6/12/86
 44254                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44255                                  
 44256                                  FastTable:				; a better name
 44257                                  FastOpenTable:
 44258 00000D30 0200                    	dw      2                       ; number of entries
 44259 00000D32 [2913]                  	dw      FastRet			; pointer to ret instr.
 44260 00000D34 0000                    	dw      0                       ; and will be modified by
 44261 00000D36 [2913]                  	dw      FastRet			; FASTxxx when loaded in
 44262 00000D38 0000                    	dw      0                       
 44263                                  
 44264                                  ; DOS 3.3 F.C. 6/12/86
 44265                                  
 44266                                  FastFlg:				; flags
 44267                                  FastOpenFlg:
 44268 00000D3A 00                      	db	0			; don't change the foll: order  
 44269                                  
 44270                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44271                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44272                                  ; or filled by FastOPen when calling FastOpen Lookup
 44273                                  
 44274                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44275                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44276                                  	;times	11 db 0
 44277 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44278                                  
 44279                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44280                                  ; when calling FastOpen Lookup
 44281                                  
 44282                                  Dir_Info_Buff:	; label  byte
 44283                                  	;db   	SIZE dir_entry dup (0)
 44284                                  	;times	32 db 0
 44285 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44286                                  
 44287                                  Next_Element_Start:
 44288 00000D66 0000                    	dw	0			; save next element start offset
 44289                                  Del_ExtCluster:
 44290 00000D68 0000                    	dw	0			; for dos_delete                       
 44291                                  
 44292                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44293                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44294                                  ; not to destroy the INT 21 stack saved for the user.
 44295                                  
 44296                                  USER_SP_2F:	; LABEL  WORD
 44297 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44298                                  
 44299                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44300                                  DOS_TEMP:	; label  word		; temporary word
 44301                                  FAKE_STACK_2F:  
 44302                                  	; dw  14 dup (0)		; 12 register temporary storage
 44303 00000D6C 0000<rep Eh>            	times 14 dw 0
 44304                                  
 44305                                  Hash_Temp: 	;label  word		; temporary word             
 44306                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44307 00000D88 0000<rep 4h>            	times 4 dw 0
 44308                                              	
 44309                                  SCAN_FLAG:	
 44310 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44311                                  DATE_FLAG:
 44312 00000D91 0000                    	dw     0                	; flag to update the date
 44313                                  
 44314                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44315 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44316                                  
 44317                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44318 00000D95 00000000                	dd     0               		; for extended error                   
 44319 00000D99 00000000                	dd     0			; for parser                           
 44320 00000D9D 00000000                	dd     0			; for critical errror                  
 44321 00000DA1 00000000                	dd     0			; for IFS                              
 44322 00000DA5 00000000                	dd     0			; for code reduction                   
 44323                                  
 44324                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44325 00000DA9 FFFFFFFF                	dd     -1                                                        
 44326                                  SC_SECTOR_SIZE:
 44327 00000DAD 0000                    	dw	0			; sector size for SC                 
 44328                                  SC_DRIVE:
 44329 00000DAF 00                      	db	0			; drive # for secondary cache        
 44330                                  CurSC_DRIVE:
 44331 00000DB0 FF                      	db	-1			; current SC drive                   
 44332                                  CurSC_SECTOR:
 44333 00000DB1 00000000                	dd	0			; current SC starting sector         
 44334                                  SC_STATUS:
 44335 00000DB5 0000                    	dw	0			; SC status word                     
 44336                                  SC_FLAG:
 44337 00000DB7 00                      	db	0			; SC flag                            
 44338                                  AbsDskErr:
 44339 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44340                                                                                            
 44341                                  NO_NAME_ID:	; label byte                                                           
 44342 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44342 00000DC3 2020               
 44343                                  
 44344                                  ;hkn; moved from TABLE segment in kstrin.asm
 44345                                  
 44346                                  KISTR001S:	; label	byte		; 2/17/KK
 44347 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44348                                  KISTR001E:	; label	byte		; 2/17/KK
 44349                                  
 44350                                  ; the nul device driver used to be part of the code. However, since the 
 44351                                  ; header is in the data, and the entry points are only given as an offset,
 44352                                  ; the strategy and interrupt entry points must also be in the data now.
 44353                                  
 44354                                  ; DOSDATA:0DC6h
 44355                                  
 44356                                  SNULDEV:
 44357                                  ;procedure snuldev,far
 44358                                  	;or	word [es:bx+3],100h
 44359                                  	; 17/12/2022
 44360                                  	;or	byte [es:bx+4],01h
 44361 00000DC6 26804F0401              	or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44362                                  	;or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44363                                  INULDEV:
 44364 00000DCB CB                      	retf				; must not be a return!
 44365                                  ;endproc snuldev
 44366                                  
 44367                                  ;M044
 44368                                  ; Second part of save area for saving last para of Windows memory
 44369                                  
 44370                                  WinoldPatch2:
 44371                                  	;db	8 dup (?)	; M044
 44372 00000DCC 00<rep 8h>              	times	8 db 0	
 44373                                  UmbSave2:
 44374                                  	;db	5 dup (?)	; M062
 44375 00000DD4 00<rep 5h>              	times	5 db 0
 44376                                  UmbSaveFlag:
 44377 00000DD9 00                      	db	0		; M062
 44378                                  
 44379                                  ; DOSDATA:0DDBh
 44380                                  
 44381                                  Mark2:	; label byte
 44382                                  
 44383                                  ;IF2
 44384                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44385                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44386                                  ;	ENDIF
 44387                                  ;ENDIF
 44388                                  
 44389                                  ;############################################################################
 44390                                  ;
 44391                                  ; ** HACK FOR DOS 4.0 REDIR **
 44392                                  ; 
 44393                                  ; The redir requires the following:
 44394                                  ;
 44395                                  ;	ERR_TABLE_21	offset DDBH
 44396                                  ;	ERR_TABLE_24	offset E5BH
 44397                                  ; 	ErrMap24	offset EABH
 44398                                  ;
 44399                                  ; WARNING! WARNING!
 44400                                  ;
 44401                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44402                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44403                                  ;
 44404                                  ; CURRENTLY MARK2 = 0DD0H
 44405                                  ;
 44406                                  ;############################################################################
 44407                                  
 44408                                  	;ORG	0DDBh
 44409                                  
 44410                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44411                                  
 44412                                  ; ---------------------------------------------------------------------------
 44413                                  ;
 44414                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44415                                  ; errors. Each entry is 4 bytes long:
 44416                                  ;
 44417                                  ;       Err#,Class,Action,Locus
 44418                                  ;
 44419                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44420                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44421                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44422                                  ;
 44423                                  ; ---------------------------------------------------------------------------
 44424                                  
 44425                                  ;ErrTab  Macro   err,class,action,locus
 44426                                  ;ifidn <locus>,<0FFh>
 44427                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44428                                  ;ELSE
 44429                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44430                                  ;ENDIF
 44431                                  ;ENDM
 44432                                  
 44433                                  ERR_TABLE_21: ; LABEL   BYTE
 44434 00000DDA 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44435 00000DDE 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44436 00000DE2 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44437 00000DE6 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44438 00000DEA 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44439 00000DEE 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44440 00000DF2 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44441 00000DF6 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44442 00000DFA 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44443 00000DFE 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44444 00000E02 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44445 00000E06 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44446 00000E0A 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44447 00000E0E 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44448 00000E12 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44449 00000E16 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44450 00000E1A 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44451 00000E1E 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44452 00000E22 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44453 00000E26 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44454 00000E2A 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44455 00000E2E 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44456 00000E32 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44457 00000E36 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44458 00000E3A 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44459 00000E3E 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44460 00000E42 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44461 00000E46 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44462                                      ; MSDOS 6.0
 44463 00000E4A 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44464 00000E4E 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44465 00000E52 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44466 00000E56 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44467                                  
 44468                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44469                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44470                                  ;		db 2,8,3,2
 44471                                  ;		db 3,8,3,2
 44472                                  ;		db 4,1,4,1
 44473                                  ;		db 5,3,3,0FFh
 44474                                  ;		db 6,7,4,1
 44475                                  ;		db 7,7,5,5
 44476                                  ;		db 8,1,4,5
 44477                                  ;		db 9,7,4,5
 44478                                  ;		db 0Ah,7,4,5
 44479                                  ;		db 0Bh,9,3,1
 44480                                  ;		db 0Ch,7,4,1
 44481                                  ;		db 0Dh,9,4,1
 44482                                  ;		db 0Fh,8,3,2
 44483                                  ;		db 10h,3,3,2
 44484                                  ;		db 11h,0Dh,3,2
 44485                                  ;		db 12h,8,3,2
 44486                                  ;		db 50h,0Ch,3,2
 44487                                  ;		db 20h,0Ah,2,2
 44488                                  ;		db 21h,0Ah,2,2
 44489                                  ;		db 54h,1,4,0FFh
 44490                                  ;		db 56h,3,3,1
 44491                                  ;		db 52h,1,4,2
 44492                                  ;		db 32h,9,3,3
 44493                                  ;		db 55h,0Ch,3,3
 44494                                  ;		db 57h,9,3,1
 44495                                  ;		db 53h,0Dh,4,1
 44496                                  ;		db 24h,1,4,5
 44497                                  ; MSDOS 6.0 (MSDOS 6.21)
 44498                                  ;		db 26h,1,4,1
 44499                                  ;		db 27h,1,4,1
 44500                                  ;		db 5Ah,0Dh,4,2
 44501                                  ; MSDOS 6.0 & MSDOS 3.3
 44502                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44503                                  
 44504                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44505                                  
 44506                                  ; ---------------------------------------------------------------------------
 44507                                  ;
 44508                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44509                                  ; errors. Each entry is 4 bytes long:
 44510                                  ;
 44511                                  ;       Err#,Class,Action,Locus
 44512                                  ;
 44513                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44514                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44515                                  ; THE END.
 44516                                  ;
 44517                                  ; ---------------------------------------------------------------------------
 44518                                  
 44519                                  ERR_TABLE_24: ; LABEL   BYTE
 44520 00000E5A 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44521 00000E5E 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44522 00000E62 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44523 00000E66 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44524 00000E6A 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44525 00000E6E 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44526 00000E72 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44527 00000E76 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44528 00000E7A 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44529 00000E7E 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44530 00000E82 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44531 00000E86 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44532 00000E8A 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44533 00000E8E 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44534 00000E92 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44535 00000E96 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44536 00000E9A 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44537 00000E9E 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44538 00000EA2 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44539 00000EA6 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44540                                  
 44541                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44542                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44543                                  ;		db 14h,4,5,1
 44544                                  ;		db 15h,5,7,0FFh
 44545                                  ;		db 16h,4,5,1
 44546                                  ;		db 17h,0Bh,4,2
 44547                                  ;		db 18h,4,5,1
 44548                                  ;		db 19h,5,1,2
 44549                                  ;		db 1Ah,0Bh,7,2
 44550                                  ;		db 1Bh,0Bh,4,2
 44551                                  ;		db 1Ch,2,7,4
 44552                                  ;		db 1Dh,5,4,0FFh
 44553                                  ;		db 1Eh,5,4,0FFh
 44554                                  ;		db 1Fh,0Dh,4,0FFh
 44555                                  ;		db 20h,0Ah,2,2
 44556                                  ;		db 21h,0Ah,2,2
 44557                                  ;		db 22h,0Bh,7,2
 44558                                  ;		db 32h,9,3,3
 44559                                  ;		db 23h,7,4,1
 44560                                  ;		db 24h,1,4,5
 44561                                  ;		db 0FFh,0Dh,5,0FFh
 44562                                  
 44563                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44564                                  
 44565                                  ; ---------------------------------------------------------------------------
 44566                                  ;
 44567                                  ; We need to map old int 24 errors and device driver errors into the new set
 44568                                  ; of errors. The following table is indexed by the new errors
 44569                                  ;
 44570                                  ; ---------------------------------------------------------------------------
 44571                                  
 44572                                  ;Public  ErrMap24
 44573                                  ErrMap24: ; Label   BYTE
 44574 00000EAA 13                          DB  error_write_protect	; 0
 44575 00000EAB 14                          DB  error_bad_unit		; 1
 44576 00000EAC 15                          DB  error_not_ready		; 2
 44577 00000EAD 16                          DB  error_bad_command	; 3
 44578 00000EAE 17                          DB  error_CRC		; 4
 44579 00000EAF 18                          DB  error_bad_length	; 5
 44580 00000EB0 19                          DB  error_seek		; 6
 44581 00000EB1 1A                          DB  error_not_DOS_disk	; 7
 44582 00000EB2 1B                          DB  error_sector_not_found	; 8
 44583 00000EB3 1C                          DB  error_out_of_paper	; 9
 44584 00000EB4 1D                          DB  error_write_fault	; A
 44585 00000EB5 1E                          DB  error_read_fault	; B
 44586 00000EB6 1F                          DB  error_gen_failure	; C
 44587 00000EB7 1F                          DB  error_gen_failure	; D  RESERVED
 44588 00000EB8 1F                          DB  error_gen_failure	; E  RESERVED
 44589 00000EB9 22                          DB  error_wrong_disk	; F
 44590                                  
 44591                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44592                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44593                                  	
 44594                                  ErrMap24End: ; LABEL   BYTE
 44595                                  
 44596                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44597                                  
 44598                                  ; ---------------------------------------------------------------------------
 44599                                  
 44600                                  ; 27/04/2019 - Retro DOS v4.0
 44601                                  
 44602                                  FIRST_BUFF_ADDR:
 44603 00000EBA 0000                    	dw	0			; first buffer address               
 44604                                  SPECIAL_VERSION:
 44605 00000EBC 0000                    	dw	0			;AN006; used by INT 2F 47H
 44606                                  FAKE_COUNT:
 44607 00000EBE 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44608                                  OLD_FIRSTCLUS:
 44609 00000FBD 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44610                                  
 44611                                  ; ---------------------------------------------------------------------------
 44612                                  
 44613                                  ;smr; moved from TABLE segment in exec.asm
 44614                                  
 44615 00000FBF 0000                    exec_init_SP: dw 0
 44616 00000FC1 0000                    exec_init_SS: dw 0
 44617 00000FC3 0000                    exec_init_IP: dw 0
 44618 00000FC5 0000                    exec_init_CS: dw 0
 44619                                  
 44620                                  exec_signature:
 44621 00000FC7 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44622                                  exec_len_mod_512:
 44623 00000FC9 0000                    	dw	0	; low 9 bits of length
 44624                                  exec_pages:
 44625 00000FCB 0000                    	dw	0	; number of 512b pages in file
 44626                                  exec_rle_count:
 44627 00000FCD 0000                    	dw	0	; count of reloc entries
 44628                                  exec_par_dir:
 44629 00000FCF 0000                    	dw	0	; number of paragraphs before image
 44630                                  exec_min_BSS:
 44631 00000FD1 0000                    	dw	0	; minimum number of para of BSS
 44632                                  exec_max_BSS:
 44633 00000FD3 0000                    	dw	0	; max number of para of BSS
 44634                                  exec_SS:
 44635 00000FD5 0000                    	dw	0	; stack of image
 44636                                  exec_SP:
 44637 00000FD7 0000                    	dw	0	; SP of image
 44638                                  exec_chksum:
 44639 00000FD9 0000                    	dw	0	; checksum  of file (ignored)
 44640                                  exec_IP:
 44641 00000FDB 0000                    	dw	0	; IP of entry
 44642                                  exec_CS:
 44643 00000FDD 0000                    	dw	0	; CS of entry
 44644                                  exec_rle_table:
 44645 00000FDF 0000                    	dw	0	; byte offset of reloc table
 44646                                  
 44647                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44648                                  
 44649                                  ;smr; eom
 44650                                  
 44651                                  ; ---------------------------------------------------------------------------
 44652                                  
 44653                                  ;SR;
 44654                                  ; WIN386 instance table for DOS
 44655                                  
 44656                                  Win386_Info:
 44657 00000FE1 0300                    	db	3, 0
 44658 00000FE3 000000000000000000-     	dd	0, 0, 0
 44658 00000FEC 000000             
 44659 00000FEF [F30F]0000              	dw	Instance_Table, 0
 44660                                  
 44661                                  Instance_Table:
 44662 00000FF3 [2200]00000200          	dw	CONTPOS, 0, 2
 44663 00000FF9 [3200]00000400          	dw	BCON, 0, 4
 44664 00000FFF [F901]00000601          	dw	CARPOS, 0, 106h
 44665 00001005 [0003]00000100          	dw	CHARCO, 0, 1
 44666 0000100B [BF0F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44667 00001011 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44668 00001017 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44669 0000101D 00000000                	dw	0, 0
 44670                                  
 44671                                  ; M001; SR;
 44672                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 44673                                  ; M001; some DOS variables. Note that the only really important variable in 
 44674                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 44675                                  ; M001; which does not need to be done in DOS 5.0. 
 44676                                  
 44677                                  Win386_DOSVars:
 44678 00001021 05                      	db	5	;Major version 5 ; M001
 44679 00001022 00                      	db	0	;Minor version 0 ; M001
 44680 00001023 [EC05]                  	dw	SAVEDS	; M001
 44681 00001025 [EA05]                  	dw	SAVEBX	; M001
 44682 00001027 [2103]                  	dw	INDOS	; M001
 44683 00001029 [3E03]                  	dw	USER_ID	; M001
 44684 0000102B [1503]                  	dw	CritPatch ; M001
 44685 0000102D [8C00]                  	dw	UMB_HEAD ; M012
 44686                                  
 44687                                  ;SR;
 44688                                  ; Flag to indicate whether WIN386 is running or not
 44689                                  
 44690 0000102F 00                      IsWin386: db	0
 44691                                  
 44692                                  ;M018
 44693                                  ; This variable contains the path to the VxD device needed for Win386
 44694                                  
 44695 00001030 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44695 00001039 2E33383600         
 44696                                  
 44697                                  ;End WIN386 support
 44698                                  
 44699                                  ; ---------------------------------------------------------------------------
 44700                                  
 44701                                  ;SR;
 44702                                  ; These variables have been added for the special lie support for device
 44703                                  ;drivers.
 44704                                  ;
 44705                                  
 44706                                  DriverLoad:	
 44707 0000103E 01                      	db	1	;initialized to do special handling
 44708                                  BiosDataPtr:
 44709 0000103F 00000000                	dd	0
 44710                                  
 44711                                  ; 27/04/2019 - Retro DOS v4.0
 44712                                  ; 04/11/2022
 44713                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 44714                                  
 44715                                  ;------------------------------------------------------------------------
 44716                                  ; Patch for Sidekick
 44717                                  ;
 44718                                  ; A documented method for finding the offset of the Errormode flag in the 
 44719                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 44720                                  ; for the following sequence of instructions.
 44721                                  ;
 44722                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 44723                                  ;
 44724                                  ; The Offset of Errormode flag is 0320h
 44725                                  ;
 44726                                  ;------------------------------------------------------------------------
 44727                                  
 44728 00001043 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 44729 00001049 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 44730 0000104B 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 44731 00001050 CD28                    	db	0CDh, 028h			 ; int  28h
 44732                                  
 44733                                  ;--------------------------------------------------------------------------
 44734                                  ; Patch for PortOfEntry - M036
 44735                                  ;
 44736                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 44737                                  ; the offset of Errormode flag. The following patch is to support them in 
 44738                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 44739                                  ;
 44740                                  ;---------------------------------------------------------------------------
 44741                                  
 44742 00001052 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 44743 00001057 7537                    	db	075h, 037h			 ; jnz	NearLabel
 44744 00001059 BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 44745                                  
 44746                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 44747                                  
 44748                                  ;--------------------------------------------------------------------------
 44749                                  
 44750                                  ;*** New FCB Implementation
 44751                                  ; This variable is used as a cache in the new FCB implementation to remember
 44752                                  ;the address of a local SFT that can be recycled for a regenerate operation
 44753                                  
 44754 0000105C 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 44755                                  
 44756                                  ;DOSDATA ENDS
 44757                                  
 44758                                  ;============================================================================
 44759                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 44760                                  ;============================================================================
 44761                                  ; 27/04/2019 - Retro DOS 4.0
 44762                                  
 44763                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 44764                                  
 44765                                  ;---------------------------------------------------------------------------
 44766                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 44767                                  ;----------------------------------------------------------------------------
 44768                                  	
 44769                                  	;db	90h
 44770                                  
 44771                                  	;EVEN
 44772                                  align 2
 44773                                  
 44774                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 44775                                  
 44776                                  DOSINTTABLE:	; LABEL	DWORD
 44777                                  
 44778                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 44779                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 44780                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 44781                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 44782                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 44783                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 44784                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 44785                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 44786                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 44787                                  	
 44788 00001060 [A753]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 44789 00001064 [1B03]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 44790 00001068 [4703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 44791 0000106C [7A05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 44792 00001070 [0106]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 44793 00001074 [F562]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 44794 00001078 [5007]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 44795 0000107C [2203]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 44796 00001080 [2103]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 44797                                  
 44798 00001084 0000                    SS_Save: dw	0		; save user's stack segment
 44799 00001086 0000                    SP_Save: dw	0		; save user's stack offset
 44800                                  
 44801                                  ;-------------------------------------------------------------------------
 44802                                  ;
 44803                                  ; LOW MEM STUB:
 44804                                  ;
 44805                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 44806                                  ; handled by DOS. This stub is installed if the user specifies that the 
 44807                                  ; DOS load in HIMEM. Each entry point does this.
 44808                                  ;
 44809                                  ; 	1. if jmp to 8 has been patched out
 44810                                  ;	   2. if A20 OFF
 44811                                  ;	      3. Enable A20
 44812                                  ;	   4. else 
 44813                                  ;	      5. just go to dos entry
 44814                                  ;	   6. endif
 44815                                  ;	7. else
 44816                                  ;	   8. just go to dos entry
 44817                                  ;	9. endif
 44818                                  ;
 44819                                  ;--------------------------------------------------------------------------
 44820                                  
 44821                                  ; 27/04/2019 - Retro DOS v4.0
 44822                                  
 44823                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 44824                                  
 44825                                  ;--------------------------------------------------------------------------
 44826                                  ;
 44827                                  ; DIVIDE BY 0 handler
 44828                                  ;
 44829                                  ;--------------------------------------------------------------------------
 44830                                  
 44831                                  ldivov:
 44832                                  	; The following jump, skipping the XMS calls will be patched to 
 44833                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44834                                  	; needed because the stub is installed even before the XMS driver
 44835                                  	; is loaded if the user specifies dos=high in the config.sys
 44836                                  i0patch:
 44837 00001088 EB03                    	jmp	short divov_cont	
 44838                                  
 44839 0000108A E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44840                                  divov_cont:
 44841 0000108D 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 44842                                  
 44843                                  ;------------------------------------------------------------------------
 44844                                  ;
 44845                                  ; INT 20 Handler
 44846                                  ;
 44847                                  ; Here we do not have to set up the stack to return here as the abort call
 44848                                  ; will return to the address after the int 21 ah=4b call. This would be the
 44849                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 44850                                  ; will be restored then.
 44851                                  ;
 44852                                  ;-------------------------------------------------------------------------
 44853                                  
 44854                                  lquit:
 44855                                  	; The following jump, skipping the XMS calls will be patched to 
 44856                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44857                                  	; needed because the stub is installed even before the XMS driver
 44858                                  	; is loaded if the user specifies dos=high in the config.sys
 44859                                  i20patch:
 44860 00001092 EB03                    	jmp	short quit_cont	
 44861                                  
 44862 00001094 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44863                                  quit_cont:
 44864 00001097 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 44865                                  
 44866                                  ;--------------------------------------------------------------------------
 44867                                  ;
 44868                                  ; INT 21 Handler
 44869                                  ;
 44870                                  ;--------------------------------------------------------------------------
 44871                                  
 44872                                  lcommand:
 44873                                  	; The following jump, skipping the XMS calls will be patched to 
 44874                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44875                                  	; needed because the stub is installed even before the XMS driver
 44876                                  	; is loaded if the user specifies dos=high in the config.sys
 44877                                  i21patch:
 44878 0000109C EB03                    	jmp	short command_cont	
 44879                                  
 44880 0000109E E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44881                                  command_cont:
 44882 000010A1 2EFF2E[6810]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 44883                                  
 44884                                  ;------------------------------------------------------------------------
 44885                                  ;
 44886                                  ; INT 25 
 44887                                  ;
 44888                                  ;----------------------------------------------------------------------------
 44889                                  
 44890                                  labsdrd:
 44891                                  	; The following jump, skipping the XMS calls will be patched to 
 44892                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44893                                  	; needed because the stub is installed even before the XMS driver
 44894                                  	; is loaded if the user specifies dos=high in the config.sys
 44895                                  i25patch:
 44896 000010A6 EB03                    	jmp	short absdrd_cont	
 44897                                  
 44898 000010A8 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44899                                  absdrd_cont:
 44900 000010AB 2EFF2E[6C10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 44901                                  
 44902                                  ;-------------------------------------------------------------------------
 44903                                  ;
 44904                                  ; INT 26
 44905                                  ;
 44906                                  ;-----------------------------------------------------------------------
 44907                                  
 44908                                  labsdwrt:
 44909                                  	; The following jump, skipping the XMS calls will be patched to 
 44910                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44911                                  	; needed because the stub is installed even before the XMS driver
 44912                                  	; is loaded if the user specifies dos=high in the config.sys
 44913                                  i26patch:
 44914 000010B0 EB03                    	jmp	short absdwrt_cont	
 44915                                  
 44916 000010B2 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44917                                  absdwrt_cont:
 44918 000010B5 2EFF2E[7010]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 44919                                  
 44920                                  ;------------------------------------------------------------------------
 44921                                  ;
 44922                                  ; INT 27
 44923                                  ;
 44924                                  ;-----------------------------------------------------------------------
 44925                                  
 44926                                  lstay_resident:
 44927                                  	; The following jump, skipping the XMS calls will be patched to 
 44928                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44929                                  	; needed because the stub is installed even before the XMS driver
 44930                                  	; is loaded if the user specifies dos=high in the config.sys
 44931                                  i27patch:
 44932 000010BA EB03                    	jmp	short sr_cont	
 44933                                  
 44934 000010BC E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44935                                  sr_cont:
 44936 000010BF 2EFF2E[7410]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 44937                                  
 44938                                  ;-----------------------------------------------------------------------------
 44939                                  ;
 44940                                  ; INT 2f
 44941                                  ;
 44942                                  ;-------------------------------------------------------------------------
 44943                                  
 44944                                  lint2f:
 44945                                  	; The following jump, skipping the XMS calls will be patched to 
 44946                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44947                                  	; needed because the stub is installed even before the XMS driver
 44948                                  	; is loaded if the user specifies dos=high in the config.sys
 44949                                  i2fpatch:
 44950 000010C4 EB03                    	jmp	short int2f_cont	
 44951                                  
 44952 000010C6 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44953                                  int2f_cont:
 44954 000010C9 2EFF2E[7810]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 44955                                  
 44956                                  ;-----------------------------------------------------------------------------
 44957                                  ;
 44958                                  ; CPM entry
 44959                                  ;
 44960                                  ;------------------------------------------------------------------------
 44961                                  
 44962                                  lcall_entry:
 44963                                  	; The following jump, skipping the XMS calls will be patched to 
 44964                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44965                                  	; needed because the stub is installed even before the XMS driver
 44966                                  	; is loaded if the user specifies dos=high in the config.sys
 44967                                  cpmpatch:
 44968 000010CE EB03                    	jmp	short callentry_cont	
 44969                                  
 44970 000010D0 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44971                                  callentry_cont:
 44972 000010D3 2EFF2E[7C10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 44973                                  
 44974                                  ;--------------------------------------------------------------------------
 44975                                  
 44976                                  lirett:
 44977 000010D8 CF                      	iret
 44978                                  
 44979                                  ;---------------------------------------------------------------------------
 44980                                  ;
 44981                                  ; LowIntXX:
 44982                                  ;
 44983                                  ; Interrupts from DOS that pass control to a user program must be done from
 44984                                  ; low memory, as the user program may change the state of the A20 line or
 44985                                  ; they may require that the A20 line be OFF. The following piece of code is
 44986                                  ; far call'd from the following places in DOS:
 44987                                  ;
 44988                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 44989                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 44990                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 44991                                  ;
 44992                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 44993                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 44994                                  ; before doing the ints and then do a far junp back into DOS.
 44995                                  ;
 44996                                  ;---------------------------------------------------------------------------
 44997                                  
 44998 000010D9 00000000                DosRetAddr23:	dd	0
 44999 000010DD 00000000                DosRetAddr24:	dd	0
 45000 000010E1 00000000                DosRetAddr28:	dd	0
 45001                                  
 45002                                  	; Execute int 23h from low memory
 45003                                  LowInt23:
 45004                                  					; save the return address that is on
 45005                                  					; the stack
 45006 000010E5 2E8F06[D910]            	pop	word [cs:DosRetAddr23]
 45007 000010EA 2E8F06[DB10]            	pop	word [cs:DosRetAddr23+2]
 45008                                  
 45009 000010EF CD23                    	int	23h			; ctrl C
 45010                                  					; turn on A20 it has been turned OFF
 45011                                  					; by int 28/23/24 handler.
 45012                                  
 45013 000010F1 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45014                                  
 45015 000010F4 2EFF2E[D910]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45016                                  
 45017                                  
 45018                                  	; Execute int 24h from low memory
 45019                                  LowInt24:
 45020                                  					; save the return address that is on
 45021                                  					; the stack
 45022 000010F9 2E8F06[DD10]            	pop	word [cs:DosRetAddr24]
 45023 000010FE 2E8F06[DF10]            	pop	word [cs:DosRetAddr24+2]
 45024                                  
 45025 00001103 CD24                    	int	24h			; crit error
 45026                                  					; turn on A20 it has been turned OFF
 45027                                  					; by int 28/23/24 handler.
 45028                                  
 45029 00001105 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45030                                  
 45031 00001108 2EFF2E[DD10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45032                                  
 45033                                  
 45034                                   
 45035                                  	; Execute int 28h from low memory
 45036                                  LowInt28:
 45037 0000110D CD28                    	int	28h			; idle int
 45038                                  					; turn on A20 it has been turned OFF
 45039                                  					; by int 28/23/24 handler.
 45040                                  
 45041 0000110F E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45042                                  
 45043 00001112 CB                      	retf
 45044                                  
 45045                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45046                                  
 45047                                  ;-------------------------------------------------------------------------
 45048                                  ;
 45049                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45050                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45051                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45052                                  ; This is so because exepac'd programs rely on address wrap.
 45053                                  ;
 45054                                  ;------------------------------------------------------------------------- 
 45055                                  
 45056                                  disa20_xfer:
 45057 00001113 E83F00                  	call	XMMDisableA20		; disable A20
 45058                                  
 45059                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45060                                  
 45061                                  	; DS:SI points to entry point
 45062                                  	; AX:DI points to initial stack
 45063                                  	; DX has PDB pointer
 45064                                  	; BX has initial AX value
 45065                                  
 45066 00001116 FA                      	cli
 45067 00001117 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45068                                  
 45069 0000111D 8ED0                    	mov	SS,AX			; set up user's stack
 45070 0000111F 89FC                    	mov	SP,DI			; and SP
 45071 00001121 FB                      	sti
 45072                                  
 45073 00001122 1E                      	push	DS			; fake long call to entry
 45074 00001123 56                      	push	SI
 45075 00001124 8EC2                    	mov	ES,DX			; set up proper seg registers
 45076 00001126 8EDA                    	mov	DS,DX
 45077 00001128 89D8                    	mov	AX,BX			; set up proper AX
 45078 0000112A CB                      	retf
 45079                                  
 45080                                  ;-------------------------------------------------------------------------
 45081                                  ;
 45082                                  ; M003:
 45083                                  ;
 45084                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45085                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45086                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45087                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45088                                  ; more info.	
 45089                                  ;
 45090                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45091                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45092                                  ; stack to avoid additional stack overhead for the user.
 45093                                  ;
 45094                                  ; -------------------------------------------------------------------------
 45095                                  
 45096                                  disa20_iret:
 45097 0000112B E82700                  	call	XMMDisableA20
 45098 0000112E FE0E[2103]              	dec	byte [INDOS]
 45099 00001132 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45100 00001136 8B26[8405]              	mov	SP,[USER_SP]
 45101 0000113A 89E5                    	mov	BP,SP
 45102                                  	;mov	[BP+user_env.user_AX],AL
 45103 0000113C 884600                  	mov	[bp],al
 45104 0000113F A1[F205]                	mov	AX,[NSP]
 45105 00001142 A3[8405]                	mov	[USER_SP],AX
 45106 00001145 A1[F005]                	mov	AX,[NSS]
 45107 00001148 A3[8605]                	mov	[USER_SS],AX
 45108                                  
 45109 0000114B 58                      	pop	AX			; restore user regs
 45110 0000114C 5B                      	pop	BX
 45111 0000114D 59                      	pop	CX
 45112 0000114E 5A                      	pop	DX
 45113 0000114F 5E                      	pop	SI
 45114 00001150 5F                      	pop	DI
 45115 00001151 5D                      	pop	BP
 45116 00001152 1F                      	pop	DS
 45117 00001153 07                      	pop	ES
 45118 00001154 CF                      	iret
 45119                                  
 45120                                  ;**************************************************************************
 45121                                  ;***	XMMDisableA20 - switch 20th address line			      
 45122                                  ;									      
 45123                                  ;	This routine is used to disable the 20th address line in 	      
 45124                                  ;	the system using XMM calls.					      
 45125                                  ;									      
 45126                                  ;	ENTRY	none		;ds = _DATA				      
 45127                                  ;	EXIT	A20 line disabled					      
 45128                                  ;	USES	NOTHING					      
 45129                                  ;									      
 45130                                  ;**************************************************************************
 45131                                  
 45132                                  XMMDisableA20:
 45133 00001155 53                      	push	bx
 45134 00001156 50                      	push	ax
 45135                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45136 00001157 B406                    	mov	ah,6
 45137 00001159 2EFF1E[6111]            	call	far [cs:XMMcontrol]
 45138 0000115E 58                      	pop	ax
 45139 0000115F 5B                      	pop	bx
 45140 00001160 C3                      	retn
 45141                                  
 45142                                  ; The entry point in the BIOS XMS driver is defined here.
 45143                                  
 45144                                  XMMcontrol:
 45145 00001161 00000000                	dd	0
 45146                                  
 45147                                  ;--------------------------------------------------------------------------
 45148                                  ;
 45149                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45150                                  ;									      
 45151                                  ;	This routine is used to query the A20 state in		 	      
 45152                                  ;	the system using XMM calls.					      
 45153                                  ;									      
 45154                                  ;	ENTRY: none		
 45155                                  ;
 45156                                  ;	EXIT : A20 will be ON
 45157                                  ;		
 45158                                  ; 	USES : NONE								      
 45159                                  ;									      
 45160                                  ;--------------------------------------------------------------------------
 45161                                  
 45162                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45163 00001165 8000                    	dw	00080h
 45164 00001167 0000                    	dw	00000h
 45165                                  
 45166                                  HighMemory:	; label dword
 45167 00001169 9000                    	dw	00090h			; Set equal to FFFF:0090
 45168 0000116B FFFF                    	dw	0FFFFh
 45169                                  
 45170                                  EnsureA20ON:
 45171 0000116D 9C                      	pushf
 45172 0000116E 1E                      	push    ds
 45173 0000116F 06                      	push	es
 45174 00001170 51                      	push	cx
 45175 00001171 56                      	push	si
 45176 00001172 57                      	push	di
 45177                                  
 45178 00001173 2EC536[6511]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45179 00001178 2EC43E[6911]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45180 0000117D B90400                  	mov	cx,4
 45181 00001180 FC                      	cld
 45182 00001181 F3A7                    	repe    cmpsw
 45183                                  
 45184 00001183 7407                    	jz	short EA20_OFF
 45185                                  EA20_RET:
 45186 00001185 5F                      	pop	di
 45187 00001186 5E                      	pop	si
 45188 00001187 59                      	pop	cx
 45189 00001188 07                      	pop	es
 45190 00001189 1F                      	pop	ds
 45191 0000118A 9D                      	popf
 45192 0000118B C3                      	retn
 45193                                  
 45194                                  EA20_OFF:
 45195                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45196                                  	; NOTE: ints are disabled at this point.
 45197                                  
 45198 0000118C 53                      	push	bx
 45199 0000118D 50                      	push	ax
 45200                                  
 45201 0000118E 8CD0                    	mov	ax,ss			; save user's stack pointer
 45202 00001190 2EA3[8410]              	mov	[cs:SS_Save],ax
 45203 00001194 2E8926[8610]            	mov	[cs:SP_Save],sp
 45204 00001199 8CC8                    	mov	ax,cs
 45205 0000119B 8ED0                    	mov	ss,ax
 45206 0000119D BC[A007]                	mov	sp,AUXSTACK
 45207                                  					; ss:sp -> DOSDATA:AuxStack
 45208                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45209 000011A0 B405                    	mov	ah,5
 45210 000011A2 2EFF1E[6111]            	call	far [cs:XMMcontrol]
 45211 000011A7 09C0                    	or	ax,ax
 45212 000011A9 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45213                                  
 45214 000011AB 2EA1[8410]              	mov	ax,[cs:SS_Save]		; restore user stack
 45215 000011AF 8ED0                    	mov	ss,ax
 45216 000011B1 2E8B26[8610]            	mov	sp,[cs:SP_Save]
 45217                                  
 45218 000011B6 58                      	pop	ax
 45219 000011B7 5B                      	pop	bx
 45220                                  
 45221 000011B8 EBCB                    	jmp	short EA20_RET
 45222                                  
 45223                                  XMMerror:				; M006 - Start
 45224 000011BA B40F                    	mov	ah,0Fh			; get video mode
 45225 000011BC CD10                    	int	10h
 45226 000011BE 3C07                    	cmp	al,7			; Q: are we an MDA
 45227 000011C0 7406                    	je	short XMMcont			; Y: do not change mode
 45228 000011C2 30E4                    	xor	ah,ah ; 0			; set video mode
 45229 000011C4 B002                    	mov	al,02h			; 80 X 25 text
 45230 000011C6 CD10                    	int	10h
 45231                                  XMMcont:
 45232 000011C8 B405                    	mov	ah,05h			; set display page
 45233 000011CA 30C0                    	xor	al,al			; page 0
 45234 000011CC CD10                    	int	10h
 45235                                  	
 45236 000011CE BE[B612]                	mov	si,XMMERRMSG
 45237 000011D1 0E                      	push	cs
 45238 000011D2 1F                      	pop	ds
 45239 000011D3 FC                      	cld				; clear direction flag
 45240                                  XMMprnt:
 45241 000011D4 AC                      	lodsb
 45242 000011D5 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45243 000011D7 7409                    	jz	short XMMStall		; function 0Eh	
 45244 000011D9 B40E                    	mov	ah,0Eh
 45245 000011DB BB0700                  	mov	bx,7
 45246 000011DE CD10                    	int	10h
 45247 000011E0 EBF2                    	jmp	short XMMprnt
 45248                                  
 45249                                  XMMStall:
 45250 000011E2 FB                      	sti				; allow the user to warm boot
 45251 000011E3 EBFD                    	jmp	short XMMStall		; M006 - End
 45252                                  
 45253                                  ;---------------------------------------------------------------------------
 45254                                  
 45255                                  ; 27/04/2019 - Retro DOS v4.0
 45256                                  
 45257                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45258                                  ALTAH	equ 0Ch
 45259                                  
 45260                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45261                                  ;table was different for this. Segments will be patched in at init time.
 45262                                  
 45263                                  OldInstanceJunk:
 45264 000011E5 7000                    	dw	70h	;segment of BIOS
 45265 000011E7 0000                    	dw	0	;indicate stacks in SYSINIT area
 45266 000011E9 0600                    	dw	6	;5 instance items
 45267                                  
 45268                                  	;dw	0,offset dosdata:contpos, 2
 45269                                  	;dw	0,offset dosdata:bcon, 4
 45270                                  	;dw	0,offset dosdata:carpos,106h
 45271                                  	;dw	0,offset dosdata:charco, 1
 45272                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45273                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45274                                  
 45275 000011EB 0000[2200]0200          	dw	0,CONTPOS,2
 45276 000011F1 0000[3200]0400          	dw	0,BCON,4
 45277 000011F7 0000[F901]0601          	dw	0,CARPOS,106h
 45278 000011FD 0000[0003]0100          	dw	0,CHARCO,1
 45279 00001203 0000[BF0F]2200          	dw	0,exec_init_SP,34
 45280 00001209 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45281                                  
 45282                                  ;---------------------------------------------------------------------------
 45283                                  
 45284                                  ; M021-
 45285                                  ;
 45286                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45287                                  ; 	takes control of the HMA. When running, this word is a reliable
 45288                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45289                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45290                                  
 45291                                  DosHasHMA:
 45292 0000120F 00                      	db	0
 45293                                  FixExePatch:
 45294 00001210 0000                    	dw	0		; M012
 45295                                  RationalPatchPtr:
 45296 00001212 0000                    	dw	0		; M012
 45297                                  
 45298                                  ; End M021
 45299                                  
 45300                                  ;---------------------------------------------------------------------------
 45301                                  
 45302                                  ; M020 Begin
 45303                                  
 45304                                  RatBugCode:	; proc	far
 45305 00001214 51                      	push	cx
 45306 00001215 8B0E1000                	mov	cx,[10h]
 45307                                  rbc_loop:
 45308                                  	;loop	$
 45309 00001219 E2FE                    	loop	rbc_loop
 45310 0000121B 59                      	pop	cx
 45311 0000121C CB                      	retf
 45312                                  		
 45313                                  ; M020 End
 45314                                  
 45315                                  ;---------------------------------------------------------------------------
 45316                                  	
 45317                                  UmbSave1:
 45318                                  	;db	11 dup (?)	; M023
 45319 0000121D 00<rep Bh>              	times	11 db 0	
 45320                                  
 45321                                  ; DOSDATA:122Ah
 45322                                  
 45323                                  Mark3:	; label byte
 45324                                  
 45325                                  ;IF2
 45326                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45327                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45328                                  ;	ENDIF
 45329                                  ;ENDIF
 45330                                  
 45331                                  ;############################################################################
 45332                                  ;
 45333                                  ; ** HACK FOR DOS 4.0 REDIR **
 45334                                  ;
 45335                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45336                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45337                                  ; COUNTRY_CDPG if it can. 
 45338                                  ;
 45339                                  ; MARK3 SHOULD NOT BE > 122AH 
 45340                                  ;
 45341                                  ; As of 9/6/90, this area is FULL!
 45342                                  ;
 45343                                  ;############################################################################
 45344                                   
 45345                                  	;ORG	0122Ah
 45346                                  
 45347                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45348                                  
 45349                                  ; The following table is used for DOS 3.3
 45350                                  ;DOS country and code page information is defined here for DOS 3.3.
 45351                                  ;The initial value for ccDosCountry is 1 (USA).
 45352                                  ;The initial value for ccDosCodepage is 850.
 45353                                  
 45354                                  ; country and code page information
 45355                                  ; ---------------------------------------------------------------------------
 45356                                  COUNTRY_CDPG:	; label  byte
 45357 00001228 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45358 00001230 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45358 00001239 53595300           
 45359                                  	;db   51 dup (?)
 45360 0000123D 00<rep 33h>             	times 51 db 0
 45361                                  ; ------------------------------------------------<MSKK01>-------------------
 45362                                  ;ifdef	DBCS
 45363                                  ;  ifdef JAPAN
 45364                                  ;	dw   932			; system code page id (JAPAN)
 45365                                  ;  endif
 45366                                  ;  ifdef TAIWAN
 45367                                  ;	dw   938			; system code page id (TAIWAN)
 45368                                  ;  endif
 45369                                  ;  ifdef KOREA
 45370                                  ;	dw   934			; system code page id (KOREA IBM)
 45371                                  ;  endif
 45372                                  ;else
 45373 00001270 B501                    	dw   437			; system code page id
 45374                                  ;endif
 45375                                  ; ------------------------------------------------<MSKK01>-------------------
 45376 00001272 0600                    	dw   6				; number of entries
 45377 00001274 02                      	db   SetUcase  ; 2		; Ucase type
 45378 00001275 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45379 00001277 0000                    	dw   0				; segment of poiter
 45380 00001279 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45381 0000127A [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45382 0000127C 0000                    	dw   0				; segment of poiter
 45383 0000127E 05                      	db   SetFileList ; 5		; valid file chars type
 45384 0000127F [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45385 00001281 0000                    	dw   0				; segment of poiter
 45386 00001283 06                      	db   SetCollate	; 6		; collate type
 45387 00001284 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45388 00001286 0000                    	dw   0				; segment of poiter
 45389 00001288 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45390 00001289 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45391 0000128B 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45392 0000128D 01                      	db   SetCountryInfo  ; 1	; country info type
 45393 0000128E 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45394                                  ; ------------------------------------------------<MSKK01>-------------------
 45395                                  ;ifdef	DBCS
 45396                                  ;	...... 
 45397                                  ;else
 45398 00001290 0100                    	dw   1				; USA country id
 45399 00001292 B501                    	dw   437			; USA system code page id
 45400 00001294 0000                    	dw   0 				; date format
 45401 00001296 2400000000              	db   '$',0,0,0,0		; currency symbol
 45402 0000129B 2C00                    	db   ',',0			; thousand separator
 45403 0000129D 2E00                    	db   '.',0			; decimal separator
 45404 0000129F 2D00                    	db   '-',0			; date separator
 45405 000012A1 3A00                    	db   ':',0			; time separator
 45406 000012A3 00                      	db   0				; currency format flag
 45407 000012A4 02                      	db   2				; # of digits in currency
 45408 000012A5 00                      	db   0 				; time format
 45409 000012A6 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45410 000012A8 0000                    	dw   0				; segment of entry point
 45411 000012AA 2C00                    	db   ',',0			; data list separator
 45412 000012AC 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45412 000012B5 00                 
 45413                                  ;endif
 45414                                  ; ------------------------------------------------<MSKK01>-------------------
 45415                                  
 45416                                  ; 27/04/2019 - Retro DOS v4.0
 45417                                  
 45418                                  ;include msdos.cl2			; XMMERRMSG
 45419                                  
 45420                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45421                                  
 45422                                  XMMERRMSG:
 45423 000012B6 0D0A                    	db	0Dh,0Ah
 45424 000012B8 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45424 000012C1 617265204572726F72-
 45424 000012CA 0D0A24             
 45425                                  
 45426                                  ;DOSDATA ends
 45427                                  
 45428                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45429                                  
 45430                                  ;============================================================================
 45431                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45432                                  ;============================================================================
 45433                                  ; 27/04/2019 - Retro DOS 4.0
 45434                                  
 45435                                  ;DOSDATA Segment
 45436                                  
 45437                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45438                                  
 45439                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45440                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45441                                  
 45442                                  ; first and second DOS patches
 45443                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45444                                  ;
 45445                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45446                                  ;	DVRDLP:
 45447                                  ;	DVWRTLP:
 45448                                  ;
 45449                                  ;
 45450                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45451                                  ;	lds	si,si+7 				  ; sf_devptr
 45452                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45453                                  
 45454 000012CD 36C536                  DOSP1_ID:	db	036h,0C5h,036h
 45455 000012D0 3605C57407E8            DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45456                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45457                                  
 45458 000012D6 9090                    		db	90h, 90h
 45459                                  
 45460 000012D8 36C536                  DOSP12_ID:	db	036h,0C5h,036h
 45461 000012DB 3605C57407E8            DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45462                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45463                                  
 45464                                  ; DOSDATA:12E3h
 45465                                  
 45466                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45467                                  ;
 45468                                  ; Code in disk.asm, 1 location
 45469                                  ;	GETBUF:
 45470                                  ;
 45471                                  ; 051h	push	cx	<- begin special int28 mode
 45472                                  ;	push	es
 45473                                  ;	push	di
 45474                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45475                                  ;	call	????	; $STD_CON_STRING_INPUT
 45476                                  ;	pop	di
 45477                                  ;	pop	es
 45478                                  ; 059h	pop	cx	<- end special int28 mode
 45479                                  
 45480 000012E1 510657BA                DOSP3_ID:	db	051h,006h,057h,0BAh
 45481 000012E5 2902E8                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45482                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45483 000012E8 9AE35F07                		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45484 000012EC 59                      DOSP4_ID:	db	059h			; pop cx
 45485                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45486                                  	
 45487                                  ; DOSDATA:12EFh
 45488                                  
 45489                                  ; Fifth DOS patch - System call 40h (Write) to console
 45490                                  ;
 45491                                  ; Code in disk.asm, 1 location
 45492                                  ;
 45493                                  ;		push	cx
 45494                                  ;      WRCONLP: lodsb
 45495                                  ;		cmp	al,1Ah
 45496                                  ;		jz	????
 45497                                  ;		call	????	<- "simulate" int28 event
 45498                                  ;		loop	WRCONLP
 45499                                  ;      CONEOF:	pop	ax
 45500                                  
 45501 000012ED 51                      DOSP5_ID:	db	051h			; push cx
 45502 000012EE AC3C1A7405              		db	0ACh,03Ch,01Ah,074h,005h
 45503 000012F3 E8                      		db	0E8h			; call
 45504                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45505                                  
 45506                                  ; DOSDATA:12F6h
 45507                                  
 45508                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45509                                  ;
 45510                                  ; Code in disp.asm, 1 location
 45511                                  ;
 45512                                  ;
 45513                                  ;	mov [SaveDS],ds
 45514                                  ;	mov [SaveBX],bx
 45515                                  ;	mov bx,cs
 45516                                  ;	mov ds,bx
 45517                                  ;	inc [indos]
 45518                                  ;	xor ax,ax
 45519                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45520                                  
 45521 000012F4 2E8C1E                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45522 000012F7 7E05                    DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45523 000012F9 2E891E                  		db	02Eh,089h,01Eh
 45524 000012FC 7C05                    DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45525 000012FE 8CCB                    		db	08Ch,0CBh		; mov bx,cs
 45526 00001300 8EDB                    		db	08Eh,0DBh		; mov ds,bx
 45527 00001302 FE06                    		db	0FEh,006h
 45528 00001304 CF02                    DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45529 00001306 33C0                    		db	033h,0C0h		; xor ax,ax
 45530                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45531                                  
 45532                                  ; DOSDATA:130Ah
 45533                                  
 45534                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45535                                  ;
 45536                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45537                                  ;
 45538                                  ;
 45539                                  ;
 45540                                  ;	push	ax
 45541                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45542                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45543                                  ;	pop	ax
 45544                                  ;	jz	????
 45545                                  
 45546 00001308 50                      DOSP8_ID:	db	050h			; push ax
 45547 00001309 36A1                    		db	036h,0A1h
 45548 0000130B EA02                    DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45549 0000130D 263B45                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45550                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45551 00001310 2F58                    		db	02Fh,058h		; pop  ax
 45552                                  
 45553                                  ; DOSDATA:1314h
 45554                                  
 45555                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45556                                  ;
 45557                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45558                                  ;   a yeild when a character is not ready to be read.
 45559                                  ;
 45560                                  ; Code in disk.asm, 3 locations
 45561                                  ;
 45562                                  ;   DVRDRAW:
 45563                                  ;	    PUSH    ES
 45564                                  ;	    POP     DS
 45565                                  ;   ReadRawRetry:				<- Patch 10
 45566                                  ;	    MOV     BX,DI
 45567                                  ;	    XOR     AX,AX			<- Reenter #2
 45568                                  ;	    MOV     DX,AX
 45569                                  ;	    call    SETREAD
 45570                                  ;	    PUSH    DS				<- Reenter #1
 45571                                  ;	    LDS     SI,[THISSFT]
 45572                                  ;	    call    DEVIOCALL
 45573                                  ;	    MOV     DX,DI
 45574                                  ;	    MOV     AH,86H
 45575                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45576                                  ;	    TEST    DI,STERR
 45577                                  ;	    JZ	    CRDROK
 45578                                  ;	    call    CHARHARD
 45579                                  ;	    MOV     DI,DX
 45580                                  ;	    OR	    AL,AL
 45581                                  ;	    JZ	    CRDROK
 45582                                  ;	    CMP     AL,3
 45583                                  ;	    JZ	    CRDFERR
 45584                                  ;	    POP     DS
 45585                                  ;	    JMP     ReadRawRetry
 45586                                  ;
 45587                                  ;   CRDFERR:
 45588                                  ;	    POP     DI				<- Patch 11
 45589                                  ;   DEVIOFERR:
 45590                                  ;	    LES     DI,[THISSFT]
 45591                                  ;	    jmp     SET_ACC_ERR_DS
 45592                                  ;
 45593                                  ;   CRDROK:
 45594                                  ;	    POP     DI				<- Patch 12
 45595                                  ;	    MOV     DI,DX
 45596                                  ;	    ADD     DI,[CALLSCNT]
 45597                                  ;	    JMP     SHORT ENDRDDEVJ3
 45598                                  
 45599 00001312 061F                    DOSP10_ID:		db	006H,01FH
 45600                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45601 00001314 8BDF                    DOSP10_LOC:		db	08BH,0DFH
 45602                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45603 00001316 33C08BD0E8              			db	033H,0C0H,08BH,0D0H,0E8H
 45604                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45605 0000131B DF0E                    			db	0DFH,00EH
 45606                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45607 0000131D 1E36C5363605E8AF0E      			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45608 00001326 8BD7B486368B3E          			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45609                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45610 0000132D 0903                    			db	009H,003H
 45611 0000132F F7C700807419E84717      			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45612 00001338 8BFA0AC074103C0374-     			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45612 00001341 03                 
 45613 00001342 1FEBCF                  			db	01FH,0EBH,0CFH
 45614                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45615 00001345 5F                      			db	05FH
 45616                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45617 00001346 36C43E3605E9A104        			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45618                                  
 45619                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45620 0000134E 5F8BFA                  			db	05FH,08BH,0FAH
 45621                                  ; DOSDATA:1353h
 45622                                  
 45623                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45624                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45625                                  ;
 45626                                  ;	    Sets focus to current VM so user can see fatal message.
 45627                                  ;
 45628                                  ;
 45629                                  ;	l0: lodsb		<- Setfocus here
 45630                                  ;	    cmp al, '$'
 45631                                  ;	    je l1
 45632                                  ;	    mov bl, 7
 45633                                  ;	    mov ah, 0Eh
 45634                                  ;	    int 10h
 45635                                  ;	    jmp l0
 45636                                  ;	l1: jmp $
 45637                                  
 45638 00001351 AC                      DOSP13_ID:	db	0ACh			; l0: lodsb
 45639 00001352 3C24                    		db	03Ch,024h		;     cmp al, '$'
 45640 00001354 7408                    		db	074h,008h		;     je l1
 45641 00001356 B307                    		db	0B3h,007h		;     mov bl, 7
 45642 00001358 B40E                    		db	0B4h,00Eh		;     mov ah, 0Eh
 45643 0000135A CD10                    		db	0CDh,010h		;     int 10h
 45644 0000135C EBF3                    		db	0EBh,0F3h		;     jmp l0
 45645 0000135E EBFE                    		db	0EBh,0FEh		; l1: jmp $
 45646                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45647                                  
 45648                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45649                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45650                                  
 45651                                  ; 06/12/2022
 45652                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45653                                  
 45654                                  ; DOSDATA ends
 45655                                  
 45656                                  ; 05/11/2022
 45657                                  ;----------------------------------------------------------------------------
 45658                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45659                                  ;----------------------------------------------------------------------------
 45660                                    
 45661                                  %if 0
 45662                                  
 45663                                  ;============================================================================
 45664                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45665                                  ;============================================================================
 45666                                  ; 27/04/2019 - Retro DOS 4.0
 45667                                  
 45668                                  ;mpatch.asm -- holds data patch location for callouts 
 45669                                  ; -- allocate cluster in rom.asm
 45670                                  ;
 45671                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45672                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45673                                  ; cluster allocation, however it can be expanded to be used by other
 45674                                  ; patches. This is important since we have an easy-access pointer to
 45675                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45676                                  ; only patch out a far call/retf, so any space after that could be
 45677                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45678                                  ; to call out here.
 45679                                  ;
 45680                                  ; Currently, we allocate only the minimum space required for the 6
 45681                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45682                                  ; to reserve space here if your new data will be position dependent
 45683                                  ; and would prohibit growing of this table.
 45684                                  ;       
 45685                                  ;history	-	created 8-7-92 by scottq
 45686                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45687                                  ;
 45688                                  ;Exported Functions
 45689                                  ;==================
 45690                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45691                                  
 45692                                  ; DosData Segment
 45693                                  
 45694                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45695                                  
 45696                                  ; ---------------------------------------------------------------------------
 45697                                  
 45698                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 45699                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 45700                                  ; greater). Added to this file because it needed to be somewhere and is
 45701                                  ; 'patch' related.
 45702                                  
 45703                                  Rational386PatchPtr:
 45704                                  	dw	0	; points to patch routine or RET instr.
 45705                                  ; ---------------------------------------------------------------------------
 45706                                  
 45707                                  MagicPatch:
 45708                                  ;MagicPatch proc far
 45709                                          retf            ;default is to just return to allocate
 45710                                          nop             ;however, this code will be patched
 45711                                          nop             ;by magicdrv.sys to
 45712                                          nop             ; call far ?:?     
 45713                                          nop             ; retf or perhaps just jmp far
 45714                                          nop             ;retf/nop take one byte, so we need six instructions
 45715                                                          ;for 6 byte patch
 45716                                  ;MagicPatch endp
 45717                                  
 45718                                  ; ---------------------------------------------------------------------------
 45719                                  
 45720                                  ;DosData Ends
 45721                                  
 45722                                  ; DOSDATA:136Ah
 45723                                  
 45724                                  ;----------------------------------------------------------------------------
 45725                                  
 45726                                  ;DOSDATALAST SEGMENT
 45727                                  
 45728                                  ; 29/04/2019 - Retro DOS v4.0
 45729                                  
 45730                                  ;----------------------------------------------------------------------------
 45731                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 45732                                  
 45733                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 45734                                  
 45735                                  ;align 16
 45736                                  
 45737                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 45738                                  
 45739                                  ;----------------------------------------------------------------------------
 45740                                  
 45741                                  %endif	; 05/11/2022
 45742                                  
 45743                                  ; 05/12/2022
 45744                                  ;MSDAT001E:	; label byte
 45745                                  
 45746                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45747                                  DOSDATAEND equ $
 45748                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 45749                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 45750                                  
 45751                                  ;DOSDATALAST ENDS
 45752                                  
 45753                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 45754                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 45755                                  ;============================================================================
 45756                                  ;	END
 45757                                  ;============================================================================
 45758                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 45759                                  ; -----------------------------
 45760                                  ; MAY 2019, ISTANBUL - TURKIYE.
