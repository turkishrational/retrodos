seg000:7C00 ;
seg000:7C00 ; +-------------------------------------------------------------------------+
seg000:7C00 ; |	  This file has	been generated by The Interactive Disassembler (IDA)	|
seg000:7C00 ; |		  Copyright (c)	2013 Hex-Rays, <support@hex-rays.com>		|
seg000:7C00 ; |		      	     Licensed to: Freeware version			|
seg000:7C00 ; +-------------------------------------------------------------------------+
seg000:7C00 ;
seg000:7C00 ; Input MD5	  : 152B15A39E1CD6DC1E39F8C37D400152
seg000:7C00 ; Input CRC32 : 954ECAAF
seg000:7C00
seg000:7C00 ; ---------------------------------------------------------------------------
seg000:7C00 ; File Name	  : C:\Users\Erdoðan\Desktop\msdos5bs.bin
seg000:7C00 ; Format	  : Binary file
seg000:7C00 ; Base Address: 0000h Range: 0000h - 0200h Loaded length: 0200h
seg000:7C00
seg000:7C00		    .386
seg000:7C00		    .model flat
seg000:7C00
seg000:7C00 ; ===========================================================================
seg000:7C00
seg000:7C00 ; Segment type: Pure code
seg000:7C00 seg000	    segment byte public	'CODE' use16
seg000:7C00		    assume cs:seg000
seg000:7C00		    ;org 7C00h
seg000:7C00		    assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
seg000:7C00		    jmp	    short MAIN
seg000:7C02 ; ---------------------------------------------------------------------------
seg000:7C02		    nop
seg000:7C02 ; ---------------------------------------------------------------------------
seg000:7C03 OS		    db 'MSDOS'
seg000:7C08 OsVersion	    db '5.0'
seg000:7C0B BytesPerSector  dw 512		    ; ...
seg000:7C0D SecsPerClust    db 1		    ; ...
seg000:7C0E ReservedSecs    dw 1		    ; ...
seg000:7C10 NumFats	    db 2		    ; ...
seg000:7C11 NumDirEntries   dw 224		    ; ...
seg000:7C13 TotalSectors    dw 2880		    ; ...
seg000:7C15 MediaByte	    db 0F0h		    ; ...
seg000:7C16 NumFatSecs	    dw 9		    ; ...
seg000:7C18 SecPerTrack	    dw 18		    ; ...
seg000:7C1A NumHeads	    dw 2		    ; ...
seg000:7C1C HiddenSecs	    dd 0		    ; ...
seg000:7C20 BigTotalSecs    dd 0		    ; ...
seg000:7C24 BootDrv	    db 0		    ; ...
seg000:7C25 CurrentHead	    db 0		    ; ...
seg000:7C26 ExtBootSig	    db 29h
seg000:7C27 SerialNum	    dd 350518E3h
seg000:7C2B VolumeLabel	    db 'BOOT500    '
seg000:7C36 FatId	    db 'FAT12   '
seg000:7C3E ; ---------------------------------------------------------------------------
seg000:7C3E
seg000:7C3E MAIN:				    ; ...
seg000:7C3E		    cli
seg000:7C3F		    xor	    ax,	ax
seg000:7C41		    mov	    ss,	ax
seg000:7C43		    mov	    sp,	7C00h
seg000:7C46		    push    ss
seg000:7C47		    pop	    es
seg000:7C48
seg000:7C48 BiosLow_1:				    ; ...
seg000:7C48		    mov	    bx,	78h	    ; DSK_PARMS
seg000:7C4B
seg000:7C4B CurTrk_2:				    ; ...
seg000:7C4B		    lds	    si,	ss:[bx]
seg000:7C4E		    push    ds
seg000:7C4F
seg000:7C4F CurSec:				    ; ...
seg000:7C4F		    push    si
seg000:7C50
seg000:7C50 DirLow:				    ; ...
seg000:7C50		    push    ss
seg000:7C51		    push    bx
seg000:7C52
seg000:7C52 DirHigh:				    ; ...
seg000:7C52		    mov	    di,	7C3Eh	    ; Sec9
seg000:7C55		    mov	    cx,	11
seg000:7C58		    cld
seg000:7C59		    rep	movsb
seg000:7C5B		    push    es
seg000:7C5C		    pop	    ds
seg000:7C5D		    mov	    byte ptr [di-2], 0Fh ; Head	settle time
seg000:7C61		    mov	    cx,	ds:SecPerTrack
seg000:7C65		    mov	    [di-7], cl	    ; End of Track
seg000:7C68		    mov	    [bx+2], ax
seg000:7C6B		    mov	    word ptr [bx], 7C3Eh ; Sec9
seg000:7C6F		    sti
seg000:7C70		    int	    13h		    ; DISK - RESET DISK	SYSTEM
seg000:7C70					    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
seg000:7C72		    jb	    short CkErr
seg000:7C74		    xor	    ax,	ax
seg000:7C76		    cmp	    ds:TotalSectors, ax
seg000:7C7A		    jz	    short Dir_Cont
seg000:7C7C		    mov	    cx,	ds:TotalSectors
seg000:7C80		    mov	    word ptr ds:BigTotalSecs, cx
seg000:7C84
seg000:7C84 Dir_Cont:				    ; ...
seg000:7C84		    mov	    al,	ds:NumFats
seg000:7C87		    mul	    ds:NumFatSecs
seg000:7C8B		    add	    ax,	word ptr ds:HiddenSecs
seg000:7C8F		    adc	    dx,	word ptr ds:HiddenSecs+2
seg000:7C93		    add	    ax,	ds:ReservedSecs
seg000:7C97		    adc	    dx,	0
seg000:7C9A		    mov	    word ptr ds:DirLow,	ax
seg000:7C9D		    mov	    word ptr ds:DirHigh, dx
seg000:7CA1		    mov	    word ptr ds:BiosLow_1+1, ax
seg000:7CA4		    mov	    word ptr ds:CurTrk_2, dx
seg000:7CA8		    mov	    ax,	32
seg000:7CAB		    mul	    ds:NumDirEntries
seg000:7CAF		    mov	    bx,	ds:BytesPerSector
seg000:7CB3		    add	    ax,	bx
seg000:7CB5		    dec	    ax
seg000:7CB6		    div	    bx
seg000:7CB8		    add	    word ptr ds:BiosLow_1+1, ax
seg000:7CBC		    adc	    word ptr ds:CurTrk_2, 0 ; [BiosHigh]
seg000:7CC1		    mov	    bx,	500h	    ; DIR_OFF
seg000:7CC4		    mov	    dx,	word ptr ds:DirHigh
seg000:7CC8		    mov	    ax,	word ptr ds:DirLow
seg000:7CCB		    call    DODIV
seg000:7CCE		    jb	    short CkErr
seg000:7CD0		    mov	    al,	1
seg000:7CD2		    call    DOCALL
seg000:7CD5		    jb	    short CkErr
seg000:7CD7		    mov	    di,	bx
seg000:7CD9		    mov	    cx,	11
seg000:7CDC		    mov	    si,	offset Bio  ; "IO      SYS"
seg000:7CDF		    repe cmpsb
seg000:7CE1		    jnz	    short CkErr
seg000:7CE3		    lea	    di,	[bx+20h]
seg000:7CE6		    mov	    cx,	11
seg000:7CE9		    repe cmpsb
seg000:7CEB		    jz	    short DoLoad
seg000:7CED
seg000:7CED CkErr:				    ; ...
seg000:7CED		    mov	    si,	offset SysMsg ;	"\r\nNon-System	disk or	disk error\r\nRe"...
seg000:7CF0		    call    WRITE
seg000:7CF3		    xor	    ax,	ax
seg000:7CF5		    int	    16h		    ; KEYBOARD - READ CHAR FROM	BUFFER,	WAIT IF	EMPTY
seg000:7CF5					    ; Return: AH = scan	code, AL = character
seg000:7CF7		    pop	    si
seg000:7CF8		    pop	    ds
seg000:7CF9		    pop	    word ptr [si]
seg000:7CFB		    pop	    word ptr [si+2]
seg000:7CFE		    int	    19h		    ; DISK BOOT
seg000:7CFE					    ; causes reboot of disk system
seg000:7D00
seg000:7D00 Load_Failure:			    ; ...
seg000:7D00		    pop	    ax
seg000:7D01		    pop	    ax
seg000:7D02		    pop	    ax
seg000:7D03		    jmp	    short CkErr
seg000:7D05 ; ---------------------------------------------------------------------------
seg000:7D05
seg000:7D05 DoLoad:				    ; ...
seg000:7D05		    mov	    ax,	[bx+1Ah]
seg000:7D08		    dec	    ax
seg000:7D09		    dec	    ax
seg000:7D0A		    mov	    bl,	ds:SecsPerClust
seg000:7D0E		    xor	    bh,	bh
seg000:7D10		    mul	    bx
seg000:7D12		    add	    ax,	word ptr ds:BiosLow_1+1
seg000:7D16		    adc	    dx,	word ptr ds:CurTrk_2
seg000:7D1A		    mov	    bx,	700h
seg000:7D1D		    mov	    cx,	3
seg000:7D20
seg000:7D20 Do_While:				    ; ...
seg000:7D20		    push    ax
seg000:7D21		    push    dx
seg000:7D22		    push    cx
seg000:7D23		    call    DODIV
seg000:7D26		    jb	    short Load_Failure
seg000:7D28		    mov	    al,	1
seg000:7D2A		    call    DOCALL
seg000:7D2D		    pop	    cx
seg000:7D2E		    pop	    dx
seg000:7D2F		    pop	    ax
seg000:7D30		    jb	    short CkErr
seg000:7D32		    add	    ax,	1
seg000:7D35		    adc	    dx,	0
seg000:7D38		    add	    bx,	ds:BytesPerSector
seg000:7D3C		    loop    Do_While
seg000:7D3E		    mov	    ch,	ds:MediaByte
seg000:7D42		    mov	    dl,	ds:BootDrv
seg000:7D46		    mov	    bx,	word ptr ds:BiosLow_1+1	; [BiosLow]
seg000:7D4A		    mov	    ax,	word ptr ds:CurTrk_2 ; [BiosHigh]
seg000:7D4D		    jmp	    far	ptr 70h:0
seg000:7D52
seg000:7D52 ; =============== S	U B R O	U T I N	E =======================================
seg000:7D52
seg000:7D52
seg000:7D52 WRITE	    proc near		    ; ...
seg000:7D52		    lodsb
seg000:7D53		    or	    al,	al
seg000:7D55		    jz	    short EndWR
seg000:7D57		    mov	    ah,	0Eh
seg000:7D59		    mov	    bx,	7
seg000:7D5C		    int	    10h		    ; -	VIDEO -	WRITE CHARACTER	AND ADVANCE CURSOR (TTY	WRITE)
seg000:7D5C					    ; AL = character, BH = display page	(alpha modes)
seg000:7D5C					    ; BL = foreground color (graphics modes)
seg000:7D5E		    jmp	    short WRITE
seg000:7D5E WRITE	    endp
seg000:7D5E
seg000:7D60
seg000:7D60 ; =============== S	U B R O	U T I N	E =======================================
seg000:7D60
seg000:7D60
seg000:7D60 DODIV	    proc near		    ; ...
seg000:7D60		    cmp	    dx,	ds:SecPerTrack
seg000:7D64		    jnb	    short DivOverFlow
seg000:7D66		    div	    ds:SecPerTrack
seg000:7D6A		    inc	    dl
seg000:7D6C		    mov	    byte ptr ds:CurSec,	dl
seg000:7D70		    xor	    dx,	dx
seg000:7D72		    div	    ds:NumHeads
seg000:7D76		    mov	    ds:CurrentHead, dl
seg000:7D7A		    mov	    word ptr ds:CurTrk_2+2, ax
seg000:7D7D		    clc
seg000:7D7E		    retn
seg000:7D7F ; ---------------------------------------------------------------------------
seg000:7D7F
seg000:7D7F DivOverFlow:			    ; ...
seg000:7D7F		    stc
seg000:7D80
seg000:7D80 EndWR:				    ; ...
seg000:7D80		    retn
seg000:7D80 DODIV	    endp
seg000:7D80
seg000:7D81
seg000:7D81 ; =============== S	U B R O	U T I N	E =======================================
seg000:7D81
seg000:7D81
seg000:7D81 DOCALL	    proc near		    ; ...
seg000:7D81		    mov	    ah,	2
seg000:7D83		    mov	    dx,	word ptr ds:CurTrk_2+2
seg000:7D87		    mov	    cl,	6
seg000:7D89		    shl	    dh,	cl
seg000:7D8B		    or	    dh,	byte ptr ds:CurSec
seg000:7D8F		    mov	    cx,	dx
seg000:7D91		    xchg    ch,	cl
seg000:7D93		    mov	    dl,	ds:BootDrv
seg000:7D97		    mov	    dh,	ds:CurrentHead
seg000:7D9B		    int	    13h		    ; DISK - READ SECTORS INTO MEMORY
seg000:7D9B					    ; AL = number of sectors to	read, CH = track, CL = sector
seg000:7D9B					    ; DH = head, DL = drive, ES:BX -> buffer to	fill
seg000:7D9B					    ; Return: CF set on	error, AH = status, AL = number	of sectors read
seg000:7D9D		    retn
seg000:7D9D DOCALL	    endp
seg000:7D9D
seg000:7D9D ; ---------------------------------------------------------------------------
seg000:7D9E SysMsg	    db 0Dh,0Ah		    ; ...
seg000:7D9E		    db 'Non-System disk or disk error',0Dh,0Ah
seg000:7D9E		    db 'Replace and press any key when ready',0Dh,0Ah,0
seg000:7DE6 Bio		    db 'IO      SYS'        ; ...
seg000:7DF1 Dos		    db 'MSDOS   SYS'
seg000:7DFC		    db 0
seg000:7DFD		    db 0
seg000:7DFE		    dw 0AA55h
seg000:7DFE seg000	    ends
seg000:7DFE
seg000:7DFE
seg000:7DFE		    end
