     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 29/09/2023 (Previous: 27/09/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]A002              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]A002              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [B912]A002              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [F614]A002              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [210A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 4004                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  
  3632                                  		; 29/09/2023
  3633                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3634                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3635                                  	
  3636                                  ; 20/12/2022
  3637                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3638                                  %if 0	
  3639                                  		cli
  3640                                  
  3641                                  		push	ax
  3642                                  		xor	ax, ax
  3643                                  		mov	ds, ax
  3644                                  		pop	ax
  3645                                  %endif
  3646                                  
  3647                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3648                                  
  3649                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3650                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3651                                  
  3652                                  ;-----------------------------------------------------------------------------
  3653                                  ; initialization - stage 1
  3654                                  ;-----------------------------------------------------------------------------
  3655                                  ; 02/06/2018 - Retro DOS v3.0
  3656                                  		
  3657                                  		; 21/12/2022
  3658                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3659                                  		;mov	bx, 60h
  3660                                  		;mov	es, bx
  3661                                  		;mov	si, bp
  3662                                  		;sub	di, di
  3663                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3664                                  		;;mov	cl, 35
  3665                                  		;rep	movsw
  3666                                  
  3667 00001763 0E                      		push	cs
  3668 00001764 1F                      		pop	ds
  3669                                  
  3670                                  		; 20/03/2019 - Retro DOS v4.0
  3671                                  		;cli		; turn interrupts off while manupulating stack
  3672                                  		;mov	ss, cx	; set stack segment register
  3673 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3674                                  		;sti		; turn interrupts on
  3675                                  
  3676                                  		; 27/03/2018
  3677                                  		;mov	cx, KERNEL_SIZE	; words !
  3678                                  
  3679                                  		; 20/03/2019
  3680 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3681                                  
  3682                                  		; 21/12/2022
  3683                                  		; 07/04/2018
  3684 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3685                                  		;mov	bl, KERNEL_SEGMENT
  3686 0000176E 8EC3                    		mov	es, bx
  3687 00001770 31FF                    		xor	di, di
  3688 00001772 89FE                    		mov	si, di
  3689                                  		
  3690                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3691                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3692 00001774 F3A5                    		rep	movsw
  3693                                  
  3694                                  		; 20/03/2019 - Retro DOS v4.0
  3695 00001776 53                      		push	bx
  3696 00001777 68[7B17]                		push	init0
  3697 0000177A CB                      		retf
  3698                                  init0:	
  3699                                  		; 20/12/2022
  3700                                  		; (combined kernel file > 64KB)
  3701                                  
  3702                                  		; 20/03/2019
  3703 0000177B B520                    		mov	ch, 20h
  3704 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3705                                  		;mov	cx, 1070h
  3706 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3707 00001782 8EC1                    		mov	es, cx
  3708                                  		
  3709                                  		; 21/12/2022
  3710                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3711                                  		; 28/09/2023
  3712                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3713                                  
  3714                                  		;mov	cx, KERNEL_SIZE - 32768
  3715                                  		; 28/09/2023 (BugFix)
  3716 00001784 B96803                  		mov	cx, NXWORDCOUNT
  3717                                  		;shr	cx, 1 ; 28/09/2023
  3718                                  		;xor	si, si
  3719                                  		;xor	di, di
  3720 00001787 F3A5                    		rep	movsw
  3721                                  
  3722                                  		; 28/09/2023
  3723                                  		;; 17/06/2018 
  3724                                  		;mov	ds, bx
  3725                                  		;; 21/03/2019
  3726                                  		;mov	es, bx
  3727                                  ;init0:
  3728                                  ;		;push	es
  3729                                  ;		push	bx ; 20/03/2019
  3730                                  ;		push	init1 ; 07/04/2018
  3731                                  ;		retf	; jump to 0070h:init1
  3732                                  ;init:
  3733                                  init1:
  3734                                  		; 20/12/2022
  3735                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3736                                  		; for full MSDOS compatibility.
  3737                                  
  3738 00001789 8EC1                    		mov	es, cx ; 0
  3739 0000178B 8ED9                    		mov	ds, cx ; 0
  3740                                  
  3741 0000178D B82205                  		mov	ax, SEC9
  3742                                  
  3743                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3744 00001790 B378                    		mov	bl, 1Eh*4
  3745                                  				; INT 1Eh points to diskette parms table
  3746                                  
  3747                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3748                                   		; (do not move the DPT if is not original ROMBIOS table)
  3749                                  
  3750                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3751                                  		;;jnz	short mov_dpt
  3752                                  
  3753                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3754                                  		;je	short dont_mov_dpt
  3755                                  
  3756                                  		;mov	si, [bx] ; [1Eh*4]		
  3757                                  ;mov_dpt:
  3758                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3759 00001792 C537                    		lds	si, [bx]
  3760 00001794 89C7                    		mov	di, ax  ; SEC9
  3761 00001796 B10B                    		mov	cl, 11
  3762                                  		;cld
  3763 00001798 F3A4                    		rep	movsb
  3764                                  
  3765                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3766 0000179A 8ED9                    		mov	ds, cx ; 0
  3767 0000179C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3768 0000179E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3769                                  ;dont_mov_dpt:
  3770                                  
  3771                                  ; 20/12/2022 - Retro DOS v4.0
  3772                                  %if 0
  3773                                  		; 27/12/2018 - Retro DOS v4.0
  3774                                  		; 'Starting MS-DOS...' message
  3775                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3776                                  		; (0070h:96A3h)
  3777                                  
  3778                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3779                                  		mov     ah, 0Eh
  3780                                  		;bh = 0
  3781                                          	mov     bl, 7		; "normal" attribute and page
  3782                                  startmsg_nxt_chr:  
  3783                                  		lodsb
  3784                                  		or	al, al
  3785                                          	jz	short startmsg_ok
  3786                                         
  3787                                  		int	10h		; video write
  3788                                          	jmp	short startmsg_nxt_chr
  3789                                  
  3790                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3791                                  
  3792                                  startmsg_ok:
  3793                                  
  3794                                  %endif
  3795                                  
  3796                                  ;-----------------------------------------------------------------------------
  3797                                  ; initialization - stage 2
  3798                                  ;-----------------------------------------------------------------------------
  3799                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3800                                  
  3801                                  
  3802                                  ; 19/03/2018
  3803                                  ; Retro DOS v2.0 (24/02/2018)
  3804                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3805                                  
  3806                                  ;------------------------------------------------------------------------
  3807                                  ;									:
  3808                                  ;	System initialization						:
  3809                                  ;									:
  3810                                  ;	The entry conditions are established by the bootstrap		:
  3811                                  ;	loader and are considered unknown. The following jobs		:
  3812                                  ;	will be performed by this module:				:
  3813                                  ;									:
  3814                                  ;	1.	All device initialization is performed			:
  3815                                  ;	2.	A local stack is set up and DS:SI are set		:
  3816                                  ;		to point to an initialization table. Then		:
  3817                                  ;		an inter-segment call is made to the first		:
  3818                                  ;		byte of the dos 					:
  3819                                  ;	3.	Once the dos returns from this call the ds		:
  3820                                  ;		register has been set up to point to the start		:
  3821                                  ;		of free memory. The initialization will then		:
  3822                                  ;		load the command program into this area 		:
  3823                                  ;		beginning at 100 hex and transfer control to		:
  3824                                  ;		this program.						:
  3825                                  ;									:
  3826                                  ;------------------------------------------------------------------------
  3827                                  		
  3828                                  		; 20/12/2022
  3829                                  		; ----------------------
  3830                                  		; Registers
  3831                                  		; ----------------------
  3832                                  		; DL = [bsDriveNumber]
  3833                                  		; DH = [bsMedia]
  3834                                  		; DS = 0, ES = 0, SS = 0
  3835                                  		; BP = 7C00h
  3836                                  		; SP = 700h
  3837                                  		; ----------------------
  3838                                  		; CX = 0				
  3839                                  
  3840                                  ; 02/10/2022 - 20/12/2022
  3841                                  ; ------------------------------------------------------------------------------
  3842                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3843                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3844                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3845                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3846                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3847                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3848                                  ; ------------------------------------------------------------------------------
  3849                                  
  3850                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3851                                  ;
  3852                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3853                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3854                                  ;;	data sector of the bios.
  3855                                  ;
  3856                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3857                                  ;		mov	[cs:bios_l], bx
  3858                                  
  3859                                  ; with the following information from msload, we don't need the
  3860                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3861                                  ;     limitation of msbio.com file.
  3862                                  
  3863                                  		; 21/12/2022
  3864 000017A1 FA                      		cli
  3865                                  
  3866 000017A2 0E                      		push	cs		; Save a peck of interrupt vectors...
  3867 000017A3 07                      		pop	es
  3868                                  		;push	cx
  3869                                  		;push	di
  3870                                  		; 20/12/2022
  3871 000017A4 B105                    		mov	cl, 5
  3872                                  		;mov	cx, 5		; NUMROMVECTORS
  3873                                  					; no. of rom vectors to	be saved
  3874                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3875 000017A6 BE[0001]                		mov	si, RomVectors
  3876                                  next_int_:		
  3877 000017A9 2E                      		cs	; 16/10/2022
  3878 000017AA AC                      		lodsb		
  3879                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3880 000017AB 98                      		cbw			; ax = interrupt number
  3881 000017AC D1E0                    		shl	ax, 1
  3882 000017AE D1E0                    		shl	ax, 1		; int no * 4
  3883 000017B0 89C7                    		mov	di, ax		; interrupt vector address
  3884 000017B2 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3885                                  					; saving address in di
  3886                                  		;lodsw			; movsw
  3887                                  		;stosw
  3888                                  		;lodsw			; movsw
  3889                                  		;stosw			; save the vector
  3890                                  		; 20/12/2022
  3891 000017B4 A5                      		movsw
  3892 000017B5 A5                      		movsw		
  3893                                  
  3894 000017B6 87F7                    		xchg	si, di
  3895 000017B8 E2EF                    		loop	next_int_
  3896                                  		
  3897                                  		;pop	di
  3898                                  		;pop	cx
  3899                                  
  3900                                  ; we need to save int13 in two places in case we are running on an at.
  3901                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3902                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3903                                  ; rom int13 routine, we must have that rom address also stored away.
  3904                                  
  3905                                  		; 20/12/2022
  3906                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3907                                  		;mov	[cs:Orig13], ax
  3908                                  		;mov	ax, [cs:Old13+2]
  3909                                  		;mov	[cs:Orig13+2], ax
  3910                                  
  3911                                  		; 16/10/2022
  3912 000017BA C7064C00[7407]          		mov	word [13h*4], block13
  3913                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3914                                  					; set up int 13	for new	action
  3915 000017C0 8C0E4E00                		mov	[13h*4+2], cs
  3916                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3917 000017C4 C7065400[4808]          		mov	word [15h*4], Int15
  3918                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3919                                  					; set up int 15	for new	action
  3920 000017CA 8C0E5600                		mov	[15h*4+2], cs
  3921                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3922 000017CE C7066400[F907]          		mov	word [19h*4], int19
  3923                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3924                                  					; set up int 19	for new	action
  3925 000017D4 8C0E6600                		mov	[19h*4+2], cs
  3926                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3927                                  
  3928                                  		; 20/12/2022
  3929 000017D8 0E                      		push	cs
  3930 000017D9 1F                      		pop	ds
  3931                                  		
  3932 000017DA A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3933 000017DD A3[B400]                		mov	[Orig13], ax
  3934 000017E0 A1[0801]                		mov	ax, [Old13+2]
  3935 000017E3 A3[B600]                		mov	[Orig13+2], ax
  3936                                  					; ;
  3937 000017E6 FB                      		sti
  3938 000017E7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3939                                  					; Return: AX = equipment flag bits
  3940                                  
  3941                                  ; we have to support a system that does not have any diskette
  3942                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3943                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3944                                  ; otherwise, the system has only hardfiles.
  3945                                  ;
  3946                                  ; important thing is that still, for compatibility reason, the drive letter
  3947                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3948                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3949                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3950                                  ; drives will get "invalid drive letter ..." message. we are going to
  3951                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3952                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3953                                  
  3954                                  ; check the register returned by the equipment determination interrupt
  3955                                  ; we have to handle the case of no diskettes in the system by faking
  3956                                  ; two dummy drives.
  3957                                  ;
  3958                                  ; if the register indicates that we do have floppy drives we don't need
  3959                                  ; to do anything special.
  3960                                  ;
  3961                                  ; if the register indicates that we don't have any floppy drives then
  3962                                  ; what we need to do is set the fakefloppydrv variable, change the
  3963                                  ; register to say that we do have floppy drives and then go to execute
  3964                                  ; the code which starts at notsingle. this is because we can skip the
  3965                                  ; code given below which tries to find if there are one or two drives
  3966                                  ; since we already know about this.
  3967                                  
  3968                                  		; 06/05/2019 - Retro DOS v4.0
  3969 000017E9 88C1                    		mov	cl, al
  3970                                  
  3971                                  		; 12/12/2022
  3972 000017EB A801                    		test	al, 1
  3973                                  		;test	ax, 1		; floppy drives	present	?
  3974 000017ED 751F                    		jnz	short normalfloppydrv ;	yes.
  3975                                  
  3976                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3977                                  ; whether it is an old ROM BIOS or a new one
  3978                                  ;
  3979                                  ; WARNING !!!
  3980                                  ;
  3981                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3982                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3983                                  
  3984                                  		; 20/12/2022
  3985                                  		;push	ax
  3986                                  		;push	bx
  3987                                  		;push	cx
  3988 000017EF 52                      		push	dx
  3989                                  		;push	di
  3990 000017F0 06                      		push	es
  3991 000017F1 B408                    		mov	ah, 8
  3992 000017F3 B200                    		mov	dl, 0
  3993 000017F5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3994                                  					; DL = drive number
  3995                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3996                                  					; DL = number of consecutive drives
  3997                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3998 000017F7 7202                    		jc	short _gdskp_error
  3999                                  		;;mov	[cs:flp_drvs], dl
  4000                                  		; 20/12/2022
  4001                                  		; ds = cs
  4002                                  		;mov	[flp_drvs], dl
  4003 000017F9 88D1                    		mov	cl, dl
  4004                                  _gdskp_error:	
  4005                                  		; 20/12/2022			
  4006 000017FB 07                      		pop	es
  4007                                  		;pop	di
  4008 000017FC 5A                      		pop	dx
  4009                                  		;pop	cx
  4010                                  		;pop	bx
  4011                                  		;pop	ax
  4012                                  		
  4013 000017FD 720F                    		jc	short normalfloppydrv
  4014                                  					; if error it is an old ROM BIOS
  4015                                  					; so, lets assume that ROM BIOS lied
  4016                                  		; 20/12/2022
  4017                                  		; ds = cs
  4018                                  		;cmp	byte [flp_drvs], 0
  4019                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4020                                  		;jz	short _set_fake_flpdrv
  4021                                  		;;mov	al, [cs:flp_drvs]
  4022                                  		;mov	al, [flp_drvs]
  4023                                  		;;dec	al		; make it zero based
  4024                                  		;; 18/12/2022
  4025                                  		;dec	ax
  4026                                  		;jmp	short got_num_flp_drvs
  4027                                  		
  4028                                  		; 20/12/2022
  4029 000017FF 08C9                    		or	cl, cl ; [flp_drvs]
  4030 00001801 7403                    		jz	short _set_fake_flpdrv		
  4031 00001803 49                      		dec	cx	
  4032 00001804 EB0C                    		jmp	short got_num_flp_drvs
  4033                                  ; ----------------------------------------------------------------------------
  4034                                  
  4035                                  _set_fake_flpdrv:
  4036                                  		;20/12/2022
  4037                                  		; ds = cs
  4038 00001806 FEC1                    		inc	cl	; cl = 1
  4039 00001808 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4040                                  		;mov	byte [fakefloppydrv], 1		
  4041                                  		;;mov	byte [cs:fakefloppydrv], 1
  4042                                  					; we don't have any floppy drives.
  4043                                  		; 20/12/2022
  4044                                  		;mov	ax, 1
  4045 0000180C EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4046                                  ; ----------------------------------------------------------------------------
  4047                                  
  4048                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4049                                  		; 20/12/2022
  4050                                  		;rol	al, 1		; there	exist floppy drives.
  4051                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4052 0000180E D0C1                    		rol	cl, 1
  4053 00001810 D0C1                    		rol	cl, 1
  4054                                  got_num_flp_drvs:			
  4055                                  		;;and	ax, 3		; only look at bits 0 &	1
  4056                                  		; 18/12/2022
  4057                                  		;and	al, 3
  4058                                  		; 20/12/2022
  4059 00001812 80E103                  		and	cl, 3
  4060 00001815 7505                    		jnz	short notsingle	; zero means single drive system
  4061                                  		; 20/12/2022
  4062 00001817 41                      		inc	cx
  4063                                  		;inc	ax		; pretend it's a two drive system
  4064                                  settwodrive:				; set this to two fakedrives
  4065                                  		; 20/12/2022
  4066                                  		; ds = cs
  4067 00001818 FE06[7800]              		inc	byte [single]
  4068                                  		;inc	byte [cs:single] ; remember this
  4069                                  notsingle:	
  4070                                  		; 20/12/2022			
  4071                                  		;inc	ax		; ax has number	of drives, 2-4
  4072                                  		;			; is also 0 indexed boot drive if we
  4073                                  		;			; booted off hard file
  4074                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4075                                  		; 20/12/2022
  4076 0000181C FEC1                    		inc	cl	; cl >= 2
  4077                                  
  4078                                  ; 16/10/2022
  4079                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4080                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4081                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4082                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4083                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4084                                  SEC9	EQU	522h	; address of disk parameters
  4085                                  CHROUT	EQU	29h
  4086                                  LSTDRV	EQU     504h
  4087                                  
  4088                                  ; determine whether we booted from floppy or hard disk...
  4089                                  
  4090                                  		; 20/12/2022
  4091 0000181E 88C8                    		mov	al, cl	; 26/05/2019
  4092                                  
  4093 00001820 F6C280                  		test	dl, 80h		; boot from floppy ?
  4094 00001823 7502                    		jnz	short gothrd	; no.
  4095 00001825 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4096                                  gothrd:					
  4097                                  
  4098                                  ; MSDOS 6.0
  4099                                  ;   ax = 0-based drive we booted from
  4100                                  ;   bios_l, bios_h set.
  4101                                  ;   cl = number of floppies including fake one
  4102                                  ;   ch = media byte
  4103                                  
  4104                                  ; Retro DOS 4.0 - 27/12/2018 
  4105                                  ;  (from Retro DOS v2.0 boot sector)
  4106                                  ;   dl = int 13 drive number we booted from
  4107                                  ;   dh = media byte
  4108                                  
  4109                                  		; 20/12/2022
  4110 00001827 88F5                    		mov	ch, dh		; 01/07/2018
  4111                                  
  4112                                  		; cl = number of floppies
  4113                                  		; ch = media byte
  4114                                  
  4115                                  		; set up local stack
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4119                                  					; bios_l, bios_h set.
  4120                                  					; cl = number of floppies including fake one
  4121                                  					; ch = media byte
  4122                                  		; 20/12/2022
  4123                                  		; es = ds = cs
  4124                                  		; ss = 0
  4125                                  		; sp = 700h
  4126                                  
  4127                                  		; 20/12/2022
  4128                                  		;cli
  4129                                  		;mov	ss, dx		; set stack segment and stack pointer
  4130                                  		;mov	sp, 700h
  4131                                  		;sti
  4132                                  
  4133 00001829 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4134                                  		
  4135 0000182A 88EC                    		mov	ah, ch		; FAT ID to AH
  4136 0000182C 50                      		push	ax ; (**)	; save boot drive number and media byte
  4137                                  		
  4138                                  ; let model_byte, secondary_model_byte be set here!!!
  4139                                  
  4140 0000182D B4C0                    		mov	ah, 0C0h
  4141 0000182F CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4142 00001831 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4143 00001833 80FC00                  		cmp	ah, 0
  4144 00001836 7510                    		jnz	short no_rom_system_conf
  4145                                  
  4146                                  ;		; 20/12/2022
  4147                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4148                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4149                                  ;
  4150                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4151                                  ;
  4152                                  ;		on return:
  4153                                  ;		CF = 0 if successful
  4154                                  ;		   = 1 if error
  4155                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4156                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4157                                  ;
  4158                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4159                                  ;
  4160                                  ;		Offset Size	     Description
  4161                                  ;
  4162                                  ;		  00   word   length of descriptor (8 minimum)
  4163                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4164                                  ;		  03   byte   secondary model byte
  4165                                  ;		  04   byte   BIOS revision level (zero based)
  4166                                  ;		  05   byte   feature information, see below
  4167                                  ;		  06   dword  reserved
  4168                                  
  4169                                  		; 20/12/2022
  4170                                  		; ds = cs
  4171 00001838 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4172 0000183C A2[3E06]                		mov	[model_byte], al
  4173                                  		;mov	[cs:model_byte], al
  4174                                  					; get/save model byte
  4175 0000183F 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4176 00001843 A2[3F06]                		mov	[secondary_model_byte], al
  4177                                  		;mov	[cs:secondary_model_byte], al
  4178                                  					; get/save secondary model byte
  4179 00001846 EB0C                    		jmp	short turn_timer_on
  4180                                  ;-----------------------------------------------------------------------------
  4181                                  
  4182                                  no_rom_system_conf:			
  4183 00001848 BEFFFF                  		mov	si, 0FFFFh
  4184 0000184B 8EC6                    		mov	es, si
  4185                                  		; 20/12/2022
  4186 0000184D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4187 00001851 A2[3E06]                		mov	[model_byte], al
  4188                                  		;mov	[cs:model_byte], al ; save model byte
  4189                                  turn_timer_on:				
  4190 00001854 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4191 00001856 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4192                                  					; AKPORT
  4193                                  
  4194                                  ; some olivetti m24 machines have an 8530 serial communications
  4195                                  ; chip installed at io address 50h and 52h. if we're running
  4196                                  ; on one of those, we must inhibit the normal aux port initialization
  4197                                  
  4198                                  		; 20/12/2022
  4199                                  		; ds = cs
  4200 00001858 803E[3E06]00            		cmp	byte [model_byte], 0
  4201                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4202 0000185D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4203                                  					; (except olivetti m24)
  4204 0000185F E466                    		in	al, 66h		; is 8530 installed?
  4205 00001861 A820                    		test	al, 20h
  4206 00001863 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4207 00001865 B00F                    		mov	al, 0Fh		; double check
  4208 00001867 E650                    		out	50h, al
  4209 00001869 E450                    		in	al, 50h
  4210 0000186B A801                    		test	al, 1		; this test was	copied from olivetti
  4211 0000186D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4212                                  
  4213                                  not_olivetti_m24:
  4214 0000186F B003                    		mov	al, 3		; init com4
  4215 00001871 E89B08                  		call	aux_init
  4216 00001874 B002                    		mov	al, 2		; init com3
  4217 00001876 E89608                  		call	aux_init
  4218 00001879 B001                    		mov	al, 1		; init com2
  4219 0000187B E89108                  		call	aux_init
  4220 0000187E 30C0                    		xor	al, al		; init com1
  4221 00001880 E88C08                  		call	aux_init
  4222                                  
  4223                                  skip_aux_port_init:			
  4224 00001883 B002                    		mov	al, 2		; init lpt3
  4225 00001885 E87F08                  		call	print_init
  4226 00001888 B001                    		mov	al, 1		; init lpt2
  4227 0000188A E87A08                  		call	print_init
  4228 0000188D 30C0                    		xor	al, al		; init lpt1
  4229 0000188F E87508                  		call	print_init
  4230                                  
  4231 00001892 31D2                    		xor	dx, dx	; 0
  4232 00001894 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4233 00001896 8EC2                    		mov	es, dx
  4234 00001898 31C0                    		xor	ax, ax
  4235                                  		; 16/10/2022
  4236 0000189A BF3405                  		mov	di, INITSPOT	; 0534h
  4237                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4238                                  					; IBM wants 4 zeros here
  4239 0000189D AB                      		stosw
  4240 0000189E AB                      		stosw
  4241 0000189F 8CC8                    		mov	ax, cs		; fetch	segment
  4242 000018A1 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4243                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4244                                  					; break	entry point
  4245 000018A7 A36E00                  		mov	[BRKADR+2], ax		
  4246                                  		;mov	ds:6Eh,	ax	; vector for break
  4247 000018AA C706A400[6207]          		mov	word [CHROUT*4], outchr
  4248                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4249 000018B0 A3A600                  		mov	[CHROUT*4+2], ax
  4250                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4251                                  
  4252 000018B3 BF0400                  		mov	di, 4
  4253 000018B6 BB[F406]                		mov	bx, intret ; 19/10/2022
  4254                                  		;mov	bx, offset intret ; intret (cs:intret)
  4255                                  					; will initialize rest of interrupts
  4256 000018B9 93                      		xchg	ax, bx
  4257 000018BA AB                      		stosw			; location 4
  4258 000018BB 93                      		xchg	ax, bx		; cs:
  4259 000018BC AB                      		stosw			; int 1	; location 6
  4260 000018BD 83C704                  		add	di, 4
  4261 000018C0 93                      		xchg	ax, bx
  4262 000018C1 AB                      		stosw			; location 12
  4263 000018C2 93                      		xchg	ax, bx		; cs:
  4264 000018C3 AB                      		stosw			; int 3	; location 14
  4265 000018C4 93                      		xchg	ax, bx
  4266 000018C5 AB                      		stosw			; location 16
  4267 000018C6 93                      		xchg	ax, bx		; cs:
  4268 000018C7 AB                      		stosw			; int 4	; location 18
  4269                                  
  4270                                  
  4271                                  ;		; 20/12/2022
  4272                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4273                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4274                                  ;	
  4275                                  ;		50:00	byte	Print screen status byte
  4276                                  ;				 00 = PrtSc not active,
  4277                                  ;				 01 = PrtSc in progress
  4278                                  ;				 FF = error
  4279                                  ;		50:01  3 bytes	Used by BASIC
  4280                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4281                                  ;		50:05  10bytes	POST work area
  4282                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4283                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4284                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4285                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4286                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4287                                  ;		50:20	word	DOS dynamic storage
  4288                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4289                                  ;		50:30	4bytes	MODE command
  4290                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4291                                  
  4292 000018C8 89160005                		mov	[0500h], dx ; 0
  4293                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4294 000018CC 89160405                		mov	[LSTDRV], dx	; [0504h]
  4295                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4296                                  
  4297                                  ; we need to initialize the cs:motorstartup variable from the disk
  4298                                  ; parameter table at sec9. the offsets in this table are defined in
  4299                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4300                                  
  4301 000018D0 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4302                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4303                                  					; [522h+0Ah]
  4304                                  		; 20/12/2022
  4305                                  		; ds = 0
  4306                                  
  4307 000018D3 2EA2[2601]              		mov	[cs:motorstartup], al
  4308 000018D7 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4309 000018DD 720B                    		jb	short no_diddle	; no
  4310 000018DF C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4311                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4312                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4313 000018E5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4314                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4315                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4316                                  no_diddle:				
  4317 000018EA CD12                    		int	12h		; MEMORY SIZE -
  4318                                  					; Return: AX = number of contiguous 1K blocks of memory
  4319 000018EC B106                    		mov	cl, 6
  4320 000018EE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4321                                  		
  4322                                  		; 20/12/2022
  4323                                  		; 03/07/2018 - 27/12/2018
  4324                                  		;pop	cx ; (**)
  4325                                  		;mov	[cs:drvfat], cx
  4326                                  		
  4327 000018F0 50                      		push	ax ; (*)	; save real top	of memory
  4328                                  
  4329                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4330                                  
  4331                                  ;M068 - BEGIN
  4332                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4333                                  
  4334                                  		; 20/12/2022
  4335                                  		; ds = 0
  4336                                  
  4337                                  		;push	ds
  4338                                  		;push	bx		; pushes not required but since this
  4339                                  					; happens to be a last minute change
  4340                                  					; & since it is only init code.
  4341                                  		;xor	bx, bx
  4342                                  		;mov	ds, bx
  4343                                  
  4344                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4345                                  		;mov	bx, [2Fh*4]
  4346                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4347                                  		;mov	ds, [2Fh*4+2]
  4348                                  		; 29/09/2023
  4349 000018F1 C51EBC00                		lds	bx, [2Fh*4]
  4350                                  
  4351 000018F5 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4352                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4353 000018FA 750F                    		jnz	short SkipRPL
  4354 000018FC 807F054C                		cmp	byte [bx+5], 'L'
  4355                                  		;cmp	byte ptr [bx+5], 'L'
  4356 00001900 7509                    		jnz	short SkipRPL
  4357 00001902 89C2                    		mov	dx, ax		; get TOM into DX
  4358 00001904 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4359 00001907 CD2F                    		int	2Fh		; Get new TOM from any RPL
  4360 00001909 89D0                    		mov	ax, dx
  4361                                  SkipRPL:	
  4362                                  		; 20/12/2022		
  4363                                  		;pop	bx
  4364                                  		;pop	ds
  4365                                  
  4366                                  ;M068 - END
  4367                                  		; 20/12/2022
  4368                                  		; 27/12/2018
  4369 0000190B 0E                      		push	cs
  4370 0000190C 1F                      		pop	ds
  4371                                  
  4372                                  		; 18/03/2019 - Retro DOS v4.0
  4373                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4374                                  		;mov	[cs:fatloc], ax	; location to read fat
  4375                                  
  4376                                  		; 01/07/2018
  4377                                  		; 08/04/2018
  4378                                  		; 28/03/2018
  4379                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4380 0000190D 83E840                  		sub	ax, 64
  4381 00001910 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4382                                  		;mov	[cs:init_bootseg], ax
  4383                                  
  4384                                  		; 27/12/2018 - Retro DOS v4.0
  4385                                  		;;pop	ax ; (*)	; get back real top of memory
  4386                                  		;pop	dx ; (*)
  4387                                  		; 29/09/2023 (BugFix)
  4388 00001913 58                      		pop	ax ; (*)	; get back real top of memory
  4389                                  
  4390                                  		; 20/12/2022
  4391                                  		; 27/12/2018
  4392 00001914 59                      		pop	cx ; (**)
  4393 00001915 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4394                                  
  4395                                  		; 20/12/2022
  4396                                  
  4397                                  		;mov	dx, 46Dh	; SYSINIT segment
  4398 00001919 BA4004                  		mov	dx, SYSINITSEG	; 17/10/2022
  4399 0000191C 8EDA                    		mov	ds, dx
  4400                                  
  4401                                  ; set pointer to resident device driver chain
  4402                                  
  4403                                  		; 17/10/2022
  4404 0000191E C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4405                                  		;mov	word [273h], res_dev_list
  4406                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4407                                  					; [SYSINIT+DEVICE_LIST]
  4408 00001924 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4409                                  		;mov	[275h], cs
  4410                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4411                                  
  4412 00001928 A3[9202]                		mov	[MEMORYSIZE], ax
  4413                                  		;mov	[292h], ax
  4414                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4415                                  
  4416 0000192B FEC1                    		inc	cl
  4417 0000192D 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4418                                  		;mov	[296h], cl
  4419                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4420                                  
  4421 00001931 C706[7102]CE07          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4422                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4423                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4424                                  					; dos_load_seg
  4425                                  
  4426                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4427                                  ; printer cards. we initialize this value to point to an iret only if
  4428                                  ;
  4429                                  ; 1) the original segment points to storage inside valid ram.
  4430                                  ;
  4431                                  ; 2) the original segment is 0F000:xxxx
  4432                                  
  4433                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4434                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4435                                  		;mov	es, ax
  4436                                  		; 20/12/2022
  4437                                  		;push	ds ; SYSINITSEG
  4438                                  		;pop	es
  4439 00001937 8EC2                    		mov	es, dx ; SYSINITSEG
  4440 00001939 31C0                    		xor	ax, ax ; 0
  4441 0000193B 8ED8                    		mov	ds, ax		; segment 0
  4442                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4443 0000193D A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4444                                  		; 18/10/2022
  4445 00001940 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4446                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4447 00001945 7605                    		jbe	short resetintf
  4448 00001947 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4449 0000194A 750A                    		jnz	short keepintf
  4450                                  resetintf:	
  4451 0000194C C7063C00[F406]          		mov	word [0Fh*4], intret			
  4452                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4453 00001952 8C0E3E00                		mov	word [0Fh*4+2], cs
  4454                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4455                                  keepintf:				
  4456                                  ; end important
  4457                                  
  4458                                  ; 17/10/2022
  4459                                  ; 28/12/2018 - Retro DOS v4.0
  4460                                  
  4461                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4462                                  ;
  4463                                  ; we will check if the system has ibm extended keyboard by
  4464                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4465                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4466                                  ; for the extended keyboard function. use cx as the temporary register.
  4467                                  
  4468                                  		; 20/12/2022
  4469                                  		; ds = 0
  4470                                  		;xor	cx, cx
  4471                                  		;mov	ds, cx
  4472                                  
  4473 00001956 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4474                                  
  4475                                  		; 20/12/2022
  4476                                  		; 20/03/2019
  4477 0000195A 0E                      		push	cs
  4478 0000195B 1F                      		pop	ds
  4479                                  
  4480                                  		;test	cl, 00010000b ; 10h
  4481 0000195C F6C110                  		test	cl, 10h		; extended keyboard ?
  4482 0000195F 740A                    		jz	short org_key	; no, original keyboard
  4483                                  
  4484                                  		; 20/12/2022
  4485                                  		;  ds = cs
  4486 00001961 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4487 00001966 C606[E604]11            		mov	byte [keysts_func], 11h
  4488                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4489                                  		;mov	byte [cs:keysts_func], 11h
  4490                                  					; change for extended keyboard functions
  4491                                  org_key:
  4492                                  
  4493                                  ; 02/06/2018 - Retro DOS v3.0
  4494                                  
  4495                                  ;**************************************************************
  4496                                  ;	will initialize the number of drives
  4497                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4498                                  ;	the indications are as follows:
  4499                                  ;
  4500                                  ;	bits	7	6	drives
  4501                                  ;		0	0	1
  4502                                  ;		0	1	2
  4503                                  ;		1	0	3
  4504                                  ;		1	1	4
  4505                                  ;**************************************************************
  4506                                  		
  4507                                  		; 20/12/2022
  4508                                  		; ds = cs		
  4509                                  		;push	cs
  4510                                  		;pop	ds
  4511                                  		; 21/12/2022
  4512                                  		;push	cs
  4513                                  		;pop	es
  4514                                  
  4515 0000196B E8E608                  		call	cmos_clock_read	; If cmos clock	exists,
  4516                                  					; then set the system time according to	that.
  4517                                  					; also,	reset the cmos clock rate.
  4518                                  		; 18/10/2022
  4519                                  		;mov	word ptr BData_start, offset harddrv ;
  4520                                  					; set up pointer to hdrive
  4521                                  		; 02/10/2022
  4522 0000196E C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4523                                  		
  4524                                  		; 20/12/2022
  4525                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4526 00001974 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4527 00001975 30E4                    		xor	ah, ah		; chuck	fat id byte
  4528 00001977 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4529 0000197A A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4530 0000197D D1E0                    		shl	ax, 1
  4531 0000197F 0106[4417]              		add	[last_dskdrv_table], ax
  4532                                  
  4533 00001983 B280                    		mov	dl, 80h
  4534 00001985 B408                    		mov	ah, 8
  4535 00001987 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4536                                  					; DL = drive number
  4537                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4538                                  					; DL = number of consecutive drives
  4539                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4540 00001989 7204                    		jc	short enddrv
  4541 0000198B 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4542                                  enddrv:
  4543                                  		; 21/12/2022
  4544 0000198F 0E                      		push	cs
  4545 00001990 07                      		pop	es
  4546                                  
  4547                                  ; scan the list of drives to determine their type. we have three flavors of
  4548                                  ; diskette drives:
  4549                                  ;
  4550                                  ;   48tpi drives    we do nothing special for them
  4551                                  ;   96tpi drives    mark the fact that they have changeline support.
  4552                                  ;   3.5"  drives    mark changeline support and small.
  4553                                  ;
  4554                                  ; the following code uses registers for certain values:
  4555                                  ;
  4556                                  ;   dl - physical drive
  4557                                  ;   ds:di - points to current bds
  4558                                  ;   cx - flag bits for bds
  4559                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4560                                  					
  4561 00001991 30D2                    		xor	dl, dl
  4562                                  
  4563                                  		; 20/12/2022
  4564                                  		; ds = cs
  4565                                  		; 17/06/2018		 
  4566                                  		;push	cs
  4567                                  		;pop	ds
  4568                                  
  4569 00001993 C606[2C01]09            		mov	byte [eot], 9
  4570 00001998 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4571                                  					; to set aside two bdss	for the	two fake floppy	drives
  4572                                  
  4573                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4574                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4575                                  
  4576                                  ; check to see if we are faking floppy drives. if not we don't
  4577                                  ; do anything special. if we are faking floppy drives we need
  4578                                  ; to set aside two bdss for the two fake floppy drives. we
  4579                                  ; don't need to initalise any fields though. so starting at start_bds
  4580                                  ; use the link field in the bds structure to go to the second bds
  4581                                  ; in the list and initalise it's link field to -1 to set the end of
  4582                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4583                                  ; the bds for harddrives.
  4584                                  
  4585 0000199B 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4586 000019A0 750B                    		jnz	short loop_drive
  4587 000019A2 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4588                                  					; di <-	first bds link
  4589 000019A4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4590                                  					; di <-	second bds link
  4591 000019A6 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4592 000019AA E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4593                                  ;-----------------------------------------------------------------------------
  4594                                  
  4595                                  loop_drive:				
  4596 000019AD 3A16[7500]              		cmp	dl, [drvmax]
  4597 000019B1 7203                    		jb	short got_more
  4598 000019B3 E90201                  		jmp	done_drives
  4599                                  ;-----------------------------------------------------------------------------
  4600                                  
  4601                                  got_more:				
  4602 000019B6 31C9                    		xor	cx, cx		; zero all flags
  4603 000019B8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4604                                  					; get next bds
  4605 000019BA B600                    		mov	dh, 0 ; ff48tpi
  4606                                  					; set form factor to 48	tpi
  4607 000019BC C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4608                                  		
  4609                                  		; 20/12/2022
  4610                                  		;push	ds ; 11/05/2019	
  4611 000019C1 57                      		push	di
  4612 000019C2 52                      		push	dx
  4613 000019C3 51                      		push	cx
  4614 000019C4 06                      		push	es ; ((*)) ; 20/12/2022	
  4615                                  		
  4616 000019C5 B408                    		mov	ah, 8
  4617 000019C7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4618                                  					; DL = drive number
  4619                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4620                                  					; DL = number of consecutive drives
  4621                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4622 000019C9 7276                    		jc	short noparmsfromrom
  4623                                  
  4624                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4625                                  ; in this case, we are going to put bogus informations to bds table.
  4626                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4627                                  ; they are calculated at the later time. this is just for the diagnostic
  4628                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4629                                  ; this should only happen with drive b.
  4630                                  
  4631 000019CB 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4632 000019CE 7505                    		jnz	short pfr_ok
  4633                                  
  4634                                  		;mov	ch, 39		; rom gave wrong info.
  4635                                  		;mov	cl, 9		; let's default to 360k.
  4636                                  		; 20/12/2022
  4637 000019D0 B90927                  		mov	cx, 2709h
  4638                                  
  4639 000019D3 B601                    		mov	dh, 1
  4640                                  pfr_ok:					
  4641 000019D5 FEC6                    		inc	dh		; make number of heads 1-based
  4642 000019D7 FEC5                    		inc	ch		; make number of cylinders 1-based
  4643 000019D9 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4644 000019DD 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4645 000019E0 880E[D116]              		mov	[sec_trk], cl
  4646 000019E4 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4647                                  
  4648                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4649                                  
  4650 000019E8 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4651                                  		;jbe	short eot_ok
  4652                                  		; 09/12/2022
  4653                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4654                                  		; 14/08/2023
  4655 000019EC 7604                    		jbe	short eotok
  4656 000019EE 880E[2C01]              		mov	[eot], cl
  4657                                  ;eot_ok:					
  4658                                  eotok:
  4659                                  		; 20/12/2022
  4660 000019F2 07                      		pop	es ; ((*)) es = cs = ds		
  4661 000019F3 59                      		pop	cx
  4662 000019F4 5A                      		pop	dx
  4663 000019F5 5F                      		pop	di
  4664                                  		;pop	ds ; 20/12/2022
  4665                                  
  4666                                  ; Check	for presence of	changeline
  4667                                  
  4668 000019F6 B415                    		mov	ah, 15h
  4669 000019F8 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4670                                  					; DL = drive ID
  4671                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4672                                  					; CX:DX	= number of sectors on the media
  4673 000019FA 720D                    		jc	short changeline_done
  4674 000019FC 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4675 000019FF 7508                    		jnz	short changeline_done
  4676                                  
  4677                                  ; we have a drive with change line support.
  4678                                  
  4679 00001A01 80C902                  		or	cl, 2		; fchangeline
  4680                                  					; signal type
  4681 00001A04 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4682                                  
  4683                                  ; we now try to set up the form factor for the types of media that we know
  4684                                  ; and can recognise. for the rest, we set the form factor as "other".
  4685                                  
  4686                                  changeline_done:
  4687                                  
  4688                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4689                                  			
  4690 00001A09 803E[D216]28            		cmp	byte [num_cyln], 40
  4691 00001A0E 750B                    		jnz	short try_80
  4692 00001A10 803E[D116]09            		cmp	byte [sec_trk], 9
  4693 00001A15 7653                    		jbe	short nextdrive
  4694                                  gotother:				
  4695 00001A17 B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4696 00001A19 EB4F                    		jmp	short nextdrive
  4697                                  ;-----------------------------------------------------------------------------
  4698                                  
  4699                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4700                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4701                                  
  4702                                  try_80:					
  4703 00001A1B 803E[D216]50            		cmp	byte [num_cyln], 80
  4704 00001A20 75F5                    		jnz	short gotother
  4705 00001A22 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4706 00001A24 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4707 00001A29 743F                    		jz	short nextdrive	; yeah,	go update
  4708                                  
  4709                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4710                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4711                                  		;mov	dh, ff144
  4712                                  		;cmp	byte [sec_trk], 18
  4713                                  		;je	short nextdrive
  4714                                  
  4715 00001A2B 803E[D116]0F            		cmp	byte [sec_trk], 15
  4716 00001A30 740B                    		jz	short got96
  4717                                  		
  4718 00001A32 803E[D116]09            		cmp	byte [sec_trk], 9
  4719 00001A37 75DE                    		jnz	short gotother
  4720                                  		
  4721 00001A39 B602                    		mov	dh, 2 ; ffSmall
  4722 00001A3B EB2D                    		jmp	short nextdrive
  4723                                  ; ----------------------------------------------------------------------------
  4724                                  
  4725                                  got96:					
  4726 00001A3D B601                    		mov	dh, 1 ; ff96tpi
  4727 00001A3F EB29                    		jmp	short nextdrive
  4728                                  ; ----------------------------------------------------------------------------
  4729                                  
  4730                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4731                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4732                                  
  4733                                  noparmsfromrom:				
  4734                                  		; 20/12/2022
  4735 00001A41 07                      		pop	es ; ((*)) 
  4736 00001A42 59                      		pop	cx
  4737 00001A43 5A                      		pop	dx
  4738 00001A44 5F                      		pop	di
  4739                                  		;pop	ds ; 20/12/2022
  4740                                  		
  4741 00001A45 B415                    		mov	ah, 15h
  4742 00001A47 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4743                                  					; DL = drive ID
  4744                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4745                                  					; CX:DX	= number of sectors on the media
  4746 00001A49 721F                    		jc	short nextdrive
  4747                                  		
  4748 00001A4B 80FC02                  		cmp	ah, 2		; is there changeline?
  4749 00001A4E 751A                    		jnz	short nextdrive
  4750                                  
  4751 00001A50 80C902                  		or	cl, 2 ; fchangeline
  4752 00001A53 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4753 00001A58 C606[D216]50            		mov	byte [num_cyln], 80
  4754 00001A5D B601                    		mov	dh, 1 ; ff96tpi 
  4755 00001A5F B00F                    		mov	al, 15
  4756 00001A61 3A06[2C01]              		cmp	al, [eot]
  4757 00001A65 7603                    		jbe	short nextdrive ; eot_ok2
  4758 00001A67 A2[2C01]                		mov	[eot], al
  4759                                  ; ----------------------------------------------------------------------------
  4760                                  
  4761                                  ;eot_ok2:
  4762                                  nextdrive:				
  4763 00001A6A 80C920                  		or	cl, 20h	; fi_own_physical
  4764                                  					; set this true	for all	drives
  4765 00001A6D 88D7                    		mov	bh, dl		; save int13 drive number
  4766                                  
  4767                                  ; we need to do special things if we have a single drive system and are setting
  4768                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4769                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4770                                  ; we detect the presence of this situation by examining the flag single for the
  4771                                  ; value 2.
  4772 00001A6F 803E[7800]02            		cmp	byte [single], 2
  4773 00001A74 7505                    		jnz	short not_special
  4774 00001A76 FECF                    		dec	bh		; int13	drive number same for logical drive
  4775 00001A78 80F120                  		xor	cl, 20h	; fi_own_physical
  4776                                  					; reset	ownership flag for logical drive
  4777                                  not_special:
  4778                                  
  4779                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4780                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4781                                  ; form factor is of type "ffother".
  4782                                  				
  4783 00001A7B 31C0                    		xor	ax, ax		; fill BDS for drive
  4784 00001A7D A0[D016]                		mov	al, [num_heads]
  4785 00001A80 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4786 00001A83 A0[D116]                		mov	al, [sec_trk]
  4787 00001A86 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4788 00001A89 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4789 00001A8C 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4790 00001A8F 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4791 00001A92 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4792 00001A95 8A1E[D216]              		mov	bl, [num_cyln]
  4793 00001A99 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4794 00001A9C 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4795 00001AA1 7511                    		jnz	short no_single
  4796 00001AA3 C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4797                                  					; single drive system
  4798                                  		; 18/12/2022
  4799 00001AA8 80C910                  		or	cl, 10h
  4800                                  		;or	cx, 10h	; fi_am_mult
  4801                                  					; set that this	is one of several drives
  4802 00001AAB 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4803                                  					; save flags
  4804 00001AAE 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4805                                  					; move to next BDS in list
  4806 00001AB0 FEC2                    		inc	dl		; add a	number
  4807 00001AB2 EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4808                                  ; ----------------------------------------------------------------------------
  4809                                  
  4810                                  no_single:				
  4811                                  		;inc	dl
  4812                                  		; 18/12/2022
  4813 00001AB4 42                      		inc	dx
  4814 00001AB5 E9F5FE                  		jmp	loop_drive
  4815                                  ; ----------------------------------------------------------------------------
  4816                                  
  4817                                  done_drives:	
  4818                                  		;mov	word [di+BDS.link], -1			
  4819 00001AB8 C705FFFF                		mov	word [di], -1	; set link to null
  4820                                  
  4821                                  ; set up all the hard drives in	the system
  4822                                  
  4823                                  		; 20/12/2022
  4824                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4825                                  dohard:					
  4826 00001ABC 8A36[4317]              		mov	dh, [hnum]
  4827 00001AC0 08F6                    		or	dh, dh		; done if no hardfiles
  4828 00001AC2 745B                    		jz	short static_configure
  4829 00001AC4 B280                    		mov	dl, 80h
  4830                                  dohard1:				
  4831 00001AC6 52                      		push	dx
  4832 00001AC7 8B3E[4617]              		mov	di, [end_of_bdss]
  4833 00001ACB 8A1E[7500]              		mov	bl, [drvmax]
  4834 00001ACF B700                    		mov	bh, 0		; first	primary	partition (or active)
  4835 00001AD1 E8C601                  		call	sethard
  4836 00001AD4 7208                    		jb	short hardfile_err
  4837 00001AD6 E83107                  		call	dmax_check	; error	if already 26 drives
  4838 00001AD9 7303                    		jnb	short hardfile_err
  4839 00001ADB E84107                  		call	xinstall_bds	; insert new bds into linked list
  4840                                  hardfile_err:				
  4841 00001ADE 5A                      		pop	dx
  4842 00001ADF FEC2                    		inc	dl		; next hard drive
  4843 00001AE1 FECE                    		dec	dh
  4844 00001AE3 75E1                    		jnz	short dohard1
  4845                                  
  4846                                  ; end of physical drive	initialization
  4847                                  
  4848                                  ; *** do not change the position of the following statement.
  4849                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4850                                  ; *** drive number of mini disk(s).
  4851                                  					
  4852 00001AE5 E83006                  		call	domini		; for setting up mini disks, if found
  4853                                  
  4854                                  ; -- begin added section
  4855                                  
  4856 00001AE8 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4857 00001AEC B280                    		mov	dl, 80h
  4858                                  dohardx1:				
  4859 00001AEE B701                    		mov	bh, 1		; do all subsequent primary partitions
  4860                                  dohardx2:				
  4861 00001AF0 52                      		push	dx
  4862 00001AF1 53                      		push	bx
  4863 00001AF2 8B3E[4617]              		mov	di, [end_of_bdss]
  4864 00001AF6 8A1E[7500]              		mov	bl, [drvmax]
  4865 00001AFA E89D01                  		call	sethard
  4866 00001AFD 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4867 00001AFF E80807                  		call	dmax_check	; make sure <=26 drives
  4868 00001B02 7309                    		jnb	short dohardx4	; skip if error
  4869 00001B04 E81807                  		call	xinstall_bds	; insert new bds into linked list
  4870 00001B07 5B                      		pop	bx		; get partition	number
  4871 00001B08 5A                      		pop	dx		; restore physical drive counts
  4872 00001B09 FEC7                    		inc	bh
  4873 00001B0B EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4874                                  ; ----------------------------------------------------------------------------
  4875                                  
  4876                                  dohardx4:				
  4877 00001B0D 5B                      		pop	bx		; unjunk partition number from stack
  4878 00001B0E 5A                      		pop	dx		; restore physical drive counts
  4879 00001B0F FEC2                    		inc	dl		; next hard drive
  4880 00001B11 FECE                    		dec	dh
  4881 00001B13 75D9                    		jnz	short dohardx1
  4882                                  
  4883                                  ; -- end changed section
  4884                                  
  4885                                  ;******************************************************************************
  4886                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4887                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4888                                  ; than two diskette drives
  4889                                  ;
  4890                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4891                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4892                                  ;		letters. to do this, scan for disk drives and assign logical
  4893                                  ;		drive number starting from 2 and then rescan diskette drives
  4894                                  ;		and assign next to the last logical drive number of last disk
  4895                                  ;		drive to the 3rd and 4th diskette drives.
  4896                                  ;******************************************************************************
  4897                                  
  4898 00001B15 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4899                                  		;jbe	short static_configure ; no - no need for remapping
  4900 00001B1A 7603                    		jbe	short no_remap
  4901 00001B1C E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4902                                  no_remap:
  4903                                  
  4904                                  ; End of drive initialization.
  4905                                  
  4906                                  ; ----------------------------------------------------------------------------
  4907                                  
  4908                                  ;we now decide, based on the configurations available so far, what
  4909                                  ;code or data we need to keep as a stay resident code. the following table
  4910                                  ;shows the configurations under consideration. they are listed in the order
  4911                                  ;of their current position memory.
  4912                                  ;
  4913                                  ;configuration will be done in two ways:
  4914                                  ;
  4915                                  ;first, we are going to set "static configuration". static configuration will
  4916                                  ;consider from basic configuration to endof96tpi configuration. the result
  4917                                  ;of static configuration will be the address the dynamic configuration will
  4918                                  ;use to start with.
  4919                                  ;
  4920                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4921                                  ;involves possible relocation of code or data. dynamic configuration routine
  4922                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4923                                  ;code individually. after these operation, [dosdatasg] will be set.
  4924                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4925                                  
  4926                                  ; -- begin changed section
  4927                                  ;
  4928                                  ;   1.	 basic configuration for msbio (endfloppy)
  4929                                  ;   2.   end96tpi	; a system that supports "change line error"
  4930                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4931                                  ;   4.	 endatrom	;some of at rom fix module.
  4932                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4933                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4934                                  ;
  4935                                  
  4936                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4937                                  
  4938                                  static_configure:			
  4939 00001B1F 8B3E[4617]              		mov	di, [end_of_bdss]
  4940 00001B23 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4941                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4942 00001B27 750D                    		jnz	short dynamic_configure	; that's the end, then
  4943                                  		; 18/10/2022
  4944 00001B29 BF[1709]                		mov	di, end96tpi
  4945                                  		;mov	di, offset harddrv ; end96tpi
  4946                                  					; keep everything up to	end96tpi
  4947 00001B2C 803E[7700]00            		cmp	byte [fhave96], 0
  4948 00001B31 7503                    		jnz	short dynamic_configure
  4949                                  		
  4950 00001B33 BF[FC08]                		mov	di, endfloppy
  4951                                  dynamic_configure:
  4952                                  		; 20/12/2022
  4953                                  		;push	cs
  4954                                  		;pop	es
  4955                                  		
  4956 00001B36 FC                      		cld			; clear direction
  4957                                  
  4958                                  ; -- end changed section
  4959                                  
  4960                                  		; 20/12/2022
  4961                                  		; ds = cs <> es
  4962                                  		; ss = 0
  4963                                  		; sp = 700h
  4964                                  
  4965 00001B37 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4966 00001B3C 7577                    		jnz	short checkcmosclock
  4967 00001B3E 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4968 00001B43 7470                    		jz	short checkcmosclock
  4969 00001B45 97                      		xchg	ax, di		; save allocation pointer in ax
  4970 00001B46 BE00F0                  		mov	si, 0F000h
  4971 00001B49 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4972 00001B4B BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4973 00001B4E BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4974 00001B51 B90900                  		mov	cx, 9		; bdate_l
  4975                                  					; Only patch ROM for bios 01/10/84
  4976 00001B54 F3A6                    		repe cmpsb		; check	for date + zero	on end
  4977 00001B56 97                      		xchg	ax, di		; restore allocation pointer
  4978                                  
  4979                                  ; M015 -- begin changes
  4980                                  
  4981                                  		;jnz	short checkcmosclock
  4982                                  		; 02/10/2022
  4983 00001B57 7508                    		jnz	short checkcompaqbug
  4984                                  
  4985                                  ; install at rom fix
  4986                                  
  4987                                  		; 19/10/2022
  4988                                  		;mov	cx, offset endatrom
  4989 00001B59 B9[0A14]                		mov	cx, endatrom
  4990                                  		;mov	si, offset ibm_disk_io
  4991 00001B5C BE[DC12]                		mov	si, ibm_disk_io
  4992 00001B5F EB46                    		jmp	short install_int13_patch
  4993                                  ; ----------------------------------------------------------------------------
  4994                                  
  4995                                  ; M065 -- begin changes
  4996                                  ;
  4997                                  ; On certain systems with Western Digital disk controllers, the
  4998                                  ; following detection scheme caused an unpredictable and serious
  4999                                  ; failure. In particular, they've implemented a nonstandard
  5000                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5001                                  ; what happens to be at es:[bx] and other memory locations indexed
  5002                                  ; off of it.
  5003                                  ;
  5004                                  ; Compaq was unable to tell us exactly which kind of systems have
  5005                                  ; the bug, except that they guarantee that the bug was fixed in
  5006                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5007                                  ; string, and then look for date codes before 08/04/86 to decide
  5008                                  ; when to install the hook.
  5009                                  
  5010                                  ;checkcmosclock:
  5011                                  ; 02/10/2022				
  5012                                  checkcompaqbug:
  5013                                  		; 20/12/2022
  5014                                  		; es = 0F000h
  5015                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5016                                  		;mov	es, ax
  5017                                  
  5018                                  		; 19/10/2022
  5019 00001B61 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5020                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5021 00001B68 754B                    		jnz	short not_compaq_patch
  5022 00001B6A 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5023                                  		;cmp	word ptr es:0FFECh, 'PM'
  5024 00001B71 7542                    		jnz	short not_compaq_patch
  5025 00001B73 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5026                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5027 00001B7A 7539                    		jnz	short not_compaq_patch
  5028                                  
  5029                                  ; We're running on a COMPAQ. Now look at the date code.
  5030                                  
  5031 00001B7C 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5032 00001B80 86E0                    		xchg	ah, al
  5033 00001B82 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5034                                  		;cmp	ax, '86'        ; 3836h
  5035                                  					; is it	86?
  5036 00001B85 772E                    		ja	short not_compaq_patch
  5037 00001B87 7218                    		jb	short do_compaq_patch
  5038 00001B89 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5039 00001B8D 86E0                    		xchg	ah, al
  5040 00001B8F 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5041                                  		;cmp	ax, '08'        ; 3038h
  5042                                  					; is it	08?
  5043 00001B92 7721                    		ja	short not_compaq_patch
  5044 00001B94 720B                    		jb	short do_compaq_patch
  5045 00001B96 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5046 00001B9A 86E0                    		xchg	ah, al
  5047 00001B9C 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5048                                  		;cmp	ax, '04'        ; 3034h
  5049                                  					; is it	04?
  5050 00001B9F 7314                    		jnb	short not_compaq_patch
  5051                                  
  5052                                  do_compaq_patch:			
  5053 00001BA1 B9[2B14]                		mov	cx, end_compaq_i13hook
  5054 00001BA4 BE[0A14]                		mov	si, endatrom
  5055                                  
  5056                                  install_int13_patch:			
  5057 00001BA7 0E                      		push	cs
  5058 00001BA8 07                      		pop	es
  5059                                  		; 18/10/2022
  5060 00001BA9 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5061 00001BAD 8C0E[B600]              		mov	[Orig13+2], cs
  5062 00001BB1 29F1                    		sub	cx, si		; size of rom fix module
  5063 00001BB3 F3A4                    		rep movsb		; relocate it
  5064                                  
  5065                                  ; M065 -- end changes
  5066                                  
  5067                                  ; ----------------------------------------------------------------------------
  5068                                  not_compaq_patch:			; M065
  5069                                  		; 17/10/2022
  5070                                  checkcmosclock:	
  5071                                  		; 18/10/2022		
  5072 00001BB5 0E                      		push	cs
  5073 00001BB6 07                      		pop	es
  5074                                  
  5075                                  		; 20/12/2022
  5076                                  		; ds = cs = es
  5077                                  		; ss = 0
  5078                                  		; sp = 700h
  5079                                  
  5080 00001BB7 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5081 00001BBC 7518                    		jnz	short checkk09	; no
  5082                                  
  5083 00001BBE 893E[0605]              		mov	word [daycnttoday], di
  5084                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5085 00001BC2 B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5086 00001BC5 BE[2C14]                		mov	si, daycnt_to_day
  5087 00001BC8 F3A4                    		rep movsb
  5088 00001BCA 893E[0205]              		mov	word [bintobcd], di
  5089                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5090                                  					; let original segment stay
  5091 00001BCE B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5092 00001BD1 BE[FD14]                		mov	si, bin_to_bcd
  5093 00001BD4 F3A4                    		rep movsb
  5094                                  checkk09:				
  5095 00001BD6 57                      		push	di ; ? ; save ? ; 20/12/2022
  5096 00001BD7 B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5097 00001BDA B301                    		mov	bl, 1		; wait for 1 clock tick
  5098 00001BDC 268A3D                  		mov	bh, [es:di]
  5099 00001BDF F9                      		stc			; Assume we will fail
  5100 00001BE0 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5101                                  					; AL = condition type, BH = condition compare or mask value
  5102                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5103                                  					; DX = I/O port	address	if AL bit 4 set
  5104 00001BE2 5F                      		pop	di ; ?
  5105 00001BE3 721B                    		jc	short configdone ; 20/12/2022
  5106                                  
  5107 00001BE5 C606[7900]01            		mov	byte [fhavek09], 1
  5108                                  					; remember we have a k09 type
  5109 00001BEA 1E                      		push	ds
  5110 00001BEB 31C0                    		xor	ax, ax
  5111 00001BED 8ED8                    		mov	ds, ax
  5112                                  		
  5113 00001BEF 893EB001                		mov	[6Ch*4], di
  5114                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5115                                  					; new int 6ch handler
  5116                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5117 00001BF3 8C0EB201                		mov	word [6Ch*4+2], cs
  5118 00001BF7 1F                      		pop	ds
  5119                                  		; 20/12/2022
  5120                                  		; ds = cs = es
  5121 00001BF8 BE[0815]                		mov	si, int6c
  5122 00001BFB B9C201                  		mov	cx, endk09-int6c ; 459
  5123                                  		;mov	cx, 459		; endk09 - int6c
  5124                                  					; size of k09 routine
  5125 00001BFE F3A4                    		rep movsb		;
  5126                                  					; set up config	stuff for sysinit
  5127                                  ; ----------------------------------------------------------------------------
  5128                                  ; Set up config stuff for SYSINIT
  5129                                  
  5130                                  ; 17/10/2022
  5131                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5132                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5133                                  ; 09/12/2022
  5134                                  SETDRIVE equ SetDrive
  5135                                  GETBP equ GetBp
  5136                                  		
  5137                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5138                                  configdone:	
  5139                                  		; 21/12/2022			
  5140                                  		; 20/03/2019
  5141                                  		;push	cs		; di is	final ending address of	msbio.
  5142                                  		;pop	ds
  5143                                  		
  5144 00001C00 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5145                                  		; 10/12/2022
  5146                                  		;shr	di, 1
  5147                                  		;shr	di, 1
  5148                                  		;shr	di, 1
  5149                                  		;shr	di, 1
  5150 00001C03 B104                    		mov	cl, 4
  5151 00001C05 D3EF                    		shr	di, cl		
  5152                                  		; 10/12/2022
  5153                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5154                                  		; 19/10/2022 - Temporary !
  5155                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5156                                  		; 13/08/2023
  5157 00001C07 83C770                  		add	di, 70h
  5158 00001C0A 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5159                                  
  5160                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5161                                  
  5162                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5163                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5164                                  	     
  5165                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5166                                  
  5167                                  ; ----------------------------------------------------------------------------
  5168                                  ; ----------------------------------------------------------------------------
  5169                                  %if 0
  5170                                  		mov	ax, [drvfat]	; get drive and	fat id
  5171                                  		; 22/12/2022
  5172                                  		; Note: SETDRIVES uses AL (drive number) only
  5173                                  		mov	bp, SETDRIVE
  5174                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5175                                  					; at 2C7h:4D7h = 70h:2A47h
  5176                                  		push	cs		; simulate far call
  5177                                  		call	call_bios_code	; get bds for drive
  5178                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5179                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5180                                  		push	cs
  5181                                  		call	call_bios_code
  5182                                  
  5183                                  	; resort to funky old segment definitions for now
  5184                                  
  5185                                  		; 22/12/2022
  5186                                  		;push	es		; copy bds to ds:di
  5187                                  		;pop	ds
  5188                                  
  5189                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5190                                  	;
  5191                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5192                                  	;	  back. Apparently it was what actually setup es: for the following
  5193                                  	; cas----
  5194                                  
  5195                                  		; 22/12/2022
  5196                                  		;xor	di, di
  5197                                  		;mov	al, [es:di]	; get fat id byte
  5198                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5199                                  		;mov	[es:drvfat+1], al
  5200                                  		;mov	ax, [es:drvfat]
  5201                                  		
  5202                                  		; 22/12/2022
  5203                                  		; ds = cs
  5204                                  	;;;	mov	al, [drvfat]
  5205                                  
  5206                                  	; cas -- why do a SECOND setdrive here???
  5207                                  
  5208                                  		; 22/12/2022
  5209                                  		;push	es		; save whatever's in es
  5210                                  		;push	ds		; copy bds to es:di
  5211                                  		;pop	es
  5212                                  		;push	cs		; copy Bios_Data to ds
  5213                                  		;pop	ds
  5214                                  	
  5215                                  	; 22/12/2022
  5216                                  	;;;	mov	bp, SETDRIVE
  5217                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5218                                  	;;;	push	cs		; simulate far call
  5219                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5220                                  	
  5221                                  		; 22/12/2022
  5222                                  		;push	es		; copy bds back to ds:di
  5223                                  		;pop	ds
  5224                                  		;pop	es		; pop whatever was in es
  5225                                  
  5226                                  	; Now we load in the MSDOS.SYS file
  5227                                  
  5228                                  	; 22/12/2022
  5229                                  	; -----
  5230                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5231                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5232                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5233                                  	;				; get size of fat on media
  5234                                  	;	;mov	es:16DEh, bl
  5235                                  	;	mov	[es:fbigfat], bl
  5236                                  	;	mov	cl, [di+8]
  5237                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5238                                  	;	;sub	es:16D8h, ax
  5239                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5240                                  	;				; need a logical sector number that will
  5241                                  	;				; be used by getclus(diskrd procedure)
  5242                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5243                                  	;	;sbb	es:16DAh, ax
  5244                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5245                                  	; -----
  5246                                  		
  5247                                  	; -----	; 22/12/2022
  5248                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5249                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5250                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5251                                  					; get size of fat on media
  5252                                  		mov	[fbigfat], bl
  5253                                  		mov	cl, [es:di+8]
  5254                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5255                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5256                                  					; need a logical sector number that will
  5257                                  					; be used by getclus(diskrd procedure)
  5258                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5259                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5260                                  	; ------
  5261                                  
  5262                                  		xor	ch, ch	 ; cx = sectors/cluster
  5263                                  
  5264                                  	; the boot program has left the directory at 0:500h
  5265                                  
  5266                                  		push	ds
  5267                                  		xor	di, di
  5268                                  		mov	ds, di
  5269                                  		mov	bx, [53Ah]
  5270                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5271                                  					; (First cluster field of 2nd dir entry
  5272                                  					; of root directory in the buffer at 500h)
  5273                                  		pop	ds
  5274                                  loadit:
  5275                                  		mov	ax, SYSINITSEG	; 46Dh
  5276                                  		;mov	ax, 46Dh	; sysinit segment
  5277                                  		mov	es, ax
  5278                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5279                                  		;mov	es, [es:271h]
  5280                                  
  5281                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5282                                  ; ----------------------------------------------------------------------------
  5283                                  
  5284                                  		;test	byte [cs:fbigfat], fbig
  5285                                  		test	byte [cs:fbigfat], 40h ; fbig
  5286                                  		jnz	short eofbig
  5287                                  		cmp	bx, 0FF7h
  5288                                  		jmp	short iseofx
  5289                                  ; ----------------------------------------------------------------------------
  5290                                  
  5291                                  eofbig:
  5292                                  		cmp	bx, 0FFF7h
  5293                                  iseofx:
  5294                                  		jb	short loadit	; keep loading until cluster = eof
  5295                                  
  5296                                  %endif
  5297                                  ; ----------------------------------------------------------------------------
  5298                                  ; ----------------------------------------------------------------------------
  5299                                  
  5300 00001C0E E83D04                  		call	setdrvparms	; 
  5301                                  
  5302                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5303                                  		;jmp	far 46Dh:267h
  5304 00001C11 EA[6702]4004            		jmp	SYSINITSEG:SYSINITSTART
  5305                                  
  5306                                  ; =============== S U B	R O U T	I N E ========================================
  5307                                  
  5308                                  ; Following are subroutines to support resident device driver initialization
  5309                                  ;
  5310                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5311                                  
  5312                                  ;	M035 -- begin changed section
  5313                                  
  5314                                  ;******************************************************************************
  5315                                  ; module name: remap
  5316                                  ;
  5317                                  ; descriptive name: all the code for himem that could be separated from msbio
  5318                                  ;
  5319                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5320                                  ;	     letters) if more than two diskette drives on the system.
  5321                                  ;
  5322                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5323                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5324                                  ;	       letters. to do this, scan for disk drives and assign logical
  5325                                  ;	       drive number starting from 2 and then rescan diskette drives
  5326                                  ;	       and assign next to the last logical drive number of last disk
  5327                                  ;	       drive to the 3rd and 4th diskette drives.
  5328                                  
  5329                                  ; input:       none
  5330                                  ; exit:	drive letters have been remapped in bds chain
  5331                                  ; exit error:  none
  5332                                  ; called from: msinit
  5333                                  ;
  5334                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5335                                  ;	  found in the system
  5336                                  ;	  this function assumes that there are no more than 26 drives assigned
  5337                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5338                                  ;	  this function assumes that the first entries in the chain are
  5339                                  ;	   floppy drives, and all the rest are hard drives
  5340                                  ;	  will alter the boot drive if necessary to reflect remapping
  5341                                  ;
  5342                                  ;******************************************************************************
  5343                                  
  5344                                  ; 17/10/2022
  5345                                  ; 02/10/2022
  5346                                  
  5347                                  remap:		; proc near		
  5348 00001C16 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5349                                  
  5350                                  ; search for 1st fixed disk physical drive num
  5351                                  
  5352                                  drive_loop:				
  5353 00001C1B 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5354                                  					; first	hard disk??
  5355 00001C1F 7409                    		jz	short fdrv_found ; yes,	continue
  5356 00001C21 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5357                                  					; get next bds,	assume segment
  5358 00001C23 83FFFF                  		cmp	di, -1		; last bds?
  5359 00001C26 75F3                    		jnz	short drive_loop ; loop	if not
  5360 00001C28 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5361                                  
  5362                                  ;------------------------------------------------------------------------------
  5363                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5364                                  ;logical drive nums to 3, 4, 5 etc.
  5365                                  ;------------------------------------------------------------------------------
  5366                                  
  5367                                  fdrv_found:				
  5368 00001C2A B002                    		mov	al, 2		; start	with logical drv num=2
  5369                                  fdrv_loop:				
  5370 00001C2C 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5371                                  					; found	??
  5372 00001C2F 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5373                                  					; ds:di--> next	bds
  5374                                  		;inc	al		; set num for next drive
  5375                                  		; 18/12/2022
  5376 00001C31 40                      		inc	ax
  5377 00001C32 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5378 00001C35 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5379                                  
  5380                                  ;------------------------------------------------------------------------------
  5381                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5382                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5383                                  ; any more.
  5384                                  ;------------------------------------------------------------------------------
  5385                                  
  5386 00001C37 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5387                                  					; get first bds
  5388 00001C3C 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5389                                  					; ds:di-->bds2
  5390 00001C3E 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5391 00001C43 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5392                                  remap_loop1:				
  5393 00001C46 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5394                                  					; set new num to next floppy
  5395 00001C48 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5396 00001C4B FEC0                    		inc	al		; new number for next floppy
  5397 00001C4D FECC                    		dec	ah		; count	down extra floppies
  5398 00001C4F 75F5                    		jnz	short remap_loop1
  5399                                  
  5400                                  ; now we've got to adjust the boot drive if we reassigned it
  5401                                  
  5402 00001C51 2EA0[CA16]              		mov	al, [cs:drvfat]
  5403 00001C55 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5404 00001C57 7220                    		jb	short rmap_exit
  5405 00001C59 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5406 00001C5E 7204                    		jb	short remap_boot_flop ;	brif so
  5407                                  
  5408                                  ; we've got to remap the boot hard drive
  5409                                  ; subtract the number of EXTRA floppies from it
  5410                                  
  5411 00001C60 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5412 00001C62 EB05                    		jmp	short remap_change_boot_drv
  5413                                  ; ---------------------------------------------------------------------------
  5414                                  
  5415                                  ; we've got to remap the boot floppy.
  5416                                  ; add the number of hard drive partitions to it
  5417                                  
  5418                                  remap_boot_flop:			
  5419 00001C64 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5420                                  remap_change_boot_drv:			
  5421 00001C69 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5422 00001C6D FEC0                    		inc	al
  5423 00001C6F 1E                      		push	ds
  5424 00001C70 BF4004                  		mov	di, SYSINITSEG	; 46Dh
  5425                                  		;mov	di, 46Dh	; SYSINIT segment
  5426 00001C73 8EDF                    		mov	ds, di
  5427 00001C75 A2[9602]                		mov	[DEFAULTDRIVE], al
  5428                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5429                                  					; pass it to sysinit as	well
  5430 00001C78 1F                      		pop	ds
  5431                                  rmap_exit:				
  5432 00001C79 C3                      		retn
  5433                                  
  5434                                  ; =============== S U B	R O U T	I N E =======================================
  5435                                  
  5436                                  ; 17/10/2022
  5437                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5438                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5439                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5440                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5441                                  ;**************************************************
  5442                                  ; getboot - get the boot sector for a hard disk
  5443                                  ;
  5444                                  ; Reads the boot sector from a specified drive into
  5445                                  ; a buffer at the top of memory.
  5446                                  ;
  5447                                  ; dl = int13 drive number to read boot sector for
  5448                                  ;**************************************************
  5449                                  
  5450                                  ; 17/10/2022
  5451                                  bootbias equ 200h
  5452                                  
  5453                                  getboot:	; proc near		
  5454                                  		
  5455                                  		; 08/04/2018
  5456                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5457                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5458                                  		; 02/10/2022 - Retro DOS v4.0
  5459                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5460                                  
  5461 00001C7A 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5462 00001C7E 8EC0                    		mov	es, ax
  5463                                  		; 17/10/2022
  5464 00001C80 BB0002                  		mov	bx, bootbias ; 200h
  5465                                  		;mov	bx, 200h	; bootbias
  5466                                  					; load BX, ES:BX is where sector goes
  5467 00001C83 B80102                  		mov	ax, 201h
  5468 00001C86 30F6                    		xor	dh, dh
  5469 00001C88 B90100                  		mov	cx, 1
  5470 00001C8B CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5471                                  					; AL = number of sectors to read, CH = track, CL = sector
  5472                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5473                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5474 00001C8D 7209                    		jb	short erret
  5475                                  		; 17/10/2022
  5476 00001C8F 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5477                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5478                                  					; Dave Litton magic word?
  5479 00001C96 7401                    		jz	short norm_ret	; yes
  5480                                  erret:					
  5481 00001C98 F9                      		stc
  5482                                  norm_ret:				
  5483 00001C99 C3                      		retn
  5484                                  
  5485                                  ; =============== S U B	R O U T	I N E =======================================
  5486                                  
  5487                                  ; 28/12/2018 - Retro DOS v4.0 
  5488                                  
  5489                                  ;***************************************************************************
  5490                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5491                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5492                                  ;   our own logical sectors start. we also read in our boot sector to
  5493                                  ;   determine version number
  5494                                  ;
  5495                                  ;   inputs:	dl is rom drive number (80...)
  5496                                  ;		bh is partition number (0....) 
  5497                                  ;		ds:di points to bds
  5498                                  ;   outputs:	carry clear -> bpb is filled in
  5499                                  ;		carry set   -> bpb is left uninitialized due to error
  5500                                  ;	trashes (at least) si, cx
  5501                                  ;	MUST PRESERVE ES:!!!!
  5502                                  ;***************************************************************************
  5503                                  
  5504                                  sethard:	; proc near		
  5505 00001C9A 57                      		push	di
  5506 00001C9B 53                      		push	bx
  5507 00001C9C 1E                      		push	ds
  5508 00001C9D 06                      		push	es
  5509 00001C9E 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5510 00001CA1 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5511 00001CA4 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5512                                  					; fnon_removable
  5513 00001CA8 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5514                                  					; ffHardFile
  5515 00001CAC C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5516 00001CB1 88FE                    		mov	dh, bh		; partition number
  5517 00001CB3 52                      		push	dx
  5518 00001CB4 B408                    		mov	ah, 8
  5519 00001CB6 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5520                                  					; DL = drive number
  5521                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5522                                  					; DL = number of consecutive drives
  5523                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5524 00001CB8 FEC6                    		inc	dh
  5525 00001CBA 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5526 00001CBD 5A                      		pop	dx
  5527 00001CBE 7263                    		jb	short setret	; error	if no hard disk
  5528 00001CC0 80E13F                  		and	cl, 3Fh
  5529 00001CC3 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5530 00001CC6 52                      		push	dx		; save partition number
  5531 00001CC7 E8B0FF                  		call	getboot
  5532 00001CCA 5A                      		pop	dx		; restore partition number
  5533 00001CCB 7256                    		jb	short setret
  5534 00001CCD BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5535                                  
  5536                                  ; The first 'active' partition is 00, the second is 01....
  5537                                  ;   then the remainder of the 'primary' but non-active partitions
  5538                                  
  5539                                  act_part:				
  5540 00001CD0 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5541 00001CD5 7418                    		jz	short no_act	; no
  5542 00001CD7 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5543 00001CDB 740C                    		jz	short got_good_act
  5544 00001CDD 26803F04                		cmp	byte [es:bx], 4
  5545 00001CE1 7406                    		jz	short got_good_act
  5546 00001CE3 26803F06                		cmp	byte [es:bx], 6
  5547 00001CE7 7506                    		jnz	short no_act
  5548                                  got_good_act:				
  5549 00001CE9 08F6                    		or	dh, dh		; is this our target partition #?
  5550 00001CEB 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5551 00001CED FECE                    		dec	dh		; count	down
  5552                                  no_act:					
  5553 00001CEF 83C310                  		add	bx, 16
  5554 00001CF2 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5555                                  					; last entry done?
  5556 00001CF6 75D8                    		jnz	short act_part	; no, process next entry
  5557 00001CF8 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5558                                  					; restore original value of bx
  5559                                  
  5560                                  ; Now scan the non-active partitions
  5561                                  
  5562                                  get_primary:				
  5563 00001CFB 26F647FC80              		test	byte [es:bx-4], 80h
  5564 00001D00 7518                    		jnz	short not_prim	; we've already scanned
  5565                                  					; the ACTIVE ones
  5566 00001D02 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5567 00001D06 740C                    		jz	short got_prim
  5568 00001D08 26803F04                		cmp	byte [es:bx], 4
  5569 00001D0C 7406                    		jz	short got_prim
  5570 00001D0E 26803F06                		cmp	byte [es:bx], 6
  5571 00001D12 7506                    		jnz	short not_prim
  5572                                  got_prim:				
  5573 00001D14 08F6                    		or	dh, dh		; is this our target partition?
  5574 00001D16 740F                    		jz	short set2
  5575 00001D18 FECE                    		dec	dh
  5576                                  not_prim:				
  5577 00001D1A 83C310                  		add	bx, 16
  5578 00001D1D 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5579 00001D21 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5580                                  setret:					
  5581 00001D23 F9                      		stc			; error	return
  5582 00001D24 E9DC02                  		jmp	ret_hard_err
  5583                                  
  5584                                  ; ---------------------------------------------------------------------------
  5585                                  
  5586                                  ;  until we get the real logical boot record and get the bpb,
  5587                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5588                                  ;  for the convenience of the computation.
  5589                                  ;
  5590                                  ;  at the end of this procedure, if a bpb information is gotten from
  5591                                  ;  the valid boot record, then we are going to use those bpb information
  5592                                  ;  without change.
  5593                                  ;
  5594                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5595                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5596                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5597                                  
  5598                                  set2:					
  5599 00001D27 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5600                                  			; save the rom bios drive number we are handling now.
  5601 00001D2C 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5602 00001D30 268B5706                		mov	dx, [es:bx+6]
  5603                                  
  5604                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5605                                  ; sectors should be allowed	
  5606                                  
  5607 00001D34 83E801                  		sub	ax, 1
  5608 00001D37 83DA00                  		sbb	dx, 0
  5609 00001D3A 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5610 00001D3E 2613570A                		adc	dx, [es:bx+10]
  5611 00001D42 7305                    		jnb	short okdrive
  5612 00001D44 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5613                                  okdrive:				
  5614 00001D49 268B4704                		mov	ax, [es:bx+4]
  5615 00001D4D 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5616                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5617 00001D50 268B4706                		mov	ax, [es:bx+6]
  5618 00001D54 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5619 00001D57 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5620 00001D5B 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5621 00001D5F 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5622 00001D62 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5623                                  					; bpb->maxsec =	p->partitionlength
  5624 00001D65 83FA00                  		cmp	dx, 0
  5625 00001D68 7705                    		ja	short okdrive_1
  5626 00001D6A 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5627 00001D6D 72B4                    		jb	short setret	; return -1;
  5628                                  okdrive_1:				
  5629 00001D6F 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5630 00001D72 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5631 00001D75 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5632                                  					; usually equal	to the # of sec/trk.
  5633 00001D77 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5634 00001D7A 50                      		push	ax
  5635 00001D7B 89D0                    		mov	ax, dx
  5636 00001D7D 31D2                    		xor	dx, dx
  5637 00001D7F F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5638                                  					; (track)temp_h:ax + (sector)dx
  5639                                  		; 17/10/2022
  5640 00001D81 2EA3[2905]              		mov	[cs:temp_h], ax
  5641 00001D85 58                      		pop	ax
  5642 00001D86 F7F3                    		div	bx
  5643 00001D88 88D1                    		mov	cl, dl
  5644 00001D8A FEC1                    		inc	cl
  5645 00001D8C 31DB                    		xor	bx, bx
  5646 00001D8E 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5647 00001D91 50                      		push	ax
  5648 00001D92 31D2                    		xor	dx, dx
  5649 00001D94 2EA1[2905]              		mov	ax, [cs:temp_h]
  5650 00001D98 F7F3                    		div	bx
  5651 00001D9A 2EA3[2905]              		mov	[cs:temp_h], ax
  5652 00001D9E 58                      		pop	ax
  5653 00001D9F F7F3                    		div	bx		;  dl is head, ax is cylinder
  5654 00001DA1 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5655 00001DA7 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5656 00001DA9 3D0004                  		cmp	ax, 1024
  5657 00001DAC 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5658                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5659                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5660                                  			; ('ja' must be 'jnb')
  5661                                  okdrive_2:
  5662                                   		; 28/07/2019
  5663                                  ; dl is head.
  5664                                  ; ax is cylinder
  5665                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5666                                  
  5667                                  ;*** for mini disks ***
  5668                                  
  5669 00001DAE 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5670                                  					; check	for mini disk
  5671 00001DB2 7503                    		jnz	short oknotmini	; not mini disk.
  5672 00001DB4 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5673                                  					; set the physical track number
  5674                                  oknotmini:
  5675                                  ;*** end of added logic for mini disk
  5676                                  				
  5677 00001DB7 D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5678 00001DB9 D0CC                    		ror	ah, 1		; two bits of upper byte
  5679 00001DBB 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5680 00001DBE 08E1                    		or	cl, ah		; move two bits	to correct spot
  5681 00001DC0 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5682                                  					; cl is	sector + 2 high	bits of	cylinder
  5683 00001DC2 88D6                    		mov	dh, dl		; dh is	head
  5684 00001DC4 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5685                                  
  5686                                  ; cl is sector + 2 high bits of cylinder
  5687                                  ; ch is low 8 bits of cylinder
  5688                                  ; dh is head
  5689                                  ; dl is drive
  5690                                  
  5691                                  ; for convenience, we are going to read the logical boot sector
  5692                                  ; into cs:disksector area.
  5693                                  
  5694                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5695                                  ; is to be read in is cs:disksector.
  5696                                  
  5697 00001DC9 0E                      		push	cs
  5698 00001DCA 07                      		pop	es
  5699 00001DCB BB[4E01]                		mov	bx, disksector	; for convenience,
  5700                                  					; we are going to read the logical boot	sector
  5701                                  					; into cs:disksector area.
  5702 00001DCE B80102                  		mov	ax, 201h
  5703 00001DD1 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5704                                  					; AL = number of sectors to read, CH = track, CL = sector
  5705                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5706                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5707                                  
  5708                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5709                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5710                                  ; media if we recognize the version number.
  5711                                  
  5712 00001DD3 BB[4E01]                		mov	bx, disksector
  5713 00001DD6 53                      		push	bx
  5714 00001DD7 50                      		push	ax
  5715 00001DD8 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5716 00001DDC 740D                    		jz	short check_1_ok ; yes
  5717 00001DDE 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5718 00001DE2 7529                    		jnz	short invalid_boot_record ; no
  5719 00001DE4 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5720 00001DE9 7522                    		jnz	short invalid_boot_record
  5721                                  check_1_ok:				
  5722                                  		; 14/08/2023
  5723 00001DEB BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5724                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5725                                  					; point	to the bpb in the boot record
  5726 00001DEE 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5727                                  					; get the mediadescriptor byte
  5728 00001DF2 24F0                    		and	al, 0F0h	; mask off low nibble
  5729 00001DF4 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5730 00001DF6 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5731 00001DF8 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5732 00001DFD 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5733                                  
  5734                                  check2_ok:				; yes, mediadescriptor ok.
  5735 00001DFF 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5736                                  					; the sectorspercluster	is
  5737                                  					; a power of 2
  5738                                  					;
  5739                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5740                                  					; get the sectorspercluster
  5741 00001E03 08C0                    		or	al, al		; is it	zero?
  5742 00001E05 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5743                                  
  5744                                  ck_power_of_two:			
  5745 00001E07 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5746 00001E09 73FC                    		jnb	short ck_power_of_two
  5747 00001E0B 7405                    		jz	short valid_boot_record
  5748                                  
  5749                                  invalid_boot_record:			
  5750 00001E0D 58                      		pop	ax
  5751 00001E0E 5B                      		pop	bx
  5752 00001E0F E93301                  		jmp	unknown		; jump to invalid boot record
  5753                                  					; unformatted or illegal media.
  5754                                  ; ---------------------------------------------------------------------------
  5755                                  
  5756                                  valid_boot_record:			
  5757 00001E12 58                      		pop	ax
  5758 00001E13 5B                      		pop	bx
  5759                                  
  5760                                  ; Signature found. Now check version.
  5761                                  
  5762 00001E14 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5763                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5764 00001E1A 750F                    		jnz	short try5
  5765 00001E1C 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5766                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5767 00001E21 7508                    		jnz	short try5
  5768 00001E23 EB2F                    		jmp	short copybpb
  5769                                  ; ---------------------------------------------------------------------------
  5770                                  
  5771                                  setret_brdg:				
  5772 00001E25 E9FBFE                  		jmp	setret
  5773                                  ; ---------------------------------------------------------------------------
  5774                                  
  5775                                  unknown3_0_j:				
  5776 00001E28 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5777                                  					; although, content might be bad.
  5778                                  ; ---------------------------------------------------------------------------
  5779                                  
  5780                                  try5:					
  5781 00001E2B E8DA01                  		call	cover_fdisk_bug
  5782                                  
  5783                                  ; see if it is an os2 signature
  5784                                  
  5785 00001E2E 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5786                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5787 00001E34 750D                    		jnz	short no_os2
  5788 00001E36 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5789 00001E3A 2C31                    		sub	al, '1'
  5790                                  		;sub	al, 31h		; '1'
  5791 00001E3C 24FE                    		and	al, 0FEh
  5792 00001E3E 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5793 00001E40 E90201                  		jmp	unknown
  5794                                  ; ---------------------------------------------------------------------------
  5795                                  
  5796                                  ; no os2 signature, this is to check for real dos versions
  5797                                  
  5798                                  no_os2:					
  5799 00001E43 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5800                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5801 00001E49 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5802                                  					; do not trust it, but still legal.
  5803 00001E4B 7507                    		jnz	short copybpb	; honor	os2 boot record
  5804                                  					; or dos 4.0 version
  5805 00001E4D 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5806                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5807 00001E52 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5808                                  copybpb:
  5809                                  
  5810                                  ; 03/10/2022
  5811                                  
  5812                                  ; we have a valid boot sector. use the bpb in it to build the
  5813                                  ; bpb in bios. it is assumed that only
  5814                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5815                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5816                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5817                                  ; need to be set (all other values in already). fbigfat is also set.
  5818                                  
  5819                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5820                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5821                                  ; and system id according to the boot record.
  5822                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5823                                  
  5824                                  		; 10/12/2022
  5825                                  		; (number of FATs optimization)
  5826 00001E54 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5827                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5828 00001E57 2E8A4C05                		mov	cl, [cs:si+05h]
  5829                                  		
  5830 00001E5B 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5831                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5832                                  					; [disksector+EXT_BOOT.SIG]
  5833                                  					; EXT_BOOT_SIGNATURE
  5834 00001E60 754E                    		jnz	short copybpb_fat ; conventional fat system
  5835                                  
  5836                                  		; 03/10/2022
  5837                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5838                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5839                                  		;	     number of FATs must be 2 ; =*?=
  5840                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5841                                  		;
  5842                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5843                                  
  5844                                  		; 10/12/2022
  5845                                  		;cmp	byte [cs:disksector+10h], 0
  5846                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5847                                  		;jnz	short copybpb_fat ; a fat system.
  5848 00001E62 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5849 00001E64 754A                    		jnz	short copybpb_fat ; a fat system.
  5850                                  
  5851                                  ; non fat based	media.
  5852                                  
  5853 00001E66 57                      		push	di
  5854 00001E67 1E                      		push	ds
  5855 00001E68 1E                      		push	ds
  5856 00001E69 07                      		pop	es
  5857 00001E6A 0E                      		push	cs
  5858 00001E6B 1F                      		pop	ds
  5859                                  
  5860                                  		; 10/12/2022
  5861                                  		; (number of FATs optimization)
  5862                                  		; SI = disksector+11
  5863                                  		; 17/10/2022
  5864                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5865                                  		;mov	si, disksector+11
  5866 00001E6C 83C706                  		add	di, 6		; add di,BDS.BPB
  5867                                  
  5868                                  ; just for completeness, we'll make sure that total_sectors and
  5869                                  ; big_total_sectors aren't both zero. I've seen examples of
  5870                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5871                                  ; got that way. If it occurs, then use the values from the
  5872                                  ; partition table.
  5873                                  
  5874                                  		; 18/12/2022
  5875 00001E6F 29C9                    		sub	cx, cx 
  5876                                  
  5877                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5878                                  		;jnz	short already_nonz 
  5879                                  		;			; how about big_total?
  5880                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5881                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5882                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5883                                  		;jnz	short already_nonz
  5884                                  
  5885                                  		; 18/12/2022
  5886 00001E71 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5887 00001E75 7521                    		jnz	short already_nonz
  5888                                  					     ; how about big_total?
  5889 00001E77 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5890 00001E7B 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5891 00001E7D 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5892 00001E81 7515                    		jnz	short already_nonz
  5893                                  
  5894                                  ; now let's copy the values from the partition table (now in the BDS)
  5895                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5896                                  
  5897 00001E83 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5898 00001E86 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5899 00001E8A 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5900 00001E8D 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5901 00001E91 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5902 00001E94 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5903                                  
  5904                                  already_nonz:	
  5905                                  		; 18/12/2022
  5906                                  		; cx = 0
  5907 00001E98 B119                    		mov	cl, 25		
  5908                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5909 00001E9A F3A4                    		rep movsb
  5910 00001E9C 1F                      		pop	ds
  5911 00001E9D 5F                      		pop	di
  5912 00001E9E 06                      		push	es
  5913 00001E9F 1E                      		push	ds
  5914 00001EA0 07                      		pop	es
  5915 00001EA1 0E                      		push	cs
  5916 00001EA2 1F                      		pop	ds
  5917                                  		; 13/08/2023
  5918 00001EA3 BD[3807]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5919                                  		; 18/12/2022
  5920                                  		;mov	bp, mov_media_ids
  5921                                  		;;mov	bp, 751h	; mov_media_ids
  5922                                  					; at 2C7h:751h = 70h:2CC1h
  5923                                  					; set volume id, systemid, serial.
  5924 00001EA6 0E                      		push	cs		; simulate far call
  5925 00001EA7 E8ADF8                  		call	call_bios_code
  5926 00001EAA 06                      		push	es
  5927 00001EAB 1F                      		pop	ds
  5928 00001EAC 07                      		pop	es
  5929 00001EAD E94B01                  		jmp	goodret
  5930                                  ; ---------------------------------------------------------------------------
  5931                                  
  5932                                  ; ****** cas ---
  5933                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5934                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5935                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5936                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5937                                  ; from the boot sector into the DPB anyway, we've just been using
  5938                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5939                                  ; we'll go ahead and copy it into the DPB, except in the case
  5940                                  ; that it equals zero, in which case we just use the values in
  5941                                  ; the DPB from the partition table.
  5942                                  
  5943                                  ; 17/10/2022
  5944                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5945                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5946                                  ; 09/12/2022
  5947                                  MOVMEDIAIDS equ mov_media_ids
  5948                                  CLEARIDS equ clear_ids
  5949                                  ; 11/09/2023
  5950                                  CLEARIDS_X equ clear_ids_x
  5951                                  
  5952                                  copybpb_fat:
  5953                                  		; 10/12/2022
  5954                                  		; (number of FATs optimization)
  5955                                  		; SI = disksector+11				
  5956                                  		; 17/10/2022
  5957                                  		;mov	si, disksector+11
  5958                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5959                                  					; cs:si	-> bpb in boot
  5960 00001EB0 31D2                    		xor	dx, dx
  5961 00001EB2 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  5962                                  					; get totsec from boot sec
  5963 00001EB6 09C0                    		or	ax, ax
  5964 00001EB8 7516                    		jnz	short copy_totsec ; if non zero, use that
  5965 00001EBA 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  5966                                  					; get the big version
  5967                                  					; (32 bit total	sectors)
  5968 00001EBE 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5969                                  		; 10/12/2022
  5970                                  		; (number of FATs optimization)
  5971                                  		; CL = number of FATs (2 or 1) 
  5972 00001EC2 89D3                    		mov	bx, dx		; see if it is a big zero
  5973 00001EC4 09C3                    		or	bx, ax
  5974 00001EC6 7508                    		jnz	short copy_totsec
  5975                                  			; screw it. it	was bogus.
  5976 00001EC8 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5977 00001ECB 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5978 00001ECE EB06                    		jmp	short fat_big_small
  5979                                  
  5980                                  		;mov	cx, dx
  5981                                  		;or	cx, ax		; see if it is a big zero
  5982                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  5983                                  copy_totsec:				
  5984 00001ED0 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5985                                  					; make DPB match boot sec
  5986 00001ED3 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5987                                  
  5988                                  		; 10/12/2022
  5989                                  ;totsec_already_set:			
  5990                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5991                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5992                                  
  5993                                  ; determine fat entry size.
  5994                                  
  5995                                  fat_big_small:
  5996                                  
  5997                                  ;at this moment dx;ax = total sector number
  5998                                  
  5999                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6000                                  ;from the BPB on the disk
  6001                                  				
  6002 00001ED6 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6003                                  					; get #reserved_sectors	from BPB
  6004 00001EDA 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6005                                  					; update BDS field
  6006 00001EDD 29D8                    		sub	ax, bx
  6007 00001EDF 83DA00                  		sbb	dx, 0		; update the count
  6008 00001EE2 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6009                                  					; bx = sectors/fat
  6010 00001EE6 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6011                                  					; set in bds bpb
  6012                                  		; 10/12/2022
  6013                                  		; (number of FATs optimization)
  6014                                  		; CL = number of FATs (2 or 1) 
  6015                                  		;dec	cl ; *
  6016                                  		; 18/12/2022
  6017 00001EE9 49                      		dec	cx ; *
  6018 00001EEA D3E3                    		shl	bx, cl			
  6019                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6020                                  		
  6021 00001EEC 29D8                    		sub	ax, bx		; sub #	fat sectors
  6022 00001EEE 83DA00                  		sbb	dx, 0
  6023 00001EF1 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6024                                  					; # root entries
  6025 00001EF5 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6026                                  					; set in bds bpb
  6027 00001EF8 B104                    		mov	cl, 4
  6028 00001EFA D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6029 00001EFC 29D8                    		sub	ax, bx		; sub #	dir sectors
  6030 00001EFE 83DA00                  		sbb	dx, 0		;
  6031                                  					; dx:ax	now contains the
  6032                                  					; # of data sectors
  6033 00001F01 31C9                    		xor	cx, cx ; *
  6034 00001F03 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6035                                  					; sectors per cluster
  6036 00001F07 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6037                                  					; set in bios bpb
  6038 00001F0A 50                      		push	ax
  6039 00001F0B 89D0                    		mov	ax, dx
  6040 00001F0D 31D2                    		xor	dx, dx
  6041 00001F0F F7F1                    		div	cx		; cx = sectors per cluster
  6042 00001F11 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6043                                  					; # clusters.
  6044 00001F15 58                      		pop	ax
  6045 00001F16 F7F1                    		div	cx
  6046 00001F18 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6047 00001F1E 771C                    		ja	short toobig_ret ; too big cluster number
  6048 00001F20 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6049                                  					; is this 16-bit fat?
  6050 00001F23 7205                    		jb	short copymediaid ; no,	small fat
  6051                                  		; 17/10/2022
  6052 00001F25 800E[CC16]40            		or	byte [fbigfat], 40h
  6053                                  		;or	ds:fbigfat, 40h	; fbig
  6054                                  					; 16 bit fat
  6055                                  copymediaid:				
  6056 00001F2A 06                      		push	es
  6057 00001F2B 1E                      		push	ds
  6058 00001F2C 07                      		pop	es
  6059 00001F2D 0E                      		push	cs
  6060 00001F2E 1F                      		pop	ds
  6061                                  		; 17/10/2022
  6062 00001F2F BD[3807]                		mov	bp, MOVMEDIAIDS
  6063                                  		;mov	bp, 751h	; mov_media_ids
  6064                                  					; at 2C7h:751h = 70h:2CC1h
  6065                                  					; copy filesys_id, volume label
  6066 00001F32 0E                      		push	cs		; simulate far call
  6067 00001F33 E821F8                  		call	call_bios_code
  6068 00001F36 06                      		push	es
  6069 00001F37 1F                      		pop	ds
  6070 00001F38 07                      		pop	es
  6071 00001F39 E9A100                  		jmp	massage_bpb	; now final check for bpb info
  6072                                  					; and return.
  6073                                  ; ---------------------------------------------------------------------------
  6074                                  
  6075                                  toobig_ret:				
  6076 00001F3C 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6077 00001F42 E9B600                  		jmp	goodret		; still	drive letter is	assigned
  6078                                  					; but useless. to big for
  6079                                  					; current pc dos fat file system
  6080                                  ; ---------------------------------------------------------------------------
  6081                                  
  6082                                  unknown:	
  6083                                  		; 12/12/2022
  6084 00001F45 804D2402                		or	byte [di+24h], 02h			
  6085                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6086                                  					; unformatted_media
  6087                                  					; Set unformatted media	flag.
  6088                                  
  6089                                  ; the boot signature may not be	recognizable,
  6090                                  ; but we should	try and	read it	anyway.
  6091                                  
  6092                                  unknown3_0:				
  6093 00001F49 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6094                                  					; [di+BDS.totalsecs32+2]
  6095 00001F4C 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6096 00001F4F BE[FC16]                		mov	si, disktable2
  6097                                  
  6098                                  scan:					
  6099 00001F52 2E3B14                  		cmp	dx, [cs:si]
  6100 00001F55 720D                    		jb	short gotparm
  6101 00001F57 7706                    		ja	short scan_next
  6102 00001F59 2E3B4402                		cmp	ax, [cs:si+2]
  6103 00001F5D 7605                    		jbe	short gotparm
  6104                                  
  6105                                  scan_next:				
  6106 00001F5F 83C60A                  		add	si, 10		; 5*2
  6107 00001F62 EBEE                    		jmp	short scan	; covers upto 512 mb media
  6108                                  ; ---------------------------------------------------------------------------
  6109                                  
  6110                                  gotparm:				
  6111 00001F64 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6112                                  		;or	ds:fbigfat, cl
  6113                                  		; 17/10/2022
  6114 00001F67 080E[CC16]              		or	[fbigfat], cl
  6115 00001F6B 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6116                                  					; cl = log base	2 of ch
  6117 00001F6F 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6118                                  
  6119                                  ; now calculate size of fat table
  6120                                  
  6121 00001F73 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6122                                  					; save number of (root)	dir entries
  6123 00001F76 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6124 00001F79 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6125 00001F7C 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6126                                  					; save sectors per cluster
  6127                                  		; 17/10/2022
  6128 00001F7F F606[CC16]40            		test	byte [fbigfat], 40h
  6129                                  		;test	ds:fbigfat, 40h	; fbig
  6130                                  					; if (fbigfat)
  6131 00001F84 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6132                                  
  6133                                  ; we don't need to change "small fat" logic since it is gauranteed
  6134                                  ; that double word total sector will not use 12 bit fat (unless
  6135                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6136                                  ; so in this case we assume dx = 0 !!
  6137                                  
  6138 00001F86 31DB                    		xor	bx, bx		; (12 bit fat)
  6139 00001F88 88EB                    		mov	bl, ch
  6140 00001F8A 4B                      		dec	bx
  6141 00001F8B 01C3                    		add	bx, ax		; dx=0
  6142 00001F8D D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6143 00001F8F 43                      		inc	bx		; BDS.secperclus
  6144 00001F90 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6145 00001F93 89DE                    		mov	si, bx
  6146 00001F95 D1EB                    		shr	bx, 1
  6147 00001F97 01F3                    		add	bx, si
  6148 00001F99 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6149 00001F9D D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6150 00001F9F 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6151                                  					; save number of fat sectors
  6152 00001FA2 EB39                    		jmp	short massage_bpb
  6153                                  ; ---------------------------------------------------------------------------
  6154                                  
  6155                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6156                                  
  6157                                  dobig:					
  6158 00001FA4 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6159 00001FA6 52                      		push	dx		; save total sectors (high)
  6160 00001FA7 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6161 00001FAA D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6162 00001FAC 29D0                    		sub	ax, dx
  6163 00001FAE 5A                      		pop	dx
  6164 00001FAF 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6165 00001FB2 83E801                  		sub	ax, 1
  6166 00001FB5 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6167                                  					; total	secs - reserved	secs - root dir	secs
  6168 00001FB8 B302                    		mov	bl, 2
  6169 00001FBA 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6170                                  					; bx = 256 * BDS.secperclus + 2
  6171                                  
  6172                                  ; I don't understand why to add bx here!!!
  6173                                  
  6174                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6175                                  		; 27/09/2022
  6176                                  		; (Microsoft FAT32 File	System Specification,
  6177                                  		; December 2000, Page 21)
  6178                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6179                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6180                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6181                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6182                                  		
  6183 00001FBD 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6184 00001FBF 83D200                  		adc	dx, 0
  6185 00001FC2 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6186 00001FC5 83DA00                  		sbb	dx, 0
  6187                                  
  6188                                  ; assuming dx in the table will never be bigger than bx.
  6189                                  
  6190 00001FC8 F7F3                    		div	bx		; BDS.fatsecs =
  6191                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6192 00001FCA 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6193                                  					; number of fat	sectors
  6194                                  
  6195                                  ; now, set the default filesys_id, volume label, serial number
  6196                                  
  6197                                  		;;mov	bl, ds:fbigfat
  6198                                  		; 11/09/2023
  6199                                  		; 17/10/2022
  6200                                  		;mov	bl, [fbigfat]
  6201                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6202                                  
  6203 00001FCD 1E                      		push	ds
  6204 00001FCE 1E                      		push	ds
  6205 00001FCF 07                      		pop	es
  6206 00001FD0 0E                      		push	cs
  6207 00001FD1 1F                      		pop	ds
  6208                                  		; 11/09/2023
  6209 00001FD2 A0[CC16]                		mov	al, [fbigfat]
  6210 00001FD5 BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6211                                  		; 17/10/2022
  6212                                  		;mov	bp, CLEARIDS
  6213                                  		;;mov	bp, 5D9h	; clear_ids
  6214                                  					; at 2C7h:5D9h = 70h:2B49h
  6215 00001FD8 0E                      		push	cs
  6216 00001FD9 E87BF7                  		call	call_bios_code
  6217 00001FDC 1F                      		pop	ds
  6218                                  
  6219                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6220                                  ; set according to the partition information. we are going to
  6221                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6222                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6223                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6224                                  ; we don't do this for the bpb information from the boot record. we
  6225                                  ; are not going to change the bpb information from the boot record.
  6226                                  
  6227                                  massage_bpb:
  6228                                  		; 11/09/2023
  6229                                  		;; 12/12/2022
  6230                                  		;mov	bl, [fbigfat]
  6231                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6232                                  		;			; set size of fat on media
  6233                                  		
  6234 00001FDD 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6235 00001FE0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6236 00001FE3 83FA00                  		cmp	dx, 0		; double word total sectors?
  6237                                  		;ja	short goodret	; don't have to change it.
  6238                                  		; 12/12/2022
  6239 00001FE6 771B                    		ja	short short goodret2
  6240                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6241                                  		;ja	short goodret	; don't have to change it.
  6242                                  		; 12/12/2022
  6243 00001FE8 395519                  		cmp	[di+19h], dx ; 0
  6244 00001FEB 7716                    		ja	short goodret2
  6245 00001FED 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6246                                  		;jb	short goodret
  6247                                  		; 12/12/2022
  6248 00001FF0 7209                    		jc	short goodret
  6249 00001FF2 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6250 00001FF5 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6251                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6252                                  		; 12/12/2022
  6253 00001FF8 89551B                  		mov	[di+1Bh], dx ; 0 
  6254                                  goodret:				
  6255                                  		;mov	bl, ds:fbigfat
  6256                                  		; 11/09/2023
  6257                                  		; 12/12/2022
  6258                                  		; 17/10/2022
  6259 00001FFB 8A1E[CC16]              		mov	bl, [fbigfat]
  6260 00001FFF 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6261                                  		;			; set size of fat on media
  6262 00002002 F8                      		clc
  6263                                  ret_hard_err:
  6264                                  		; 12/12/2022
  6265                                  goodret2:					
  6266 00002003 07                      		pop	es
  6267 00002004 1F                      		pop	ds
  6268 00002005 5B                      		pop	bx
  6269 00002006 5F                      		pop	di
  6270 00002007 C3                      		retn
  6271                                  
  6272                                  ; =============== S U B	R O U T	I N E =======================================
  6273                                  
  6274                                  ; 15/10/2022
  6275                                  
  6276                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6277                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6278                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6279                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6280                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6281                                  
  6282                                  		; 17/10/2022
  6283                                  cover_fdisk_bug:	
  6284 00002008 50                      		push	ax
  6285 00002009 52                      		push	dx
  6286 0000200A 56                      		push	si
  6287 0000200B 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6288                                  					; [disksector+EXT_BOOT.SIG],
  6289                                  					; EXT_BOOT_SIGNATURE
  6290 00002011 7431                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6291 00002013 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6292 00002019 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6293 0000201B 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6294 00002020 7522                    		jnz	short cfb_retit
  6295                                  cfb_chk_BPB_TOTALSECTORS:
  6296                                  		; 17/10/2022		
  6297 00002022 BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6298                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6299 00002025 2E837C0800              		cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6300                                  					; just to make sure.
  6301 0000202A 7418                    		jz	short cfb_retit
  6302 0000202C 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6303 00002030 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6304 00002034 730E                    		jnb	short cfb_retit
  6305 00002036 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6306 00002038 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6307                                  					; then decrease	BPB_TOTALSECTORS by 1
  6308 0000203C 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6309 00002040 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6310                                  cfb_retit:				
  6311 00002044 5E                      		pop	si
  6312 00002045 5A                      		pop	dx
  6313 00002046 58                      		pop	ax
  6314 00002047 C3                      		retn
  6315                                  
  6316                                  ; ---------------------------------------------------------------------------
  6317                                  
  6318 00002048 0200                    word2		dw 2			
  6319 0000204A 0300                    word3		dw 3			
  6320 0000204C 0002                    word512		dw 512			
  6321                                  
  6322                                  ; =============== S U B	R O U T	I N E =======================================
  6323                                  
  6324                                  ; 15/10/2022
  6325                                  
  6326                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6327                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6328                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6329                                  ; as the bpb on the drive.
  6330                                  ;
  6331                                  ; no attempt is made to preserve registers since we are going to jump to
  6332                                  ; sysinit straight after this routine.
  6333                                  
  6334                                  setdrvparms:
  6335 0000204E 31DB                    		xor	bx, bx
  6336                                  		; 18/10/2022
  6337 00002050 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6338                                  _next_bds:				
  6339 00002054 06                      		push	es
  6340 00002055 57                      		push	di
  6341 00002056 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6342 0000205A 80FB05                  		cmp	bl, 5		; ffHardFile
  6343 0000205D 753E                    		jnz	short nothardff
  6344 0000205F 31D2                    		xor	dx, dx
  6345 00002061 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6346 00002065 09C0                    		or	ax, ax
  6347 00002067 7508                    		jnz	short get_ccyl
  6348 00002069 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6349 0000206D 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6350                                  
  6351                                  get_ccyl:				
  6352 00002071 52                      		push	dx
  6353 00002072 50                      		push	ax
  6354 00002073 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6355 00002077 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6356                                  					; assume sectors per cyl. < 64k.
  6357 0000207B 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6358 0000207D 58                      		pop	ax
  6359 0000207E 5A                      		pop	dx		; dx:ax	= total	sectors
  6360 0000207F 50                      		push	ax
  6361 00002080 89D0                    		mov	ax, dx
  6362 00002082 31D2                    		xor	dx, dx
  6363 00002084 F7F1                    		div	cx
  6364 00002086 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6365 0000208A 58                      		pop	ax
  6366 0000208B F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6367 0000208D 09D2                    		or	dx, dx
  6368 0000208F 7401                    		jz	short no_cyl_rnd ; came out even
  6369 00002091 40                      		inc	ax		; round	up
  6370                                  
  6371                                  no_cyl_rnd:				
  6372 00002092 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6373 00002096 06                      		push	es
  6374 00002097 1F                      		pop	ds
  6375 00002098 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6376                                  					; ds:si	-> bpb for hard	file
  6377 0000209B EB55                    		jmp	short set_recbpb
  6378                                  ; ---------------------------------------------------------------------------
  6379                                  
  6380                                  nothardff:				
  6381 0000209D 0E                      		push	cs
  6382 0000209E 1F                      		pop	ds
  6383                                  
  6384                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6385                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6386                                  
  6387                                  		; 10/12/2022
  6388                                  		; ds = cs
  6389                                  		; 17/10/2022 (ds=cs)
  6390 0000209F 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6391                                  		;cmp	byte [cs:fakefloppydrv], 1
  6392 000020A4 7454                    		jz	short go_to_next_bds
  6393 000020A6 80FB07                  		cmp	bl, 7		; ffother
  6394                                  					; special case "other" type of medium
  6395 000020A9 753D                    		jnz	short not_process_other
  6396                                  process_other:
  6397 000020AB 31D2                    		xor	dx, dx
  6398 000020AD 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6399 000020B0 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6400 000020B3 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6401 000020B6 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6402                                  					; have the total number of sectors
  6403 000020B9 48                      		dec	ax
  6404 000020BA B201                    		mov	dl, 1
  6405                                  _again:					
  6406 000020BC 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6407 000020BF 7206                    		jb	short _@@
  6408 000020C1 D1E8                    		shr	ax, 1
  6409 000020C3 D0E2                    		shl	dl, 1
  6410 000020C5 EBF5                    		jmp	short _again
  6411                                  ; ---------------------------------------------------------------------------
  6412                                  
  6413                                  _@@:					
  6414 000020C7 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6415 000020CA 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6416 000020CC C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6417                                  __@@:					
  6418 000020D1 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6419                                  
  6420                                  ; logic to get the sectors/fat area.
  6421                                  ; fat entry is assumed to be 1.5 bytes!!!
  6422                                  
  6423                                  		; 10/12/2022
  6424                                  		; ds = cs
  6425                                  		; 17/10/2022 (ds=cs)
  6426 000020D4 F726[4A20]              		mul	word [word3]
  6427 000020D8 F736[4820]              		div	word [word2]
  6428 000020DC 31D2                    		xor	dx, dx
  6429 000020DE F736[4C20]              		div	word [word512]
  6430                                  		;
  6431                                  		; 10/12/2022
  6432                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6433                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6434                                  		;xor	dx, dx
  6435                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6436                                  		;
  6437 000020E2 40                      		inc	ax		; + 1
  6438                                  no_round_up:
  6439 000020E3 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6440 000020E6 EB12                    		jmp	short go_to_next_bds
  6441                                  ; ---------------------------------------------------------------------------
  6442                                  
  6443                                  not_process_other:			
  6444 000020E8 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6445                                  		;mov	si, bpbtable
  6446                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6447                                  		; 09/12/2022
  6448                                  		;mov	si, BPBTABLE
  6449                                  		;mov	si, [bx+si]	; get address of bpb
  6450                                  		; 10/12/2022
  6451                                  		;mov	si, [BPBTABLE+bx]
  6452                                  		; 13/12/2022
  6453                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6454                                  		; 14/08/2023
  6455                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6456                                  							; correct offset
  6457 000020EA 8BB7[0E74]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6458                                  
  6459                                  		; 28/08/2023
  6460 000020EE 81C6003D                		add	si, SYSINIT_OFFSET
  6461                                  set_recbpb:				
  6462 000020F2 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6463                                  					; es:di	-> recbpb
  6464 000020F5 B91900                  		mov	cx, 25		; bpbx.size
  6465 000020F8 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6466                                  go_to_next_bds:				
  6467 000020FA 5F                      		pop	di
  6468 000020FB 07                      		pop	es		; restore pointer to bds
  6469 000020FC 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6470 000020FF 83FFFF                  		cmp	di, 0FFFFh	; -1
  6471 00002102 740A                    		jz	short got_end_of_bds_chain
  6472 00002104 E94DFF                  		jmp	_next_bds
  6473                                  ; ---------------------------------------------------------------------------
  6474                                  
  6475                                  		; 18/12/2022
  6476                                  ;got_end_of_bds_chain:			
  6477                                  		;retn
  6478                                  
  6479                                  ; =============== S U B	R O U T	I N E =======================================
  6480                                  
  6481                                  ; 15/10/2022
  6482                                  ; 30/12/2018 - Retro DOS v4.0
  6483                                  
  6484                                  ; al = device number
  6485                                  
  6486                                  print_init:	
  6487 00002107 98                      		cbw
  6488 00002108 89C2                    		mov	dx, ax
  6489 0000210A B401                    		mov	ah, 1
  6490 0000210C CD17                    		int	17h		; PRINTER - INITIALIZE
  6491                                  					; DX = printer port (0-3)
  6492                                  					; Return: AH = status
  6493                                  got_end_of_bds_chain:	; 18/12/2022
  6494 0000210E C3                      		retn
  6495                                  
  6496                                  ; =============== S U B	R O U T	I N E =======================================
  6497                                  
  6498                                  ; al = device number
  6499                                  
  6500                                  aux_init:
  6501 0000210F 98                      		cbw
  6502 00002110 89C2                    		mov	dx, ax
  6503                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6504                                  					; 2400,n,1,8 (msequ.inc)
  6505                                  		;mov	ah, 0
  6506                                  		; 10/12/2022
  6507 00002112 B8A300                  		mov	ax, 00A3h
  6508 00002115 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6509                                  					; 	AL = initializing parameters,
  6510                                  					;	DX = port number (0-3)
  6511                                  					; Return: AH = RS-232 status code bits,
  6512                                  					;	  AL = modem status bits
  6513 00002117 C3                      		retn
  6514                                  
  6515                                  ; =============== S U B	R O U T	I N E =======================================
  6516                                  
  6517                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6518                                  ; 30/12/2018 - Retro DOS v4.0
  6519                                  ; 03/06/2018 - Retro DOS v3.0
  6520                                  ; (19/03/2018 - Retro DOS v2.0)
  6521                                  
  6522                                  ; domini **********************************************************************
  6523                                  ;
  6524                                  ;mini disk initialization routine. called right after dohard
  6525                                  ;modified for >2 hardfile support
  6526                                  ;
  6527                                  ; **cs=ds=es=datagrp
  6528                                  ;
  6529                                  ; **domini will search for every extended partition in the system, and
  6530                                  ;   initialize it.
  6531                                  ;
  6532                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6533                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6534                                  ;   address of bdsm table.
  6535                                  ;
  6536                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6537                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6538                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6539                                  ;
  6540                                  ; **domini will use the same routine in sethard routine after label set2 to
  6541                                  ;   save coding.
  6542                                  ;
  6543                                  ; **drvmax determined in dohard routine will be used for the next
  6544                                  ;   available logical mini disk drive number.
  6545                                  ;
  6546                                  ; input: drvmax, dskdrvs
  6547                                  ;
  6548                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6549                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6550                                  ;
  6551                                  ; called modules:
  6552                                  ;		  getboot
  6553                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6554                                  ;
  6555                                  ;		  setmini (new, it will use set2 routine)
  6556                                  ;
  6557                                  ; variables used: end_of_bdsm
  6558                                  ;		  rom_minidisk_num
  6559                                  ;		  mini_hdlim, mini_seclim
  6560                                  ;		  BDS_STRUC, start_bds
  6561                                  ;
  6562                                  ;******************************************************************************
  6563                                  
  6564                                  		; 19/10/2022
  6565                                  domini:	
  6566 00002118 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6567                                  		; 10/12/2022
  6568 0000211C 20F6                    		and	dh, dh
  6569                                  		;cmp	dh, 0
  6570 0000211E 7431                    		jz	short dominiret	; no hard file?	then exit.
  6571 00002120 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6572                                  domini_loop:				
  6573 00002122 52                      		push	dx
  6574 00002123 8816[4217]              		mov	[rom_minidisk_num], dl
  6575 00002127 B408                    		mov	ah, 8
  6576 00002129 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6577                                  					; DL = drive number
  6578                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6579                                  					; DL = number of consecutive drives
  6580                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6581 0000212B FEC6                    		inc	dh
  6582 0000212D 31C0                    		xor	ax, ax
  6583 0000212F 88F0                    		mov	al, dh
  6584 00002131 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6585 00002134 80E13F                  		and	cl, 3Fh
  6586 00002137 88C8                    		mov	al, cl
  6587 00002139 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6588 0000213C 06                      		push	es
  6589 0000213D 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6590 00002141 E836FB                  		call	getboot		; read master boot record into
  6591                                  					; initbootsegment:bootbias
  6592 00002144 7203                    		jb	short domininext
  6593 00002146 E80900                  		call	find_mini_partition
  6594                                  domininext:				
  6595 00002149 07                      		pop	es
  6596 0000214A 5A                      		pop	dx
  6597 0000214B FEC2                    		inc	dl		; next hard file
  6598 0000214D FECE                    		dec	dh
  6599 0000214F 75D1                    		jnz	short domini_loop
  6600                                  dominiret:				
  6601 00002151 C3                      		retn
  6602                                  
  6603                                  ; =============== S U B	R O U T	I N E =======================================
  6604                                  
  6605                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6606                                  ; 30/12/2018 - Retro DOS v4.0
  6607                                  
  6608                                  ;find_mini_partition tries to find every extended partition on a disk.
  6609                                  ;at entry:	di -> bdsm entry
  6610                                  ;		es:bx -> 07c0:bootbias - master boot record
  6611                                  ;		rom_minidisk_num - rom drive number
  6612                                  ;		drvmax - logical drive number
  6613                                  ;		mini_hdlim, mini_seclim
  6614                                  ;
  6615                                  ;called routine: setmini which uses set2 (in sethard routine)
  6616                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6617                                  
  6618                                  
  6619                                  find_mini_partition:	
  6620 00002152 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6621                                  fmpnext:				
  6622 00002156 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6623 0000215A 740A                    		jz	short fmpgot
  6624 0000215C 83C310                  		add	bx, 16
  6625 0000215F 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6626 00002163 75F1                    		jnz	short fmpnext
  6627                                  		;jmp	short fmpnextfound ; extended partition	not found
  6628                                  		; 18/12/2022
  6629                                  fmpnextfound:
  6630 00002165 C3                      		retn
  6631                                  
  6632                                  ;		; 30/07/2019 - Retro DOS v3.2
  6633                                  ;		jb	short fmpnext
  6634                                  ;fmpret:
  6635                                  ;		retn	; 29/05/2019
  6636                                  
  6637                                  ; ---------------------------------------------------------------------------
  6638                                  
  6639                                  		; 19/10/2022
  6640                                  fmpgot:					; found my partition.				
  6641 00002166 E8A100                  		call	dmax_check	; check	for drvmax already 26
  6642 00002169 73FA                    		jnb	short fmpnextfound ; done if too many
  6643 0000216B 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6644 0000216F C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6645                                  		; 10/12/2022
  6646 00002174 804D2301                		or	byte [di+23h], 1
  6647                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6648                                  					; fNon_Removable
  6649 00002178 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6650                                  					; ffHardFile
  6651 0000217C C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6652 00002181 A1[4817]                		mov	ax, [mini_hdlim]
  6653 00002184 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6654 00002187 A1[4A17]                		mov	ax, [mini_seclim]
  6655 0000218A 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6656 0000218D A0[4217]                		mov	al, [rom_minidisk_num]
  6657 00002190 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6658                                  					; set physical number
  6659 00002193 A0[7500]                		mov	al, [drvmax]
  6660 00002196 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6661                                  					; set logical number
  6662 00002199 26837F0A00              		cmp	word [es:bx+10], 0
  6663 0000219E 7707                    		ja	short fmpgot_cont
  6664 000021A0 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6665                                  					; only lower word is meaningful.
  6666 000021A5 72BE                    		jb	short fmpnextfound
  6667                                  					; should be bigger than 64 sectors at least
  6668                                  fmpgot_cont:				
  6669 000021A7 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6670 000021AA 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6671 000021AE 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6672 000021B1 D0C6                    		rol	dh, 1
  6673 000021B3 D0C6                    		rol	dh, 1
  6674 000021B5 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6675 000021B9 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6676                                  					; set hidden trks
  6677 000021BC 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6678 000021C0 268A7701                		mov	dh, [es:bx+1]	; head
  6679 000021C4 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6680 000021C8 BB0002                  		mov	bx, 200h	; bootbias
  6681 000021CB B80102                  		mov	ax, 201h
  6682 000021CE CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6683                                  					; AL = number of sectors to read, CH = track, CL = sector
  6684                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6685                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6686 000021D0 7293                    		jb	short fmpnextfound
  6687 000021D2 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6688 000021D5 06                      		push	es
  6689 000021D6 E80900                  		call	setmini		; install a mini disk.
  6690                                  					; bx value saved.
  6691 000021D9 07                      		pop	es
  6692 000021DA 7203                    		jb	short fmpnextchain
  6693 000021DC E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6694                                  fmpnextchain:				
  6695 000021DF E974FF                  		jmp	fmpnext		; let's find out
  6696                                  					; if we	have any chained partition
  6697                                  ; ---------------------------------------------------------------------------
  6698                                  
  6699                                  		; 18/12/2022
  6700                                  ;fmpnextfound:				
  6701                                  		;retn
  6702                                  
  6703                                  ; =============== S U B	R O U T	I N E =======================================
  6704                                  
  6705                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6706                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6707                                  
  6708                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6709                                  	
  6710 000021E2 57                      		push	di
  6711 000021E3 53                      		push	bx
  6712 000021E4 1E                      		push	ds
  6713 000021E5 06                      		push	es
  6714                                  setmini_1:				
  6715 000021E6 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6716 000021EA 741B                    		jz	short setmini_2
  6717 000021EC 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6718 000021F0 7415                    		jz	short setmini_2
  6719 000021F2 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6720 000021F6 740F                    		jz	short setmini_2
  6721 000021F8 83C310                  		add	bx, 16
  6722 000021FB 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6723 000021FF 75E5                    		jnz	short setmini_1
  6724 00002201 F9                      		stc
  6725 00002202 07                      		pop	es
  6726 00002203 1F                      		pop	ds
  6727 00002204 5B                      		pop	bx
  6728 00002205 5F                      		pop	di
  6729 00002206 C3                      		retn
  6730                                  
  6731                                  ; ---------------------------------------------------------------------------
  6732                                  setmini_2:				
  6733 00002207 E91DFB                  		jmp	set2		; branch into middle of sethard
  6734                                  
  6735                                  ; =============== S U B	R O U T	I N E =======================================
  6736                                  
  6737                                  ; 15/10/2022
  6738                                  ; 28/12/2018 - Retro DOS v4.0
  6739                                  ;
  6740                                  ; dmax_check --- call this when we want to install a new drive.
  6741                                  ;		it checks for drvmax < 26 to see if there is
  6742                                  ;		a drive letter left.
  6743                                  ;
  6744                                  ;	drvmax < 26 : carry SET!
  6745                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6746                                  ;			trash ax
  6747                                  
  6748                                  dmax_check:	
  6749 0000220A 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6750 0000220F 720D                    		jb	short dmax_ok	; return with carry if okay
  6751 00002211 06                      		push	es
  6752                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6753 00002212 B84004                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6754 00002215 8EC0                    		mov	es, ax
  6755                                  		; 18/10/2022
  6756 00002217 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6757                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6758                                  					; set message flag
  6759                                  					; [SYSINIT+toomanydrivesflag]
  6760 0000221D 07                      		pop	es
  6761                                  
  6762                                  		;;push	es
  6763                                  		;;mov	ax,SYSINIT_SEG
  6764                                  		;;mov	es,ax
  6765                                  		;;mov	byte [es:toomanydrivesflag],1
  6766                                  					; set message flag
  6767                                  		;;pop	es
  6768                                  		;
  6769                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6770                                  dmax_ok:				
  6771 0000221E C3                      		retn
  6772                                  
  6773                                  ; =============== S U B	R O U T	I N E =======================================
  6774                                  
  6775                                  ; 18/10/2022
  6776                                  ; 15/10/2022
  6777                                  ; 28/12/2018 - Retro DOS v4.0						
  6778                                  ;								 
  6779                                  ;	link next bds (at ds:di) into the chain. assume that the
  6780                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6781                                  ;	  dskdrv_table, and end_of_bdss.	
  6782                                  
  6783                                  xinstall_bds:		
  6784 0000221F 56                      		push	si
  6785 00002220 53                      		push	bx
  6786 00002221 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6787                                  xinstall_bds_1:				
  6788 00002225 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6789 00002228 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6790                                  		;mov	si, [si+BDS.link]
  6791 0000222A 8B34                    		mov	si, [si]	; chain	through	list
  6792 0000222C EBF7                    		jmp	short xinstall_bds_1
  6793                                  ; ---------------------------------------------------------------------------
  6794                                  
  6795                                  xinstall_bds_2:				
  6796                                  		;mov	[si+BDS.link], di
  6797 0000222E 893C                    		mov	[si], di
  6798                                  		;mov	[si+BDS.link+2], ds
  6799 00002230 8C5C02                  		mov	[si+2], ds
  6800                                  		;mov	word [di+BDS.link], -1
  6801 00002233 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6802                                  		;mov	[di+BDS.link+2], ds
  6803 00002237 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6804                                  		; 20/03/2019 - Retro DOS v4.0
  6805                                  		;lea	bx, [di+BDS.BPB]
  6806 0000223A 8D5D06                  		lea	bx, [di+6]
  6807 0000223D 8B36[4417]              		mov	si, [last_dskdrv_table]
  6808 00002241 891C                    		mov	[si], bx
  6809 00002243 8306[4417]02            		add	word [last_dskdrv_table], 2
  6810 00002248 FE06[7500]              		inc	byte [drvmax]
  6811 0000224C 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6812 00002251 5B                      		pop	bx
  6813 00002252 5E                      		pop	si
  6814 00002253 C3                      		retn
  6815                                  
  6816                                  ; =============== S U B	R O U T	I N E =======================================
  6817                                  
  6818                                  ; 17/10/2022
  6819                                  ; 15/10/2022
  6820                                  ; 28/12/2018 - Retro DOS v4.0
  6821                                  ; 03/06/2018 - Retro DOS v3.0
  6822                                  
  6823                                  cmos_clock_read:	
  6824 00002254 50                      		push	ax
  6825 00002255 51                      		push	cx
  6826 00002256 52                      		push	dx
  6827 00002257 55                      		push	bp
  6828 00002258 31ED                    		xor	bp, bp
  6829                                  loop_clock:				
  6830 0000225A 31C9                    		xor	cx, cx
  6831 0000225C 31D2                    		xor	dx, dx
  6832 0000225E B402                    		mov	ah, 2
  6833 00002260 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6834                                  					; Return: CH = hours in	BCD
  6835                                  					; CL = minutes in BCD
  6836                                  					; DH = seconds in BCD
  6837 00002262 83F900                  		cmp	cx, 0
  6838 00002265 7512                    		jnz	short clock_present
  6839 00002267 83FA00                  		cmp	dx, 0
  6840 0000226A 750D                    		jnz	short clock_present
  6841 0000226C 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6842 0000226F 741C                    		jz	short no_readdate ; was	at zero	setting.
  6843 00002271 45                      		inc	bp		; only perform delay once.
  6844 00002272 B90040                  		mov	cx, 4000h	; 16384
  6845                                  delay:					
  6846 00002275 E2FE                    		loop	delay
  6847 00002277 EBE1                    		jmp	short loop_clock
  6848                                  ; ---------------------------------------------------------------------------
  6849                                  
  6850                                  clock_present:				
  6851 00002279 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6852 0000227F E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6853                                  					; possibly destroyed by	cp dos and
  6854                                  					; post routine did not restore that.
  6855 00002282 56                      		push	si
  6856 00002283 E8A3F2                  		call	read_real_date	; read real-time clock for date
  6857 00002286 FA                      		cli
  6858                                  		;mov	ds:daycnt, si	; set system date
  6859 00002287 8936[F004]              		mov	[daycnt], si
  6860 0000228B FB                      		sti
  6861 0000228C 5E                      		pop	si
  6862                                  
  6863                                  no_readdate:				
  6864 0000228D 5D                      		pop	bp
  6865 0000228E 5A                      		pop	dx
  6866 0000228F 59                      		pop	cx
  6867 00002290 58                      		pop	ax
  6868 00002291 C3                      		retn
  6869                                  
  6870                                  ; ---------------------------------------------------------------------------
  6871                                  
  6872                                  ; the following code is written by jack gulley in engineering group.
  6873                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6874                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6875                                  ; the cmos clock rate are still slow which slow down disk operations
  6876                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6877                                  ; to fix this problem at the request of cp dos.
  6878                                  ;
  6879                                  ; the program is modified to be run on msinit. equates are defined
  6880                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6881                                  ;
  6882                                  ;  the following code cmosck is used to insure that the cmos has not
  6883                                  ;	had its rate controls left in an invalid state on older at's.
  6884                                  ;
  6885                                  ;	it checks for an at model byte "fc" with a submodel type of
  6886                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6887                                  ;	bits in case post has not done it. this initilization routine
  6888                                  ;	is only needed once when dos loads. it should be run as soon
  6889                                  ;	as possible to prevent slow diskette access.
  6890                                  ;
  6891                                  ;	this code exposes one to dos clearing cmos setup done by a
  6892                                  ;	resident program that hides and re-boots the system.
  6893                                  
  6894                                  cmosck:					; check and reset rtc rate bits	
  6895                                  
  6896                                  ;model byte and submodel byte were already determined in msinit.
  6897                                  
  6898                                  	; 16/06/2018 - Retro DOS v3.0
  6899                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6900                                  			
  6901 00002292 50                      		push	ax
  6902 00002293 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  6903 00002299 7525                    		jnz	short cmosck9	; Exit if not an AT model
  6904 0000229B 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  6905                                  					; Is it 06 for the industral AT ?
  6906 000022A1 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  6907 000022A3 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  6908                                  					; Is it 00, 01, 02, or 03 ?
  6909 000022A9 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  6910                                  					; Also,Secondary_model_byte = 0 
  6911                                  					;   when AH=0C0h, int 15h failed.
  6912                                  					;	RESET THE CMOS PERIODIC RATE 
  6913                                  					;  Model=FC submodel=00,01,02,03 or 06 
  6914                                  cmosck4:				
  6915 000022AB B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  6916                                  					; NMI disabled on return
  6917 000022AD B426                    		mov	ah, 26h		; 00100110b
  6918                                  					; Set divider &	rate selection
  6919 000022AF E83000                  		call	cmos_write
  6920 000022B2 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  6921                                  					; NMI disabled on return
  6922 000022B4 E80B00                  		call	cmos_read
  6923 000022B7 2407                    		and	al, 7		; 00000111b
  6924                                  					; clear	SET,PIE,AIE,UIE,SQWE
  6925 000022B9 88C4                    		mov	ah, al
  6926 000022BB B00B                    		mov	al, 0Bh		; cmos_reg_b
  6927                                  					; NMI enabled on return
  6928 000022BD E82200                  		call	cmos_write
  6929                                  cmosck9:				
  6930 000022C0 58                      		pop	ax
  6931 000022C1 C3                      		retn
  6932                                  
  6933                                  ; =============== S U B	R O U T	I N E =======================================
  6934                                  
  6935                                  ;--- CMOS_READ -----------------------------------------------------------------
  6936                                  ;		read byte from cmos system clock configuration table	       :
  6937                                  ;									       :
  6938                                  ; input: (al)=	cmos table address to be read				       :
  6939                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6940                                  ;		bits 6-0 = address of table location to read		       :
  6941                                  ;									       :
  6942                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  6943                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  6944                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6945                                  ;		the cmos address register is pointed to a default value and    :
  6946                                  ;		the interrupt flag restored to the entry state on return.      :
  6947                                  ;		only the (al) register and the nmi state is changed.	       :
  6948                                  ;-------------------------------------------------------------------------------
  6949                                  
  6950                                  cmos_read:				; read location (al) into (al)	
  6951 000022C2 9C                      		pushf
  6952 000022C3 FA                      		cli
  6953 000022C4 53                      		push	bx
  6954 000022C5 50                      		push	ax		; AL = cmos table address to be	read
  6955 000022C6 0C80                    		or	al, 80h
  6956 000022C8 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6957                                  					; RTC Seconds
  6958 000022CA 90                      		nop			; (undocumented	delay needed)
  6959 000022CB E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6960 000022CD 89C3                    		mov	bx, ax
  6961 000022CF 58                      		pop	ax
  6962 000022D0 2480                    		and	al, 80h
  6963 000022D2 0C0F                    		or	al, 0Fh
  6964 000022D4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6965                                  					; RTC Seconds
  6966 000022D6 90                      		nop
  6967 000022D7 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6968 000022D9 89D8                    		mov	ax, bx
  6969 000022DB 5B                      		pop	bx
  6970 000022DC 0E                      		push	cs		; *place code segment in stack and
  6971 000022DD E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  6972 000022E0 C3                      		retn			; return with flags restored
  6973                                  
  6974                                  ; ---------------------------------------------------------------------------
  6975                                  
  6976                                  cmos_popf:				
  6977 000022E1 CF                      		iret			; popf for level b- parts
  6978                                  					; return far and restore flags
  6979                                  
  6980                                  ; =============== S U B	R O U T	I N E =======================================
  6981                                  
  6982                                  ;--- cmos_write ----------------------------------------------------------------
  6983                                  ;		write byte to cmos system clock configuration table	       :
  6984                                  ;									       :
  6985                                  ; input: (al)=	cmos table address to be written to			       :
  6986                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6987                                  ;		bits 6-0 = address of table location to write		       :
  6988                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  6989                                  ;									       :
  6990                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  6991                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  6992                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6993                                  ;		the cmos address register is pointed to a default value and    :
  6994                                  ;		the interrupt flag restored to the entry state on return.      :
  6995                                  ;		only the cmos location and the nmi state is changed.	       :
  6996                                  ;-------------------------------------------------------------------------------
  6997                                  
  6998                                  cmos_write:				; write (ah) to location (al)	
  6999 000022E2 9C                      		pushf			; write (ah) to location (al)
  7000 000022E3 50                      		push	ax		; save work register values
  7001 000022E4 FA                      		cli
  7002 000022E5 50                      		push	ax		; save user nmi	state
  7003 000022E6 0C80                    		or	al, 80h		; disable nmi for us
  7004 000022E8 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7005                                  					; RTC Seconds
  7006 000022EA 90                      		nop
  7007 000022EB 88E0                    		mov	al, ah
  7008 000022ED E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7009 000022EF 58                      		pop	ax		; get user nmi
  7010 000022F0 2480                    		and	al, 80h
  7011 000022F2 0C0F                    		or	al, 0Fh
  7012 000022F4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7013                                  					; RTC Seconds
  7014 000022F6 90                      		nop
  7015 000022F7 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7016 000022F9 58                      		pop	ax		; restore work registers
  7017 000022FA 0E                      		push	cs		; *place code segment in stack and
  7018 000022FB E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7019 000022FE C3                      		retn
  7020                                  
  7021                                  ; 21/12/2022
  7022                                  ; ---------------------------------------------------------------------------
  7023                                  ; ---------------------------------------------------------------------------
  7024                                  %if 0
  7025                                  
  7026                                  ; ---------------------------------------------------------------------------
  7027                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7028                                  ; ---------------------------------------------------------------------------
  7029                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7030                                  ; ---------------------------------------------------------------------------
  7031                                  
  7032                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7033                                  ;
  7034                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7035                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7036                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7037                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7038                                  
  7039                                  ; =============== S U B	R O U T	I N E =======================================
  7040                                  
  7041                                  ; GetClus, read in a cluster at a specified address
  7042                                  ;
  7043                                  ;  bx = cluster to read
  7044                                  ;  cx = sectors per cluster
  7045                                  ;  es:di = load location
  7046                                  
  7047                                  ; 17/10/2022
  7048                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7049                                  ; 09/12/2022
  7050                                  DISKRD equ diskrd
  7051                                  
  7052                                  		; 17/10/2022
  7053                                  getclus:				
  7054                                  		push	cx
  7055                                  		push	di
  7056                                  		mov	[cs:doscnt], cx
  7057                                  		mov	ax, bx
  7058                                  		dec	ax
  7059                                  		dec	ax
  7060                                  		mul	cx		; convert to logical sector
  7061                                  					; dx:ax	= matching logical sector number
  7062                                  					;	  starting from the data sector
  7063                                  		add	ax, [cs:bios_l]
  7064                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7065                                  unpack:					
  7066                                  		push	ds
  7067                                  		push	ax
  7068                                  		push	bx
  7069                                  		mov	si, [cs:fatloc]
  7070                                  		mov	ds, si
  7071                                  		mov	si, bx		; next cluster
  7072                                  		test	byte [cs:fbigfat], 40h	; fbig
  7073                                  					; 16 bit fat?
  7074                                  		jnz	short unpack16	; yes
  7075                                  		shr	si, 1		; 12 bit fat. si=si/2
  7076                                  					; si = clus + clus/2
  7077                                  		add	si, bx		;
  7078                                  					; (si =	byte offset of the cluster in the FAT)
  7079                                  		push	dx
  7080                                  		xor	dx, dx
  7081                                  		call	get_fat_sector
  7082                                  		pop	dx
  7083                                  		mov	ax, [bx]	; save it into ax
  7084                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7085                                  		; 25/06/2023	
  7086                                  		;mov	al, [bx]	; splitted fat
  7087                                  		mov	[cs:temp_cluster], al
  7088                                  		inc	si		; (next	byte)
  7089                                  		push	dx
  7090                                  		xor	dx, dx
  7091                                  		call	get_fat_sector
  7092                                  		pop	dx
  7093                                  		;mov	al, ds:0
  7094                                  		mov	al, [0] ; 19/10/2022
  7095                                  		mov	[cs:temp_cluster+1], al
  7096                                  		mov	ax, [cs:temp_cluster]
  7097                                  even_odd:				
  7098                                  		pop	bx		; restore old fat entry	value
  7099                                  		push	bx		; save it right	away.
  7100                                  		shr	bx, 1		; was it even or odd?
  7101                                  		jnb	short havclus	; it was even.
  7102                                  		shr	ax, 1		; odd. massage fat value and keep
  7103                                  					; the highest 12 bits.
  7104                                  		shr	ax, 1
  7105                                  		shr	ax, 1
  7106                                  		shr	ax, 1
  7107                                  havclus:				
  7108                                  		mov	bx, ax		; now bx = new fat entry.
  7109                                  		and	bx, 0FFFh	; keep low 12 bits.
  7110                                  		jmp	short unpackx
  7111                                  ; ---------------------------------------------------------------------------
  7112                                  
  7113                                  unpack16:				
  7114                                  		push	dx
  7115                                  		xor	dx, dx
  7116                                  		shl	si, 1		; extend to 32 bit offset
  7117                                  		adc	dx, 0
  7118                                  		call	get_fat_sector
  7119                                  		pop	dx
  7120                                  		mov	bx, [bx]	;
  7121                                  					; bx = new fat entry.
  7122                                  unpackx:				
  7123                                  		pop	si		; restore old bx value into si
  7124                                  		pop	ax		; restore logical sector (low)
  7125                                  		pop	ds
  7126                                  		sub	si, bx
  7127                                  		cmp	si, -1		; one apart?
  7128                                  		jnz	short getcl2
  7129                                  		add	[cs:doscnt], cx
  7130                                  		jmp	short unpack
  7131                                  ; ---------------------------------------------------------------------------
  7132                                  
  7133                                  getcl2:					
  7134                                  		push	bx
  7135                                  		push	dx		; sector to read (high)
  7136                                  		push	ax		; sector to read (low)
  7137                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7138                                  		mov	cx, [cs:doscnt]
  7139                                  		pop	dx		; sector to read for diskrd (low)
  7140                                  		pop	word [cs:start_sec_h]
  7141                                  					; sector to read for diskrd (high)
  7142                                  		push	ds
  7143                                  		push	cs
  7144                                  		pop	ds
  7145                                  		push	cs		; simulate far call
  7146                                  		; 17/10/2022
  7147                                  		mov	bp, DISKRD	; 8E5h
  7148                                  		;mov	bp, 8E5h	; offset diskrd
  7149                                  					; 2C7h:8E5h = 70h:2E55h
  7150                                  		call	call_bios_code	; read the clusters
  7151                                  		pop	ds
  7152                                  		pop	bx
  7153                                  		pop	di
  7154                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7155                                  		xchg	ah, al		; multiply by 256
  7156                                  		shl	ax, 1		; times	2 equal	512
  7157                                  		add	di, ax		; update load location
  7158                                  		pop	cx		; restore sectors/cluster
  7159                                  		retn
  7160                                  
  7161                                  ; =============== S U B	R O U T	I N E =======================================
  7162                                  
  7163                                  
  7164                                  ;function: find and read the corresponding fat sector into ds:0
  7165                                  ;
  7166                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7167                                  ;     ds - fatloc segment
  7168                                  ;     cs:drvfat - logical drive number, fat id
  7169                                  ;     cs:md_sectorsize
  7170                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7171                                  ;
  7172                                  ;out). corresponding fat sector read in.
  7173                                  ;      bx = offset value from fatlog segment.
  7174                                  ;      other registera saved.
  7175                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7176                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7177                                  ;      should save this byte, and read the next fat sector to get the rest
  7178                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7179                                  
  7180                                  		; 17/10/2022
  7181                                  get_fat_sector:	
  7182                                  		push	ax
  7183                                  		push	cx
  7184                                  		push	di
  7185                                  		push	si
  7186                                  		push	es
  7187                                  		push	ds
  7188                                  		mov	ax, si
  7189                                  		mov	cx, [cs:md_sectorsize] ; 512
  7190                                  		div	cx		; ax = sector number, dx = offset
  7191                                  		nop
  7192                                  
  7193                                  		; Get rid of the assumption that
  7194                                  		; there	is only	one reserved sector
  7195                                  
  7196                                  		push	es
  7197                                  		push	ds
  7198                                  		push	di
  7199                                  		push	ax
  7200                                  		push	cs
  7201                                  		pop	ds
  7202                                  
  7203                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7204                                  		mov	bp, SETDRIVE
  7205                                  		;mov	bp, 4D7h	; setdrive
  7206                                  					; at 2C7h:4D7h = 70h:2A47h
  7207                                  		push	cs		; simulate far call
  7208                                  		call	call_bios_code	; get bds for drive
  7209                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7210                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7211                                  					; add #reserved_sectors
  7212                                  		pop	di
  7213                                  		pop	ds
  7214                                  		pop	es
  7215                                  		cmp	ax, [cs:last_fat_sec_num]
  7216                                  		jz	short gfs_split_chk ; don't need to read it again.
  7217                                  		mov	[cs:last_fat_sec_num], ax 
  7218                                  					; sector number
  7219                                  					; (in the partition, without hidden sectors)
  7220                                  		push	dx
  7221                                  		mov	word [cs:start_sec_h], 0 
  7222                                  					; prepare to read the fat sector
  7223                                  					; start_sec_h is always	0 for fat sector.
  7224                                  		mov	dx, ax
  7225                                  		mov	cx, 1		; 1 sector read
  7226                                  		mov	ax, [cs:drvfat]
  7227                                  		push	ds
  7228                                  		pop	es
  7229                                  		xor	di, di		; es:di	-> fatloc segment:0
  7230                                  		push	ds
  7231                                  		push	cs
  7232                                  		pop	ds
  7233                                  		push	cs		; simulate far call
  7234                                  		mov	bp, DISKRD	; 8E5h
  7235                                  		;mov	bp, 8E5h	; offset diskrd
  7236                                  					; 2C7h:8E5h = 70h:2E55h
  7237                                  		call	call_bios_code
  7238                                  		pop	ds
  7239                                  		pop	dx
  7240                                  		mov	cx, [cs:md_sectorsize] ; 512
  7241                                  
  7242                                  gfs_split_chk:				
  7243                                  		dec	cx		; 511
  7244                                  		cmp	dx, cx		; if offset points to the
  7245                                  					; last byte of this sector,
  7246                                  					; then splitted	entry.
  7247                                  		mov	bx, dx		; set bx to dx
  7248                                  		pop	ds
  7249                                  		pop	es
  7250                                  		pop	si
  7251                                  		pop	di
  7252                                  		pop	cx
  7253                                  		pop	ax
  7254                                  		retn
  7255                                  
  7256                                  ; 15/10/2022
  7257                                  ;Bios_Data_Init	ends
  7258                                  
  7259                                  %endif
  7260                                  ; ---------------------------------------------------------------------------
  7261                                  ; ---------------------------------------------------------------------------
  7262                                  
  7263                                  		; 09/12/2022
  7264                                  		;db 0
  7265                                  
  7266                                  numbertodiv	equ ($-BData_start)
  7267                                  numbertomod	equ (numbertodiv % 16)
  7268                                  
  7269                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7270 000022FF 00                      		times (16-numbertomod) db 0
  7271                                  %endif
  7272                                  
  7273                                  ;align 16
  7274                                  
  7275                                  ; 09/12/2022
  7276                                  IOSYSCODESEGOFF equ $ - BData_start
  7277                                  ; 29/09/2023
  7278                                  ;IOSYSCODESEGOFF equ $-$$
  7279                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7280                                  
  7281                                  ; 28/09/2023
  7282                                  S1SIZE equ $-$$
  7283                                  
  7284                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7285                                  ; ---------------------------------------------------------------------------
  7286                                  		;db 4 dup(0)
  7287                                  ; 09/12/2022		
  7288                                  ;		times 4 db 0	; 19/10/2022
  7289                                  ; ---------------------------------------------------------------------------
  7290                                  
  7291                                  ;============================================================================
  7292                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7293                                  ;============================================================================
  7294                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7295                                  
  7296                                  section .BIOSCODE vstart=0  
  7297                                  
  7298                                  BCode_start:	 ; 09/12/2022
  7299                                   
  7300                                  ; 02/10/2022
  7301                                  
  7302                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7303                                  ;----------------------------------------------------------------------------
  7304                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7305                                  ;----------------------------------------------------------------------------
  7306                                  
  7307                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7308 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7309 00000030 7000                    BiosDataWord:	dw 70h
  7310                                  
  7311                                  ; 15/10/2022
  7312                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7313                                  ; 09/12/2022
  7314                                  BIOSDATAWORD	equ BiosDataWord
  7315                                  
  7316                                  ; ---------------------------------------------------------------------------
  7317                                  
  7318                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7319                                  
  7320                                  ;************************************************************************
  7321                                  ;*									*
  7322                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7323                                  ;*	  trashes di, cx, es						*
  7324                                  ;*									*
  7325                                  ;*	cas -- should be made disposable!				*
  7326                                  ;*									*
  7327                                  ;************************************************************************
  7328                                  
  7329                                  _seg_reinit:
  7330 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7331                                  					; at 2C7h:30h or 70h:25A0h
  7332                                  		;mov	di, (offset cdev+2)
  7333 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7334 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7335                                  
  7336                                  _seg_reinit_1:				
  7337 0000003D AB                      		stosw			; modify Bios_Code entry points
  7338 0000003E 47                      		inc	di
  7339 0000003F 47                      		inc	di
  7340 00000040 E2FB                    		loop	_seg_reinit_1
  7341 00000042 CB                      		retf
  7342                                  
  7343                                  ; ---------------------------------------------------------------------------
  7344                                  
  7345                                  ; 15/10/2022
  7346                                  
  7347                                  ;************************************************************************
  7348                                  ;*									*
  7349                                  ;*	chardev_entry - main device driver dispatch routine		*
  7350                                  ;*	   called with a dummy parameter block on the stack		*
  7351                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7352                                  ;*									*
  7353                                  ;*	will eventually take care of doing the transitions in		*
  7354                                  ;*	   out of Bios_Code						*
  7355                                  ;*									*
  7356                                  ;************************************************************************
  7357                                  
  7358                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7359 00000043 56                      		push	si
  7360 00000044 50                      		push	ax
  7361 00000045 51                      		push	cx
  7362 00000046 52                      		push	dx
  7363 00000047 57                      		push	di
  7364 00000048 55                      		push	bp
  7365 00000049 1E                      		push	ds
  7366 0000004A 06                      		push	es
  7367 0000004B 53                      		push	bx
  7368 0000004C 89E5                    		mov	bp, sp
  7369 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7370                                  		;;mov	ds, word [cs:0030h]
  7371                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7372 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7373 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7374 00000059 A2[2100]                		mov	[auxnum], al
  7375 0000005C 8826[E704]              		mov	[printdev], ah
  7376 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7377 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7378 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7379 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7380 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7381 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7382                                  		; 17/10/2022
  7383 00000076 81FE[9604]              		cmp	si, DSKTBL
  7384                                  		;cmp	si, 4A2h	; dsktbl
  7385                                  					; at 2C7h:4A2h = 70h:2A12h
  7386 0000007A 7517                    		jnz	short no_sector32_mapping
  7387                                  
  7388                                  ; Special case for 32-bit start sector number:
  7389                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7390                                  ;      set high 16 bits of secnum to 0
  7391                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7392                                  ;
  7393                                  ; pass high word of sector number in start_sec_h, low word in dx
  7394                                  ;
  7395                                  ; note: start_l and start_h are the offsets within the io_request packet
  7396                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7397                                  ;	  it has been used.
  7398                                  ;
  7399                                  ; note: remember not to destroy the registers which have been set up before
  7400                                  
  7401                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7402 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7403 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7404 00000085 750C                    		jnz	short no_sector32_mapping
  7405 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7406                                  					; 32 bits dsk req
  7407                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7408 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7409 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7410                                  					; dx = packet.start_l
  7411                                  no_sector32_mapping:			
  7412 00000093 97                      		xchg	ax, di
  7413 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7414 00000098 2E3A04                  		cmp	al, cs:[si]
  7415 0000009B 732C                    		jnb	short command_error
  7416 0000009D 98                      		cbw			; note that al <= 15 means ok
  7417 0000009E D1E0                    		shl	ax, 1
  7418 000000A0 01C6                    		add	si, ax
  7419 000000A2 97                      		xchg	ax, di
  7420 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7421 000000A7 FC                      		cld
  7422                                  		; 17/10/2022
  7423 000000A8 2EFF5401                		call	near [cs:si+1]
  7424                                  		;call	word ptr cs:si+1
  7425 000000AC 7202                    		jb	short already_got_ah_status
  7426 000000AE B401                    		mov	ah, 1
  7427                                  already_got_ah_status:
  7428                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7429                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7430                                  					; cas note: shouldn't be needed!
  7431 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7432                                  		;lds	bx, ds:ptrsav
  7433 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7434 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7435                                  					; mark operation complete
  7436 000000BC 5B                      		pop	bx
  7437 000000BD 07                      		pop	es
  7438 000000BE 1F                      		pop	ds
  7439 000000BF 5D                      		pop	bp
  7440 000000C0 5F                      		pop	di
  7441 000000C1 5A                      		pop	dx
  7442 000000C2 59                      		pop	cx
  7443 000000C3 58                      		pop	ax
  7444 000000C4 5E                      		pop	si
  7445 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7446                                  	
  7447                                  		; fall through into bc_retf
  7448                                  ; ---------------------------------------------------------------------------	
  7449                                  bc_retf:
  7450 000000C8 CB                      		retf
  7451                                  ; ---------------------------------------------------------------------------
  7452                                  
  7453                                  command_error:				
  7454 000000C9 E80900                  		call	bc_cmderr
  7455 000000CC EBE2                    		jmp	short already_got_ah_status
  7456                                  ; 15/10/2022
  7457                                  ; 01/05/2019
  7458                                  
  7459                                  ;----------------------------------------------------------------------------
  7460                                  ; The following piece of hack is for supporting CP/M compatibility
  7461                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7462                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7463                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7464                                  ; high.
  7465                                  ;----------------------------------------------------------------------------
  7466                                  
  7467                                  		;db 7 dup(0)
  7468                                  
  7469                                  		; 15/10/2022
  7470                                  
  7471 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7472                                  
  7473 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7474                                  				;  which is the CP/M call 5 entry point
  7475                                  		
  7476                                  
  7477                                  ; ---------------------------------------------------------------------------
  7478                                  
  7479                                  ;	exit - all routines return through this path
  7480                                  
  7481                                  bc_cmderr:				
  7482 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7483                                  					; unknown command error
  7484                                  
  7485                                  ; =============== S U B	R O U T	I N E =======================================
  7486                                  
  7487                                  ;	now zero the count field by subtracting its current value,
  7488                                  ;	  which is still in cx, from itself.
  7489                                  
  7490                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7491                                  ;	  in order to return the number actually complete
  7492                                  
  7493                                  bc_err_cnt:	
  7494                                  		;les	bx, ds:ptrsav
  7495                                  		; 19/10/2022
  7496 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7497 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7498                                  					; # of successful i/o's
  7499 000000DF B481                    		mov	ah, 81h		; mark error return
  7500 000000E1 F9                      		stc			; indicate abnormal end
  7501 000000E2 C3                      		retn
  7502                                  
  7503                                  ; 15/10/2022
  7504                                  
  7505                                  ;Bios_Code ends
  7506                                  
  7507                                  ;----------------------------------------------------------------------------
  7508                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7509                                  ;----------------------------------------------------------------------------
  7510                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7511                                  ; 10/01/2019 - Retro DOS v4.0
  7512                                  
  7513                                  ; 30/04/2019
  7514                                  
  7515                                  ;title	mschar - character and clock devices
  7516                                  
  7517                                  ;MODE_CTRLBRK	equ	0FFh
  7518                                  
  7519                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7520                                  
  7521                                  ;************************************************************************
  7522                                  ;*									*
  7523                                  ;*	device driver dispatch tables					*
  7524                                  ;*									*
  7525                                  ;*	each table starts with a byte which lists the number of		*
  7526                                  ;*	legal functions, followed by that number of words. Each		*
  7527                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7528                                  ;*	handles the function. The functions are terminated with		*
  7529                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7530                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7531                                  ;*	returned as abnormal completion status. Notice that ds		*
  7532                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7533                                  ;*									*
  7534                                  ;************************************************************************
  7535                                  
  7536                                  		; 13/12/2022
  7537                                  		;db 0
  7538                                  
  7539                                  		; 13/12/202
  7540 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7541                                  					; 2C7h:0E4h = 70h:2654h
  7542 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7543                                  					; 00 init
  7544 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7545 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7546 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7547                                  					; 03
  7548 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7549                                  					; 04
  7550 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7551                                  					; 05
  7552 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7553 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7554                                  					; 07
  7555 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7556                                  					; 08
  7557 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7558 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7559                                  con_table_end:
  7560 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7561                                  					; 2C7h:0FBh = 70h:266Bh
  7562 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7563 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7564 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7565 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7566 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7567                                  					; 04 indicate zero chars read
  7568 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7569                                  					; 05 read non-destructive
  7570 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7571 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7572 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7573 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7574 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7575 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7576 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7577 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7578 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7579 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7580 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7581 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7582 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7583 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7584 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7585 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7586 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7587 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7588 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7589 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7590                                  prn_table_end:
  7591 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7592                                  					; 2C7h:130h = 70h:26A0h
  7593 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7594 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7595 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7596 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7597 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7598 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7599 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7600 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7601 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7602 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7603 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7604                                  aux_table_end:
  7605 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7606                                  					; 2C7h:147h = 70h:26B7h
  7607 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7608 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7609 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7610 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7611 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7612 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7613 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7614 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7615 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7616 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7617                                  tim_table_end:
  7618                                  
  7619                                  ; ---------------------------------------------------------------------------
  7620                                  
  7621                                  ;************************************************************************
  7622                                  ;*									*
  7623                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7624                                  ;*									*
  7625                                  ;************************************************************************
  7626                                  
  7627                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7628                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7629 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7630                                  con_loop:				
  7631 0000015D E80500                  		call	chrin		; get char in al
  7632 00000160 AA                      		stosb			; store	char at	es:di
  7633 00000161 E2FA                    		loop	con_loop
  7634                                  con_exit:				
  7635 00000163 F8                      		clc
  7636 00000164 C3                      		retn
  7637                                  
  7638                                  ; =============== S U B	R O U T	I N E =======================================
  7639                                  
  7640                                  ;************************************************************************
  7641                                  ;*									*
  7642                                  ;*	chrin - input single char from keyboard into al			*
  7643                                  ;*									*
  7644                                  ;*	  we are going to issue extended keyboard function, if		*
  7645                                  ;*	  supported. the returning value of the extended keystroke	*
  7646                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7647                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7648                                  ;*	  this creates a conflict when the user entered real		*
  7649                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7650                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7651                                  ;*	  in the following manner:					*
  7652                                  ;*									*
  7653                                  ;*	      ah = 16h							*
  7654                                  ;*	      int 16h							*
  7655                                  ;*	      if al == 0, then extended code (in ah)			*
  7656                                  ;*	      else if al == 0E0h, then					*
  7657                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7658                                  ;*		else greek_alpha character.				*
  7659                                  ;*									*
  7660                                  ;*	also, for compatibility reason, if an extended code is		*
  7661                                  ;*	  detected, then we are going to change the value in al		*
  7662                                  ;*	  from 0E0h to 00h.						*
  7663                                  ;*									*
  7664                                  ;************************************************************************
  7665                                  
  7666                                  		; 19/10/2022
  7667                                  chrin:		
  7668 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7669 00000169 30C0                    		xor	al, al
  7670 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7671 0000016F 08C0                    		or	al, al
  7672 00000171 752A                    		jnz	short keyret
  7673 00000173 CD16                    		int	16h		; KEYBOARD -
  7674 00000175 09C0                    		or	ax, ax
  7675 00000177 74EC                    		jz	short chrin
  7676 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7677 0000017C 7504                    		jnz	short alt_ext_chk
  7678 0000017E B010                    		mov	al, 10h
  7679 00000180 EB1B                    		jmp	short keyret
  7680                                  ; ---------------------------------------------------------------------------
  7681                                  
  7682                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7683                                  ;    if character read was 0E0h then
  7684                                  ;      if extended byte was zero (i.e. ah == 0) then
  7685                                  ;	 goto keyret
  7686                                  ;      else
  7687                                  ;	 set al to zero
  7688                                  ;	 goto alt_save
  7689                                  ;      endif
  7690                                  ;    endif
  7691                                  ;  endif
  7692                                  
  7693                                  alt_ext_chk:
  7694 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7695 00000187 740C                    		jz	short not_ext
  7696 00000189 3CE0                    		cmp	al, 0E0h
  7697 0000018B 7508                    		jnz	short not_ext
  7698 0000018D 08E4                    		or	ah, ah
  7699 0000018F 740C                    		jz	short keyret
  7700 00000191 30C0                    		xor	al, al
  7701 00000193 EB04                    		jmp	short alt_save
  7702                                  ; ---------------------------------------------------------------------------
  7703                                  
  7704                                  not_ext:				
  7705 00000195 08C0                    		or	al, al		; special case?
  7706 00000197 7504                    		jnz	short keyret
  7707                                  alt_save:				
  7708 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7709                                  keyret:					
  7710 0000019D C3                      		retn
  7711                                  
  7712                                  ; ---------------------------------------------------------------------------
  7713                                  
  7714                                  ;************************************************************************
  7715                                  ;*									*
  7716                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7717                                  ;*									*
  7718                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7719                                  ;*	in the status word of the request packet, and there is no	*
  7720                                  ;*	character in the input buffer, the driver issues a system	*
  7721                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7722                                  ;*	a 'char-not-found' to the dos.					*
  7723                                  ;*									*
  7724                                  ;************************************************************************
  7725                                  
  7726                                  		; 19/10/2022
  7727                                  con_rdnd:				
  7728 0000019E A0[0C00]                		mov	al, [altah]
  7729 000001A1 08C0                    		or	al, al
  7730 000001A3 754C                    		jnz	short rdexit
  7731 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7732 000001A9 CD16                    		int	16h		; KEYBOARD -
  7733 000001AB 751D                    		jnz	short gotchr
  7734 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7735 000001B2 7412                    		jz	short z_bus_exit
  7736 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7737                                  		; 12/12/2022
  7738 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7739                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7740 000001BD 7407                    		jz	short z_bus_exit
  7741 000001BF B80041                  		mov	ax, 4100h
  7742 000001C2 30DB                    		xor	bl, bl
  7743 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7744                                  					; AL = condition type, BH = condition compare or mask value
  7745                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7746                                  					; DX = I/O port	address	if AL bit 4 set
  7747                                  z_bus_exit:				
  7748 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7749 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7750 000001C9 C3                      		retn
  7751                                  ; ---------------------------------------------------------------------------
  7752                                  
  7753                                  gotchr:					
  7754 000001CA 09C0                    		or	ax, ax
  7755 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7756 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7757 000001D2 CD16                    		int	16h		; KEYBOARD -
  7758 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7759                                  ; ---------------------------------------------------------------------------
  7760                                  
  7761                                  notbrk:					
  7762 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7763 000001D9 7504                    		jnz	short rd_ext_chk
  7764 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7765 000001DD EB12                    		jmp	short rdexit
  7766                                  ; ---------------------------------------------------------------------------
  7767                                  
  7768                                  rd_ext_chk:				
  7769 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7770 000001E4 740B                    		jz	short rdexit
  7771 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7772 000001E8 7507                    		jnz	short rdexit
  7773 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7774 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7775 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7776                                  					; change it for	compatibility
  7777                                  rdexit:					
  7778 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7779 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7780                                  					; return keyboard character here
  7781                                  bc_exvec:				
  7782 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7783                                  					; indicate normal termination
  7784 000001FA C3                      		retn
  7785                                  ; ---------------------------------------------------------------------------
  7786                                  
  7787                                  ;************************************************************************
  7788                                  ;*									*
  7789                                  ;*	con_write - console write routine				*
  7790                                  ;*									*
  7791                                  ;*	entry:	es:di -> buffer						*
  7792                                  ;*		cx    =  count						*
  7793                                  ;*									*
  7794                                  ;************************************************************************
  7795                                  
  7796                                  con_writ:
  7797                                  		;jcxz	short bc_exvec
  7798 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7799                                  		; 12/12/2022
  7800                                  		;jcxz	cc_ret
  7801                                  con_lp:					
  7802 000001FD 268A05                  		mov	al, [es:di]
  7803 00000200 47                      		inc	di
  7804 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7805                                  					; AL = character to display
  7806 00000203 E2F8                    		loop	con_lp
  7807                                  cc_ret:					
  7808 00000205 F8                      		clc
  7809 00000206 C3                      		retn
  7810                                  
  7811                                  ; =============== S U B	R O U T	I N E =======================================
  7812                                  
  7813                                  ;************************************************************************
  7814                                  ;*									*
  7815                                  ;*	con_flush - flush out keyboard queue				*
  7816                                  ;*									*
  7817                                  ;************************************************************************
  7818                                  
  7819                                  con_flush:
  7820 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7821                                  flloop:					; while	(charavail()) charread();	
  7822 0000020C B401                    		mov	ah, 1
  7823 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7824                                  					; Return: ZF clear if character	in buffer
  7825                                  					; AH = scan code, AL = character
  7826                                  					; ZF set if no character in buffer
  7827 00000210 74F3                    		jz	short cc_ret
  7828 00000212 30E4                    		xor	ah, ah
  7829 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7830                                  					; Return: AH = scan code, AL = character
  7831 00000216 EBF4                    		jmp	short flloop
  7832                                  
  7833                                  ; ---------------------------------------------------------------------------
  7834                                  
  7835                                  ; 15/10/2022
  7836                                  
  7837                                  ;************************************************************************
  7838                                  ;*									*
  7839                                  ;*	some equates for rom bios printer i/o				*
  7840                                  ;*									*
  7841                                  ;************************************************************************
  7842                                  
  7843                                  ; ibm rom status bits (i don't trust them, neither should you)
  7844                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7845                                  ; whole slew of bits, only one of which is correct.
  7846                                  
  7847                                  ;notbusystatus	equ 10000000b		; not busy
  7848                                  ;nopaperstatus	equ 00100000b		; no more paper
  7849                                  ;prnselected	equ 00010000b		; printer selected
  7850                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7851                                  ;timeoutstatus	equ 00000001b		; time out.
  7852                                  ;
  7853                                  ;noprinter	equ 00110000b		; no printer attached
  7854                                  
  7855                                  ; 18/03/2019 - Retro DOS v4.0
  7856                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7857                                  
  7858                                  ; ---------------------------------------------------------------------------
  7859                                  
  7860                                  ;************************************************************************
  7861                                  ;*									*
  7862                                  ;*	prn_input - return with no error but zero chars read		*
  7863                                  ;*									*
  7864                                  ;*	enter with cx = number of characters requested			*
  7865                                  ;*									*
  7866                                  ;************************************************************************
  7867                                  
  7868                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7869 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7870                                  					; (sub reqpkt.count,cx)
  7871                                  		; 12/12/2022
  7872                                  prn_done:
  7873 0000021B F8                      		clc			; but return with carry	reset for no error
  7874 0000021C C3                      		retn
  7875                                  ; ---------------------------------------------------------------------------
  7876                                  
  7877                                  ;************************************************************************
  7878                                  ;*									*
  7879                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7880                                  ;*									*
  7881                                  ;*	auxnum has printer number					*
  7882                                  ;*									*
  7883                                  ;************************************************************************
  7884                                  
  7885                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7886                                  		;jcxz	short prn_done	; no chars to output
  7887 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7888                                  prn_loop:				
  7889 0000021F BB0200                  		mov	bx, 2		; retry	count
  7890                                  prn_out:				
  7891 00000222 E83600                  		call	prnstat		; get status
  7892 00000225 751D                    		jnz	short TestPrnError
  7893 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  7894 0000022A 30E4                    		xor	ah, ah
  7895 0000022C E82E00                  		call	prnop		; print	to printer
  7896 0000022F 7419                    		jz	short prn_con	; no error - continue
  7897 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  7898 00000234 7509                    		jnz	short _prnwf
  7899 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  7900 00000238 C606[0C00]00            		mov	byte [altah], 0
  7901 0000023D EB08                    		jmp	short pmessg
  7902                                  ; ---------------------------------------------------------------------------
  7903                                  
  7904                                  _prnwf:					
  7905 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  7906 00000242 7406                    		jz	short prn_con
  7907                                  TestPrnError:				
  7908 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  7909 00000245 75DB                    		jnz	short prn_out
  7910                                  pmessg:					
  7911 00000247 E98DFE                  		jmp	bc_err_cnt
  7912                                  ; ---------------------------------------------------------------------------
  7913                                  
  7914                                  prn_con:				
  7915 0000024A 47                      		inc	di		; point	to next	char and continue
  7916 0000024B E2D2                    		loop	prn_loop
  7917                                  ;prn_done:				
  7918                                  		; 12/12/2022
  7919                                  prn_done2:
  7920                                  		;clc
  7921                                  		; cf=0
  7922 0000024D C3                      		retn
  7923                                  ; ---------------------------------------------------------------------------
  7924                                  
  7925                                  ;************************************************************************
  7926                                  ;*									*
  7927                                  ;*	prn_stat - device driver entry to return printer status		*
  7928                                  ;*									*
  7929                                  ;************************************************************************
  7930                                  
  7931                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  7932 0000024E E80A00                  		call	prnstat		; device in dx
  7933 00000251 75F4                    		jnz	short pmessg
  7934 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  7935                                  		;jnz	short prn_done
  7936                                  		; 12/12/2022
  7937 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  7938 00000258 E96BFF                  		jmp	z_bus_exit
  7939                                  ; ---------------------------------------------------------------------------
  7940                                  
  7941                                  ;************************************************************************
  7942                                  ;*									*
  7943                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  7944                                  ;*		 printer status. Return meaningful error code		*
  7945                                  ;*									*
  7946                                  ;************************************************************************
  7947                                  
  7948                                  prnstat:				
  7949 0000025B B402                    		mov	ah, 2		; set command for get status
  7950                                  					; PRINTER - GET	STATUS
  7951                                  					; DX = printer port (0-3)
  7952                                  					; Return: AH = status
  7953                                  
  7954                                  ; =============== S U B	R O U T	I N E =======================================
  7955                                  
  7956                                  ;************************************************************************
  7957                                  ;*									*
  7958                                  ;*	prnop - call ROM BIOS printer function in ah			*
  7959                                  ;*		return zero true if no error				*
  7960                                  ;*		return zero false if error, al = error code		*
  7961                                  ;*									*
  7962                                  ;************************************************************************
  7963                                  
  7964                                  prnop:	
  7965 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  7966 00000261 CD17                    		int	17h
  7967                                  
  7968                                  	; This check was added to see if this is a case of no
  7969                                  	; printer being installed. This tests checks to be sure
  7970                                  	; the error is noprinter (30h)
  7971                                  
  7972 00000263 50                      		push	ax
  7973 00000264 80E430                  		and	ah, 30h
  7974 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  7975 0000026A 58                      		pop	ax
  7976 0000026B 7506                    		jnz	short NextTest
  7977 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  7978 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  7979                                  
  7980                                  ; examine the status bits to see if an error occurred. unfortunately, several
  7981                                  ; of the bits are set so we have to pick and choose. we must be extremely
  7982                                  ; careful about breaking basic.
  7983                                  
  7984                                  NextTest:				
  7985 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  7986                                  					; i/o error?
  7987 00000276 740A                    		jz	short checknotready ; no, try not ready
  7988                                  
  7989                                  ; at this point, we know we have an error. the converse is not true
  7990                                  
  7991 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  7992                                  					; first, assume	out of paper
  7993 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  7994 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  7995 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  7996                                  ret1:					
  7997 00000281 C3                      		retn
  7998                                  ; ---------------------------------------------------------------------------
  7999                                  
  8000                                  checknotready:				
  8001 00000282 B002                    		mov	al, 2		; assume not-ready
  8002 00000284 F6C401                  		test	ah, 1
  8003 00000287 C3                      		retn
  8004                                  
  8005                                  ; ---------------------------------------------------------------------------
  8006                                  
  8007                                  ;************************************************************************
  8008                                  ;*									*
  8009                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8010                                  ;*		     this entry point should never block waiting for	*
  8011                                  ;*		     device to come ready.				*
  8012                                  ;*									*
  8013                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8014                                  ;*	outputs: set the number of bytes transferred in the		*
  8015                                  ;*		 device driver request packet				*
  8016                                  ;*									*
  8017                                  ;************************************************************************
  8018                                  
  8019                                  		; 19/10/2022
  8020                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8021 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8022                                  prn_tilbloop:				
  8023 0000028A 51                      		push	cx
  8024 0000028B 53                      		push	bx
  8025 0000028C 30FF                    		xor	bh, bh
  8026 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8027 00000292 D1E3                    		shl	bx, 1
  8028                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8029 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8030 00000298 5B                      		pop	bx
  8031                                  prn_getstat:				
  8032 00000299 E8BFFF                  		call	prnstat		; get status
  8033 0000029C 7514                    		jnz	short prn_bperr	; error
  8034 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8035 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8036 000002A3 59                      		pop	cx		; get original count
  8037 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8038 000002A6 26                      		es
  8039 000002A7 AC                      		lodsb
  8040                                  		;lods	byte ptr es:[si] ; es
  8041                                  					; lodsb
  8042 000002A8 30E4                    		xor	ah, ah
  8043 000002AA E8B0FF                  		call	prnop
  8044 000002AD 7504                    		jnz	short prn_berr	; error
  8045 000002AF E2D9                    		loop	prn_tilbloop
  8046                                  		; 12/12/2022
  8047                                  		; cf=0 (prnop)
  8048                                  		;clc			; normal no-error return
  8049 000002B1 C3                      		retn			;   from device driver
  8050                                  
  8051                                  ; ---------------------------------------------------------------------------
  8052                                  
  8053                                  prn_bperr:				
  8054 000002B2 59                      		pop	cx		; restore transfer count from stack
  8055                                  prn_berr:				
  8056 000002B3 E921FE                  		jmp	bc_err_cnt
  8057                                  ; ---------------------------------------------------------------------------
  8058                                  
  8059                                  ; 15/10/2022
  8060                                  
  8061                                  ;************************************************************************
  8062                                  ;*									*
  8063                                  ;*	prn_genioctl - get/set printer retry count			*
  8064                                  ;*									*
  8065                                  ;************************************************************************
  8066                                  
  8067                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8068                                  ; 11/01/2019
  8069                                  
  8070                                  ;********************************;*
  8071                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8072                                  ;********************************;*
  8073                                  
  8074                                  ;;RAWIO SUB-FUNCTIONS
  8075                                  ;;get_retry_count equ 65h
  8076                                  ;;set_retry_count equ 45h
  8077                                  
  8078                                  ;;struc A_RETRYCOUNT
  8079                                  ;;.rc_count: resw 1
  8080                                  ;;endstruc
  8081                                  
  8082                                  ;ioc_pc equ 5
  8083                                  
  8084                                  ; ---------------------------------------------------------------------------
  8085                                  
  8086                                  		; 19/10/2022
  8087                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8088 000002B6 C43E[1200]              		les	di, [ptrsav]
  8089 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8090                                  					; ioc_pc
  8091 000002BF 7403                    		jz	short prnfunc_ok
  8092                                  
  8093                                  prnfuncerr:				
  8094 000002C1 E911FE                  		jmp	bc_cmderr
  8095                                  ; ---------------------------------------------------------------------------
  8096                                  
  8097                                  prnfunc_ok:				
  8098 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8099 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8100 000002CC 30FF                    		xor	bh, bh
  8101                                  		;mov	bl, ds:printdev	; get index into retry counts
  8102 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8103 000002D2 D1E3                    		shl	bx, 1
  8104                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8105 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8106 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8107 000002DA 7407                    		jz	short prngetcount
  8108 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8109 000002DE 75E1                    		jnz	short prnfuncerr
  8110 000002E0 268B0D                  		mov	cx, [es:di]
  8111                                  prngetcount:				
  8112                                  		;mov	ds:wait_count[bx], cx
  8113 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8114 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8115                                  					; return current retry count
  8116                                  		; 12/12/2022
  8117                                  		; cf=0
  8118                                  		;clc
  8119 000002EA C3                      		retn
  8120                                  ; ---------------------------------------------------------------------------
  8121                                  
  8122                                  ;************************************************************************
  8123                                  ;*									*
  8124                                  ;*  prn_ioctl_query							*
  8125                                  ;*									*
  8126                                  ;*  Added for 5.00							*
  8127                                  ;************************************************************************
  8128                                  
  8129                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8130 000002EB C43E[1200]              		les	di, [ptrsav]
  8131 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8132                                  					; ioc_pc
  8133 000002F4 750D                    		jnz	short prn_query_err
  8134 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8135 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8136 000002FC 7404                    		jz	short IOCtlSupported
  8137 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8138 00000300 7501                    		jnz	short prn_query_err
  8139                                  IOCtlSupported:	
  8140                                  		; 12/12/2022
  8141                                  		; cf=0		
  8142                                  		;clc
  8143 00000302 C3                      		retn
  8144                                  ; ---------------------------------------------------------------------------
  8145                                  
  8146                                  prn_query_err:
  8147                                  		; 12/12/2022				
  8148                                  		;stc
  8149 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8150                                  ; ---------------------------------------------------------------------------
  8151                                  
  8152                                  ;************************************************************************
  8153                                  ;*									*
  8154                                  ;*	aux port driver code -- "aux" == "com1"				*
  8155                                  ;*									*
  8156                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8157                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8158                                  ;*									*
  8159                                  ;************************************************************************
  8160                                  
  8161                                  ;	values in ah, requesting function of int 14h in rom bios
  8162                                  
  8163                                  ;auxfunc_send	 equ	1	;transmit
  8164                                  ;auxfunc_receive equ	2	;read
  8165                                  ;auxfunc_status	 equ	3	;request status
  8166                                  
  8167                                  ;	error flags, reported by int 14h, reported in ah:
  8168                                  
  8169                                  ;flag_data_ready equ	01h	;data ready
  8170                                  ;flag_overrun	 equ	02h	;overrun error
  8171                                  ;flag_parity	 equ	04h	;parity error
  8172                                  ;flag_frame	 equ	08h	;framing error
  8173                                  ;flag_break	 equ	10h	;break detect
  8174                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8175                                  ;flag_timeout	 equ	80h	;timeout
  8176                                  
  8177                                  ;	these flags reported in al:
  8178                                  
  8179                                  ;flag_cts	 equ	10h	;clear to send
  8180                                  ;flag_dsr	 equ	20h	;data set ready
  8181                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8182                                  
  8183                                  ; ---------------------------------------------------------------------------
  8184                                  
  8185                                  ;************************************************************************
  8186                                  ;*									*
  8187                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8188                                  ;*		   at es:di						*
  8189                                  ;*									*
  8190                                  ;************************************************************************
  8191                                  
  8192                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8193                                  		;jcxz	short exvec2
  8194 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8195 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8196 0000030B 30C0                    		xor	al, al
  8197 0000030D 8607                    		xchg	al, [bx]
  8198 0000030F 08C0                    		or	al, al
  8199 00000311 7503                    		jnz	short aux2
  8200                                  aux1:					
  8201 00000313 E80500                  		call	auxin		; get character	from port
  8202                                  					; won't return if error
  8203                                  aux2:					
  8204 00000316 AA                      		stosb
  8205 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8206                                  exvec2:					
  8207 00000319 F8                      		clc			; all done, successful exit
  8208                                  auxin_retn:	; 18/12/2022
  8209 0000031A C3                      		retn
  8210                                  ; ---------------------------------------------------------------------------
  8211                                  
  8212                                  ;************************************************************************
  8213                                  ;*									*
  8214                                  ;*	auxin - call rom bios to read character from aux port		*
  8215                                  ;*		if error occurs, map the error and return one		*
  8216                                  ;*		level up to device driver exit code, setting		*
  8217                                  ;*		the number of bytes transferred appropriately		*
  8218                                  ;*									*
  8219                                  ;************************************************************************
  8220                                  
  8221                                  auxin:					
  8222 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8223 0000031D E83C00                  		call	auxop
  8224 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8225                                  		;jnz	short arbad	; skip if any error bits set
  8226                                  		;retn
  8227                                  		; 25/06/2023 (BugFix)
  8228 00000323 74F5                    		jz	short auxin_retn
  8229                                  ; ---------------------------------------------------------------------------
  8230                                  
  8231                                  arbad:					
  8232 00000325 58                      		pop	ax		; remove return	address	(near call)
  8233 00000326 30C0                    		xor	al, al
  8234 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8235 0000032A E9AAFD                  		jmp	bc_err_cnt
  8236                                  
  8237                                  ; ---------------------------------------------------------------------------
  8238                                  
  8239                                  ;************************************************************************
  8240                                  ;*									*
  8241                                  ;*	aux_rdnd - non-destructive aux port read			*
  8242                                  ;*									*
  8243                                  ;************************************************************************
  8244                                  
  8245                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8246 0000032D E85200                  		call	getbx
  8247 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8248 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8249 00000334 7511                    		jnz	short auxdrx	; then return character
  8250 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8251 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8252 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8253 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8254 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8255 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8256 00000345 8807                    		mov	[bx], al
  8257                                  auxdrx:					
  8258 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8259                                  ; ---------------------------------------------------------------------------
  8260                                  
  8261                                  auxbus:					
  8262 0000034A E979FE                  		jmp	z_bus_exit
  8263                                  ; ---------------------------------------------------------------------------
  8264                                  
  8265                                  ;************************************************************************
  8266                                  ;*									*
  8267                                  ;*	aux_wrst - return aux port write status				*
  8268                                  ;*									*
  8269                                  ;************************************************************************
  8270                                  
  8271                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8272 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8273 00000350 A820                    		test	al, 20h		; test data set	ready
  8274 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8275 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8276 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8277                                  		; 12/12/2022
  8278                                  		; cf=0	; (test instruction resets cf)
  8279                                  		;clc
  8280 00000359 C3                      		retn
  8281                                  ; ---------------------------------------------------------------------------
  8282                                  
  8283                                  ;************************************************************************
  8284                                  ;*									*
  8285                                  ;*	auxstat - call rom bios to determine aux port status		*
  8286                                  ;*									*
  8287                                  ;*	exit:	ax = status						*
  8288                                  ;*		dx = [auxnum]						*
  8289                                  ;*									*
  8290                                  ;************************************************************************
  8291                                  
  8292                                  auxstat:				
  8293 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8294                                  
  8295                                  		; fall into auxop
  8296                                  
  8297                                  ; =============== S U B	R O U T	I N E =======================================
  8298                                  
  8299                                  ;************************************************************************
  8300                                  ;*									*
  8301                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8302                                  ;*									*
  8303                                  ;*	entry:	ah = int 14h function number				*
  8304                                  ;*	exit:	ax = results						*
  8305                                  ;*		dx = [auxnum]						*
  8306                                  ;*									*
  8307                                  ;************************************************************************
  8308                                  
  8309                                  auxop:		; proc near		
  8310 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8311                                  					; 0=init, 1=send, 2=receive, 3=status
  8312                                  					; get port number
  8313 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8314                                  					; DX = port number (0-3)
  8315                                  					; Return: AX = port status code
  8316 00000362 C3                      		retn
  8317                                  
  8318                                  ; ---------------------------------------------------------------------------
  8319                                  
  8320                                  ;************************************************************************
  8321                                  ;*									*
  8322                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8323                                  ;*		   auxbuf [auxnum] to zero				*
  8324                                  ;*									*
  8325                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8326                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8327                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8328                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8329                                  ;*									*
  8330                                  ;************************************************************************
  8331                                  
  8332                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8333 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8334 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8335                                  					; zero out buffer
  8336                                  		;clc			; all done, successful return
  8337                                  		; 12/12/2022
  8338                                  		; cf=0 ('add' instruction in 'getbx')
  8339 00000369 C3                      		retn
  8340                                  ; ---------------------------------------------------------------------------
  8341                                  
  8342                                  ;************************************************************************
  8343                                  ;*									*
  8344                                  ;*	aux_writ - write to aux device					*
  8345                                  ;*									*
  8346                                  ;************************************************************************
  8347                                  
  8348                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8349                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8350 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8351                                  aux_loop:				
  8352 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8353                                  					; move di pointer to next character
  8354 0000036F 47                      		inc	di
  8355 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8356 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8357 00000375 F6C480                  		test	ah, 80h		; check	for error
  8358 00000378 7405                    		jz	short awok	; then no error
  8359 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8360 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8361                                  ; ---------------------------------------------------------------------------
  8362                                  
  8363                                  awok:					
  8364 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8365                                  					; still	more character to print
  8366                                  		;clc			; all done, successful return
  8367                                  		; 12/12/2022
  8368                                  		; cf=0 (test instruction above)	
  8369 00000381 C3                      		retn
  8370                                  
  8371                                  ; =============== S U B	R O U T	I N E =======================================
  8372                                  
  8373                                  ;************************************************************************
  8374                                  ;*									*
  8375                                  ;*	getbx - return bx -> single byte input buffer for		*
  8376                                  ;*		selected aux port ([auxnum])				*
  8377                                  ;*									*
  8378                                  ;************************************************************************
  8379                                  
  8380                                  getbx:	
  8381 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8382                                  					; for selected aux port	([auxnum])
  8383                                  		;add	bx, offset auxbuf
  8384 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8385                                  		; 12/12/2022
  8386                                  		; cf=0 (if [uaxnum] is valid number) 
  8387 0000038A C3                      		retn
  8388                                  
  8389                                  ; ---------------------------------------------------------------------------
  8390                                  
  8391                                  ; 15/10/2022
  8392                                  
  8393                                  ;----------------------------------------------------------------
  8394                                  ;								:
  8395                                  ;		    clock device driver 			:
  8396                                  ;								:
  8397                                  ;								:
  8398                                  ;   this file contains the clock device driver. 		:
  8399                                  ;								:
  8400                                  ;   the routines in this files are:				:
  8401                                  ;								:
  8402                                  ;	routine 		function			:
  8403                                  ;	------- 		--------			:
  8404                                  ;	tim_writ		set the current time		:
  8405                                  ;	tim_read		read the current time		:
  8406                                  ;	time_to_ticks		convert time to corresponding	:
  8407                                  ;				  number of clock ticks 	:
  8408                                  ;								:
  8409                                  ; the clock ticks at the rate of:				:
  8410                                  ;								:
  8411                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8412                                  ; see each routine for information on the use.			:
  8413                                  ;								:
  8414                                  ;----------------------------------------------------------------
  8415                                  
  8416                                  ; convert time to ticks
  8417                                  ; input : time in cx and dx
  8418                                  ; ticks returned in cx:dx
  8419                                  
  8420                                  ;19/07/2019
  8421                                  ;09/03/2019
  8422                                  
  8423                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8424                                  
  8425                                  ; first convert from hour,min,sec,hund. to
  8426                                  ; total number of 100th of seconds
  8427                                  
  8428 0000038B B03C                    		mov	al, 60
  8429 0000038D F6E5                    		mul	ch		; hours	to minutes
  8430 0000038F B500                    		mov	ch, 0
  8431 00000391 01C8                    		add	ax, cx		; total	minutes
  8432 00000393 B97017                  		mov	cx, 6000	; 60*100
  8433 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8434 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8435 0000039A 89C1                    		mov	cx, ax
  8436 0000039C B064                    		mov	al, 100
  8437 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8438 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8439 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8440 000003A5 B700                    		mov	bh, 0
  8441 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8442 000003A9 83D200                  		adc	dx, 0
  8443                                  
  8444                                  	; dx:cx is time in 1/100 sec
  8445                                  
  8446 000003AC 92                      		xchg	ax, dx
  8447 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8448 000003AE BB0BE9                  		mov	bx, 59659
  8449 000003B1 F7E3                    		mul	bx		; multiply low half
  8450 000003B3 87D1                    		xchg	dx, cx
  8451 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8452 000003B6 F7E3                    		mul	bx		; multiply high	half
  8453 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8454 000003BA 83D200                  		adc	dx, 0
  8455 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8456 000003BE BB0500                  		mov	bx, 5
  8457 000003C1 F6F3                    		div	bl		; divide high half by 5
  8458 000003C3 88C1                    		mov	cl, al
  8459 000003C5 B500                    		mov	ch, 0
  8460 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8461 000003C9 98                      		cbw
  8462 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8463 000003CB F7F3                    		div	bx		; divide low half by 5
  8464 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8465 000003CF CB                      		retf			; far return
  8466                                  
  8467                                  ; ---------------------------------------------------------------------------
  8468                                  
  8469                                  ; 17/10/2022
  8470                                  ; 15/10/2022
  8471                                  
  8472                                  ;--------------------------------------------------------------------
  8473                                  ;
  8474                                  ; tim_writ sets the current time
  8475                                  ;
  8476                                  ; on entry es:[di] has the current time:
  8477                                  ;
  8478                                  ;	number of days since 1-1-80	(word)
  8479                                  ;	minutes (0-59)			(byte)
  8480                                  ;	hours (0-23)			(byte)
  8481                                  ;	hundredths of seconds (0-99)	(byte)
  8482                                  ;	seconds (0-59)			(byte)
  8483                                  ;
  8484                                  ; each number has been checked for the correct range.
  8485                                  ;
  8486                                  ;	NOTE: Any changes in this routine probably require corresponding
  8487                                  ;	changes in the version that is built with the power manager driver.
  8488                                  ;	See ptime.asm.
  8489                                  ;
  8490                                  ;--------------------------------------------------------------------
  8491                                  
  8492                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8493 000003D0 268B05                  		mov	ax, [es:di]
  8494 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8495                                  					; end to avoid tick windows.
  8496 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8497                                  		;cmp	ds:havecmosclock, 0
  8498 000003D9 7426                    		jz	short no_cmos_1
  8499 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8500                                  					; get binary hours
  8501                                  					; convert to bcd
  8502 000003DF FF1E[0205]              		call	far [bintobcd]
  8503                                  		;call	ds:bintobcd	; call far [bintobcd]
  8504 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8505 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8506 000003E9 FF1E[0205]              		call	far [bintobcd]
  8507                                  		;call	ds:bintobcd	; convert to bcd
  8508 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8509 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8510 000003F3 FF1E[0205]              		call	far [bintobcd]
  8511                                  		;call	ds:bintobcd
  8512 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8513 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8514 000003FB FA                      		cli
  8515 000003FC B403                    		mov	ah, 3
  8516 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8517                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8518                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8519                                  					; Return: CMOS clock set
  8520 00000400 FB                      		sti
  8521                                  no_cmos_1:				
  8522 00000401 268B4D02                		mov	cx, [es:di+2]
  8523 00000405 268B5504                		mov	dx, [es:di+4]
  8524                                  		; 17/10/2022
  8525 00000409 FF1E[E206]              		call	far [ttticks]
  8526                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8527                                  					; convert time to ticks
  8528                                  					; cx:dx	now has	time in	ticks
  8529 0000040D FA                      		cli			; turn off timer
  8530 0000040E B401                    		mov	ah, 1
  8531 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8532                                  					; CX:DX	= clock	count
  8533                                  					; Return: time of day set
  8534                                  		;pop	ds:daycnt
  8535 00000412 8F06[F004]              		pop	word [daycnt]
  8536 00000416 FB                      		sti
  8537                                  		;cmp	ds:havecmosclock, 0
  8538 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8539 0000041C 740A                    		jz	short no_cmos_2
  8540 0000041E FF1E[0605]              		call	far [daycnttoday]
  8541                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8542                                  					; convert to bcd format
  8543 00000422 FA                      		cli
  8544 00000423 B405                    		mov	ah, 5
  8545 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8546                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8547                                  					; CH = century (19h or 20h)
  8548                                  					; Return: CMOS clock set
  8549 00000427 FB                      		sti
  8550                                  no_cmos_2:
  8551                                  		; 12/12/2022
  8552                                  		; cf=0				
  8553                                  		;clc
  8554 00000428 C3                      		retn
  8555                                  
  8556                                  ; ---------------------------------------------------------------------------
  8557                                  
  8558                                  ; 15/10/2022
  8559                                  
  8560                                  ;----------------------------------------------------------------------------
  8561                                  ; gettime reads date and time
  8562                                  ; and returns the following information:
  8563                                  ;
  8564                                  ;	es:[di]  =count of days since 1-1-80
  8565                                  ;	es:[di+2]=hours
  8566                                  ;	es:[di+3]=minutes
  8567                                  ;	es:[di+4]=seconds
  8568                                  ;	es:[di+5]=hundredths of seconds
  8569                                  ;
  8570                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8571                                  ;	changes in the version that is built with the power manager driver.
  8572                                  ;	See ptime.asm.
  8573                                  ;----------------------------------------------------------------------------
  8574                                  
  8575                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8576 00000429 E84E00                  		call	GetTickCnt
  8577 0000042C 8B36[F004]              		mov	si, [daycnt]
  8578                                  
  8579                                  ; we now need to convert the time in tick to the time in 100th of
  8580                                  ; seconds. the relation between tick and seconds is:
  8581                                  ;
  8582                                  ;		 65,536 seconds
  8583                                  ;	       ----------------
  8584                                  ;		1,193,180 tick
  8585                                  ;
  8586                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8587                                  ;
  8588                                  ;	ticks from clock  * 65,536 * 100
  8589                                  ;      --------------------------------- = time in 100th of seconds
  8590                                  ;		1,193,180
  8591                                  ;
  8592                                  ; fortunately this formula simplifies to:
  8593                                  ;
  8594                                  ;	ticks from clock * 5 * 65,536
  8595                                  ;      --------------------------------- = time in 100th of seconds
  8596                                  ;		59,659
  8597                                  ;
  8598                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8599                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8600                                  ; my 16 bits to the left.
  8601                                  ;
  8602                                  ; start with ticks in cx:dx
  8603                                  ; multiply by 5
  8604                                  
  8605 00000430 89C8                    		mov	ax, cx
  8606 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8607                                  					; multiply by 5
  8608 00000434 D1E2                    		shl	dx, 1
  8609 00000436 D1D1                    		rcl	cx, 1		; times	2
  8610 00000438 D1E2                    		shl	dx, 1
  8611 0000043A D1D1                    		rcl	cx, 1		; times	4
  8612 0000043C 01DA                    		add	dx, bx
  8613 0000043E 11C8                    		adc	ax, cx		; times	5
  8614 00000440 92                      		xchg	ax, dx
  8615                                  
  8616                                  ; now have ticks * 5 in	dx:ax
  8617                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8618                                  
  8619 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8620 00000444 F7F1                    		div	cx		; dx now has remainder
  8621                                  					; ax has high word of final quotient
  8622 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8623 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8624 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8625                                  
  8626                                  ; rounding based on the	remainder may be added here
  8627                                  ; the result in	bx:ax is time in 1/100 second.
  8628                                  
  8629 0000044C 89DA                    		mov	dx, bx		
  8630 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8631                                  
  8632                                  ; division by 200 is necessary to ensure no overflow--max result
  8633                                  ; is number of seconds in a day/2 = 43200.
  8634                                  
  8635 00000451 F7F1                    		div	cx
  8636 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8637 00000456 7203                    		jb	short noadj
  8638 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8639                                  noadj:					
  8640 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8641 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8642                                  
  8643                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8644                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8645                                  
  8646 0000045E D1D0                    		rcl	ax, 1		
  8647 00000460 B200                    		mov	dl, 0
  8648 00000462 D1D2                    		rcl	dx, 1
  8649 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8650 00000467 F7F1                    		div	cx
  8651 00000469 88D7                    		mov	bh, dl		; save the seconds
  8652 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8653 0000046D 86C4                    		xchg	al, ah
  8654                                  
  8655                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8656                                  
  8657 0000046F 50                      		push	ax
  8658 00000470 89F0                    		mov	ax, si		; daycnt
  8659 00000472 AB                      		stosw
  8660 00000473 58                      		pop	ax
  8661 00000474 AB                      		stosw
  8662 00000475 89D8                    		mov	ax, bx
  8663 00000477 AB                      		stosw
  8664 00000478 F8                      		clc
  8665 00000479 C3                      		retn
  8666                                  
  8667                                  ; =============== S U B	R O U T	I N E =======================================
  8668                                  
  8669                                  ; 15/10/2022
  8670                                  
  8671                                  ;----------------------------------------------------------------------------
  8672                                  ;
  8673                                  ; procedure : GetTickCnt
  8674                                  ;
  8675                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8676                                  ;		of rollover [except when power management driver is in use]. 
  8677                                  ;		Uses the following logic for updating Daycnt
  8678                                  ;
  8679                                  ;		if ( rollover ) {
  8680                                  ;			if ( t_switch )
  8681                                  ;				daycnt++ ;
  8682                                  ;			else
  8683                                  ;				daycnt += rollover ;
  8684                                  ;		}
  8685                                  ;
  8686                                  ; USES : AX
  8687                                  ;
  8688                                  ; RETURNS : CX:DX - tick count
  8689                                  ; MODIFIES : daycnt
  8690                                  ;
  8691                                  ;----------------------------------------------------------------------------
  8692                                  
  8693                                  		; 17/10/2022
  8694                                  GetTickCnt:	
  8695 0000047A 30E4                    		xor	ah, ah
  8696 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8697                                  					; Return: CX:DX	= clock	count
  8698                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8699                                  					; midnight
  8700                                  					; Otherwise, AL	> 0
  8701 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8702 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8703 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8704                                  					; and not flag
  8705 00000487 0106[F004]              		add	[daycnt], ax
  8706 0000048B C3                      		retn
  8707                                  ; ---------------------------------------------------------------------------
  8708                                  
  8709                                  inc_case:				
  8710 0000048C 08C0                    		or	al, al
  8711 0000048E 7404                    		jz	short no_rollover
  8712 00000490 FF06[F004]              		inc	word [daycnt]
  8713                                  no_rollover:				
  8714 00000494 C3                      		retn
  8715                                  
  8716                                  ;----------------------------------------------------------------------------
  8717                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8718                                  ;----------------------------------------------------------------------------
  8719                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8720                                  ; 09/03/2019 - Retro DOS v4.0
  8721                                  
  8722                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8723                                  ; 26/05/2018 - Retro DOS v3.0
  8724                                  ; 23/03/2018 - Retro DOS v2.0
  8725                                  
  8726                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8727                                  
  8728                                  ;struc BPB_TYPE
  8729                                  ;.SECSIZE:	resw 1
  8730                                  ;.SECALL:	resb 1
  8731                                  ;.RESNUM:	resw 1
  8732                                  ;.FATNUM:	resb 1
  8733                                  ;.DIRNUM:	resw 1
  8734                                  ;.SECNUM:	resw 1
  8735                                  ;.FATID:	resb 1
  8736                                  ;.FATSIZE:	resw 1
  8737                                  ;.SLIM:		resw 1
  8738                                  ;.HLIM:		resw 1
  8739                                  ;.HIDDEN:	resw 1
  8740                                  ;.size:
  8741                                  ;endstruc
  8742                                  
  8743                                  ;-----------------------------------------------------------------
  8744                                  ;	disk interface routines
  8745                                  ;-----------------------------------------------------------------
  8746                                  
  8747                                  ; device attribute bits:
  8748                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8749                                  
  8750                                  ;MAXERR		equ	5
  8751                                  ;MAX_HD_FMT_ERR	equ	2
  8752                                  
  8753                                  ;LSTDRV	equ 504h
  8754                                  
  8755                                  ; some floppies do not have changeline. as a result, media-check would
  8756                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8757                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8758                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8759                                  ; the time of the last successful disk operation and compare it with the current
  8760                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8761                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8762                                  ; since we cannot trust the timer to be always available, we record the number 
  8763                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8764                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8765                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8766                                  ; the time of last successful access, if we see that time has passed too,
  8767                                  ; we reset the counter.
  8768                                  
  8769                                  accessmax	equ	5
  8770                                  
  8771                                  ; due to various bogosities, we need to continually adjust what the head
  8772                                  ; settle time is.  the following algorithm is used:
  8773                                  ;
  8774                                  ;   get the current head settle value.
  8775                                  ;   if it is 0, then
  8776                                  ;	set slow = 15
  8777                                  ;   else
  8778                                  ;	set slow = value
  8779                                  ;   ...
  8780                                  ;*********************************************
  8781                                  ;************ old algorithm ******************
  8782                                  ;*   if we are seeking and writing then
  8783                                  ;*	 use slow
  8784                                  ;*   else
  8785                                  ;*	 use fast
  8786                                  ;*********************************************
  8787                                  ;*********** ibm's requested logic ***********
  8788                                  ;   if we are seeking and writing and not on an at then
  8789                                  ;	use slow
  8790                                  ;   else
  8791                                  ;	use fast
  8792                                  ;   ...
  8793                                  ;   restore current head settle value
  8794                                  ;
  8795                                  ;
  8796                                  ;---------------------------------------
  8797                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8798                                  					; it on after handling config.sys file as a
  8799                                  					; default value, if multrk_flag = multrk_off1.
  8800                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8801                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8802                                  
  8803                                  ; close data segment, open Bios_Code segment
  8804                                  
  8805                                  ; 15/10/2022
  8806                                  
  8807                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8808                                  
  8809                                  ;-----------------------------------------------------------------
  8810                                  ;	command jump table
  8811                                  ;-----------------------------------------------------------------
  8812                                  
  8813 00000495 00                      		db 0
  8814                                  
  8815                                  ; 11/12/2022
  8816                                  %if 0
  8817                                  
  8818                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8819                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8820                                  		dw 1742h		; dsk_init
  8821                                  		dw 4EBh			; media_chk
  8822                                  		dw 592h			; get_bpb
  8823                                  		dw 0D5h			; bc_cmderr
  8824                                  		dw 857h			; dsk_read
  8825                                  		dw 83Dh			; x_bus_exit
  8826                                  		dw 558h			; ret_carry_clear
  8827                                  		dw 558h			; ret_carry_clear
  8828                                  		dw 849h			; dsk_writ
  8829                                  		dw 841h			; dsk_writv
  8830                                  		dw 558h			; ret_carry_clear
  8831                                  		dw 558h			; ret_carry_clear
  8832                                  		dw 0D5h			; bc_cmderr
  8833                                  		dw 80Ah			; dsk_open
  8834                                  		dw 81Ah			; dsk_close
  8835                                  		dw 831h			; dsk_rem
  8836                                  		dw 558h			; ret_carry_clear
  8837                                  		dw 558h			; ret_carry_clear
  8838                                  		dw 558h			; ret_carry_clear
  8839                                  		dw 0C6Bh		; do_generic_ioctl
  8840                                  		dw 558h			; ret_carry_clear
  8841                                  		dw 558h			; ret_carry_clear
  8842                                  		dw 558h			; ret_carry_clear
  8843                                  		dw 1124h		; ioctl_getown
  8844                                  		dw 1142h		; ioctl_setown
  8845                                  		dw 129Ah		; ioctl_support_query
  8846                                  
  8847                                  ;dtbl_siz equ $-dsktbl
  8848                                  
  8849                                  %endif
  8850                                  		; 11/12/2022
  8851 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8852 00000497 [E916]                  		dw dsk_init
  8853 00000499 [DF04]                  		dw media_chk
  8854 0000049B [8505]                  		dw get_bpb
  8855 0000049D [D500]                  		dw bc_cmderr
  8856 0000049F [3708]                  		dw dsk_read
  8857 000004A1 [1D08]                  		dw x_bus_exit
  8858 000004A3 [4B05]                  		dw ret_carry_clear
  8859 000004A5 [4B05]                  		dw ret_carry_clear
  8860 000004A7 [2908]                  		dw dsk_writ
  8861 000004A9 [2108]                  		dw dsk_writv
  8862 000004AB [4B05]                  		dw ret_carry_clear
  8863 000004AD [4B05]                  		dw ret_carry_clear
  8864 000004AF [D500]                  		dw bc_cmderr
  8865 000004B1 [ED07]                  		dw dsk_open
  8866 000004B3 [FC07]                  		dw dsk_close
  8867 000004B5 [1208]                  		dw dsk_rem
  8868 000004B7 [4B05]                  		dw ret_carry_clear
  8869 000004B9 [4B05]                  		dw ret_carry_clear
  8870 000004BB [4B05]                  		dw ret_carry_clear
  8871 000004BD [460C]                  		dw do_generic_ioctl
  8872 000004BF [4B05]                  		dw ret_carry_clear
  8873 000004C1 [4B05]                  		dw ret_carry_clear
  8874 000004C3 [4B05]                  		dw ret_carry_clear
  8875 000004C5 [EC10]                  		dw ioctl_getown
  8876 000004C7 [0911]                  		dw ioctl_setown
  8877 000004C9 [5812]                  		dw ioctl_support_query
  8878                                  
  8879                                  dtbl_siz equ $-dsktbl
  8880                                  
  8881                                  ; =============== S U B	R O U T	I N E =======================================
  8882                                  
  8883                                  ; ---------------------------------------------------------------------------
  8884                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8885                                  ; the one that belongs to the drive specified. carry is set if none exists
  8886                                  ; for the drive. Pointer is returned in es:[di]
  8887                                  ;
  8888                                  ;  AL contains the logical drive number.
  8889                                  ; ---------------------------------------------------------------------------
  8890                                  
  8891                                  SetDrive:	
  8892                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8893 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  8894                                  X_Scan_Loop:				
  8895 000004CF 26384505                		cmp	[es:di+5], al	
  8896 000004D3 7409                    		jz	short X_SetDrv
  8897 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  8898 000004D8 83FFFF                  		cmp	di, 0FFFFh
  8899 000004DB 75F2                    		jnz	short X_Scan_Loop
  8900 000004DD F9                      		stc
  8901                                  X_SetDrv:				
  8902 000004DE C3                      		retn
  8903                                  
  8904                                  ; ---------------------------------------------------------------------------
  8905                                  
  8906                                  ; 15/10/2022
  8907                                  
  8908                                  ; ---------------------------------------------------------------------
  8909                                  ; if id is f9, have a 96tpi disk else
  8910                                  ; if bit 2 is 0 then media is not removable and could not have changed
  8911                                  ;  otherwise if within 2 secs of last disk operation media could not
  8912                                  ;    have changed, otherwise dont know if media has changed
  8913                                  ; ---------------------------------------------------------------------
  8914                                  
  8915                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  8916 000004DF E8E9FF                  		call	SetDrive
  8917 000004E2 BE0100                  		mov	si, 1
  8918 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  8919                                  					; fchanged_by_format
  8920 000004EA 7416                    		jz	short WeAreNotFakingIt
  8921                                  		; 12/12/2022
  8922 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  8923                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  8924                                  					; ~fchanged_by_format ;	reset flag
  8925 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8926                                  					; Ensure that we ask the rom if media has changed
  8927 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  8928                                  					; fnon_removable
  8929 000004FB 740C                    		jz	short wehaveafloppy
  8930 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  8931 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  8932                                  ; ---------------------------------------------------------------------------
  8933                                  
  8934                                  WeAreNotFakingIt:
  8935                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  8936 00000502 26F6452301              		test	byte [es:di+23h], 1
  8937 00000507 7525                    		jnz	short Media_Done
  8938                                  wehaveafloppy:				
  8939 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  8940                                  
  8941                                  		; If we have a floppy with changeline support, we ask the ROM
  8942                                  		; to determine if media has changed. We do not perform the
  8943                                  		; 2 second check for these drives.
  8944                                  
  8945 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  8946 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  8947 00000512 E89F12                  		call	mediacheck	;  Call	into removable routine
  8948 00000515 7236                    		jb	short err_exitj
  8949 00000517 E8F713                  		call	haschange
  8950 0000051A 7512                    		jnz	short Media_Done
  8951                                  mChk_NoChangeLine:
  8952                                  		; If we come here, we have a floppy with no changeline support
  8953                                  			
  8954 0000051C BE0100                  		mov	si, 1		; Presume no change
  8955 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  8956 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  8957                                  					; Is drive of last access the same?
  8958 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  8959 00000528 E82800                  		call	Check_Time_Of_Access
  8960 0000052B EB01                    		jmp	short Media_Done
  8961                                  ; ---------------------------------------------------------------------------
  8962                                  
  8963                                  Media_Unk:				
  8964 0000052D 4E                      		dec	si		; ; Return "I don't know"
  8965                                  
  8966                                  		; SI now contains the correct value for media change.
  8967                                  		; Clean up the left overs
  8968                                  Media_Done:	
  8969                                  		; 19/10/2022			
  8970 0000052E 06                      		push	es
  8971 0000052F C41E[1200]              		les	bx, [ptrsav]
  8972 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  8973 00000537 07                      		pop	es
  8974 00000538 09F6                    		or	si, si
  8975 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  8976 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  8977 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  8978 00000543 E85713                  		call	media_set_vid
  8979                                  mChk1_NoChangeLine:			
  8980 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8981                                  					; Make sure we ask rom for media check
  8982                                  ret_carry_clear:			
  8983 0000054B F8                      		clc			; volidok
  8984 0000054C C3                      		retn
  8985                                  ; ---------------------------------------------------------------------------
  8986                                  
  8987                                  err_exitj:				
  8988 0000054D E88106                  		call	maperror	; guaranteed to	set carry
  8989                                  ret81:					
  8990 00000550 B481                    		mov	ah, 81h		; return error status
  8991 00000552 C3                      		retn			; return with carry set
  8992                                  
  8993                                  ; =============== S U B	R O U T	I N E =======================================
  8994                                  
  8995                                  ; ---------------------------------------------------------------------------
  8996                                  ; perform a check on the time passed since the last access for this physical
  8997                                  ; drive.
  8998                                  ; we are accessing the same drive. if the time of last successful access was
  8999                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9000                                  ; returns in si:
  9001                                  ;	0 - if time of last access was >= 2 seconds
  9002                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9003                                  ; registers affected ax,cx,dx, flags.
  9004                                  ;
  9005                                  ;	assume es:di -> bds, ds->Bios_Data
  9006                                  ; ---------------------------------------------------------------------------
  9007                                  
  9008                                  		; 19/10/2022
  9009                                  Check_Time_Of_Access:
  9010 00000553 BE0100                  		mov	si, 1		; presume no change.
  9011 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9012 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9013                                  					; get stored time
  9014 0000055D 29C2                    		sub	dx, ax
  9015 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9016 00000563 19C1                    		sbb	cx, ax
  9017 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9018 00000567 09D2                    		or	dx, dx		; time must pass
  9019 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9020 0000056B FE06[1D01]              		inc	byte [accesscount]
  9021 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9022                                  					; if count is less than threshold, ok
  9023 00000574 720C                    		jb	short timecheck_ret
  9024 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9025 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9026                                  ; ---------------------------------------------------------------------------
  9027                                  
  9028                                  timepassed:				
  9029 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9030                                  					; min elapsed time? (2 seconds)
  9031 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9032                                  
  9033                                  		; everything indicates that we do not know what has happened.
  9034                                  timecheck_unk:				
  9035 00000581 4E                      		dec	si		; presume i don't know
  9036                                  timecheck_ret:				
  9037 00000582 C3                      		retn
  9038                                  
  9039                                  ; ---------------------------------------------------------------------------
  9040                                  ; 15/10/2022
  9041                                  Err_Exitj2:
  9042 00000583 EBC8                    		jmp	short err_exitj
  9043                                  
  9044                                  ; ---------------------------------------------------------------------------
  9045                                  
  9046                                  ; 15/10/2022
  9047                                  
  9048                                  ; ==========================================================================
  9049                                  ; Build a valid bpb for the disk in the drive.
  9050                                  ; ==========================================================================
  9051                                  
  9052                                  		; 19/10/2022
  9053                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9054 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9055 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9056 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9057                                  					; fnon_removable
  9058 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9059                                  
  9060                                  		; let's set the default value for volid,vol_serial,
  9061                                  		; filesys_id in bds table
  9062                                  
  9063 00000592 E83700                  		call	clear_ids
  9064                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9065 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9066 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9067 0000059D 72B1                    		jb	short ret81
  9068                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9069 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9070                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9071 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9072 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9073                                  					; otherwise, conventional boot record
  9074                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9075 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9076 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9077 000005B2 E86213                  		call	set_volume_id
  9078                                  already_gotbpb:				
  9079 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9080                                  					; return the bpb from the current bds
  9081                                  
  9082                                  ;		 fall into setptrsav, es:di -> result
  9083                                  
  9084                                  ; ---------------------------------------------------------------------------
  9085                                  
  9086                                  ; 15/10/2022
  9087                                  
  9088                                  ; ==========================================================================
  9089                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9090                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9091                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9092                                  ;It fails, for instance, when we install an external drive using driver.sys
  9093                                  ;because then the BDS segment is no longer Bios_Data. 
  9094                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9095                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9096                                  ;restored before returning to the caller.
  9097                                  ; ==========================================================================
  9098                                  
  9099                                  		; 19/10/2022
  9100                                  SetPtrSav:	; return point for dsk_init				
  9101 000005B8 8CC1                    		mov	cx, es		; save es
  9102                                  		;les	bx, ds:ptrsav
  9103 000005BA C41E[1200]              		les	bx, [ptrsav]
  9104 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9105 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9106 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9107 000005CA F8                      		clc
  9108 000005CB C3                      		retn
  9109                                  
  9110                                  ; =============== S U B	R O U T	I N E =======================================
  9111                                  
  9112                                  ; 15/10/2022
  9113                                  
  9114                                  ; -----------------------------------------------------
  9115                                  ; clear ids in bds table. only applied for floppies.
  9116                                  ;input:  es:di -> bds table
  9117                                  ;	assumes ds: -> Bios_Data
  9118                                  ;output: volid set to "NO NAME    "
  9119                                  ;	 vol_serial set to 0.
  9120                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9121                                  ;	   depending on the flag fatsize in bds.
  9122                                  ;
  9123                                  ;	trashes si, cx
  9124                                  ; -----------------------------------------------------
  9125                                  
  9126                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9127                                  ;size_of_EXT_SYSTEM_ID equ 8
  9128                                  
  9129                                  clear_ids:
  9130                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9131 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9132                                  clear_ids_x:	; 11/09/2023		
  9133                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9134 000005D0 57                      		push	di
  9135 000005D1 31C9                    		xor	cx, cx		; no serial number
  9136 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9137 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9138                                  
  9139                                  		; BUGBUG - there's a lot in common here and with
  9140                                  		; mov_media_ids.. see if we can save some space by
  9141                                  		; merging them... jgl
  9142                                  
  9143                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9144                                  		; 10/12/2022
  9145 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9146                                  
  9147                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9148 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9149 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9150 000005E3 F3A4                    		rep movsb
  9151                                  		
  9152                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9153                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9154                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9155                                  		;test	byte [es:di+1Fh], 40h
  9156                                  
  9157                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9158                                  			; Microsoft/IBM code has a bug here because the BDS's
  9159                                  			; .volid and .filesys_id fields will be reset
  9160                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9161                                  			; at the BDS offset 31 but current (this) code checks flags
  9162                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9163                                  			;
  9164                                  			; Correct Code:
  9165                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9166                                  			; 11/09/2023
  9167                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9168                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9169                                  			;
  9170                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9171                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9172                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9173                                  			;
  9174                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9175                                  			; 'clear_ids' is used for floppy disks only and the default
  9176                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9177                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9178                                  
  9179 000005E5 A840                    		test	al, 40h ; * 
  9180                                  		
  9181                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9182 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9183 000005EA 7503                    		jnz	short ci_bigfat
  9184                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9185 000005EC BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9186                                  ci_bigfat:				
  9187                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9188                                  		; 10/12/2022
  9189 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9190 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9191                                  					; filesys_id field
  9192 000005F4 F3A4                    		rep movsb
  9193 000005F6 5F                      		pop	di		; restore bds pointer
  9194 000005F7 C3                      		retn
  9195                                  
  9196                                  ; =============== S U B	R O U T	I N E =======================================
  9197                                  
  9198                                  ; 15/10/2022
  9199                                  
  9200                                  ; ---------------------------------------------------------------------------
  9201                                  ;	getbp - return bpb from the drive specified by the bds.
  9202                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9203                                  ;	    note that we never come here for fixed disks.
  9204                                  ;	    for all other cases,
  9205                                  ;	      - it reads boot sector to pull out the bpb
  9206                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9207                                  ;		to get the fat id byte to build the bpb from there.
  9208                                  ;
  9209                                  ;   inputs:	es:di point to correct bds.
  9210                                  ;
  9211                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9212                                  ;		carry set, and al=7 if invalid disk.
  9213                                  ;		carry set and error code in al if other error.
  9214                                  ;		if failed to recognize the boot record, then will set the
  9215                                  ;		set_id_flag to 0.
  9216                                  ;		this routine will only work for a floppy diskette.
  9217                                  ;		     for a fixed disk, it will just return.
  9218                                  ;
  9219                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9220                                  ;	  segment definitions. It should be migrated towards.
  9221                                  ;	   now es:di has the bds, ds: has Bios_Data
  9222                                  ; ---------------------------------------------------------------------------
  9223                                  
  9224                                  GetBp:		; if returning fake bpb then return bpb as is.
  9225                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9226 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9227 000005FD 7403                    		jz	short getbp1	; getbp1
  9228 000005FF E99500                  		jmp	getret_exit
  9229                                  ; ---------------------------------------------------------------------------
  9230                                  
  9231                                  getbp1:					
  9232 00000602 51                      		push	cx
  9233 00000603 52                      		push	dx
  9234 00000604 53                      		push	bx
  9235                                  
  9236                                  		; attempt to read in boot sector and determine bpb.
  9237                                  		; we assume that the 2.x and greater dos disks all
  9238                                  		; have a valid boot sector.
  9239                                  
  9240 00000605 E8A400                  		call	readbootsec
  9241 00000608 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9242 0000060A 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9243 0000060C 7508                    		jnz	short dofatbpb
  9244 0000060E E8F000                  		call	movbpb		; move bpb into	registers
  9245 00000611 EB57                    		jmp	short Has1
  9246                                  ; ---------------------------------------------------------------------------
  9247                                  
  9248                                  getbp_err_ret_brdg:			
  9249 00000613 E98200                  		jmp	getbp_err_ret
  9250                                  ; ---------------------------------------------------------------------------
  9251                                  
  9252                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9253                                  		; and fill in bpb from there.
  9254                                  dofatbpb:				
  9255 00000616 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9256 00000619 72F8                    		jb	short getbp_err_ret_brdg
  9257                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9258 0000061B 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9259 00000620 7403                    		jz	short bpb_nochangeline ; brif not
  9260 00000622 E88D12                  		call	hidensity	; may not return! May add sp, 2	and
  9261                                  					; jump to has1!!!!!! or	has720K
  9262                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9263 00000625 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9264                                  					; ffSmall
  9265 0000062A 7515                    		jnz	short is_floppy
  9266 0000062C 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9267 0000062F 7571                    		jnz	short got_unknown_medium
  9268                                  Has720K:				
  9269                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9270 00000631 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9271                                  
  9272                                  		; es points to segment of bds. the following should be modified
  9273                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9274                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9275                                  
  9276                                  		; 10/12/2022
  9277                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9278                                  		; 21/12/2022
  9279 00000634 8A07                    		mov	al, [bx]
  9280 00000636 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9281 00000639 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9282 0000063C 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9283                                  		; 19/10/2022 - Temporary !
  9284                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9285                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9286                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9287                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9288                                  
  9289 0000063F EB29                    		jmp	short Has1
  9290                                  ; ---------------------------------------------------------------------------
  9291                                  
  9292                                  is_floppy:			; must be a 5.25" floppy if we come here
  9293 00000641 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9294 00000644 725C                    		jb	short got_unknown_medium
  9295 00000646 B001                    		mov	al, 1		; set number of	fat sectors
  9296 00000648 BB0840                  		mov	bx, 16392	; 64*256+8
  9297                                  					; set dir entries and sector max
  9298 0000064B B94001                  		mov	cx, 320		; 40*8
  9299                                  					; set size of drive
  9300 0000064E BA0101                  		mov	dx, 257		; 01*256+1
  9301                                  					; set head limit and sec/all unit
  9302 00000651 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9303 00000654 7507                    		jnz	short has8	; nz = has 8 sectors
  9304 00000656 FEC0                    		inc	al		; inc number of	fat sectors
  9305 00000658 FEC3                    		inc	bl		; inc sector max
  9306                                  		;add	cx, 40		; increase size	(to 360)
  9307                                  		; 18/12/2022
  9308 0000065A 80C128                  		add	cl, 40
  9309                                  has8:					
  9310 0000065D F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9311 00000660 7408                    		jz	short Has1	; jz = 1 head
  9312 00000662 01C9                    		add	cx, cx		; double size of disk
  9313 00000664 B770                    		mov	bh, 112		; increase number of directory entries
  9314 00000666 FEC6                    		inc	dh		; inc sec/all unit
  9315 00000668 FEC2                    		inc	dl		; inc head limit
  9316                                  Has1:					
  9317 0000066A 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9318 0000066E 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9319 00000672 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9320 00000676 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9321 0000067A 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9322 0000067E 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9323 00000682 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9324                                  
  9325                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9326                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9327                                  		; to 0 since this code is for floppies
  9328                                  
  9329                                  		; 18/12/2022
  9330                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9331                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9332                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9333                                  		; 18/12/2022
  9334 00000686 29C9                    		sub	cx, cx
  9335 00000688 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9336 0000068C 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9337 00000690 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9338                                  getret:					
  9339 00000694 5B                      		pop	bx
  9340 00000695 5A                      		pop	dx
  9341 00000696 59                      		pop	cx
  9342                                  getret_exit:				
  9343 00000697 C3                      		retn
  9344                                  ; ---------------------------------------------------------------------------
  9345                                  
  9346                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9347                                  		;mov	ds:set_id_flag,	0
  9348                                  		; 19/10/2022
  9349 00000698 C606[0A05]00            		mov	byte [set_id_flag], 0
  9350 0000069D E83105                  		call	maperror
  9351 000006A0 EBF2                    		jmp	short getret
  9352                                  ; ---------------------------------------------------------------------------
  9353                                  
  9354                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9355                                  		; we do	not assume any type of bpb for this medium.
  9356                                  
  9357                                  got_unknown_medium:			
  9358                                  		;mov	ds:set_id_flag,	0 
  9359 000006A2 C606[0A05]00            		mov	byte [set_id_flag], 0
  9360 000006A7 B007                    		mov	al, 7
  9361 000006A9 F9                      		stc
  9362 000006AA EBE8                    		jmp	short getret
  9363                                  
  9364                                  ; =============== S U B	R O U T	I N E =======================================
  9365                                  
  9366                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9367                                  
  9368                                  ; ----------------------------------------------------------------
  9369                                  ; read in the boot sector. set carry if error in reading sector.
  9370                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9371                                  ;
  9372                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9373                                  ; ----------------------------------------------------------------
  9374                                  
  9375                                  ; 10/03/2019 - Retro DOS v4.0
  9376                                  
  9377                                  readbootsec:	
  9378 000006AC B600                    		mov	dh, 0		; head 0
  9379 000006AE B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9380 000006B1 E8C600                  		call	read_sector
  9381 000006B4 724A                    		jb	short err_ret
  9382 000006B6 31DB                    		xor	bx, bx		; assume valid boot sector
  9383                                  
  9384                                  		; put a sanity check for the boot sector in here to detect
  9385                                  		; boot sectors that do not have valid bpbs. we examine the
  9386                                  		; first two bytes - they must contain a long jump (69h) or a
  9387                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9388                                  		; (E9h). if this test is passed, we further check by examining
  9389                                  		; the signature at the end of the boot sector for the word
  9390                                  		; AA55h. if the signature is not present, we examine the media
  9391                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9392                                  		; logic is modified a little bit. we are not going to check
  9393                                  		; signature. instead we are going to sanity check the media
  9394                                  		; byte in bpb regardless of the validity of signature. this is
  9395                                  		; to save the already developed commercial products that have
  9396                                  		; good jump instruction and signature but with the false bpb
  9397                                  		; informations
  9398                                  
  9399                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9400                                  
  9401                                  		; 19/10/2022
  9402 000006B8 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9403 000006BD 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9404 000006BF 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9405 000006C4 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9406 000006C6 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9407 000006CB 7531                    		jnz	short invalidbootsec
  9408 000006CD 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9409 000006D2 752A                    		jnz	short invalidbootsec
  9410                                  
  9411                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9412                                  ;
  9413                                  ;; 10/03/2019
  9414                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9415                                  ;;
  9416                                  ;; Don't have to perform the following signature check since
  9417                                  ;; we need to check the media byte even with the good signatured diskette.
  9418                                  ;;
  9419                                  ;;check_signature:
  9420                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9421                                  ;;							 ; disk or 1.x media.
  9422                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9423                                  ;;					       ; may need some special handling
  9424                                  
  9425                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9426                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9427                                  ; by examining the media descriptor in the boot sector.
  9428                                  
  9429                                  		; 19/10/2022
  9430                                  check_bpb_mediabyte:			
  9431 000006D4 A0[6301]                		mov	al, [disksector+15h]
  9432                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9433 000006D7 24F0                    		and	al, 0F0h
  9434 000006D9 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9435 000006DB 7521                    		jnz	short invalidbootsec
  9436                                  
  9437                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9438                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9439                                  ; sectors. these are specifically diskettes that were formatted in drives
  9440                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9441                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9442                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9443                                  ; help our build bpb routine to recognise these specific cases, and to
  9444                                  ; set up out copy of the bpb accordingly.
  9445                                  ; we do this by checking to see if the boot sector is off a diskette that
  9446                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9447                                  ; sec/clus field to 1. if not, we carry on as normal.
  9448                                  
  9449                                  checksinglesided:
  9450 000006DD A0[6301]                		mov	al, [disksector+15h]
  9451 000006E0 3CF0                    		cmp	al, 0F0h
  9452 000006E2 741B                    		jz	short gooddsk
  9453 000006E4 A801                    		test	al, 1
  9454 000006E6 7517                    		jnz	short gooddsk
  9455 000006E8 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9456 000006EE 7507                    		jnz	short mustbeearlier
  9457 000006F0 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9458 000006F5 7308                    		jnb	short gooddsk
  9459                                  
  9460                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9461                                  
  9462                                  mustbeearlier:				
  9463 000006F7 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9464                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9465 000006FC EB01                    		jmp	short gooddsk
  9466                                  ; ---------------------------------------------------------------------------
  9467                                  
  9468                                  invalidbootsec:				
  9469 000006FE 43                      		inc	bx		; indicate that boot sector invalid
  9470                                  		; 10/12/2022
  9471                                  movbpb_ret:
  9472                                  gooddsk:				
  9473 000006FF F8                      		clc
  9474                                  err_ret:
  9475 00000700 C3                      		retn
  9476                                  ; ---------------------------------------------------------------------------
  9477                                  
  9478                                  		; 10/12/2022
  9479                                  ;err_ret:				
  9480                                  		;retn
  9481                                  
  9482                                  ; =============== S U B	R O U T	I N E =======================================
  9483                                  
  9484                                  ; 15/10/2022
  9485                                  ; ---------------------------------------------------------------------------
  9486                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9487                                  ; getbp routine at has1
  9488                                  ;
  9489                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9490                                  ; serial number, volume label, file system id in bds according to
  9491                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9492                                  ; to signal that volume label is set already from the extended boot record
  9493                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9494                                  ; the volume label in the root directory.)
  9495                                  ; ---------------------------------------------------------------------------
  9496                                  
  9497                                  ; 10/03/2019 - Retro DOS v4.0
  9498                                  
  9499                                  		; 19/10/2022
  9500                                  movbpb:	
  9501 00000701 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9502                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9503                                  					; sectors per unit
  9504 00000705 8A3E[5F01]              		mov	bh, [disksector+11h]
  9505                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9506                                  					; number of directory entries
  9507 00000709 8B0E[6101]              		mov	cx, [disksector+13h]
  9508                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9509                                  					; size of drive
  9510 0000070D 8A26[6301]              		mov	ah, [disksector+15h]
  9511                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9512                                  					; media	descriptor
  9513 00000711 A0[6401]                		mov	al, [disksector+16h];
  9514                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9515                                  					; number of fat	sectors
  9516 00000714 8A1E[6601]              		mov	bl, [disksector+18h]
  9517                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9518                                  					; sectors per track
  9519 00000718 8A16[6801]              		mov	dl, [disksector+1Ah]
  9520                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9521                                  					; number of heads
  9522 0000071C 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9523 00000721 75DC                    		jnz	short movbpb_ret
  9524 00000723 E81200                  		call	mov_media_ids
  9525 00000726 7205                    		jb	short movbpb_conv ; conventional boot record?
  9526 00000728 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9527                                  movbpb_conv:				
  9528 0000072D 803E[7700]01            		cmp	byte [fhave96], 1
  9529 00000732 75CB                    		jnz	short movbpb_ret
  9530 00000734 E8D411                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9531                                  		; 10/12/2022
  9532                                  		; cf = 0
  9533                                  ;movbpb_ret:				
  9534                                  		;clc
  9535 00000737 C3                      		retn
  9536                                  
  9537                                  ; =============== S U B	R O U T	I N E =======================================
  9538                                  
  9539                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9540                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9541                                  ;by es:di.
  9542                                  
  9543                                  ;in.) es:di -> bds
  9544                                  ;     ds:disksector = valid extended boot record.
  9545                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9546                                  ;      the boot record information.
  9547                                  ;     carry flag set if not an extended bpb.
  9548                                  ;     all registers saved except the flag.
  9549                                  
  9550                                  		; 19/10/2022
  9551                                  mov_media_ids:		
  9552 00000738 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9553                                  					; [disksector+EXT_BOOT.SIG],
  9554                                  					; EXT_BOOT_SIGNATURE
  9555 0000073D 752C                    		jnz	short mmi_not_ext
  9556 0000073F 51                      		push	cx
  9557 00000740 8B0E[7501]              		mov	cx, [disksector+27h]
  9558                                  					; [disksector+EXT_BOOT.SERIAL]
  9559 00000744 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9560 00000748 8B0E[7701]              		mov	cx, [disksector+29h]
  9561                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9562 0000074C 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9563 00000750 57                      		push	di
  9564 00000751 56                      		push	si
  9565 00000752 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9566 00000755 BE[7901]                		mov	si, disksector+2Bh
  9567                                  		;mov	si, (offset disksector+2Bh) ;
  9568                                  					; disksector+EXT_BOOT.VOL_LABEL
  9569 00000758 83C74B                  		add	di, 75		; BDS.volid
  9570 0000075B F3A4                    		rep movsb
  9571                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9572                                  		; 10/12/2022
  9573 0000075D B108                    		mov	cl, 8 ; cx = 8
  9574 0000075F BE[8401]                		mov	si, disksector+36h
  9575                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9576 00000762 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9577 00000765 F3A4                    		rep movsb
  9578 00000767 5E                      		pop	si
  9579 00000768 5F                      		pop	di
  9580 00000769 59                      		pop	cx
  9581                                  		; 10/12/2022
  9582                                  		; cf = 0
  9583                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9584                                  				; (20/09/2022)
  9585 0000076A C3                      		retn
  9586                                  ; ---------------------------------------------------------------------------
  9587                                  
  9588                                  mmi_not_ext:				
  9589 0000076B F9                      		stc
  9590 0000076C C3                      		retn
  9591                                  
  9592                                  ; =============== S U B	R O U T	I N E =======================================
  9593                                  
  9594                                  ; 15/10/2022
  9595                                  ; --------------------------------------------------------------
  9596                                  ; read in the fat sector and get the media byte from it.
  9597                                  ; input : es:di -> bds
  9598                                  ; output:
  9599                                  ;	  carry set if an error occurs, ax contains error code.
  9600                                  ;	  otherwise, ah contains media byte on exit
  9601                                  ; --------------------------------------------------------------
  9602                                  
  9603                                  readfat:	
  9604                                  		;mov	dh, 0
  9605                                  		; 10/12/2022
  9606 0000076D 30F6                    		xor	dh, dh
  9607 0000076F B90200                  		mov	cx, 2		; head 0
  9608                                  					; cylinder 0, sector 2
  9609 00000772 E80500                  		call	read_sector
  9610 00000775 7202                    		jb	short bad_fat_ret
  9611 00000777 8A27                    		mov	ah, [bx]	; media	byte
  9612                                  bad_fat_ret:				
  9613 00000779 C3                      		retn
  9614                                  
  9615                                  ; =============== S U B	R O U T	I N E =======================================
  9616                                  
  9617                                  ; 15/10/2022
  9618                                  
  9619                                  ; ---------------------------------------------------------------------------
  9620                                  ; read a single sector into the temp buffer.
  9621                                  ; perform three retries in case of error.
  9622                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9623                                  ;		cx has sector and cylinder
  9624                                  ;		dh has head
  9625                                  ;		es:di has bds
  9626                                  ;		ds has Bios_Data
  9627                                  ;
  9628                                  ;   outputs:	carry clear
  9629                                  ;		    Bios_Data:bx point to sector
  9630                                  ;		       (note: some callers assume location of buffer)
  9631                                  ;
  9632                                  ;		carry set
  9633                                  ;		    ax has rom error code
  9634                                  ;
  9635                                  ; register bp is preserved.
  9636                                  ; ---------------------------------------------------------------------------
  9637                                  
  9638                                  ; 10/03/2019 - Retro DOS v4.0
  9639                                  
  9640                                  		; 19/10/2022
  9641                                  read_sector:	
  9642 0000077A 55                      		push	bp
  9643 0000077B BD0300                  		mov	bp, 3		; make 3 attempts
  9644 0000077E 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9645 00000782 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9646                                  rd_ret:					
  9647 00000785 06                      		push	es
  9648 00000786 1E                      		push	ds
  9649 00000787 07                      		pop	es
  9650 00000788 B80102                  		mov	ax, 201h
  9651 0000078B CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9652                                  					; AL = number of sectors to read, CH = track, CL = sector
  9653                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9654                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9655 0000078D 07                      		pop	es
  9656 0000078E 734A                    		jnb	short okret2
  9657                                  rd_rty:					
  9658 00000790 E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
  9659 00000793 7442                    		jz	short err_rd_ret
  9660 00000795 26F6452301              		test	byte [es:di+23h], 1
  9661                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9662                                  					; fnon_removable
  9663 0000079A 75E9                    		jnz	short rd_ret
  9664 0000079C 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9665 000007A1 7510                    		jnz	short rd_skip1_dpt
  9666 000007A3 50                      		push	ax
  9667 000007A4 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9668 000007A5 C536[2D01]              		lds	si, [dpt]
  9669                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9670                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9671                                  		;			; NORMSETTLE
  9672                                  		; 12/12/2022
  9673 000007A9 B00F                    		mov	al, 15
  9674 000007AB 864409                  		xchg	al, [si+9]
  9675                                  		; 
  9676 000007AE 1F                      		pop	ds
  9677 000007AF A2[2A01]                		mov	[save_head_sttl], al
  9678 000007B2 58                      		pop	ax
  9679                                  rd_skip1_dpt:				
  9680 000007B3 06                      		push	es
  9681 000007B4 1E                      		push	ds
  9682 000007B5 07                      		pop	es
  9683 000007B6 B80102                  		mov	ax, 201h
  9684 000007B9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9685                                  					; AL = number of sectors to read, CH = track, CL = sector
  9686                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9687                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9688 000007BB 07                      		pop	es
  9689 000007BC 9C                      		pushf
  9690 000007BD 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9691 000007C2 750E                    		jnz	short rd_skip2_dpt
  9692 000007C4 50                      		push	ax
  9693 000007C5 A0[2A01]                		mov	al, [save_head_sttl]
  9694 000007C8 1E                      		push	ds
  9695 000007C9 C536[2D01]              		lds	si, [dpt]
  9696 000007CD 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9697 000007D0 1F                      		pop	ds
  9698 000007D1 58                      		pop	ax
  9699                                  rd_skip2_dpt:				
  9700 000007D2 9D                      		popf
  9701 000007D3 7305                    		jnb	short okret2
  9702 000007D5 EBB9                    		jmp	short rd_rty
  9703                                  ; ---------------------------------------------------------------------------
  9704                                  
  9705                                  err_rd_ret:				
  9706 000007D7 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9707                                  					; return error
  9708 000007D9 F9                      		stc
  9709                                  
  9710                                  ; update information pertaining to last drive accessed, time of access, last
  9711                                  ; track accessed in that drive.
  9712                                  
  9713                                  okret2:					
  9714 000007DA 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9715 000007DE 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9716 000007E2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9717                                  					; save last track accessed on this drive
  9718                                  					; preserve flags in case error occurred
  9719 000007E6 9C                      		pushf
  9720 000007E7 E8FF03                  		call	set_tim
  9721 000007EA 9D                      		popf			; restore flags
  9722 000007EB 5D                      		pop	bp
  9723 000007EC C3                      		retn
  9724                                  
  9725                                  ;----------------------------------------------------------------------------
  9726                                  ;	disk open/close routines
  9727                                  ;----------------------------------------------------------------------------
  9728                                  
  9729                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9730 000007ED 803E[7700]00            		cmp	byte [fhave96], 0
  9731 000007F2 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9732 000007F4 E8D4FC                  		call	SetDrive	; get bds for drive
  9733 000007F7 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9734                                  dsk_open_exit:	
  9735                                  		; 10/12/2022
  9736                                  		; cf = 0			
  9737                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9738                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9739 000007FB C3                      		retn
  9740                                  ; ---------------------------------------------------------------------------
  9741                                  
  9742                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9743 000007FC 803E[7700]00            		cmp	byte [fhave96], 0
  9744 00000801 740E                    		jz	short exitjx	; done if no changeline	support
  9745 00000803 E8C5FC                  		call	SetDrive	; get bds for drive
  9746 00000806 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9747 0000080B 7404                    		jz	short exitjx	; watch	out for	wrap
  9748 0000080D 26FF4D20                		dec	word [es:di+20h]
  9749                                  exitjx:					
  9750                                  		; 10/12/2022
  9751                                  		; cf = 0
  9752                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9753                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9754 00000811 C3                      		retn
  9755                                  
  9756                                  ;----------------------------------------------------------------------------
  9757                                  ;		disk removable routine
  9758                                  ;----------------------------------------------------------------------------
  9759                                  
  9760                                  		; al is	unit #
  9761                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9762 00000812 E8B6FC                  		call	SetDrive	; get bds for this drive
  9763                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9764 00000815 26F6452301              		test	byte [es:di+23h], 1
  9765                                  		;jnz	short x_bus_exit ; non_rem
  9766 0000081A 7501                    		jnz	short non_rem	; 15/10/2022
  9767                                  		; 10/12/2022
  9768                                  		; cf = 0
  9769                                  		;clc			; CF is already ZERO here
  9770                                  					; 15/10/2022
  9771 0000081C C3                      		retn
  9772                                  ; ---------------------------------------------------------------------------
  9773                                  
  9774                                  non_rem:
  9775                                  x_bus_exit:				
  9776 0000081D B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9777                                  					; return busy status
  9778 0000081F F9                      		stc
  9779                                  dsk_ret:				
  9780 00000820 C3                      		retn
  9781                                  
  9782                                  ;----------------------------------------------------------------------------
  9783                                  ;		disk i/o routines
  9784                                  ;----------------------------------------------------------------------------
  9785                                  
  9786                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9787                                  		;mov	word [wrtverify], 103h
  9788                                  		; 19/10/2022
  9789 00000821 C706[2001]0301          		mov	word [rflag], 103h
  9790                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9791 00000827 EB06                    		jmp	short dsk_cl
  9792                                  ; ---------------------------------------------------------------------------
  9793                                  
  9794                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9795                                  		;mov	word [wrtverify], 3
  9796                                  		; 19/10/2022
  9797 00000829 C706[2001]0300          		mov	word [rflag], 3
  9798                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9799                                  
  9800                                  dsk_cl:					
  9801 0000082F E89800                  		call	diskio		; romwrite
  9802                                  ; ---------------------------------------------------------------------------
  9803                                  
  9804                                  dsk_io:					
  9805 00000832 73EC                    		jnb	short dsk_ret
  9806 00000834 E9A0F8                  		jmp	bc_err_cnt
  9807                                  ; ---------------------------------------------------------------------------
  9808                                  
  9809                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9810 00000837 E88B00                  		call	diskrd
  9811 0000083A EBF6                    		jmp	short dsk_io
  9812                                  
  9813                                  ; =============== S U B	R O U T	I N E =======================================
  9814                                  
  9815                                  ; 15/10/2022
  9816                                  ; 10/03/2019 - Retro DOS v4.0
  9817                                  
  9818                                  ;-----------------------------------------------------------
  9819                                  ; miscellaneous odd jump routines. 
  9820                                  ; moved out of mainline for speed.
  9821                                  
  9822                                  ; if we have a system where we have virtual drives, we need 
  9823                                  ; to prompt the user to place the correct disk in the drive.
  9824                                  ;
  9825                                  ;	assume es:di -> bds, ds:->Bios_Data
  9826                                  ;-----------------------------------------------------------
  9827                                  
  9828                                  		; 19/10/2022
  9829                                  checksingle:		
  9830 0000083C 50                      		push	ax
  9831 0000083D 53                      		push	bx
  9832 0000083E 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9833                                  
  9834                                  ; if hard drive, cannot change disk.
  9835                                  ; if current owner of physical drive, no need to change diskette.
  9836                                  
  9837 00000842 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9838 00000845 7573                    		jnz	short singleret
  9839 00000847 F6C310                  		test	bl, 10h		; fi_am_mult
  9840                                  					; is there a drive sharing this	physical drive?
  9841 0000084A 746E                    		jz	short singleret
  9842                                  
  9843                                  
  9844                                  ; look for the previous owner of this physical drive
  9845                                  ; and reset its ownership flag.
  9846                                  
  9847 0000084C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9848                                  					; get physical drive number
  9849 00000850 06                      		push	es		; preserve pointer to current bds
  9850 00000851 57                      		push	di
  9851 00000852 C43E[1901]              		les	di, [start_bds] ; get first bds
  9852                                  scan_list:				
  9853 00000856 26384504                		cmp	[es:di+4], al
  9854 0000085A 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9855 0000085C B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9856 0000085E 26845D23                		test	[es:di+23h], bl
  9857 00000862 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9858 00000864 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9859 00000868 5F                      		pop	di		; restore pointer to current bds
  9860 00000869 07                      		pop	es
  9861 0000086A 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9862                                  
  9863                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9864                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9865                                  ; in this case.
  9866 0000086E 803E[7A00]01            		cmp	byte [fsetowner], 1
  9867 00000873 7517                    		jnz	short not_fsetowner
  9868                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9869 00000875 26807D0400              		cmp	byte [es:di+4], 0
  9870 0000087A 753E                    		jnz	short singleret
  9871 0000087C 268A4505                		mov	al, [es:di+5]
  9872                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9873                                  					; get the DOS drive letter
  9874 00000880 06                      		push	es
  9875 00000881 8E06[1A00]              		mov	es, [zeroseg]
  9876 00000885 26A20405                		mov	[es:LSTDRV], al
  9877                                  		;mov	es:504h, al	; [es:LSTDRV]
  9878                                  					; set up sdsb
  9879 00000889 07                      		pop	es		; restore bds pointer
  9880 0000088A EB2E                    		jmp	short singleret
  9881                                  ; ---------------------------------------------------------------------------
  9882                                  
  9883                                  ; to support "backward" compatibility with ibm's "single drive status byte"
  9884                                  ; we now check to see if we are in a single drive system and the application
  9885                                  ; has "cleverly" diddled the sdsb
  9886                                  
  9887                                  not_fsetowner:				
  9888 0000088C 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
  9889 00000891 7517                    		jnz	short ignore_sdsb
  9890 00000893 50                      		push	ax
  9891 00000894 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
  9892 00000898 88C4                    		mov	ah, al
  9893 0000089A 06                      		push	es
  9894 0000089B 8E06[1A00]              		mov	es, [zeroseg]
  9895 0000089F 2686060405              		xchg	al, [es:LSTDRV]
  9896                                  		;xchg	al, es:504h	; [es:LSTDRV]
  9897                                  					; then swap(curr_drv,req_drv)
  9898 000008A4 07                      		pop	es
  9899 000008A5 38C4                    		cmp	ah, al		; else
  9900 000008A7 58                      		pop	ax		; swap(curr_drv,req_drv)
  9901 000008A8 7410                    		jz	short singleret	; issue	swap_dsk_msg
  9902                                  ignore_sdsb:				
  9903 000008AA E8800E                  		call	swpdsk
  9904 000008AD EB0B                    		jmp	short singleret
  9905                                  ; ---------------------------------------------------------------------------
  9906                                  
  9907                                  scan_skip:	
  9908 000008AF 26C43D                  		les	di, [es:di]			
  9909                                  		;les	di, es:[di]	; [es:di+BDS.link]
  9910                                  					; go to	next bds
  9911 000008B2 83FFFF                  		cmp	di, 0FFFFh	; end of list?
  9912 000008B5 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
  9913 000008B7 F9                      		stc
  9914 000008B8 5F                      		pop	di		; restore current bds
  9915 000008B9 07                      		pop	es
  9916                                  
  9917                                  singleret:				
  9918 000008BA 5B                      		pop	bx
  9919 000008BB 58                      		pop	ax
  9920 000008BC C3                      		retn
  9921                                  
  9922                                  ; ---------------------------------------------------------------------------
  9923                                  
  9924                                  baddrive:				
  9925 000008BD B008                    		mov	al, 8		; sector not found
  9926 000008BF EB02                    		jmp	short baddrive_ret
  9927                                  ; ---------------------------------------------------------------------------
  9928                                  
  9929                                  unformatteddrive:				
  9930 000008C1 B007                    		mov	al, 7		; unknown media
  9931                                  baddrive_ret:				
  9932 000008C3 F9                      		stc
  9933                                  ; ---------------------------------------------------------------------------
  9934                                  
  9935                                  ioret:		
  9936 000008C4 C3                      		retn
  9937                                  
  9938                                  ; ---------------------------------------------------------------------------
  9939                                  
  9940                                  ; 15/10/52022
  9941                                  
  9942                                  ; ---------------------------------------------------------------------------
  9943                                  ;	disk i/o handler
  9944                                  ;
  9945                                  ;	al = drive number (0-6)
  9946                                  ;	ah = media descriptor
  9947                                  ;	cx = sector count
  9948                                  ;	dx = first sector (low)
  9949                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
  9950                                  ;	ds = cs
  9951                                  ;	es:di = transfer address
  9952                                  ;	[rflag]=operation (2=read, 3=write)
  9953                                  ;	[verify]=1 for verify after write
  9954                                  ;
  9955                                  ;	if successful carry flag = 0
  9956                                  ;	  else cf=1 and al contains error code
  9957                                  ; ---------------------------------------------------------------------------
  9958                                  
  9959                                  diskrd:	
  9960                                  		;mov	ds:rflag, 2	; romread
  9961                                  		; 19/10/2022
  9962 000008C5 C606[2001]02            		mov	byte [rflag], 2 ; romread
  9963                                  
  9964                                  ; =============== S U B	R O U T	I N E =======================================
  9965                                  
  9966                                  		; 19/10/2022
  9967                                  diskio:
  9968 000008CA 89FB                    		mov	bx, di		; es:bx	= transfer address
  9969 000008CC 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
  9970 000008D0 E8F8FB                  		call	SetDrive
  9971 000008D3 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
  9972 000008D7 A2[1F01]                		mov	[medbyt], al
  9973                                  		;jcxz	short ioret
  9974 000008DA E3E8                    		jcxz	ioret
  9975                                  
  9976                                  ; see if the media is formatted or not by checking the flags field in
  9977                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
  9978                                  ; go to the error exit at label unformatteddrive.
  9979                                  
  9980 000008DC 26F6452402              		test	byte [es:di+24h], 2
  9981                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
  9982                                  					; unformatted_media
  9983 000008E1 75DE                    		jnz	short unformatteddrive
  9984 000008E3 890E[2201]              		mov	[seccnt], cx	; save sector count
  9985 000008E7 8926[3501]              		mov	[spsav], sp	; save sp
  9986                                  
  9987                                  ; ensure that we are trying to access valid sectors on the drive
  9988                                  
  9989 000008EB 89D0                    		mov	ax, dx
  9990 000008ED 31F6                    		xor	si, si
  9991 000008EF 01CA                    		add	dx, cx
  9992 000008F1 83D600                  		adc	si, 0
  9993 000008F4 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
  9994                                  					; > 32 bit sector ?
  9995 000008F9 740D                    		jz	short sanity32
  9996 000008FB 83FE00                  		cmp	si, 0
  9997 000008FE 75BD                    		jnz	short baddrive
  9998 00000900 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9999 00000904 77B7                    		ja	short baddrive
 10000 00000906 EB12                    		jmp	short sanityok
 10001                                  ; ---------------------------------------------------------------------------
 10002                                  
 10003                                  sanity32:				
 10004 00000908 0336[2B05]              		add	si, [start_sec_h]
 10005 0000090C 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10006 00000910 7208                    		jb	short sanityok
 10007 00000912 77A9                    		ja	short baddrive
 10008 00000914 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10009 00000918 77A3                    		ja	short baddrive
 10010                                  
 10011                                  sanityok:				
 10012 0000091A 8B16[2B05]              		mov	dx, [start_sec_h]
 10013 0000091E 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10014 00000922 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10015                                  
 10016                                  ; now dx;ax have the physical first sector.
 10017                                  ; since the following procedures is going to destroy ax, let's
 10018                                  ; save it temporarily to saved_word.
 10019                                  
 10020 00000926 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10021                                  
 10022                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10023                                  ; will do it because we will skip the set up stuff with hard disks.
 10024                                  
 10025 00000929 06                      		push	es
 10026 0000092A 8E06[1A00]              		mov	es, [zeroseg]
 10027 0000092E 26C4367800              		les	si, [es:DSKADR]
 10028                                  		;les	si, es:78h	; [es:DSKADR]
 10029                                  					; current disk parm table
 10030 00000933 8936[2D01]              		mov	[dpt], si
 10031 00000937 8C06[2F01]              		mov	[dpt+2], es
 10032 0000093B 07                      		pop	es
 10033 0000093C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10034                                  					; fnon_removable
 10035 00000941 7510                    		jnz	short skip_setup
 10036 00000943 E8F6FE                  		call	checksingle
 10037                                  
 10038                                  ; check to see if we have previously noted a change line. the routine
 10039                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10040                                  ; the proper error code.
 10041                                  
 10042 00000946 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10043 0000094B 7403                    		jz	short diskio_nochangeline ; brif not
 10044 0000094D E8AB0E                  		call	checklatchio	; will do a sneaky pop stack return
 10045                                  					; if a disk error occurs
 10046                                  diskio_nochangeline:			
 10047 00000950 E84700                  		call	iosetup		; set up tables	and variables for i/o
 10048                                  
 10049                                  ; now the settle values are correct for the following code
 10050                                  
 10051                                  skip_setup:
 10052                                  
 10053                                  ; 32 bit sector calculation.
 10054                                  ; dx:[saved_word] = starting sector number.
 10055                                  				
 10056 00000953 89D0                    		mov	ax, dx
 10057 00000955 31D2                    		xor	dx, dx
 10058 00000957 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10059                                  					 ; divide by sec per track
 10060 0000095B A3[2905]                		mov	[temp_h], ax
 10061 0000095E A1[2D05]                		mov	ax, [saved_word]
 10062 00000961 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10063                                  					; now, [temp_h]:ax = track #, dx = sector
 10064                                  		;inc	dl		; sector number	is 1 based.
 10065                                  		; 18/12/2022
 10066 00000965 42                      		inc	dx
 10067 00000966 8816[3101]              		mov	[cursec], dl	; save current sector
 10068 0000096A 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10069                                  					; get number of	heads
 10070 0000096E 50                      		push	ax
 10071 0000096F 31D2                    		xor	dx, dx
 10072 00000971 A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10073 00000974 F7F1                    		div	cx
 10074 00000976 A3[2905]                		mov	[temp_h], ax
 10075 00000979 58                      		pop	ax
 10076 0000097A F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10077 0000097C 833E[2905]00            		cmp	word [temp_h], 0
 10078 00000981 7714                    		ja	short baddrive_brdg
 10079 00000983 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10080 00000986 770F                    		ja	short baddrive_brdg
 10081 00000988 8816[3201]              		mov	[curhd], dl	; save current head
 10082 0000098C A3[3301]                		mov	[curtrk], ax	; save current track
 10083                                  
 10084                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10085                                  ; violations here. not true. we perform the operation as if everything is
 10086                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10087                                  
 10088 0000098F A1[2201]                		mov	ax, [seccnt]
 10089 00000992 E88400                  		call	block		; (cas - call/ret)
 10090                                  		;call	done
 10091                                  		;retn
 10092                                  		; 18/12/2022
 10093 00000995 EB4B                    		jmp	done
 10094                                  
 10095                                  ; ---------------------------------------------------------------------------
 10096                                  
 10097                                  baddrive_brdg:				
 10098 00000997 E923FF                  		jmp	baddrive
 10099                                  
 10100                                  ; =============== S U B	R O U T	I N E =======================================
 10101                                  
 10102                                  ;--------------------------------------------------------------
 10103                                  ; set the drive-last-accessed flag for diskette only. 
 10104                                  ; we know that the hard disk will not be removed.
 10105                                  ; es:di -> current bds.
 10106                                  ; ds -> Bios_Data
 10107                                  ; ax,cx,si are destroyed.
 10108                                  ;--------------------------------------------------------------
 10109                                  
 10110                                  		; 19/10/2022
 10111                                  iosetup:	
 10112 0000099A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10113 0000099E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10114                                  
 10115                                  ; determine proper head settle values
 10116                                  
 10117 000009A1 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10118 000009A6 7539                    		jnz	short skip_dpt_setting
 10119 000009A8 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10120 000009AB 1E                      		push	ds
 10121 000009AC C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10122 000009B0 884404                  		mov	[si+4],	al
 10123 000009B3 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10124 000009B6 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10125 000009B9 1F                      		pop	ds
 10126 000009BA A2[2601]                		mov	[motorstartup], al
 10127 000009BD 8826[2B01]              		mov	[save_eot], ah
 10128                                  
 10129                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10130                                  ; motor start time to 4. this checking for every i/o is going to affect
 10131                                  ; performance across the board, but is necessary!!
 10132                                  
 10133 000009C1 1E                      		push	ds
 10134 000009C2 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10135 000009C6 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10136                                  					; ffSmall
 10137 000009CB 7505                    		jnz	short motor_start_ok
 10138 000009CD B004                    		mov	al, 4
 10139 000009CF 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10140                                  motor_start_ok:
 10141                                  
 10142                                  ; ds:si now points to disk parameter table.
 10143                                  ; get current settle and set fast settle
 10144                                  				
 10145                                  		;xor	al, al
 10146                                  		;inc	al		; ibm wants fast settle	to be 1
 10147                                  		; 18/12/2022
 10148 000009D2 31C0                    		xor	ax, ax
 10149 000009D4 40                      		inc	ax
 10150 000009D5 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10151                                  					; get settle and set up	for fast
 10152 000009D8 1F                      		pop	ds
 10153 000009D9 A2[2701]                		mov	[settlecurrent], al
 10154 000009DC B00F                    		mov	al, 15		; NORMSETTLE
 10155                                  					; someone has diddled the settle
 10156 000009DE A2[2801]                		mov	[settleslow], al
 10157                                  skip_dpt_setting:			
 10158 000009E1 C3                      		retn
 10159                                  
 10160                                  ; =============== S U B	R O U T	I N E =======================================
 10161                                  
 10162                                  ;--------------------------------------------------------------
 10163                                  ; set time of last access, and reset default values in the dpt.
 10164                                  ;
 10165                                  ;	  note: trashes (at least) si
 10166                                  ;--------------------------------------------------------------
 10167                                  
 10168                                  		; 19/10/2022
 10169                                  done:
 10170 000009E2 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10171                                  					; fnon_removable
 10172 000009E7 752F                    		jnz	short ddbx	; do not set for non-removable media
 10173 000009E9 E8FD01                  		call	set_tim
 10174                                  ;diddleback:
 10175                                  ; 09/12/2022
 10176                                  diddle_back:				
 10177 000009EC 9C                      		pushf
 10178 000009ED 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10179 000009F2 7523                    		jnz	short nodiddleback
 10180 000009F4 50                      		push	ax
 10181 000009F5 06                      		push	es
 10182 000009F6 C436[2D01]              		les	si, [dpt]
 10183 000009FA A0[2B01]                		mov	al, [save_eot]
 10184 000009FD 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10185 00000A01 A0[2701]                		mov	al, [settlecurrent]
 10186 00000A04 8A26[2601]              		mov	ah, [motorstartup]
 10187 00000A08 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10188 00000A0C 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10189 00000A11 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10190 00000A15 07                      		pop	es
 10191 00000A16 58                      		pop	ax
 10192                                  nodiddleback:				
 10193 00000A17 9D                      		popf
 10194                                  ddbx:					
 10195 00000A18 C3                      		retn
 10196                                  
 10197                                  ; =============== S U B	R O U T	I N E =======================================
 10198                                  
 10199                                  ;--------------------------------------------------------------
 10200                                  ;read the number of sectors specified in ax, 
 10201                                  ;handling track boundaries
 10202                                  ;es:di -> bds for this drive
 10203                                  ;--------------------------------------------------------------
 10204                                  
 10205                                  		 ; 19/10/2022
 10206                                  block:	
 10207 00000A19 09C0                    		or	ax, ax
 10208 00000A1B 74FB                    		jz	short ddbx
 10209 00000A1D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10210                                  					; fnon_removable
 10211 00000A22 740D                    		jz	short block_floppy ;
 10212                                  
 10213                                  ; check	to see if multi	track operation	is allowed. if not
 10214                                  ; we have to go	to the block_floppy below to break up the operation.
 10215                                  
 10216 00000A24 F606[2F05]80            		test	byte [multrk_flag], 80h
 10217                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10218 00000A29 7406                    		jz	short block_floppy
 10219 00000A2B E82900                  		call	Disk
 10220 00000A2E 31C0                    		xor	ax, ax
 10221 00000A30 C3                      		retn
 10222                                  ; ---------------------------------------------------------------------------
 10223                                  
 10224                                  block_floppy:
 10225                                  
 10226                                  ; read at most 1 track worth. perform minimization at sector / track
 10227                                  				
 10228 00000A31 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10229 00000A35 FEC1                    		inc	cl
 10230 00000A37 2A0E[3101]              		sub	cl, [cursec]
 10231 00000A3B 30ED                    		xor	ch, ch
 10232 00000A3D 39C8                    		cmp	ax, cx
 10233 00000A3F 7302                    		jnb	short gotmin
 10234 00000A41 89C1                    		mov	cx, ax
 10235                                  
 10236                                  gotmin:
 10237                                  
 10238                                  ; ax is the requested number of sectors to read
 10239                                  ; cx is the number that we can do on this track
 10240                                  					
 10241 00000A43 50                      		push	ax
 10242 00000A44 51                      		push	cx
 10243 00000A45 89C8                    		mov	ax, cx
 10244 00000A47 E80D00                  		call	Disk
 10245 00000A4A 59                      		pop	cx
 10246 00000A4B 58                      		pop	ax
 10247                                  
 10248                                  ; cx is the number of sectors just transferred
 10249                                  
 10250 00000A4C 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10251 00000A4E D0E1                    		shl	cl, 1
 10252 00000A50 00CF                    		add	bh, cl		; adjust transfer address
 10253 00000A52 EBC5                    		jmp	short block
 10254                                  dskerr_brdg:				
 10255 00000A54 E9EC00                  		jmp	dskerr
 10256                                  
 10257                                  ; =============== S U B	R O U T	I N E =======================================
 10258                                  
 10259                                  ; 15/10/2022
 10260                                  
 10261                                  ;--------------------------------------------------------------
 10262                                  ;perform disk i/o with retries
 10263                                  ; al = number of sectors (1-8, all on one track)
 10264                                  ; es:di point to drive parameters
 10265                                  ; xfer_seg:bx = transfer address 
 10266                                  ;		(must not cross a 64k physical boundary)
 10267                                  ; [rflag] = 2 if read, 3 if write
 10268                                  ; [verify] = 0 for normal, 1 for verify after write
 10269                                  ;--------------------------------------------------------------
 10270                                  
 10271                                  		 ; 19/10/2022
 10272                                  Disk:
 10273                                  
 10274                                  ; Check for hard disk format and
 10275                                  ; if TRUE then set max error count to 2
 10276                                  
 10277 00000A57 BD0500                  		mov	bp, 5		; MAXERR
 10278                                  					; set up retry count
 10279 00000A5A 26F6452301              		test	byte [es:di+23h], 1	;
 10280                                  					; [es:di+BDS.flags], fnon_removable
 10281 00000A5F 7408                    		jz	short GetRdWrInd
 10282 00000A61 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10283 00000A64 7403                    		jz	short GetRdWrInd
 10284 00000A66 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10285                                  GetRdWrInd:				
 10286 00000A69 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10287 00000A6D 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10288 00000A71 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10289                                  ;retry:
 10290                                  ; 09/12/2022
 10291                                  _retry:					
 10292 00000A75 50                      		push	ax
 10293 00000A76 8B16[3301]              		mov	dx, [curtrk]
 10294 00000A7A 26F6452301              		test	byte [es:di+23h], 1
 10295 00000A7F 740B                    		jz	short disk_not_mini
 10296 00000A81 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10297                                  					; is this a mini disk? ((logical dos partition))
 10298 00000A86 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10299 00000A88 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10300                                  					; add hidden trks.
 10301                                  disk_not_mini:				
 10302 00000A8C D0CE                    		ror	dh, 1
 10303 00000A8E D0CE                    		ror	dh, 1
 10304 00000A90 0A36[3101]              		or	dh, [cursec]
 10305 00000A94 89D1                    		mov	cx, dx
 10306 00000A96 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10307 00000A98 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10308 00000A9C 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10309                                  					; [es:di+BDS.drivenum]
 10310 00000AA0 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10311 00000AA5 7413                    		jz	short do_fast	; hard files use fast speed
 10312                                  
 10313                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10314                                  ; this helps when we have just done a reset disk operation and the head has
 10315                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10316                                  
 10317 00000AA7 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10318 00000AAC 740A                    		jz	short do_writej
 10319 00000AAE 80FC02                  		cmp	ah, 2		; romread
 10320 00000AB1 7407                    		jz	short do_fast
 10321 00000AB3 80FC04                  		cmp	ah, 4		; romverify
 10322 00000AB6 7402                    		jz	short do_fast
 10323                                  do_writej:	
 10324                                  
 10325                                  ; reads always fast, unless we have just done a disk reset operation
 10326                                  			
 10327 00000AB8 EB56                    		jmp	short do_write	; reads	always fast
 10328                                  ; ---------------------------------------------------------------------------
 10329                                  
 10330                                  do_fast:				
 10331 00000ABA E8FC00                  		call	fastspeed	; change settle	mode
 10332                                  
 10333                                  testerr:				
 10334 00000ABD 7295                    		jb	short dskerr_brdg
 10335                                  
 10336                                  ; set drive and track of last access
 10337                                  
 10338 00000ABF 8816[7600]              		mov	[step_drv], dl
 10339 00000AC3 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10340                                  no_set:
 10341                                  		;cmp	word [wrtverify], 103h
 10342 00000AC7 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10343 00000ACD 7452                    		jz	short doverify
 10344                                  noverify:				
 10345 00000ACF 58                      		pop	ax
 10346                                  
 10347                                  ; check the flags word in the bds to see if the drive is non removable
 10348                                  ; if not we needn't do anything special
 10349                                  ; if it is a hard disk then check to see if multi-track operation
 10350                                  ; is specified. if specified we don't have to calculate for the next
 10351                                  ; track since we are already done. so we can go to the exit of this routine.
 10352                                  
 10353 00000AD0 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10354                                  					; fnon_removable
 10355 00000AD5 7407                    		jz	short its_removable
 10356 00000AD7 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10357 00000ADC 7530                    		jnz	short disk_ret
 10358                                  its_removable:				
 10359 00000ADE 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10360 00000AE1 30E4                    		xor	ah, ah
 10361 00000AE3 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10362 00000AE7 00C1                    		add	cl, al
 10363 00000AE9 880E[3101]              		mov	[cursec], cl
 10364 00000AED 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10365                                  					; see if sector/track limit reached
 10366 00000AF1 761B                    		jbe	short disk_ret
 10367 00000AF3 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10368 00000AF8 8A36[3201]              		mov	dh, [curhd]
 10369 00000AFC FEC6                    		inc	dh
 10370 00000AFE 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10371 00000B02 7206                    		jb	short noxor
 10372 00000B04 30F6                    		xor	dh, dh
 10373 00000B06 FF06[3301]              		inc	word [curtrk]
 10374                                  noxor:					
 10375 00000B0A 8836[3201]              		mov	[curhd], dh
 10376                                  disk_ret:				
 10377 00000B0E F8                      		clc
 10378 00000B0F C3                      		retn
 10379                                  ; ---------------------------------------------------------------------------
 10380                                  
 10381                                  ; 15/10/2022
 10382                                  
 10383                                  ;--------------------------------------------------------------
 10384                                  ; the request is for write. determine if we are talking about
 10385                                  ; the same track and drive. if so, use the fast speed.
 10386                                  ;--------------------------------------------------------------
 10387                                  
 10388                                  do_write:				
 10389 00000B10 3A16[7600]              		cmp	dl, [step_drv]
 10390 00000B14 7506                    		jnz	short do_norm	; we have changed drives
 10391 00000B16 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10392 00000B1A 749E                    		jz	short do_fast	; we are still on the same track
 10393                                  
 10394                                  do_norm:				
 10395 00000B1C E87500                  		call	normspeed
 10396 00000B1F EB9C                    		jmp	short testerr
 10397                                  ; ---------------------------------------------------------------------------
 10398                                  
 10399                                  ;--------------------------------------------------------------
 10400                                  ; we have a verify request also. get state info and go verify
 10401                                  ;--------------------------------------------------------------
 10402                                  
 10403                                  doverify:				
 10404 00000B21 58                      		pop	ax
 10405 00000B22 50                      		push	ax
 10406 00000B23 B404                    		mov	ah, 4
 10407 00000B25 E89100                  		call	fastspeed
 10408 00000B28 73A5                    		jnb	short noverify
 10409                                  
 10410                                  ; check the error returned in ah to see if it is a soft ecc error.
 10411                                  ; if it is not we needn't do anything special. if it is a soft
 10412                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10413                                  ; this retry count becomes 0 then we just ignore the error and go to
 10414                                  ; no_verify but if we can still try then we call the routine to reset
 10415                                  ; the disk and go to dskerr1 to retry the operation.
 10416                                  
 10417 00000B2A 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10418 00000B2D 750B                    		jnz	short not_softecc_err
 10419 00000B2F FF0E[3405]              		dec	word [soft_ecc_cnt]
 10420 00000B33 749A                    		jz	short noverify	; no more retry
 10421 00000B35 E84405                  		call	ResetDisk	; reset	disk
 10422 00000B38 EB3E                    		jmp	short dskerr1	; retry
 10423                                  ; ---------------------------------------------------------------------------
 10424                                  
 10425                                  not_softecc_err:			; other error.			
 10426 00000B3A E83F05                  		call	ResetDisk
 10427 00000B3D FF0E[3205]              		dec	word [vretry_cnt]
 10428 00000B41 EB1C                    		jmp	short dskerr0
 10429                                  ; ---------------------------------------------------------------------------
 10430                                  
 10431                                  ;--------------------------------------------------------------
 10432                                  ; need to special case the change-line error ah=06h.
 10433                                  ; if we get this, we need to return it.
 10434                                  ;--------------------------------------------------------------
 10435                                  
 10436                                  dskerr:					
 10437 00000B43 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10438 00000B48 7403                    		jz	short dskerr_nochangeline ; brif not
 10439 00000B4A E8220D                  		call	checkio
 10440                                  dskerr_nochangeline:			
 10441 00000B4D 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10442 00000B52 7508                    		jnz	short dochkagain ; no more retry.
 10443 00000B54 BD0100                  		mov	bp, 1
 10444 00000B57 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10445                                  dochkagain:				
 10446 00000B5C E8AA00                  		call	again
 10447                                  dskerr0:				
 10448 00000B5F 7420                    		jz	short harderr
 10449 00000B61 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10450                                  					; fnon_removable
 10451 00000B66 7505                    		jnz	short skip_timeout_chk
 10452 00000B68 80FC80                  		cmp	ah, 80h		; timeout?
 10453 00000B6B 7414                    		jz	short harderr
 10454                                  skip_timeout_chk:			
 10455 00000B6D 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10456 00000B70 740A                    		jz	short write_fault_err ;	then, don't retry.
 10457 00000B72 C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10458                                  					; set soft_ecc_cnt back	to maxerr
 10459                                  dskerr1:				
 10460 00000B78 58                      		pop	ax		; restore sector count
 10461                                  		;jmp	retry
 10462                                  		; 09/12/2022
 10463 00000B79 E9F9FE                  		jmp	_retry
 10464                                  ; ---------------------------------------------------------------------------
 10465                                  
 10466                                  write_fault_err:			
 10467 00000B7C BD0100                  		mov	bp, 1		; just retry only once
 10468                                  					; for write fault error.
 10469 00000B7F EBF7                    		jmp	short dskerr1
 10470                                  
 10471                                  		; fall into harderr
 10472                                  ; ---------------------------------------------------------------------------
 10473                                  
 10474                                  ; entry point for routines that call maperror themselves
 10475                                  
 10476                                  harderr:				
 10477 00000B81 E84D00                  		call	maperror
 10478                                  harderr2:				
 10479 00000B84 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10480                                  					; force a media check through rom
 10481 00000B89 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10482 00000B8D 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10483                                  
 10484                                  ; since we are performing a non-local goto, restore the disk parameters
 10485                                  
 10486                                  		;jmp	diddleback
 10487                                  		; 09/12/2022
 10488 00000B91 E958FE                  		jmp	diddle_back
 10489                                  
 10490                                  ; =============== S U B	R O U T	I N E =======================================
 10491                                  
 10492                                  ; change settle value from settlecurrent to whatever is appropriate
 10493                                  ; note that this routine is never called for a fixed disk.
 10494                                  
 10495                                  		; 19/10/2022
 10496                                  normspeed:
 10497 00000B94 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10498 00000B99 751E                    		jnz	short fastspeed
 10499 00000B9B 06                      		push	es
 10500 00000B9C 50                      		push	ax
 10501 00000B9D A0[2801]                		mov	al, [settleslow]
 10502 00000BA0 C436[2D01]              		les	si, [dpt]	; current disk parm table
 10503 00000BA4 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10504 00000BA8 58                      		pop	ax
 10505 00000BA9 07                      		pop	es
 10506 00000BAA E80C00                  		call	fastspeed
 10507 00000BAD 06                      		push	es
 10508 00000BAE C436[2D01]              		les	si, [dpt]
 10509 00000BB2 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10510                                  					; 1 is fast settle value
 10511 00000BB7 07                      		pop	es
 10512 00000BB8 C3                      		retn
 10513                                  
 10514                                  ; =============== S U B	R O U T	I N E =======================================
 10515                                  
 10516                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10517                                  ; partition is > 16 bits, then always return drive not ready.
 10518                                  
 10519                                  fastspeed:		
 10520 00000BB9 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10521                                  					; ftoobig
 10522 00000BBE 750D                    		jnz	short notready
 10523 00000BC0 06                      		push	es
 10524 00000BC1 8E06[3705]              		mov	es, [xfer_seg]
 10525 00000BC5 CD13                    		int	13h		; DISK -
 10526 00000BC7 8C06[3705]              		mov	[xfer_seg], es
 10527 00000BCB 07                      		pop	es
 10528 00000BCC C3                      		retn
 10529                                  ; ---------------------------------------------------------------------------
 10530                                  
 10531                                  notready:				
 10532 00000BCD F9                      		stc
 10533 00000BCE B480                    		mov	ah, 80h
 10534 00000BD0 C3                      		retn
 10535                                  
 10536                                  ; =============== S U B	R O U T	I N E =======================================
 10537                                  
 10538                                  ; map error returned by rom in ah into corresponding code to be returned to
 10539                                  ; dos in al. trashes di. guaranteed to set carry.
 10540                                  
 10541                                  maperror:	
 10542 00000BD1 51                      		push	cx
 10543 00000BD2 06                      		push	es
 10544 00000BD3 1E                      		push	ds		; set es=Bios_Data
 10545 00000BD4 07                      		pop	es
 10546 00000BD5 88E0                    		mov	al, ah		; put error code in al
 10547 00000BD7 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10548 00000BDA B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10549                                  					; number of possible error conditions
 10550 00000BDD BF[3C01]                		mov	di, errin	; point to error conditions
 10551 00000BE0 F2AE                    		repne scasb
 10552                                  		; 10/12/2022
 10553 00000BE2 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10554                                  					; get translation
 10555                                  		; 19/10/2022 - Temporary ! 
 10556                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10557 00000BE5 07                      		pop	es
 10558 00000BE6 59                      		pop	cx
 10559 00000BE7 F9                      		stc			; flag error condition
 10560 00000BE8 C3                      		retn
 10561                                  
 10562                                  ; =============== S U B	R O U T	I N E =======================================
 10563                                  
 10564                                  ; set the time of last access for this drive.
 10565                                  ; this is done only for removable media. es:di -> bds
 10566                                  
 10567                                  set_tim:		
 10568 00000BE9 50                      		push	ax
 10569 00000BEA E88DF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10570                                  
 10571                                  ; we have the new time. if we see that the time has passed,
 10572                                  ; then we reset the threshold counter...
 10573                                  
 10574 00000BED 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10575 00000BF1 7506                    		jnz	short setaccess
 10576 00000BF3 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10577                                  		;jz	short done_set
 10578                                  		; 12/12/2022
 10579 00000BF7 740E                    		je	short done_set2
 10580                                  setaccess:				
 10581 00000BF9 C606[1D01]00            		mov	byte [accesscount], 0
 10582 00000BFE 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10583 00000C02 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10584                                  done_set:				
 10585 00000C06 F8                      		clc
 10586                                  done_set2:		; 12/12/2022
 10587 00000C07 58                      		pop	ax
 10588 00000C08 C3                      		retn
 10589                                  
 10590                                  ; =============== S U B	R O U T	I N E =======================================
 10591                                  
 10592                                  ; this routine is called if an error occurs while formatting or verifying.
 10593                                  ; it resets the drive,and decrements the retry count.
 10594                                  ; on entry - ds:di - points to bds for the drive
 10595                                  ;	     bp    - contains retry count
 10596                                  ; on exit    flags indicate result of decrementing retry count
 10597                                  
 10598                                  again:	
 10599 00000C09 E87004                  		call	ResetDisk
 10600 00000C0C 80FC06                  		cmp	ah, 6
 10601 00000C0F 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10602                                  					; do not decrement retry count.
 10603 00000C11 4D                      		dec	bp		; decrement retry count
 10604 00000C12 C3                      		retn
 10605                                  ; ---------------------------------------------------------------------------
 10606                                  
 10607                                  dont_dec_retry_count:			
 10608 00000C13 08E4                    		or	ah, ah
 10609 00000C15 C3                      		retn
 10610                                  
 10611                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10612                                  
 10613                                  ;----------------------------------------------------------------------------
 10614                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10615                                  ;----------------------------------------------------------------------------
 10616                                  ; 11/03/2019 - Retro DOS v4.0
 10617                                  
 10618                                  ; 18/03/2019
 10619                                  
 10620                                  ; ==========================================================================
 10621                                  ;
 10622                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10623                                  ;
 10624                                  ;      This function is intended to give the user to control the
 10625                                  ;      bds table flags of unformatted_media bit.
 10626                                  ;      GetAccessFlag will show the status -
 10627                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10628                                  ;						1 disk i/o allowed
 10629                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10630                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10631                                  ;						1 disallow disk i/o
 10632                                  ; ==========================================================================
 10633                                  
 10634                                  		; generic ioctl dispatch tables
 10635                                  
 10636                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10637                                  
 10638                                  ; ---------------------------------------------------------------------------
 10639 00000C16 00                      		db 0
 10640                                  
 10641                                  ; 09/12/2022 
 10642                                  %if 0
 10643                                  
 10644                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10645                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10646                                  		dw 0EE8h	; 61h	; ReadTrack
 10647                                  		dw 0E86h	; 62h	; VerifyTrack
 10648                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10649                                  		dw 0CA3h		; Cmd_Error_Proc
 10650                                  		dw 0CA3h		; Cmd_Error_Proc
 10651                                  		dw 119Ah	; 66h	; GetMediaId
 10652                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10653                                  		dw 12C1h	; 68h	; SenseMediaType
 10654                                  
 10655                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10656                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10657                                  		dw 0EEFh	; 41h	; WriteTrack
 10658                                  		dw 0DC1h	; 42h	; FormatTrack
 10659                                  		dw 0CA3h		; Cmd_Error_Proc
 10660                                  		dw 0CA3h		; Cmd_Error_Proc
 10661                                  		dw 0CA3h		; Cmd_Error_Proc
 10662                                  		dw 11D2h	; 46h	; SetMediaId
 10663                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10664                                  
 10665                                  %endif
 10666                                  
 10667                                  		; 09/12/2022
 10668 00000C17 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10669 00000C18 [820C]                  		dw GetDeviceParameters	; 60h
 10670 00000C1A [BD0E]                  		dw ReadTrack		; 61h
 10671 00000C1C [5D0E]                  		dw VerifyTrack		; 62h
 10672 00000C1E [7E0C]                  		dw Cmd_Error_Proc
 10673 00000C20 [7E0C]                  		dw Cmd_Error_Proc
 10674 00000C22 [7E0C]                  		dw Cmd_Error_Proc
 10675 00000C24 [5E11]                  		dw GetMediaId		; 66h
 10676 00000C26 [2A12]                  		dw GetAccessFlag	; 67h ; unpublished function
 10677 00000C28 [7C12]                  		dw SenseMediaType	; 68h
 10678                                  
 10679 00000C2A 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10680 00000C2B [CD0C]                  		dw SetDeviceParameters	; 40h
 10681 00000C2D [C40E]                  		dw WriteTrack		; 41h
 10682 00000C2F [980D]                  		dw FormatTrack		; 42h
 10683 00000C31 [7E0C]                  		dw Cmd_Error_Proc
 10684 00000C33 [7E0C]                  		dw Cmd_Error_Proc
 10685 00000C35 [7E0C]                  		dw Cmd_Error_Proc
 10686 00000C37 [9411]                  		dw SetMediaId		; 46h
 10687 00000C39 [4012]                  		dw SetAccessFlag	; 47h ; unpublished function
 10688                                  
 10689                                  ; ==========================================================================
 10690                                  ; IOC_DC_Table
 10691                                  ;
 10692                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10693                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10694                                  ; Added for 5.00
 10695                                  ; ==========================================================================
 10696                                  
 10697 00000C3B 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10698 00000C3C 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10699 00000C3D 61                      		db 61h			; READ_TRACK
 10700 00000C3E 41                      		db 41h			; WRITE_TRACK
 10701 00000C3F 62                      		db 62h			; VERIFY_TRACK
 10702 00000C40 42                      		db 42h			; FORMAT_TRACK
 10703 00000C41 66                      		db 66h			; GET_MEDIA_ID
 10704 00000C42 46                      		db 46h			; SET_MEDIA_ID
 10705 00000C43 67                      		db 67h			; GET_ACCESS_FLAG
 10706 00000C44 47                      		db 47h			; SET_ACCESS_FLAG
 10707 00000C45 68                      		db 68h			; SENSE_MEDIA_TYPE
 10708                                  
 10709                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10710                                  
 10711                                  ; ---------------------------------------------------------------------------
 10712                                  
 10713                                  ; 16/10/2022
 10714                                  
 10715                                  ; ==========================================================================
 10716                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10717                                  ;
 10718                                  ;    input: AL contains logical drive
 10719                                  ;
 10720                                  ;	functions are dispatched through a call. On return, carry indicates
 10721                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10722                                  ;	subfunctions.
 10723                                  ;
 10724                                  ; ==========================================================================
 10725                                  
 10726                                  ; 11/03/2019
 10727                                  		; 19/10/2022
 10728                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10729 00000C46 E882F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10730 00000C49 06                      		push	es
 10731 00000C4A C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10732 00000C4E 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10733                                  					; RAWIO
 10734 00000C53 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10735 00000C57 07                      		pop	es
 10736 00000C58 7525                    		jnz	short IoctlFuncErr
 10737                                  
 10738                                  		; cas note: Could do the above two blocks in reverse order.
 10739                                  		; Would have to preserve al for SetDrive
 10740                                  
 10741                                  		; 10/12/2022
 10742 00000C5A BE[170C]                		mov	si, IoReadJumpTable
 10743                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10744                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10745 00000C5D A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10746 00000C5F 7503                    		jnz	short NotGenericWrite ; function is a read.
 10747                                  		; 10/12/2022
 10748 00000C61 BE[2A0C]                		mov	si, IoWriteJumpTable
 10749                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10750                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10751                                  NotGenericWrite:			
 10752 00000C64 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10753 00000C66 2C40                    		sub	al, 40h		; offset for base function
 10754 00000C68 2E3A04                  		cmp	al, [cs:si]
 10755 00000C6B 7712                    		ja	short IoctlFuncErr
 10756 00000C6D 98                      		cbw
 10757 00000C6E D1E0                    		shl	ax, 1
 10758 00000C70 46                      		inc	si
 10759 00000C71 01C6                    		add	si, ax
 10760 00000C73 2EFF14                  		call	near [cs:si]
 10761                                  		;call	word ptr cs:[si]
 10762 00000C76 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10763                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10764                                  					; 2C7h:30h = 70h:25A0h
 10765 00000C7B B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10766 00000C7D C3                      		retn			; Pass carry flag through to exit code
 10767                                  ; ---------------------------------------------------------------------------
 10768                                  
 10769                                  		; Cmd_Error_Proc is called as a procedure and also use
 10770                                  		; as a fall through from above
 10771                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10772 00000C7E 5A                      		pop	dx
 10773                                  
 10774                                  IoctlFuncErr:				
 10775 00000C7F E953F4                  		jmp	bc_cmderr
 10776                                  ; ---------------------------------------------------------------------------
 10777                                  
 10778                                  ; 16/10/2022
 10779                                  
 10780                                  ; ==========================================================================
 10781                                  ;**	GetDeviceParameters:
 10782                                  ;
 10783                                  ;	GetDeviceParameters implements the generic ioctl function:
 10784                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10785                                  ;
 10786                                  ;	ENTRY	(ES:di) = BDS for drive
 10787                                  ;		PtrSav = long pointer to request header
 10788                                  ;	EXIT	??? BUGBUG
 10789                                  ;	USES	??? BUGBUG
 10790                                  ; ==========================================================================
 10791                                  
 10792                                  		; 19/10/2022
 10793                                  GetDeviceParameters:
 10794                                  		; Copy info from bds to the device parameters packet
 10795                                  
 10796 00000C82 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10797 00000C86 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10798                                  					; (DS:BX) = return buffer
 10799 00000C89 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10800 00000C8D 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10801 00000C90 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10802 00000C94 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10803                                  					; Mask off other bits
 10804 00000C97 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10805 00000C9A 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10806 00000C9E 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10807 00000CA1 30C0                    		xor	al, al		; Set media type to default
 10808 00000CA3 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10809                                  					
 10810                                  		; copy recommended bpb
 10811 00000CA6 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10812 00000CA9 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10813                                  					; BUILD_DEVICE_BPB
 10814 00000CAC 7412                    		jz	short UseBpbPresent
 10815 00000CAE 1E                      		push	ds		; Save request packet segment
 10816 00000CAF 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10817                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10818                                  					; 2C7h:30h = 70h:25A0h
 10819                                  					; Point back to Bios_Data
 10820 00000CB4 E885FB                  		call	checksingle
 10821 00000CB7 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 10822 00000CBA 1F                      		pop	ds		; Restore request packet segment
 10823 00000CBB 720F                    		jb	short GetParmRet
 10824 00000CBD 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10825                                  					; Use this subfield of bds instead
 10826                                  UseBpbPresent:				
 10827 00000CC0 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10828                                  					; This is where	the result goes
 10829 00000CC3 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10830                                  					; For now use 'small' bpb
 10831 00000CC6 1E                      		push	ds		; reverse segments for copy
 10832 00000CC7 06                      		push	es
 10833 00000CC8 1F                      		pop	ds
 10834 00000CC9 07                      		pop	es
 10835 00000CCA F3A4                    		rep movsb
 10836                                  		
 10837                                  		; 12/12/2022
 10838                                  		; cf=0 (test instruction -above- resets cf) 	
 10839                                  		;clc
 10840                                  GetParmRet:				
 10841 00000CCC C3                      		retn
 10842                                  ; ---------------------------------------------------------------------------
 10843                                  
 10844                                  ; 17/10/2022
 10845                                  ; 16/10/2022
 10846                                  
 10847                                  ; ==========================================================================
 10848                                  ; SetDeviceParameters:
 10849                                  ;
 10850                                  ; input: ES:di points to bds for drive
 10851                                  ; ==========================================================================
 10852                                  
 10853                                  		; 19/10/2022
 10854                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10855 00000CCD C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10856 00000CD1 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10857 00000CD4 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10858                                  					; fchanged_by_format|fchanged
 10859 00000CDA F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10860                                  					; ONLY_SET_TRACKLAYOUT
 10861 00000CDD 7579                    		jnz	short setTrackTable
 10862 00000CDF 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10863 00000CE2 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10864 00000CE6 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10865 00000CE9 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10866 00000CED 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10867 00000CF0 1E                      		push	ds
 10868                                  		; 17/10/2022
 10869 00000CF1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10870                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10871                                  					; 2C7h:30h = 70h:25A0h
 10872                                  		;cmp	byte [fhave96], 0
 10873 00000CF6 803E[7700]00            		cmp	byte [fhave96], 0
 10874 00000CFB 1F                      		pop	ds
 10875 00000CFC 7502                    		jnz	short HaveChange ; we have changeline support
 10876                                  		; 10/12/2022
 10877 00000CFE 24FD                    		and	al, 0FDh
 10878                                  		;and	ax, 0FFFDh	; ~fchangeline
 10879                                  
 10880                                  		; Ignore all bits except non_removable and changeline
 10881                                  HaveChange:				
 10882 00000D00 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 10883 00000D03 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 10884 00000D07 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 10885 00000D0B 09C8                    		or	ax, cx
 10886 00000D0D 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 10887 00000D11 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10888                                  					; Set media type
 10889 00000D14 1E                      		push	ds
 10890 00000D15 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10891                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10892 00000D1A A2[3706]                		mov	[mediatype], al
 10893                                  		;mov	ds:mediatype, al
 10894 00000D1D 1F                      		pop	ds
 10895                                  
 10896                                  		; The media changed (maybe) so we will have to do a set dasd
 10897                                  		; the next time we format a track
 10898                                  
 10899                                  		; 10/12/2022
 10900 00000D1E 26804D2380              		or	byte [es:di+35], 80h
 10901                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 10902                                  					; set_dasd_true
 10903 00000D23 57                      		push	di		; Save bds pointer
 10904                                  
 10905                                  		; Figure out what we are supposed to do with the bpb
 10906                                  		; were we asked to install a fake bpb?
 10907                                  
 10908 00000D24 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10909                                  					; INSTALL_FAKE_BPB
 10910 00000D27 7514                    		jnz	short InstallFakeBpb
 10911                                  
 10912                                  		; were we returning a fake bpb when asked to build a bpb?
 10913                                  
 10914                                  		; 10/12/2022
 10915 00000D29 26F6452304              		test	byte [es:di+35], 4
 10916                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 10917                                  					; return_fake_bpb
 10918 00000D2E 7405                    		jz	short InstallRecommendedBpb
 10919                                  
 10920                                  		; we were returning a fake bpb but we can stop now
 10921                                  
 10922                                  		; 10/12/2022
 10923 00000D30 26806523FB              		and	byte [es:di+35], 0FBh
 10924                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 10925                                  					; ~return_fake_bpb
 10926                                  InstallRecommendedBpb:			
 10927 00000D35 B91F00                  		mov	cx, 31		; A_BPB.size
 10928 00000D38 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 10929 00000D3B EB0B                    		jmp	short CopyTheBpb
 10930                                  ; ---------------------------------------------------------------------------
 10931                                  
 10932                                  InstallFakeBpb:
 10933                                  		; 10/12/2022
 10934 00000D3D 26804D2304              		or	byte [es:di+35], 4				
 10935                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 10936                                  					; return_fake_bpb
 10937 00000D42 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10938                                  					; move 'smaller' bpb
 10939 00000D45 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 10940                                  
 10941                                  CopyTheBpb:				
 10942 00000D48 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10943 00000D4B F3A4                    		rep movsb
 10944 00000D4D 1E                      		push	ds		; Save packet segment
 10945                                  		; 17/10/2022
 10946 00000D4E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10947                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10948                                  					; Setup	for ds -> Bios_Data
 10949 00000D53 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 10950 00000D56 1F                      		pop	ds		; Restore packet segment
 10951 00000D57 5F                      		pop	di		; Restore bds pointer
 10952                                  setTrackTable:				
 10953 00000D58 8B4F26                  		mov	cx, [bx+38]
 10954 00000D5B 1E                      		push	ds
 10955 00000D5C 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10956 00000D61 890E[3905]              		mov	[sectorspertrack], cx
 10957 00000D65 1F                      		pop	ds
 10958                                  		; 10/12/2022
 10959 00000D66 26806523F7              		and	byte [es:di+35], 0F7h
 10960                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 10961                                  					; ~good_tracklayout
 10962 00000D6B F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10963                                  					; TRACKLAYOUT_IS_GOOD
 10964 00000D6E 7405                    		jz	short UglyTrackLayOut
 10965                                  		; 10/12/2022
 10966 00000D70 26804D2308              		or	byte [es:di+35], 8
 10967                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 10968                                  					; good_tracklayout
 10969                                  UglyTrackLayOut:			
 10970 00000D75 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 10971 00000D78 771A                    		ja	short TooManyPerTrack
 10972                                  		;jcxz	short SectorInfoSaved
 10973 00000D7A E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 10974 00000D7C BF[3B05]                		mov	di, tracktable
 10975 00000D7F 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 10976                                  		; 17/10/2022
 10977 00000D82 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10978                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10979                                  					; Trash	our bds	pointer
 10980                                  StoreSectorInfo:			
 10981 00000D87 47                      		inc	di
 10982 00000D88 47                      		inc	di		; Skip over cylinder and head
 10983 00000D89 AD                      		lodsw			; Get sector id
 10984 00000D8A AA                      		stosb			; Copy it
 10985 00000D8B AD                      		lodsw			; Get sector size
 10986 00000D8C E8E301                  		call	SectSizeToSectIndex
 10987 00000D8F AA                      		stosb			; Store	sector SIZE index
 10988 00000D90 E2F5                    		loop	StoreSectorInfo
 10989                                  SectorInfoSaved:			
 10990 00000D92 F8                      		clc
 10991 00000D93 C3                      		retn
 10992                                  ; ---------------------------------------------------------------------------
 10993                                  
 10994                                  TooManyPerTrack:			
 10995 00000D94 B00C                    		mov	al, 0Ch
 10996 00000D96 F9                      		stc
 10997 00000D97 C3                      		retn
 10998                                  ; ---------------------------------------------------------------------------
 10999                                  
 11000                                  ; 16/10/2022
 11001                                  
 11002                                  ; ==========================================================================
 11003                                  ; FormatTrack:
 11004                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11005                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11006                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11007                                  ;
 11008                                  ; input: ES:di points to bds for drive
 11009                                  ;
 11010                                  ; output:
 11011                                  ;	for status call:
 11012                                  ;	specialfunction byte set to:
 11013                                  ;		0 - rom support + legal combination
 11014                                  ;		1 - no rom support
 11015                                  ;		2 - illegal combination
 11016                                  ;		3 - no media present
 11017                                  ;	carry cleared.
 11018                                  ;
 11019                                  ;	for format track:
 11020                                  ;		carry set if error
 11021                                  ;
 11022                                  ; ==========================================================================
 11023                                  
 11024                                  ; 16/03/2019
 11025                                  
 11026                                  		; 19/10/2022
 11027                                  FormatTrack:
 11028 00000D98 C51E[1200]              		lds	bx, [ptrsav]
 11029 00000D9C C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11030 00000D9F F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11031                                  					; STATUS_FOR_FORMAT
 11032 00000DA2 740E                    		jz	short DoFormatTrack
 11033 00000DA4 1E                      		push	ds
 11034                                  		; 17/10/2022
 11035 00000DA5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11036                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11037 00000DAA E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11038 00000DAD 1F                      		pop	ds
 11039 00000DAE 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11040 00000DB0 F8                      		clc
 11041 00000DB1 C3                      		retn
 11042                                  ; ---------------------------------------------------------------------------
 11043                                  
 11044                                  DoFormatTrack:				
 11045 00000DB2 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11046                                  					; DEV_HARDDISK
 11047 00000DB7 7508                    		jnz	short DoFormatDiskette
 11048                                  		; 17/10/2022
 11049 00000DB9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11050                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11051                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11052 00000DBE E99C00                  		jmp	VerifyTrack
 11053                                  ; ---------------------------------------------------------------------------
 11054                                  
 11055                                  DoFormatDiskette:			
 11056 00000DC1 8B4F01                  		mov	cx, [bx+1]
 11057 00000DC4 8B5703                  		mov	dx, [bx+3]
 11058 00000DC7 F60702                  		test	byte [bx], 2
 11059                                  		; 17/10/2022
 11060 00000DCA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11061                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11062                                  					; Setup	ds-> Bios_Data for verify
 11063 00000DCF 7403                    		jz	short DoFormatDiskette_1
 11064 00000DD1 E9E400                  		jmp	VerifyTrack_Err
 11065                                  ; ---------------------------------------------------------------------------
 11066                                  
 11067                                  DoFormatDiskette_1:			
 11068 00000DD4 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11069 00000DD7 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11070 00000DD9 7406                    		jz	short NeedToSetDasd ; Old rom
 11071 00000DDB 3C03                    		cmp	al, 3		; Time out error?
 11072 00000DDD 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11073                                  					; about	the illegal combination)
 11074 00000DDF EB67                    		jmp	short FormatFailed
 11075                                  ; ---------------------------------------------------------------------------
 11076                                  
 11077                                  NeedToSetDasd:				
 11078 00000DE1 52                      		push	dx
 11079 00000DE2 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11080 00000DE5 5A                      		pop	dx
 11081                                  NoSetDasd:				
 11082 00000DE6 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11083 00000DE9 89D0                    		mov	ax, dx		; Get track from packet
 11084 00000DEB A3[3901]                		mov	[trknum], ax
 11085 00000DEE 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11086 00000DF2 88CC                    		mov	ah, cl
 11087 00000DF4 BB[3B05]                		mov	bx, tracktable
 11088 00000DF7 8B0E[3905]              		mov	cx, [sectorspertrack]
 11089                                  
 11090                                  StoreCylinderHead:			
 11091 00000DFB 8907                    		mov	[bx], ax	; Store	into TrackTable
 11092 00000DFD 83C304                  		add	bx, 4		; Skip to next sector field
 11093 00000E00 E2F9                    		loop	StoreCylinderHead
 11094 00000E02 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11095                                  FormatRetry:				
 11096 00000E05 51                      		push	cx
 11097 00000E06 BB[3B05]                		mov	bx, tracktable
 11098 00000E09 A0[3905]                		mov	al, [sectorspertrack]
 11099 00000E0C B405                    		mov	ah, 5		; romformat
 11100 00000E0E 8C1E[3705]              		mov	[xfer_seg], ds
 11101 00000E12 E87F02                  		call	ToRom
 11102 00000E15 59                      		pop	cx
 11103 00000E16 7216                    		jb	short FormatError
 11104 00000E18 51                      		push	cx		; Now verify the sectors just formatted.
 11105                                  					; NOTE:	because	of bug in some BIOSes we have to
 11106                                  					;	set ES:BX to 00:00
 11107 00000E19 53                      		push	bx
 11108 00000E1A 31DB                    		xor	bx, bx
 11109 00000E1C 891E[3705]              		mov	[xfer_seg], bx
 11110 00000E20 A0[3905]                		mov	al, [sectorspertrack]
 11111 00000E23 B404                    		mov	ah, 4		; romverify
 11112 00000E25 B101                    		mov	cl, 1
 11113 00000E27 E86A02                  		call	ToRom
 11114 00000E2A 5B                      		pop	bx
 11115 00000E2B 59                      		pop	cx
 11116 00000E2C 7329                    		jnb	short FormatOk
 11117                                  FormatError:				
 11118 00000E2E E84B02                  		call	ResetDisk
 11119 00000E31 C606[3906]01            		mov	byte [had_format_error], 1
 11120 00000E36 50                      		push	ax
 11121 00000E37 51                      		push	cx
 11122 00000E38 52                      		push	dx
 11123 00000E39 E8AA01                  		call	SetMediaForFormat
 11124 00000E3C 3C01                    		cmp	al, 1
 11125 00000E3E 7503                    		jnz	short WhileErr
 11126 00000E40 E84201                  		call	SetDasd
 11127                                  WhileErr:				
 11128 00000E43 5A                      		pop	dx
 11129 00000E44 59                      		pop	cx
 11130 00000E45 58                      		pop	ax
 11131 00000E46 E2BD                    		loop	FormatRetry
 11132                                  FormatFailed:				
 11133 00000E48 C606[3906]01            		mov	byte [had_format_error], 1
 11134                                  					; Set the format error flag
 11135 00000E4D 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11136 00000E50 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11137 00000E52 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11138                                  DoMapIt:				
 11139 00000E54 E97AFD                  		jmp	maperror
 11140                                  ; ---------------------------------------------------------------------------
 11141                                  
 11142                                  FormatOk:				
 11143 00000E57 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11144 00000E5C C3                      		retn
 11145                                  ; ---------------------------------------------------------------------------
 11146                                  
 11147                                  ; 16/10/2022
 11148                                  
 11149                                  ; ==========================================================================
 11150                                  ;
 11151                                  ; VerifyTrack:
 11152                                  ;
 11153                                  ; input: ES:di points to bds for drive
 11154                                  ; ==========================================================================
 11155                                  
 11156                                  VerifyTrack:				
 11157 00000E5D 1E                      		push	ds
 11158 00000E5E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11159 00000E62 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11160                                  
 11161                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11162                                  
 11163 00000E65 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11164 00000E68 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11165 00000E6B 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11166 00000E6E 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11167                                  					; Get option flag word
 11168 00000E70 1F                      		pop	ds
 11169 00000E71 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11170 00000E76 890E[3301]              		mov	[curtrk], cx
 11171 00000E7A A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11172 00000E7D 8B0E[3905]              		mov	cx, [sectorspertrack]
 11173                                  
 11174                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11175                                  		; specified if not we should go to the normal track verification
 11176                                  		; routine. If fast format has been specified we should get the
 11177                                  		; number of tracks to be verified and check it to see if it is
 11178                                  		; > 255. If it is then it is an error and we should go to
 11179                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11180                                  		; sectors per track to get the total number of sectors to be
 11181                                  		; verified. This should also be less than equal to 255
 11182                                  		; otherwise we go to same error exit. If everything is okay
 11183                                  		; we initalise cx to the total sectors. use ax as a temporary
 11184                                  		; register.
 11185                                  
 11186                                  					; Special function requested?	
 11187 00000E81 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11188 00000E84 7421                    		jz	short NormVerifyTrack
 11189 00000E86 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11190 00000E88 08E4                    		or	ah, ah
 11191 00000E8A 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11192 00000E8C F6E1                    		mul	cl
 11193 00000E8E 08E4                    		or	ah, ah
 11194 00000E90 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11195 00000E92 89C1                    		mov	cx, ax
 11196                                  		; 10/12/2022
 11197 00000E94 26F6452301              		test	byte [es:di+35], 1
 11198                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11199                                  					; fnon_removable
 11200 00000E99 740C                    		jz	short NormVerifyTrack
 11201                                  					; Multitrack operation = on?
 11202                                  		; 10/12/2022
 11203                                  		; 19/10/2022
 11204 00000E9B F606[2F05]80            		test	byte [multrk_flag], 80h
 11205                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11206                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11207 00000EA0 7405                    		jz	short NormVerifyTrack
 11208 00000EA2 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11209                                  NormVerifyTrack:			
 11210 00000EA7 31C0                    		xor	ax, ax		; 1st sector
 11211 00000EA9 31DB                    		xor	bx, bx
 11212 00000EAB 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11213 00000EAF E83F00                  		call	TrackIo
 11214 00000EB2 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11215 00000EB7 C3                      		retn
 11216                                  ; ---------------------------------------------------------------------------
 11217                                  
 11218                                  VerifyTrack_Err:			
 11219 00000EB8 B401                    		mov	ah, 1
 11220 00000EBA E914FD                  		jmp	maperror
 11221                                  ; ---------------------------------------------------------------------------
 11222                                  
 11223                                  ; 16/10/2022
 11224                                  
 11225                                  ; ==========================================================================
 11226                                  ;
 11227                                  ; ReadTrack:
 11228                                  ;
 11229                                  ; input: ES:di points to bds for drive
 11230                                  ;
 11231                                  ; ==========================================================================
 11232                                  
 11233                                  ReadTrack:				
 11234 00000EBD C606[2001]02            		mov	byte [rflag], 2	; romread
 11235 00000EC2 EB05                    		jmp	short ReadWriteTrack
 11236                                  ; ---------------------------------------------------------------------------
 11237                                  
 11238                                  WriteTrack:
 11239                                  
 11240                                  ; ==========================================================================
 11241                                  ;
 11242                                  ; WriteTrack:
 11243                                  ;
 11244                                  ; input: ES:di points to bds for drive
 11245                                  ;
 11246                                  ; ==========================================================================
 11247                                  				
 11248 00000EC4 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11249                                  
 11250                                  		; Fall into ReadWriteTrack
 11251                                  
 11252                                  ; ==========================================================================
 11253                                  ;
 11254                                  ; readWriteTrack:
 11255                                  ;
 11256                                  ; input:
 11257                                  ;    ES:di points to bds for drive
 11258                                  ;    rFlag - 2 for read,3 for write
 11259                                  ;
 11260                                  ; ==========================================================================
 11261                                  
 11262                                  ReadWriteTrack:	
 11263                                  		; save bds pointer segment so we can use it to access
 11264                                  		; our packet. Notice that this is not the standard register
 11265                                  		; assignment for accessing packets
 11266                                  		
 11267                                  		; 19/10/2022	
 11268 00000EC9 06                      		push	es
 11269 00000ECA C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11270 00000ECE 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11271 00000ED2 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11272 00000ED6 A3[3301]                		mov	[curtrk], ax
 11273 00000ED9 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11274 00000EDD A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11275 00000EE0 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11276 00000EE4 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11277 00000EE8 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11278                                  					; Get transfer address
 11279                                  
 11280                                  		; we just trashed our packet address, but we no longer care
 11281                                  
 11282 00000EEC 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11283 00000EF0 07                      		pop	es
 11284                                  
 11285                                  		; Fall into TrackIo
 11286                                  
 11287                                  ; =============== S U B	R O U T	I N E =======================================
 11288                                  
 11289                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11290                                  
 11291                                  ; ==========================================================================
 11292                                  ;
 11293                                  ; TrackIo:
 11294                                  ;    performs track read/write/verify
 11295                                  ;
 11296                                  ;   input:
 11297                                  ;      rFlag	- 2 = read
 11298                                  ;		  3 = write
 11299                                  ;		  4 = verify
 11300                                  ;      AX	- Index into track table of first sector to io
 11301                                  ;      CX	- Number of sectors to io
 11302                                  ;      Xfer_Seg:BX - Transfer address
 11303                                  ;      ES:DI	- Pointer to bds
 11304                                  ;      CurTrk	- Current cylinder
 11305                                  ;      CurHd	- Current head
 11306                                  ;
 11307                                  ; ==========================================================================
 11308                                  
 11309                                  ; 16/03/2019 - Retro DOS v4.0
 11310                                  		
 11311                                  		; 19/10/2022
 11312                                  TrackIo:	
 11313                                  					; Procedure `disk' will pop stack to
 11314 00000EF1 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11315 00000EF5 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11316 00000EF8 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11317                                  					; See if we have already set	disk
 11318 00000EFD 7407                    		jz	short Dptalreadyset ; base table
 11319 00000EFF 50                      		push	ax		; set up tables	and variables for i/o
 11320 00000F00 51                      		push	cx
 11321 00000F01 E896FA                  		call	iosetup
 11322 00000F04 59                      		pop	cx
 11323 00000F05 58                      		pop	ax
 11324                                  Dptalreadyset:				; Point si at the table entry of the			
 11325 00000F06 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11326 00000F09 D1E0                    		shl	ax, 1
 11327 00000F0B D1E0                    		shl	ax, 1
 11328 00000F0D 01C6                    		add	si, ax
 11329                                  
 11330                                  		; WE WANT:
 11331                                  		; CX to	be the number of times we have to loop
 11332                                  		; DX to	be the number of sectors we read on each iteration
 11333                                  		
 11334 00000F0F BA0100                  		mov	dx, 1
 11335                                  		; 12/12/2022
 11336 00000F12 26F6452308              		test	byte [es:di+23h], 8
 11337                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11338                                  					; good_tracklayout
 11339 00000F17 7402                    		jz	short ionextsector
 11340                                  		
 11341 00000F19 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11342                                  ionextsector:				
 11343 00000F1B 51                      		push	cx
 11344 00000F1C 52                      		push	dx
 11345 00000F1D 46                      		inc	si
 11346 00000F1E 46                      		inc	si		; Skip over the	cylinder and head in
 11347                                  					; the track table
 11348 00000F1F AC                      		lodsb			; Get sector ID	from track table
 11349 00000F20 A2[3101]                		mov	[cursec], al
 11350                                  
 11351                                  		; assumptions for a fixed disk multi-track disk	i/o
 11352                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11353                                  		;     only CL is valid.
 11354                                  		; 2). Sector size should be set	to 512 bytes.
 11355                                  		; 3). Good track layout
 11356                                  		
 11357                                  		; 12/12/2022
 11358 00000F23 26F6452301              		test	byte [es:di+23h], 1
 11359                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11360                                  					; fnon_removable ; Fixed disk?
 11361 00000F28 7414                    		jz	short IoRemovable ; No
 11362                                  		; 12/12/2022
 11363 00000F2A F606[2F05]80            		test	byte [multrk_flag], 80h
 11364                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11365                                  						; Allow multi-track operation?
 11366 00000F2F 740D                    		jz	short IoRemovable ; No,don't do that.
 11367 00000F31 8916[2201]              		mov	[seccnt], dx
 11368 00000F35 89D0                    		mov	ax, dx
 11369 00000F37 E81DFB                  		call	Disk
 11370 00000F3A 5A                      		pop	dx
 11371 00000F3B 59                      		pop	cx
 11372 00000F3C F8                      		clc
 11373 00000F3D C3                      		retn
 11374                                  ; ---------------------------------------------------------------------------
 11375                                  
 11376                                  IoRemovable:				
 11377 00000F3E AC                      		lodsb			; Get sector size index	from track
 11378                                  					; table	and save it
 11379 00000F3F 50                      		push	ax
 11380 00000F40 56                      		push	si
 11381 00000F41 1E                      		push	ds		; Save Bios_Data
 11382 00000F42 50                      		push	ax
 11383 00000F43 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11384                                  					; Fetch	EOT while ds-> Bios_Data
 11385 00000F47 C536[2D01]              		lds	si, [dpt]
 11386 00000F4B 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11387 00000F4E 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11388 00000F51 58                      		pop	ax
 11389 00000F52 1F                      		pop	ds
 11390 00000F53 88D0                    		mov	al, dl
 11391 00000F55 A3[2201]                		mov	[seccnt], ax
 11392 00000F58 E8FCFA                  		call	Disk
 11393 00000F5B 5E                      		pop	si		; Advance buffer pointer by adding
 11394                                  					; sector size
 11395 00000F5C 58                      		pop	ax
 11396 00000F5D E81D00                  		call	SectorSizeIndexToSectorSize
 11397 00000F60 01C3                    		add	bx, ax
 11398 00000F62 5A                      		pop	dx
 11399 00000F63 59                      		pop	cx
 11400 00000F64 E2B5                    		loop	ionextsector
 11401 00000F66 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11402                                  		;jz	short NoNeedDone
 11403                                  		; 12/12/2022
 11404 00000F6B 7404                    		je	short NoNeedDone2
 11405 00000F6D E872FA                  		call	done		; set time of last access, and reset
 11406                                  					; entries in Dpt.
 11407                                  NoNeedDone:				
 11408 00000F70 F8                      		clc
 11409                                  NoNeedDone2:
 11410 00000F71 C3                      		retn
 11411                                  
 11412                                  ; =============== S U B	R O U T	I N E =======================================
 11413                                  
 11414                                  ; ---------------------------------------------------------------------------
 11415                                  ;
 11416                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11417                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11418                                  ; are permissible.
 11419                                  ;
 11420                                  ; On Input   AX contains sector size in bytes
 11421                                  ; On Output  AL Contains index
 11422                                  ; All other registers preserved
 11423                                  ;
 11424                                  ; ---------------------------------------------------------------------------
 11425                                  
 11426                                  SectSizeToSectIndex:	
 11427 00000F72 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11428                                  					; examine upper	byte only
 11429 00000F75 7703                    		ja	short OneK
 11430 00000F77 88E0                    		mov	al, ah		; value	in AH is the index!
 11431 00000F79 C3                      		retn
 11432                                  ; ---------------------------------------------------------------------------
 11433                                  
 11434                                  OneK:					
 11435 00000F7A B003                    		mov	al, 3
 11436 00000F7C C3                      		retn
 11437                                  
 11438                                  ; =============== S U B	R O U T	I N E =======================================
 11439                                  
 11440                                  
 11441                                  SectorSizeIndexToSectorSize:
 11442 00000F7D 88C1                    		mov	cl, al
 11443 00000F7F B88000                  		mov	ax, 128
 11444 00000F82 D3E0                    		shl	ax, cl
 11445 00000F84 C3                      		retn
 11446                                  
 11447                                  ; =============== S U B	R O U T	I N E =======================================
 11448                                  
 11449                                  ; 16/10/2022
 11450                                  
 11451                                  ; ---------------------------------------------------------------------------
 11452                                  ;
 11453                                  ; SetDASD
 11454                                  ;
 11455                                  ; Set up the rom for formatting.
 11456                                  ; we have to tell the rom bios what type of disk is in the drive.
 11457                                  ;
 11458                                  ; On Input   - ES:di - Points to bds
 11459                                  ;
 11460                                  ; ---------------------------------------------------------------------------
 11461                                  
 11462                                  		; 19/10/2022
 11463                                  SetDasd:	
 11464 00000F85 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11465                                  					; See if we've previously set dasd type
 11466 00000F8A 740C                    		jz	short DoSetDasd
 11467                                  		; 10/12/2022
 11468 00000F8C 26F6452380              		test	byte [es:di+23h], 80h
 11469                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11470                                  					; set_dasd_true
 11471 00000F91 744A                    		jz	short DasdHasBeenSet
 11472                                  		; 10/12/2022
 11473 00000F93 268065237F              		and	byte [es:di+23h], 7Fh
 11474                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11475                                  					; ~set_dasd_true
 11476                                  DoSetDasd:				
 11477 00000F98 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11478 00000F9D C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11479 00000FA2 B004                    		mov	al, 4
 11480 00000FA4 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11481                                  					; DEV_3INCH720KB
 11482 00000FA9 741A                    		jz	short DoSet
 11483 00000FAB 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11484                                  					; DEV_5INCH96TPI
 11485 00000FB0 7404                    		jz	short GotBig
 11486 00000FB2 B001                    		mov	al, 1
 11487 00000FB4 EB0F                    		jmp	short DoSet
 11488                                  ; ---------------------------------------------------------------------------
 11489                                  
 11490                                  GotBig:					
 11491 00000FB6 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11492 00000FB8 803E[3706]00            		cmp	byte [mediatype], 0
 11493 00000FBD 7506                    		jnz	short DoSet
 11494                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11495                                  		; 10/12/2022
 11496                                  		;inc	al  ; al = 3
 11497                                  		; 18/12/2022
 11498 00000FBF 40                      		inc	ax  ; al = 3
 11499 00000FC0 C606[3B01]54            		mov	byte [gap_patch], 54h
 11500                                  DoSet:					
 11501 00000FC5 1E                      		push	ds
 11502 00000FC6 56                      		push	si
 11503 00000FC7 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11504                                  
 11505 00000FCB C5367800                		lds	si, [DSKADR]
 11506                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11507                                  		;;lds	si, ds:78h		
 11508                                  
 11509 00000FCF C644090F                		mov	byte [si+9], 0Fh ;
 11510                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11511 00000FD3 5E                      		pop	si
 11512 00000FD4 1F                      		pop	ds
 11513 00000FD5 B417                    		mov	ah, 17h
 11514 00000FD7 268A5504                		mov	dl, [es:di+4]
 11515 00000FDB CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11516                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11517                                  DasdHasBeenSet:				
 11518 00000FDD 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11519 00000FE1 8826[3701]              		mov	[formt_eot], ah
 11520 00000FE5 C3                      		retn
 11521                                  
 11522                                  ; =============== S U B	R O U T	I N E =======================================
 11523                                  
 11524                                  ; 16/10/2022
 11525                                  
 11526                                  ; ---------------------------------------------------------------------------
 11527                                  ;
 11528                                  ; Set Media Type for Format
 11529                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11530                                  ; BPB area in the BDS can be handled by the rom.
 11531                                  ; On Input, ES:DI -> current BDS.
 11532                                  ; The status of the operation is returned in AL
 11533                                  ;
 11534                                  ;	- 0 - if the support is available,and the combination is valid.
 11535                                  ;	- 1 - no rom support
 11536                                  ;	- 2 - illegal combination
 11537                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11538                                  ;
 11539                                  ; Flags also may be altered. All other registers preserved.
 11540                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11541                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11542                                  ; to the one returned. the original pointer to the disk base table is stored
 11543                                  ; in TempDpt, until it is restored.
 11544                                  ;
 11545                                  ; ---------------------------------------------------------------------------
 11546                                  
 11547                                  		; 19/10/2022
 11548                                  SetMediaForFormat:	
 11549 00000FE6 51                      		push	cx
 11550 00000FE7 52                      		push	dx
 11551                                  
 11552                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11553                                  		; but we need to call int 13h, ah=18h again.
 11554                                  
 11555 00000FE8 803E[3906]01            		cmp	byte [had_format_error], 1
 11556 00000FED 7425                    		jz	short SkipSaveDskAdr
 11557 00000FEF 30C0                    		xor	al, al		; If already done return 0
 11558 00000FF1 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11559 00000FF6 7502                    		jnz	short DoSetMediaForFormat
 11560 00000FF8 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11561                                  ; ---------------------------------------------------------------------------
 11562                                  
 11563                                  DoSetMediaForFormat:			
 11564 00000FFA 06                      		push	es
 11565 00000FFB 56                      		push	si
 11566 00000FFC 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11567 00001000 26C4367800              		les	si, [es:DSKADR]
 11568                                  		;les	si, es:78h	; [es:DSKADR]
 11569                                  					; Get pointer to disk base table
 11570 00001005 8936[2D01]              		mov	[dpt], si
 11571 00001009 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11572                                  
 11573                                  		; Initialize the head settle time to 0Fh. See the offsets
 11574                                  		; given in dskprm.inc.
 11575                                  
 11576 0000100D 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11577 00001012 5E                      		pop	si
 11578 00001013 07                      		pop	es
 11579                                  
 11580                                  SkipSaveDskAdr:				
 11581 00001014 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11582 00001018 49                      		dec	cx
 11583 00001019 80E503                  		and	ch, 3
 11584 0000101C D0CD                    		ror	ch, 1
 11585 0000101E D0CD                    		ror	ch, 1
 11586 00001020 86E9                    		xchg	ch, cl
 11587 00001022 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11588 00001026 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11589 0000102A 06                      		push	es
 11590 0000102B 1E                      		push	ds
 11591 0000102C 56                      		push	si
 11592 0000102D 57                      		push	di
 11593 0000102E B418                    		mov	ah, 18h
 11594 00001030 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11595                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11596 00001032 7233                    		jb	short FormaStatErr
 11597 00001034 803E[3906]01            		cmp	byte [had_format_error], 1
 11598 00001039 7425                    		jz	short skip_disk_base_setting
 11599 0000103B 06                      		push	es		; Save segment returned	by the rom
 11600 0000103C 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11601 00001040 26C4367800              		les	si, [es:DSKADR]
 11602                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11603                                  					; Get current disk base	table
 11604 00001045 8936[3A06]              		mov	[tempdpt], si
 11605 00001049 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11606 0000104D 8E06[1A00]              		mov	es, [zeroseg]
 11607                                  		;mov	es:78h,	di
 11608 00001051 26893E7800              		mov	[es:DSKADR], di
 11609                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11610 00001056 268F067A00              		pop	word [es:DSKADR+2]
 11611 0000105B C606[3806]01            		mov	byte [media_set_for_format], 1
 11612                                  skip_disk_base_setting:			
 11613 00001060 30C0                    		xor	al, al		; Legal	combination + rom support code
 11614                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11615 00001062 A2[3906]                		mov	[had_format_error], al
 11616 00001065 EB0E                    		jmp	short PopStatRet
 11617                                  ; ---------------------------------------------------------------------------
 11618                                  
 11619                                  FormaStatErr:
 11620                                  		; 10/12/2022
 11621 00001067 B003                    		mov	al, 3
 11622                                  				
 11623 00001069 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11624                                  					; Illegal combination =	0Ch
 11625 0000106C 7406                    		jz	short FormatStatIllegalComb
 11626 0000106E 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11627 00001071 7402                    		jz	short FormatStatTimeOut
 11628                                  		; 10/12/2022
 11629                                  		;dec	al
 11630                                  		; 18/12/2022
 11631 00001073 48                      		dec	ax
 11632                                  		; al = 2
 11633                                  		;mov	al, 1		; Function not supported.
 11634                                  		;jmp	short PopStatRet
 11635                                  ; ---------------------------------------------------------------------------
 11636                                  
 11637                                  FormatStatIllegalComb:
 11638                                  		; 10/12/2022
 11639                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11640                                  		; 18/12/2022
 11641 00001074 48                      		dec	ax
 11642                                  		; al = 2				
 11643                                  		;mov	al, 2		; Function supported, but
 11644                                  					; Illegal sect/trk,trk combination.
 11645                                  		; 10/12/2022
 11646                                  		;jmp	short PopStatRet
 11647                                  ; ---------------------------------------------------------------------------
 11648                                  
 11649                                  FormatStatTimeOut:			
 11650                                  		; 10/12/2022
 11651                                  		; al = 3
 11652                                  		;mov	al, 3		; Function supported, but
 11653                                  					; Media	not present.
 11654                                  PopStatRet:				
 11655 00001075 5F                      		pop	di
 11656 00001076 5E                      		pop	si
 11657 00001077 1F                      		pop	ds
 11658 00001078 07                      		pop	es
 11659                                  SetMediaRet:				
 11660 00001079 5A                      		pop	dx
 11661 0000107A 59                      		pop	cx
 11662 0000107B C3                      		retn
 11663                                  
 11664                                  ; =============== S U B	R O U T	I N E =======================================
 11665                                  
 11666                                  ; 16/10/2022
 11667                                  
 11668                                  ; ---------------------------------------------------------------------------
 11669                                  ;
 11670                                  ; RESET THE DRIVE
 11671                                  ;
 11672                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11673                                  ; slow head settle time for the next operation. this is because the reset
 11674                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11675                                  ; time around - there is a problem with 3.5" drives in that the head does
 11676                                  ; not settle down in time,even for read operations!!
 11677                                  ;
 11678                                  ; ---------------------------------------------------------------------------
 11679                                  
 11680                                  ResetDisk:	
 11681 0000107C 50                      		push	ax
 11682 0000107D 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11683                                  					; Reset while formatting?
 11684 00001082 7505                    		jnz	short ResetDisk_cont
 11685                                  					; Then verify operation in "fmt & vrfy"
 11686 00001084 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11687                                  ResetDisk_cont:				
 11688 00001089 30E4                    		xor	ah, ah		; So signals that we had a format error
 11689 0000108B CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11690                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11691 0000108D C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11692                                  					; Zap up the speed
 11693 00001092 58                      		pop	ax
 11694 00001093 C3                      		retn
 11695                                  
 11696                                  ; =============== S U B	R O U T	I N E =======================================
 11697                                  
 11698                                  ; 16/10/2022
 11699                                  
 11700                                  ; ---------------------------------------------------------------------------
 11701                                  ;
 11702                                  ; This routine sets up the drive parameter table with the values needed for
 11703                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11704                                  ;
 11705                                  ; on entry  -	ES:DI - points to bds for the drive
 11706                                  ;		Xfer_Seg:BX - points to trkbuf
 11707                                  ;		AL    - number of sectors
 11708                                  ;		AH    - int 13 function code
 11709                                  ;		CL    - sector number for verify
 11710                                  ;		DS    - Bios_Data
 11711                                  ;
 11712                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11713                                  ;		AX and flags are the results of the int 13
 11714                                  ;
 11715                                  ; ---------------------------------------------------------------------------
 11716                                  
 11717                                  		; 19/10/2022
 11718                                  ToRom:	
 11719 00001094 53                      		push	bx
 11720 00001095 56                      		push	si
 11721                                  
 11722                                  		; Compaq bug fix - check whether we are using new ROM
 11723                                  		; functionality to set up format, not merely if it exists.
 11724                                  		; This was formerly a check against [new_rom]
 11725                                  
 11726 00001096 F606[3806]01            		test	byte [media_set_for_format], 1
 11727 0000109B 7536                    		jnz	short GotValidDpt
 11728 0000109D 50                      		push	ax
 11729 0000109E 06                      		push	es		; Save bds segment
 11730 0000109F 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11731                                  					; ffSmall ; is it a 3.5" drive?
 11732 000010A4 9C                      		pushf			; (Save	the cmp	result)
 11733 000010A5 8E06[1A00]              		mov	es, [zeroseg]
 11734                                  		;les	si, es:78h	; Get pointer to disk base table
 11735 000010A9 26C4367800              		les	si, [es:DSKADR]
 11736                                  		;mov	word ptr ds:dpt, si
 11737                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11738 000010AE 8936[2D01]              		mov	[dpt], si
 11739 000010B2 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11740                                  		
 11741 000010B6 A0[3701]                		mov	al, [formt_eot]
 11742 000010B9 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11743 000010BD A0[3B01]                		mov	al, [gap_patch]
 11744 000010C0 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11745                                  					; Important for	format
 11746 000010C4 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11747                                  					; Assume we are	doing a	seek operation
 11748                                  					; Setup	motor start correctly for 3.5" drives
 11749 000010C9 9D                      		popf			; Get result of	earlier	cmp
 11750 000010CA 7505                    		jnz	short MotorStrtOK
 11751 000010CC 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11752                                  MotorStrtOK:				
 11753 000010D1 07                      		pop	es		; Restore bds segment
 11754 000010D2 58                      		pop	ax
 11755                                  GotValidDpt:				
 11756 000010D3 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11757 000010D7 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11758 000010D9 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11759 000010DD 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11760 000010E1 06                      		push	es		; Save bds segment
 11761 000010E2 8E06[3705]              		mov	es, [xfer_seg]
 11762 000010E6 CD13                    		int	13h		; DISK -
 11763 000010E8 07                      		pop	es		; Restore bds segment
 11764 000010E9 5E                      		pop	si
 11765 000010EA 5B                      		pop	bx
 11766 000010EB C3                      		retn
 11767                                  
 11768                                  ; ---------------------------------------------------------------------------
 11769                                  
 11770                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11771                                  
 11772                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11773                                  
 11774                                  ; ==========================================================================
 11775                                  ;
 11776                                  ; get the owner of the physical drive represented by the logical drive in al.
 11777                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11778                                  ; if this is not the case, the system may hang, just following the linked list.
 11779                                  ;
 11780                                  ; ==========================================================================
 11781                                  
 11782                                  		; 19/10/2022
 11783                                  ioctl_getown:
 11784 000010EC E8DCF3                  		call	SetDrive
 11785 000010EF 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11786                                  					; Get physical drive number
 11787 000010F3 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11788                                  ownloop:				
 11789 000010F7 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11790 000010FB 7507                    		jnz	short getnextBDS
 11791                                  		; 10/12/2022
 11792 000010FD 26F6452320              		test	byte [es:di+23h], 20h
 11793                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11794                                  					; fi_own_physical
 11795 00001102 7515                    		jnz	short exitown
 11796                                  getnextBDS:				
 11797 00001104 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11798 00001107 EBEE                    		jmp	short ownloop
 11799                                  ; ---------------------------------------------------------------------------
 11800                                  
 11801                                  ; ==========================================================================
 11802                                  ;
 11803                                  ; set the ownership of the physical drive represented by the logical drive
 11804                                  ; in al to al.
 11805                                  ;
 11806                                  ; ==========================================================================
 11807                                  
 11808                                  		; 19/10/2022
 11809                                  ioctl_setown:
 11810 00001109 E8BFF3                  		call	SetDrive
 11811 0000110C C606[7A00]01            		mov	byte [fsetowner], 1
 11812                                  					; set flag for CheckSingle to look at.
 11813 00001111 E828F7                  		call	checksingle
 11814 00001114 C606[7A00]00            		mov	byte [fsetowner], 0
 11815                                  					; set ownership	of drive reset flag
 11816                                  		; Fall into ExitOwn
 11817                                  
 11818                                  ; ==========================================================================
 11819                                  ;
 11820                                  ; if there is only one logical drive assigned to this physical drive, return
 11821                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 11822                                  ;
 11823                                  ; ==========================================================================
 11824                                  
 11825                                  exitown:				
 11826 00001119 30C9                    		xor	cl, cl
 11827                                  		; 12/12/2022
 11828 0000111B 26F6452310              		test	byte [es:di+23h], 10h
 11829                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 11830                                  					; fi_am_mult
 11831 00001120 7406                    		jz	short exitnomult
 11832 00001122 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 11833                                  					; Get logical drive number
 11834                                  					; Get it 1-based
 11835 00001126 FEC1                    		inc	cl
 11836                                  exitnomult:				
 11837 00001128 C51E[1200]              		lds	bx, [ptrsav]
 11838 0000112C 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 11839                                  					; Exit normal termination
 11840                                  		; 12/12/2022
 11841                                  		; cf=0
 11842                                  		;clc
 11843 0000112F C3                      		retn
 11844                                  
 11845                                  ; =============== S U B	R O U T	I N E =======================================
 11846                                  
 11847                                  ; 16/10/2022
 11848                                  
 11849                                  ; ---------------------------------------------------------------------------
 11850                                  ;
 11851                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 11852                                  ; only if the first byte of TempDpt is not -1.
 11853                                  ; all registers (including flags) are preserved.
 11854                                  ;
 11855                                  ; ---------------------------------------------------------------------------
 11856                                  
 11857                                  		; 19/10/2022
 11858                                  RestoreOldDpt:
 11859                                  		; if we have already restored the disk base table earlier,
 11860                                  		; do not do it again.
 11861                                  	
 11862 00001130 50                      		push	ax
 11863 00001131 30C0                    		xor	al, al
 11864 00001133 A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 11865 00001136 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 11866 0000113A 08C0                    		or	al, al
 11867 0000113C 741E                    		jz	short DontRestore
 11868 0000113E 56                      		push	si
 11869 0000113F 1E                      		push	ds
 11870 00001140 06                      		push	es
 11871 00001141 C536[3A06]              		lds	si, [tempdpt]
 11872                                  
 11873                                  		; 17/10/2022
 11874 00001145 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11875                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11876 0000114A 268E06[1A00]            		mov	es, [es:zeroseg]
 11877                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 11878                                  
 11879                                  		;mov	es:78h,	si	; [es:DSKADR]
 11880 0000114F 2689367800              		mov	[es:DSKADR], si
 11881                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 11882 00001154 268C1E7A00              		mov	[es:DSKADR+2], ds
 11883 00001159 07                      		pop	es
 11884 0000115A 1F                      		pop	ds
 11885 0000115B 5E                      		pop	si
 11886                                  DontRestore:				
 11887 0000115C 58                      		pop	ax
 11888                                  		; 12/12/2022
 11889                                  		; cf=0
 11890                                  		;clc			;  Clear carry
 11891 0000115D C3                      		retn
 11892                                  
 11893                                  ; ---------------------------------------------------------------------------
 11894                                  
 11895                                  ; 16/10/2022
 11896                                  
 11897                                  ; ==========================================================================
 11898                                  ;	get media id
 11899                                  ; ==========================================================================
 11900                                  ;
 11901                                  ; FUNCTION: get the volume label,the system id and the serial number from
 11902                                  ;	    the media that has the extended boot record.
 11903                                  ;	    for the conventional media,this routine will return "unknown
 11904                                  ;	    media type" error to dos.
 11905                                  ;
 11906                                  ; INPUT :   ES:di -> bds table for this drive.
 11907                                  ;
 11908                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 11909                                  ;	    if carry set,then al contains the device driver error number
 11910                                  ;	    that will be returned to dos.
 11911                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 11912                                  ;
 11913                                  ; SUBROUTINES TO BE CALLED:
 11914                                  ;	BootIo:NEAR
 11915                                  ;
 11916                                  ; LOGIC:
 11917                                  ;	to recognize the extended boot record,this logic will actually
 11918                                  ;	access the boot sector even if it is a hard disk.
 11919                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 11920                                  ;	field of bpb and the extended boot signature.
 11921                                  ;
 11922                                  ; {
 11923                                  ;	get logical drive number from bds table;
 11924                                  ;	rFlag = read operation;
 11925                                  ;	BootIo;		 /*get the media boot record into the buffer
 11926                                  ;	if (no error) then
 11927                                  ;	     if (extended boot record) then
 11928                                  ;		{ set volume label,volume serial number and system id
 11929                                  ;		  of the request packet to those of the boot record;
 11930                                  ;		};
 11931                                  ;	     else		  /*not an extended bpb */
 11932                                  ;		{ set register al to "unknown media.." error code;
 11933                                  ;		  set carry bit;
 11934                                  ;		};
 11935                                  ;	else
 11936                                  ;	     ret;	/*already error code is set in the register al
 11937                                  ;
 11938                                  ; ==========================================================================
 11939                                  
 11940                                  ;size_of_EXT_BOOT_SERIAL equ 4
 11941                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 11942                                  ;;size_of_EXT_SYSTEM_ID equ 8
 11943                                  
 11944                                  		; 19/10/2022
 11945                                  GetMediaId:
 11946 0000115E E89F00                  		call	ChangeLineChk
 11947 00001161 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 11948 00001165 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 11949 0000116A E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 11950 0000116D 7224                    		jb	short IOCtl_If1
 11951                                  					; Valid? (0F0h-0FFh?)
 11952 0000116F 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11953                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11954 00001174 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 11955                                  		; 10/12/2022
 11956 00001176 BE[7401]                		mov	si, disksector+26h
 11957 00001179 803C29                  		cmp	byte [si], 29h
 11958                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11959                                  					; EXT_BOOT_SIGNATURE
 11960 0000117C 7512                    		jnz	short IOCtl_If2	; not extended boot record
 11961 0000117E C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 11962 00001182 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11963                                  		; 10/12/2022
 11964 00001186 46                      		inc	si
 11965                                  		; si = disksector+27h 
 11966                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11967 00001187 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11968 0000118A B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11969                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 11970                                  					; +size_of_EXT_SYSTEM_ID
 11971 0000118D F3A4                    		rep movsb		; Move from Bios_Data into request packet
 11972                                  	
 11973                                  		; 10/12/2022
 11974                                  		; cf = 0
 11975                                  		;clc
 11976                                  
 11977 0000118F C3                      		retn
 11978                                  ; ---------------------------------------------------------------------------
 11979                                  
 11980                                  IOCtl_If2:				
 11981 00001190 B007                    		mov	al, 7		; error_unknown_media
 11982 00001192 F9                      		stc
 11983                                  IOCtl_If1:				
 11984 00001193 C3                      		retn
 11985                                  ; ---------------------------------------------------------------------------
 11986                                  
 11987                                  ; 16/10/2022
 11988                                  
 11989                                  ; ==========================================================================
 11990                                  ;  set media id
 11991                                  ; ==========================================================================
 11992                                  
 11993                                  ; function: set the volume label, the system id and the serial number of
 11994                                  ;	    the media that has the extended boot record.
 11995                                  ;	    for the conventional media, this routine will return "unknown
 11996                                  ;	    media.." error to dos.
 11997                                  ;	    this routine will also set the corresponding informations in
 11998                                  ;	    the bds table.
 11999                                  ;
 12000                                  ; input :   ES:di -> bds table for this drive.
 12001                                  ;
 12002                                  ; output:   the extended boot record in the media will be set according to
 12003                                  ;	    the request packet.
 12004                                  ;	    if carry set, then al contains the device driver error number
 12005                                  ;	    that will be returned to dos.
 12006                                  ;
 12007                                  ; subroutines to be called:
 12008                                  ;	BootIo:NEAR
 12009                                  ;
 12010                                  ; logic:
 12011                                  ;
 12012                                  ; {
 12013                                  ;	get drive_number from bds;
 12014                                  ;	rFlag = "read operation";
 12015                                  ;	BootIo;
 12016                                  ;	if (no error) then
 12017                                  ;	     if (extended boot record) then
 12018                                  ;		{ set volume label,volume serial number and system id
 12019                                  ;		  of the boot record to those of the request packet;
 12020                                  ;		  rFlag = "write operation";
 12021                                  ;		  get drive number from bds;
 12022                                  ;		  BootIo;	  /*write it back*/
 12023                                  ;		};
 12024                                  ;	     else		  /*not an extended bpb */
 12025                                  ;		{ set register al to "unknown media.." error code;
 12026                                  ;		  set carry bit;
 12027                                  ;		  ret;	 /*return back to caller */
 12028                                  ;		};
 12029                                  ;	else
 12030                                  ;	     ret;		 /*already error code is set */
 12031                                  ;
 12032                                  ; ==========================================================================
 12033                                  
 12034                                  		; 19/10/2022
 12035                                  SetMediaId:
 12036 00001194 E86900                  		call	ChangeLineChk
 12037 00001197 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12038                                  					; Logical drive	number
 12039 0000119B 88C2                    		mov	dl, al
 12040 0000119D C606[2001]02            		mov	byte [rflag], 2	; romread
 12041 000011A2 52                      		push	dx
 12042 000011A3 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12043 000011A6 5A                      		pop	dx
 12044 000011A7 723E                    		jb	short IOCtl_If6
 12045                                  					; Valid? (0F0h-0FFh?)
 12046 000011A9 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12047                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12048 000011AE 7234                    		jb	short IOCtl_If7	; Brif not
 12049 000011B0 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12050                                  					; EXT_BOOT_SIGNATURE
 12051 000011B5 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12052 000011B7 06                      		push	es		; Save BDS pointer
 12053 000011B8 57                      		push	di
 12054 000011B9 1E                      		push	ds		; Point	ES To boot record
 12055 000011BA 07                      		pop	es
 12056 000011BB BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12057 000011BE C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12058 000011C2 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12059 000011C5 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12060 000011C8 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12061                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12062                                  					; +size_of_EXT_SYSTEM_ID
 12063 000011CB F3A4                    		rep movsb
 12064 000011CD 06                      		push	es		; point	ds back	to Bios_Data
 12065 000011CE 1F                      		pop	ds
 12066 000011CF 5F                      		pop	di		; restore bds pointer
 12067 000011D0 07                      		pop	es
 12068 000011D1 E864F5                  		call	mov_media_ids	; update the bds media id info.
 12069 000011D4 88D0                    		mov	al, dl
 12070 000011D6 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12071 000011DB E80A00                  		call	BootIo		; write	it back.
 12072 000011DE C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12073                                  					; make sure chk_media check the driver
 12074                                  					; return with error code from BootIo
 12075 000011E3 C3                      		retn
 12076                                  ; ---------------------------------------------------------------------------
 12077                                  
 12078                                  IOCtl_If7:				
 12079 000011E4 B007                    		mov	al, 7		; error_unknown_media
 12080 000011E6 F9                      		stc
 12081                                  IOCtl_If6:				
 12082 000011E7 C3                      		retn
 12083                                  
 12084                                  ; =============== S U B	R O U T	I N E =======================================
 12085                                  
 12086                                  ; 16/10/2022
 12087                                  
 12088                                  ; ---------------------------------------------------------------------------
 12089                                  ;	BootIo
 12090                                  ; ---------------------------------------------------------------------------
 12091                                  ;
 12092                                  ; function: read/write the boot record into boot sector.
 12093                                  ;
 12094                                  ; input :
 12095                                  ;	    al=logical drive number
 12096                                  ;	    rFlag = operation (read/write)
 12097                                  ;
 12098                                  ; output:   for read operation,the boot record of the drive specified in bds
 12099                                  ;	    be read into the DiskSector buffer.
 12100                                  ;	    for write operation,the DiskSector buffer image will be written
 12101                                  ;	    to the drive specified in bds.
 12102                                  ;	    if carry set,then al contains the device driver error number
 12103                                  ;	    that will be returned to dos.
 12104                                  ;	    AX,CX,DX register destroyed.
 12105                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12106                                  ;
 12107                                  ; subroutines to be called:
 12108                                  ;	DiskIO:NEAR
 12109                                  ;
 12110                                  ; logic:
 12111                                  ;
 12112                                  ; {
 12113                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12114                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12115                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12116                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12117                                  ; }
 12118                                  ; ==========================================================================
 12119                                  
 12120                                  		; 19/10/2022
 12121                                  BootIo:	
 12122 000011E8 06                      		push	es
 12123 000011E9 57                      		push	di
 12124 000011EA 53                      		push	bx
 12125 000011EB 1E                      		push	ds
 12126 000011EC 07                      		pop	es		; Point ES: to Bios_Data
 12127                                  
 12128                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12129                                  		; need to be initialized for this subroutine out here are
 12130                                  		; - Transfer address to Bios_Data:DiskSector
 12131                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12132                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12133                                  		; - Number of sectors <-- 1
 12134                                  
 12135 000011ED BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12136 000011F0 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12137 000011F2 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12138 000011F6 B90100                  		mov	cx, 1
 12139 000011F9 E8CEF6                  		call	diskio
 12140 000011FC 5B                      		pop	bx
 12141 000011FD 5F                      		pop	di
 12142 000011FE 07                      		pop	es
 12143 000011FF C3                      		retn
 12144                                  
 12145                                  ; =============== S U B	R O U T	I N E =======================================
 12146                                  
 12147                                  ; 16/10/2022
 12148                                  
 12149                                  ; ---------------------------------------------------------------------------
 12150                                  ;	ChangeLineChk
 12151                                  ; ---------------------------------------------------------------------------
 12152                                  ;
 12153                                  ; when the user calls get/set media id call before dos establishes the media
 12154                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12155                                  ; lost.	this routine will check the change line activity and will save the
 12156                                  ; history in the flags.
 12157                                  ;
 12158                                  ; FUNCTION: check the change line error activity
 12159                                  ;
 12160                                  ; INPUT :  ES:di -> bds table.
 12161                                  ;
 12162                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12163                                  ;
 12164                                  ; SUBROUTINES TO BE CALLED:
 12165                                  ;	Set_Changed_DL
 12166                                  ;
 12167                                  ; ---------------------------------------------------------------------------
 12168                                  
 12169                                  ChangeLineChk:	
 12170 00001200 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12171 00001204 08D2                    		or	dl, dl		; Fixed	disk?
 12172 00001206 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12173                                  		; 12/12/2022
 12174 00001208 26F6452304              		test	byte [es:di+23h], 4
 12175                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12176                                  					; return_fake_bpb
 12177 0000120D 751A                    		jnz	short ChangeLnChkRet
 12178 0000120F 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12179 00001214 7513                    		jnz	short ChangeLnChkRet
 12180 00001216 E8F806                  		call	haschange	; This drive support change line?
 12181 00001219 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12182                                  
 12183                                  		; Execute the rom disk interrupt to check changeline activity.
 12184                                  
 12185 0000121B B416                    		mov	ah, 16h
 12186 0000121D CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12187                                  					; DL = drive to	check
 12188                                  					; Return: AH = disk change status
 12189 0000121F 7308                    		jnb	short ChangeLnChkRet
 12190 00001221 53                      		push	bx
 12191 00001222 BB4000                  		mov	bx, 40h		; fchanged
 12192                                  					; Update flag in BDS for this
 12193                                  					; physical drive
 12194 00001225 E8C206                  		call	set_changed_dl
 12195 00001228 5B                      		pop	bx
 12196                                  ChangeLnChkRet:				
 12197 00001229 C3                      		retn
 12198                                  
 12199                                  ; ---------------------------------------------------------------------------
 12200                                  
 12201                                  ; 16/10/2022
 12202                                  
 12203                                  ; ==========================================================================
 12204                                  ;	GetAccessFlag
 12205                                  ; ==========================================================================
 12206                                  ;
 12207                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12208                                  ;
 12209                                  ; INPUT :
 12210                                  ;	    ES:di -> bds table
 12211                                  ;
 12212                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12213                                  ;						 = 1 if disk i/o allowed.
 12214                                  ; ==========================================================================
 12215                                  
 12216                                  		; 19/10/2022
 12217                                  GetAccessFlag:				
 12218 0000122A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12219 0000122E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12220                                  		;mov	al, 0		; Assume result	is unformatted
 12221                                  		; 10/12/2022
 12222 00001231 28C0                    		sub	al, al
 12223                                  		; 10/12/2022
 12224 00001233 26F6452402              		test	byte [es:di+36], 02h
 12225                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12226                                  					; unformatted_media
 12227 00001238 7502                    		jnz	short GafDone	; Done if unformatted
 12228 0000123A FEC0                    		inc	al		; Return true for formatted
 12229                                  
 12230                                  GafDone:				
 12231 0000123C 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12232 0000123F C3                      		retn
 12233                                  ; ---------------------------------------------------------------------------
 12234                                  
 12235                                  ; 16/10/2022
 12236                                  
 12237                                  ; ==========================================================================
 12238                                  ;	SetAccessFlag
 12239                                  ; ==========================================================================
 12240                                  ;
 12241                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12242                                  ;
 12243                                  ; input :
 12244                                  ;	    ES:di -> bds table
 12245                                  ;
 12246                                  ; output:   unformtted_media bit modified according to the user request
 12247                                  ; ==========================================================================
 12248                                  
 12249                                  		; 19/10/2022
 12250                                  SetAccessFlag:				
 12251 00001240 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12252 00001244 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12253                                  		; 10/12/2022
 12254 00001247 26806524FD              		and	byte [es:di+36], 0FDh
 12255                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12256                                  					; ~unformatted_media
 12257 0000124C 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12258 00001250 7505                    		jnz	short saf_Done
 12259                                  		; 10/12/2022
 12260 00001252 26804D2402              		or	byte [es:di+36], 02h
 12261                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12262                                  					; unformatted_media
 12263                                  saf_Done:				
 12264 00001257 C3                      		retn
 12265                                  ; ---------------------------------------------------------------------------
 12266                                  
 12267                                  ; 16/10/2022
 12268                                  
 12269                                  ; ==========================================================================
 12270                                  ; Ioctl_Support_Query
 12271                                  ; ==========================================================================
 12272                                  ;
 12273                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12274                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12275                                  ; device attributes specifies if this function is supported.
 12276                                  ;
 12277                                  ; ==========================================================================
 12278                                  
 12279                                  		; 19/10/2022
 12280                                  ioctl_support_query:
 12281 00001258 06                      		push	es
 12282 00001259 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12283 0000125D 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12284                                  					; AL ==	Major, AH == Minor
 12285 00001261 3C08                    		cmp	al, 8		; IOC_DC
 12286                                  					; See if major code is 8
 12287 00001263 7513                    		jnz	short nosupport
 12288 00001265 0E                      		push	cs
 12289 00001266 07                      		pop	es
 12290 00001267 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12291                                  		; 10/12/2022
 12292 0000126A BF[3B0C]                		mov	di, IOC_DC_Table
 12293                                  		;mov	di, 0C60h	; IOC_DC_Table
 12294                                  					; at 2C7h:0C60h	= 70h:31D0h
 12295 0000126D 86C4                    		xchg	al, ah		; Put minor code in AL
 12296 0000126F F2AE                    		repne scasb		; Scan for minor code in AL
 12297 00001271 7505                    		jnz	short nosupport	; it was not found
 12298 00001273 B80001                  		mov	ax, 100h
 12299                                  		; 10/12/2022
 12300                                  		; (jump to ioctlsupexit is not required)
 12301                                  		;jmp	short $+2	; ioctlsupexit
 12302                                  					; Signal ioctl is supported
 12303                                  		;;jmp	short ioctlsupexit
 12304                                  ; ---------------------------------------------------------------------------
 12305                                  ioctlsupexit:				
 12306 00001276 07                      		pop	es
 12307                                  		; 10/12/2022
 12308                                  		; cf = 0
 12309                                  		;clc
 12310 00001277 C3                      		retn
 12311                                  ; ---------------------------------------------------------------------------
 12312                                  nosupport:				
 12313 00001278 07                      		pop	es
 12314 00001279 E959EE                  		jmp	bc_cmderr
 12315                                  ; ---------------------------------------------------------------------------
 12316                                  
 12317                                  ; 16/10/2022
 12318                                  
 12319                                  ; ==========================================================================
 12320                                  ;	GetMediaSenseStatus
 12321                                  ; ==========================================================================
 12322                                  ;
 12323                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12324                                  ;	    diskette drive and whether the media is the default type
 12325                                  ;	    for that drive. (default type means the max size for that
 12326                                  ;	    drive)
 12327                                  ;
 12328                                  ; INPUT :   ES:DI -> BDS table
 12329                                  ; OUTPUT:   If carry clear
 12330                                  ;	    DS:BX -> Updated IOCtlPacket
 12331                                  ;
 12332                                  ;			 Special Function at offset 0:
 12333                                  ;				0	- Media detected is not default type
 12334                                  ;				1	- Media detected is default type
 12335                                  ;
 12336                                  ;			 Device Type at offset 1:
 12337                                  ;				2       - 720K 3.5" 80 tracks
 12338                                  ;				7	- 1.44M 3.5" 80 tracks
 12339                                  ;				9	- 2.88M 3.5" 80 tracks
 12340                                  ;
 12341                                  ; Error Codes returned in AX if carry set:
 12342                                  ;
 12343                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12344                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12345                                  ;				  the media is really unkown, any error
 12346                                  ;				  other than "media not present"
 12347                                  ; 
 12348                                  ; ==========================================================================
 12349                                  
 12350                                  		; 19/10/2022
 12351                                  SenseMediaType:				
 12352 0000127C C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12353 00001280 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12354                                  		; 10/10/2022
 12355                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12356 00001283 31D2                    		xor	dx, dx
 12357 00001285 8917                    		mov	[bx], dx ; 0
 12358                                  		;
 12359 00001287 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12360                                  					; Get int 13h drive number from	BDS
 12361                                  		; 10/12/2022
 12362                                  		;xor	dh, dh		; DX = physical	drive number
 12363 0000128B B420                    		mov	ah, 20h		; Get Media Type function
 12364                                  					; If no	carry media type in AL
 12365 0000128D CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12366 0000128F 7216                    		jb	short MediaSenseEr ; error code	in AH
 12367 00001291 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12368                                  DetermineMediaType:			
 12369 00001293 FEC8                    		dec	al
 12370 00001295 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12371 00001297 740A                    		jz	short GotMediaType
 12372 00001299 0404                    		add	al, 4
 12373 0000129B 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12374 0000129D 7404                    		jz	short GotMediaType
 12375 0000129F 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12376 000012A1 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12377                                  GotMediaType:				
 12378 000012A3 884701                  		mov	[bx+1],	al	; Save the return value
 12379                                  		; 10/12/2022
 12380                                  		; cf = 0
 12381                                  		;clc			; Signal success
 12382 000012A6 C3                      		retn
 12383                                  ; ---------------------------------------------------------------------------
 12384                                  
 12385                                  MediaSenseEr:				
 12386 000012A7 80FC32                  		cmp	ah, 32h		; See if not default media error
 12387 000012AA 74E7                    		jz	short DetermineMediaType ; Not really an error
 12388 000012AC B002                    		mov	al, 2		; Now assume drive not ready
 12389 000012AE 80FC31                  		cmp	ah, 31h		; See if media was present
 12390 000012B1 7402                    		jz	short SenseErrExit ; Return drive not ready
 12391                                  UnknownMediaType:			
 12392 000012B3 B007                    		mov	al, 7		; Just don't know the media type
 12393                                  SenseErrExit:				
 12394 000012B5 B481                    		mov	ah, 81h		; Signal error return
 12395 000012B7 F9                      		stc
 12396 000012B8 C3                      		retn
 12397                                  
 12398                                  ; ---------------------------------------------------------------------------
 12399                                  		; 10/12/2022
 12400                                  		;db    0
 12401                                  ; ---------------------------------------------------------------------------
 12402                                  
 12403                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12404                                  
 12405                                  ;-----------------------------------------------------------------------------
 12406                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12407                                  ;-----------------------------------------------------------------------------
 12408                                  ; 16/03/2019 - Retro DOS v4.0
 12409                                  
 12410                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12411                                  ;	after booting. this allows testing and implementation of custom int_13
 12412                                  ;	handlers, without giving up ms-dos error recovery
 12413                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12414                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12415                                  ;	exit:	orig13	== address of new int_13 handler
 12416                                  ;		ds:dx	== old orig13 value
 12417                                  ;		es:bx	== old old13  value
 12418                                  ;
 12419                                  ; int 2f handler for external block drivers to communicate with the internal
 12420                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12421                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12422                                  ; dsk_entry, the entry point for all disk requests.
 12423                                  ;
 12424                                  ; on exit from this driver, we will return to the external driver
 12425                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12426                                  ; this scheme allows us to have a small external device driver, and makes
 12427                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12428                                  ; since we only need to make changes in one place (most of the time).
 12429                                  ;
 12430                                  ;   ax=800h - check for installed handler - reserved
 12431                                  ;   ax=801h - install the bds into the linked list
 12432                                  ;   ax=802h - dos request
 12433                                  ;   ax=803h - return bds table starting pointer in ds:di
 12434                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12435                                  ;	    problem. bds table is going to be used to get head/sector
 12436                                  ;	    informations without calling generic ioctl get device parm call.)
 12437                                  
 12438                                  ;BIOSSEGMENT equ 70h
 12439                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12440                                  
 12441                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12442                                  
 12443                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12444 000012B9 80FC13                  		cmp	ah, 13h
 12445 000012BC 7413                    		jz	short int2f_replace_int13
 12446 000012BE 80FC08                  		cmp	ah, 8
 12447 000012C1 743B                    		jz	short mine
 12448                                  
 12449                                  ; Check for WIN386 startup and return the BIOS instance data
 12450                                  
 12451 000012C3 80FC16                  		cmp	ah, 16h		; MultWin386
 12452 000012C6 7479                    		jz	short win386call
 12453 000012C8 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12454 000012CB 7503                    		jnz	short i2f_handler_iret
 12455 000012CD E9A500                  		jmp	handle_multmult
 12456                                  ; ---------------------------------------------------------------------------
 12457                                  
 12458                                  i2f_handler_iret:			
 12459 000012D0 CF                      		iret
 12460                                  ; ---------------------------------------------------------------------------
 12461                                  
 12462                                  int2f_replace_int13:			
 12463 000012D1 50                      		push	ax	; free up a register for caller's ds
 12464 000012D2 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12465                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12466                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12467                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12468 000012D4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12469                                  		; 19/10/2022
 12470                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12471                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12472                                  		;push	word ptr ds:Old13	; return them to caller
 12473                                  		;push	word ptr ds:Old13+2
 12474 000012D9 FF36[B400]              		push	word [Orig13]
 12475 000012DD FF36[B600]              		push	word [Orig13+2]
 12476 000012E1 FF36[0601]              		push	word [Old13]
 12477 000012E5 FF36[0801]              		push	word [Old13+2]
 12478                                  
 12479                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12480                                  		;mov	word ptr ds:Orig13+2, ax
 12481                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12482                                  		;mov	word ptr ds:Old13+2, es
 12483 000012E9 8916[B400]              		mov	[Orig13], dx
 12484 000012ED A3[B600]                		mov	[Orig13+2], ax
 12485 000012F0 891E[0601]              		mov	[Old13], bx
 12486 000012F4 8C06[0801]              		mov	[Old13+2], es
 12487                                  
 12488 000012F8 07                      		pop	es			; es:bx := old old13 vector
 12489 000012F9 5B                      		pop	bx
 12490 000012FA 1F                      		pop	ds			; ds:dx := old orig13 vector
 12491 000012FB 5A                      		pop	dx
 12492 000012FC 58                      		pop	ax
 12493                                  i2f_iret:				
 12494 000012FD CF                      		iret
 12495                                  ; ---------------------------------------------------------------------------
 12496                                  
 12497                                  mine:					
 12498 000012FE 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12499 00001300 73FB                    		jnb	short i2f_iret
 12500 00001302 08C0                    		or	al, al			; a get installed state request?
 12501 00001304 7504                    		jnz	short disp_func
 12502 00001306 B0FF                    		mov	al, 0FFh
 12503 00001308 EBF3                    		jmp	short i2f_iret
 12504                                  ; ---------------------------------------------------------------------------
 12505                                  
 12506                                  disp_func:				
 12507 0000130A 3C01                    		cmp	al, 1			; request for installing bds?
 12508 0000130C 7418                    		jz	short do_subfun_01
 12509 0000130E 3C03                    		cmp	al, 3			; get bds vector?
 12510 00001310 7424                    		jz	short do_get_bds_vector
 12511                                  
 12512                                  ; set up pointer to request packet
 12513                                  
 12514 00001312 1E                      		push	ds
 12515 00001313 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12516                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12517                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12518                                  		; 19/10/2022
 12519                                  		;mov	word ptr ds:ptrsav, bx
 12520                                  		;mov	word ptr ds:ptrsav+2, es
 12521 00001318 891E[1200]              		mov	[ptrsav], bx
 12522 0000131C 8C06[1400]              		mov	[ptrsav+2], es
 12523 00001320 1F                      		pop	ds
 12524                                  		;jmp	far ptr	i2f_dskentry
 12525                                  		; 17/10/2022
 12526                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12527 00001321 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12528                                  					; NOTE: jump to a FAR function, not an
 12529                                  					;  IRET type function. Callers of
 12530                                  					;  this int2f subfunction will have
 12531                                  					;  to be careful to do a popf
 12532                                  
 12533                                  ; ---------------------------------------------------------------------------
 12534                                  
 12535                                  do_subfun_01:				
 12536 00001326 06                      		push	es
 12537 00001327 1E                      		push	ds
 12538 00001328 1E                      		push	ds
 12539 00001329 07                      		pop	es
 12540                                  		; 17/10/2022
 12541 0000132A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12542                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12543                                  					; point	ds: -> Bios_Data
 12544 0000132F E8C303                  		call	install_bds
 12545 00001332 1F                      		pop	ds
 12546 00001333 07                      		pop	es
 12547 00001334 EBC7                    		jmp	short i2f_iret
 12548                                  ; ---------------------------------------------------------------------------
 12549                                  
 12550                                  do_get_bds_vector:
 12551                                  		; 17/10/2022
 12552 00001336 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12553                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12554 0000133B C53E[1901]              		lds	di, [start_bds]
 12555                                  		;lds	di, ds:start_bds
 12556                                  ;ii2f_iret:	; 10/12/2022				
 12557 0000133F EBBC                    		jmp	short i2f_iret
 12558                                  ; ---------------------------------------------------------------------------
 12559                                  
 12560                                  ; 17/10/2022
 12561                                  ; 16/10/2022
 12562                                  
 12563                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12564                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12565                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12566                                  
 12567                                  win386call:				
 12568 00001341 1E                      		push	ds
 12569 00001342 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12570                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12571                                  					; at 2C7h:30h =	70h:25A0h
 12572 00001347 3C05                    		cmp	al, 5		; Win386_Init
 12573                                  					; is it	win386 initializing?
 12574 00001349 7410                    		jz	short Win386Init
 12575 0000134B 3C06                    		cmp	al, 6		; Win386_Exit
 12576                                  					; is it	win386 exiting?
 12577 0000134D 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12578                                  		; 12/12/2022
 12579 0000134F F6C201                  		test	dl, 1
 12580                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12581 00001352 751E                    		jnz	short win_iret	; if not win386, then continue
 12582                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12583 00001354 8026[CE08]00            		and	byte [IsWin386], 0 
 12584 00001359 EB17                    		jmp	short win_iret
 12585                                  ; ---------------------------------------------------------------------------
 12586                                  
 12587                                  Win386Init:	
 12588                                  		; 12/12/2022
 12589 0000135B F6C201                  		test	dl, 1			
 12590                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12591 0000135E 7512                    		jnz	short win_iret	; if not win386, then continue
 12592                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12593 00001360 800E[CE08]01            		or	byte [IsWin386], 1
 12594                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12595                                  		;mov	word ptr ds:SI_Next+2, es
 12596 00001365 891E[9C08]              		mov	[SI_Next], bx
 12597 00001369 8C06[9E08]              		mov	[SI_Next+2], es
 12598                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12599 0000136D BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12600 00001370 1E                      		push	ds
 12601 00001371 07                      		pop	es
 12602                                  win_iret:				
 12603 00001372 1F                      		pop	ds
 12604                                  ii2f_iret:	; 10/12/2022	
 12605 00001373 EB88                    		jmp	short i2f_iret	; return back up the chain
 12606                                  ; ---------------------------------------------------------------------------
 12607                                  
 12608                                  handle_multmult:			
 12609 00001375 3C01                    		cmp	al, 1
 12610 00001377 7515                    		jnz	short try_2
 12611 00001379 1E                      		push	ds
 12612 0000137A E84700                  		call	HMAPtr		; get offset of free HMA
 12613                                  		; 10/12/2022
 12614                                  		;xor	bx, bx
 12615                                  		;dec	bx
 12616 0000137D BBFFFF                  		mov	bx, 0FFFFh
 12617 00001380 8EC3                    		mov	es, bx		; seg of HMA
 12618 00001382 89FB                    		mov	bx, di
 12619 00001384 F7D3                    		not	bx
 12620 00001386 09DB                    		or	bx, bx
 12621 00001388 7401                    		jz	short try_1
 12622 0000138A 43                      		inc	bx
 12623                                  try_1:					
 12624 0000138B 1F                      		pop	ds
 12625 0000138C EBE5                    		jmp	short ii2f_iret
 12626                                  ; ---------------------------------------------------------------------------
 12627                                  
 12628                                  try_2:					
 12629 0000138E 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12630 00001390 7530                    		jnz	short try_3
 12631 00001392 1E                      		push	ds
 12632                                  		; 10/12/2022
 12633                                  		;xor	di, di
 12634                                  		;dec	di
 12635 00001393 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12636 00001396 8EC7                    		mov	es, di
 12637 00001398 E82900                  		call	HMAPtr		; get offset of free HMA
 12638 0000139B 83FFFF                  		cmp	di, 0FFFFh
 12639 0000139E 7421                    		jz	short InsuffHMA
 12640 000013A0 F7DF                    		neg	di		; free space in HMA
 12641 000013A2 39FB                    		cmp	bx, di
 12642 000013A4 7605                    		jbe	short try_4
 12643                                  		; 10/12/2022
 12644                                  		;sub	di, di
 12645                                  		;dec	di
 12646 000013A6 BFFFFF                  		mov	di, 0FFFFh
 12647 000013A9 EB16                    		jmp	short InsuffHMA
 12648                                  ; ---------------------------------------------------------------------------
 12649                                  
 12650                                  try_4:					
 12651                                  		;mov	di, ds:FreeHMAPtr
 12652 000013AB 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12653 000013AF 83C30F                  		add	bx, 15
 12654                                  		;and	bx, 0FFF0h
 12655                                  		; 10/12/2022
 12656 000013B2 80E3F0                  		and	bl, 0F0h
 12657                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12658 000013B5 011E[F508]              		add	[FreeHMAPtr], bx
 12659 000013B9 7506                    		jnz	short InsuffHMA
 12660 000013BB C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12661                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12662                                  					; no more HMA if we have wrapped
 12663                                  InsuffHMA:				
 12664 000013C1 1F                      		pop	ds
 12665                                  		; 10/12/2022
 12666                                  try_3:		
 12667 000013C2 EBAF                    		jmp	short ii2f_iret
 12668                                  ; ---------------------------------------------------------------------------
 12669                                  
 12670                                  		; 10/12/2022
 12671                                  ;try_3:					
 12672                                  		;jmp	ii2f_iret
 12673                                  
 12674                                  ; =============== S U B	R O U T	I N E =======================================
 12675                                  
 12676                                  ; 16/10/2022
 12677                                  
 12678                                  ;--------------------------------------------------------------------------
 12679                                  ;
 12680                                  ; procedure : HMAPtr
 12681                                  ;
 12682                                  ;		Gets the offset of the free HMA area ( with respect to
 12683                                  ;							seg ffff )
 12684                                  ;		If DOS has not moved high, tries to move DOS high.
 12685                                  ;		In the course of doing this, it will allocate all the HMA
 12686                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12687                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12688                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12689                                  ;
 12690                                  ;	RETURNS : offset of free HMA in DI
 12691                                  ;		  BIOS_DATA, seg in DS
 12692                                  ;
 12693                                  ;--------------------------------------------------------------------------
 12694                                  
 12695                                  		; 17/10/2022
 12696                                  HMAPtr:
 12697 000013C4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12698                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12699 000013C9 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12700                                  		;mov	di, ds:FreeHMAPtr
 12701 000013CD 83FFFF                  		cmp	di, 0FFFFh
 12702 000013D0 750F                    		jnz	short HMAPtr_retn
 12703 000013D2 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12704                                  		;cmp	ds:SysinitPresent, 0
 12705 000013D7 7408                    		jz	short HMAPtr_retn
 12706 000013D9 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12707                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12708 000013DD 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12709                                  		;mov	di, ds:FreeHMAPtr
 12710                                  HMAPtr_retn:				
 12711 000013E1 C3                      		retn
 12712                                  
 12713                                  ; =============== S U B	R O U T	I N E =======================================
 12714                                  
 12715                                  ; 16/10/2022
 12716                                  
 12717                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12718                                  ; but go ahead and update direction flag, si, & di
 12719                                  
 12720                                  move_sector:
 12721                                  
 12722                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12723                                  ; any segment to be a fault. Theoretically, this could be handled
 12724                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12725                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12726                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12727                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12728                                  ; mode. Their fault handler was only designed to deal with one
 12729                                  ; special case which occurred in a magazine benchmark, but didn't
 12730                                  ; handle the general case worth beans.
 12731                                  ;
 12732                                  ; Simply changing this code to do a byte loop would work okay but
 12733                                  ; would involve a general case performance hit. Therefore, we'll
 12734                                  ; check for either source or destination offsets being within one
 12735                                  ; sector of the end of their segments and only in that case fall
 12736                                  ; back to a byte move.
 12737                                  
 12738 000013E2 FC                      		cld
 12739 000013E3 51                      		push	cx
 12740 000013E4 B90001                  		mov	cx, 256
 12741 000013E7 81FE00FE                		cmp	si, 0FE00h
 12742 000013EB 770A                    		ja	short movsec_bytes
 12743 000013ED 81FF00FE                		cmp	di, 0FE00h
 12744 000013F1 7704                    		ja	short movsec_bytes
 12745 000013F3 F3A5                    		rep movsw
 12746 000013F5 59                      		pop	cx
 12747 000013F6 C3                      		retn
 12748                                  ; ---------------------------------------------------------------------------
 12749                                  
 12750                                  movsec_bytes:				
 12751 000013F7 D1E1                    		shl	cx, 1
 12752 000013F9 F3A4                    		rep movsb
 12753 000013FB 59                      		pop	cx
 12754 000013FC C3                      		retn
 12755                                  
 12756                                  ; =============== S U B	R O U T	I N E =======================================
 12757                                  
 12758                                  ; 16/10/2022
 12759                                  
 12760                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12761                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12762                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12763                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12764                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12765                                  ; but we break down a request when we get an ecc or dma error into several
 12766                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12767                                  ; number of sectors on a track on the medium, and the request would fail.
 12768                                  ;
 12769                                  ; input conditions:
 12770                                  ;	all registers set up for an int 13 request.
 12771                                  ;
 12772                                  ; output:
 12773                                  ;	dh - contains starting head number for request
 12774                                  ;	cx - contains starting sector and cylinder numbers
 12775                                  ;	(the above may or may not have been changed, and are 0-based)
 12776                                  ;	all other registers preserved.
 12777                                  
 12778                                  check_wrap:	
 12779 000013FD 50                      		push	ax
 12780 000013FE 53                      		push	bx
 12781 000013FF 06                      		push	es
 12782 00001400 57                      		push	di
 12783 00001401 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 12784 00001404 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 12785                                  		; 12/12/2022
 12786 00001406 26F6452301              		test	byte [es:di+23h], 1
 12787                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12788 0000140B 7459                    		jz	short no_wrap	; no wrapping for removable media
 12789 0000140D 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12790 00001411 89C8                    		mov	ax, cx
 12791 00001413 83E03F                  		and	ax, 3Fh		; extract sector number
 12792 00001416 39D8                    		cmp	ax, bx		; are we going to wrap?
 12793 00001418 764C                    		jbe	short no_wrap
 12794 0000141A F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 12795                                  
 12796                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 12797                                  ; last sector on that track.
 12798                                  
 12799 0000141C 08E4                    		or	ah, ah
 12800 0000141E 7503                    		jnz	short not_on_bound
 12801                                  		; 18/12/2022
 12802 00001420 48                      		dec	ax ; *
 12803 00001421 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 12804                                  					; if on	boundary
 12805                                  		;dec	al ; *		; also decrement # of head wraps
 12806                                  not_on_bound:				
 12807 00001423 80E1C0                  		and	cl, 0C0h	; zero out sector #
 12808 00001426 08E1                    		or	cl, ah		; or in	new sector #
 12809 00001428 30E4                    		xor	ah, ah		; ax = # of head wraps
 12810 0000142A 40                      		inc	ax
 12811 0000142B 00F0                    		add	al, dh		; add in starting head #
 12812 0000142D 80D400                  		adc	ah, 0		; catch	any carry
 12813 00001430 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 12814                                  					; are we going to wrap around a	head?
 12815 00001434 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 12816 00001436 52                      		push	dx		; preserve drive number and head number
 12817 00001437 31D2                    		xor	dx, dx
 12818 00001439 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 12819 0000143D F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 12820                                  
 12821                                  ; careful here! if new head # is 0, then we are on the last head.
 12822                                  
 12823 0000143F 09D2                    		or	dx, dx
 12824 00001441 7507                    		jnz	short no_head_bound
 12825 00001443 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 12826                                  
 12827                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 12828                                  
 12829 00001445 09C0                    		or	ax, ax
 12830 00001447 7401                    		jz	short no_head_bound
 12831 00001449 48                      		dec	ax		; reduce number	of cylinder wraps
 12832                                  no_head_bound:				
 12833 0000144A 88D7                    		mov	bh, dl		; bh has new head number
 12834 0000144C 5A                      		pop	dx		; restore drive number and head number
 12835 0000144D FECF                    		dec	bh		; get it 0-based
 12836 0000144F 88FE                    		mov	dh, bh		; set up new head number in dh
 12837 00001451 88CF                    		mov	bh, cl
 12838 00001453 80E73F                  		and	bh, 3Fh		; preserve sector number
 12839 00001456 B306                    		mov	bl, 6
 12840 00001458 86CB                    		xchg	cl, bl
 12841 0000145A D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 12842 0000145C 00C5                    		add	ch, al		; add in cylinder wrap
 12843 0000145E 10E3                    		adc	bl, ah		; add in high byte
 12844 00001460 D2E3                    		shl	bl, cl		; move up to ms	end
 12845 00001462 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 12846 00001464 08F9                    		or	cl, bh		; or in	sector number
 12847                                  no_wrap:				
 12848 00001466 F8                      		clc
 12849 00001467 5F                      		pop	di
 12850 00001468 07                      		pop	es
 12851 00001469 5B                      		pop	bx
 12852 0000146A 58                      		pop	ax
 12853 0000146B C3                      		retn
 12854                                  ; ---------------------------------------------------------------------------
 12855                                  
 12856                                  no_wrap_head:				
 12857 0000146C 88C6                    		mov	dh, al		; do not lose new head number
 12858 0000146E FECE                    		dec	dh		; get it 0-based
 12859 00001470 EBF4                    		jmp	short no_wrap
 12860                                  
 12861                                  ; =============== S U B	R O U T	I N E =======================================
 12862                                  
 12863                                  ; 16/10/2022
 12864                                  
 12865                                  ; this is a special version of the bds lookup code which is
 12866                                  ; based on physical drives rather than the usual logical drives
 12867                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 12868                                  ; otherwise carry is clear
 12869                                  ;
 12870                                  ; guaranteed to trash no registers except es:di
 12871                                  
 12872                                  		; 19/10/2022
 12873                                  find_bds:	
 12874 00001472 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 12875                                  fbds_1:					
 12876 00001476 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 12877 0000147A 7409                    		jz	short fdbs_2
 12878 0000147C 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12879                                  					; go to next bds
 12880 0000147F 83FFFF                  		cmp	di, 0FFFFh
 12881 00001482 75F2                    		jnz	short fbds_1
 12882 00001484 F9                      		stc
 12883                                  fdbs_2:					
 12884 00001485 C3                      		retn
 12885                                  
 12886                                  ; =============== S U B	R O U T	I N E =======================================
 12887                                  
 12888                                  ; 16/10/2022
 12889                                  		; 17/10/2022
 12890                                  doint:
 12891                                  		; 10/12/2022
 12892 00001486 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 12893                                  					; get physical drive number
 12894                                  		; 19/10/2022 - Temporary !
 12895                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 12896                                  		
 12897 00001489 30E4                    		xor	ah, ah
 12898 0000148B 08C0                    		or	al, al
 12899 0000148D 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 12900                                  		; 10/12/2022
 12901 0000148F 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 12902                                  					; get request code
 12903                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 12904 00001492 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12905                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 12906 00001495 9D                      		popf
 12907                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 12908                                  		; 17/10/2022
 12909 00001496 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12910                                  		;;call	call_orig13	; call far 70h:797h
 12911                                  					; call far KERNEL_SEGMENT:call_orig13
 12912 0000149B 9C                      		pushf
 12913                                  		; 10/12/2022
 12914 0000149C 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12915                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 12916                                  dointdone:				
 12917 0000149F C3                      		retn
 12918                                  
 12919                                  ;----------------------------------------------------------------------------
 12920                                  
 12921                                  ; 16/10/2022
 12922                                  
 12923                                  ; this is the true int 13 handler. we parse the request to see if there is
 12924                                  ; a dma violation. if so, depending on the function, we:
 12925                                  ;   read/write break the request into three pieces and move the middle one
 12926                                  ;	       into our internal buffer.
 12927                                  ;
 12928                                  ;   format     copy the format table into the buffer
 12929                                  ;   verify     point the transfer address into the buffer
 12930                                  ;
 12931                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 12932                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 12933                                  ; the offending sector into the buffer below and do the i/o from there.
 12934                                  
 12935                                  ;struc INT13FRAME
 12936                                  ;.oldbp: resw
 12937                                  ;.oldax: resw 
 12938                                  ;.oldbx: resw
 12939                                  ;.oldcx: resw
 12940                                  ;.olddx: resw
 12941                                  ;.oldds: resw	; now we save caller's ds, too
 12942                                  ;.olddd: resd
 12943                                  ;.oldf:	resw
 12944                                  ;end struc
 12945                                  
 12946                                  ;----------------------------------------------------------------------------
 12947                                  
 12948                                  ;   entry conditions:
 12949                                  ;	ah = function
 12950                                  ;	al = number of sectors
 12951                                  ;	es:bx = dma address
 12952                                  ;	cx = packed track and sector
 12953                                  ;	dx = head and drive
 12954                                  ;   output conditions:
 12955                                  ;	no dma violation.
 12956                                  
 12957                                  ;	use extreme caution when working with this code. In general,
 12958                                  ;	  all registers are hot at all times.
 12959                                  ;
 12960                                  ;	question:  does this code handle cases where dma errors
 12961                                  ;	  occur during ecc retries, and where ecc errors occur during
 12962                                  ;	  dma breakdowns???? Hmmmmm.
 12963                                  
 12964                                  ;----------------------------------------------------------------------------
 12965                                  
 12966                                  ; ---------------------------------------------------------------------------
 12967                                  
 12968 000014A0 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 12969                                  
 12970                                  ; 17/10/2022
 12971                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 12972                                  ; 09/12/2022
 12973                                  DTYPEARRAY equ dtype_array
 12974                                  
 12975                                  ; ---------------------------------------------------------------------------
 12976                                  
 12977                                  ; stick some special stuff out of mainline
 12978                                  
 12979                                  ; we know we're doing a format command. if we have changeline
 12980                                  ; support, then flag some special changed stuff and set changed
 12981                                  ; by format bit for all logical drives using this physical drive
 12982                                  
 12983                                  format_special_stuff:			
 12984 000014A4 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 12985 000014A9 7459                    		jz	short format_special_stuff_done ; brif not
 12986 000014AB 53                      		push	bx
 12987 000014AC BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 12988 000014AF E83804                  		call	set_changed_dl	; indicate that media changed by format
 12989 000014B2 5B                      		pop	bx
 12990 000014B3 EB4F                    		jmp	short format_special_stuff_done
 12991                                  ; ---------------------------------------------------------------------------
 12992                                  
 12993                                  ; 16/10/2022
 12994                                  
 12995                                  ; we know we've got ec35's on the system. Now see if we're doing
 12996                                  ; a floppy. If so, create a mask and see if this particular
 12997                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 12998                                  
 12999                                  		; 19/10/2022
 13000                                  ec35_special_stuff:			
 13001 000014B5 84D2                    		test	dl, dl		; floppy or hard disk?
 13002 000014B7 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13003 000014B9 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13004 000014BA 51                      		push	cx
 13005 000014BB 88D1                    		mov	cl, dl		; turn drive number into bit map
 13006 000014BD B001                    		mov	al, 1		; assume drive 0
 13007 000014BF D2E0                    		shl	al, cl		; shift	over correct number of times
 13008 000014C1 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13009 000014C5 59                      		pop	cx
 13010 000014C6 58                      		pop	ax
 13011 000014C7 7442                    		jz	short ec35_special_stuff_done
 13012                                  					; done if this floppy is not an	ec35
 13013 000014C9 53                      		push	bx		; free up a far	pointer	(es:bx)
 13014 000014CA 06                      		push	es
 13015                                  		; 17/10/2022
 13016 000014CB 2EC41E[A014]            		les	bx, [cs:DTYPEARRAY]
 13017                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13018                                  					; 0070h:3A65h =	2C7h:14F5h
 13019 000014D0 00D3                    		add	bl, dl
 13020 000014D2 80D700                  		adc	bh, 0		; find entry for this drive
 13021 000014D5 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13022                                  					; (360k	disk in	360k drive,
 13023                                  					; no double-stepping, 250 kbs transfer rate)
 13024 000014D9 07                      		pop	es
 13025 000014DA 5B                      		pop	bx
 13026 000014DB EB2E                    		jmp	short ec35_special_stuff_done
 13027                                  ; ---------------------------------------------------------------------------
 13028                                  
 13029                                  ; 16/10/2022
 13030                                  
 13031                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13032                                  ; this function does not reset the common buses after the execution.
 13033                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13034                                  ; will issue ah=1 (read status) call to reset the buses.
 13035                                  
 13036                                  ps2_special_stuff:			
 13037 000014DD 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13038                                  					; read driver parm ?
 13039 000014E2 7407                    		jz	short ps2_30_problem
 13040 000014E4 803E[1E00]15            		cmp	byte [prevoper], 15h
 13041                                  					; apparently function 15h fails, too
 13042 000014E9 752D                    		jnz	short ps2_special_stuff_done
 13043                                  ps2_30_problem:				
 13044 000014EB 50                      		push	ax
 13045 000014EC B401                    		mov	ah, 1
 13046                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13047                                  		; 17/10/2022
 13048 000014EE 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13049                                  		;call	call_orig13	; call far 70:797h
 13050                                  					; call far KERNEL_SEGMENT:call_orig13
 13051 000014F3 58                      		pop	ax
 13052 000014F4 EB22                    		jmp	short ps2_special_stuff_done
 13053                                  ; ---------------------------------------------------------------------------
 13054                                  
 13055                                  ; 17/10/2022
 13056                                  ; 16/10/2022
 13057                                  
 13058                                  ; here is the actual int13 handler
 13059                                  
 13060                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13061                                  
 13062                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13063                                  ; vectoring up here from Bios_Data
 13064                                  
 13065                                  		; 19/10/2022
 13066 000014F6 1E                      		push	ds		; save caller's ds register first thing
 13067                                  		;;mov	ds, word [cs:0030h]
 13068                                  					; and set up our own ds -> Bios_Data
 13069 000014F7 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13070                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13071                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13072                                  
 13073                                  ; let the operation proceed. if there is a dma violation, then we do things
 13074                                  
 13075 000014FC A3[1E00]                		mov	[prevoper], ax	; save request
 13076 000014FF 80FC05                  		cmp	ah, 5		; romformat
 13077 00001502 74A0                    		jz	short format_special_stuff
 13078                                  					; go do special stuff for format
 13079                                   format_special_stuff_done:		
 13080 00001504 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13081 00001509 75AA                    		jnz	short ec35_special_stuff
 13082                                  					; go handle it out of line if so
 13083                                  ec35_special_stuff_done:
 13084                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13085 0000150B 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13086                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13087                                  		
 13088 00001510 9C                      		pushf			; save result flags
 13089                                  		
 13090 00001511 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13091                                  					; mdl_ps2_30
 13092 00001516 74C5                    		jz	short ps2_special_stuff
 13093                                  					; exit mainline to address special
 13094                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13095 00001518 9D                      		popf
 13096 00001519 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13097                                  ret_from_i13:				
 13098 0000151B 1F                      		pop	ds
 13099 0000151C CA0200                  		retf	2		; restore ds &	iret w/flags
 13100                                  ; ---------------------------------------------------------------------------
 13101                                  
 13102                                  ; most of our code exits through here. If carry isn't set, then
 13103                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13104                                  ; a changeline error.
 13105                                  
 13106                                  i13ret_ck_chglinerr:			
 13107 0000151F 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13108                                  i13_ret_error:				
 13109 00001521 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13110 00001524 7513                    		jnz	short int13b	; skip if wrong	error
 13111 00001526 08D2                    		or	dl, dl		; is this for the hard disk?
 13112 00001528 780F                    		js	short int13b	; yes, ignore
 13113 0000152A 803E[7700]00            		cmp	byte [fhave96], 0
 13114 0000152F 7408                    		jz	short int13b	; just in case ROM returned this
 13115                                  					; error	even though it told us it
 13116                                  					; never	would
 13117 00001531 53                      		push	bx
 13118 00001532 BB4000                  		mov	bx, 40h		; fchanged
 13119 00001535 E8B203                  		call	set_changed_dl
 13120 00001538 5B                      		pop	bx
 13121                                  int13b:					
 13122 00001539 F9                      		stc			; now return the error
 13123 0000153A EBDF                    		jmp	short ret_from_i13
 13124                                  ; ---------------------------------------------------------------------------
 13125                                  
 13126                                  ; some kind of error occurred. see if it is dma violation
 13127                                  
 13128                                  goterr13:				
 13129 0000153C 80FC09                  		cmp	ah, 9		; dma error?
 13130 0000153F 747C                    		jz	short gotdmaerr
 13131                                  goterr13_xxxx:				
 13132 00001541 80FC11                  		cmp	ah, 11h		; ecc error?
 13133 00001544 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13134 00001546 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13135 0000154B 74D4                    		jz	short i13_ret_error
 13136                                  
 13137 0000154D 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13138                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13139                                  					; (2 = romread)
 13140                                  					; ECC correction only applies to reads
 13141 00001552 75CD                    		jnz	short i13_ret_error
 13142                                  
 13143 00001554 30E4                    		xor	ah, ah
 13144                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13145                                  		; 17/10/2022
 13146 00001556 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13147                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13148                                  					; call far 70:797h
 13149 0000155B A1[1E00]                		mov	ax, [prevoper]
 13150 0000155E 30E4                    		xor	ah, ah		; return code =	no error
 13151 00001560 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13152 00001562 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13153 00001564 53                      		push	bx
 13154 00001565 51                      		push	cx
 13155 00001566 52                      		push	dx
 13156 00001567 A2[2000]                		mov	[number_of_sec], al
 13157                                  loop_ecc:				
 13158 0000156A B80102                  		mov	ax, 201h	; read one sector
 13159                                  
 13160                                  ; we do reads one sector at a time. this ensures that we will eventually
 13161                                  ; finish the request since ecc errors on one sector do read in that sector.
 13162                                  ;
 13163                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13164                                  ; that attempt to read more sectors than are available on a particular
 13165                                  ; track.
 13166                                  ;
 13167                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13168                                  ; this request.
 13169                                  ;
 13170                                  ; at this point, all registers are set up for the call to orig13, except
 13171                                  ; that there may be a starting sector number that is bigger than the number
 13172                                  ; of sectors on a track.
 13173                                  ;
 13174 0000156D E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13175                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13176                                  		; 17/10/2022
 13177 00001570 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13178                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13179 00001575 730C                    		jnb	short ok11_op
 13180 00001577 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13181 0000157A 741B                    		jz	short handle_dma_during_ecc
 13182 0000157C 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13183 0000157F 7510                    		jnz	short ok11_exit_err
 13184                                  		; 10/12/2022
 13185                                  		; xor ax ax -> ah = 0
 13186                                  		;mov	ah, 0		; ecc error. reset the system again.
 13187 00001581 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13188                                  					; was the last sector, no error	code
 13189                                  					; will be returned for the corrected
 13190                                  					; read.	(clear carry too.)
 13191                                  ok11_op:				
 13192 00001583 FE0E[2000]              		dec	byte [number_of_sec]
 13193 00001587 7409                    		jz	short ok11_exit	; all done?
 13194 00001589 FEC1                    		inc	cl		; advance sector number
 13195                                  					; add 200h to address
 13196 0000158B FEC7                    		inc	bh
 13197 0000158D FEC7                    		inc	bh
 13198 0000158F EBD9                    		jmp	short loop_ecc
 13199                                  ; ---------------------------------------------------------------------------
 13200                                  
 13201                                  ; locate error returns centrally
 13202                                  
 13203                                  ok11_exit_err:				
 13204 00001591 F9                      		stc			; set carry bit again.
 13205                                  ok11_exit:				
 13206 00001592 5A                      		pop	dx
 13207 00001593 59                      		pop	cx
 13208 00001594 5B                      		pop	bx
 13209 00001595 EB88                    		jmp	short i13ret_ck_chglinerr
 13210                                  ; ---------------------------------------------------------------------------
 13211                                  
 13212                                  ; do the single sector read again, this time into our temporary
 13213                                  ; buffer, which is guaranteed not to have a DMA error, then
 13214                                  ; move the data to its proper location and proceed
 13215                                  
 13216                                  handle_dma_during_ecc:			
 13217 00001597 06                      		push	es
 13218 00001598 53                      		push	bx
 13219 00001599 BB[4E01]                		mov	bx, disksector
 13220 0000159C 1E                      		push	ds
 13221 0000159D 07                      		pop	es		; point es:bx to buffer
 13222 0000159E B80102                  		mov	ax, 201h	; read one sector
 13223                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13224                                  		; 17/10/2022
 13225 000015A1 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13226                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13227 000015A6 5B                      		pop	bx
 13228 000015A7 07                      		pop	es
 13229 000015A8 7305                    		jnb	short handle_dma_during_ecc_noerr
 13230 000015AA 80FC11                  		cmp	ah, 11h
 13231 000015AD 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13232                                  
 13233                                  ; now we're kosher. Copy the data to where it belongs and resume
 13234                                  ; the ECC looping code.
 13235                                  
 13236                                  handle_dma_during_ecc_noerr:		
 13237 000015AF 56                      		push	si
 13238 000015B0 57                      		push	di
 13239 000015B1 89DF                    		mov	di, bx
 13240 000015B3 BE[4E01]                		mov	si, disksector
 13241 000015B6 E829FE                  		call	move_sector
 13242 000015B9 5F                      		pop	di
 13243 000015BA 5E                      		pop	si
 13244 000015BB EBC6                    		jmp	short ok11_op
 13245                                  ; ---------------------------------------------------------------------------
 13246                                  
 13247                                  ; we truly have a dma violation. restore register ax and retry the
 13248                                  ; operation as best we can.
 13249                                  
 13250                                  gotdmaerr:				
 13251 000015BD A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13252 000015C0 FB                      		sti
 13253 000015C1 80FC02                  		cmp	ah, 2		; romread
 13254 000015C4 723B                    		jb	short i13_done_dmaerr
 13255                                  					; just pass dma error thru for
 13256                                  					; functions we don't handle
 13257 000015C6 80FC04                  		cmp	ah, 4		; romverify
 13258 000015C9 743C                    		jz	short intverify
 13259 000015CB 80FC05                  		cmp	ah, 5		; romformat
 13260 000015CE 7448                    		jz	short intformat
 13261 000015D0 772F                    		ja	short i13_done_dmaerr
 13262                                  
 13263                                  ; we are doing a read/write call. check for dma problems
 13264                                  
 13265                                  ;	******** set up stack frame here!!! ********
 13266                                  
 13267 000015D2 52                      		push	dx
 13268 000015D3 51                      		push	cx
 13269 000015D4 53                      		push	bx
 13270 000015D5 50                      		push	ax
 13271 000015D6 55                      		push	bp
 13272 000015D7 89E5                    		mov	bp, sp
 13273 000015D9 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13274 000015DB D1E2                    		shl	dx, 1
 13275 000015DD D1E2                    		shl	dx, 1
 13276 000015DF D1E2                    		shl	dx, 1
 13277 000015E1 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13278 000015E3 01DA                    		add	dx, bx		; combine with offset
 13279 000015E5 81C2FF01                		add	dx, 511		; simulate a transfer
 13280                                  
 13281                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13282                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13283                                  
 13284 000015E9 7303                    		jnb	short no_skip_first
 13285 000015EB E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13286                                  ; ---------------------------------------------------------------------------
 13287                                  
 13288                                  no_skip_first:				
 13289 000015EE D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13290 000015F0 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13291 000015F2 28F4                    		sub	ah, dh
 13292                                  
 13293                                  ; ah is now the number of sectors that we can successfully write in this
 13294                                  ; segment. if this number is above or equal to the requested number, then we
 13295                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13296                                  ;
 13297                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13298                                  ; first place is because we got a dma error. so it's impossible
 13299                                  ; for the whole block to fit, unless the dma error was returned
 13300                                  ; in error.
 13301                                  
 13302 000015F4 38C4                    		cmp	ah, al		; can we fit it	in?
 13303 000015F6 7236                    		jb	short doblock	; no, perform blocking.
 13304                                  
 13305                                  ; yes, the request fits. let it happen.
 13306                                  
 13307 000015F8 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13308                                  					; set up head number
 13309 000015FB E888FE                  		call	doint
 13310 000015FE E9D900                  		jmp	bad13		; and return from this place
 13311                                  ; ---------------------------------------------------------------------------
 13312                                  
 13313                                  i13_done_dmaerr:			
 13314 00001601 B409                    		mov	ah, 9		; pass dma error thru to caller
 13315 00001603 F9                      		stc
 13316 00001604 E914FF                  		jmp	ret_from_i13	; return with error,
 13317                                  					; we know it's not a changeline error
 13318                                  ; ---------------------------------------------------------------------------
 13319                                  
 13320                                  ; verify the given sectors. place the buffer pointer into our space.
 13321                                  
 13322                                  intverify:				
 13323 00001607 06                      		push	es		; save caller's dma address
 13324 00001608 53                      		push	bx
 13325 00001609 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13326 0000160A 07                      		pop	es
 13327                                  dosimple:				
 13328 0000160B BB[4E01]                		mov	bx, disksector
 13329                                  					; do the i/o from Bios_Data:disksector
 13330                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13331                                  		; 17/10/2022
 13332 0000160E 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13333                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13334 00001613 5B                      		pop	bx
 13335 00001614 07                      		pop	es
 13336 00001615 E907FF                  		jmp	i13ret_ck_chglinerr
 13337                                  ; ---------------------------------------------------------------------------
 13338                                  
 13339                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13340                                  
 13341                                  intformat:				
 13342 00001618 06                      		push	es
 13343 00001619 53                      		push	bx
 13344 0000161A 56                      		push	si
 13345 0000161B 57                      		push	di
 13346 0000161C 1E                      		push	ds
 13347                                  
 13348                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13349                                  ; in other words, swap (ds, es)
 13350                                  
 13351 0000161D 06                      		push	es
 13352 0000161E 1E                      		push	ds
 13353 0000161F 07                      		pop	es
 13354 00001620 1F                      		pop	ds
 13355 00001621 89DE                    		mov	si, bx
 13356 00001623 BF[4E01]                		mov	di, disksector
 13357 00001626 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13358 00001629 1F                      		pop	ds
 13359 0000162A 5F                      		pop	di
 13360 0000162B 5E                      		pop	si		; do the i/o from
 13361 0000162C EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13362                                  ; ---------------------------------------------------------------------------
 13363                                  
 13364                                  ; we can't fit the request into the entire block. perform the operation on
 13365                                  ; the first block.
 13366                                  ;
 13367                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13368                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13369                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13370                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13371                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13372                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13373                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13374                                  ; doblock will handle the first block of requested sectors within the
 13375                                  ; boundary of this safe value.
 13376                                  
 13377                                  doblock:
 13378                                  
 13379                                  ; try to get the # of sectors/track from bds via rom drive number.
 13380                                  ; for any mini disks installed, here we have to pray that they have the
 13381                                  ; same # of sector/track as the main dos partition disk drive.
 13382                                  				
 13383 0000162E 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13384                                  					; get head #, drive #
 13385 00001631 51                      		push	cx
 13386 00001632 06                      		push	es
 13387 00001633 57                      		push	di		; ah - # of sectors before dma boundary
 13388                                  					; al - requested # of sectors for i/o.
 13389 00001634 E83BFE                  		call	find_bds
 13390 00001637 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13391                                  		; 12/12/2022
 13392 0000163B 26F6452301              		test	byte [es:di+23h], 1
 13393                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13394 00001640 5F                      		pop	di
 13395 00001641 07                      		pop	es
 13396 00001642 88E0                    		mov	al, ah		; set al=ah for	floppies
 13397 00001644 7404                    		jz	short doblockflop ; they are track by track operation
 13398 00001646 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13399 00001648 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13400                                  doblockflop:				
 13401 0000164A 59                      		pop	cx
 13402                                  doblockcontinue:			
 13403 0000164B 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13404 0000164D 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13405 0000164F 50                      		push	ax
 13406 00001650 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13407 00001652 EB03                    		jmp	short doblockdoint
 13408                                  ; ---------------------------------------------------------------------------
 13409                                  
 13410                                  doblocklast:				
 13411 00001654 88C4                    		mov	ah, al
 13412 00001656 50                      		push	ax
 13413                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13414 00001657 E82CFE                  		call	doint
 13415 0000165A 727E                    		jb	short bad13	; something happened, bye!
 13416 0000165C 58                      		pop	ax
 13417 0000165D 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13418                                  					; decrement by the successful operation
 13419 00001660 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13420 00001662 00E7                    		add	bh, ah		; advance dma addres
 13421 00001664 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13422 00001666 38C4                    		cmp	ah, al		; check	the previous value
 13423 00001668 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13424                                  					; then we are done already.
 13425 0000166A 28E0                    		sub	al, ah		; otherwise,
 13426                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13427 0000166C E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13428 0000166F EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13429                                  ; ---------------------------------------------------------------------------
 13430                                  
 13431                                  bufferx:				
 13432 00001671 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13433                                  					; set up head number
 13434                                  buffer:					
 13435 00001674 53                      		push	bx
 13436 00001675 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13437 00001678 80FC03                  		cmp	ah, 3		; romwrite
 13438 0000167B 7525                    		jnz	short doread	;
 13439                                  					
 13440                                  ; copy the offending sector into local buffer
 13441                                  
 13442 0000167D 06                      		push	es
 13443 0000167E 1E                      		push	ds
 13444 0000167F 56                      		push	si
 13445 00001680 57                      		push	di
 13446 00001681 1E                      		push	ds		; exchange segment registers
 13447 00001682 06                      		push	es
 13448 00001683 1F                      		pop	ds
 13449 00001684 07                      		pop	es
 13450 00001685 BF[4E01]                		mov	di, disksector	; where to move
 13451 00001688 57                      		push	di		; save it
 13452 00001689 89DE                    		mov	si, bx		; source
 13453 0000168B E854FD                  		call	move_sector	; move sector into local buffer
 13454 0000168E 5B                      		pop	bx		; new transfer address
 13455                                  					; (es:bx = Bios_Data:diskbuffer)
 13456 0000168F 5F                      		pop	di		; restore caller's di & si
 13457 00001690 5E                      		pop	si
 13458 00001691 1F                      		pop	ds		; restore Bios_Data
 13459                                  
 13460                                  ; see if we are wrapping around a track or head
 13461                                  
 13462 00001692 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13463                                  					; get drive number
 13464 00001694 8A5608                  		mov	dl, [bp+8]
 13465 00001697 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13466                                  					;
 13467                                  					; ah is	function
 13468                                  					; al is	1 for single sector transfer
 13469                                  					; es:bx	is local transfer addres
 13470                                  					; cx is	track/sector number
 13471                                  					; dx is	head/drive number
 13472                                  					; si,di	unchanged
 13473 0000169A E8E9FD                  		call	doint
 13474 0000169D 07                      		pop	es		; restore caller's dma segment
 13475 0000169E 723A                    		jb	short bad13	; go clean up
 13476 000016A0 EB22                    		jmp	short dotail
 13477                                  ; ---------------------------------------------------------------------------
 13478                                  
 13479                                  ; reading a sector. do int first, then move things around
 13480                                  
 13481                                  doread:					
 13482 000016A2 06                      		push	es
 13483 000016A3 53                      		push	bx
 13484 000016A4 1E                      		push	ds		; es = Bios_Code
 13485 000016A5 07                      		pop	es
 13486 000016A6 BB[4E01]                		mov	bx, disksector
 13487 000016A9 B001                    		mov	al, 1
 13488 000016AB 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13489                                  					; get drive number
 13490 000016AE E84CFD                  		call	check_wrap	;
 13491                                  					; ah = function
 13492                                  					; al = 1 for single sector
 13493                                  					; es:bx	points to local	buffer
 13494                                  					; cx, dx are track/sector, head/drive
 13495 000016B1 E8D2FD                  		call	doint
 13496 000016B4 5B                      		pop	bx
 13497 000016B5 07                      		pop	es
 13498 000016B6 7222                    		jb	short bad13
 13499 000016B8 56                      		push	si
 13500 000016B9 57                      		push	di
 13501 000016BA 89DF                    		mov	di, bx
 13502 000016BC BE[4E01]                		mov	si, disksector
 13503 000016BF E820FD                  		call	move_sector
 13504 000016C2 5F                      		pop	di
 13505 000016C3 5E                      		pop	si
 13506                                  
 13507                                  ; note the fact that we've done 1 more sector
 13508                                  
 13509                                  dotail:					
 13510 000016C4 5B                      		pop	bx		; retrieve new dma area
 13511 000016C5 80C702                  		add	bh, 2		; advance over sector
 13512 000016C8 41                      		inc	cx
 13513 000016C9 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13514 000016CC F8                      		clc
 13515 000016CD FEC8                    		dec	al
 13516 000016CF 7409                    		jz	short bad13	; no more i/o
 13517                                  
 13518                                  ; see if we wrap around a track or head boundary with starting sector
 13519                                  ; we already have the correct head number to pass to check_wrap
 13520                                  
 13521 000016D1 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13522 000016D4 E826FD                  		call	check_wrap
 13523 000016D7 E8ACFD                  		call	doint
 13524                                  
 13525                                  ; we are done. ax has the final code; we throw away what we got before
 13526                                  
 13527                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13528                                  ;	   or we've finished. If carry is set now, our only
 13529                                  ;	   hope for salvation is that it was a read operation
 13530                                  ;	   and the error code is ECC error. In that case, we'll
 13531                                  ;	   just pop the registers and go do the old ECC thing.
 13532                                  ;	   When the DMA error that got us here in the first
 13533                                  ;	   place occurs, it'll handle it.
 13534                                  
 13535                                  bad13:					
 13536 000016DA 89EC                    		mov	sp, bp
 13537 000016DC 5D                      		pop	bp
 13538 000016DD 5B                      		pop	bx
 13539 000016DE 5B                      		pop	bx
 13540 000016DF 59                      		pop	cx
 13541 000016E0 5A                      		pop	dx
 13542 000016E1 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13543 000016E3 E935FE                  		jmp	ret_from_i13	; non-error exit
 13544                                  ; ---------------------------------------------------------------------------
 13545                                  
 13546                                  xgoterr13_xxxx:				
 13547 000016E6 E958FE                  		jmp	goterr13_xxxx
 13548                                  
 13549                                  ; ---------------------------------------------------------------------------
 13550                                  		; 10/12/2022
 13551                                  		;db 	0
 13552                                  ; ---------------------------------------------------------------------------
 13553                                  
 13554                                  ;Bios_Code ends
 13555                                  
 13556                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13557                                  
 13558                                  ;-----------------------------------------------------------------------------
 13559                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13560                                  ;-----------------------------------------------------------------------------
 13561                                  ; 17/03/2019 - Retro DOS v4.0
 13562                                  
 13563                                  		; 19/10/2022
 13564                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13565 000016E9 8A26[7500]              		mov	ah, [drvmax]
 13566 000016ED BF[8706]                		mov	di, dskdrvs
 13567 000016F0 1E                      		push	ds		; pass result in es:di
 13568 000016F1 07                      		pop	es
 13569 000016F2 E9C3EE                  		jmp	SetPtrSav
 13570                                  
 13571                                  ; =============== S U B	R O U T	I N E =======================================
 13572                                  
 13573                                  ;---------------------------------------------------------------------------
 13574                                  ; install_bds installs a bds at location es:di into the current linked list of
 13575                                  ; bds maintained by this device driver. it places the bds at the end of the
 13576                                  ; list. Trashes (at least) ax, bx, di, si
 13577                                  ;---------------------------------------------------------------------------
 13578                                  
 13579                                  install_bds:		
 13580 000016F5 1E                      		push	ds		; save Bios_Data segment
 13581 000016F6 BE[1901]                		mov	si, start_bds	; beginning of chain
 13582                                  
 13583                                  		; ds:si now points to link to first bds
 13584                                  		; assume bds list is non-empty
 13585                                  loop_next_bds:				
 13586 000016F9 C534                    		lds	si, [si]	; [si+BDS.link]
 13587                                  					; fetch	next bds
 13588 000016FB 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13589 000016FF 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13590                                  					; drive	with new one?
 13591 00001702 7518                    		jnz	short next_bds
 13592 00001704 B310                    		mov	bl, 10h		; fi_am_mult
 13593 00001706 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13594                                  					; set both of them to i_am_mult	if so
 13595 0000170A 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13596 0000170D 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13597                                  					; we don't own it
 13598 00001712 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13599                                  					; determine if changeline available
 13600 00001715 80E302                  		and	bl, 2		; fchangeline
 13601 00001718 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13602                                  next_bds:				
 13603 0000171C 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13604                                  					; are we at end	of list?
 13605 0000171F 75D8                    		jnz	short loop_next_bds
 13606 00001721 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13607                                  					; install bds
 13608 00001724 893C                    		mov	[si], di
 13609 00001726 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13610                                  					; set next pointer to null
 13611 0000172B 1F                      		pop	ds
 13612                                  
 13613                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13614                                  ;
 13615                                  ; **** If the new drive has a higher EOT value, we must alter the
 13616                                  ;      'eot' variable appropriately.
 13617                                  ;
 13618                                  ;		; 01/06/2019
 13619                                  ;		;mov	al,[es:di+52]
 13620                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13621                                  ;
 13622                                  ;		cmp	al,[eot]
 13623                                  ;		jbe	short _eot_ok
 13624                                  ;		mov	[eot],al
 13625                                  
 13626 0000172C C3                      		retn
 13627                                  
 13628                                  ; ---------------------------------------------------------------------------
 13629                                  
 13630                                  ; 17/10/2022
 13631                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13632                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13633                                  ; 09/12/2022
 13634                                  DRVLET equ drvlet
 13635                                  SNGMSG equ sngmsg
 13636                                  
 13637                                  ; 16/10/2022
 13638                                  
 13639                                  ;---------------------------------------------------------------------------
 13640                                  ;  ask to swap the disk in drive a:
 13641                                  ;	es:di -> bds
 13642                                  ;	ds -> Bios_Data
 13643                                  ;---------------------------------------------------------------------------
 13644                                  
 13645                                  		; 19/10/2022
 13646 0000172D F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13647                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13648 00001732 7405                    		jz	short no_win386	; no, skip SetFocus
 13649                                  		
 13650                                  		; set focus to the correct VM
 13651                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13652                                  		; 17/10/2022
 13653 00001734 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13654                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13655                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13656                                  no_win386:				
 13657 00001739 51                      		push	cx
 13658 0000173A 52                      		push	dx
 13659 0000173B 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13660                                  					; get the drive	letter
 13661                                  
 13662                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13663                                  ;           then existing dsk is drive A & vice versa
 13664                                  
 13665 0000173F 88D6                    		mov	dh, dl
 13666 00001741 80F601                  		xor	dh, 1
 13667 00001744 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13668 00001746 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13669                                  					; broad	cast code for swap disk
 13670                                  					; Broadcast it
 13671 00001749 CD2F                    		int	2Fh	
 13672 0000174B 41                      		inc	cx		; cx == -1 ?
 13673 0000174C 741E                    		jz	short swpdsk9	; somebody has handled it
 13674                                  
 13675                                  ; using a different drive in a one drive system so request the user change disks
 13676                                  
 13677 0000174E 80C241                  		add	dl, 'A'
 13678                                  		; 17/10/2022
 13679 00001751 2E8816[8B17]            		mov	[cs:DRVLET], dl
 13680                                  		; 16/10/2022
 13681                                  		;;mov	byte [cs:drvlet], dl
 13682                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13683                                  					; 0070h:3D54h =	2C7h:17E4h
 13684 00001756 BE[6F17]                		mov	si, SNGMSG
 13685                                  		;mov	si, 17C8h	; sngmsg
 13686                                  					; 0070h:3D38h =	2C7h:17C8h
 13687 00001759 53                      		push	bx
 13688 0000175A 2E                      		cs
 13689 0000175B AC                      		lodsb			; get the next character of the message
 13690                                  		;lods	byte ptr cs:[si]
 13691                                  wrmsg_loop:				
 13692 0000175C CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13693                                  					; AL = character to display
 13694 0000175E 2E                      		cs
 13695 0000175F AC                      		lodsb
 13696                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13697                                  					; get the next character of the	message
 13698 00001760 08C0                    		or	al, al
 13699 00001762 75F8                    		jnz	short wrmsg_loop
 13700 00001764 E8A0EA                  		call	con_flush	; flush out keyboard queue
 13701                                  					; call rom-bios
 13702 00001767 30E4                    		xor	ah, ah
 13703 00001769 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13704                                  					; Return: AH = scan code, AL = character
 13705 0000176B 5B                      		pop	bx
 13706                                  swpdsk9:				
 13707 0000176C 5A                      		pop	dx
 13708 0000176D 59                      		pop	cx
 13709 0000176E C3                      		retn
 13710                                  
 13711                                  ; ---------------------------------------------------------------------------
 13712                                  
 13713                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13714                                  
 13715                                  ;--------------------------------------------------------
 13716                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13717                                  ;--------------------------------------------------------
 13718                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13719                                  ;--------------------------------------------------------
 13720                                  ; 17/03/2019 - Retro DOS v4.0
 13721                                  
 13722                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13723 0000176F 0D0A                    sngmsg:		db 0Dh,0Ah
 13724 00001771 496E73657274206469-     		db 'Insert diskette for drive '
 13724 0000177A 736B6574746520666F-
 13724 00001783 7220647269766520   
 13725                                  
 13726                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13727 0000178B 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13727 00001794 65737320616E79206B-
 13727 0000179D 6579207768656E2072-
 13727 000017A6 656164790D0A       
 13728 000017AC 0A00                    		db 0Ah,0
 13729                                  
 13730                                  ; =============== S U B	R O U T	I N E =======================================
 13731                                  
 13732                                  ;---------------------------------------------------------------------------
 13733                                  ; input : es:di points to current bds for drive.
 13734                                  ; return : zero set if no open files
 13735                                  ;	   zero reset if open files
 13736                                  ;---------------------------------------------------------------------------
 13737                                  
 13738                                  chkopcnt:		
 13739 000017AE 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13740 000017B3 C3                      		retn
 13741                                  
 13742                                  ; =============== S U B	R O U T	I N E =======================================
 13743                                  
 13744                                  ;---------------------------------------------------------------------------
 13745                                  ; at media check time, we need to really get down and check what the change is.
 13746                                  ; this is guaranteed to be expensive.
 13747                                  ;
 13748                                  ;	es:di -> bds, ds -> Bios_Data
 13749                                  ;---------------------------------------------------------------------------
 13750                                  
 13751                                  mediacheck:	
 13752 000017B4 E885F0                  		call	checksingle	; make sure correct disk is in place
 13753 000017B7 31F6                    		xor	si, si
 13754 000017B9 E85501                  		call	haschange
 13755 000017BC 742F                    		jz	short mediaret
 13756 000017BE E84401                  		call	checkromchange
 13757 000017C1 752B                    		jnz	short mediadovolid
 13758 000017C3 50                      		push	ax
 13759 000017C4 52                      		push	dx
 13760 000017C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13761                                  					; set logical drive number
 13762 000017C9 B416                    		mov	ah, 16h
 13763 000017CB CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13764                                  					; DL = drive to	check
 13765                                  					; Return: AH = disk change status
 13766 000017CD 5A                      		pop	dx
 13767 000017CE 58                      		pop	ax
 13768 000017CF 721D                    		jb	short mediadovolid
 13769 000017D1 BE0100                  		mov	si, 1		; signal no change
 13770                                  
 13771                                  ; there are some drives with changeline that "lose" the changeline indication
 13772                                  ; if a different drive is accessed after the current one. in order to avoid
 13773                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13774                                  ; is not active and we are accessing a different drive from the last one.
 13775                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13776                                  ; status.
 13777                                  		; 19/10/2022
 13778 000017D4 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13779 000017D8 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13780                                  					; (If the last drive accessed is not current drive
 13781                                  					; media	change status may be incorrect.	So,
 13782                                  					; "I don't now" will be returned even if it is indicated
 13783                                  					; as media is not changed.)
 13784 000017DC 740F                    		jz	short mediaret	; (same	drive,
 13785                                  					; media	changeline indication is reliable)
 13786                                  
 13787                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 13788                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 13789                                  ; "not changed" here since the 2 second test said no change.)
 13790                                  
 13791 000017DE 50                      		push	ax
 13792 000017DF 51                      		push	cx
 13793 000017E0 52                      		push	dx
 13794 000017E1 E86FED                  		call	Check_Time_Of_Access
 13795 000017E4 5A                      		pop	dx
 13796 000017E5 59                      		pop	cx
 13797 000017E6 58                      		pop	ax
 13798 000017E7 09F6                    		or	si, si
 13799 000017E9 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 13800                                  					; (volume id will be checked)
 13801 000017EB 31F6                    		xor	si, si		; return "i don't know"
 13802                                  mediaret:				
 13803 000017ED C3                      		retn
 13804                                  ; ---------------------------------------------------------------------------
 13805                                  
 13806                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 13807                                  ; because this may be different since we only set medbyt when doing a read
 13808                                  ; or write.
 13809                                  
 13810                                  mediadovolid:				
 13811 000017EE E807EE                  		call	GetBp		; build	a new bpb in current bds
 13812 000017F1 72FA                    		jb	short mediaret
 13813 000017F3 E82D00                  		call	check_vid
 13814 000017F6 73F5                    		jnb	short mediaret
 13815 000017F8 E9D6F3                  		jmp	maperror	; fix up al for	return to dos
 13816                                  ; ---------------------------------------------------------------------------
 13817                                  
 13818                                  ; simple, quick check of latched change. if no indication, then return
 13819                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 13820                                  ; return and set al = 15 (for invalid media change) which will be returned to
 13821                                  ; dos.
 13822                                  ;
 13823                                  ; for dos 3.3, this will work only for the drive that has changeline.
 13824                                  
 13825                                  ;	call with es:di -> bds, ds -> Bios_Data
 13826                                  ;	***** warning:  this routine will return one level up on the stack
 13827                                  ;			if an error occurs!
 13828                                  
 13829                                  checklatchio:	
 13830                                  
 13831                                  ; if returning fake bpb then assume the disk has not changed
 13832                                  			
 13833 000017FB E8B0FF                  		call	chkopcnt
 13834 000017FE 741B                    		jz	short checkret	; done if zero
 13835                                  
 13836                                  ; check for past rom indications. if no rom change indicated, then return ok.
 13837                                  
 13838 00001800 E80201                  		call	checkromchange
 13839 00001803 7416                    		jz	short checkret
 13840                                  
 13841                                  ; we now see that a change line has been seen in the past. let's do the
 13842                                  ; expensive verification.
 13843                                  
 13844 00001805 E8F0ED                  		call	GetBp		; build	bpb in current bds
 13845 00001808 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 13846 0000180A E81600                  		call	check_vid
 13847 0000180D 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 13848 0000180F 09F6                    		or	si, si		; is changed for sure?
 13849 00001811 7908                    		jns	short checkret
 13850 00001813 E87D00                  		call	returnvid
 13851                                  checklatchret:				
 13852 00001816 E8B8F3                  		call	maperror	; fix up al for	return to dos
 13853                                  ret_no_error_map:			
 13854 00001819 F9                      		stc
 13855 0000181A 5E                      		pop	si		; pop off return address
 13856                                  checkret:				
 13857 0000181B C3                      		retn
 13858                                  ; ---------------------------------------------------------------------------
 13859                                  
 13860                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 13861                                  ; only if there was a disk error. return that error code in ax.
 13862                                  ;
 13863                                  ;	called with es:di -> bds, ds -> Bios_Data
 13864                                  
 13865                                  checkfatvid:				
 13866 0000181C E8CD01                  		call	fat_check	; check	the fat	and the	vid
 13867 0000181F 09F6                    		or	si, si
 13868 00001821 7827                    		js	short changed_drv ;
 13869                                  
 13870                                  ; the fat was the same. fall into check_vid and check volume id.
 13871                                  
 13872                                  		; fall into check_vid
 13873                                  
 13874                                  ; =============== S U B	R O U T	I N E =======================================
 13875                                  
 13876                                  ; now with the extended boot record, the logic should be enhanced.
 13877                                  ;
 13878                                  ; if it is the extended boot record, then we check the volume serial
 13879                                  ; number instead of volume id. if it is different, then set si to -1.
 13880                                  ;
 13881                                  ; if it is same, then si= 1 (no change).
 13882                                  ;
 13883                                  ; if it is not the extended boot record, then just follows the old
 13884                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 13885                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 13886                                  ; should have already covered by extended boot structure checking.
 13887                                  ; so, we will return "i don't know" by setting si to 0.
 13888                                  ;
 13889                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 13890                                  ; (this will be gauranteed by a successful getbp call right before this
 13891                                  ; routine.)
 13892                                  ;
 13893                                  ;	called with es:di -> bds, ds -> bds
 13894                                  
 13895                                  		; 19/10/2022
 13896                                  check_vid:
 13897                                  
 13898                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 13899                                  ; boot signature. if it is set then go to do the extended
 13900                                  ; id check otherwise continue with code below
 13901                                  
 13902 00001823 803E[7401]29            		cmp	byte [disksector+26h], 29h
 13903                                  					; [disksector+EXT_BOOT.SIG],
 13904                                  					; EXT_BOOT_SIGNATURE
 13905 00001828 7427                    		jz	short do_ext_check_id
 13906 0000182A E8E400                  		call	haschange
 13907 0000182D 74EC                    		jz	short checkret
 13908 0000182F 31F6                    		xor	si, si
 13909 00001831 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 13910                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 13911 00001836 7411                    		jz	short checkfatret ; don't read vol id
 13912                                  					; if not fat system
 13913 00001838 E8F600                  		call	read_volume_id
 13914 0000183B 720C                    		jb	short checkfatret
 13915 0000183D E89B01                  		call	check_volume_id
 13916 00001840 BEFFFF                  		mov	si, 0FFFFh	; -1
 13917                                  					; definitely changed
 13918 00001843 7505                    		jnz	short changed_drv
 13919                                  
 13920 00001845 46                      		inc	si		; not changed
 13921                                  vid_no_changed:				
 13922 00001846 E8C200                  		call	resetchanged
 13923                                  		; 12/12/2022
 13924                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 13925                                  		;clc
 13926                                  checkfatret:				
 13927 00001849 C3                      		retn
 13928                                  ; ---------------------------------------------------------------------------
 13929                                  
 13930                                  		; 12/12/2022
 13931                                  changed_drv:
 13932 0000184A F8                      		clc			; cas -- return	no error
 13933 0000184B C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 13934                                  					; ensure that we ask rom for media
 13935 00001850 C3                      		retn			; check	next time round
 13936                                  ; ---------------------------------------------------------------------------
 13937                                  
 13938                                  ; extended id check
 13939                                  
 13940                                  ; 16/10/2022
 13941                                  
 13942                                  ; the code to check extended id is basically a check to see if the
 13943                                  ; volume serial number is still the same. the volume serial number
 13944                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 13945                                  ; ds:di points to the bds of the drive under consideration.
 13946                                  ; the bds has fields containing the high and low words 
 13947                                  ; of the volume serial number of the media in the drive.
 13948                                  ; compare these fields to the fields mentioned above. if these fields
 13949                                  ; do not match the media has changed and so we should jump to the code
 13950                                  ; starting at ext_changed else return "i don't know" status
 13951                                  ; in the register used for the changeline status and continue executing
 13952                                  ; the code given below. for temporary storage use the register which
 13953                                  ; has been saved and restored around this block.
 13954                                  ;
 13955                                  ; bds fields in inc\msbds.inc
 13956                                  
 13957                                  		; 19/10/2022
 13958                                  do_ext_check_id:			
 13959 00001851 50                      		push	ax
 13960                                  		;mov	ax, word ptr ds:disksector+27h
 13961                                  					; [DiskSector+EXT_BOOT.SERIAL]
 13962 00001852 A1[7501]                		mov	ax, [disksector+27h]
 13963 00001855 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 13964 00001859 750E                    		jnz	short ext_changed
 13965 0000185B A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 13966 0000185E 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 13967 00001862 7505                    		jnz	short ext_changed
 13968 00001864 31F6                    		xor	si, si		; 0
 13969                                  					; don't know
 13970 00001866 58                      		pop	ax
 13971 00001867 EBDD                    		jmp	short vid_no_changed
 13972                                  					; reset the flag
 13973                                  ; ---------------------------------------------------------------------------
 13974                                  
 13975                                  ext_changed:				
 13976 00001869 58                      		pop	ax
 13977 0000186A BEFFFF                  		mov	si, 0FFFFh	; -1
 13978                                  					; disk changed!
 13979                                  		; 12/12/2022
 13980                                  		; ('changed_drv' clears cf)
 13981                                  		;clc
 13982 0000186D EBDB                    		jmp	short changed_drv
 13983                                  
 13984                                  ; ---------------------------------------------------------------------------
 13985                                  
 13986                                  ; at i/o time, we detected the error. now we need to determine whether the
 13987                                  ; media was truly changed or not. we return normally if media change unknown.
 13988                                  ; and we pop off the call and jmp to harderr if we see an error.
 13989                                  ;
 13990                                  ; es:di -> bds
 13991                                  
 13992                                  checkio:				
 13993 0000186F 80FC06                  		cmp	ah, 6
 13994 00001872 75D5                    		jnz	short checkfatret
 13995 00001874 E837FF                  		call	chkopcnt
 13996 00001877 74D0                    		jz	short checkfatret
 13997 00001879 E87CED                  		call	GetBp
 13998 0000187C 7212                    		jb	short no_error_map
 13999 0000187E E89BFF                  		call	checkfatvid
 14000 00001881 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14001 00001883 09F6                    		or	si, si		; is changed for sure?
 14002 00001885 7802                    		js	short checkioerr ; yes changed
 14003 00001887 45                      		inc	bp		; allow	a retry
 14004 00001888 C3                      		retn
 14005                                  ; ---------------------------------------------------------------------------
 14006                                  
 14007                                  checkioerr:				
 14008 00001889 E80700                  		call	returnvid
 14009                                  
 14010                                  checkioret:				
 14011 0000188C F9                      		stc			; make sure carry gets passed through
 14012 0000188D E9F1F2                  		jmp	harderr
 14013                                  ; ---------------------------------------------------------------------------
 14014                                  
 14015                                  no_error_map:				
 14016 00001890 E9F1F2                  		jmp	harderr2
 14017                                  
 14018                                  ; =============== S U B	R O U T	I N E =======================================
 14019                                  
 14020                                  ; return vid sets up the vid for a return to dos.
 14021                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14022                                  ;  **** trashes si! ****
 14023                                  
 14024                                  returnvid:		
 14025 00001893 BE1600                  		mov	si, 22		; extra
 14026                                  					; offset into pointer to return	value
 14027 00001896 E80700                  		call	vid_into_packet
 14028 00001899 B406                    		mov	ah, 6
 14029 0000189B F9                      		stc
 14030 0000189C C3                      		retn
 14031                                  
 14032                                  ; ---------------------------------------------------------------------------
 14033                                  
 14034                                  ; moves the pointer to the volid for the drive into the original request packet
 14035                                  ; no attempt is made to preserve registers.
 14036                                  ;
 14037                                  ; assumes es:di -> bds
 14038                                  ; **trashes si**
 14039                                  
 14040                                  media_set_vid:				
 14041 0000189D BE0F00                  		mov	si, 15		; trans+1
 14042                                  					; return the value here	in packet
 14043                                  
 14044                                  		; fall into vid_into_packet
 14045                                  
 14046                                  ; =============== S U B	R O U T	I N E =======================================
 14047                                  
 14048                                  ; return pointer to vid in bds at es:di in packet[si]
 14049                                  
 14050                                  		; 19/10/2022
 14051                                  vid_into_packet:
 14052 000018A0 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14053 000018A1 C51E[1200]              		lds	bx, [ptrsav]
 14054 000018A5 83C74B                  		add	di, 75		; BDS.volid
 14055 000018A8 8938                    		mov	[bx+si], di
 14056 000018AA 83EF4B                  		sub	di, 75		; BDS.volid
 14057 000018AD 8C4002                  		mov	[bx+si+2], es
 14058 000018B0 1F                      		pop	ds
 14059                                  dofloppy:	; 18/12/2022
 14060 000018B1 C3                      		retn
 14061                                  
 14062                                  ; ---------------------------------------------------------------------------
 14063                                  
 14064                                  ;----------------------------------------------------------------------------
 14065                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14066                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14067                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14068                                  ;   of getbp. for 3.5" media, we just return.
 14069                                  ;
 14070                                  ;   inputs:	es:di point to correct bds for this drive
 14071                                  ;		ah has media byte
 14072                                  ;
 14073                                  ;   outputs:	carry clear
 14074                                  ;		    no registers modified
 14075                                  ;		carry set
 14076                                  ;		    al = sectors/fat
 14077                                  ;		    bh = number of root directory entries
 14078                                  ;		    bl = sectors per track
 14079                                  ;		    cx = number of sectors
 14080                                  ;		    dh = sectors per allocation unit
 14081                                  ;		    dl = number of heads
 14082                                  ;
 14083                                  ;----------------------------------------------------------------------------
 14084                                  
 14085                                  hidensity:
 14086                                  
 14087                                  ; check for correct drive
 14088                                  		
 14089                                  		; 12/12/2022
 14090 000018B2 26F6452302              		test	byte [es:di+23h], 2		
 14091                                  		;test	word [es:di+23h], 2 ; is it special?	
 14092                                  					; [es:di+BDS.flags], fchangeline
 14093 000018B7 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14094                                  
 14095                                  ; we have a media byte that is pretty complex. examine drive information
 14096                                  ; table to see what kind it is.
 14097                                  
 14098 000018B9 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14099 000018BE 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14100                                  					; yes, use fatid...
 14101                                  ; 96 tpi drive?
 14102 000018C0 80FCF9                  		cmp	ah, 0F9h
 14103 000018C3 75EC                    		jnz	short dofloppy
 14104                                  
 14105                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14106                                  ;------ a 720K diskette
 14107                                  
 14108 000018C5 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14109                                  					; ffOther
 14110 000018CA 7418                    		jz	short Is720K
 14111 000018CC 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14112                                  					; ff288
 14113 000018D1 7411                    		jz	short Is720K
 14114 000018D3 B007                    		mov	al, 7		; seven	sectors	/ fat
 14115 000018D5 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14116                                  					; 224 root dir entries
 14117                                  					; & 0Fh sector max
 14118 000018D8 B96009                  		mov	cx, 2400	; 80*15*2
 14119                                  					; 80 tracks, 15 sectors/track,
 14120                                  					; 2 sides
 14121 000018DB BA0201                  		mov	dx, 258		; 1*256+2
 14122                                  					; sectors/allocation unit
 14123                                  					; & head max
 14124 000018DE 83C402                  		add	sp, 2		; pop off return address
 14125 000018E1 E986ED                  		jmp	Has1		; return to tail of getbp
 14126                                  ; ---------------------------------------------------------------------------
 14127                                  
 14128                                  Is720K:					
 14129 000018E4 83C402                  		add	sp, 2		; pop off return address
 14130 000018E7 E947ED                  		jmp	Has720K		; return to 720K code
 14131                                  ; ---------------------------------------------------------------------------
 14132                                  
 14133                                  		; 18/12/2022
 14134                                  ;dofloppy:				
 14135                                  		;retn
 14136                                  
 14137                                  ; =============== S U B	R O U T	I N E =======================================
 14138                                  
 14139                                  ; 16/10/2022
 14140                                  
 14141                                  ;---------------------------------------------------------------------------
 14142                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14143                                  ;		   essentially used to indicate changeline, or format.
 14144                                  ;
 14145                                  ;   inputs:	dl contains physical drive number
 14146                                  ;		bx contains bits to set in the flag field in the bdss
 14147                                  ;   outputs:	none
 14148                                  ;   registers modified: flags
 14149                                  ;
 14150                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14151                                  ;
 14152                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14153                                  ;---------------------------------------------------------------------------
 14154                                  
 14155                                  set_changed_dl:	
 14156 000018EA 06                      		push	es
 14157 000018EB 57                      		push	di
 14158                                  		;les	di, ds:start_bds
 14159                                  		; 19/10/2022
 14160 000018EC C43E[1901]              		les	di, [start_bds]
 14161                                  
 14162                                  ; note: we assume that the list is non-empty
 14163                                  
 14164                                  scan_bds:				
 14165 000018F0 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14166 000018F4 7504                    		jnz	short get_next_bds
 14167                                  
 14168                                  ; someone may complain, but this *always* must be done when a disk change is
 14169                                  ; noted. there are *no* other compromising circumstances.
 14170                                  
 14171 000018F6 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14172                                  					; signal change	on other drive
 14173                                  get_next_bds:				
 14174 000018FA 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14175                                  					; go to	next bds
 14176 000018FD 83FFFF                  		cmp	di, 0FFFFh
 14177 00001900 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14178 00001902 5F                      		pop	di
 14179 00001903 07                      		pop	es
 14180 00001904 C3                      		retn
 14181                                  
 14182                                  ; =============== S U B	R O U T	I N E =======================================
 14183                                  
 14184                                  ;---------------------------------------------------------------------------
 14185                                  ; checkromchange - see if external program has diddled rom change line.
 14186                                  ;
 14187                                  ;   inputs:	es:di points to current bds.
 14188                                  ;   outputs:	zero set - no change
 14189                                  ;		zero reset - change
 14190                                  ;   registers modified: none
 14191                                  ;---------------------------------------------------------------------------
 14192                                  
 14193                                  checkromchange:	
 14194                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14195                                  		; 10/12/2022
 14196 00001905 26F6452340              		test	byte [es:di+23h], 40h
 14197                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14198                                  					; fchanged
 14199 0000190A C3                      		retn
 14200                                  
 14201                                  ; =============== S U B	R O U T	I N E =======================================
 14202                                  
 14203                                  ;---------------------------------------------------------------------------
 14204                                  ; resetchanged - restore value of change line
 14205                                  ;
 14206                                  ;   inputs:	es:di points to current bds
 14207                                  ;   outputs:	none
 14208                                  ;   registers modified: none
 14209                                  ;---------------------------------------------------------------------------
 14210                                  
 14211                                  resetchanged:	
 14212                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14213                                  		; 10/12/2022
 14214 0000190B 26806523BF              		and	byte [es:di+23h], 0BFh
 14215                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14216                                  					; ~fchanged
 14217 00001910 C3                      		retn
 14218                                  
 14219                                  ; =============== S U B	R O U T	I N E =======================================
 14220                                  
 14221                                  ;---------------------------------------------------------------------------
 14222                                  ; haschange - see if drive can supply change line
 14223                                  ;
 14224                                  ;   inputs:	es:di points to current bds
 14225                                  ;   outputs:	zero set - no change line available
 14226                                  ;		zero reset - change line available
 14227                                  ;   registers modified: none
 14228                                  ;---------------------------------------------------------------------------
 14229                                  
 14230                                  haschange:
 14231                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14232                                  		; 10/12/2022
 14233 00001911 26F6452302              		test	byte [es:di+23h], 2		
 14234                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14235                                  					; fchangeline
 14236 00001916 C3                      		retn
 14237                                  
 14238                                  ; ---------------------------------------------------------------------------
 14239                                  
 14240                                  ; 16/10/2022
 14241                                  
 14242                                  ;-------------------------------------------------------------------------
 14243                                  ; set_volume_id      -	main routine, calls other routines.
 14244                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14245                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14246                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14247                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14248                                  ;-------------------------------------------------------------------------
 14249                                  
 14250                                  ; set_volume_id
 14251                                  ;   if drive has changeline support, read in and set the volume_id
 14252                                  ; and the last fat_id byte. if no change line support then do nothing.
 14253                                  ;
 14254                                  ;   on entry:
 14255                                  ;	es:di points to the bds for this disk.
 14256                                  ;	ah contains media byte
 14257                                  ;
 14258                                  ;   on exit:
 14259                                  ;	carry clear:
 14260                                  ;	   successful call
 14261                                  ;	carry set
 14262                                  ;	   error and ax has error code
 14263                                  
 14264                                  set_volume_id:				
 14265 00001917 52                      		push	dx		; save registers
 14266 00001918 50                      		push	ax
 14267 00001919 E8F5FF                  		call	haschange	; does drive have changeline support?
 14268 0000191C 740B                    		jz	short setvret	; no, get out
 14269 0000191E E81000                  		call	read_volume_id
 14270 00001921 7209                    		jb	short seterr
 14271 00001923 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14272 00001926 E8E2FF                  		call	resetchanged	; restore value	of change line
 14273                                  setvret:				
 14274                                  		; 10/12/2022
 14275                                  		; cf = 0
 14276                                  		;clc			; no error, clear carry flag
 14277 00001929 58                      		pop	ax		; restore registers
 14278 0000192A 5A                      		pop	dx
 14279 0000192B C3                      		retn
 14280                                  ; ---------------------------------------------------------------------------
 14281                                  
 14282                                  seterr:					
 14283 0000192C 5A                      		pop	dx		; pop stack but don't overwrite ax
 14284 0000192D 5A                      		pop	dx		; restore dx
 14285 0000192E C3                      		retn
 14286                                  ; ---------------------------------------------------------------------------
 14287 0000192F 0000                    root_sec:	dw 0			; root sector #
 14288                                  
 14289                                  ; 16/10/2022
 14290                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14291                                  ; 09/12/2022
 14292                                  ROOTSEC equ root_sec
 14293                                  
 14294                                  ; =============== S U B	R O U T	I N E =======================================
 14295                                  
 14296                                  ; 16/10/2022
 14297                                  
 14298                                  ; read_volume_id read the volume id and tells if it has been changed.
 14299                                  ;
 14300                                  ;   on entry:
 14301                                  ;	es:di points to current bds for drive.
 14302                                  ;
 14303                                  ;   on exit:
 14304                                  ;	carry clear
 14305                                  ;	    si = 1  no change
 14306                                  ;	    si = 0  ?
 14307                                  ;	    si = -1 change
 14308                                  ;
 14309                                  ;	carry set:
 14310                                  ;	    error and ax has error code.
 14311                                  
 14312                                  read_volume_id:
 14313 00001931 52                      		push	dx		; preserve registers
 14314 00001932 51                      		push	cx
 14315 00001933 53                      		push	bx
 14316 00001934 50                      		push	ax
 14317 00001935 06                      		push	es		; stack the bds last
 14318 00001936 57                      		push	di
 14319 00001937 1E                      		push	ds		; point es to Bios_Data
 14320 00001938 07                      		pop	es
 14321 00001939 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14322 0000193C BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14323 0000193F B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14324 00001942 F3A4                    		rep movsb
 14325 00001944 5F                      		pop	di
 14326 00001945 07                      		pop	es
 14327 00001946 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14328                                  					; # of fats
 14329 0000194A 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14330                                  					; sectors / fat
 14331 0000194E F6E1                    		mul	cl		; size taken by	fats
 14332 00001950 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14333                                  					; add on reserved sectors
 14334                                  					;
 14335                                  					; ax is	now sector # (0	based)
 14336                                  		; 17/10/2022
 14337 00001954 2EA3[2F19]              		mov	[cs:ROOTSEC], ax
 14338                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14339                                  					; 0070h:3EFFh =	2C7h:198Fh
 14340 00001958 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14341                                  					; # root dir entries
 14342 0000195C B104                    		mov	cl, 4		; 16 entries/sector
 14343 0000195E D3E8                    		shr	ax, cl		; divide by 16
 14344 00001960 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14345                                  next_sec:				
 14346 00001962 51                      		push	cx		; save outer loop counter
 14347 00001963 2EA1[2F19]              		mov	ax, [cs:ROOTSEC]
 14348                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14349                                  					; get sector #
 14350 00001967 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14351                                  					; sectors / track
 14352 0000196B 31D2                    		xor	dx, dx
 14353 0000196D F7F1                    		div	cx
 14354                                  
 14355                                  ; set up registers for call to read_sector
 14356                                  
 14357 0000196F 42                      		inc	dx		; dx= sectors into track
 14358                                  					; ax= track count from 0
 14359 00001970 88D1                    		mov	cl, dl		; sector to read
 14360 00001972 31D2                    		xor	dx, dx
 14361 00001974 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14362                                  					; # heads on this disc
 14363 00001978 88D6                    		mov	dh, dl		; head number
 14364 0000197A 88C5                    		mov	ch, al		; track	#
 14365 0000197C E8FBED                  		call	read_sector	; get first sector of the root directory,
 14366                                  					; ds:bx	-> directory sector
 14367 0000197F 7243                    		jb	short readviderr
 14368 00001981 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14369 00001984 B008                    		mov	al, 8		; volume label bit
 14370                                  fvid_loop:				
 14371 00001986 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14372 00001989 7436                    		jz	short no_vid	; yes, no vol id
 14373 0000198B 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14374 0000198E 7405                    		jz	short ent_loop	; yes, skip
 14375 00001990 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14376 00001993 7511                    		jnz	short found_vid	; jmp yes
 14377                                  ent_loop:				
 14378 00001995 83C320                  		add	bx, 32		; add length of	directory entry
 14379 00001998 E2EC                    		loop	fvid_loop
 14380 0000199A 59                      		pop	cx		; outer loop
 14381 0000199B 2EFF06[2F19]            		inc	word [cs:ROOTSEC]
 14382                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14383                                  					; next sector
 14384 000019A0 E2C0                    		loop	next_sec	; continue
 14385                                  notfound:				
 14386 000019A2 31F6                    		xor	si, si
 14387 000019A4 EB16                    		jmp	short fvid_ret
 14388                                  ; ---------------------------------------------------------------------------
 14389                                  
 14390                                  found_vid:				
 14391 000019A6 59                      		pop	cx		; clean stack of outer loop counter
 14392 000019A7 89DE                    		mov	si, bx		; point	to volume_id
 14393 000019A9 06                      		push	es		; preserve current bds
 14394 000019AA 57                      		push	di
 14395 000019AB 1E                      		push	ds
 14396 000019AC 07                      		pop	es		; point es to Bios_Data
 14397 000019AD BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14398 000019B0 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14399                                  					; length of string minus nul
 14400 000019B3 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14401 000019B5 30C0                    		xor	al, al
 14402 000019B7 AA                      		stosb			; null terminate
 14403 000019B8 31F6                    		xor	si, si
 14404 000019BA 5F                      		pop	di		; restore current bds
 14405 000019BB 07                      		pop	es
 14406                                  fvid_ret:				
 14407 000019BC 58                      		pop	ax
 14408                                  		; 10/12/2022
 14409                                  		; cf = 0
 14410                                  		;clc
 14411                                  rvidret:				
 14412 000019BD 5B                      		pop	bx		; restore registers
 14413 000019BE 59                      		pop	cx
 14414 000019BF 5A                      		pop	dx
 14415 000019C0 C3                      		retn
 14416                                  ; ---------------------------------------------------------------------------
 14417                                  
 14418                                  no_vid:					
 14419 000019C1 59                      		pop	cx		; clean stack of outer loop counter
 14420 000019C2 EBDE                    		jmp	short notfound	; not found
 14421                                  ; ---------------------------------------------------------------------------
 14422                                  
 14423                                  readviderr:				
 14424 000019C4 5E                      		pop	si		; trash the outer loop counter
 14425 000019C5 5E                      		pop	si		; caller's ax, return error code instead 
 14426 000019C6 EBF5                    		jmp	short rvidret
 14427                                  
 14428                                  ; =============== S U B	R O U T	I N E =======================================
 14429                                  
 14430                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14431                                  ;
 14432                                  ; inputs:	es:di has current bds
 14433                                  ; outputs:	bds for drive has volume id from tmp
 14434                                  
 14435                                  transfer_volume_id:	
 14436 000019C8 57                      		push	di		; copy the volume id from tmp to special drive
 14437 000019C9 56                      		push	si
 14438 000019CA 51                      		push	cx
 14439 000019CB BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14440                                  		;add	di, BDS.volid
 14441 000019CE 83C74B                  		add	di, 75		; BDS.volid
 14442                                  		;mov	cx, VOLID_SIZ
 14443 000019D1 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14444 000019D4 FC                      		cld
 14445 000019D5 F3A4                    		rep movsb
 14446 000019D7 59                      		pop	cx
 14447 000019D8 5E                      		pop	si
 14448 000019D9 5F                      		pop	di
 14449 000019DA C3                      		retn
 14450                                  
 14451                                  ; =============== S U B	R O U T	I N E =======================================
 14452                                  
 14453                                  ;  check_volume_id - compare volume id in tmp area with
 14454                                  ;		     one expected for drive
 14455                                  ;
 14456                                  ;   inputs:	es:di has current bds for drive
 14457                                  ;   outputs:	zero true means it matched
 14458                                  
 14459                                  check_volume_id:	
 14460 000019DB 57                      		push	di
 14461 000019DC 51                      		push	cx
 14462 000019DD BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14463                                  		;add	di, BDS.volid
 14464 000019E0 83C74B                  		add	di, 75		; BDS.volid
 14465                                  		;mov	cx, VOLID_SIZ
 14466 000019E3 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14467 000019E6 FC                      		cld
 14468 000019E7 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14469 000019E9 59                      		pop	cx
 14470 000019EA 5F                      		pop	di
 14471 000019EB C3                      		retn
 14472                                  
 14473                                  ; =============== S U B	R O U T	I N E =======================================
 14474                                  
 14475                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14476                                  ;	      - uses the fat id obtained from the boot sector.
 14477                                  ;
 14478                                  ;   inputs:	medbyt is expected fat id
 14479                                  ;		es:di points to current bds
 14480                                  ;
 14481                                  ;   output:	si = -1 if fat id different,
 14482                                  ;		si = 0 otherwise
 14483                                  ;
 14484                                  ;   no other registers changed.
 14485                                  
 14486                                  fat_check:		
 14487 000019EC 50                      		push	ax
 14488 000019ED 31F6                    		xor	si, si		; say fat id's are same.
 14489 000019EF A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14490 000019F2 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14491                                  					; compare it with the bds medbyte
 14492 000019F6 7401                    		jz	short okret1	; carry	clear
 14493 000019F8 4E                      		dec	si
 14494                                  okret1:					
 14495 000019F9 58                      		pop	ax
 14496 000019FA C3                      		retn
 14497                                  
 14498                                  ; ---------------------------------------------------------------------------
 14499                                  
 14500                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14501                                  		;times 7 db 0
 14502                                  
 14503                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14504                                  
 14505                                  		; 09/12/2022
 14506                                  		;times 4 db 0	; 17/10/2022
 14507                                  		;db 4 dup(0)	; times 4 db 0
 14508                                  
 14509                                  ; ---------------------------------------------------------------------------
 14510                                  
 14511                                  		; 09/12/2022
 14512                                  		;db 0
 14513                                  
 14514                                  number2div	equ ($-BCode_start)
 14515                                  number2mod	equ (number2div % 16)
 14516                                  
 14517                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 14518 000019FB 00<rep 5h>              		times (16-number2mod) db 0
 14519                                  %endif
 14520                                  
 14521                                  ;align 16
 14522                                  
 14523                                  ; 09/12/2022
 14524                                  BCODE_END	equ $ - BCode_start
 14525                                  ; 29/09/2023
 14526                                  BCODEEND:
 14527                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14528                                  ; 13/12/2022
 14529                                  SYSINITOFFSET	equ BCODE_END
 14530                                  ; 29/09/2023
 14531                                  ;SYSINITOFFSET	equ $-$$
 14532                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14533                                  
 14534                                  ; 28/09/2023
 14535                                  S2SIZE equ $-$$
 14536                                  
 14537                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14538                                  
 14539                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14540                                  ; 01/05/2019 - Retro DOS v4.0 
 14541                                  ; ============================================================================
 14542                                  ; end of BIOSCODE
 14543                                  
 14544                                  ; ----------------------------------------------------------------------------
 14545                                  ; %include sysinit5.s	; 09/12/2022
 14546                                  ; ----------------------------------------------------------------------------
 14547                                  
 14548                                  ;=============================================================================
 14549                                  ; (IO.SYS) SYSINIT SEGMENT 
 14550                                  ;=============================================================================
 14551                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14552                                  
 14553                                  section .SYSINIT vstart=0
 14554                                  
 14555                                  ; ****************************************************************************
 14556                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14557                                  ; ----------------------------------------------------------------------------
 14558                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14559                                  ; ----------------------------------------------------------------------------
 14560                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14561                                  ; ----------------------------------------------------------------------------
 14562                                  ; Assembler: NASM version 2.15
 14563                                  ; ----------------------------------------------------------------------------
 14564                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14565                                  ; ----------------------------------------------------------------------------
 14566                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14567                                  ; ----------------------------------------------------------------------------
 14568                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14569                                  ; source code by Microsoft, 1991 
 14570                                  ; ----------------------------------------------------------------------------
 14571                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14572                                  ; by Microsoft, 12/10/1983
 14573                                  ; ****************************************************************************
 14574                                  ; main file: 'retrodos4.s'
 14575                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14576                                  
 14577                                  ; 21/10/2022
 14578                                  ; ----------------------------------------------------------------------------
 14579                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14580                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14581                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14582                                  ; ----------------------------------------------------------------------------
 14583                                  ; Binary file splitter & joiner: FFSJ v3.3
 14584                                  
 14585                                  ;--------------------------------------------------------------
 14586                                  ; SYSINIT.TXT (27/01/1983)
 14587                                  ;--------------------------------------------------------------
 14588                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14589                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14590                                  ;performed any  initialization  it  needs  to  do.   Control is
 14591                                  ;transfered with a long jump to the external  variable  SYSINIT
 14592                                  ;
 14593                                  ;
 14594                                  ;   The OEM  has  the  following  variables declared external:
 14595                                  ;
 14596                                  ;   CURRENT_DOS_LOCATION    WORD
 14597                                  ;
 14598                                  ;This word  contains  the  segment  number of the DOS before it
 14599                                  ;is relocated.  The OEM bios must set this value.
 14600                                  ;
 14601                                  ;   FINAL_DOS_LOCATION      WORD
 14602                                  ;
 14603                                  ;This word contains the segment number of the DOS after SYSINIT
 14604                                  ;moves it.  The OEM bios must set this value.
 14605                                  ;
 14606                                  ;   DEVICE_LIST             DWORD
 14607                                  ;
 14608                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14609                                  ;character and block device drivers.  The  OEM  must  set  this
 14610                                  ;value.
 14611                                  ;
 14612                                  ;   MEMORY_SIZE             WORD
 14613                                  ;
 14614                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14615                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14616                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14617                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14618                                  ;and read it back until it gets a mismatch.
 14619                                  ;
 14620                                  ;   DEFAULT_DRIVE           BYTE
 14621                                  ;
 14622                                  ;This is  the initial default drive when the system first comes
 14623                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14624                                  ;it then drive a is assumed.
 14625                                  ;
 14626                                  ;   BUFFERS                 BYTE
 14627                                  ;
 14628                                  ;This is  the  default  number of buffers for the system.  This
 14629                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14630                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14631                                  ;
 14632                                  ;   FILES                   BYTE
 14633                                  ;
 14634                                  ;This is  the  default  number  of  files for the system.  This
 14635                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14636                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14637                                  ;
 14638                                  ;   SYSINIT                 FAR
 14639                                  ;
 14640                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14641                                  ;this label at the end of its INIT code.
 14642                                  ;
 14643                                  ;   The OEM  has  the  following  variables declared public:
 14644                                  ;
 14645                                  ;   RE_INIT                 FAR
 14646                                  ;
 14647                                  ;This is an entry point which allows the BIOS to do some INIT
 14648                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14649                                  ;PRESERVED.  On entry DS points to the first available memory
 14650                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14651                                  ;prefix which represents  the  "program"  currently  running.
 14652                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14653                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14654                                  ;that  no  memory  is  allocated to it, it is running in free
 14655                                  ;memory.
 14656                                  ;NOTES:
 14657                                  ;     At the time this routine is called SYSINIT occupies the
 14658                                  ;highest 10K of memory ("highest" is determined by the  value
 14659                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14660                                  ;     Since this is called AFTER DOS is initialized, you can
 14661                                  ;make system calls.  This also implies that the code for this
 14662                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14663                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14664                                  ;     If you don't want  anything done just set this to point
 14665                                  ;at a FAR RET instruction.
 14666                                  
 14667                                  ; ----------------------------------------------------------------------
 14668                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14669                                  ; ----------------------------------------------------------------------
 14670                                  
 14671                                  ;include version.inc
 14672                                  ; ----------------------------------------------------------------------
 14673                                  
 14674                                  ;FALSE   EQU     0
 14675                                  ;TRUE    EQU     0FFFFh
 14676                                  
 14677                                  ;IBMVER	    EQU     TRUE
 14678                                  ;IBMCOPYRIGHT EQU   FALSE
 14679                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14680                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14681                                  ;MSVER      EQU     FALSE
 14682                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14683                                  ;KANJI      EQU     FALSE
 14684                                  
 14685                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14686                                  ; ----------------------------------------------------------------------
 14687                                  ;MAJOR_VERSION  EQU	6
 14688                                  ;;MINOR_VERSION	EQU	0	;6.00
 14689                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14690                                  
 14691                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14692                                  ; ----------------------------------------------------------------------
 14693                                  MAJOR_VERSION   EQU	5
 14694                                  MINOR_VERSION   EQU	0
 14695                                  
 14696                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14697                                  
 14698                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14699                                  				; currently 0.
 14700                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14701                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14702                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14703                                  
 14704                                  ;      if1
 14705                                  ;      %OUT  ... for DOS Version 5.00 ...
 14706                                  ;      endif
 14707                                  
 14708                                         ;******************************
 14709                                         ;Each assembler program should:
 14710                                         ;  mov ah,030h                   ;DOS Get Version function
 14711                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14712                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14713                                         ;  jne error_handler             ; EXACT version match.
 14714                                         ;******************************
 14715                                  
 14716                                  ; ----------------------------------------------------------------------
 14717                                  ; device definitions
 14718                                  
 14719                                  ;Attribute bit masks
 14720                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14721                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14722                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14723                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14724                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14725                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14726                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14727                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14728                                  
 14729                                  ; The device table list has the form:
 14730                                  struc	SYSDEV
 14731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14736                                  .size:
 14737                                  endstruc
 14738                                  
 14739                                  ;Static Reguest Header
 14740                                  struc	SRHEAD
 14741 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14742 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14743 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14744 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14745 00000005 ????????????????                	resb 8		;Reserved for queue links
 14746                                  .size:
 14747                                  endstruc
 14748                                  
 14749                                  ;Status word masks
 14750                                  STERR   EQU     8000H           ;Bit 15 - Error
 14751                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14752                                  STDON   EQU     0100H           ;Bit 8 - Done
 14753                                  STECODE EQU     00FFH           ;Error code
 14754                                  WRECODE EQU     0
 14755                                  
 14756                                  ;Function codes
 14757                                  DEVINIT EQU     0               ;Initialization
 14758                                  DINITHL EQU     26              ;Size of init header
 14759                                  DEVMDCH EQU     1               ;Media check
 14760                                  DMEDHL  EQU     15              ;Size of media check header
 14761                                  DEVBPB  EQU     2               ;Get BPB
 14762                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14763                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14764                                  DEVRD   EQU     4               ;Read
 14765                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14766                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14767                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14768                                  DEVIST  EQU     6               ;Input status
 14769                                  DSTATHL EQU     13              ;Size of status header
 14770                                  DEVIFL  EQU     7               ;Input flush
 14771                                  DFLSHL  EQU     15              ;Size of flush header
 14772                                  DEVWRT  EQU     8               ;Write
 14773                                  DEVWRTV EQU     9               ;Write with verify
 14774                                  DEVOST  EQU     10              ;Output status
 14775                                  DEVOFL  EQU     11              ;Output flush
 14776                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14777                                  
 14778                                  ; ----------------------------------------------------------------------
 14779                                  struc	SYS_FCB
 14780 00000000 ??                      .fcb_drive:	resb 1
 14781 00000001 ????????????????        .fcb_name:	resb 8
 14782 00000009 ??????                  .fcb_ext:	resb 3
 14783 0000000C ????                    .fcb_EXTENT:	resw 1
 14784 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 14785 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 14786                                                          ; word
 14787 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 14788 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 14789 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 14790 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 14791                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 14792                                                          ; If file, bit 6=0 if dirty
 14793                                                          ; If I/O device, bit 6=0 if EOF (input)
 14794                                                          ;               Bit 5=1 if Raw mode
 14795                                                          ;               Bit 0=1 if console input device
 14796                                                          ;               Bit 1=1 if console output device
 14797                                                          ;               Bit 2=1 if null device
 14798                                                          ;               Bit 3=1 if clock device
 14799 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 14800 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 14801 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 14802 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 14803 00000020 ??                      .fcb_NR:	resb 1	; Next record
 14804 00000021 ????????                .fcb_RR:	resb 4	; Random record
 14805                                  .size:
 14806                                  endstruc
 14807                                  
 14808                                  ; ----------------------------------------------------------------------
 14809                                  ; Field definition for I/O buffer information
 14810                                  
 14811                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 14812                                  
 14813                                  struc buffinfo
 14814 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 14815 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 14816 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 14817                                  			; SFT table index (bit 7 = 1)
 14818                                  			; = FFh if buffer free
 14819 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 14820                                  			;	= 0 if Local device buffer
 14821                                  			; Bit 6 = 1 if buffer dirty
 14822                                  			; Bit 5 = Reserved
 14823                                  			; Bit 4 = Search bit (bit 7 = 1)
 14824                                  			; Bit 3 = 1 if buffer is DATA
 14825                                  			; Bit 2 = 1 if buffer is DIR
 14826                                  			; Bit 1 = 1 if buffer is FAT
 14827                                  			; Bit 0 = Reserved
 14828 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 14829                                  ; The next two items are often refed as a word (bit 7 = 0)
 14830 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 14831 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 14832 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 14833 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 14834 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 14835                                  .size:
 14836                                  endstruc
 14837                                  
 14838                                  %define buf_offset	dword [buf_sector]
 14839                                  			;For bit 7 = 1, this is the byte
 14840                                  			;offset of the start of the buffer in
 14841                                  			;the file pointed to by buf_ID.  Thus
 14842                                  			;the buffer starts at location
 14843                                  			;buf_offset in the file and contains
 14844                                  			;buf_fill bytes.
 14845                                  
 14846                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 14847                                  
 14848                                  
 14849                                  buf_Free	equ	0FFh		; buf_id of free buffer
 14850                                  
 14851                                  ;Flag byte masks
 14852                                  buf_isnet	EQU	10000000B
 14853                                  buf_dirty	EQU	01000000B
 14854                                  ;***
 14855                                  buf_visit	EQU	00100000B
 14856                                  ;***
 14857                                  buf_snbuf	EQU	00010000B
 14858                                  
 14859                                  buf_isDATA	EQU	00001000B
 14860                                  buf_isDIR	EQU	00000100B
 14861                                  buf_isFAT	EQU	00000010B
 14862                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 14863                                  
 14864                                  buf_NetID	EQU	bufinsiz
 14865                                  
 14866                                  ; ----------------------------------------------------------------------
 14867                                  
 14868                                  ; ----------------------------------------------------------------------
 14869                                  ;**	DPB - Drive Parameter Block
 14870                                  
 14871                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 14872                                  
 14873                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 14874                                  ;	possibly inaccurate deductions from code study... - jgl
 14875                                  ;
 14876                                  ;	The DPB is DOS's main structure for describing block devices.
 14877                                  ;	It contains info about the "Drive" intermingled with info about
 14878                                  ;	the FAT file system which is presumably on the drive.  I don't know
 14879                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 14880                                  ;
 14881                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 14882                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 14883                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 14884                                  
 14885                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 14886                                  
 14887                                  ; 12/05/2019 - Retro DOS v4.0
 14888                                  
 14889                                  struc	DPB
 14890 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 14891 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 14892 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 14893 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 14894 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 14895 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 14896 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 14897 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 14898 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 14899 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 14900                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 14901 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 14902 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 14903 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 14904 00000017 ??                      .MEDIA:		resb 1		; Media byte
 14905 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 14906                                  				; check the first time this DPB is used
 14907 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 14908 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 14909 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 14910                                  .size:
 14911                                  endstruc
 14912                                  
 14913                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 14914                                  
 14915                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 14916                                  
 14917                                  ; ----------------------------------------------------------------------
 14918                                  ; 26/03/2018
 14919                                  
 14920                                  ; IOCTL SUB-FUNCTIONS
 14921                                  IOCTL_GET_DEVICE_INFO	EQU	0
 14922                                  IOCTL_SET_DEVICE_INFO	EQU	1
 14923                                  IOCTL_READ_HANDLE	EQU	2
 14924                                  IOCTL_WRITE_HANDLE	EQU	3
 14925                                  IOCTL_READ_DRIVE	EQU	4
 14926                                  IOCTL_WRITE_DRIVE	EQU	5
 14927                                  IOCTL_GET_INPUT_STATUS	EQU	6
 14928                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 14929                                  IOCTL_CHANGEABLE?	EQU	8
 14930                                  IOCTL_SHARING_RETRY	EQU	11
 14931                                  GENERIC_IOCTL_HANDLE	EQU	12
 14932                                  GENERIC_IOCTL		EQU	13
 14933                                  
 14934                                  ; GENERIC IOCTL SUB-FUNCTIONS
 14935                                  RAWIO			EQU	8
 14936                                  
 14937                                  ; RAWIO SUB-FUNCTIONS
 14938                                  GET_DEVICE_PARAMETERS	EQU	60H
 14939                                  SET_DEVICE_PARAMETERS	EQU	40H
 14940                                  READ_TRACK		EQU	61H
 14941                                  WRITE_TRACK		EQU	41H
 14942                                  VERIFY_TRACK		EQU	62H
 14943                                  FORMAT_TRACK		EQU	42H
 14944                                  
 14945                                  ; DEVICETYPE VALUES
 14946                                  MAX_SECTORS_IN_TRACK	EQU	63
 14947                                  DEV_5INCH		EQU	0
 14948                                  DEV_5INCH96TPI		EQU	1
 14949                                  DEV_3INCH720KB		EQU	2
 14950                                  DEV_8INCHSS		EQU	3
 14951                                  DEV_8INCHDS		EQU	4
 14952                                  DEV_HARDDISK		EQU	5
 14953                                  DEV_OTHER		EQU	7
 14954                                  ;DEV_3INCH1440KB	EQU	7
 14955                                  DEV_3INCH2880KB		EQU	9
 14956                                  ; Retro DOS v2.0 - 26/03/2018
 14957                                  ;;DEV_TAPE		EQU	6
 14958                                  ;;DEV_ERIMO		EQU	8
 14959                                  ;DEV_3INCH2880KB	EQU	9
 14960                                  DEV_3INCH1440KB		EQU	10
 14961                                  
 14962                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 14963                                  					; CURRENTLY SUPPORT.
 14964                                  MAX_DEV_TYPE		EQU	10
 14965                                  
 14966                                  struc A_SECTORTABLE
 14967 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 14968 00000002 ????                    .ST_SECTORSIZE:		resw	1
 14969                                  .size:
 14970                                  endstruc
 14971                                  
 14972                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 14973                                  
 14974                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 14975                                  ;
 14976                                  ;	The BPB contains information about the disk structure.  It dates
 14977                                  ;	back to the earliest FAT systems and so FAT information is
 14978                                  ;	intermingled with physical driver information.
 14979                                  ;
 14980                                  ;	A boot sector contains a BPB for its device; for other disks
 14981                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 14982                                  ;	information in the DPB.
 14983                                  ;
 14984                                  ;	The BDS structure contains a BPB within it.
 14985                                  
 14986                                  struc A_BPB
 14987 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 14988 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 14989 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 14990 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 14991 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 14992 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 14993 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 14994 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 14995 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 14996 0000000F ????                    .BPB_HEADS:		resw	1
 14997 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 14998 00000013 ????                    			resw	1
 14999 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15000 00000017 ????                    			resw	1
 15001 00000019 ????????????            			resb	6	; NOTE:  many times these
 15002                                  ;					; 	 6 bytes are omitted
 15003                                  ;					;	 when BPB manipulations
 15004                                  ;					;	 are performed!
 15005                                  .size:
 15006                                  endstruc
 15007                                  
 15008                                  struc A_DEVICEPARAMETERS
 15009 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15010 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15011 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15012 00000004 ????                    .DP_CYLINDERS:		resw	1
 15013 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15014 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15015 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15016 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15017                                  endstruc
 15018                                  
 15019                                  ; ----------------------------------------------------------------------
 15020                                  ; structure, equates for devmark for mem command.
 15021                                  
 15022                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15023                                  
 15024                                  struc devmark
 15025 00000000 ??                       .id:	    resb 1
 15026 00000001 ????                     .seg:	    resw 1
 15027 00000003 ????                     .size:	    resw 1
 15028 00000005 ??????                   .dum:	    resb 3
 15029 00000008 ????????????????         .filename: resb 8
 15030                                  endstruc
 15031                                  
 15032                                  devmark_stk	equ	'S'
 15033                                  devmark_device	equ	'D'
 15034                                  devmark_ifs	equ	'I'
 15035                                  devmark_buf	equ	'B'
 15036                                  devmark_cds	equ	'L' ; lastdrive
 15037                                  devmark_files	equ	'F'
 15038                                  devmark_fcbs	equ	'X'
 15039                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15040                                  devmark_ems_stub equ	'E'
 15041                                  
 15042                                  setbrkdone	equ	00000001b
 15043                                  for_devmark	equ	00000010b
 15044                                  not_for_devmark equ	11111101b
 15045                                  
 15046                                  ; ----------------------------------------------------------------------
 15047                                  ; Memory arena structure
 15048                                  
 15049                                  ; 24/03/2019 - Retro DOS v4.0 
 15050                                  ; (MSDOS 6.0, ARENA.INC)
 15051                                  
 15052                                  ;** Arena Header
 15053                                  
 15054                                  struc ARENA
 15055 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15056 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15057 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15058 00000005 ??????                  .RESERVED	resb 3		; reserved
 15059 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15060                                  endstruc
 15061                                  
 15062                                  ; 12/04/2019
 15063                                  
 15064                                  arena_owner_system	EQU 0	; free block indication
 15065                                  
 15066                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15067                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15068                                  
 15069                                  ; ----------------------------------------------------------------------
 15070                                  ; Process data block (otherwise known as program header)
 15071                                  
 15072                                  ; 23/03/2019 - Retro DOS v4.0
 15073                                  
 15074                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15075                                  
 15076                                  FILPERPROC	EQU     20
 15077                                  
 15078                                  struc PDB	; Process_data_block
 15079 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15080 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15081 00000004 ??                                      resb 1
 15082 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15083 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15084 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15085 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15086 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15087 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15088 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15089 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15090 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15091 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15092 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15093 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15094 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15095 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15096 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15097 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15098 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15099 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15100 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15101 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15102 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15103 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15104                                  ;.size:
 15105                                  endstruc
 15106                                  
 15107                                  ; ----------------------------------------------------------------------
 15108                                  ; <system call definitions>
 15109                                  
 15110                                  ; 23/03/2019 - Retro DOS v4.0
 15111                                  
 15112                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15113                                  
 15114                                  ABORT                           EQU 0   ;  0      0
 15115                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15116                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15117                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15118                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15119                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15120                                  RAW_CON_IO                      EQU 6   ;  6      6
 15121                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15122                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15123                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15124                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15125                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15126                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15127                                  DISK_RESET                      EQU 13  ; 13      D
 15128                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15129                                  FCB_OPEN                        EQU 15  ; 15      F
 15130                                  FCB_CLOSE                       EQU 16  ; 16     10
 15131                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15132                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15133                                  FCB_DELETE                      EQU 19  ; 19     13
 15134                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15135                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15136                                  FCB_CREATE                      EQU 22  ; 22     16
 15137                                  FCB_RENAME                      EQU 23  ; 23     17
 15138                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15139                                  SET_DMA                         EQU 26  ; 26     1A
 15140                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15141                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15142                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15143                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15144                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15145                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15146                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15147                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15148                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15149                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15150                                  GET_DATE                        EQU 42  ; 42     2A
 15151                                  SET_DATE                        EQU 43  ; 43     2B
 15152                                  GET_TIME                        EQU 44  ; 44     2C
 15153                                  SET_TIME                        EQU 45  ; 45     2D
 15154                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15155                                  ; Extended functionality group
 15156                                  GET_DMA                         EQU 47  ; 47     2F
 15157                                  GET_VERSION                     EQU 48  ; 48     30
 15158                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15159                                  GET_DPB                         EQU 50  ; 50     32
 15160                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15161                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15162                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15163                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15164                                  CHAR_OPER                       EQU 55  ; 55     37
 15165                                  INTERNATIONAL                   EQU 56  ; 56     38
 15166                                  ;   Directory Group
 15167                                  MKDIR                           EQU 57  ; 57     39
 15168                                  RMDIR                           EQU 58  ; 58     3A
 15169                                  CHDIR                           EQU 59  ; 59     3B
 15170                                  ;   File Group
 15171                                  CREAT                           EQU 60  ; 60     3C
 15172                                  OPEN                            EQU 61  ; 61     3D
 15173                                  CLOSE                           EQU 62  ; 62     3E
 15174                                  READ                            EQU 63  ; 63     3F
 15175                                  WRITE                           EQU 64  ; 64     40
 15176                                  UNLINK                          EQU 65  ; 65     41
 15177                                  LSEEK                           EQU 66  ; 66     42
 15178                                  CHMOD                           EQU 67  ; 67     43
 15179                                  IOCTL                           EQU 68  ; 68     44
 15180                                  XDUP                            EQU 69  ; 69     45
 15181                                  XDUP2                           EQU 70  ; 70     46
 15182                                  CURRENT_DIR                     EQU 71  ; 71     47
 15183                                  ;    Memory Group
 15184                                  ALLOC                           EQU 72  ; 72     48
 15185                                  DEALLOC                         EQU 73  ; 73     49
 15186                                  SETBLOCK                        EQU 74  ; 74     4A
 15187                                  ;    Process Group
 15188                                  EXEC                            EQU 75  ; 75     4B
 15189                                  EXIT                            EQU 76  ; 76     4C
 15190                                  WAITPROCESS			EQU 77  ; 77     4D
 15191                                  FIND_FIRST                      EQU 78  ; 78     4E
 15192                                  ;   Special Group
 15193                                  FIND_NEXT                       EQU 79  ; 79     4F
 15194                                  ; SPECIAL SYSTEM GROUP
 15195                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15196                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15197                                  GET_IN_VARS                     EQU 82  ; 82     52
 15198                                  SETDPB                          EQU 83  ; 83     53
 15199                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15200                                  DUP_PDB                         EQU 85  ; 85     55
 15201                                  RENAME                          EQU 86  ; 86     56
 15202                                  FILE_TIMES                      EQU 87  ; 87     57
 15203                                  ;
 15204                                  ALLOCOPER			EQU 88	; 88     58	
 15205                                  ; Network extention system calls
 15206                                  GetExtendedError		EQU 89	; 89	 59
 15207                                  CreateTempFile			EQU 90	; 90	 5A
 15208                                  CreateNewFile			EQU 91	; 91	 5B
 15209                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15210                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15211                                  					;	    CloseByName, CloseUser,
 15212                                  					;	    CloseUserProcess,
 15213                                  					;	    GetOpenFileList
 15214                                  UserOper			EQU 94	; 94	 5E Get and Set
 15215                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15216                                  xNameTrans			EQU 96	; 96	 60
 15217                                  PathParse			EQU 97	; 97	 61
 15218                                  GetCurrentPSP			EQU 98	; 98	 62
 15219                                  Hongeul 			EQU 99	; 99	 63
 15220                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15221                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15222                                  GetExtCntry			EQU 101 ; 101	 65
 15223                                  GetSetCdPg			EQU 102 ; 102	 66
 15224                                  ExtHandle			EQU 103 ; 103	 67
 15225                                  Commit				EQU 104 ; 104	 68
 15226                                  GetSetMediaID			EQU 105 ; 105	 69
 15227                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15228                                  ExtOpen 			EQU 108 ; 108	 6C
 15229                                  ;
 15230                                  ;ifdef ROMEXEC
 15231                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15232                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15233                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15234                                  ;endif
 15235                                  ;
 15236                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15237                                  OEM_C1				EQU 249 ; 249	 F9
 15238                                  OEM_C2				EQU 250 ; 250	 FA
 15239                                  OEM_C3				EQU 251 ; 251	 FB
 15240                                  OEM_C4				EQU 252 ; 252	 FC
 15241                                  OEM_C5				EQU 253 ; 253	 FD
 15242                                  OEM_C6				EQU 254 ; 254	 FE
 15243                                  OEM_C7				EQU 255 ; 255	 FF
 15244                                  
 15245                                  ; ----------------------------------------------------------------------
 15246                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15247                                  ; ----------------------------------------------------------------------
 15248                                  
 15249                                  ;;	IF	STACKSW
 15250                                  
 15251                                  ;;
 15252                                  ;; Internal Stack Parameters
 15253                                  ;EntrySize		equ	8
 15254                                  ;
 15255                                  ;MinCount		equ	8
 15256                                  ;DefaultCount		equ	9
 15257                                  ;MaxCount		equ	64
 15258                                  ;
 15259                                  ;MinSize 		equ	32
 15260                                  ;DefaultSize		equ	128
 15261                                  ;MaxSize 		equ	512
 15262                                  
 15263                                  ;;	ENDIF
 15264                                  
 15265                                  ; ----------------------------------------------------------------------
 15266                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15267                                  ; ----------------------------------------------------------------------
 15268                                  					  ;;Rev 3.30 Modification
 15269                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15270                                  									  
 15271                                  ;*******************************					  
 15272                                  ;System Service call ( Int 15h )					  
 15273                                  ;*******************************					  
 15274                                  ;Function AH = 0C0h, Return system configuration			  
 15275                                  ;For PC and PCJR on return:						  
 15276                                  ;	(AH)	= 80h							  
 15277                                  ;	(CY)	= 1							  
 15278                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15279                                  ;	(AH)	= 86h							  
 15280                                  ;	(CY)	= 1							  
 15281                                  ;For all others:							  
 15282                                  ;	(AH)	= 0							  
 15283                                  ;	(CY)	= 0							  
 15284                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15285                                  ; System descriptor :							  
 15286                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15287                                  ;				minimum length = 8			  
 15288                                  ;	DB	xx		model byte				  
 15289                                  ;				0FFh	= PC				  
 15290                                  ;				0FEh	= PC/XT, Portable		  
 15291                                  ;				0FDh	= PC/JR 			  
 15292                                  ;				0FCh	= PC/AT				  
 15293                                  ;				0F9h	= Convertable			  
 15294                                  ;				0F8h	= Model 80			  
 15295                                  ;				0E0 thru 0EFh = reserved		  
 15296                                  ;									  
 15297                                  ;	DB	xx		secondary model byte			  
 15298                                  ;				000h	= PC1				  
 15299                                  ;				000h	= PC/XT, Portable		  
 15300                                  ;				000h	= PC/JR 			  
 15301                                  ;				000h	= PC/AT 			  
 15302                                  ;				001h	= PC/AT Model 339		  
 15303                                  ;				003h	= PC/RT				  
 15304                                  ;				000h	= Convertable			  
 15305                                  ;									  
 15306                                  ;	DB	xx		bios revision level			  
 15307                                  ;				00 for first release, subsequent release  
 15308                                  ;				of code with same model byte and	  
 15309                                  ;				secondary model byte require revison level
 15310                                  ;				to increase by one.			  
 15311                                  ;									  
 15312                                  ;	DB	xx		feature information byte 1		  
 15313                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15314                                  ;					 = 0, DMA channel 3 not used	  
 15315                                  ;									  
 15316                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15317                                  ;					 = 0, 2nd Interrupt chip not present
 15318                                  ;									  
 15319                                  ;				00X00000 = 1, Real Time Clock present	  
 15320                                  ;					 = 0, Real Time Clock not present 
 15321                                  ;									  
 15322                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15323                                  ;						called in keyboard interrupt
 15324                                  ;						(Int 09h).		  
 15325                                  ;					 = 0, Keyboard escape sequence not
 15326                                  ;						called. 		  
 15327                                  ;				0000XXXX reserved			  
 15328                                  ;									  
 15329                                  ;	DB	xx		feature information byte 2 - reserved	  
 15330                                  ;									  
 15331                                  ;	DB	xx		feature information byte 2 - reserved	  
 15332                                  ;									  
 15333                                  ;	DB	xx		feature information byte 2 - reserved	  
 15334                                  ;									  
 15335                                  ;	DB	xx		feature information byte 2 - reserved	  
 15336                                  ;									  
 15337                                  
 15338                                  ; 22/03/2019									  
 15339                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15340 00000000 ????                    .bios_sd_leng:		resw 1				  
 15341 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15342                                  .bios_sd_scnd_modelbyte: 
 15343 00000003 ??                      			resb 1					  
 15344 00000004 ??                      			resb 1					  
 15345 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15346 00000006 ????????                			resb 4					  
 15347                                  endstruc					  
 15348                                  									  
 15349                                  ;FeatureByte1	bit map equates 					  
 15350                                  DMAchannel3		equ 10000000b					  
 15351                                  ScndIntController	equ 01000000b					  
 15352                                  RealTimeClock		equ 00100000b					  
 15353                                  KeyEscapeSeq		equ 00010000b					  
 15354                                  					;;End of Modification
 15355                                  
 15356                                  ; ----------------------------------------------------------------------
 15357                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15358                                  ; ----------------------------------------------------------------------
 15359                                  ; 22/03/2019 - Retro DOS v4.0
 15360                                  
 15361                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15362                                  
 15363                                  struc SysInitVars
 15364                                  ; MSDOS 3.3
 15365 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15366 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15367 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15368 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15369 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15370 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15371 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15372 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15373 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15374 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15375 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15376 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15377                                  ; MSDOS 6.0
 15378 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15379 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15380 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15381 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15382                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15383 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15384 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15385 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15386 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15387 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15388 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15389 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15390                                  .size:
 15391                                  endstruc
 15392                                  
 15393                                  ;This is added for more information exchage between DOS, BIOS.
 15394                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15395                                  
 15396                                  ; 22/03/2019
 15397                                  struc SysInitVars_Ext
 15398 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15399 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15400                                  endstruc
 15401                                  
 15402                                  ; 09/06/2018
 15403                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15404                                  SYSI_DPB    equ	0
 15405                                  SYSI_SFT    equ 4
 15406                                  SYSI_CLOCK  equ 8
 15407                                  SYSI_CON    equ 12
 15408                                  SYSI_MAXSEC equ 16
 15409                                  SYSI_BUF    equ 18 		
 15410                                  SYSI_CDS    equ 22
 15411                                  SYSI_FCB    equ 26
 15412                                  SYSI_KEEP   equ 30
 15413                                  SYSI_NUMIO  equ	32
 15414                                  SYSI_NCDS   equ	33
 15415                                  SYSI_DEV    equ 34
 15416                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15417                                  SYSI_ATTR	  equ 38
 15418                                  SYSI_STRAT	  equ 40
 15419                                  SYSI_INTER	  equ 42
 15420                                  SYSI_NAME	  equ 44
 15421                                  SYSI_SPLICE	  equ 52
 15422                                  SYSI_IBMDOS_SIZE  equ 53
 15423                                  SYSI_IFS_DOSCALL@ equ 55
 15424                                  SYSI_IFS	  equ 59
 15425                                  SYSI_BUFFERS	  equ 63
 15426                                  SYSI_BOOT_DRIVE   equ 67
 15427                                  SYSI_DWMOVE	  equ 68
 15428                                  SYSI_EXT_MEM	  equ 69
 15429                                  
 15430                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15431                                  
 15432                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15433                                  
 15434                                  struc BUFFINF 	; BUFFINFO
 15435 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15436 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15437 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15438 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15439                                  
 15440 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15441                                  				; are in HMA
 15442 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15443                                  				;  used to read/write on disks
 15444 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15445 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15446 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15447 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15448 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15449 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15450 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15451 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15452 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15453                                  .size:
 15454                                  endstruc
 15455                                  
 15456                                  ; ----------------------------------------------------------------------
 15457                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15458                                  ; ----------------------------------------------------------------------
 15459                                  ; 22/03/2019 - Retro DOS v4.0
 15460                                  
 15461                                  ;**	CDS - Current Directory Structure
 15462                                  ;
 15463                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15464                                  ; network identifiers for each logical name.  The ID field is used dually,
 15465                                  ; both as net ID and for a cluster number for local devices. In the case
 15466                                  ; of local devices, the cluster number will be -1 if there is a potential
 15467                                  ; of the disk being changed or if the path must be recracked.
 15468                                  ;
 15469                                  ;	Some pathnames have special preambles, such as
 15470                                  ;
 15471                                  ;		\\machine\sharename\...
 15472                                  ;	For these pathnames we can't allow ".." processing to back us
 15473                                  ;	up into the special front part of the name.  The CURDIR_END field
 15474                                  ;	holds the address of the seperator character which marks
 15475                                  ;	the split between the special preamble and the regular
 15476                                  ;	path list; ".." processing isn't allowed to back us up past
 15477                                  ;	(i.e., before) CURDIR_END
 15478                                  ;	For the root, it points at the leading /. For net
 15479                                  ;	assignments it points at the end (nul) of the initial assignment:
 15480                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15481                                  ;	  ^		 ^		     ^
 15482                                  
 15483                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15484                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15485                                  
 15486                                  struc 		curdir_list
 15487                                  ; MSDOS 3.3
 15488 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15489 00000043 ????                    .cdir_flags	resw	1		; various flags
 15490 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15491 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15492 0000004D ????                    .cdir_usr_word	resw	1
 15493 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15494                                  ; MSDOS 6.0
 15495 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15496 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15497 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15498                                  .size:
 15499                                  endstruc
 15500                                  
 15501                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15502                                  						; ASM87 which doesn't allow
 15503                                  						; Size directive as a macro
 15504                                  						; argument
 15505                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15506                                  
 15507                                  ;**	Flag values for CURDIR_FLAGS
 15508                                  
 15509                                  ;Flag word masks
 15510                                  curdir_isnet	EQU	1000000000000000B
 15511                                  curdir_isifs	EQU	1000000000000000B
 15512                                  curdir_inuse	EQU	0100000000000000B
 15513                                  curdir_splice	EQU	0010000000000000B
 15514                                  curdir_local	EQU	0001000000000000B
 15515                                  
 15516                                  ; ----------------------------------------------------------------------
 15517                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15518                                  ; ----------------------------------------------------------------------
 15519                                  ; 25/03/2019 - Retro DOS v4.0
 15520                                  
 15521                                  ; system file table
 15522                                  
 15523                                  ;**	System File Table SuperStructure
 15524                                  ;
 15525                                  ;	The system file table entries are allocated in contiguous groups.
 15526                                  ;	There may be more than one such groups; the SF "superstructure"
 15527                                  ;	tracks the groups.
 15528                                  
 15529                                  struc	SF
 15530 00000000 ????????                .SFLink:	resd	1
 15531 00000004 ????                    .SFCount:	resw	1		; number of entries
 15532 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15533                                  .size:
 15534                                  endstruc
 15535                                  
 15536                                  ;**	System file table entry
 15537                                  ;
 15538                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15539                                  
 15540                                  struc	SF_ENTRY
 15541 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15542                                  					;   if FCB then ref count
 15543 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15544 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15545 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15546                                  					; Bit 15 = 1 if remote file
 15547                                  					;	 = 0 if local file or device
 15548                                  					; Bit 14 = 1 if date/time is not to be
 15549                                  					;   set from clock at CLOSE.  Set by
 15550                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15551                                  					;   other reseters of the dirty bit
 15552                                  					;   (WRITE)
 15553                                  					; Bit 13 = Pipe bit (reserved)
 15554                                  					;
 15555                                  					; Bits 0-7 (old FCB_devid bits)
 15556                                  					; If remote file or local file, bit
 15557                                  					; 6=0 if dirty Device ID number, bits
 15558                                  					; 0-5 if local file.
 15559                                  					; bit 7=0 for local file, bit 7
 15560                                  					;      =1 for local I/O device
 15561                                  					; If local I/O device, bit 6=0 if EOF (input)
 15562                                  					;		Bit 5=1 if Raw mode
 15563                                  					;		Bit 0=1 if console input device
 15564                                  					;		Bit 1=1 if console output device
 15565                                  					;		Bit 2=1 if null device
 15566                                  					;		Bit 3=1 if clock device
 15567 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15568                                  					; to device header if local device,
 15569                                  					; points to net device header if
 15570                                  					; remote
 15571 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15572                                  ;.sf_lstclus:	resw	1 ; *	
 15573 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15574 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15575 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15576 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15577                                  ;
 15578                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15579                                  ; ID
 15580                                  ;
 15581 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15582 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15583 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15584                                  ;
 15585                                  ; End of 7 bytes of file-system specific info.
 15586                                  ;
 15587 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15588                                  					; directory entry.  This is used by
 15589                                  					; close to detect file deleted and
 15590                                  					; disk changed errors.
 15591                                  ; SHARING INFO
 15592 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15593 0000002D ????                    .sf_UID:	resw	1
 15594 0000002F ????                    .sf_PID:	resw	1
 15595 00000031 ????                    .sf_MFT:	resw	1
 15596 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15597 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15598                                  .size:
 15599                                  endstruc
 15600                                  
 15601                                  ; ----------------------------------------------------------------------
 15602                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15603                                  ; ----------------------------------------------------------------------
 15604                                  ; 11/06/2018 - Retro DOS v3.0
 15605                                  
 15606                                  ;Equates for COUNTRY INFORMATION.
 15607                                  SetCountryInfo		EQU	1	;country info
 15608                                  SetUcase		EQU	2	;uppercase table
 15609                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15610                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15611                                  SetFileList		EQU	5	;valid file character list
 15612                                  SetCollate		EQU	6	;collating sequence
 15613                                  SetDBCS 		EQU	7	;double byte character set
 15614                                  SetALL			EQU	-1	;all the entries
 15615                                  
 15616                                  ;DOS country and code page information table structure.
 15617                                  ;Internally, IBMDOS gives a pointer to this table.
 15618                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15619                                  ;this structure.
 15620                                  
 15621                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15622 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15623 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15624 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15625 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15626 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15627 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15628                                  
 15629 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15630 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15631                                  
 15632 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15633 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15634                                  
 15635 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15636 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15637                                  
 15638 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15639 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15640 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15641 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15642 00000067 ????                    .ccDFormat:		resw	1	;date format
 15643 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15644                                  					;5 byte of (currency symbol+0)
 15645 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15646 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15647 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15648 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15649 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15650 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15651 00000078 ??                      .ccTFormat:		resb	1	;time format
 15652 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15653 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15654 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15655                                  .size:
 15656                                  endstruc
 15657                                  
 15658                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15659                                  
 15660                                  ; ======================================================================
 15661                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15662                                  ; ======================================================================
 15663                                  ; 21/03/2019 - Retro DOS v4.0
 15664                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15665                                  
 15666                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15667                                  ; 21/10/2022
 15668                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15669                                  ; 22/10/2022
 15670                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15671                                  ; 09/12/2022
 15672                                  DOSBIOCODESEG equ IOSYSCODESEG
 15673                                  
 15674                                  ; Note: These offset addresses must be chanqed when the code 
 15675                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15676                                  
 15677                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15678                                  
 15679                                  ; 09/12/2022
 15680                                  %if 0
 15681                                  
 15682                                  ; 13/05/2019
 15683                                  
 15684                                  ;IsWin386         equ 08CFh
 15685                                  ;V86_Crit_SetFocus equ 08D0h
 15686                                  ; 21/10/2022
 15687                                  IsWin386          equ 08D0h
 15688                                  V86_Crit_SetFocus equ 08D1h 
 15689                                  
 15690                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15691                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15692                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15693                                  
 15694                                  ;SysinitPresent	  equ 08FCh
 15695                                  ; 21/10/2022
 15696                                  SysinitPresent	  equ 08FDh
 15697                                  
 15698                                  inHMA		  equ 000Dh
 15699                                  xms		  equ 000Eh
 15700                                  ;FreeHMAPtr	  equ 08F6h
 15701                                  ;multrk_flag	  equ 0533h
 15702                                  ;ec35_flag	  equ 0535h
 15703                                  ;EOT		  equ 012Eh
 15704                                  ; 21/10/2022
 15705                                  FreeHMAPtr	  equ 08F7h
 15706                                  multrk_flag	  equ 052Fh
 15707                                  ec35_flag	  equ 0531h
 15708                                  EOT		  equ 012Ch
 15709                                  
 15710                                  ;NextStack	  equ 08BFh
 15711                                  ;IT_StackLoc	  equ 08C5h
 15712                                  ;IT_StackSize	  equ 08C9h
 15713                                  ; 21/10/2022
 15714                                  NextStack	  equ 08C0h
 15715                                  IT_StackLoc	  equ 08C6h
 15716                                  IT_StackSize	  equ 08CAh
 15717                                  
 15718                                  ;MoveDOSIntoHMA	  equ 08F8h
 15719                                  ; 21/10/2022
 15720                                  MoveDOSIntoHMA	  equ 08F9h
 15721                                  
 15722                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15723                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15724                                  ; 21/10/2022
 15725                                  INT19SEM equ 0640h ; (iosys5.txt)
 15726                                  I19_LST  equ 0641h ; (iosys5.txt)
 15727                                  
 15728                                  %endif
 15729                                  
 15730                                  ; 09/12/2022
 15731                                  seg_reinit equ _seg_reinit
 15732                                  ec35_flag  equ ec35flag		
 15733                                  INT19SEM   equ int19sem
 15734                                  I19_LST    equ i19_lst
 15735                                  
 15736                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15737                                  INT19OLD08 equ I19_LST+6
 15738                                  INT19OLD09 equ I19_LST+11
 15739                                  INT19OLD0A equ I19_LST+16
 15740                                  INT19OLD0B equ I19_LST+21
 15741                                  INT19OLD0C equ I19_LST+26
 15742                                  INT19OLD0D equ I19_LST+31
 15743                                  INT19OLD0E equ I19_LST+36
 15744                                  INT19OLD70 equ I19_LST+41
 15745                                  INT19OLD72 equ I19_LST+46
 15746                                  INT19OLD73 equ I19_LST+51
 15747                                  INT19OLD74 equ I19_LST+56
 15748                                  INT19OLD76 equ I19_LST+61
 15749                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15750                                  
 15751                                  ; 09/12/2022
 15752                                  %if 0
 15753                                  
 15754                                  ;keyrd_func	equ 04E9h
 15755                                  ;keysts_func	equ 04EAh
 15756                                  ;t_switch	equ 04F6h
 15757                                  ; 21/10/2022
 15758                                  keyrd_func	equ 04E5h
 15759                                  keysts_func	equ 04E6h
 15760                                  t_switch	equ 04F2h
 15761                                  
 15762                                  ; 22/10/2022
 15763                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15764                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15765                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15766                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15767                                  
 15768                                  %endif
 15769                                  
 15770                                  ; 09/12/2022
 15771                                  BCODESTART	equ BIOSDATAWORD
 15772                                  RE_INIT		equ re_init
 15773                                  
 15774                                  ; ----------------------------------------------------------------------
 15775                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15776                                  ; ----------------------------------------------------------------------
 15777                                  ; 15/04/2019 - Retro DOS v4.0
 15778                                  
 15779                                  CONFIG_BEGIN        equ  '['
 15780                                  CONFIG_BREAK        equ  'C'
 15781                                  CONFIG_BUFFERS      equ  'B'
 15782                                  CONFIG_COMMENT      equ  'Y'
 15783                                  CONFIG_COUNTRY      equ  'Q'
 15784                                  CONFIG_DEVICE       equ  'D'
 15785                                  CONFIG_DEVICEHIGH   equ  'U'
 15786                                  CONFIG_DOS          equ  'H'
 15787                                  CONFIG_DRIVPARM     equ  'P'
 15788                                  CONFIG_FCBS         equ  'X'
 15789                                  CONFIG_FILES        equ  'F'
 15790                                  CONFIG_INCLUDE      equ  'J'
 15791                                  CONFIG_INSTALL      equ  'I'
 15792                                  CONFIG_INSTALLHIGH  equ  'W'
 15793                                  CONFIG_LASTDRIVE    equ  'L'
 15794                                  CONFIG_MENUCOLOR    equ  'R'
 15795                                  CONFIG_MENUDEFAULT  equ  'A'
 15796                                  CONFIG_MENUITEM     equ  'E'
 15797                                  CONFIG_MULTITRACK   equ  'M'
 15798                                  CONFIG_NUMLOCK      equ  'N'
 15799                                  CONFIG_REM          equ  '0'
 15800                                  CONFIG_SEMICOLON    equ  ';'
 15801                                  CONFIG_SET          equ  'V'
 15802                                  CONFIG_SHELL        equ  'S'
 15803                                  CONFIG_STACKS       equ  'K'
 15804                                  CONFIG_SUBMENU      equ  'O'
 15805                                  CONFIG_SWITCHES     equ  '1'
 15806                                  
 15807                                  CONFIG_UNKNOWN      equ  'Z'
 15808                                  
 15809                                  CONFIG_OPTION_QUERY equ 80h
 15810                                  
 15811                                  ; ----------------------------------------------------------------------
 15812                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 15813                                  ; ----------------------------------------------------------------------
 15814                                  ; 21/03/2019 - Retro DOS v4.0
 15815                                  
 15816                                  true	equ	0FFFFh
 15817                                  false	equ	0
 15818                                  cr	equ	13
 15819                                  lf	equ	10
 15820                                  tab	equ	9
 15821                                  
 15822                                  multMULT	   equ	4Ah
 15823                                  multMULTGETHMAPTR  equ	1
 15824                                  multMULTALLOCHMA   equ	2
 15825                                  
 15826                                  ;NOEXEC    equ	FALSE
 15827                                  
 15828                                  stacksw    equ	true	;include switchable hardware stacks
 15829                                  mycds_size equ	88	;size of curdir_list. if it is not
 15830                                  			;the same, then will generate compile error.
 15831                                  
 15832                                  entrysize   equ     8
 15833                                  
 15834                                  mincount    equ     8
 15835                                  defaultcount equ    9
 15836                                  maxcount    equ     64
 15837                                  
 15838                                  minsize     equ     32
 15839                                  defaultsize equ     128
 15840                                  maxsize     equ     512
 15841                                  
 15842                                  ;%define allocbyte  byte [es:bp+0]
 15843                                  ;%define intlevel   byte [es:bp+1]
 15844                                  ;%define savedsp    word [es:bp+2]
 15845                                  ;%define savedss    word [es:bp+4]
 15846                                  ;%define newsp	    word [es:bp+6]
 15847                                  
 15848                                  allocbyte   equ     0
 15849                                  intlevel    equ     1
 15850                                  savedsp     equ     2
 15851                                  savedss     equ     4
 15852                                  newsp       equ     6
 15853                                  
 15854                                  free	    equ     0
 15855                                  allocated   equ     1
 15856                                  overflowed  equ     2
 15857                                  clobbered   equ     3
 15858                                  
 15859                                  ;---------------------------------------
 15860                                  ; external variable defined in ibmbio module for multi-track
 15861                                  
 15862                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 15863                                  			  ; it on after handling config.sys file as a
 15864                                  			  ; default value,if multrk_flag = multrk_off1.
 15865                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 15866                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 15867                                  
 15868                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 15869                                  
 15870                                  SYSINIT$:
 15871                                  	;IF	STACKSW 
 15872                                  	; include MSSTACK.INC	;Main stack program and data definitions
 15873                                  	; include STKMES.INC	;Fatal stack error message
 15874                                  	;   public Endstackcode
 15875                                  ;Endstackcode	label byte
 15876                                  	;ENDIF
 15877                                  
 15878                                  ; 05/07/2018
 15879                                  ; ----------------------------------------------------------------------
 15880                                  ; 04/06/2018 - Retro DOS v3.0
 15881                                  
 15882                                  ; ----------------------------------------------------------------------
 15883                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 15884                                  ; ----------------------------------------------------------------------
 15885                                  
 15886                                  ;	MSStack.inc
 15887                                  ;
 15888                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 15889                                  ;	should follow the standard Interrupt Sharing Scheme which has
 15890                                  ;	a standard header structure.
 15891                                  ;	Fyi, the following shows the relations between
 15892                                  ;	the interrupt vector and interrupt level.
 15893                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 15894                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 15895                                  ;	MSSTACK module modifies the following interrupt vectors
 15896                                  ;	to meet the standard Interrupt Sharing standard;
 15897                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 15898                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 15899                                  ;	should be initialized to indicat whether this interrupt handler is
 15900                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 15901                                  ;	program header is initialized in STKINIT.INC module.
 15902                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 15903                                  ;
 15904                                  
 15905                                  ;  User specifies the number of stack elements - default = 9
 15906                                  ;						 minimum = 8
 15907                                  ;						 maximum = 64
 15908                                  ;
 15909                                  ;  Intercepts Asynchronous Hardware Interrupts only
 15910                                  ;
 15911                                  ;  Picks a stack from pool of stacks and switches to it
 15912                                  ;
 15913                                  ;  Calls the previously saved interrupt vector after pushing flags
 15914                                  ;
 15915                                  ;  On return, returns the stack to the stack pool
 15916                                  ;
 15917                                  
 15918                                  ; This is a modification of STACKS:
 15919                                  ; 1. To fix a bug which was causing the program to take up too much space.
 15920                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 15921                                  ;    . Clobbers the stack that got too big instead of innocent stack
 15922                                  ;    . Allows system to work if the only stack that got too big was the most
 15923                                  ;      deeply nested one
 15924                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 15925                                  ; 4. Does not intercept any interupts on a PCjr.
 15926                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 15927                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 15928                                  
 15929                                  		;EVEN
 15930                                  ;align 2
 15931                                  		; 21/10/2022
 15932                                  
 15933 00000000 0000                    		dw	0	; spare field but leave these in order
 15934 00000002 0000                    stackcount:	dw	0
 15935 00000004 0000                    stackat: 	dw	0
 15936 00000006 0000                    stacksize:	dw	0
 15937 00000008 0000                    stacks:		dw	0
 15938 0000000A 0000                    		dw	0
 15939                                  
 15940 0000000C [0800]                  firstentry:	dw	stacks
 15941 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15942 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15943                                  
 15944                                  ;***********************************************************************
 15945                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 15946                                  
 15947                                  ; ----------------------------------------------------------------------
 15948                                  
 15949 00000012 00000000                old02:	dd	0
 15950                                  
 15951                                  int02:
 15952                                  
 15953                                  ; *********************************************************************
 15954                                  ;
 15955                                  ; this is special support for the pc convertible / nmi handler
 15956                                  ;
 15957                                  ;	on the pc convertible, there is a situation where an nmi can be 
 15958                                  ;	caused by using the "out" instructions to certain ports. when this
 15959                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 15960                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 15961                                  ;	includes other type of interrupts (hardware and software), and
 15962                                  ;	also includes other type of nmi's. when any nmi has occured,
 15963                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 15964                                  ;	the software takes specific steps to allow further interrupting.
 15965                                  ;
 15966                                  ;	for pc convertible, the situation where the nmi is generated by the
 15967                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 15968                                  ;	otherwords, it is actually a "restartable exception". in this
 15969                                  ;	case, the software handler must be able to get to the stack in
 15970                                  ;	order to figure out what instruction caused the problem, where
 15971                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 15972                                  ;	we will not switch stacks in this situation. this situation is
 15973                                  ;	detected by interrogating port 62h, and checking for a bit value
 15974                                  ;	of 80h. if set, *****do not switch stacks*****.
 15975                                  ;
 15976                                  ; *********************************************************************
 15977                                  
 15978 00000016 50                      	push	ax
 15979 00000017 06                      	push	es
 15980 00000018 B800F0                  	mov	ax,0F000h
 15981 0000001B 8EC0                    	mov	es,ax
 15982                                  	; 02/11/2022
 15983 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 15984 00000023 07                      	pop	es
 15985 00000024 750C                    	jne	short normal02
 15986                                  
 15987 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 15988                                  				; 0-3: values of DIP switches
 15989                                  				; 5: 1=Timer 2 channel out
 15990                                  				; 6: 1=I/O channel check
 15991                                  				; 7: 1=RAM parity check error occurred.
 15992 00000028 A880                    	test	al,80h
 15993 0000002A 7406                    	jz	short normal02
 15994                                  special02:
 15995 0000002C 58                      	pop	ax
 15996 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 15997                                  normal02:
 15998 00000032 58                      	pop	ax
 15999 00000033 E81101                  	call	do_int_stacks
 16000 00000036 [1200]                  	dw	old02
 16001                                  
 16002                                  ; ----------------------------------------------------------------------
 16003                                  
 16004 00000038 00000000                old08:	dd	0
 16005                                  
 16006                                  int08:
 16007 0000003C E80801                  	call	do_int_stacks
 16008 0000003F [3800]                  	dw	old08
 16009                                  
 16010                                  ; ----------------------------------------------------------------------
 16011                                  
 16012 00000041 00000000                old09:	dd	0
 16013                                  
 16014                                  int09:
 16015                                  
 16016                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16017                                  ; as its first instruction for compatibility reasons
 16018                                  
 16019 00000045 EB02                    	jmp	short keyboard_lbl
 16020 00000047 90                      	nop
 16021 00000048 00                      	db	0
 16022                                  
 16023                                  keyboard_lbl:
 16024 00000049 E8FB00                  	call	do_int_stacks
 16025 0000004C [4100]                  	dw	old09
 16026                                  
 16027                                  ; ----------------------------------------------------------------------
 16028                                  
 16029 0000004E 00000000                old70:	dd	0
 16030                                  
 16031                                  int70:
 16032 00000052 E8F200                  	call	do_int_stacks
 16033 00000055 [4E00]                  	dw	old70
 16034                                  
 16035                                  ; ----------------------------------------------------------------------
 16036                                  
 16037                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16038                                  ;public	int&a
 16039                                  ;public	old&a
 16040                                  ;public	firstflag&a
 16041                                  ;int&a	proc	far
 16042                                  ;	jmp	short entry_int&a&_stk
 16043                                  ;old&a	dd	  0		;forward pointer
 16044                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16045                                  ;firstflag&a db   0		;the firstly hooked.
 16046                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16047                                  ;	db	7 dup (0)	;reserved for future.
 16048                                  ;entry_int&a&_stk:
 16049                                  ;	call	do_int_stacks
 16050                                  ;	dw	old&a
 16051                                  ;intret_&a:
 16052                                  ;	iret
 16053                                  ;int&a	endp
 16054                                  ;	endm
 16055                                  
 16056                                  ; ----------------------------------------------------------------------
 16057                                  
 16058                                  int0A:
 16059 00000057 EB10                    	jmp	short entry_int0A_stk
 16060 00000059 00000000                old0A:	dd	0	
 16061 0000005D 4B42                    	dw	424Bh
 16062                                  firstflag0A:
 16063 0000005F 00                      	db	0
 16064 00000060 EB0C                    	jmp	short intret_0A
 16065 00000062 00<rep 7h>              	times	7 db 0
 16066                                  
 16067                                  entry_int0A_stk:
 16068 00000069 E8DB00                  	call	do_int_stacks
 16069 0000006C [5900]                  	dw	old0A
 16070                                  intret_0A:
 16071 0000006E CF                      	iret
 16072                                  
 16073                                  ; ----------------------------------------------------------------------
 16074                                  
 16075                                  int0B:
 16076 0000006F EB10                    	jmp	short entry_int0B_stk
 16077 00000071 00000000                old0B:	dd	0	
 16078 00000075 4B42                    	dw	424Bh
 16079                                  firstflag0B:
 16080 00000077 00                      	db	0
 16081 00000078 EB0C                    	jmp	short intret_0B
 16082 0000007A 00<rep 7h>              	times	7 db 0
 16083                                  
 16084                                  entry_int0B_stk:
 16085 00000081 E8C300                  	call	do_int_stacks
 16086 00000084 [7100]                  	dw	old0B
 16087                                  intret_0B:
 16088 00000086 CF                      	iret
 16089                                  
 16090                                  ; ----------------------------------------------------------------------
 16091                                  
 16092                                  int0C:
 16093 00000087 EB10                    	jmp	short entry_int0C_stk
 16094 00000089 00000000                old0C:	dd	0	
 16095 0000008D 4B42                    	dw	424Bh
 16096                                  firstflag0C:
 16097 0000008F 00                      	db	0
 16098 00000090 EB0C                    	jmp	short intret_0C
 16099 00000092 00<rep 7h>              	times	7 db 0
 16100                                  
 16101                                  entry_int0C_stk:
 16102 00000099 E8AB00                  	call	do_int_stacks
 16103 0000009C [8900]                  	dw	old0C
 16104                                  intret_0C:
 16105 0000009E CF                      	iret
 16106                                  
 16107                                  ; ----------------------------------------------------------------------
 16108                                  
 16109                                  int0D:
 16110 0000009F EB10                    	jmp	short entry_int0D_stk
 16111 000000A1 00000000                old0D:	dd	0	
 16112 000000A5 4B42                    	dw	424Bh
 16113                                  firstflag0D:
 16114 000000A7 00                      	db	0
 16115 000000A8 EB0C                    	jmp	short intret_0D
 16116 000000AA 00<rep 7h>              	times	7 db 0
 16117                                  
 16118                                  entry_int0D_stk:
 16119 000000B1 E89300                  	call	do_int_stacks
 16120 000000B4 [A100]                  	dw	old0D
 16121                                  intret_0D:
 16122 000000B6 CF                      	iret
 16123                                  
 16124                                  ; ----------------------------------------------------------------------
 16125                                  
 16126                                  int0E:
 16127 000000B7 EB10                    	jmp	short entry_int0E_stk
 16128 000000B9 00000000                old0E:	dd	0	
 16129 000000BD 4B42                    	dw	424Bh
 16130                                  firstflag0E:
 16131 000000BF 00                      	db	0
 16132 000000C0 EB0C                    	jmp	short intret_0E
 16133 000000C2 00<rep 7h>              	times	7 db 0
 16134                                  
 16135                                  entry_int0E_stk:
 16136 000000C9 E87B00                  	call	do_int_stacks
 16137 000000CC [B900]                  	dw	old0E
 16138                                  intret_0E:
 16139 000000CE CF                      	iret
 16140                                  
 16141                                  ; ----------------------------------------------------------------------
 16142                                  
 16143                                  int72:
 16144 000000CF EB10                    	jmp	short entry_int72_stk
 16145 000000D1 00000000                old72:	dd	0	
 16146 000000D5 4B42                    	dw	424Bh
 16147                                  firstflag72:
 16148 000000D7 00                      	db	0
 16149 000000D8 EB0C                    	jmp	short intret_72
 16150 000000DA 00<rep 7h>              	times	7 db 0
 16151                                  
 16152                                  entry_int72_stk:
 16153 000000E1 E86300                  	call	do_int_stacks
 16154 000000E4 [D100]                  	dw	old72
 16155                                  intret_72:
 16156 000000E6 CF                      	iret
 16157                                  
 16158                                  ; ----------------------------------------------------------------------
 16159                                  
 16160                                  int73:
 16161 000000E7 EB10                    	jmp	short entry_int73_stk
 16162 000000E9 00000000                old73:	dd	0	
 16163 000000ED 4B42                    	dw	424Bh
 16164                                  firstflag73:
 16165 000000EF 00                      	db	0
 16166 000000F0 EB0C                    	jmp	short intret_73
 16167 000000F2 00<rep 7h>              	times	7 db 0
 16168                                  
 16169                                  entry_int73_stk:
 16170 000000F9 E84B00                  	call	do_int_stacks
 16171 000000FC [E900]                  	dw	old73
 16172                                  intret_73:
 16173 000000FE CF                      	iret
 16174                                  
 16175                                  ; ----------------------------------------------------------------------
 16176                                  
 16177                                  int74:
 16178 000000FF EB10                    	jmp	short entry_int74_stk
 16179 00000101 00000000                old74:	dd	0	
 16180 00000105 4B42                    	dw	424Bh
 16181                                  firstflag74:
 16182 00000107 00                      	db	0
 16183 00000108 EB0C                    	jmp	short intret_74
 16184 0000010A 00<rep 7h>              	times	7 db 0
 16185                                  
 16186                                  entry_int74_stk:
 16187 00000111 E83300                  	call	do_int_stacks
 16188 00000114 [0101]                  	dw	old74
 16189                                  intret_74:
 16190 00000116 CF                      	iret
 16191                                  
 16192                                  ; ----------------------------------------------------------------------
 16193                                  
 16194                                  int76:
 16195 00000117 EB10                    	jmp	short entry_int76_stk
 16196 00000119 00000000                old76:	dd	0	
 16197 0000011D 4B42                    	dw	424Bh
 16198                                  firstflag76:
 16199 0000011F 00                      	db	0
 16200 00000120 EB0C                    	jmp	short intret_76
 16201 00000122 00<rep 7h>              	times	7 db 0
 16202                                  
 16203                                  entry_int76_stk:
 16204 00000129 E81B00                  	call	do_int_stacks
 16205 0000012C [1901]                  	dw	old76
 16206                                  intret_76:
 16207 0000012E CF                      	iret
 16208                                  
 16209                                  ; ----------------------------------------------------------------------
 16210                                  
 16211                                  int77:
 16212 0000012F EB10                    	jmp	short entry_int77_stk
 16213 00000131 00000000                old77:	dd	0	
 16214 00000135 4B42                    	dw	424Bh
 16215                                  firstflag77:
 16216 00000137 00                      	db	0
 16217 00000138 EB0C                    	jmp	short intret_77
 16218 0000013A 00<rep 7h>              	times	7 db 0
 16219                                  
 16220                                  entry_int77_stk:
 16221 00000141 E80300                  	call	do_int_stacks
 16222 00000144 [3101]                  	dw	old77
 16223                                  intret_77:
 16224 00000146 CF                      	iret
 16225                                  
 16226                                  ; ----------------------------------------------------------------------
 16227                                  
 16228                                  ;********************************************************************
 16229                                  ;common routines
 16230                                  ;********************************************************************
 16231                                  
 16232                                  ; do interrupt stack switching. the fake return address holds
 16233                                  ; a pointer to the far-pointer of the actual interrupt
 16234                                  ; service routine
 16235                                  
 16236                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16237                                  ; 21/03/2019 - Retro DOS v4.0
 16238                                  
 16239                                  ;allocbyte   equ 0
 16240                                  ;intlevel    equ 1
 16241                                  ;savedsp     equ 2
 16242                                  ;savedss     equ 4
 16243                                  ;newsp       equ 6
 16244                                  
 16245                                  do_int_stacks:
 16246 00000147 50                      	push	ax
 16247 00000148 55                      	push	bp
 16248 00000149 06                      	push	es
 16249 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16250 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16251 00000154 B001                    	mov	al,allocated ; 1
 16252                                  	; 21/10/2022
 16253                                  	;xchg	[es:bp+allocbyte],al 
 16254                                  	; 11/12/2022
 16255 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16256 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16257 0000015C 754F                    	jne	short notfree02
 16258                                  
 16259 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16260                                  
 16261                                  found02:
 16262 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16263 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16264                                  
 16265 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16266                                  
 16267 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16268                                  	; 21/10/2022
 16269                                  	;mov	bp,[es:bp+6]
 16270                                  	; 11/12/2022
 16271                                  	;cmp	[es:bp+0],ax	
 16272 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16273 00000176 7542                    	jne	short foundbad02
 16274                                  
 16275                                  	;mov	ax,es			; point ss,sp to the new stack
 16276                                  	;mov	es,bp
 16277                                  	;mov	bp,sp
 16278                                  	;mov	bp,[bp+6]
 16279                                  	;mov	ss,ax
 16280                                  	;mov	sp,es
 16281                                  	;mov	es,ax
 16282                                  	;mov	bp,[cs:bp]
 16283                                  
 16284                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16285 00000178 55                      	push    bp
 16286 00000179 89E5                    	mov     bp,sp
 16287 0000017B 8B4608                  	mov     ax,[bp+8]
 16288 0000017E 5D                      	pop     bp
 16289 0000017F 06                      	push    es
 16290 00000180 17                      	pop     ss
 16291 00000181 89EC                    	mov     sp,bp
 16292 00000183 89C5                    	mov     bp,ax
 16293                                  	; 11/12/2022
 16294                                  	;mov	bp,[cs:bp+0]	
 16295 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16296                                  
 16297 00000189 9C                      	pushf				; go execute the real interrupt handler
 16298                                  	; 11/12/2022
 16299 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16300                                  	; 21/10/2022
 16301                                  	;call	far [cs:bp+0]
 16302                                  
 16303 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16304                                  	; 11/12/2022
 16305 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16306                                  	; 21/10/2022
 16307                                  	;mov	bp,[es:bp+0]
 16308 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16309 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16310                                  
 16311                                  	; 11/12/2022
 16312                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16313                                  	; 21/10/2022
 16314 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16315 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16316                                  
 16317 000001A6 07                      	pop	es
 16318 000001A7 5D                      	pop	bp			; saved on entry
 16319 000001A8 58                      	pop	ax			; saved on entry
 16320 000001A9 83C402                  	add	sp,2
 16321 000001AC CF                      	iret				; done with this interrupt
 16322                                  
 16323                                  notfree02:
 16324 000001AD 3C01                    	cmp	al,allocated		; error flag
 16325 000001AF 7404                    	je	short findnext02	;  no, continue
 16326                                  	; 11/12/2022
 16327                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16328                                  	; 21/10/2022
 16329 000001B1 26864600                	xchg	[es:bp],al
 16330                                  
 16331                                  findnext02:
 16332 000001B5 E81200                  	call	longpath
 16333 000001B8 EBAA                    	jmp	short found02
 16334                                  
 16335                                  foundbad02:
 16336 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16337 000001BF 72F4                    	jc	short findnext02
 16338 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16339                                  	; 11/12/2022
 16340                                  	;mov	byte [es:bp+allocbyte],clobbered
 16341                                  	; 21/10/2022
 16342 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16343 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16344                                  
 16345                                  ; ----------------------------------------------------------------------
 16346                                  
 16347                                  ; Common routines
 16348                                  
 16349                                  longpath:
 16350                                  	; 21/03/2019
 16351 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16352                                  lploopp:
 16353                                  	; 11/12/2022
 16354                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16355                                  	; 21/10/2022
 16356 000001CF 26807E0000              	cmp	byte [es:bp],free
 16357 000001D4 7512                    	jne	short inuse		;  no, try next one
 16358                                  
 16359 000001D6 B001                    	mov	al,allocated
 16360                                  	; 11/12/2022
 16361                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16362                                  	; 21/10/2022
 16363 000001D8 26864600                	xchg	[es:bp],al
 16364 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16365 000001DE 7414                    	je	short found		;  yes, go use it
 16366                                  
 16367 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16368 000001E2 7404                    	je	short inuse		;  no, check the next one
 16369                                  
 16370                                  	; 11/12/2022
 16371                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16372                                  	; 21/10/2022
 16373 000001E4 26884600                	mov	[es:bp],al
 16374                                  inuse:
 16375 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16376 000001ED 7406                    	je	short fatal
 16377 000001EF 83ED08                  	sub	bp,entrysize
 16378 000001F2 EBDB                    	jmp	short lploopp
 16379                                  found:
 16380 000001F4 C3                      	retn
 16381                                  fatal:
 16382 000001F5 1E                      	push	ds
 16383 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16384 000001F9 8ED8                    	mov	ds,ax
 16385 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16386 00000200 1F                      	pop	ds
 16387 00000201 7504                    	jne	short skip_nmis
 16388                                  
 16389 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16390 00000205 E672                    	out	72h,al
 16391                                  
 16392                                  skip_nmis:
 16393 00000207 FA                      	cli				; disable and mask
 16394 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16395 0000020A E621                    	out	021h,al
 16396 0000020C E6A1                    	out	0A1h,al
 16397                                  
 16398 0000020E 8CCE                    	mov	si,cs
 16399 00000210 8EDE                    	mov	ds,si
 16400 00000212 BE[3902]                	mov	si,fatal_msg
 16401                                  ;SR;
 16402                                  ;   We set all foci to this VM to issue the stack failure message
 16403                                  ;
 16404 00000215 50                      	push	ax
 16405 00000216 1E                      	push	ds
 16406                                  	;;mov	ax,Bios_Data ; 0070h
 16407                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16408                                  	; 21/10/2022
 16409 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16410 0000021A 8ED8                    	mov	ds,ax
 16411                                  
 16412                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16413 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16414 00000221 1F                      	pop	ds
 16415 00000222 58                      	pop	ax
 16416 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16417                                  
 16418                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16419                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16420                                  	; 21/10/2022
 16421 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16422                                  ;
 16423                                  ;SR; We do not bother about the returned status of this call. 
 16424                                  ;
 16425                                  fatal_loop:
 16426 0000022A AC                      	lodsb
 16427 0000022B 3C24                    	cmp	al,'$'
 16428 0000022D 7408                    	je	short fatal_done
 16429                                  
 16430 0000022F B307                    	mov	bl,7
 16431 00000231 B40E                    	mov	ah,14
 16432 00000233 CD10                    	int	10h			; whoops, this enables ints
 16433 00000235 EBF3                    	jmp	short fatal_loop
 16434                                  
 16435                                  fatal_done:
 16436 00000237 EBFE                    	jmp	short fatal_done
 16437                                  
 16438                                  
 16439                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16440                                  ; ----------------------------------------------------------------------
 16441                                  ;	include msbio.cl5		; fatal stack error message
 16442                                  
 16443                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16444                                  
 16445                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16446                                  ; ----------------------------------------------------------------------
 16447                                  ; 04/06/2018 - Retro DOS v3.0
 16448                                  
 16449                                  fatal_msg:
 16450 00000239 0D0A                    	db	0Dh,0Ah
 16451 0000023B 070D0A                  	db	7,0Dh,0Ah
 16452 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16452 00000247 737461636B206F7665-
 16452 00000250 72666C6F770D0A     
 16453 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16453 00000260 6C7465640D0A24     
 16454                                  
 16455                                  endstackcode:
 16456                                  
 16457                                  ; ----------------------------------------------------------------------
 16458                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16459                                  ; ----------------------------------------------------------------------
 16460                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16461                                  
 16462                                  ; 22/03/2019 - Retro DOS v4.0
 16463                                  
 16464                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16465                                  
 16466                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16467                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16468                                  
 16469                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16470                                  ; ----------------------------------------------------------------------
 16471                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16472                                  
 16473                                  SYSINIT:	
 16474 00000267 E91C02                          JMP	GOINIT
 16475                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16476                                  
 16477                                  ; ----------------------------------------------------------------------
 16478                                  
 16479                                  struc DDHighInfo
 16480 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16481 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16482 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16483                                  endstruc
 16484                                  
 16485                                  ; 22/03/2019 - Retro DOS v4.0
 16486                                  
 16487 0000026A 00                      runhigh: db	0
 16488                                  
 16489                                  ; 02/11/2022
 16490                                  ;align 4
 16491                                  
 16492                                  DOSINFO: 
 16493 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16494                                  ;MSDOS:
 16495                                  dos_temp_location: ; dword ; MSDOS 6.0
 16496                                  dosinit:		; MSDOS 6.0
 16497 0000026F 0000                    	dw	0
 16498                                  
 16499                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16500                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16501                                  ;	dw	0
 16502                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16503                                  
 16504                                  CURRENT_DOS_LOCATION:
 16505 00000271 0000                    	dw	0
 16506                                  
 16507                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16508                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16509                                  
 16510                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16511                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16512                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16513                                  
 16514                                  DEVICE_LIST:
 16515 00000273 00000000                	dd	0
 16516                                  
 16517                                  ; 04/06/2018 - Retro DOS v3.0
 16518                                  ; 28/03/2018
 16519                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16520                                  ;
 16521                                  sysi_country:	
 16522 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16523                                  
 16524                                  ; MSDOS 6.0
 16525 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16526                                  
 16527 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16528 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16529                                  
 16530 00000283 0000                    def_php:	dw	0
 16531                                  
 16532                                  ; M022--
 16533                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16534                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16535                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16536                                  ;  the new home.
 16537                                  
 16538                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16539                                  ; 21/10/2022
 16540                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16541                                  
 16542                                  ; 22/10/2022
 16543                                  seg_reinit_ptr:	; label dword
 16544 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16545                                  temp_bcode_seg:
 16546                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16547                                  		; 22/10/2022
 16548 00000287 A002                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16549                                  
 16550                                  fake_floppy_drv:
 16551 00000289 00                      		db	0	; set to 1 if this machine
 16552                                  				; does not have any floppies!!!
 16553                                  
 16554                                  ; Internal Stack Parameters
 16555                                  
 16556 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16557 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16558 0000028E 00000000                stack_addr:	dd	0	
 16559                                  
 16560                                  ; 05/06/2018 - Retro DOS v3.0
 16561                                  
 16562                                  ; various default values
 16563                                  
 16564 00000292 0100                    MEMORY_SIZE:	dw	1
 16565                                  
 16566                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16567                                  
 16568 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16569 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16570 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16571 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16572 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16573                                  
 16574 0000029D 08                      FILES:	db	8	; enough files for pipe
 16575 0000029E 04                      FCBS:	db	4	; performance for recycling
 16576 0000029F 00                      KEEP:	db	0	; keep original set
 16577 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16578                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16579                                  ;CONFBOT: dw	0
 16580                                  ;ALLOCLIM: dw	0
 16581                                  CONFBOT: ; 02/11/2022
 16582 000002A1 0000                    top_of_cdss: dw 0
 16583                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16584 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16585                                  
 16586 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16587                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16588                                  ; (SYSINIT:02A9h)
 16589                                  command_line:
 16590 000002A9 0200                    	db	2,0
 16591 000002AB 50                      	db	'P'
 16592 000002AC 00                      	db	0
 16593 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16594                                  ; (SYSINIT:0329h)
 16595 00000329 00                      ZERO:	db	0
 16596 0000032A 00                      sepchr:	db	0
 16597 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16598 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16599 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16600                                  
 16601 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16602 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16603                                  
 16604 00000339 0000                    buf_prev_off:	dw	0
 16605                                  
 16606                                          ;IF      NOT NOEXEC
 16607                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16608                                          ;ENDIF
 16609                                  
 16610                                  ; 01/05/2018
 16611                                  COMEXE:
 16612 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16613 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16614 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16615 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16616 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16617 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16618 00000347 0000                    		dw	0
 16619                                  
 16620                                  ; variables for install= command.
 16621                                  
 16622 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16623                                  					;  indicating the pass number
 16624                                  					; 0 - do scan for DOS=HIGH/LOW
 16625                                  					; 1 - load device drivers
 16626                                  					; 2 - was to load IFS
 16627                                  					;      now it is unused
 16628                                  					; 3 - do install=
 16629                                  					; >3 - nop
 16630 0000034A 0000                    install_flag:	dw	0
 16631                                  
 16632                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16633                                  has_installed	equ	00000010b	; sysinit_base installed.
 16634                                  
 16635 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16636 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16637 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16638 00000356 0000                    checksum:	dw	0		; used by sum_up
 16639                                  
 16640 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16641 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16642 0000036D 20                      ldexec_start:	db	' '
 16643 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16644                                  
 16645                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16646                                  
 16647                                  instexe:
 16648 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16649 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16650 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16651 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16652 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16653 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16654 000003CA 0000                    		dw	0
 16655                                  
 16656                                  ; variables for comment=
 16657                                  
 16658 000003CC 00                      com_level:	db	0		; level of " " in command line
 16659 000003CD 00                      cmmt:		db	0		; length of comment string token
 16660 000003CE 00                      cmmt1:		db	0		; token
 16661 000003CF 00                      cmmt2:		db	0		; token
 16662 000003D0 00                      cmd_indicator:	db	0
 16663 000003D1 00                      donotshownum:	db	0
 16664                                  
 16665 000003D2 0000                    count:		dw	0
 16666 000003D4 0000                    org_count:	dw	0
 16667 000003D6 0000                    chrptr:		dw	0
 16668 000003D8 0000                    cntryfilehandle: dw	0
 16669 000003DA 0000                    old_area:	dw	0
 16670 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16671                                  
 16672                                  bucketptr: ; label dword
 16673                                  bufptr:	   ; label dword		; leave this stuff in order!
 16674 000003DE 0000                    memlo:	dw	0
 16675                                  prmblk:	   ; label word
 16676 000003E0 0000                    memhi:	dw	0
 16677 000003E2 0000                    ldoff:	dw	0
 16678 000003E4 0000                    area:	dw	0
 16679                                  
 16680                                  ; Following is the request packet used to call INIT routines for 
 16681                                  ; all device drivers. Some fields may be accessed individually in
 16682                                  ; the code, and hence have individual labels, but they should not
 16683                                  ; be separated.
 16684                                  
 16685 000003E6 18                      packet:	db	24			; was 22
 16686 000003E7 00                      	db	0
 16687 000003E8 00                      	db	0			; initialize code
 16688 000003E9 0000                    	dw	0
 16689 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16690                                  
 16691 000003F3 00                      unitcount:	db	0
 16692 000003F4 00000000                break_addr:	dd	0
 16693 000003F8 00000000                bpb_addr:	dd	0
 16694                                  drivenumber:	; 22/10/2022
 16695 000003FC 00                      devdrivenum:	db	0 
 16696 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16697                                  
 16698                                  ; end of request packet
 16699                                  
 16700                                  ;drivenumber:	db	0  ; 22/03/2019
 16701                                  
 16702                                  toomanydrivesflag:
 16703 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16704                                  align 2
 16705                                  
 16706                                  BCodeSeg:	; 21/10/2022
 16707 00000400 A002                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16708                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16709                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16710                                  
 16711                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16712                                  ;; 19/04/2019
 16713                                  ;_timer_lw_:
 16714                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16715                                  	
 16716                                  ;SR;
 16717                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16718                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16719                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16720                                  ;is passed to DOS as part of the DOSINIT call.
 16721                                  ;
 16722                                  
 16723                                  BiosComBlock:
 16724                                  	;dd	Bios_Data:SysinitPresent 
 16725                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16726 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16727                                  	;dw	KERNEL_SEGMENT ; 0070h
 16728                                  	; 21/10/2022
 16729 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16730                                  
 16731                                  ;align 2
 16732                                  
 16733                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16734                                  tempstack:	
 16735 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16736                                  
 16737                                  ; ----------------------------------------------------------------------------
 16738                                  
 16739                                  	; 22/10/2022 - Retro DOS v4.0
 16740                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16741                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16742                                  	; 12/12/2022
 16743                                  	; 22/03/2019 - Retro DOS v4.0
 16744                                  	; 06/07/2018
 16745                                  	; 04/06/2018 - Retro DOS v3.0
 16746                                  ; before doing anything else, let's set the model byte
 16747 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16748 00000488 CD15                    	int	15h			; *
 16749 0000048A 7217                    	jc	short no_rom_config
 16750                                  
 16751 0000048C 80FC00                  	cmp	ah,0			; double check
 16752 0000048F 7512                    	jne	short no_rom_config
 16753 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16754 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16755 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16756 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16757                                  	;jmp	short SYSIN
 16758                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16759 000004A1 EB2D                    	jmp	short move_myself
 16760                                  
 16761                                  no_rom_config:				; Old ROM
 16762 000004A3 B800F0                  	mov	ax,0F000h
 16763 000004A6 8ED8                    	mov	ds,ax
 16764 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16765 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16766                                  
 16767                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16768                                  ; execute the equipment determination interrupt and then
 16769                                  ; check the returned value to see if we have any floppy drives
 16770                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16771                                  ; see the at tech ref bios listings for help on the equipment
 16772                                  ; flag interrupt (11h)	
 16773                                  
 16774                                  	; 22/10/2022
 16775                                  check_for_fake_floppy:			; entry point for rom_config above
 16776 000004AF CD11                    	int	11h			; check equipment flag
 16777                                  
 16778                                  	; 12/12/2022
 16779 000004B1 A801                    	test	al,1		
 16780                                  	;test	ax,1			; have any floppies?
 16781 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 16782                                  
 16783                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 16784                                  ; whether it is an old ROM BIOS or a new one
 16785                                  ;
 16786                                  ; WARNING !!!
 16787                                  ;
 16788                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 16789                                  ; here will require an equivalent modification in MSINIT.ASM also
 16790                                  
 16791 000004B5 06                      	push	es
 16792                                  
 16793 000004B6 30C9                    	xor	cl,cl	
 16794 000004B8 B408                    	mov	ah,8			; get disk parameters
 16795 000004BA B200                    	mov	dl,0			; of drive 0
 16796 000004BC CD13                    	int	13h
 16797                                  
 16798 000004BE 07                      	pop	es
 16799                                  
 16800 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 16801                                  					;  ROM BIOS lied
 16802 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 16803 000004C4 740A                    	je	short move_myself
 16804                                  
 16805 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 16806 000004C8 7506                    	jnz	short move_myself
 16807                                  
 16808 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 16809                                  
 16810                                  move_myself:
 16811 000004D0 FC                      	cld				; set up move
 16812 000004D1 31F6                    	xor	si,si
 16813 000004D3 89F7                    	mov	di,si
 16814                                  
 16815                                  	; 12/12/2022
 16816 000004D5 0E                      	push	cs
 16817 000004D6 1F                      	pop	ds
 16818                                  
 16819                                  	;mov	cx,[cs:MEMORY_SIZE]
 16820 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 16821                                  
 16822                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16823                                  ;;;	if	msver
 16824                                  ;	cmp	cx,1		; 1 means do scan
 16825                                  ;	jnz	short noscan
 16826                                  ;	mov	cx,2048		; start scanning at 32k boundary
 16827                                  ;	xor	bx,bx
 16828                                  ;
 16829                                  ;memscan:inc	cx
 16830                                  ;	jz	setend
 16831                                  ;	mov	ds,cx
 16832                                  ;	mov	al,[bx]
 16833                                  ;	not	al
 16834                                  ;	mov	[bx],al
 16835                                  ;	cmp	al,[bx]
 16836                                  ;	not	al
 16837                                  ;	mov	[bx],al
 16838                                  ;	jz	short memscan
 16839                                  ;setend:
 16840                                  ;	mov	cs:[memory_size],cx
 16841                                  ;;;	endif
 16842                                  
 16843                                  ;noscan: 				; cx is mem size in para
 16844                                  ;;
 16845                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 16846                                  ;;		  before we try to run.
 16847                                  ;;	       b) in any case, we should check for sufficient memory and give
 16848                                  ;;		  an appropriate error diagnostic if there isn't enough
 16849                                  ;
 16850                                  ;	push	cs
 16851                                  ;	pop	ds
 16852                                  ;
 16853                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 16854                                  ;;	  that way it would be easier to slide them down home in a minimal
 16855                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 16856                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 16857                                  ;;	  temporary home and the final one.  the problem with doing that
 16858                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 16859                                  ;
 16860                                  ;	dec	cx			; one para for an arena at end of mem
 16861                                  ;					; in case of UMBs
 16862                                  
 16863                                  	; 22/10/2022
 16864                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 16865                                  
 16866                                  	; 12/12/2022
 16867                                  	;push	cs
 16868                                  	;pop	ds
 16869                                  
 16870 000004DB 49                      	dec	cx
 16871                                  
 16872                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 16873                                  
 16874 000004DC 31DB                    	xor	bx,bx
 16875 000004DE 8EC3                    	mov	es,bx	; 0
 16876                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 16877                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 16878                                  	; 29/09/2023
 16879 000004E0 26C41EBC00              	les	bx,[es:(2Fh*4)]
 16880 000004E5 26817F035250            	cmp	word [es:bx+3],'RP'
 16881 000004EB 751B                    	jne	short NoRPL
 16882 000004ED 26807F054C              	cmp	byte [es:bx+5],'L'
 16883 000004F2 7514                    	jne	short NoRPL
 16884                                  
 16885 000004F4 89CA                    	mov	dx,cx			; get TOM into DX
 16886 000004F6 52                      	push	dx
 16887 000004F7 B8064A                  	mov	ax,4A06h
 16888                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 16889 000004FA CD2F                    	int	2Fh			; Get new TOM from any RPL
 16890 000004FC 58                      	pop	ax
 16891 000004FD 89D1                    	mov	cx,dx
 16892 000004FF 39C2                    	cmp	dx,ax
 16893 00000501 7405                    	je	short NoRPL
 16894                                  	
 16895                                  	; 11/12/2022
 16896                                  	; ds = cs
 16897 00000503 8916[9402]              	mov	[RPLMemTop],dx
 16898                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16899                                  	;mov	[cs:RPLMemTop],dx
 16900                                  	
 16901 00000507 49                      	dec	cx
 16902                                  NoRPL:
 16903 00000508 B8[E038]                	mov	ax,SI_end		; need this much room for sysinit
 16904                                  					; (SI_end == sysinit code size)
 16905 0000050B E8B806                  	call	off_to_para
 16906 0000050E 29C1                    	sub	cx,ax
 16907                                  
 16908                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 16909                                  ; code above sysinit in memory
 16910                                  ;
 16911 00000510 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 16912                                  
 16913 00000514 B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 16914 00000517 E8AC06                  	call	off_to_para		; leave this much room for BIOS code
 16915 0000051A 29C1                    	sub	cx,ax
 16916 0000051C 8EC1                    	mov	es,cx			; offset where sysinit will be located
 16917                                  
 16918 0000051E B9[E038]                	mov	cx,SI_end		; (sysinit code size)
 16919 00000521 D1E9                    	shr	cx,1			; divide by 2 to get words
 16920 00000523 F3A5                    	rep	movsw			; relocate sysinit
 16921                                  
 16922 00000525 06                      	push	es			; push relocated segment
 16923 00000526 B8[2B05]                	mov	ax,SYSIN
 16924 00000529 50                      	push	ax			; push relocated entry point
 16925                                  
 16926 0000052A CB                      	retf				; far jump to relocated sysinit
 16927                                  
 16928                                  ; ----------------------------------------------------------------------------
 16929                                  
 16930                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 16931                                  
 16932                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16933                                  	; (SYSINIT:0533h)
 16934                                  SYSIN:
 16935                                  	; Retro DOS 4.0 - 22/03/2019
 16936                                  	; Retro DOS 2.0 - 25/02/2018
 16937                                  
 16938                                  	; 23/04/2019
 16939                                  	;;mov	ax,Bios_Data
 16940                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16941                                  	; 21/10/2022
 16942 0000052B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 16943 0000052E 8ED8                    	mov	ds,ax
 16944 00000530 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 16945 00000534 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 16946                                  
 16947                                  ; first move the MSDOS.SYS image up to a harmless place 
 16948                                  ; on top of our new sysinitseg
 16949                                  
 16950                                  	; 22/10/2022
 16951 00000539 B8[E038]                	mov	ax,SI_end		; how big is sysinitseg?
 16952 0000053C E88706                  	call	off_to_para
 16953 0000053F 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 16954 00000541 01C8                    	add	ax,cx
 16955 00000543 8EC0                    	mov	es,ax
 16956                                  	
 16957 00000545 31F6                    	xor	si,si
 16958 00000547 89F7                    	mov	di,si
 16959                                  
 16960 00000549 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 16961                                  
 16962                                  	;mov	ax,cs	
 16963                                  	;mov	ds,ax
 16964                                  
 16965                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 16966                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 16967                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 16968                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 16969                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 16970                                  
 16971                                  	; 22/10/2022
 16972 0000054E B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 16973 00000551 F3A5                    	rep     movsw
 16974 00000553 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 16975                                  
 16976                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 16977                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 16978                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 16979                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 16980                                  
 16981                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 16982                                  	;mov	ax,cs
 16983                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16984                                  	;mov	ds,ax
 16985                                  
 16986                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16987                                  
 16988                                  ;	; 24/04/2019 
 16989                                  ;;ifndef ROMDOS
 16990                                  ;	mov	ax,[es:3] 		; get offset of dos
 16991                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 16992                                  ;	mov	[dosinit],ax		; that's the entry point offset
 16993                                  ;	call	off_to_para		; subtract this much from segment
 16994                                  ;	; 23/04/2019
 16995                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 16996                                  ;	sub	[FINAL_DOS_LOCATION],ax
 16997                                  ;;else
 16998                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 16999                                  ;;
 17000                                  ;;endif ; ROMDOS
 17001                                  
 17002                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17003                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17004                                  
 17005                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17006                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17007                                  
 17008                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17009                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17010 00000558 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17011                                  
 17012 0000055B 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17013                                  	; 02/11/2022
 17014 0000055F E86406                  	call	off_to_para		; subtract this much from segment
 17015 00000562 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17016                                  
 17017                                  	; Current DOSCODE start address = dword [dosinit]
 17018                                  
 17019                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17020                                  ;; until it is determined whether it will be running in HIMEM or not.
 17021                                  
 17022                                  ;ifndef ROMDOS
 17023                                  
 17024                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17025                                  
 17026                                  	; 22/10/2022
 17027 00000567 8CC0                    	mov	ax,es
 17028 00000569 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17029 0000056C 8EC0                    	mov	es,ax
 17030 0000056E 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17031 00000573 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17032                                  
 17033                                  	;mov	si,BCODE_START ; mov si,30h
 17034                                  	; 09/12/2022
 17035 00000575 BE[3000]                	mov	si,BCODESTART
 17036                                  	; 02/11/2022
 17037 00000578 89F7                    	mov	di,si
 17038                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 17039                                  	;sub	cx,si
 17040                                  	; 29/09/2023
 17041                                  	BCODESIZE equ BCODEEND-BCODESTART
 17042 0000057A B9D019                  	mov	cx,BCODESIZE
 17043 0000057D D1E9                    	shr	cx,1
 17044 0000057F F3A5                    	rep	movsw			; move Bios_Code into place
 17045                                  
 17046 00000581 8CC0                    	mov	ax,es			; tell it what segment it's in
 17047 00000583 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17048                                  
 17049                                  ;endif	; not ROMDOS
 17050                                  
 17051                                  ; now call dosinit while it's in its temporary home
 17052                                  
 17053                                  	;mov	ax,cs
 17054                                  	;mov	ds,ax	 
 17055                                  
 17056                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17057                                  
 17058                                  	; 22/10/2022
 17059                                  
 17060 00000588 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17061                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17062 0000058D 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17063                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17064                                  
 17065 00000592 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17066                                  
 17067 00000597 FA                      	cli
 17068 00000598 8CC8                    	mov	ax,cs
 17069 0000059A 8ED0                    	mov	ss,ax
 17070                                  
 17071                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17072                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17073                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17074                                  ;SYSINIT:0532h:
 17075                                  
 17076                                  ; 22/10/2022
 17077                                  ; ----------------------------------------------------------------------------
 17078                                  ;SYSINIT:05A6h:
 17079                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17080                                  
 17081                                  	;mov	sp, 05A6h
 17082 0000059C BC9C05                  	mov     sp,locstack		; set stack
 17083                                  
 17084 0000059F FB                      	sti
 17085                                  
 17086                                  ;align 2
 17087                                  	; 30/03/2018
 17088                                  ;LOCSTACK:
 17089                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17090                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17091                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17092                                  
 17093                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17094                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17095                                  
 17096                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17097                                  ; at the top of memory, to its final location in low memory just above the
 17098                                  ; BIOS data. It will then build important DOS data structures in low 
 17099                                  ; memory following the DOS data. It returns (among many other things) the
 17100                                  ; new starting address of free memory.
 17101                                  
 17102 000005A0 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17103                                  			 ; es:di -> sysinitvars_ext
 17104                                  
 17105 000005A5 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17106                                  	
 17107                                  	; 11/12/2022
 17108                                  	; 22/03/2019
 17109 000005AA 0E                      	push	cs
 17110 000005AB 1F                      	pop	ds
 17111                                  	; 22/10/2022
 17112 000005AC A3[8102]                	mov	[hi_doscod_size],ax
 17113 000005AF 890E[7F02]              	mov	[lo_doscod_size],cx
 17114 000005B3 8916[7B02]              	mov	[dos_segreinit],dx
 17115                                  	
 17116                                  	; 11/12/2022
 17117                                  	; ds = cs
 17118                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17119                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17120                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17121                                  
 17122                                  	; 05/06/2018 - Retro DOS v3.0
 17123                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17124                                  
 17125                                  	; 11/12/2022
 17126                                  	; ds = cs
 17127                                  	; 22/10/2022
 17128                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17129 000005B7 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17130                                  	;mov	[cs:DOSINFO],ax
 17131 000005BA A3[6B02]                	mov	[DOSINFO],ax
 17132                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17133 000005BD 268B4502                	mov	ax,[es:di+2]
 17134                                  	;mov	[cs:DOSINFO+2],ax
 17135 000005C1 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17136                                  
 17137                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17138 000005C4 268B4504                	mov	ax,[es:di+4]
 17139                                  	;mov	[cs:sysi_country],ax
 17140 000005C8 A3[7702]                	mov	[sysi_country],ax
 17141                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17142 000005CB 268B4506                	mov	ax,[es:di+6]
 17143                                  	;mov	[cs:sysi_country+2],ax
 17144 000005CF A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17145                                  
 17146                                  	; 20/04/2019
 17147                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17148                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17149                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17150                                  	; 22/10/2022
 17151                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17152                                  	;;;mov	[dos_segreinit+2],es
 17153                                  	;;mov	[dos_segreinit+2],ax
 17154                                  	;mov	[cs:dos_segreinit+2],ax
 17155                                  	; 11/12/2022
 17156                                  	; ds = cs
 17157 000005D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17158 000005D6 8C06[7D02]              	mov	[dos_segreinit+2],es
 17159                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17160                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17161                                  	;mov	[cs:dos_segreinit+2],es
 17162                                  
 17163                                  ; ----------------------------------------------------------------------------
 17164                                  
 17165                                  ;SYSINIT:0577h:
 17166                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17167                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17168                                  
 17169                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17170                                  ;------ Cover up RPL code with an arena
 17171                                  ;SYSINIT:05EBh:
 17172                                  	; 11/12/2022
 17173                                  	; ds = cs
 17174 000005DA 31DB                    	xor	bx,bx
 17175 000005DC 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17176                                  	;cmp	word [RPLMemTop],0
 17177                                  	;;cmp	word [cs:RPLMemTop],0
 17178 000005E0 7450                    	je	short NoRPLArena
 17179                                  
 17180                                  ;------ alloc all memory
 17181                                  
 17182                                  	; 11/12/2022
 17183                                  	;mov	bx,0FFFFh
 17184 000005E2 4B                      	dec	bx
 17185                                  	; bx = 0FFFFh
 17186 000005E3 B448                    	mov	ah,48h
 17187 000005E5 CD21                    	int	21h
 17188                                  			; DOS - 2+ - ALLOCATE MEMORY
 17189                                  			; BX = number of 16-byte paragraphs desired
 17190 000005E7 B448                    	mov	ah,48h
 17191 000005E9 CD21                    	int	21h
 17192                                  
 17193 000005EB 8EC0                    	mov	es,ax			; get it into ES and save it
 17194 000005ED 06                      	push	es
 17195                                  
 17196                                  ;------ resize upto RPL mem
 17197                                  
 17198                                  	; 11/12/2022
 17199                                  	; ds = cs
 17200                                  	;sub	ax,[cs:RPLMemTop]
 17201 000005EE 2B06[9402]              	sub	ax,[RPLMemTop]
 17202 000005F2 F7D8                    	neg	ax
 17203 000005F4 48                      	dec	ax
 17204 000005F5 89C3                    	mov	bx,ax
 17205 000005F7 B44A                    	mov	ah,4Ah
 17206 000005F9 CD21                    	int	21h
 17207                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17208                                  			; ES = segment address of block to change
 17209                                  			; BX = new size in paragraphs
 17210                                  
 17211                                  ;------ allocate the free (RPL MEM)
 17212                                  
 17213 000005FB BBFFFF                  	mov	bx,0FFFFh
 17214 000005FE B448                    	mov	ah,48h
 17215 00000600 CD21                    	int	21h
 17216 00000602 B448                    	mov	ah,48h
 17217 00000604 CD21                    	int	21h
 17218                                  
 17219                                  ;----- mark that it belongs to RPL
 17220                                  
 17221 00000606 48                      	dec	ax
 17222 00000607 8EC0                    	mov	es,ax
 17223                                  	;mov	word [es:arena_owner],8
 17224 00000609 26C70601000800          	mov	word [es:1],8
 17225                                  	;mov	word [es:arena_name],'RP'
 17226 00000610 26C70608005250          	mov	word [es:8],'RP'
 17227                                  	;mov	word [es:arena_name+2],'L'
 17228 00000617 26C7060A004C00          	mov	word [es:10],'L'
 17229                                  	;mov	word [es:arena_name+4],0
 17230 0000061E 26C7060C000000          	mov	word [es:12],0
 17231                                  	;mov	word [es:arena_name+6],0
 17232 00000625 26C7060E000000          	mov	word [es:14],0	
 17233                                  
 17234 0000062C 07                              pop     es                      ; get back ptr to first block
 17235 0000062D B449                            mov     ah,49h	; Dealloc	; and free it
 17236 0000062F CD21                    	int	21h		
 17237                                  					; DOS - 2+ - FREE MEMORY
 17238                                  					; ES = segment address of area to be freed
 17239                                  	; 11/12/2022
 17240 00000631 F8                      	clc
 17241                                  
 17242                                  ; ----------------------------------------------------------------------------
 17243                                  
 17244                                  NoRPLArena:
 17245                                  	; 11/12/2022
 17246                                  	; ds = cs
 17247                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17248 00000632 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17249                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17250                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17251                                  
 17252                                  	; 11/12/2022
 17253                                  	;clc				; get the extended memory size
 17254                                  
 17255                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17256                                  ;	if the function reports an error do nothing else store the extended
 17257                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17258                                  ;	currently pointed to by es:di. use the offsets specified in the
 17259                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17260                                  
 17261 00000636 B488                    	mov	ah,88h
 17262 00000638 CD15                    	int	15h			; check extended memory size
 17263 0000063A 720B                    	jc	short no_ext_memory
 17264                                  			; Get Extended Memory Size
 17265                                  			; Return: CF clear on success
 17266                                  			; AX = size of memory above 1M in K	
 17267                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17268                                  	; 22/10/2022
 17269 0000063C 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17270 00000640 09C0                    	or	ax,ax
 17271 00000642 7403                    	jz	short no_ext_memory
 17272 00000644 E8F504                  	call	ClrVDISKHeader
 17273                                  no_ext_memory:
 17274                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17275 00000647 268B4510                	mov	ax,[es:di+10h]
 17276                                  	;add	ax,bufinsiz
 17277 0000064B 83C014                  	add	ax,20			; size of buffer header
 17278                                  	; 11/12/2022
 17279                                  	; ds = cs
 17280 0000064E A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17281                                  	;mov	[cs:singlebuffersize],ax	
 17282                                  	; 11/12/2022
 17283 00000651 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17284                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17285                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17286 00000654 26884543                	mov	[es:di+43h],al
 17287                                  
 17288                                  ; determine if 386 system...
 17289                                  
 17290                                  	;get_cpu_type			; macro to determine cpu type
 17291                                  
 17292                                  get_cpu_type:
 17293                                  	; 11/12/2022
 17294 00000658 9C                      	pushf
 17295                                  	;push	bx
 17296                                  	;xor	bx,bx
 17297                                  	; 11/12/2022
 17298                                  	;xor	cx,cx
 17299                                  	;
 17300 00000659 31C0                    	xor	ax,ax
 17301                                  	; ax = 0
 17302 0000065B 50                      	push    ax
 17303 0000065C 9D                      	popf
 17304 0000065D 9C                      	pushf
 17305 0000065E 58                      	pop	ax
 17306 0000065F 2500F0                  	and	ax,0F000h
 17307                                  	;cmp	ax,0F000h
 17308 00000662 80FCF0                  	cmp	ah,0F0h 
 17309 00000665 7410                    	je	short cpu_8086
 17310                                  	;mov	ax,0F000h
 17311 00000667 B4F0                    	mov	ah,0F0h
 17312                                  	; ax = 0F000h
 17313 00000669 50                      	push	ax
 17314 0000066A 9D                      	popf
 17315 0000066B 9C                      	pushf
 17316 0000066C 58                      	pop	ax
 17317                                  	;and	ax,0F000h
 17318 0000066D 80E4F0                  	and	ah,0F0h
 17319 00000670 7405                    	jz	short cpu_286
 17320                                  cpu_386:
 17321                                  	; 11/12/2022
 17322                                  	;;inc	bx
 17323                                  	;inc	cx
 17324                                  	; 11/12/2022
 17325                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17326 00000672 26C6454401              	mov	byte [es:di+44h],1
 17327                                  cpu_286:
 17328                                  	;;;inc	bx
 17329                                  	;;inc	cx
 17330                                  cpu_8086:
 17331                                  	; 11/12/2022
 17332                                  	;;mov	ax,bx	
 17333                                  	;pop	bx
 17334 00000677 9D                      	popf
 17335                                  
 17336                                  	;...
 17337                                  
 17338                                  	; 11/12/2022
 17339                                  	;or	cl,cl
 17340                                  	;jz	short not_386_system
 17341                                  	; 11/12/202
 17342                                  	;cmp	cl,2
 17343                                  	;;cmp	ax,2			; is it a 386?
 17344                                  	;jne	short not_386_system	; no: don't mess with flag
 17345                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17346                                  	; 11/12/2022
 17347                                  	; 22/10/2022
 17348                                  	;mov	byte [es:di+44h],1
 17349                                  not_386_system:
 17350                                  	;mov	al,[es:di+SYSI_NUMIO]
 17351 00000678 268A4520                	mov	al,[es:di+20h]
 17352                                  	; 11/12/2022
 17353                                  	; ds = cs
 17354 0000067C A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17355                                  	;mov	[cs:drivenumber],al
 17356                                  
 17357 0000067F 8CC8                    	mov	ax,cs
 17358 00000681 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17359                                  	; 11/12/2022
 17360                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17361                                  	;;mov	cx,[cs:singlebuffersize]
 17362                                  	;shr	cx,1			
 17363                                  	;shr	cx,1			; divide size by 16...
 17364                                  	;shr	cx,1
 17365                                  	;shr	cx,1			; ...to get paragraphs...
 17366                                  	;inc	cx			; ... and round up
 17367                                  	; 11/12/2022
 17368 00000684 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17369 00000688 B104                    	mov	cl,4
 17370 0000068A D3EB                    	shr	bx,cl
 17371 0000068C 43                      	inc	bx
 17372                                  
 17373                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17374                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17375                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17376                                  ;	  it is probably safe to assume that the sector size always will be.
 17377                                  ;
 17378                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17379                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17380                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17381                                  ;	  other code from ever causing a problem???
 17382                                  
 17383                                  	; 11/12/2022
 17384 0000068D 29D8                    	sub	ax,bx
 17385                                  	;sub	ax,cx
 17386 0000068F A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17387                                  	; 22/10/2022
 17388                                  	;mov	[cs:top_of_cdss],ax
 17389                                  
 17390                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17391                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17392                                  ;	for allocating memory for MagicDrv.
 17393                                  
 17394 00000692 06                      	push	es			; preserve pointer to dosinfo
 17395 00000693 57                      	push	di
 17396                                  
 17397                                  	; 22/10/2022
 17398                                  ;	mov	cx,ax			; save pointer for buffer
 17399                                  ;
 17400                                  ;;	now allocate space for 26 CDSs
 17401                                  ;
 17402                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17403                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17404                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17405                                  
 17406                                  ; setup and initialize the temporary buffer at cx
 17407                                  
 17408                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17409 00000694 26C47D12                	les	di,[es:di+12h]
 17410                                  	; 11/12/2022
 17411 00000698 31DB                    	xor	bx,bx
 17412                                  	;xor	ax,ax
 17413                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17414                                  	;mov	word [es:di+4],0
 17415 0000069A 26895D04                	mov	[es:di+4],bx ; 0
 17416                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17417                                  	;mov	word [es:di],0
 17418 0000069E 26891D                  	mov	[es:di],bx ; 0
 17419                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17420                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17421 000006A1 26894502                	mov	[es:di+2],ax
 17422                                  
 17423                                  	;mov	es,cx
 17424 000006A5 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17425                                  
 17426                                  	; 11/12/2022
 17427                                  	;xor	ax,ax
 17428                                  	;mov	di,ax			; es:di -> single buffer
 17429 000006A7 89DF                    	mov	di,bx
 17430                                  	; di = 0
 17431                                  
 17432                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17433                                  	; 11/12/2022
 17434                                  	;mov	[es:di],ax ; 0
 17435 000006A9 26891D                  	mov	[es:di],bx ; 0
 17436                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17437                                  	; 11/12/2022
 17438                                  	;mov	[es:di+2],ax ; 0
 17439 000006AC 26895D02                	mov	[es:di+2],bx ; 0 
 17440                                  
 17441                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17442                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17443                                  
 17444                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17445 000006B0 26C74504FF00            	mov	word [es:di+4],00FFh
 17446                                  ;SYSINIT:06E6h
 17447                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17448                                  	;mov	word [es:di+6],0
 17449                                  	; 11/12/2022
 17450                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17451 000006B6 26895D06                	mov	[es:di+6],bx ; 0
 17452                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17453                                  	;mov	word [es:di+8],0
 17454                                  	; 11/12/2022
 17455                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17456 000006BA 26895D08                	mov	[es:di+8],bx ; 0
 17457                                  
 17458 000006BE 5F                      	pop	di			; restore pointer to DOSINFO data
 17459 000006BF 07                      	pop	es
 17460                                  
 17461                                  	; 11/12/2022
 17462                                  	; ds = cs
 17463                                  	; 22/10/2022
 17464                                  	;push	cs
 17465                                  	;pop	ds
 17466                                  
 17467 000006C0 E80C05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17468                                  					;  can make disk system calls
 17469                                  					; tempcds trashes ds
 17470                                  	; 10/05/2019
 17471 000006C3 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17472                                  
 17473                                  	;if not ibmjapver
 17474                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17475                                  	;endif
 17476                                  
 17477                                  	; 22/10/2022
 17478                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17479                                  	;call	far ptr 70h:89Bh
 17480 000006C8 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17481                                  
 17482 000006CD FB                      	sti				; ints ok
 17483 000006CE FC                      	cld				; make sure
 17484                                  
 17485                                  ; 23/03/2019
 17486                                  
 17487                                  ;SYSINIT:069Ch
 17488                                  
 17489                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17490                                  ; of the way by putting it just below sysinit at end of memory.
 17491                                  
 17492 000006CF 8CCB                    	mov	bx,cs
 17493 000006D1 83EB10                  	sub	bx,10h
 17494 000006D4 8EC3                    	mov	es,bx
 17495 000006D6 31F6                    	xor	si,si
 17496 000006D8 89F7                    	mov	di,si
 17497 000006DA B98000                  	mov	cx,128
 17498 000006DD F3A5                    	rep	movsw
 17499                                  
 17500                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17501                                  	; 22/10/2022
 17502 000006DF 268C063600              	mov	[es:36h],es
 17503                                  
 17504                                   	; Set Process Data Block - Program Segment Prefix address
 17505                                  	; BX = PDB/PSP segment
 17506 000006E4 B450                            mov	ah,50h ; SET_CURRENT_PDB
 17507 000006E6 CD21                    	int	21h			; tell DOS we moved it
 17508                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17509                                  			; BX = segment address of new PSP
 17510                                  	; 22/10/2022
 17511                                  	; 27/03/2019
 17512 000006E8 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17513                                  
 17514 000006E9 0E                      	push	cs	
 17515 000006EA 1F                      	pop	ds
 17516                                  
 17517                                  	; set up temp. critical error handler
 17518 000006EB BA[A433]                	mov	dx,int24		; set up int 24 handler
 17519                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17520                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17521 000006EE B82425                  	mov	ax,2524h
 17522 000006F1 CD21                    	int	21h
 17523                                  
 17524 000006F3 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17525 000006F8 7405                            je      short no_err		   ;  N: continue            M029
 17526 000006FA BA[A238]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17527                                          ; 22/10/2022
 17528                                  	;call	print 			   ;		             M029
 17529                                  	; 12/12/2022
 17530 000006FD EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17531                                  no_err:
 17532                                  	; 12/05/2019
 17533                                  	;----------------------------------------------
 17534                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17535                                  	; 22/10/2022 - Retro DOS v4.0
 17536                                  	; 12/12/2022
 17537 000006FF BA[A833]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17538                                  p_dosinit_msg:
 17539 00000702 E87A2C                  	call	print			; Print message
 17540                                  	;----------------------------------------------
 17541                                  	
 17542                                  	; 11/12/2022
 17543                                  	; 22/10/2022
 17544                                  	; 23/03/2019 - Retro DOS v4.0
 17545                                  	;pop	ds			; start of free memory
 17546                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17547                                  	
 17548                                  	; 11/12/2022
 17549                                  	; 27/03/2019
 17550 00000705 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17551 00000709 1F                      	pop	ds ; */
 17552                                  
 17553 0000070A 08D2                    	or	dl,dl
 17554                                  	;jz	short nodrvset		; bios didn't say
 17555 0000070C 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17556                                  	;dec	dl			; A = 0
 17557                                  	; 18/12/2022
 17558 0000070E 4A                      	dec	dx
 17559 0000070F B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17560 00000711 CD21                    	int	21h			; select the disk
 17561                                  			; DOS - SELECT DISK
 17562                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17563                                  			; Return: AL = number of logical drives
 17564                                  nodrvset:
 17565                                  	;ifdef	dblspace_hooks
 17566                                  	;	....
 17567                                  	;	....
 17568                                  	;endif	
 17569                                  
 17570                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17571                                  
 17572                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17573                                  ; ----------------------------------------------------------------------------
 17574                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17575                                  
 17576                                  ProcessConfig:
 17577                                  	;; ds = cs ; 27/03/2019
 17578                                  	; 11/12/2022
 17579                                  	; ds <> cs	
 17580                                  
 17581                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17582                                  
 17583 00000713 E8FF17                  	call	doconf			; do pre-scan for dos=high/low
 17584                                  
 17585                                  	; 11/12/2022
 17586                                  	; 27/03/2019
 17587                                  	; ds = cs (at return from doconf)
 17588                                  
 17589                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17590                                  ; It will either be relocated to low memory, above the DOS data structures,
 17591                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17592                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17593                                  ; to tell the DOS data where the code has been placed, and to install the
 17594                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17595                                  ; must first initialize it in its present location and load the installable
 17596                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17597                                  ; relocate the DOS code into HiMem.
 17598                                  ;
 17599                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17600                                  ; to install the low memory stub (this must be done before allowing any
 17601                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17602                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17603                                  ; been patched.
 17604                                  
 17605                                  	; 22/10/2022 - Retro DOS v4.0
 17606                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17607                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17608                                  	; 11/12/2022
 17609 00000716 803E[6A02]00            	cmp	byte [runhigh],0
 17610 0000071B 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17611                                  
 17612                                  ;------ user chose to load high
 17613                                  
 17614                                  	; 22/10/2022
 17615                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17616                                  	; 11/12/2022
 17617                                  	; ds = cs
 17618 0000071D 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17619                                  
 17620                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17621                                  	; 27/03/2019
 17622                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17623                                  
 17624 00000721 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17625                                  	; 11/12/2022
 17626                                  	; ds = cs
 17627                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17628 00000723 FF1E[7B02]              	call	far [dos_segreinit]
 17629                                  
 17630 00000727 EB10                    	jmp	short do_multi_pass
 17631                                  
 17632                                  ;------ User chose to load dos low
 17633                                  
 17634                                  dont_install_stub:
 17635                                  	; 22/10/2022
 17636 00000729 31DB                    	xor	bx,bx			; M012
 17637                                  					; don't use int 21 call to alloc mem
 17638 0000072B E8D701                  	call	MovDOSLo		; move it !
 17639                                  
 17640 0000072E B80100                  	mov	ax,1			; dont install stub
 17641                                  	; 11/12/2022
 17642                                  	; ds = cs
 17643 00000731 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17644                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17645                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17646                                  	; 27/03/2019
 17647                                  ;do_multi_pass:
 17648                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17649                                  
 17650                                  	; 11/12/2022
 17651                                  	; ds =cs
 17652                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17653 00000735 FF1E[7B02]              	call	far [dos_segreinit]
 17654                                  do_multi_pass:
 17655 00000739 E81301                  	call	AllocFreeMem		; allocate all the free mem
 17656                                  					; & update [memhi] & [area]
 17657                                  					; start of free memory.
 17658                                  	;ifdef	dblspace_hooks
 17659                                  	;mov	bx,0			; magic backdoor to place int hooks
 17660                                  	;call	cs:MagicBackdoor
 17661                                  	;endif
 17662                                  
 17663                                  ; Now, process config.sys some more.  
 17664                                  ; Load the device drivers and install programs
 17665                                  
 17666                                  	; 22/10/2022
 17667                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17668                                  	; 11/12/2022
 17669                                  	; ds = cs
 17670 0000073C FE06[4903]              	inc	byte [multi_pass_id]
 17671 00000740 E86518                  	call	multi_pass		; load device drivers
 17672 00000743 E82825                  	call	ShrinkUMB
 17673 00000746 E84E25                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17674                                  	; 02/11/2022
 17675                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17676                                  	; 11/12/2022
 17677                                  	; ds = cs
 17678 00000749 FE06[4903]              	inc	byte [multi_pass_id]
 17679 0000074D E85818                  	call	multi_pass		; was load ifs (now does nothing)
 17680                                  
 17681                                  	;ifdef	dblspace_hooks
 17682                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17683                                  	;endif
 17684                                  
 17685                                  	; ds = cs
 17686                                  	
 17687 00000750 E81405                  	call	endfile			; setup fcbs, files, buffers etc
 17688                                  
 17689                                  	;ifdef	dblspace_hooks
 17690                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17691                                  	;endif
 17692                                  
 17693                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17694                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17695                                  ;with overlays called from installed programs
 17696                                  
 17697                                  	; 11/12/2022
 17698                                  	; ds = cs
 17699                                  
 17700                                  	;;mov	ax,Bios_Data ; 0070h
 17701                                  	;mov	ax,KERNEL_SEGMENT
 17702                                  	; 21/10/2022
 17703 00000753 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17704 00000756 8EC0                    	mov	es,ax			; point ES to bios data
 17705                                  
 17706 00000758 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17707                                  
 17708                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17709                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17710                                  	;test	byte [cs:install_flag],1
 17711                                  	; 11/12/2022
 17712                                  	; ds = cs
 17713 0000075E F606[4A03]01            	test	byte [install_flag],1
 17714                                  	;test	byte [cs:install_flag],have_install_cmd
 17715                                  					; are there install commands?
 17716 00000763 7407                    	jz	short dolast		; no, no need for further processing
 17717                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17718                                  	; 11/12/2022
 17719                                  	; ds =cs
 17720 00000765 FE06[4903]              	inc	byte [multi_pass_id]
 17721 00000769 E83C18                  	call	multi_pass		; execute install= commands
 17722                                  
 17723                                  dolast:
 17724                                  	
 17725                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17726                                  ;  free the confbot area used for config.sys and sysinit itself.
 17727                                  
 17728                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17729                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17730                                  ; anything, but just set up the ROM area for suballocation (or print
 17731                                  ; a message if HiMem is not available).
 17732                                  ;
 17733                                  ; There is also this little hack for CPM style DOS calls that needs to
 17734                                  ; be done when A20 is set...
 17735                                  
 17736                                  	; 11/12/2022
 17737                                  	; ds = cs
 17738                                  
 17739                                  	; 22/10/2022
 17740                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17741                                  	; 11/12/2022
 17742 0000076C 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17743 00000771 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17744 00000773 E83E01                  	call	LoadDOSHiOrLo
 17745                                  _@@_:
 17746                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17747                                  	; 11/12/2022
 17748                                  	; ds = cs
 17749 00000776 803E[6A02]00            	cmp	byte [runhigh],0
 17750                                  	;je	short _@@@
 17751 0000077B 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17752 0000077D E83004                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17753                                  _@@@:
 17754                                  
 17755                                  ; We are now done with CONFIG.SYS processing
 17756                                  
 17757                                  ConfigDone:
 17758                                  	; 12/12/2022
 17759                                  	; 22/10/2022
 17760                                  	;mov	byte [cs:donotshownum],1 
 17761                                  					; done with config.sys.
 17762                                  					; do not show line number message.
 17763                                  	;mov	es,[cs:area]
 17764                                  	; 12/12/2022
 17765                                  	; ds = cs
 17766                                  	; 27/03/2019
 17767 00000780 C606[D103]01            	mov	byte [donotshownum],1
 17768 00000785 8E06[E403]              	mov	es,[area]
 17769                                  
 17770 00000789 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17771 0000078B CD21                    	int	21h
 17772                                  			; DOS - 2+ - FREE MEMORY
 17773                                  			; ES = segment address of area to be freed
 17774                                  
 17775                                  	; 22/10/2022
 17776                                  	;test	word [cs:install_flag],2
 17777                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17778                                  	;test	byte [cs:install_flag],has_installed
 17779                                  	; 11/12/2022
 17780                                  	; ds = cs
 17781 0000078D F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 17782                                  	;test	byte [install_flag],has_installed
 17783 00000792 741F                    	jz	short skip_free_sysinitbase ; no.
 17784                                  
 17785                                  ; set block from the old_area with impossible_owner_size.
 17786                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 17787                                  ; handle install= command.
 17788                                  
 17789                                  	; 12/12/2022
 17790                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17791                                  	;push	bx
 17792                                  	
 17793                                  	; 22/10/2022
 17794                                  	;mov	es,[cs:old_area]
 17795                                  	;mov	bx,[cs:impossible_owner_size]
 17796                                  	; 12/12/2022
 17797                                  	; ds = cs
 17798 00000794 8E06[DA03]              	mov	es,[old_area]
 17799 00000798 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 17800                                  	
 17801 0000079C B44A                    	mov	ah,4Ah ; SETBLOCK
 17802 0000079E CD21                    	int	21h
 17803                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17804                                  			; ES = segment address of block to change
 17805                                  			; BX = new size in paragraphs
 17806 000007A0 8CC0                    	mov	ax,es
 17807 000007A2 48                      	dec	ax
 17808 000007A3 8EC0                    	mov	es,ax			; point to arena
 17809                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 17810 000007A5 26C70601000800          	mov	word [es:1],8
 17811                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 17812 000007AC 26C70608005344          	mov	word [es:8],'SD'
 17813                                  	
 17814                                  	; 12/12/2022
 17815                                  	;pop	bx
 17816                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17817                                  
 17818                                  skip_free_sysinitbase:
 17819                                  	; 22/10/2022
 17820                                  	;cmp	byte [cs:runhigh],0
 17821                                  	; 12/12/2022
 17822                                  	; ds = cs
 17823 000007B3 803E[6A02]00            	cmp	byte [runhigh],0	
 17824 000007B8 7403                    	je	short _@@@@
 17825                                  
 17826 000007BA E8D502                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 17827                                  
 17828                                  ; ----------------------------------------------------------------------------
 17829                                  
 17830                                  _@@@@:
 17831                                  	; 12/12/2022
 17832                                  	; ds = cs
 17833                                  	; 22/10/2022
 17834                                  	; 27/03/2019
 17835                                  	;push	cs
 17836                                  	;pop	ds			; point DS to sysinitseg
 17837                                  
 17838                                  ; set up the parameters for command
 17839                                  
 17840                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17841                                  ;;ifdef  MULTI_CONFIG
 17842                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 17843                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 17844                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 17845                                  ;	; !!!
 17846                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17847                                  ;       ; !!!
 17848                                  ;	call    disable_autoexec        ; no, we should disable it
 17849                                  ;process_autoexec:
 17850                                  ;;endif	; !!!
 17851                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17852                                  ;	; !!!
 17853                                  
 17854                                  	; 22/10/2022 
 17855                                  	;mov     cl,[command_line]
 17856                                          ;mov     ch,0
 17857                                          ;inc     cx
 17858                                          ;mov     si,command_line	
 17859                                  	;add     si,cx
 17860                                          ;mov     byte [si],cr	; cr-terminate command line
 17861                                  
 17862                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17863                                  	; (SYSINIT:0809h)
 17864                                  	
 17865                                  	;mov	si,(offset command_line+1)
 17866 000007BD BE[AA02]                	mov	si,command_line+1
 17867 000007C0 1E                      	push    ds
 17868 000007C1 07                      	pop     es
 17869 000007C2 89F7                    	mov     di,si
 17870 000007C4 B1FF                    	mov     cl,0FFh ; -1
 17871                                  _@_loop:
 17872 000007C6 FEC1                    	inc     cl ; +1
 17873 000007C8 AC                      	lodsb
 17874 000007C9 AA                      	stosb
 17875 000007CA 08C0                    	or      al,al
 17876 000007CC 75F8                    	jnz     short _@_loop
 17877 000007CE 4F                      	dec     di
 17878 000007CF B00D                    	mov     al,0Dh
 17879 000007D1 AA                      	stosb			; cr-terminate command line
 17880 000007D2 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 17881                                  
 17882                                  ; ----------------------------------------------------------------------------
 17883                                  
 17884                                  ;   Once we get to this point, the above code, which is below "retry"
 17885                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 17886                                  ;   which follow....)
 17887                                  
 17888                                  retry:
 17889 000007D6 BA[5534]                	mov	dx,commnd	; now pointing to file description
 17890                                  
 17891                                  ; we are going to open the command interpreter and size it as is done in
 17892                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 17893                                  ; there is not enough room for the command interpreter,exec will probably
 17894                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 17895                                  ; here to catch it. this code is not perfect (for instance .exe command
 17896                                  ; interpreters are possible) because it does its sizing based on the
 17897                                  ; assumption that the file being loaded is a .com file. it is close enough to
 17898                                  ; correctness to be usable.
 17899                                  
 17900                                  ; first, find out where the command interpreter is going to go.
 17901                                  
 17902 000007D9 52                      	push	dx		; save pointer to name
 17903 000007DA BBFFFF                  	mov	bx,0FFFFh
 17904 000007DD B448                    	mov	ah,48h	; ALLOC
 17905 000007DF CD21                            int     21h             ; get biggest piece
 17906 000007E1 B448                    	mov	ah,48h	; ALLOC
 17907 000007E3 CD21                    	int	21h		; second time gets it
 17908 000007E5 7243                    	jc	short memerrjx	; oooops
 17909                                  
 17910 000007E7 8EC0                    	mov	es,ax
 17911 000007E9 B449                    	mov	ah,49h	; DEALLOC
 17912 000007EB CD21                    	int	21h		; give it right back
 17913 000007ED 89DD                    	mov	bp,bx
 17914                                  
 17915                                  ; es:0 points to block,and bp is the size of the block in para.
 17916                                  
 17917                                  ; we will now adjust the size in bp down by the size of sysinit.
 17918                                  ; we need to do this because exec might get upset if some of the exec
 17919                                  ; data in sysinit is overlayed during the exec.
 17920                                  
 17921                                  	; 22/10/2022
 17922                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 17923 000007EF 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 17924 000007F3 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 17925                                  
 17926                                  ; Note that the "config_wrkseg" environment data is a segment in
 17927                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 17928                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 17929                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 17930                                  ; we need to make sure that there's no way Exec will stomp on that data
 17931                                  ; before it can copy it, and one way to do that is to make the available
 17932                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 17933                                  ; from the "memory_size" segment value (which is typically A000h) instead
 17934                                  ; of the current sysinit CS....
 17935                                  ;
 17936                                  ; The reason I use the term "paranoid" is because this code should have
 17937                                  ; slid the data required by Exec up to the very top of memory, because as
 17938                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 17939                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 17940                                  ; consumes). Now it's just a little worse (65K or more, depending on
 17941                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 17942                                  ; is determined by the size of CONFIG.SYS.... -JTP
 17943                                  
 17944                                  	; 22/10/2022
 17945                                  	;mov	cx,[config_envlen]
 17946                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 17947                                          ;mov	ax,[config_wrkseg]
 17948                                  ;no_env:
 17949                                  	; 22/10/2022
 17950                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 17951 000007F5 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 17952 000007F7 83C311                  	add	bx,11h		; add the sysinit php
 17953 000007FA 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 17954 000007FC 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 17955                                  
 17956                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 17957 000007FE B8003D                          mov	ax,3D00h
 17958 00000801 F9                      	stc                     ; in case of int 24
 17959 00000802 CD21                    	int	21h
 17960 00000804 7241                    	jc	short comerr	; ooops
 17961                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17962                                  			; DS:DX -> ASCIZ filename
 17963                                  			; AL = access mode
 17964                                  			; 0 - read
 17965                                  	; 22/10/2022
 17966                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 17967 00000806 89C3                            mov     bx,ax           ; handle in bx
 17968                                  
 17969                                  ;   If the standard command interpreter is being used, verify it is correct
 17970                                  
 17971                                  	; 22/10/2022
 17972                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 17973                                  	;jne	short skip_validation ; yes
 17974                                  	;mov	dx,retry-4
 17975                                  	;mov	cx,4		;
 17976                                  	;mov	ah,READ		;
 17977                                  	;int	21h		;
 17978                                  	;cmp	byte [retry-4],0E9h
 17979                                  	;jne	short comerr
 17980                                  	;; 20/04/2019 - Retro DOS v4.0
 17981                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 17982                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 17983                                  	;jne	short comerr	;
 17984                                  
 17985                                  ;skip_validation:
 17986                                  	; 22/10/2022
 17987                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 17988 00000808 31C9                    	xor	cx,cx
 17989 0000080A 31D2                    	xor	dx,dx
 17990                                  	;mov	ax,(LSEEK<<8)|2
 17991 0000080C B80242                  	mov	ax,4202h
 17992 0000080F F9                      	stc			;in case of int 24
 17993 00000810 CD21                    	int	21h		; get file size in dx:ax
 17994 00000812 7233                    	jc	short comerr
 17995                                  				; convert size in dx:ax to para in ax
 17996 00000814 83C00F                  	add	ax,15		; round up size for conversion to para
 17997 00000817 83D200                  	adc	dx,0
 17998 0000081A E8A903                  	call	off_to_para
 17999 0000081D B10C                    	mov	cl,12
 18000 0000081F D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18001 00000821 09D0                    	or	ax,dx		; ax is now # of para for file
 18002 00000823 83C010                  	add	ax,10h		; 100h byte php
 18003 00000826 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18004 00000828 7203                    	jb	short okld	; jump if yes.
 18005                                  
 18006                                  	; 22/10/2022
 18007                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18008                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18009                                  	; 02/11/2022
 18010                                  	;jmp	mem_err
 18011                                  	; 11/12/2022
 18012                                  	; ds = cs
 18013 0000082A E9D628                  	jmp	mem_err2
 18014                                  
 18015                                  ;memerrjx:
 18016                                  ;	mov	dx,badmem
 18017                                  ;	call	print
 18018                                  ;       jmp     short continue
 18019                                  
 18020                                  okld:
 18021 0000082D B43E                    	mov	ah,3Eh ; CLOSE
 18022 0000082F CD21                    	int	21h		; close file
 18023                                  
 18024                                  	; 22/10/2022
 18025 00000831 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18026                                  
 18027                                  	; 24/03/2019
 18028                                  
 18029 00000832 0E                      	push	cs		; point es to sysinitseg
 18030 00000833 07                      	pop	es
 18031 00000834 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18032                                  	; 22/10/2022
 18033                                  	;pop	dx              ; recover pointer to name
 18034                                  
 18035                                  ;;ifdef	MULTI_CONFIG
 18036                                  
 18037                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18038                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18039                                  ;   selection was made (in which case the CONFIG environment variable will be
 18040                                  ;   set to that selection).
 18041                                  
 18042                                  	; 23/10/2022
 18043                                  	;mov	cx,[config_envlen]
 18044                                  	;jcxz	no_envdata
 18045                                          ;mov	cx,[config_wrkseg]
 18046                                  ;no_envdata:
 18047                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18048                                  	;mov	[bx],cx
 18049                                  
 18050                                  ;;endif	;MULTI_CONFIG
 18051                                  
 18052                                  	; 23/10/2022
 18053                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18054                                  
 18055                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18056 00000837 8C4F04                  	mov	[bx+4],cs
 18057                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18058 0000083A 8C4F08                  	mov	[bx+8],cs
 18059                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18060 0000083D 8C4F0C                  	mov	[bx+12],cs
 18061                                  
 18062                                  	;mov	ax,(EXEC<<8) + 0
 18063                                  	; 23/10/2022
 18064 00000840 31C0                    	xor	ax,ax
 18065 00000842 B44B                    	mov	ah,4Bh        
 18066                                  
 18067 00000844 F9                      	stc                     ; in case of int 24
 18068 00000845 CD21                            int     21h             ; go start up command
 18069                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18070                                  			; DS:DX -> ASCIZ filename
 18071                                  			; ES:BX -> parameter block
 18072                                  			; AL = subfunc: load & execute program
 18073                                  	;push	cs
 18074                                  	;pop	ds
 18075                                  
 18076                                  	; 23/10/2022
 18077                                  	;push	dx		; push to balance fall-through pop
 18078                                  
 18079                                  ; note fall through if exec returns (an error)
 18080                                  comerr:
 18081                                  	; 23/10/2022
 18082                                  ;;ifdef	MULTI_CONFIG
 18083                                  	;cmp	byte [commnd4],0
 18084                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18085                                  	;cmp	byte [newcmd],0
 18086                                  	;je	short continue	; don't print err msg for defaults just yet
 18087                                  ;comerr2:
 18088                                  ;;endif
 18089 00000847 BA[A537]                        mov     dx,badcom	; want to print command error
 18090 0000084A E8062B                  	call	badfil
 18091                                  continue:
 18092                                  	; 23/10/2022
 18093                                  	;pop	dx
 18094                                  
 18095                                  ;;ifndef MULTI_CONFIG
 18096                                  	;jmp	stall
 18097                                  	; 24/10/2022
 18098                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18099 0000084D EBFE                    	jmp	short stall
 18100                                  ;;else
 18101                                  	; 23/10/2022
 18102                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18103                                  	;int	21h             ;
 18104                                  	;add	al,'A'          ;
 18105                                  	;mov	dl,al           ; DL == default drive letter
 18106                                  	;mov	si,commnd2
 18107                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18108                                  	;jne	short do_def2	; then try the 2nd alternate;
 18109                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18110                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18111                                  ;do_def2:			
 18112                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18113                                          ;jne	short do_alt    ; no
 18114                                  ;do_def3:
 18115                                  	;mov	si,commnd3
 18116                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18117                                  	;jne	short do_alt	; no
 18118                                  	;mov	si,commnd4
 18119                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18120                                  	;jne	short do_alt	; no
 18121                                  	;push	dx              ;
 18122                                  	;mov	dx,badcomprmpt
 18123                                  	;call	print		;
 18124                                  	;pop	dx              ; recover default drive letter in DL
 18125                                  ;request_input:			;
 18126                                  	;mov	ah,STD_CON_OUTPUT
 18127                                  	;int	21h             ;
 18128                                  	;push	dx              ;
 18129                                  	;mov	dl,'>'          ;
 18130                                  	;int	21h             ;
 18131                                  	;mov	bl,[tmplate+1]	;
 18132                                  	;mov	bh,0            ;
 18133                                  	;mov	byte [commnd+bx],0Dh
 18134                                  	;mov	dx,tmplate
 18135                                  	;mov	ah,STD_CON_STRING_INPUT
 18136                                  	;int	21h             ; read a line of input
 18137                                  	;mov	dx,crlfm	;
 18138                                  	;call	print           ;
 18139                                  	;pop	dx              ;
 18140                                  	;mov	bl,[tmplate+1]	;
 18141                                  	;or	bl,bl           ; was anything typed?
 18142                                  	;jz	short request_input ;
 18143                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18144                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18145                                  	;mov	word [command_line],0D00h
 18146                                  	;jmp	short do_exec   ;
 18147                                  ;do_alt:
 18148                                  	;push	ds
 18149                                  	;pop	es
 18150                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18151                                  	;mov	di,commnd	;
 18152                                  ;do_alt1:
 18153                                  	;lodsb			; copy the alternate, zapping it as we go,
 18154                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18155                                  	;stosb 			;
 18156                                  	;or	al,al		;
 18157                                  	;jnz	short do_alt1	;
 18158                                  	;mov	di,command_line
 18159                                  	;cmp	byte [si+2],':'
 18160                                  	;jne	short do_alt2	;
 18161                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18162                                  ;do_alt2:			;
 18163                                  	;lodsb			;
 18164                                  	;stosb			;
 18165                                  	;or	al,al           ;
 18166                                  	;jnz	short do_alt2   ;
 18167                                  	;mov	byte [di-1],cr
 18168                                  
 18169                                  ;;   Last but not least, see if we need to call disable_autoexec
 18170                                  
 18171                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18172                                  	;;cmp	[command_line-1],0
 18173                                          ;;jne	short do_exec   ;
 18174                                          ;;mov	[command_line-1],'/'
 18175                                  	;;call	disable_autoexec ;
 18176                                  
 18177                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18178                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18179                                  	;call	disable_autoexec
 18180                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18181                                  ;do_exec:
 18182                                  	;jmp     retry		;
 18183                                  
 18184                                  ;;endif	;MULTI_CONFIG
 18185                                  
 18186                                  ; 24/03/2019 - Retro DOS v4.0
 18187                                  
 18188                                  ; ----------------------------------------------------------------------
 18189                                  ; procedure : AllocFreeMem
 18190                                  ;
 18191                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18192                                  ; DOS is at temporary location when this call is being made
 18193                                  ;
 18194                                  ; Inputs : None
 18195                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18196                                  ;	   [area] & [memhi] set to the para value of the start of the
 18197                                  ;	   free memory.
 18198                                  ;
 18199                                  ; Uses   : AX, BX
 18200                                  ;
 18201                                  ; ----------------------------------------------------------------------
 18202                                  
 18203                                  	; 23/10/2022
 18204                                  AllocFreeMem:
 18205 0000084F BBFFFF                  	mov	bx,0FFFFh
 18206 00000852 B448                    	mov	ah,48h ; ALLOC
 18207 00000854 CD21                    	int	21h			; first time fails
 18208 00000856 B448                    	mov	ah,48h ; ALLOC
 18209 00000858 CD21                    	int	21h			; second time gets it
 18210                                  	; 11/12/2022
 18211                                  	; ds = cs
 18212                                  	;mov	[cs:area],ax
 18213                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18214 0000085A A3[E403]                	mov	[area],ax
 18215 0000085D A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18216 00000860 C3                      	retn				; start of free memory
 18217                                  				
 18218                                  	; include msbio.cl6
 18219                                  ; ----------------------------------------------------------------------
 18220                                  DOSLOMSG:
 18221 00000861 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18221 0000086A 7661696C61626C653A-
 18221 00000873 204C6F6164696E6720-
 18221 0000087C 444F53206C6F770D0A-
 18221 00000885 24                 
 18222                                  FEmsg:
 18223 00000886 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18223 0000088F 6F723A2043616E6E6F-
 18223 00000898 7420616C6C6F636174-
 18223 000008A1 65204D656D6F727920-
 18223 000008AA 666F7220444F530D0A-
 18223 000008B3 24                 
 18224                                  
 18225                                  ; ----------------------------------------------------------------------
 18226                                  ;
 18227                                  ; procedure : LoadDOSHiOrLo
 18228                                  ;
 18229                                  ;		Tries to move DOS into HMA. If it fails then loads
 18230                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18231                                  ;		moved; this just tries to allocate the HMA, and prints
 18232                                  ;		a message if this is not possible.
 18233                                  ;
 18234                                  ; ----------------------------------------------------------------------
 18235                                  
 18236                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18237                                  LoadDOSHiOrLo:
 18238                                  	; 27/03/2019 - Retro DOS v4.0
 18239                                  	; ds = cs
 18240 000008B4 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18241                                  	;jc	short LdngLo		; If that don't work...
 18242                                  	;retn
 18243                                  	; 18/12/2022
 18244 000008B7 731C                    	jnc	short LoadDosHi_ok
 18245                                  LdngLo:
 18246                                  	; 23/10/2022
 18247                                  	;push	cs
 18248                                  	;pop	ds
 18249                                  	; 11/12/2022
 18250                                  	; ds = cs
 18251 000008B9 B409                    	mov	ah,9
 18252 000008BB BA[6108]                	mov	dx,DOSLOMSG		; inform user that we are
 18253 000008BE CD21                    	int	21h			; loading low
 18254                                  
 18255                                  ;ifndef ROMDOS
 18256                                  	; actually move the dos, and reinitialize it.
 18257                                  
 18258 000008C0 BB0100                  	mov	bx,1				; M012
 18259                                  						;  use int 21 alloc for mem
 18260 000008C3 E83F00                  	call	MovDOSLo
 18261                                  	; 11/12/2022
 18262                                  	; ds = cs
 18263                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18264                                  	; 23/10/2022
 18265 000008C6 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18266                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18267                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18268 000008CA 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18269                                  	; 11/12/2022
 18270                                  	; ds = cs
 18271                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18272 000008CC FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18273                                  	
 18274                                  ;endif ; ROMDOS
 18275                                  	; 23/10/2022
 18276                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18277                                  	; 11/12/2022
 18278                                  	; ds = cs
 18279 000008D0 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18280                                  LoadDosHi_ok:	; 18/12/2022
 18281 000008D5 C3                      	retn
 18282                                  
 18283                                  ; ----------------------------------------------------------------------
 18284                                  ;
 18285                                  ; procedure : TryToMovDOSHi
 18286                                  ;
 18287                                  ;		This tries to move DOS into HMA.
 18288                                  ;		Returns CY if it failed.
 18289                                  ;		If it succeeds returns with carry cleared.
 18290                                  ;
 18291                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18292                                  ;		the A20 switching code in the low mem stub to be installed.
 18293                                  ; 
 18294                                  ; ----------------------------------------------------------------------
 18295                                  
 18296                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18297                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18298                                  TryToMovDOSHi:
 18299                                  	; 11/12/2022
 18300                                  	; 27/03/2019 - Retro DOS v4.0
 18301                                  	; ds = cs
 18302 000008D6 E81300                  	call	MovDOSHi
 18303 000008D9 7210                    	jc	short ttldhx
 18304                                  
 18305                                  ;ifndef ROMDOS
 18306                                  	; 23/10/2022
 18307                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18308                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18309                                  	; 11/12/2022
 18310                                  	; ds = cs
 18311 000008DB 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18312                                  ;else
 18313                                  ;	..
 18314                                  ;endif ; ROMDOS
 18315                                  
 18316                                  	; 11/12/2022
 18317                                  	; ds = cs
 18318 000008DF 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18319                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18320 000008E1 FF1E[7B02]              	call	far [dos_segreinit]
 18321                                  	;mov	byte [cs:runhigh],1
 18322 000008E5 C606[6A02]01            	mov	byte [runhigh],1
 18323 000008EA F8                      	clc
 18324                                  ttldhx:
 18325 000008EB C3                      	retn
 18326                                  
 18327                                  ; ----------------------------------------------------------------------
 18328                                  ;
 18329                                  ; procedure : MovDOSHi
 18330                                  ;
 18331                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18332                                  ;		For ROMDOS, the code is not actually moved, but the
 18333                                  ;		HMA is allocated and prepared for sub-allocation.
 18334                                  ;
 18335                                  ;		Returns : CY if it failed
 18336                                  ;
 18337                                  ; ----------------------------------------------------------------------
 18338                                  
 18339                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18340                                  MovDOSHi:
 18341                                  	; 14/05/2019
 18342                                  	; 27/03/2019 - Retro DOS v4.0
 18343                                  	; ds = cs
 18344 000008EC E8D700                  	call	AllocHMA
 18345 000008EF 7213                    	jc	short mdhx			; did we get HMA?
 18346 000008F1 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18347 000008F4 8EC0                    	mov	es,ax
 18348                                  
 18349                                  ;ifndef ROMDOS
 18350                                  	; actually move the BIOS and DOS
 18351                                  
 18352                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18353                                  	; 24/03/2019
 18354                                  	
 18355                                  	; 23/10/2022
 18356 000008F6 E83400                  	call	MovBIOS				; First move BIOS into HMA
 18357                                  
 18358                                  	; ES:DI points to free HMA after BIOS
 18359                                  	
 18360                                  	; 14/05/2019
 18361                                  	; 24/03/2019 - Retro DOS v4.0
 18362                                  	;xor	di,di
 18363                                  	
 18364                                  	; 23/10/2022
 18365                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18366                                  	; 11/12/2022
 18367                                  	; ds = cs
 18368 000008F9 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18369 000008FD E81100                  	call	MovDOS				; and move it
 18370                                  
 18371                                  	; ES:DI points to free HMA after DOS
 18372                                  ;else
 18373                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18374                                  ;
 18375                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18376                                  ;
 18377                                  ;endif ; ROMDOS
 18378                                  
 18379 00000900 E86102                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18380 00000903 F8                      	clc
 18381                                  mdhx:
 18382 00000904 C3                      	retn
 18383                                  
 18384                                  ; ----------------------------------------------------------------------
 18385                                  ;
 18386                                  ; procedure : MovDOSLo
 18387                                  ;
 18388                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18389                                  ;
 18390                                  ; ----------------------------------------------------------------------
 18391                                  
 18392                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18393                                  
 18394                                  ;ifndef ROMDOS
 18395                                  
 18396                                  MovDOSLo:
 18397                                  	; 14/05/2019
 18398                                  	; 27/03/2019 - Retro DOS v4.0
 18399                                  	; ds = cs
 18400 00000905 E84700                  	call	AllocMemForDOS			; incestuosly!!!
 18401                                  	
 18402                                  	; 23/10/2022
 18403                                  	; 14/05/2019
 18404                                  	;inc	ax  ; skip MCB
 18405                                  	
 18406 00000908 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18407                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18408                                  	; 24/03/2019
 18409                                  	
 18410                                  	; 23/10/2022
 18411 0000090A E82000                  	call	MovBIOS
 18412                                  
 18413                                  ;------ ES:DI points memory immediately after BIOS
 18414                                  
 18415                                  	; 14/05/2019
 18416                                  	; NOTE: 
 18417                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18418                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18419                                  
 18420                                  	; 24/03/2019 - Retro DOS v4.0
 18421                                  	;xor	di,di	
 18422                                  
 18423                                  	; 23/10/2022
 18424                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18425                                  	; 11/12/2022
 18426                                  	; ds = cs
 18427 0000090D 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18428                                  	;call	MovDOS
 18429                                  	;retn
 18430                                  	; 11/12/2022
 18431                                  	;jmp	short MovDOS
 18432                                  
 18433                                  ;endif ; ROMDOS
 18434                                  
 18435                                  ; 11/12/2022
 18436                                  
 18437                                  ; ----------------------------------------------------------------------
 18438                                  ;
 18439                                  ; procedure : MovDOS
 18440                                  ;
 18441                                  ;		Moves DOS code into requested area
 18442                                  ;
 18443                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18444                                  ;	     CX    - size of DOS code to be moved
 18445                                  ;
 18446                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18447                                  ;
 18448                                  ; ----------------------------------------------------------------------
 18449                                  
 18450                                  	; 11/12/2022
 18451                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18452                                  
 18453                                  ;ifndef ROMDOS
 18454                                  
 18455                                  MovDOS:
 18456                                  	; 14/05/2019
 18457                                  	; 27/03/2019 - Retro DOS v4.0
 18458                                  
 18459                                  	; 11/12/2022
 18460                                  	; ds = cs
 18461                                  
 18462                                  	; 23/10/2022
 18463                                  	;push	ds ; *//
 18464                                  	
 18465 00000911 06                      	push	es
 18466 00000912 57                      	push	di
 18467                                  
 18468                                  	; 11/12/2022
 18469 00000913 1E                      	push	ds ; *// ; 11/12/202
 18470                                  
 18471                                  	; 29/04/2019
 18472 00000914 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18473                                  	; 23/10/2022
 18474                                  	;lds	si,[cs:dosinit]
 18475                                  	;;mov	ax,si
 18476                                  
 18477 00000918 F3A4                    	rep	movsb
 18478                                  
 18479 0000091A 1F                      	pop	ds ; *// ; 11/12/2022
 18480                                  
 18481 0000091B 5B                      	pop	bx				; get back offset into which
 18482                                  						;  DOS was moved
 18483                                  
 18484 0000091C 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18485                                  						;  wants to run
 18486 00000920 29D8                    	sub	ax,bx
 18487 00000922 E8A102                  	call	off_to_para
 18488 00000925 5B                      	pop	bx				; get the segment at which
 18489                                  						;  we moved DOS into
 18490 00000926 29C3                    	sub	bx,ax				; Adjust segment
 18491                                  	
 18492                                  	; 11/12/2022
 18493                                  	; 23/10/2022
 18494                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18495                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18496                                  	; 11/12/2022
 18497 00000928 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18498                                  		
 18499                                  	; 27/03/2019
 18500                                  	;pop	ds ; *//
 18501                                  	; ds = cs
 18502                                  	;mov	[FINAL_DOS_LOCATION],bx
 18503                                  
 18504 0000092C C3                      	retn
 18505                                  
 18506                                  ;endif ;ROMDOS
 18507                                  
 18508                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18509                                  ; 24/03/2019
 18510                                  ; ----------------------------------------------------------------------
 18511                                  ;
 18512                                  ; procedure : MovBIOS
 18513                                  ;
 18514                                  ;		Moves BIOS code into requested segment
 18515                                  ;
 18516                                  ;	In : ES - segment to which BIOS is to be moved
 18517                                  ;		  ( it moves always into offset BCode_Start)
 18518                                  ;
 18519                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18520                                  ;
 18521                                  ; ----------------------------------------------------------------------
 18522                                  
 18523                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18524                                  
 18525                                  ;ifndef ROMDOS
 18526                                  
 18527                                  MovBIOS: ; proc	near
 18528                                  	; 11/12/2022
 18529 0000092D 1E                      	push	ds ; ds = cs	
 18530                                  	;
 18531                                  	; 23/10/2022
 18532                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18533                                  	; 17/09/2023
 18534 0000092E 8E1E[8702]              	mov	ds,[temp_bcode_seg]	
 18535                                  	;mov	si,BCODE_START ; mov si,30h
 18536                                  	; 09/12/2022
 18537 00000932 BE[3000]                	mov	si,BCODESTART
 18538 00000935 89F7                    	mov	di,si
 18539 00000937 B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18540 0000093A 29F1                    	sub	cx,si				; size of BIOS
 18541 0000093C D1E9                    	shr	cx,1				; Both the labels are para
 18542                                  						;  aligned
 18543 0000093E F3A5                    	rep	movsw
 18544                                  	
 18545                                  	; 11/12/2022
 18546 00000940 1F                      	pop	ds ; ds = cs
 18547                                  	;
 18548 00000941 06                      	push	es
 18549 00000942 57                      	push	di				; save end of BIOS
 18550 00000943 8CC0                    	mov	ax,es
 18551                                  	;
 18552                                  	; 11/12/2022
 18553                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18554                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18555                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18556                                  	; ds = cs
 18557 00000945 A3[0004]                	mov	[BCodeSeg],ax
 18558 00000948 FF1E[8502]              	call	far [seg_reinit_ptr]
 18559                                  	;
 18560 0000094C 5F                      	pop	di
 18561 0000094D 07                      	pop	es				; get back end of BIOS
 18562 0000094E C3                      	retn
 18563                                  
 18564                                  ;MovBIOS endp
 18565                                  
 18566                                  ;endif ; ROMDOS
 18567                                  
 18568                                  ; 11/12/2022
 18569                                  %if 0
 18570                                  
 18571                                  ; 24/03/2019
 18572                                  
 18573                                  ; ----------------------------------------------------------------------
 18574                                  ;
 18575                                  ; procedure : MovDOS
 18576                                  ;
 18577                                  ;		Moves DOS code into requested area
 18578                                  ;
 18579                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18580                                  ;	     CX    - size of DOS code to be moved
 18581                                  ;
 18582                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18583                                  ;
 18584                                  ; ----------------------------------------------------------------------
 18585                                  
 18586                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18587                                  
 18588                                  ;ifndef ROMDOS
 18589                                  
 18590                                  MovDOS:
 18591                                  	; 14/05/2019
 18592                                  	; 27/03/2019 - Retro DOS v4.0
 18593                                  
 18594                                  	; 11/12/2022
 18595                                  	; ds = cs
 18596                                  
 18597                                  	; 23/10/2022
 18598                                  	;push	ds ; *//
 18599                                  	
 18600                                  	push	es
 18601                                  	push	di
 18602                                  
 18603                                  	; 11/12/2022
 18604                                  	push	ds ; *// ; 11/12/202
 18605                                  
 18606                                  	; 29/04/2019
 18607                                  	lds	si,[dosinit] ; 11/12/2022
 18608                                  	; 23/10/2022
 18609                                  	;lds	si,[cs:dosinit]
 18610                                  	;;mov	ax,si
 18611                                  
 18612                                  	rep	movsb
 18613                                  
 18614                                  	pop	ds ; *// ; 11/12/2022
 18615                                  
 18616                                  	pop	bx				; get back offset into which
 18617                                  						;  DOS was moved
 18618                                  
 18619                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18620                                  						;  wants to run
 18621                                  	sub	ax,bx
 18622                                  	call	off_to_para
 18623                                  	pop	bx				; get the segment at which
 18624                                  						;  we moved DOS into
 18625                                  	sub	bx,ax				; Adjust segment
 18626                                  	
 18627                                  	; 11/12/2022
 18628                                  	; 23/10/2022
 18629                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18630                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18631                                  	; 11/12/2022
 18632                                  	mov	[CURRENT_DOS_LOCATION],bx
 18633                                  		
 18634                                  	; 27/03/2019
 18635                                  	;pop	ds ; *//
 18636                                  	; ds = cs
 18637                                  	;mov	[FINAL_DOS_LOCATION],bx
 18638                                  
 18639                                  	retn
 18640                                  
 18641                                  ;endif ;ROMDOS
 18642                                  
 18643                                  %endif
 18644                                  
 18645                                  ; ----------------------------------------------------------------------
 18646                                  ;
 18647                                  ; procedure : AllocMemForDOS
 18648                                  ;
 18649                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18650                                  ;
 18651                                  ;	Out : AX - seg of allocated memoryblock
 18652                                  ;
 18653                                  ; ----------------------------------------------------------------------
 18654                                  
 18655                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18656                                  
 18657                                  ;ifndef ROMDOS
 18658                                  
 18659                                  AllocMemForDOS:
 18660                                  	; 11/12/2022
 18661                                  	; 14/05/2019
 18662                                  	; 27/03/2019 - Retro DOS v4.0
 18663                                  	; ds = cs
 18664                                  	;mov	ax,BCode_end
 18665                                  	;sub	ax,BCode_start		; BIOS code size
 18666                                  	; 23/10/2022
 18667 0000094F B8001A                  	mov	ax,BCODE_END ; 1A60h
 18668                                  	;sub	ax,BCODE_START ; 30h
 18669                                  	; 09/12/2022
 18670 00000952 2D[3000]                	sub	ax,BCODESTART 
 18671                                  	; 24/03/2019 - Retro DOS v4.0 
 18672                                  	; 02/11/2022
 18673                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18674                                  	; 11/12/2022
 18675                                  	; ds = cs
 18676 00000955 0306[7F02]              	add	ax,[lo_doscod_size]
 18677 00000959 83C00F                  	add	ax,15
 18678 0000095C E86702                  	call	off_to_para			; convert to para
 18679                                  	; 23/10/2022
 18680                                  	; 14/05/2019
 18681                                  	;inc	ax ; + 1 paragraph for MCB
 18682 0000095F 09DB                    	or	bx,bx				; M012
 18683 00000961 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18684 00000963 741A                    	jz	short update_arena		; M012
 18685 00000965 B448                    	mov	ah,48h				; request DOS
 18686 00000967 CD21                    	int	21h
 18687 00000969 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18688                                   	; 23/10/2022
 18689                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18690 0000096B 83E803                  	sub	ax,3				; Take care ORG 30h of
 18691                                  						;  BIOS code
 18692 0000096E 8EC0                    	mov	es,ax
 18693                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18694                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18695                                  	; 14/05/2019
 18696                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18697                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18698                                  	; 23/10/2022
 18699 00000970 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18700 00000977 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18701                                  
 18702 0000097E C3                      	retn
 18703                                  
 18704                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18705                                  ;	  using DOS itself causes an arena to be generated.
 18706                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18707                                  ;	  assume that the device drivers are loaded into
 18708                                  ;	  the first arena. For this reason, MagicDrv's
 18709                                  ;	  main device driver header arena is manually
 18710                                  ;	  truncated from the arena chain, and the space
 18711                                  ;	  for DOS is allocated using the following
 18712                                  ;	  simple code, which also assumes that the
 18713                                  ;	  first arena is the free one where DOS's low
 18714                                  ;	  stub will go.
 18715                                  ;
 18716                                  ; M012 : BEGIN
 18717                                  
 18718                                  	; 23/10/2022
 18719                                  update_arena:
 18720 0000097F 1E                      	push	ds ; ds = cs
 18721 00000980 57                      	push	di
 18722 00000981 51                      	push	cx
 18723 00000982 52                      	push	dx
 18724                                  	; 23/10/2022
 18725                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18726                                  	; 11/12/2022
 18727                                  	; ds = cs 
 18728 00000983 C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18729 00000987 4F                      	dec	di
 18730 00000988 4F                      	dec	di				; Arena head is immediately
 18731                                  						;  before sysvar
 18732 00000989 8E05                    	mov	es,[di]				; es = arena head
 18733                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18734 0000098B 268B0E0300              	mov	cx,[es:3]
 18735 00000990 39D9                    	cmp	cx,bx				; is it sufficient ?
 18736 00000992 7227                    	jb	short FatalErr			; no, fatal error
 18737                                  
 18738                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18739 00000994 268A160000              	mov	dl,[es:0]
 18740 00000999 8CC0                    	mov	ax,es
 18741 0000099B 01D8                    	add	ax,bx				; ax = new arena head
 18742 0000099D 8905                    	mov	[di],ax				; store it in DOS data area
 18743 0000099F 8ED8                    	mov	ds,ax
 18744                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18745 000009A1 88160000                	mov	[0],dl
 18746                                  	;mov	word [ARENA.OWNER],0		; free
 18747 000009A5 C70601000000            	mov	word [1],0
 18748 000009AB 29D9                    	sub	cx,bx				; size of the new block
 18749                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18750 000009AD 890E0300                	mov	[3],cx
 18751 000009B1 8CC0                    	mov	ax,es				; return seg to the caller
 18752                                  	; 23/10/2022
 18753                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18754 000009B3 83E803                  	sub	ax,3				;  BIOS code
 18755 000009B6 5A                      	pop	dx
 18756 000009B7 59                      	pop	cx
 18757 000009B8 5F                      	pop	di
 18758 000009B9 1F                      	pop	ds ; ds = cs
 18759 000009BA C3                      	retn
 18760                                  ;
 18761                                  ; M012 : END
 18762                                  ;
 18763                                  FatalErr:
 18764 000009BB 0E                      	push	cs
 18765 000009BC 1F                      	pop	ds
 18766 000009BD BA[8608]                	mov	dx,FEmsg
 18767 000009C0 B409                    	mov	ah,9
 18768 000009C2 CD21                    	int	21h 		; DOS - PRINT STRING
 18769                                  				; DS:DX -> string terminated by "$"
 18770                                          ;jmp	stall
 18771                                  	; 23/10/2022
 18772 000009C4 FA                      	cli
 18773 000009C5 F4                      	hlt
 18774                                  
 18775                                  ;endif ;ROMDOS
 18776                                  
 18777                                  ; 25/03/2019 - Retro DOS v4.0
 18778                                  
 18779                                  ; ----------------------------------------------------------------------
 18780                                  ;
 18781                                  ; procedure : AllocHMA
 18782                                  ;
 18783                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 18784                                  ;	  up there. If it gets any sort of error, it will return with
 18785                                  ;	  carry set so that we can resort to running low.
 18786                                  ;
 18787                                  ;	It also returns ES: -> 0ffffh if it returns success
 18788                                  ;
 18789                                  ; ----------------------------------------------------------------------
 18790                                  
 18791                                  AllocHMA:
 18792                                  ;	cas note:  The pre-286 check is no longer needed here since the
 18793                                  ;		   presence of XMS is sufficient. However, this code hasn't
 18794                                  ;		   been deleted because it can be recycled for skipping the
 18795                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 18796                                  ;		   in the case of a pre-286.
 18797                                  
 18798                                  ;;	see if we're running on a pre-286. If not, force low.
 18799                                  ;
 18800                                  ;	xor	ax,ax
 18801                                  ;	pushf			; save flags (like int)
 18802                                  ;	push	ax
 18803                                  ;	popf
 18804                                  ;	pushf
 18805                                  ;	pop	ax
 18806                                  ;	popf			; restore original flags (like int)
 18807                                  ;	and	ax,0F000h
 18808                                  ;	cmp	ax,0F000h	; 8088/8086?
 18809                                  ;	jz	short grab_hma_error
 18810                                  
 18811                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18812                                  	; (SYSINIT:0A26h)
 18813                                  
 18814 000009C6 1E                      	push	ds
 18815                                  	;;mov	ax,Bios_Data
 18816                                  	;mov	ax,KERNEL_SEGMENT
 18817                                  	; 21/10/2022
 18818 000009C7 B87000                  	mov	ax,DOSBIODATASEG
 18819 000009CA 8ED8                    	mov	ds,ax
 18820                                  
 18821 000009CC E84A00                  	call	IsXMSLoaded
 18822 000009CF 7545                    	jnz	short grabhma_error
 18823                                  
 18824 000009D1 B81043                  	mov	ax,4310h
 18825 000009D4 CD2F                    	int	2Fh		; get the vector into es:bx
 18826                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 18827                                  		; Return: ES:BX -> driver entry point
 18828                                  
 18829 000009D6 891E[0E00]              	mov	[xms],bx
 18830                                  	;mov	[0Eh], bx
 18831 000009DA 8C06[1000]              	mov	[xms+2],es
 18832                                  	;mov	[10h],es
 18833                                  
 18834 000009DE B401                    	mov	ah,1		; request HMA
 18835 000009E0 BAFFFF                  	mov	dx,0FFFFh
 18836                                  	;call	dword ptr ds:0Eh
 18837 000009E3 FF1E[0E00]              	call	far [xms]
 18838 000009E7 48                      	dec	ax
 18839 000009E8 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 18840                                  
 18841                                  ;------ Himem may be lying because it has allocated mem for int 15
 18842                                  
 18843 000009EA B488                    	mov	ah,88h
 18844 000009EC CD15                    	int	15h
 18845                                  		; Get Extended Memory Size
 18846                                  		; Return: CF clear on success
 18847                                  		; AX = size of memory above 1M in K
 18848 000009EE 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 18849                                  	;jb	short grabhma_error
 18850                                  	; 11/12/2022
 18851 000009F1 7224                    	jb	short grabhma_err ; cf=1
 18852                                  allocHMA_1:
 18853 000009F3 B405                    	mov	ah,5		; localenableA20
 18854                                  	;call	dword ptr ds:0Eh
 18855 000009F5 FF1E[0E00]              	call	far [xms]
 18856 000009F9 48                      	dec	ax
 18857 000009FA 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 18858                                  
 18859 000009FC E88901                  	call	IsVDiskInstalled
 18860 000009FF 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 18861                                  
 18862 00000A01 B8FFFF                  	mov	ax,0FFFFh
 18863 00000A04 8EC0                    	mov	es,ax
 18864 00000A06 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 18865 00000A0D 26813E10003412          	cmp	word [es:10h],1234h
 18866                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 18867                                  	; 11/12/2022
 18868 00000A14 7401                    	je	short allocHMA_ok	
 18869                                  
 18870                                  ; 11/12/2022
 18871                                  ;	; 11/12/2022
 18872                                  ;	; cf=0
 18873                                  ;	;clc
 18874                                  ;	pop	ds
 18875                                  ;	retn
 18876                                  
 18877                                  grabhma_error:
 18878 00000A16 F9                      	stc
 18879                                  	; 11/12/022
 18880                                  grabhma_err:	; cf=1
 18881                                  allocHMA_ok:	; cf=0
 18882 00000A17 1F                      	pop	ds
 18883 00000A18 C3                      	retn
 18884                                  
 18885                                  ; ----------------------------------------------------------------------
 18886                                  ;
 18887                                  ; procedure : IsXMSLoaded
 18888                                  ;
 18889                                  ;             Checks whether a XMS driver is loaded
 18890                                  ;
 18891                                  ; Returns : Z flag set if XMS driver loaded
 18892                                  ;           Z flag reset if no XMS drivers are present
 18893                                  ;
 18894                                  ; ----------------------------------------------------------------------
 18895                                  
 18896                                  IsXMSLoaded:
 18897 00000A19 B80043                  	mov	ax,4300h
 18898 00000A1C CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 18899                                  				; Return: AL = 80h XMS driver installed
 18900                                  				; AL <> 80h no driver
 18901 00000A1E 3C80                    	cmp	al,80h		; XMS installed?
 18902 00000A20 C3                      	retn
 18903                                  
 18904                                  ; ----------------------------------------------------------------------
 18905                                  ; procedure : FTryToMovDOSHi
 18906                                  ;
 18907                                  ;		Called from HMA suballoc calls
 18908                                  ;	
 18909                                  ; ----------------------------------------------------------------------
 18910                                  
 18911                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18912                                  	; (SYSINIT:0A84h)
 18913                                  
 18914                                  FTryToMovDOSHi:	; proc	far
 18915                                  
 18916 00000A21 50                      	push	ax
 18917 00000A22 53                      	push	bx
 18918 00000A23 51                      	push	cx
 18919 00000A24 52                      	push	dx
 18920 00000A25 56                      	push	si
 18921 00000A26 57                      	push	di
 18922 00000A27 1E                      	push	ds
 18923 00000A28 06                      	push	es
 18924                                  
 18925                                  	; 23/10/2022
 18926                                  	; 27/03/2019 - Retro DOS v4.0
 18927                                  	; 11/12/2022
 18928 00000A29 0E                      	push	cs
 18929 00000A2A 1F                      	pop	ds
 18930                                  
 18931                                  	;cmp	byte [cs:runhigh],0FFh
 18932                                  	; 11/12/2022
 18933 00000A2B 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18934 00000A30 7503                    	jne	short _ftymdh_1
 18935                                  
 18936                                  	; ds = cs
 18937 00000A32 E8A1FE                  	call	TryToMovDOSHi
 18938                                  _ftymdh_1:
 18939 00000A35 07                      	pop	es
 18940 00000A36 1F                      	pop	ds
 18941 00000A37 5F                      	pop	di
 18942 00000A38 5E                      	pop	si
 18943 00000A39 5A                      	pop	dx
 18944 00000A3A 59                      	pop	cx
 18945 00000A3B 5B                      	pop	bx
 18946 00000A3C 58                      	pop	ax
 18947                                  
 18948 00000A3D CB                      	retf
 18949                                  
 18950                                  ; ----------------------------------------------------------------------
 18951                                  ;
 18952                                  ; following piece of code will be moved into a para boundary. And the para
 18953                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 18954                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 18955                                  ; to determine free extended memory.
 18956                                  ;
 18957                                  ; For more details read "power programming" column by Ray Duncan in the
 18958                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 18959                                  ;
 18960                                  ; ----------------------------------------------------------------------
 18961                                  
 18962                                  StartVDHead:
 18963                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 18964                                  
 18965 00000A3E 00000000                	dd	0		; link to next device driver
 18966 00000A42 0080                    	dw	8000h		; device attribute
 18967 00000A44 0000                    	dw	0		; strategy routine offset
 18968 00000A46 0000                    	dw	0		; interrupt routine offset
 18969 00000A48 01                      	db	1		; number of units
 18970                                  	;db	7 dup(0) 
 18971 00000A49 00<rep 7h>              	times	7 db 0 		; reserved area
 18972                                  VDiskSig1:
 18973 00000A50 564449534B              	db	'VDISK'
 18974                                  
 18975                                  VLEN1	equ	($-VDiskSig1)
 18976                                  
 18977 00000A55 202056332E33            	db	'  V3.3'	; vdisk label
 18978                                  	;db	15 dup (0)	; pad
 18979 00000A5B 00<rep Fh>              	times	15 db 0
 18980 00000A6A 0000                    	dw	0		; bits 0-15 of free HMA
 18981 00000A6C 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 18982                                  VDInt19:
 18983 00000A6D EA                      	db	0EAh		; jmp to old vector
 18984                                  OldVDInt19:
 18985 00000A6E 00000000                	dd	0		; Saved int 19 vector
 18986                                  
 18987                                  EndVDHead: ; label byte
 18988                                  
 18989                                  VDiskHMAHead:	
 18990 00000A72 000000                  	db	0,0,0		; non-bootable disk
 18991                                  VDiskSig2:
 18992 00000A75 564449534B              	db	'VDISK'
 18993                                  
 18994                                  VLEN2	equ	($-VDiskSig2)
 18995                                  
 18996 00000A7A 332E33                  	db	'3.3'		; OEM - signature
 18997 00000A7D 8000                    	dw	128		; number of bytes/sector
 18998 00000A7F 01                      	db	1		; sectors/cluster
 18999 00000A80 0100                    	dw	1		; reserved sectors
 19000 00000A82 01                      	db	1		; number of FAT copies
 19001 00000A83 4000                    	dw	64		; number of root dir entries
 19002 00000A85 0002                    	dw	512		; number of sectors
 19003 00000A87 FE                      	db	0FEh		; media descriptor
 19004 00000A88 0600                    	dw	6		; number of sectors/FAT
 19005 00000A8A 0800                    	dw	8		; sectors per track
 19006 00000A8C 0100                    	dw	1		; number of heads
 19007 00000A8E 0000                    	dw	0		; number of hidden sectors
 19008 00000A90 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19009                                  
 19010                                  EndVDiskHMAHead: ; label byte
 19011                                  
 19012                                  ; ----------------------------------------------------------------------
 19013                                  ;
 19014                                  ; procedure : InstVDiskHeader
 19015                                  ;
 19016                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19017                                  ;	      It puts a 32 byte header at 10000:0 and
 19018                                  ;	      another header at (seg of int19):0
 19019                                  ;
 19020                                  ; Inputs : None
 19021                                  ;
 19022                                  ; Outputs : None
 19023                                  ;
 19024                                  ; USES : DS,SI,AX,CX,DX
 19025                                  ;
 19026                                  ; ----------------------------------------------------------------------
 19027                                  
 19028                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19029                                  
 19030                                  InstVDiskHeader:
 19031 00000A92 31C0                    	xor	ax,ax
 19032 00000A94 8ED8                    	mov	ds,ax			; seg of int vect table
 19033                                  
 19034                                  ;-------------- save old int 19 vector
 19035                                  
 19036                                  	; 23/10/2022
 19037 00000A96 A16400                  	mov	ax,[19h*4]
 19038                                  	;mov	[OldVDInt19],ax
 19039 00000A99 2EA3[6E0A]              	mov	[cs:OldVDInt19],ax
 19040 00000A9D A16600                  	mov	ax,[19h*4+2]
 19041                                  	;mov	[OldVDInt19+2],ax
 19042 00000AA0 2EA3[700A]              	mov	[cs:OldVDInt19+2],ax
 19043                                  
 19044                                  ;-------------- calculate seg of new int 19 handler
 19045                                  
 19046 00000AA4 B448                    	mov	ah,48h			; allocate memory
 19047                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19048                                  	; 23/10/2022
 19049 00000AA6 BB0400                  	mov	bx,4
 19050 00000AA9 CD21                    	int	21h
 19051                                  
 19052                                  ;	if carry, fatal hanging error!!!!!
 19053                                  
 19054 00000AAB 48                      	dec	ax			; point to arena
 19055 00000AAC 8EC0                    	mov	es,ax
 19056                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19057 00000AAE 26C70601000800          	mov	word [es:1],8
 19058                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19059 00000AB5 26C70608005343          	mov	word [es:8],'SC'
 19060 00000ABC 40                      	inc	ax
 19061 00000ABD 8EC0                    	mov	es,ax			; get back to allocated memory
 19062                                  
 19063                                  ;-------------- install new int 19 vector
 19064                                  
 19065 00000ABF FA                      	cli				; no reboots at this time
 19066                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19067 00000AC0 C70664002F00            	mov	word [19h*4],47
 19068 00000AC6 A36600                  	mov	[19h*4+2],ax
 19069                                  
 19070                                  ;-------------- move the code into proper place
 19071                                  
 19072                                  	;mov	cx,(EndVDHead-StartVDHead)
 19073 00000AC9 B93400                  	mov	cx,52
 19074 00000ACC BE[3E0A]                	mov	si,StartVDHead
 19075 00000ACF 31FF                    	xor	di,di
 19076 00000AD1 0E                      	push	cs
 19077 00000AD2 1F                      	pop	ds
 19078 00000AD3 FC                      	cld
 19079 00000AD4 F3A4                    	rep	movsb
 19080 00000AD6 FB                      	sti				; BUGBUG is sti OK now?
 19081                                  
 19082                                  ;-------------- mov the HMA VDisk head into HMA
 19083                                  
 19084                                  	; 23/10/2022
 19085 00000AD7 57                      	push	di
 19086 00000AD8 06                      	push	es
 19087                                  
 19088 00000AD9 B8FFFF                  	mov	ax,0FFFFh
 19089 00000ADC 8EC0                    	mov	es,ax
 19090 00000ADE BF1000                  	mov	di,10h
 19091                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19092 00000AE1 B92000                  	mov	cx,32
 19093 00000AE4 BE[720A]                	mov	si,VDiskHMAHead
 19094 00000AE7 F3A4                    	rep	movsb			; ds already set to cs
 19095                                  
 19096 00000AE9 5F                      	pop	di
 19097 00000AEA 07                      	pop	es
 19098                                  
 19099 00000AEB C3                      	retn
 19100                                  
 19101                                  ; ----------------------------------------------------------------------
 19102                                  ; procedure : ClrVDISKHeader
 19103                                  ;
 19104                                  ;		Clears the first 32 bytes at 1MB boundary
 19105                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19106                                  ;		left by previous DOS=HIGH session
 19107                                  ;
 19108                                  ; ----------------------------------------------------------------------
 19109                                  
 19110                                  struc desc
 19111 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19112 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19113 00000004 ??                       .hi_byte:	resb 	1		; address
 19114 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19115 00000006 ????                     .reserved:	resw	1		;
 19116                                   .size:
 19117                                  endstruc
 19118                                  
 19119                                  		; 23/10/2022
 19120                                  bmove:		;label byte
 19121                                  
 19122                                  dummy:		;times desc.size db 0	; desc	<>
 19123 00000AEC 00<rep 8h>              		times 8 db 0		 
 19124                                  gdt:		;times desc.size db 0	; desc	<>
 19125 00000AF4 00<rep 8h>              		times 8 db 0
 19126 00000AFC FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19127 00000AFE 0000                    		dw	0
 19128 00000B00 00                      		db	0
 19129 00000B01 93                      		db	93h
 19130 00000B02 0000                    		dw	0
 19131 00000B04 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19132 00000B06 0000                    		dw	0
 19133 00000B08 10                      		db	10h
 19134 00000B09 93                      		db	93h
 19135 00000B0A 0000                    		dw	0
 19136                                  
 19137                                  rombios_code:	;times desc.size db 0	; desc	<>
 19138 00000B0C 00<rep 8h>              		times 8 db 0
 19139                                  temp_stack:	;times desc.size db 0	; desc	<>
 19140 00000B14 00<rep 8h>              		times 8 db 0
 19141                                  
 19142 00000B1C 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19143                                  
 19144                                  
 19145                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19146                                  
 19147                                  ClrVDISKHeader:	; proc	near
 19148                                  
 19149                                  ;;-----------------------------------------------------------	      ;I070
 19150                                  ;; The following workaround get around a problem with the	      ;I070
 19151                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19152                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19153                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19154                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19155                                  ;; move crashes the system. We can do this because these	      ;I070
 19156                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19157                                  ;								      ;I070
 19158                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19159                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19160                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19161                                  ;                                      ; Check for Tortugas...	      ;I070
 19162                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19163                                  ;               je      short ClrVDISKno                              ;I070
 19164                                  ;                                      ; Check for mod 30-286	      ;I070
 19165                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19166                                  ;               jne     short ClrVDISKok			      ;I070
 19167                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19168                                  ;								      ;I070
 19169                                  ;ClrVDISKok:							      ;I070
 19170                                  ;-----------------------------------------------------------	      ;I070
 19171                                  
 19172                                  	; 12/12/2022
 19173                                  	; ds = cs
 19174                                  
 19175 00000B3C 06                      	push	es
 19176 00000B3D 8CC8                    	mov	ax,cs
 19177 00000B3F 89C2                    	mov	dx,ax
 19178 00000B41 B10C                    	mov	cl,12
 19179 00000B43 D3EA                    	shr	dx,cl
 19180 00000B45 B104                    	mov	cl,4
 19181 00000B47 D3E0                    	shl	ax,cl
 19182 00000B49 05[1C0B]                	add	ax,ClrdVDISKHead
 19183 00000B4C 80D200                  	adc	dl,0
 19184                                  
 19185                                  	;; 23/10/2022
 19186                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19187                                  	;mov	[cs:src_desc+2],ax
 19188                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19189                                  	;mov	[cs:src_desc+4],dl
 19190                                  	; 12/12/2022
 19191                                  	;mov	[src_desc+desc.lo_word],ax
 19192 00000B4F A3[FE0A]                	mov	[src_desc+2],ax
 19193                                  	;mov	[src_desc+desc.hi_byte],dl
 19194 00000B52 8816[000B]              	mov	[src_desc+4],dl
 19195                                  
 19196 00000B56 B91000                  	mov	cx,16	; 16 words
 19197 00000B59 0E                      	push	cs
 19198 00000B5A 07                      	pop	es
 19199 00000B5B BE[EC0A]                	mov	si,bmove
 19200 00000B5E B487                    	mov	ah,87h
 19201 00000B60 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19202                                  			; CX = number of words to move 
 19203                                  			; ES:SI -> global descriptor table
 19204                                  			; Return: CF set on error, AH = status
 19205 00000B62 07                      	pop	es
 19206 00000B63 C3                      	retn
 19207                                  
 19208                                  ; ----------------------------------------------------------------------
 19209                                  ;
 19210                                  ; procedure : SaveFreeHMAPtr
 19211                                  ;
 19212                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19213                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19214                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19215                                  ;		the offset.
 19216                                  ;
 19217                                  ; Inputs : ES:DI - pointer to free HMA
 19218                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19219                                  ;
 19220                                  ; ----------------------------------------------------------------------
 19221                                  
 19222                                  SaveFreeHMAPtr:
 19223 00000B64 8CC3                    	mov	bx,es
 19224 00000B66 B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19225 00000B69 29D8                    	sub	ax,bx
 19226 00000B6B 83C70F                  	add	di,15			; para round
 19227 00000B6E 83E7F0                  	and	di,0FFF0h
 19228 00000B71 B104                    	mov	cl,4
 19229 00000B73 D3E0                    	shl	ax,cl
 19230 00000B75 29C7                    	sub	di,ax
 19231 00000B77 1E                      	push	ds
 19232                                  	;;mov	ax,Bios_Data ; 0070h
 19233                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19234                                  	; 21/10/2022
 19235 00000B78 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19236 00000B7B 8ED8                    	mov	ds,ax
 19237 00000B7D 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19238 00000B81 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19239 00000B86 1F                      	pop	ds
 19240 00000B87 C3                      	retn
 19241                                  
 19242                                  ; ----------------------------------------------------------------------
 19243                                  ;
 19244                                  ; procedure : IsVDiskInstalled
 19245                                  ;
 19246                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19247                                  ;		& INT 19 vector
 19248                                  ;
 19249                                  ; Inputs  : A20 flag should be ON
 19250                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19251                                  ;
 19252                                  ; ----------------------------------------------------------------------
 19253                                  
 19254                                  IsVDiskInstalled:
 19255 00000B88 31C0                    	xor	ax,ax
 19256 00000B8A 8ED8                    	mov	ds,ax
 19257 00000B8C 8E1E4E00                	mov	ds,[19*4+2]
 19258                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19259                                  	; 23/10/2022
 19260 00000B90 BE1200                  	mov	si,18
 19261                                  	;mov	cx,VLEN1 ; 5
 19262 00000B93 B90500                  	mov	cx,5
 19263 00000B96 0E                      	push	cs
 19264 00000B97 07                      	pop	es
 19265 00000B98 BF[500A]                	mov	di,VDiskSig1
 19266 00000B9B F3A6                    	rep	cmpsb
 19267 00000B9D 7410                    	je	short ivdins_retn
 19268 00000B9F B8FFFF                  	mov	ax,0FFFFh
 19269 00000BA2 8ED8                    	mov	ds,ax
 19270                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19271 00000BA4 BE1300                  	mov	si,13h
 19272 00000BA7 BF[750A]                	mov	di,VDiskSig2
 19273                                  	;mov	cx,VLEN2  ; 5
 19274 00000BAA B90500                  	mov	cx,5
 19275 00000BAD F3A6                    	rep	cmpsb
 19276                                  ivdins_retn: 
 19277 00000BAF C3                      	retn			; returns the Zero flag
 19278                                  
 19279                                  ; ----------------------------------------------------------------------
 19280                                  ;
 19281                                  ; procedure : CPMHack
 19282                                  ;
 19283                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19284                                  ;		for CPM compatibility
 19285                                  ;
 19286                                  ; ----------------------------------------------------------------------
 19287                                  
 19288                                  	; 11/12/2022
 19289                                  CPMHack:
 19290 00000BB0 1E                      	push	ds
 19291 00000BB1 B9FFFF                  	mov	cx,0FFFFh
 19292 00000BB4 8EC1                    	mov	es,cx		; ES = FFFF
 19293                                  	;xor	cx,cx
 19294                                  	; 11/12/2022
 19295 00000BB6 41                      	inc	cx  ; cx = 0
 19296 00000BB7 8ED9                    	mov	ds,cx		; DS = 0
 19297 00000BB9 BEC000                  	mov	si,0C0h
 19298 00000BBC BFD000                  	mov	di,0D0h
 19299                                  	;mov	cx,5
 19300 00000BBF B105                    	mov	cl,5
 19301 00000BC1 FC                      	cld
 19302 00000BC2 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19303 00000BC4 1F                      	pop	ds
 19304 00000BC5 C3                      	retn
 19305                                  
 19306                                  ; ----------------------------------------------------------------------
 19307                                  ;
 19308                                  ; procedure : off_to_para
 19309                                  ;
 19310                                  ; ----------------------------------------------------------------------
 19311                                  off_to_para:
 19312 00000BC6 D1E8                    	shr	ax,1
 19313 00000BC8 D1E8                    	shr	ax,1
 19314 00000BCA D1E8                    	shr	ax,1
 19315 00000BCC D1E8                    	shr	ax,1
 19316 00000BCE C3                      	retn
 19317                                  
 19318                                  ; ----------------------------------------------------------------------
 19319                                  ;**	TempCDS - Create (Temporary?) CDS
 19320                                  ;
 19321                                  ;	ENTRY	?? BUGBUG
 19322                                  ;		(DS) = SysInitSeg
 19323                                  ;	EXIT	?? BUGBUG
 19324                                  ;	USES	?? BUGBUG
 19325                                  ; ----------------------------------------------------------------------
 19326                                  
 19327                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19328                                  TempCDS:
 19329 00000BCF C43E[6B02]              	les	di,[DOSINFO]
 19330 00000BD3 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19331                                  	;mov	cl,[es:di+20h]
 19332 00000BD7 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19333                                  
 19334 00000BD9 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19335                                  	;mov	[es:di+21h],cl	
 19336                                  
 19337 00000BDD 88C8                    	mov	al,cl
 19338 00000BDF B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19339                                  	;mov	ah,88
 19340 00000BE1 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19341 00000BE3 E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19342 00000BE6 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19343                                  
 19344                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19345                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19346                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19347                                  ;		   variable which has the top of free memory for
 19348                                  ;		   device driver loads, etc.
 19349                                  
 19350 00000BEA 29C6                    	sub	si,ax
 19351                                  
 19352                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19353                                  ;		that automatically updates alloclim every time we
 19354                                  ;		set up some new CDSs. Instead, I've added code
 19355                                  ;		which pre-allocates space for 26 CDSs. This
 19356                                  ;	        way we've got room for worst case CDSs before
 19357                                  ;		we place MagicDrv.sys
 19358                                  ;
 19359                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19360                                  
 19361                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19362                                  	; (SYSINIT:0C52h)
 19363 00000BEC 8936[A302]              	mov	[ALLOCLIM],si
 19364                                  
 19365 00000BF0 26897518                	mov	[es:di+SYSI_CDS+2],si
 19366                                  	;mov	[es:di+18h],si
 19367 00000BF4 89F0                    	mov	ax,si
 19368 00000BF6 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19369                                  	;mov	[word es:di+16h],0
 19370                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19371 00000BFC 26C535                  	lds	si,[es:di]
 19372 00000BFF 8EC0                    	mov	es,ax
 19373 00000C01 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19374                                  
 19375                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19376                                  ;	info from the corresponding DPB.
 19377                                  ;
 19378                                  ;	(cx) = count of CDSs left to process
 19379                                  ;	(es:di) = address of next CDS
 19380                                  
 19381                                  fooset:
 19382                                  	; 23/10/2022
 19383 00000C03 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19384 00000C07 AB                      	stosw				; setup the root as the curdir
 19385                                  
 19386                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19387                                  
 19388                                  ;	(ds:si) = address of DPB
 19389                                  ;		 (si) = -1 if no drive
 19390                                  
 19391 00000C08 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19392 00000C0C AB                      	stosw
 19393 00000C0D 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19394 00000C12 31C0                    	xor	ax,ax
 19395 00000C14 51                      	push	cx
 19396                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19397 00000C15 B93F00                  	mov	cx,63	; 23/10/2022
 19398 00000C18 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19399                                  
 19400                                  ;	should handle the system that does not have any floppies.
 19401                                  ;	in this case,we are going to pretended there are two dummy floppies
 19402                                  ;	in the system. still they have dpb and cds,but we are going to
 19403                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19404                                  ;	"invalid drive specification" message when the user try to
 19405                                  ;	access them.
 19406                                  ;
 19407                                  ;	(ax) = 0
 19408                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19409                                  ;	(ds:si) = Next DPB (-1 if none)
 19410                                  
 19411 00000C1A 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19412 00000C1D 7414                    	je	short fooset_zero	; don't have any physical drive.
 19413                                  
 19414                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19415                                  ;	if we are faking floppy drives then see if this cds being initialised
 19416                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19417                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19418                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19419                                  ;	for dpb offsets look at inc\dpb.inc.
 19420                                  
 19421 00000C1F 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19422 00000C25 7513                    	jne	short normcds 		; machine has floppy drives
 19423                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19424 00000C27 803C01                  	cmp	byte [si],1
 19425 00000C2A 770E                    	ja	short normcds
 19426 00000C2C B103                    	mov	cl,3			; the next dbp pointer
 19427                                  					; AX should be zero here
 19428 00000C2E F3AB                    	rep	stosw
 19429 00000C30 59                      	pop	cx
 19430 00000C31 EB18                    	jmp	short get_next_dpb
 19431                                  
 19432                                  ;	(ax) = 0
 19433                                  
 19434                                  fooset_zero:
 19435 00000C33 B103                    	mov	cl,3
 19436 00000C35 F3AB                    	rep	stosw
 19437 00000C37 59                      	pop	cx
 19438 00000C38 EB14                    	jmp	short fincds
 19439                                  
 19440                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19441                                  ;
 19442                                  ;	(ax) = 0
 19443                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19444                                  ;	(ds:si) = Next DPB (-1 if none)
 19445                                  
 19446                                  normcds:
 19447 00000C3A 59                      	pop	cx
 19448                                  
 19449                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19450                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19451                                  ;	this media is a non-fat based one.
 19452                                  
 19453                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19454                                  	; 23/10/2022
 19455 00000C3B 807C0800                	cmp	byte [si+8],0
 19456 00000C3F 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19457 00000C41 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19458                                  	;mov	ax,4000h
 19459                                  setnormcds:
 19460 00000C44 AB                      	stosw				; curdir_flags
 19461 00000C45 89F0                    	mov	ax,si
 19462 00000C47 AB                      	stosw				; curdir_devptr
 19463 00000C48 8CD8                    	mov	ax,ds
 19464 00000C4A AB                      	stosw
 19465                                  
 19466                                  get_next_dpb:				; entry point for fake_fooset_zero
 19467                                  	; 23/10/2022
 19468 00000C4B C57419                  	lds	si,[si+19h]
 19469                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19470                                  fincds:
 19471 00000C4E B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19472 00000C51 AB                      	stosw				; curdir_id
 19473 00000C52 AB                      	stosw				; curdir_id
 19474 00000C53 AB                      	stosw				; curdir_user_word
 19475 00000C54 B80200                  	mov	ax,2
 19476 00000C57 AB                      	stosw				; curdir_end
 19477 00000C58 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19478 00000C5A AA                      	stosb
 19479 00000C5B AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19480 00000C5C AB                      	stosw
 19481 00000C5D AB                      	stosw
 19482                                  
 19483 00000C5E E2A3                    	loop	fooset
 19484                                  	
 19485 00000C60 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19486                                  	
 19487 00000C66 C3                      	retn
 19488                                  
 19489                                  ; ----------------------------------------------------------------------
 19490                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19491                                  ;
 19492                                  ;	entry:
 19493                                  ;	   al == ASCII CAPS drive letter
 19494                                  ;
 19495                                  ;	exit:
 19496                                  ;	   ds:si -> DPB, or si = -1 if not found
 19497                                  ; ----------------------------------------------------------------------
 19498                                  
 19499                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19500                                  ;
 19501                                  ;get_dpb_for_drive_al:
 19502                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19503                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19504                                  ;	lds	si,[si]
 19505                                  ;	sub	al,'A'
 19506                                  ;
 19507                                  ;get_dpb_for_drive_1:
 19508                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19509                                  ;	cmp	al,[si]
 19510                                  ;	je	short got_dpb_for_drive	;  done if so
 19511                                  ;
 19512                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19513                                  ;	cmp	si,-1
 19514                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19515                                  ;
 19516                                  ;got_dpb_for_drive:
 19517                                  ;	retn
 19518                                  
 19519                                  ;=======================================================================
 19520                                  
 19521                                  ;**	EndFile - Build DOS structures
 19522                                  ;
 19523                                  ; This procedure is called after the config.sys has been processed and
 19524                                  ; installable device drivers have been loaded (but before "install="
 19525                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19526                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19527                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19528                                  ; above these structures is deallocated back to DOS.
 19529                                  ;
 19530                                  ;	ENTRY	?? BUGBUG
 19531                                  ;	EXIT	?? BUGBUG
 19532                                  ;	USES	?? BUGBUG
 19533                                  
 19534                                  ;=======================================================================
 19535                                  ; allocate files
 19536                                  ; ----------------------------------------------------------------------
 19537                                  
 19538                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19539                                  	; (SYSINIT:0CCDh)
 19540                                  
 19541                                  endfile:
 19542                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19543                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19544                                  ; to confbot.
 19545                                  
 19546                                  ;	if this procedure has been called to take care of install= command,
 19547                                  ;	   then we have to save es,si registers.
 19548                                  
 19549                                  	; 11/12/2022
 19550                                  	; ds = cs
 19551                                  
 19552                                  	; 23/10/2022
 19553                                  	; 31/03/2019
 19554 00000C67 1E                      	push	ds
 19555                                  
 19556                                  	;;mov	ax,Bios_Data ; 0070h
 19557                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19558                                  	; 21/10/2022
 19559 00000C68 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19560 00000C6B 8ED8                    	mov	ds,ax
 19561                                  
 19562                                  	;cmp	word [052Fh],0
 19563 00000C6D 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19564 00000C72 7505                    	jne	short multrk_flag_done
 19565                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19566                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19567                                  	; 12/12/2022
 19568 00000C74 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19569                                  multrk_flag_done:
 19570                                  	; 23/10/2022
 19571                                  	; 31/03/2019
 19572 00000C79 1F                      	pop	ds
 19573                                  
 19574                                  	; 11/12/2022
 19575                                  	; ds = cs
 19576 00000C7A A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19577 00000C7D A3[A302]                	mov	[ALLOCLIM],ax
 19578                                  	; 23/10/2022
 19579                                  	;mov	ax, [cs:top_of_cdss]
 19580                                  	;mov	[cs:ALLOCLIM], ax 
 19581                                  
 19582                                  	; 11/12/2022
 19583                                  	; ds = cs
 19584                                  	;push	cs
 19585                                  	;pop	ds
 19586                                  	
 19587                                  	;mov	ax,[CONFBOT]
 19588                                  	;mov	[ALLOCLIM],ax
 19589                                  
 19590 00000C80 E83D24                  	call	round
 19591                                  	; 11/12/2022
 19592                                  	; ds = cs
 19593 00000C83 A0[9D02]                	mov	al,[FILES]
 19594                                  	; 23/10/2022
 19595                                  	;mov	al,[cs:FILES]
 19596 00000C86 2C05                    	sub	al,5
 19597 00000C88 764B                    	jbe	short dofcbs
 19598                                  
 19599 00000C8A 50                      	push	ax
 19600                                  	;mov	al,devmark_files ; 'F'
 19601 00000C8B B046                    	mov	al,'F'
 19602 00000C8D E87B07                  	call	setdevmark		; set devmark for sfts (files)
 19603 00000C90 58                      	pop	ax
 19604 00000C91 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19605                                  					;  it does sign extend.
 19606                                  	; 11/12/2022
 19607                                  	; ds = cs
 19608 00000C93 8B1E[DE03]              	mov	bx,[memlo]
 19609 00000C97 8B16[E003]              	mov	dx,[memhi]
 19610 00000C9B C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19611                                  	; 23/10/2022
 19612                                  	;mov	bx,[cs:memlo]
 19613                                  	;mov	dx,[cs:memhi]
 19614                                  	;lds	di,[cs:DOSINFO]		
 19615                                  
 19616                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19617 00000C9F C57D04                  	lds	di,[di+4]
 19618                                  
 19619                                  	;mov	[di+SF.SFLink],bx
 19620 00000CA2 891D                    	mov	[di],bx
 19621 00000CA4 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19622                                  
 19623 00000CA7 0E                      	push	cs
 19624 00000CA8 1F                      	pop	ds
 19625                                  
 19626                                  	; 11/12/2022
 19627                                  	; ds = cs
 19628 00000CA9 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19629                                  	; 23/10/2022
 19630                                  	;les	di,[cs:memlo]
 19631                                  
 19632                                  	;mov	word [es:di+SF.SFLink],-1
 19633 00000CAD 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19634                                  	;mov	[es:di+SF.SFCount],ax
 19635 00000CB2 26894504                	mov	[es:di+4],ax
 19636                                  	;mov	bl,SF_ENTRY.size ; 59
 19637 00000CB6 B33B                    	mov	bl,59
 19638 00000CB8 F6E3                    	mul	bl			;ax = number of bytes to clear
 19639 00000CBA 89C1                    	mov	cx,ax
 19640                                  	; 11/12/2022
 19641                                  	; ds = cs
 19642 00000CBC 0106[DE03]              	add	[memlo],ax		;allocate memory
 19643                                  	; 23/10/2022
 19644                                  	;add	[cs:memlo],ax
 19645 00000CC0 B80600                  	mov	ax,6
 19646                                  	; 11/12/2022
 19647 00000CC3 0106[DE03]              	add	[memlo],ax		;remember the header too
 19648                                  	;add	[cs:memlo],ax
 19649                                  	; 11/12/2022
 19650 00000CC7 800E[2E14]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19651                                  	; 23/10/2022
 19652                                  	;or	byte [cs:setdevmarkflag],2
 19653 00000CCC E8F123                  	call	round			; check for mem error before the stosb
 19654 00000CCF 01C7                    	add	di,ax
 19655 00000CD1 31C0                    	xor	ax,ax
 19656 00000CD3 F3AA                    	rep	stosb			;clean out the stuff
 19657                                  
 19658                                  ; allocate fcbs
 19659                                  ; ----------------------------------------------------------------------
 19660                                  
 19661                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19662                                  	; (SYSINIT:0D48h)
 19663                                  dofcbs:
 19664                                  	; 11/12/2022
 19665                                  	; ds = cs
 19666                                  	;push	cs
 19667                                  	;pop	ds
 19668 00000CD5 E8E823                  	call	round
 19669                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19670 00000CD8 B058                    	mov	al,'X'
 19671 00000CDA E82E07                  	call	setdevmark
 19672                                  	; 11/12/2022
 19673                                  	; ds = cs
 19674 00000CDD A0[9E02]                	mov	al,[FCBS]
 19675                                  	;mov	al,[cs:FCBS]
 19676 00000CE0 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19677                                  					;  it does sign extend.
 19678                                  	; 11/12/2022
 19679 00000CE2 8B1E[DE03]              	mov	bx,[memlo]
 19680 00000CE6 8B16[E003]              	mov	dx,[memhi]
 19681 00000CEA C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19682                                  	; 23/10/2022
 19683                                  	;mov	bx,[cs:memlo]
 19684                                  	;mov	dx,[cs:memhi]
 19685                                  	;lds	di,[cs:DOSINFO]
 19686                                  
 19687                                  	;mov	[di+SYSI_FCB],bx
 19688                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19689                                  	; 23/10/2022
 19690 00000CEE 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19691 00000CF1 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19692                                  
 19693 00000CF4 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19694 00000CF9 30FF                    	xor	bh,bh
 19695                                  	;mov	[di+SYSI_KEEP],bx
 19696 00000CFB 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19697                                  
 19698 00000CFE 0E                      	push	cs
 19699 00000CFF 1F                      	pop	ds
 19700                                  	
 19701 00000D00 C43E[DE03]              	les	di,[memlo]		;point to new table
 19702                                  	;mov	word [es:di+SF.SFLink],-1
 19703 00000D04 26C705FFFF              	mov	word [es:di],-1
 19704                                  	;mov	[es:di+SF.SFCount],ax
 19705                                  	; 02/11/2022
 19706 00000D09 26894504                	mov	[es:di+4],ax
 19707 00000D0D B339                    	mov	bl,SF_ENTRY.size ; 59
 19708 00000D0F 89C1                    	mov	cx,ax
 19709 00000D11 F6E3                    	mul	bl			;ax = number of bytes to clear
 19710 00000D13 0106[DE03]              	add	[memlo],ax		;allocate memory
 19711                                  	;mov	ax,6
 19712 00000D17 B80600                  	mov	ax,SF.size-2 ; 6
 19713 00000D1A 0106[DE03]              	add	[memlo],ax		;remember the header too
 19714                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19715 00000D1E 800E[2E14]02            	or	byte [setdevmarkflag],2
 19716 00000D23 E89A23                  	call	round			; check for mem error before the stosb
 19717 00000D26 01C7                    	add	di,ax			;skip over header
 19718 00000D28 B041                    	mov	al,'A'
 19719                                  fillloop:
 19720 00000D2A 51                      	push	cx			; save count
 19721 00000D2B B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19722 00000D2E FC                      	cld
 19723 00000D2F F3AA                    	rep	stosb			; filled
 19724                                  
 19725                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19726                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19727                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19728                                  
 19729                                  	; 18/12/2022
 19730                                  	;cx = 0
 19731 00000D31 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19732 00000D35 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19733 00000D39 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19734                                  	
 19735                                  	; 23/10/2022	
 19736                                  	;mov     word [es:di-3Bh],0
 19737                                  	;mov     word [es:di-26h],0
 19738                                  	;mov     word [es:di-24h],0
 19739                                  
 19740 00000D3D 59                      	pop	cx
 19741 00000D3E E2EA                    	loop	fillloop
 19742                                  
 19743                                  ; allocate buffers
 19744                                  ; ----------------------------------------------------------------------
 19745                                  
 19746                                  ; search through the list of media supported and allocate 3 buffers if the
 19747                                  ; capacity of the drive is > 360kb
 19748                                  
 19749                                  	; 18/12/2022
 19750                                  	; cx = 0
 19751 00000D40 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19752 00000D45 7403                    	je	short dodefaultbuff
 19753 00000D47 E98700                  	jmp	dobuff			; the user entered the buffers=.
 19754                                  
 19755                                  dodefaultbuff:
 19756                                  	; 18/12/2022
 19757 00000D4A 890E[9902]              	mov	[h_buffers],cx ; 0
 19758 00000D4E 41                      	inc	cx
 19759 00000D4F 41                      	inc	cx
 19760 00000D50 890E[9702]              	mov	[buffers],cx ; 2	
 19761                                  	
 19762                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19763                                  	;mov	word [buffers],2	; default to 2 buffers
 19764                                  
 19765                                  	; 23/10/2022	
 19766 00000D54 50                      	push	ax
 19767 00000D55 1E                      	push	ds ; 26/03/2019
 19768                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19769 00000D56 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19770                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19771                                  	; 11/12/2022
 19772 00000D5B 26C46E00                	les	bp,[es:bp]
 19773                                  	; 23/10/2022
 19774                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19775                                  
 19776 00000D5F 0E                      	push	cs
 19777 00000D60 1F                      	pop	ds
 19778                                  ;SYSINIT:0DE2h:
 19779                                  nextdpb:				; test if the drive supports removeable media
 19780                                  	;mov	bl,[es:bp+DPB.drive]
 19781                                  	; 11/12/2022
 19782 00000D61 268A5E00                	mov	bl,[es:bp]
 19783                                  	; 23/10/2022
 19784                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19785                                  
 19786                                  	;inc	bl
 19787                                  	; 18/12/2022
 19788 00000D65 43                      	inc	bx
 19789                                  
 19790                                  	;mov	ax,(IOCTL<<8)|8
 19791 00000D66 B80844                  	mov	ax,4408h
 19792 00000D69 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19793                                  
 19794                                  ; ignore fixed disks
 19795                                  
 19796 00000D6B 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 19797 00000D6D 7534                    	jnz	short nosetbuf
 19798                                  
 19799                                  ; get parameters of drive
 19800                                  
 19801 00000D6F 31DB                    	xor	bx,bx
 19802                                  	;;mov	bl,[es:bp+DPB.drive]
 19803                                  	; 11/12/2022
 19804 00000D71 268A5E00                	mov	bl,[es:bp]
 19805                                  	; 23/10/2022
 19806                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19807                                  	
 19808                                  	;inc	bl
 19809                                  	; 18/12/2022
 19810 00000D75 43                      	inc	bx
 19811                                  
 19812 00000D76 BA[6635]                	mov	dx,deviceparameters
 19813                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 19814 00000D79 B80D44                  	mov	ax,440Dh
 19815                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 19816 00000D7C B96008                  	mov	cx,860h
 19817 00000D7F CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19818 00000D81 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 19819                                  					; generic ioctl
 19820                                  ; determine capacity of drive
 19821                                  ; media capacity = #sectors * bytes/sector
 19822                                  
 19823                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 19824                                  	; 23/10/2022
 19825 00000D83 8B1E[7535]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 19826                                  	
 19827                                  ; to keep the magnitude of the media capacity within a word,
 19828                                  ; scale the sector size
 19829                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 19830                                  
 19831                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 19832                                  	; 23/10/2022
 19833 00000D87 A1[6D35]                	mov	ax, [deviceparameters+7] ; bytes per sector
 19834 00000D8A 31D2                    	xor	dx,dx
 19835 00000D8C B90002                  	mov	cx,512
 19836 00000D8F F7F1                    	div	cx			; scale sector size in factor of
 19837                                  					; 512 bytes
 19838 00000D91 F7E3                    	mul	bx			; ax = #sectors * size factor
 19839 00000D93 09D2                    	or	dx,dx			; just in case of large floppies
 19840 00000D95 7505                    	jnz	short setbuf
 19841 00000D97 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 19842 00000D9A 7607                    	jbe	short nosetbuf
 19843                                  setbuf:
 19844                                  	; 18/12/2022
 19845                                  	; word [buffers] = 2
 19846 00000D9C C606[9702]03            	mov	byte [buffers],3
 19847                                  	;mov	word [buffers],3
 19848 00000DA1 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 19849                                  					; for default buffer count
 19850                                  nosetbuf:
 19851                                  	; 23/10/2022
 19852                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 19853 00000DA3 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 19854 00000DA8 7406                    	je	short chk_memsize_for_buffers
 19855                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 19856 00000DAA 26C46E19                	les	bp,[es:bp+19h]
 19857 00000DAE EBB1                    	jmp	short nextdpb
 19858                                  
 19859                                  ;from dos 3.3,the default number of buffers will be changed according to the
 19860                                  ;memory size too.
 19861                                  ; default buffers = 2
 19862                                  ; if diskette media > 360 kb,then default buffers = 3
 19863                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 19864                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 19865                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 19866                                  
 19867                                  chk_memsize_for_buffers:
 19868                                  	; 18/12/2022
 19869                                  	;cmp	word [MEMORY_SIZE],2000h
 19870                                  	;jbe	short bufset
 19871                                  	;mov	word [buffers],5
 19872                                  	;cmp	word [MEMORY_SIZE],4000h
 19873                                  	;jbe	short bufset
 19874                                  	;mov	word [buffers],10
 19875                                  	;cmp	word [MEMORY_SIZE],8000h
 19876                                  	;jbe	short bufset
 19877                                  	;mov	word [buffers],15
 19878                                  
 19879                                  	; 18/12/2022
 19880                                  	; word [buffers] = 3 or 2
 19881 00000DB0 BB[9702]                	mov	bx,buffers
 19882 00000DB3 A1[9202]                	mov	ax,[MEMORY_SIZE]
 19883 00000DB6 48                      	dec	ax	; [MEMORY_SIZE] - 1
 19884                                  
 19885 00000DB7 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 19886 00000DBA 7213                    	jb	short bufset
 19887 00000DBC C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 19888 00000DBF 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 19889 00000DC2 730B                    	jnb	short bufset
 19890 00000DC4 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 19891 00000DC7 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 19892 00000DCA 7303                    	jnb	short bufset
 19893 00000DCC C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 19894                                  bufset:
 19895                                  	; 23/10/2022
 19896                                  	; 26/03/2019
 19897 00000DCF 1F                      	pop	ds
 19898 00000DD0 58                      	pop	ax
 19899                                  
 19900                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19901                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 19902                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19903                                  
 19904                                  ; 26/03/2019
 19905                                  
 19906                                  ;*******************************************************************************
 19907                                  ;									       *
 19908                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 19909                                  ; input :								       *
 19910                                  ;    memhi:memlo - start of the next available memory			       *
 19911                                  ;    buffers = number of buffers					       *
 19912                                  ;    h_buffers = number of secondary buffers				       *
 19913                                  ;									       *
 19914                                  ; output:								       *
 19915                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 19916                                  ;	buffinfo set.							       *
 19917                                  ;	bufferqueue set.						       *
 19918                                  ;									       *
 19919                                  ; subroutines to be called:						       *
 19920                                  ;									       *
 19921                                  ;*******************************************************************************
 19922                                  
 19923                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19924                                  	; (SYSINIT:0E60h)
 19925                                  dobuff:
 19926                                  	; ds = cs ; 31/03/2019
 19927                                  	; 23/10/2022
 19928 00000DD1 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 19929                                  	;mov	ax,[buffers] ; 31/03/2019
 19930                                  	;lds	bx,[DOSINFO]
 19931 00000DD6 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 19932                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 19933 00000DDA 89473F                  	mov	[bx+3Fh],ax
 19934 00000DDD 2EA1[9902]              	mov	ax,[cs:h_buffers]
 19935                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 19936 00000DE1 894741                  	mov	[bx+41h],ax
 19937 00000DE4 C55F12                  	lds	bx,[bx+12h]
 19938                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 19939 00000DE7 E8D622                  	call	round		; get [memhi]:[memlo]
 19940                                  	;mov	al,devmark_buf	; ='B'
 19941 00000DEA B042                    	mov	al,'B'	
 19942 00000DEC E81C06                  	call	setdevmark
 19943                                  
 19944                                  ;allocate buffers
 19945                                  
 19946 00000DEF 1E                      	push	ds			; save buffer info. ptr.
 19947 00000DF0 53                      	push	bx
 19948                                  
 19949 00000DF1 E85203                  	call	set_buffer
 19950                                  
 19951 00000DF4 5B                      	pop	bx
 19952 00000DF5 1F                      	pop	ds
 19953                                  
 19954                                  ;now set the secondary buffer if specified.
 19955                                  
 19956 00000DF6 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 19957 00000DFC 742D                    	je	short xif16
 19958 00000DFE E8BF22                  	call	round
 19959                                  	; 23/10/2022
 19960 00000E01 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 19961                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 19962 00000E06 894F06                  	mov	[bx+6],cx
 19963 00000E09 2E8B0E[E003]            	mov	cx,[cs:memhi]
 19964                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 19965 00000E0E 894F08                  	mov	[bx+8],cx
 19966 00000E11 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 19967                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 19968 00000E16 894F0A                  	mov	[bx+10],cx
 19969 00000E19 B80002                  	mov	ax,512			; 512 byte
 19970 00000E1C F7E1                    	mul	cx
 19971 00000E1E 2EA3[DE03]              	mov	[cs:memlo],ax
 19972                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19973 00000E22 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 19974 00000E28 E89522                  	call	round
 19975                                  xif16:
 19976                                  
 19977                                  ; ----------------------------------------------------------------------
 19978                                  ; allocate cdss
 19979                                  ; ----------------------------------------------------------------------
 19980                                  
 19981                                  buf1:
 19982 00000E2B E89222                  	call	round
 19983                                  
 19984 00000E2E 50                      	push	ax
 19985                                  	; 23/10/2022
 19986                                  	;mov	ax,devmark_cds		;='L'
 19987 00000E2F B84C00                  	mov	ax, 'L'
 19988 00000E32 E8D605                  	call	setdevmark
 19989 00000E35 58                      	pop	ax
 19990                                  
 19991 00000E36 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 19992                                  	;mov	cl,[es:di+SYSI_NUMIO]
 19993 00000E3B 268A4D20                	mov	cl,[es:di+20h]
 19994 00000E3F 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 19995 00000E44 7305                    	jae	short gotncds 		; user setting must be at least numio
 19996 00000E46 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 19997                                  gotncds:
 19998 00000E4B 30ED                    	xor	ch,ch
 19999                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20000 00000E4D 26884D21                	mov	[es:di+21h],cl
 20001 00000E51 2EA1[E003]              	mov	ax,[cs:memhi]
 20002                                  	;mov	[es:di+SYSI_CDS+2],ax
 20003 00000E55 26894518                	mov	[es:di+18h],ax
 20004 00000E59 2EA1[DE03]              	mov	ax,[cs:memlo]
 20005                                  	;mov	[es:di+SYSI_CDS],ax
 20006 00000E5D 26894516                	mov	[es:di+16h],ax
 20007 00000E61 88C8                    	mov	al,cl
 20008                                  	;mov	ah,curdirlen ; curdir_list.size
 20009 00000E63 B458                    	mov	ah,88
 20010 00000E65 F6E4                    	mul	ah
 20011 00000E67 E84F02                  	call	ParaRound
 20012 00000E6A 2E0106[E003]            	add	[cs:memhi],ax
 20013                                  
 20014                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20015 00000E6F 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 20016 00000E75 E84822                  	call	round			; check for mem error before initializing
 20017                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20018 00000E78 26C535                  	lds	si,[es:di]
 20019                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20020 00000E7B 26C47D16                	les	di,[es:di+16h]
 20021 00000E7F E881FD                  	call	fooset
 20022                                  
 20023                                  ; ----------------------------------------------------------------------
 20024                                  ; allocate space for internal stack
 20025                                  ; ----------------------------------------------------------------------
 20026                                  
 20027 00000E82 0E                      	push	cs
 20028 00000E83 1F                      	pop	ds
 20029                                  
 20030                                  ;	if the user did not entered stacks= command, as a default, do not install
 20031                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20032                                  ;	otherwise,install it to the user specified value or to the default
 20033                                  ;	value of 9,128 for other systems.
 20034                                  
 20035 00000E84 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20036 00000E89 740E                    	je	short doinstallstack	; then install as specified by the user
 20037 00000E8B 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20038 00000E90 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20039 00000E92 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20040 00000E97 736D                    	jae	short skipstack
 20041                                  doinstallstack:
 20042 00000E99 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20043 00000E9C 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20044 00000E9E 7466                    	jz	short skipstack		; don't install stack.
 20045                                  
 20046                                  ;	dynamic relocation of stack code.
 20047                                  
 20048 00000EA0 E81D22                  	call	round			;[memhi] = seg. for stack code
 20049                                  					;[memlo] = 0
 20050                                  
 20051                                  ; set devmark block into memory for mem command
 20052                                  ; devmark_id = 's' for stack
 20053                                  
 20054                                  	;mov	al,devmark_stk	;='S'
 20055                                  	; 23/10/2022
 20056 00000EA3 B053                    	mov	al,'S'
 20057 00000EA5 E86305                  	call	setdevmark
 20058                                  
 20059 00000EA8 A1[E003]                	mov	ax,[memhi]
 20060 00000EAB 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20061                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20062                                  	; 11/12/2022
 20063                                  	; ds = cs
 20064                                  	;push	cs
 20065                                  	;pop	ds
 20066 00000EAD 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20067 00000EAF 31FF                    	xor	di,di
 20068 00000EB1 B9[6702]                	mov	cx,endstackcode
 20069 00000EB4 890E[DE03]              	mov	[memlo],cx
 20070 00000EB8 E80522                  	call	round		;have enough space for relocation?
 20071 00000EBB F3A4                    	rep	movsb
 20072                                  
 20073 00000EBD 1E                      	push	ds		; stick the location of the NextStack entry
 20074                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20075                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20076                                  	; 21/10/2022
 20077 00000EBE B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20078 00000EC1 8ED8                    	mov	ds,ax
 20079 00000EC3 C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20080 00000EC9 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20081                                  
 20082 00000ECD 2EA1[DE03]              	mov	ax,[cs:memlo]
 20083 00000ED1 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20084 00000ED5 A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20085 00000ED8 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20086 00000EDC 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20087 00000EE0 A3[C608]                	mov	[IT_StackLoc+2],ax
 20088                                  
 20089                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20090                                  
 20091                                  	;mov	ax,entrysize ; mov ax,8
 20092                                  	; 23/10/2022
 20093 00000EE3 B80800                  	mov	ax,8
 20094 00000EE6 2E0306[8C02]            	add	ax,[cs:stack_size]
 20095 00000EEB 2EF726[8A02]            	mul	word [cs:stack_count]
 20096                                  
 20097 00000EF0 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20098                                  
 20099 00000EF3 1F                      	pop	ds		; no more need to access Instance Table
 20100                                  
 20101 00000EF4 E8C201                  	call	ParaRound	; convert size to paragraphs
 20102                                  	
 20103                                  	; 11/12/2022
 20104                                  	; ds = cs
 20105                                  	;add	[cs:memhi],ax
 20106 00000EF7 0106[E003]              	add	[memhi],ax
 20107                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20108                                  	;or	byte [cs:setdevmarkflag],2
 20109 00000EFB 800E[2E14]02            	or	byte [setdevmarkflag],2
 20110                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20111                                  				;to set the devmark_size for stack by round routine.
 20112 00000F00 E8BD21                  	call	round		; check for memory error before
 20113                                  				; continuing
 20114 00000F03 E8E902                  	call	stackinit	; initialize hardware stack. 
 20115                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20116                                  skipstack:
 20117                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20118                                  	; (SYSINIT:0F99h)
 20119                                  
 20120                                  	; 11/12/2022
 20121                                  	; ds = cs
 20122                                  	;push	cs
 20123                                  	;pop	ds
 20124                                  
 20125 00000F06 A0[9D02]                	mov	al,[FILES]
 20126 00000F09 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20127                                  				;  it does sign extend.
 20128 00000F0B 89C1                    	mov	cx,ax
 20129 00000F0D 31DB                    	xor	bx,bx		;close standard input
 20130 00000F0F B43E                    	mov	ah,3Eh ; CLOSE
 20131 00000F11 CD21                    	int	21h
 20132 00000F13 BB0200                  	mov	bx,2
 20133                                  rcclloop:			;close everybody but standard output
 20134 00000F16 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20135 00000F18 CD21                    	int	21h		; in case we can't get new one open.
 20136 00000F1A 43                      	inc	bx
 20137 00000F1B E2F9                    	loop	rcclloop
 20138                                  
 20139 00000F1D BA[F033]                	mov	dx,condev
 20140 00000F20 B002                    	mov	al,2
 20141 00000F22 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20142 00000F24 F9                      	stc			; set for possible int 24
 20143 00000F25 CD21                    	int	21h
 20144 00000F27 7305                    	jnc	short goaux
 20145 00000F29 E82724                  	call	badfil
 20146 00000F2C EB13                    	jmp	short goaux2
 20147                                  goaux:	
 20148 00000F2E 50                      	push	ax
 20149 00000F2F BB0100                  	mov	bx,1		;close standard output
 20150 00000F32 B43E                    	mov	ah,3Eh ; CLOSE
 20151 00000F34 CD21                    	int	21h
 20152 00000F36 58                      	pop	ax
 20153                                  
 20154 00000F37 89C3                    	mov	bx,ax		;new device handle
 20155 00000F39 B445                    	mov	ah,45h ; XDUP
 20156 00000F3B CD21                    	int	21h		;dup to 1,stdout
 20157 00000F3D B445                    	mov	ah,45h ; XDUP
 20158 00000F3F CD21                    	int	21h		;dup to 2,stderr
 20159                                  goaux2: 
 20160 00000F41 BA[F433]                	mov	dx,auxdev
 20161 00000F44 B002                    	mov	al,2		;read/write access
 20162 00000F46 E83B24                  	call	open_dev
 20163                                  
 20164 00000F49 BA[F833]                	mov	dx,prndev
 20165 00000F4C B001                    	mov	al,1		;write only
 20166 00000F4E E83324                  	call	open_dev
 20167                                  
 20168                                  ;global rearm command for shared interrupt devices attached in the system;
 20169                                  ;shared interrupt attachment has some problem when it issues interrupt
 20170                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20171                                  ;no further interrupts on that level will be presented until a global rearm
 20172                                  ;is issued. by the request of the system architecture group, msbio will
 20173                                  ;issue a global rearm after every device driver is loaded.
 20174                                  ;to issue a global rearm:	;for pc1,xt,palace
 20175                                  ;
 20176                                  ;			  out 02f2h,xx  ; interrupt level 2
 20177                                  ;			  out 02f3h,xx  ; interrupt level 3
 20178                                  ;			  out 02f4h,xx  ; interrupt level 4
 20179                                  ;			  out 02f5h,xx  ; interrupt level 5
 20180                                  ;			  out 02f6h,xx  ; interrupt level 6
 20181                                  ;			  out 02f7h,xx  ; interrupt level 7
 20182                                  ;
 20183                                  ;	for pc at,in addition to the above commands,
 20184                                  ;	need to handle the secondary interrupt handler
 20185                                  ;
 20186                                  ;			  out 06f2h,xx  ; interrupt level 10
 20187                                  ;			  out 06f3h,xx  ; interrupt level 11
 20188                                  ;			  out 06f4h,xx  ; interrupt level 12
 20189                                  ;			  out 06f6h,xx  ; interrupt level 14
 20190                                  ;			  out 06f7h,xx  ; interrupt level 15
 20191                                  ;
 20192                                  ;	for round-up machine
 20193                                  ;
 20194                                  ;			  none.
 20195                                  
 20196                                  ; where xx stands for any value.
 20197                                  ;
 20198                                  ; for your information,after naples level machine,the system service bios
 20199                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20200                                  
 20201                                  	; 24/10/2022
 20202                                  
 20203 00000F51 50                      	push	ax
 20204 00000F52 53                      	push	bx
 20205 00000F53 52                      	push	dx
 20206 00000F54 06                      	push	es
 20207                                  
 20208 00000F55 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20209 00000F57 BAF202                  	mov	dx,2F2h 		;get starting address
 20210 00000F5A EE                      	out	dx,al			; out 02f2h,0ffh
 20211 00000F5B 42                      	inc	dx
 20212 00000F5C EE                      	out	dx,al			; out 02f3h,0ffh
 20213 00000F5D 42                      	inc	dx
 20214 00000F5E EE                      	out	dx,al			; out 02f4h,0ffh
 20215 00000F5F 42                      	inc	dx
 20216 00000F60 EE                      	out	dx,al			; out 02f5h,0ffh
 20217 00000F61 42                      	inc	dx
 20218 00000F62 EE                      	out	dx,al			; out 02f6h,0ffh
 20219 00000F63 42                      	inc	dx
 20220 00000F64 EE                      	out	dx,al			; out 02f7h,0ffh
 20221                                  
 20222                                  ;sb secondary global rearm
 20223                                  
 20224 00000F65 B800F0                  	mov	ax,0F000h		;get machine type
 20225 00000F68 8EC0                    	mov	es,ax
 20226 00000F6A 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20227 00000F70 740D                    	je	short startrearm	; *if at no need to check
 20228                                  
 20229 00000F72 B4C0                    	mov	ah,0C0h 		;get system configuration
 20230 00000F74 CD15                    	int	15h			; *
 20231 00000F76 7216                    	jc	short finishrearm	; *jmp if old rom
 20232                                  
 20233                                  ; test feature byte for secondary interrupt controller
 20234                                  
 20235 00000F78 26F6470540              	test	byte [es:bx+5],40h
 20236                                  	; 24/10/2022
 20237                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20238 00000F7D 740F                    	je	short finishrearm	;jmp if it is there
 20239                                  
 20240                                  startrearm:
 20241 00000F7F B0FF                    	mov	al,0FFh 		;write any pattern to port
 20242 00000F81 BAF206                  	mov	dx,6F2h 		;get starting address
 20243 00000F84 EE                      	out	dx,al			;out 06f2h,0ffh
 20244 00000F85 42                      	inc	dx			;bump address
 20245 00000F86 EE                      	out	dx,al			;out 06f3h,0ffh
 20246 00000F87 42                      	inc	dx			;bump address
 20247 00000F88 EE                      	out	dx,al			;out 06f4h,0ffh
 20248 00000F89 42                      	inc	dx			;bump address
 20249 00000F8A 42                      	inc	dx			;bump address
 20250 00000F8B EE                      	out	dx,al			;out 06f6h,0ffh
 20251 00000F8C 42                      	inc	dx			;bump address
 20252 00000F8D EE                      	out	dx,al			;out 06f7h,0ffh
 20253                                  
 20254                                  finishrearm:
 20255 00000F8E 07                      	pop	es
 20256 00000F8F 5A                      	pop	dx
 20257 00000F90 5B                      	pop	bx
 20258 00000F91 58                      	pop	ax
 20259                                  
 20260                                  ;    global rearm end *******************
 20261                                  
 20262                                  ; ----------------------------------------------------------------------
 20263                                  ; allocate sysinit_base for install= command
 20264                                  ; ----------------------------------------------------------------------
 20265                                  ; sysinit_base allocation.
 20266                                  ;   check if endfile has been called to handle install= command.
 20267                                  
 20268                                  set_sysinit_base:
 20269                                  
 20270                                  ; ----------------------------------------------------------------------
 20271                                  ;sysinit_base will be established in the secure area of
 20272                                  ;lower memory when it handles the first install= command.
 20273                                  ;sysinit_base is the place where the actual exec function will be called and
 20274                                  ;will check sysinit module in high memory if it is damaged by the application
 20275                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20276                                  ;is displayed by sysinit_base.
 20277                                  ; ----------------------------------------------------------------------
 20278                                  
 20279                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20280                                  	; (SYSINIT:1028h)
 20281                                  
 20282                                  	; 11/12/2022
 20283                                  	; ds = cs
 20284 00000F92 50                      	push	ax			; set devmark for mem command
 20285 00000F93 A1[E003]                	mov	ax,[memhi]
 20286 00000F96 2B06[E403]              	sub	ax,[area]
 20287 00000F9A A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20288                                  	;mov	al,devmark_inst ; 'T'
 20289 00000F9D B054                    	mov	al,'T'
 20290 00000F9F E86904                  	call	setdevmark
 20291 00000FA2 58                      	pop	ax
 20292                                  
 20293 00000FA3 8B3E[E003]              	mov	di,[memhi]
 20294 00000FA7 8EC7                    	mov	es,di
 20295 00000FA9 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20296 00000FAD 31FF                    	xor	di,di
 20297 00000FAF 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20298 00000FB3 BE[C510]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20299 00000FB6 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20300                                  	; 24/10/2022 
 20301                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20302 00000FB9 010E[DE03]              	add	[memlo],cx
 20303                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20304                                  	; 11/12/2022
 20305                                  	; ds = cs
 20306                                  	;or	byte [cs:setdevmarkflag],2
 20307 00000FBD 800E[2E14]02            	or	byte [setdevmarkflag],2
 20308                                  	;or	byte [setdevmarkflag],for_devmark
 20309 00000FC2 E8FB20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20310 00000FC5 F3A4                    	rep	movsb			; reallocate it.
 20311                                  
 20312 00000FC7 C706[5203][9E10]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20313 00000FCD 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20314                                  	;or	word [install_flag],has_installed ; set the flag.
 20315                                  	;or	byte [install_flag],has_installed ; 2
 20316                                  	; 11/12/2022
 20317 00000FD1 800E[4A03]02            	or	byte [install_flag],2
 20318                                  	; 24/10/2022
 20319                                  	;or	word [install_flag],2	
 20320                                  
 20321                                  ; ----------------------------------------------------------------------
 20322                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20323                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20324                                  ; have_install_cmd.
 20325                                  ; ----------------------------------------------------------------------
 20326                                  
 20327 00000FD6 E8E720                  	call	round
 20328 00000FD9 8B1E[E003]              	mov	bx,[memhi]
 20329 00000FDD A1[E403]                	mov	ax,[area]
 20330 00000FE0 A3[DA03]                	mov	[old_area],ax		; save [area]
 20331 00000FE3 8EC0                    	mov	es,ax			;calc what we needed
 20332 00000FE5 29C3                    	sub	bx,ax
 20333                                  	; 24/10/2022
 20334 00000FE7 B44A                    	mov	ah,4Ah ; SETBLOCK
 20335 00000FE9 CD21                    	int	21h			;give the rest back
 20336                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20337                                  		; ES = segment address of block to change
 20338                                  		; BX = new size in paragraphs
 20339 00000FEB 06                      	push	es
 20340 00000FEC 8CC0                    	mov	ax,es
 20341 00000FEE 48                      	dec	ax
 20342 00000FEF 8EC0                    	mov	es,ax			;point to arena
 20343                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20344                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20345                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20346                                  	; 24/10/2022
 20347 00000FF1 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20348 00000FF8 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20349 00000FFF 07                      	pop	es
 20350                                  
 20351 00001000 BBFFFF                  	mov	bx,0FFFFh
 20352 00001003 B448                    	mov	ah,48h ; ALLOC
 20353 00001005 CD21                    	int	21h
 20354 00001007 B448                    	mov	ah,48h ; ALLOC
 20355 00001009 CD21                    	int	21h			; allocate the rest of the memory
 20356                                  		; DOS - 2+ - ALLOCATE MEMORY
 20357                                  		; BX = number of 16-byte paragraphs desired
 20358 0000100B A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20359 0000100E C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20360                                  
 20361                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20362                                  ;;;; allocated.
 20363                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20364                                  ;;;; this time) to the top-of-the memory),here we are going to
 20365                                  ;;;; 1). "setblock" from memhi to confbot.
 20366                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20367                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20368                                  
 20369                                  ;memory allocation for sysinit,confbot module.
 20370                                  
 20371 00001014 8EC0                    	mov	es,ax
 20372                                  	;mov	bx,[CONFBOT]
 20373                                  	; 24/10/2022
 20374 00001016 8B1E[A102]              	mov	bx,[top_of_cdss]
 20375 0000101A 29C3                    	sub	bx,ax			; confbot - memhi
 20376 0000101C 4B                      	dec	bx			; make a room for the memory block id.
 20377 0000101D 4B                      	dec	bx			; make sure!!!.
 20378 0000101E B44A                    	mov	ah,4Ah ; SETBLOCK
 20379 00001020 CD21                    	int	21h			; this will free (confbot to top of memory)
 20380                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20381                                  		; ES = segment address of block to change
 20382                                  		; BX = new size in paragraphs
 20383 00001022 BBFFFF                  	mov	bx,0FFFFh
 20384 00001025 B448                    	mov	ah,48h ; ALLOC
 20385 00001027 CD21                    	int	21h
 20386 00001029 B448                    	mov	ah,48h ; ALLOC
 20387 0000102B CD21                    	int	21h			; allocate (confbot to top of memory)
 20388                                  		; DOS - 2+ - ALLOCATE MEMORY
 20389                                  		; BX = number of 16-byte paragraphs desired
 20390 0000102D A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20391                                  					; need this to free this area for command.com.
 20392 00001030 8E06[E003]              	mov	es,[memhi]
 20393 00001034 B449                    	mov	ah,49h			; free allocated memory.
 20394 00001036 CD21                    	int	21h			; free (memhi to confbot(=area))
 20395                                  		; DOS - 2+ - FREE MEMORY
 20396                                  		; ES = segment address of area to be freed
 20397                                  endfile_ret:
 20398 00001038 C3                      	retn
 20399                                  
 20400                                  ; End of "EndFile" DOS structure configuration.
 20401                                  
 20402                                  ; ----------------------------------------------------------------------
 20403                                  ; 26/03/2019 - Retro DOS v4.0
 20404                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20405                                  ; ----------------------------------------------------------------------
 20406                                  ; Do_Install_Exec
 20407                                  ;
 20408                                  ; This procedure is used to EXEC a program being loaded via the 
 20409                                  ; "install=" mechanism in config.sys. It does this by setting up
 20410                                  ; the parameters, and then jumping to sysinit_base, which has been
 20411                                  ; setup in low memory. When complete, sysinit_base will jump back
 20412                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20413                                  ; program).
 20414                                  
 20415                                  ;SYSINIT:10CFh:
 20416                                  
 20417                                  do_install_exec:			; now,handles install= command.
 20418                                  
 20419 00001039 56                      	push	si			; save si for config.sys again.
 20420                                  
 20421                                  ; we are going to call load/exec function.
 20422                                  ; set es:bx to the parameter block here;;;;;;;
 20423                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20424                                  ; after the filename. so parameter starts after that. if next
 20425                                  ; character is a line feed (i.e. 10),then assume that the 0
 20426                                  ; we already encountered used to be a carrage return. in this
 20427                                  ; case,let's set the length to 0 which will be followed by
 20428                                  ; carridge return.
 20429                                  
 20430                                  ; es:si -> command line in config.sys. points to the first non blank
 20431                                  ;character after =.
 20432                                  
 20433 0000103A 06                      	push	es
 20434 0000103B 1E                      	push	ds
 20435 0000103C 07                      	pop	es
 20436 0000103D 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20437 0000103E 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20438                                  
 20439 00001040 31C9                    	xor	cx,cx
 20440 00001042 FC                      	cld
 20441 00001043 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20442 00001049 BF[6E03]                	mov	di,ldexec_parm
 20443                                  installfilename:			; skip the file name
 20444 0000104C AC                      	lodsb				; al = ds:si; si++
 20445 0000104D 3C00                    	cmp	al,0
 20446 0000104F 7402                    	je	short got_installparm
 20447 00001051 EBF9                    	jmp	short installfilename
 20448                                  got_installparm:			; copy the parameters to ldexec_parm
 20449 00001053 AC                      	lodsb
 20450 00001054 268805                  	mov	[es:di],al
 20451 00001057 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20452 00001059 7405                    	je	short done_installparm
 20453 0000105B FEC1                    	inc	cl			; # of char. in the parm.
 20454 0000105D 47                      	inc	di
 20455 0000105E EBF3                    	jmp	short got_installparm
 20456                                  done_installparm:
 20457 00001060 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20458 00001065 80F900                  	cmp	cl,0			; if no parm,then
 20459 00001068 7506                    	jne	short install_seg_set 	; let the parm area
 20460 0000106A 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20461                                  					; starts with cr.
 20462                                  install_seg_set:
 20463 00001070 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20464 00001077 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20465                                  
 20466                                  ;---------------------------------------------------M067----------------
 20467                                  ;
 20468                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20469                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20470                                  ;
 20471                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20472                                  ;
 20473                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20474                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20475                                  ; 	was fixed. 
 20476                                  ;
 20477                                  ; ----------------------------------------------------------------------
 20478                                  
 20479                                  ;;ifdef   MULTI_CONFIG
 20480                                  
 20481                                  ; If there's any environment data in "config_wrkseg", pass to app
 20482                                  
 20483                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20484                                          ;mov     cx,ax
 20485                                          ;cmp     word [cs:config_envlen],0
 20486                                          ;je      short no_envdata2
 20487                                          ;mov     cx,[cs:config_wrkseg]
 20488                                  ;no_envdata2:
 20489                                  ;;endif  ;MULTI_CONFIG
 20490                                  
 20491                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20492                                  	; 24/10/2022
 20493                                  	;mov	[cs:iexec.environ],cx
 20494                                  	; 02/11/2022
 20495 00001079 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20496                                  
 20497                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20498 0000107D 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20499                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20500 00001081 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20501                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20502 00001085 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20503 00001089 E86E00                  	call	sum_up
 20504 0000108C 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20505 00001090 31C0                    	xor	ax,ax
 20506 00001092 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20507 00001094 BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20508 00001097 06                      	push	es			; save es,ds for load/exec
 20509 00001098 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20510 00001099 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20511                                  					; load/exec function and check sum.
 20512                                  
 20513                                  ;----------------------------------------
 20514                                  
 20515                                  ;j.k. this is the returning address from sysinit_base.
 20516                                  
 20517                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20518                                  
 20519                                  sysinitptr:				; returning far address from sysinit_base
 20520 0000109E 5E                      	pop	si			; restore si for config.sys file.
 20521 0000109F 06                      	push	es
 20522 000010A0 1E                      	push	ds
 20523 000010A1 07                      	pop	es
 20524 000010A2 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20525 000010A3 7306                            jnc     short install_exit_ret
 20526                                  
 20527 000010A5 56                      	push	si			; error in loading the file for install=.
 20528 000010A6 E8AE22                  	call	badload 		; es:si-> path,filename,0.
 20529 000010A9 5E                      	pop	si
 20530                                  
 20531                                  	; 24/10/2022
 20532                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20533                                  	; 11/12/2022
 20534                                  	; ds = cs
 20535 000010AA C3                      	retn
 20536                                  
 20537                                  install_exit_ret:
 20538                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20539                                  
 20540                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20541                                  ;SYSINIT:1142h:
 20542 000010AB B44D                    	mov     ah,4Dh
 20543 000010AD CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20544 000010AF 80FC03                  	cmp     ah,3
 20545 000010B2 7404                    	jz      short sysinitptr_retn
 20546 000010B4 E89316                  	call    error_line
 20547 000010B7 F9                      	stc
 20548                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20549 000010B8 C3                      	retn		
 20550                                  
 20551                                  ; ----------------------------------------------------------------------
 20552                                  
 20553                                  ;**	ParaRound - Round Up length to paragraph multiple
 20554                                  ;
 20555                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20556                                  ;	by 16 yielding a "length in paragraphs" value.
 20557                                  ;
 20558                                  ;	ENTRY	(ax) = byte length
 20559                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20560                                  ;	USES	ax, flags
 20561                                  
 20562                                  ParaRound:
 20563 000010B9 83C00F                  	add	ax,15
 20564 000010BC D1D8                    	rcr	ax,1
 20565 000010BE D1E8                    	shr	ax,1
 20566 000010C0 D1E8                    	shr	ax,1
 20567 000010C2 D1E8                    	shr	ax,1
 20568 000010C4 C3                      	retn
 20569                                  
 20570                                  ; ----------------------------------------------------------------------
 20571                                  ; sysinit_base module.
 20572                                  ;
 20573                                  ; This module is relocated by the routine EndFile to a location in low
 20574                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20575                                  ; that are being loaded by the "install=" command. After the EXEC call
 20576                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20577                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20578                                  ; If it did, then this module will print an error message and stop the
 20579                                  ; system. Otherwise, it returns control to SYSINIT.
 20580                                  ;
 20581                                  ;in: after relocation,
 20582                                  ;    ax = 4b00h - load and execute the program dos function.
 20583                                  ;    ds = confbot. segment of config.sys file image
 20584                                  ;    es = sysinitseg. segment of sysinit module itself.
 20585                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20586                                  ;    es:bx = pointer to a parameter block for load.
 20587                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20588                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20589                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20590                                  ;			word boundary moduler form.
 20591                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20592                                  ;
 20593                                  ;note: sysinit should save necessary registers and when the control is back
 20594                                  
 20595                                  	; 24/10/2022
 20596                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20597                                  sysinit_base:				
 20598 000010C5 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20599 000010CA 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20600 000010CF CD21                    	int	21h			; load/exec dos call.
 20601 000010D1 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20602 000010D6 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20603 000010DB 1F                      	pop	ds			; restore confbot seg
 20604 000010DC 07                      	pop	es			; restore sysinitseg
 20605 000010DD 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20606                                  					; at this time,i don't have to worry about
 20607                                  					; that sysinit module has been broken or not.
 20608 000010DF E81800                  	call	sum_up			; otherwise,check if it is good.
 20609 000010E2 263906[5603]            	cmp	[es:checksum],ax
 20610 000010E7 740C                    	je	short sysinit_base_end
 20611                                  
 20612                                  ;	memory broken. show "memory allocation error" message and stall.
 20613                                  
 20614 000010E9 B409                    	mov	ah,9
 20615 000010EB 0E                      	push	cs
 20616 000010EC 1F                      	pop	ds
 20617 000010ED BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20618 000010F0 CD21                    	int	21h
 20619                                  		; DOS - PRINT STRING
 20620                                  		; DS:DX -> string terminated by "$"
 20621                                  	; 24/10/2022
 20622                                  _stall: 
 20623                                  	; 11/12/2022
 20624 000010F2 F4                      	hlt 
 20625                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20626                                  	;hlt				;use HLT to minimize energy consumption
 20627 000010F3 EBFD                            jmp	short _stall
 20628                                  
 20629                                  sysinit_base_end: 
 20630 000010F5 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20631                                  
 20632                                  ;-------------------------------------
 20633                                  
 20634                                  sum_up:
 20635                                  
 20636                                  ;in:   es - sysinitseg.
 20637                                  ;out:  ax - result
 20638                                  ;
 20639                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20640                                  ;	 sysinit segment,the data area, and the current stack area are not
 20641                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20642                                  ;	 gaurantee to be safe.
 20643                                  ;
 20644                                  ;first sum up confbot seg.
 20645                                  
 20646 000010FA 1E                      	push	ds
 20647                                  	;mov	ax,[es:CONFBOT]
 20648                                  	; 24/10/2022
 20649 000010FB 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20650 000010FF 8ED8                    	mov	ds,ax
 20651 00001101 31F6                    	xor	si,si
 20652 00001103 31C0                    	xor	ax,ax
 20653 00001105 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20654                                  					;whole test better fail.
 20655 0000110A D1E9                    	shr	cx,1			; make it a word count
 20656 0000110C 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20657                                  sum1:
 20658 0000110E 0304                    	add	ax,[si]
 20659 00001110 46                      	inc	si
 20660 00001111 46                      	inc	si
 20661 00001112 E2FA                    	loop	sum1
 20662                                  ;now,sum up sysinit module.
 20663                                  sum_sys_code:
 20664                                  	; 24/10/2022
 20665 00001114 BE1411                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20666                                  				        ; starting after the stack.  M069
 20667                                  					;  this does not cover the possible stack code!!!
 20668                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20669                                  	; 02/11/2022
 20670                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20671                                  	; 30/12/2022 (BugFix)
 20672                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20673 00001117 B9[E038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20674 0000111A 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20675 0000111C D1E9                    	shr	cx,1
 20676                                  sum2:
 20677 0000111E 260304                  	add	ax,[es:si]
 20678 00001121 46                      	inc	si
 20679 00001122 46                      	inc	si
 20680 00001123 E2F9                    	loop	sum2
 20681 00001125 1F                      	pop	ds
 20682 00001126 C3                      	retn
 20683                                  
 20684                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20685                                  
 20686                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20687                                  ;SYSINIT:11BDh:
 20688 00001127 0000                    	dw	0
 20689                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20690                                  ;SYSINIT:11BFh:
 20691 00001129 0000                    	dw	0
 20692                                  
 20693                                  mem_alloc_err_msgx:
 20694                                  
 20695                                         ;include msbio.cl4		; memory allocation error message
 20696                                  
 20697                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20698 0000112B 0D0A                    	db	0Dh,0Ah
 20699 0000112D 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20699 00001136 6C6F636174696F6E20-
 20699 0000113F 6572726F722024     
 20700                                  
 20701                                  end_sysinit_base: ; label byte
 20702                                  	; 24/10/2022
 20703                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20704                                  
 20705                                  ; ----------------------------------------------------------------------
 20706                                  ; Set_Buffer
 20707                                  ;
 20708                                  ;function: set buffers in the real memory.				  
 20709                                  ;	   lastly set the memhi,memlo for the next available free address.
 20710                                  ;
 20711                                  ;input:    ds:bx -> buffinfo.
 20712                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20713                                  ;	   singlebuffersize = buffer header size + sector size		  
 20714                                  ;
 20715                                  ;output:   buffers Queue established.	       				   
 20716                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20717                                  ; ----------------------------------------------------------------------
 20718                                  
 20719                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20720                                  	; (SYSINIT:11DCh)
 20721                                  
 20722                                  set_buffer:
 20723 00001146 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20724 00001148 E85500                  	call	GetBufferAddr
 20725 0000114B 7402                    	jz	short set_buff_1
 20726 0000114D B201                    	mov	dl,1				; buffers in HMA
 20727                                  set_buff_1:
 20728                                  	; 25/10/2022
 20729                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20730 0000114F 893F                    	mov	[bx],di
 20731                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20732 00001151 8C4702                  	mov	[bx+2],es
 20733                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20734 00001154 C747040000              	mov	word [bx+4],0
 20735                                  
 20736 00001159 89F8                    	mov	ax,di
 20737 0000115B 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20738 00001160 57                      	push	di				; remember first buffer
 20739                                  
 20740                                  ;	for each buffer
 20741                                  
 20742                                  nxt_buff:
 20743 00001161 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20744 00001164 89C7                    	mov	di,ax
 20745 00001166 E2F9                    	loop	nxt_buff
 20746                                  
 20747 00001168 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20748                                  
 20749 0000116D 59                      	pop	cx				; get first buffer
 20750                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20751 0000116E 26890D                  	mov	[es:di],cx
 20752 00001171 87CF                    	xchg	cx,di
 20753                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20754                                  	; 25/10/2022
 20755 00001173 26894D02                	mov	[es:di+2],cx
 20756                                  
 20757 00001177 08D2                    	or	dl,dl				; In HMa ?
 20758 00001179 7417                    	jz	short set_buff_2		; no
 20759                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20760 0000117B C6470C01                	mov	byte [bx+12],1
 20761 0000117F 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20762                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20763 00001183 C7470D0000              	mov	word [bx+13],0
 20764                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20765 00001188 89470F                  	mov	word [bx+15],ax
 20766 0000118B 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20767                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20768 0000118F 83E814                  	sub	ax,20
 20769                                  set_buff_2:
 20770 00001192 2E0106[DE03]            	add	[cs:memlo],ax
 20771                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20772 00001197 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 20773                                  	;call	round
 20774                                  	;retn
 20775                                  	; 12/12/2022
 20776 0000119D E9201F                  	jmp	round
 20777                                  
 20778                                  ; ----------------------------------------------------------------------
 20779                                  ; procedure : GetBufferAddr
 20780                                  ;
 20781                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 20782                                  ;
 20783                                  ; returns in es:di the buffer adress
 20784                                  ; returns NZ if allocated in HMA
 20785                                  ; ----------------------------------------------------------------------
 20786                                  
 20787                                  	; 25/10/2022 
 20788                                  GetBufferAddr:
 20789 000011A0 53                      	push	bx
 20790 000011A1 52                      	push	dx
 20791 000011A2 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 20792 000011A6 2EF726[9702]            	mul	word [cs:buffers]
 20793                                  	;add	ax,0Fh
 20794 000011AB 83C00F                  	add	ax,15 
 20795                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20796                                  	;and	ax,~15	; 0FFF0h	; para round
 20797                                  	; 12/12/2022
 20798 000011AE 24F0                    	and	al,~15	; 0F0h
 20799 000011B0 89C3                    	mov	bx,ax
 20800 000011B2 B8024A                  	mov	ax,4A02h
 20801                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 20802 000011B5 CD2F                    	int	2Fh
 20803 000011B7 83FFFF                  	cmp	di,0FFFFh
 20804 000011BA 7508                    	jne	short got_hma
 20805 000011BC BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 20806                                  	;zf=1
 20807                                  	;xor	di,di	; 25/10/2022
 20808                                  	;zf=1
 20809 000011BF 2E8E06[E003]            	mov	es,[cs:memhi]
 20810                                  got_hma:
 20811 000011C4 5A                      	pop	dx
 20812 000011C5 5B                      	pop	bx
 20813 000011C6 C3                      	retn
 20814                                  
 20815                                  ; ----------------------------------------------------------------------
 20816                                  
 20817                                  set_buffer_info:
 20818                                  
 20819                                  ;function: set buf_link,buf_id,buf_sector
 20820                                  ;
 20821                                  ;in: es:di -> buffer header to be set.
 20822                                  ;    ax = di
 20823                                  ;
 20824                                  ;out:
 20825                                  ;    above entries set.
 20826                                  
 20827                                  	; 25/10/2022 
 20828 000011C7 2EFF36[3903]            	push	word [cs:buf_prev_off]
 20829                                  	;pop	word [es:di+buffinfo.buf_prev]
 20830 000011CC 268F4502                	pop	word [es:di+2]
 20831 000011D0 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 20832 000011D4 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 20833                                  	;mov	[es:di+buffinfo.buf_next],ax
 20834 000011D9 268905                  	mov	[es:di],ax
 20835                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 20836 000011DC 26C74504FF00            	mov	word [es:di+4],00FFh
 20837                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 20838 000011E2 26C745060000            	mov	word [es:di+6],0
 20839                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 20840 000011E8 26C745080000            	mov	word [es:di+8],0
 20841 000011EE C3                      	retn
 20842                                  
 20843                                  ; ======================================================================
 20844                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 20845                                  ; ----------------------------------------------------------------------
 20846                                  ; 27/03/2019 - Retro DOS v4.0
 20847                                  
 20848                                  ; ----------------------------------------------------------------------
 20849                                  ; ibmstack initialization routine.
 20850                                  ;
 20851                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 20852                                  ;	has been modified. this initialization routine also has to
 20853                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 20854                                  ;	should be set to signal that this interrupt handler is the
 20855                                  ;	first handler hooked to this interrupt vector.
 20856                                  ;	we determine this by looking at the instruction pointed by
 20857                                  ;	this vector. if it is iret, then this handler should be the
 20858                                  ;	first one. in our case, only the interrupt vector 77h is the
 20859                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 20860                                  ;
 20861                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 20862                                  ;	some design changes are needed to the above interrupt sharing
 20863                                  ;	method. the above sharing scheme assumes that 1). interrupt
 20864                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 20865                                  ;	interrupts would only be generated on levels 7 and 15.
 20866                                  ;	these assumptions are not true any more. we have to use the firstflag
 20867                                  ;	for every level of interrupt. we will set the firstflag on the following
 20868                                  ;	conditions:
 20869                                  ;
 20870                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 20871                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 20872                                  ;	 c. else if cs:ip points to an iret, then "first"
 20873                                  ;	 d. else if cs:ip points to dummy, then "first"
 20874                                  ;
 20875                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 20876                                  ;	be equal to the value at f000:ff01. this location is the initial value
 20877                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 20878                                  ;	the bioses for all of the machines.
 20879                                  ;
 20880                                  ;	system design group requests bios to handle the phantom interrupts.
 20881                                  ;
 20882                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 20883                                  ;	produced by the bogus adapter card even without interrupt request is
 20884                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 20885                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 20886                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 20887                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 20888                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 20889                                  ;	interrupt line.
 20890                                  ;
 20891                                  ;	to handle those "phantom" interrupts, the main stack code will check
 20892                                  ;	the own firstflag, and if it is not "first" (which means the forward
 20893                                  ;	pointer points to the legal shared interrupt handler), then pass the
 20894                                  ;	control. if it is the first, then the following action should be
 20895                                  ;	taken. we don't have to implement skack logic in this case.
 20896                                  ;
 20897                                  ;	to implement this logic, we rather choose a simple method.
 20898                                  ;	if ont of the above "firstflag" conditions is met, we are not
 20899                                  ;	going to hook this interrupt vector. the reason is if the original
 20900                                  ;	vector points to "iret" and do nothing, we don't need
 20901                                  ;	to implement the stack logic for it. this will simplify implementation
 20902                                  ;	while maintaining compatibility with the old version of dos.
 20903                                  ;	this implies that in the main stack code, there might be a stack code
 20904                                  ;	that will never be used, a dead code.
 20905                                  ;
 20906                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 20907                                  
 20908                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20909                                  	; (SYSINIT:1287h)
 20910                                  
 20911                                  	; 14/12/2022
 20912                                  stackinit:
 20913 000011EF 50                      	push	ax
 20914 000011F0 1E                      	push	ds
 20915 000011F1 06                      	push	es
 20916 000011F2 53                      	push	bx
 20917 000011F3 51                      	push	cx
 20918 000011F4 52                      	push	dx
 20919 000011F5 57                      	push	di
 20920 000011F6 56                      	push	si
 20921 000011F7 55                      	push	bp
 20922                                  
 20923                                  ;currently es -> stack code area
 20924                                  
 20925                                  	; 12/12/2022
 20926                                  	; ds = cs
 20927 000011F8 A1[8A02]                	mov	ax,[stack_count]
 20928 000011FB 89C1                    	mov	cx,ax  ; *!*!*  
 20929                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20930                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 20931                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 20932 000011FD 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 20933                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 20934 00001201 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 20935 00001204 26A3[0600]              	mov	[es:stacksize],ax
 20936                                  	; 12/12/2022
 20937 00001208 A1[8E02]                	mov	ax,[stack_addr]			; offset
 20938                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20939                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20940                                  	;mov	ax,[cs:stack_addr]  ; !!
 20941 0000120B 26A3[0800]              	mov	[es:stacks],ax
 20942                                  	; 12/12/2022
 20943 0000120F 89C5                    	mov	bp,ax ; *!*
 20944 00001211 A1[9002]                	mov	ax,[stack_addr+2]
 20945                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20946                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20947                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 20948 00001214 26A3[0A00]              	mov	[es:stacks+2],ax
 20949                                  
 20950                                  ; initialize the data fields with the parameters
 20951                                  
 20952                                  ; "firstentry" will always be at stacks
 20953                                  
 20954                                  	;mov	bp,[es:stacks]			; get offset of stack
 20955                                  	; 12/12/2022
 20956                                  	; bp = [es:stacks] ; *!*
 20957 00001218 26892E[0C00]            	mov	[es:firstentry],bp
 20958                                  
 20959                                  ; the stacks will always immediately follow the table entries
 20960                                  
 20961 0000121D B80800                  	mov	ax,entrysize ; 8
 20962                                  	;mov	cx,[es:stackcount]
 20963                                  	; 12/12/2022
 20964                                  	; cx = [es:stackcount] ; *!*!*
 20965 00001220 F7E1                    	mul	cx
 20966 00001222 01E8                    	add	ax,bp
 20967 00001224 26A3[0400]              	mov	[es:stackat],ax
 20968 00001228 89C3                    	mov	bx,ax
 20969 0000122A 83EB02                  	sub	bx,2
 20970                                  
 20971                                  ; zero the entire stack area to start with
 20972                                  
 20973 0000122D 268B3E[0400]            	mov	di,[es:stackat]
 20974 00001232 26A1[0600]              	mov	ax,[es:stacksize]
 20975 00001236 F7E1                    	mul	cx
 20976 00001238 89C1                    	mov	cx,ax
 20977 0000123A 31C0                    	xor	ax,ax
 20978 0000123C 06                      	push	es
 20979 0000123D 1F                      	pop	ds				;ds = relocated stack code seg.
 20980                                  
 20981                                  ;now, ds -> stack code area
 20982                                  
 20983 0000123E 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 20984 00001242 FC                      	cld
 20985 00001243 F3AA                    	rep	stosb
 20986                                  
 20987 00001245 8B0E[0200]              	mov	cx,[stackcount]
 20988                                  
 20989                                  ; loop for "count" times, building a table entry
 20990                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 20991                                  ;  cx = number of entries
 20992                                  ;  es:bp => base of stacks - 2
 20993                                  ;  es:bx => first table entry
 20994                                  
 20995                                  buildloop:
 20996                                  	; 11/12/2022
 20997                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 20998                                  	; 25/10/2022
 20999 00001249 26C6460000              	mov	byte [es:bp],free
 21000 0000124E 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21001                                  	;mov	[es:bp+1],al
 21002 00001252 26894602                	mov	[es:bp+savedsp],ax
 21003                                  	;mov	[es:bp2],ax
 21004 00001256 26894604                	mov	[es:bp+savedss],ax
 21005                                  	;mov	[es:bp+4],ax
 21006 0000125A 031E[0600]              	add	bx,[stacksize]
 21007 0000125E 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21008                                  	;mov	[es:bp+6],bx
 21009 00001262 26892F                  	mov	[es:bx],bp
 21010 00001265 83C508                  	add	bp,entrysize ; 8
 21011                                  
 21012 00001268 E2DF                    	loop	buildloop
 21013                                  
 21014 0000126A 83ED08                  	sub	bp,entrysize ; 8
 21015 0000126D 892E[0E00]              	mov	[lastentry],bp
 21016 00001271 892E[1000]              	mov	[nextentry],bp
 21017                                  
 21018 00001275 1E                      	push	ds
 21019 00001276 B800F0                  	mov	ax,0F000h		;look at the model byte
 21020 00001279 8ED8                    	mov	ds,ax
 21021 0000127B 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21022 00001280 1F                      	pop	ds
 21023 00001281 7504                    	jne	short skip_disablenmis
 21024                                  
 21025 00001283 B007                    	mov	al,07h			; disable convertible nmis
 21026 00001285 E672                    	out	72h,al
 21027                                  
 21028                                  skip_disablenmis:
 21029 00001287 31C0                    	xor	ax,ax
 21030 00001289 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21031                                  					;ds - relocated stack code segment
 21032 0000128B FA                      	cli
 21033                                  
 21034                                  	;irp	aa,<02,08,09,70>
 21035                                  	;
 21036                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21037                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21038                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21039                                  	;mov	dx,offset int&aa	;pass where new handler is
 21040                                  	;call	new_init_loop		;adjust the vector to new handler,
 21041                                  	;				;saving pointer to original owner
 21042                                  	;endm
 21043                                  
 21044                                  stkinit_02:
 21045 0000128C BE0800                  	mov	si,02h*4 ; 8
 21046 0000128F BF[4206]                	mov	di,INT19OLD02
 21047 00001292 BB[1200]                	mov	bx,old02
 21048 00001295 BA[1600]                	mov	dx,int02
 21049 00001298 E84901                  	call	new_init_loop
 21050                                  stkinit_08:
 21051 0000129B BE2000                  	mov	si,08h*4 ; 32
 21052 0000129E BF[4706]                	mov	di,INT19OLD08
 21053 000012A1 BB[3800]                	mov	bx,old08
 21054 000012A4 BA[3C00]                	mov	dx,int08
 21055 000012A7 E83A01                  	call	new_init_loop
 21056                                  stkinit_09:
 21057 000012AA BE2400                  	mov	si,09h*4 ; 36
 21058 000012AD BF[4C06]                	mov	di,INT19OLD09
 21059 000012B0 BB[4100]                	mov	bx,old09
 21060 000012B3 BA[4500]                	mov	dx,int09
 21061 000012B6 E82B01                  	call	new_init_loop
 21062                                  stkinit_70:
 21063 000012B9 BEC001                  	mov	si,70h*4 ; 448
 21064 000012BC BF[6A06]                	mov	di,INT19OLD70
 21065 000012BF BB[4E00]                	mov	bx,old70
 21066 000012C2 BA[5200]                	mov	dx,int70
 21067 000012C5 E81C01                  	call	new_init_loop
 21068                                  
 21069                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21070                                  	;
 21071                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21072                                  	;push	ds			;save relocated stack code segment
 21073                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21074                                  	;push	ds
 21075                                  	;pop	dx			;dx = segment value
 21076                                  	;	
 21077                                  	;cmp	dx,0
 21078                                  	;jz	int&aa&_first
 21079                                  	;
 21080                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21081                                  	;jz	int&aa&_first
 21082                                  	;
 21083                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21084                                  	;jz	int&aa&_not_first
 21085                                  	;
 21086                                  	;cmp	dx,0f000h		;rom bios segment
 21087                                  	;jnz	int&aa&_not_first
 21088                                  	;
 21089                                  	;push	es
 21090                                  	;push	dx
 21091                                  	;mov	dx,0f000h
 21092                                  	;mov	es,dx
 21093                                  	;cmp	bx,word ptr es:0ff01h
 21094                                         	;pop	dx
 21095                                  	;pop	es
 21096                                  	;jz	int&aa&_first
 21097                                  	;
 21098                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21099                                  	;pop	ds
 21100                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21101                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21102                                  	;mov	dx, offset int&aa	;pass where new handler is
 21103                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21104                                  	;				;pointer to original owner.
 21105                                  	;jmp	short int&aa&_end
 21106                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21107                                  	;pop	ds
 21108                                  ;int&aa&_end:
 21109                                  	;
 21110                                  	;endm
 21111                                  
 21112                                  stkinit_0A:
 21113 000012C8 BE2800                  	mov	si,0Ah*4 ; 40
 21114                                  	
 21115                                  ; 14/12/2022
 21116                                  %if 0	
 21117                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21118                                  	push	ds
 21119                                  	
 21120                                  	lds	bx,[es:si]
 21121                                  	push	ds
 21122                                  	pop	dx
 21123                                  		
 21124                                  	cmp	dx,0
 21125                                  	je	short int_0A_first
 21126                                  	
 21127                                  	cmp	byte [bx],0CFh
 21128                                  	je	short int_0A_first
 21129                                  	
 21130                                  	cmp	word [bx+6],424Bh
 21131                                  	je	short int_0A_not_first
 21132                                  	
 21133                                  	cmp	dx,0F000h
 21134                                  	jne	short int_0A_not_first
 21135                                  	
 21136                                  	push	es
 21137                                  	push	dx
 21138                                  	mov	dx,0F000h
 21139                                  	mov	es,dx
 21140                                  	cmp	bx,[es:0FF01h]
 21141                                         	pop	dx
 21142                                  	pop	es
 21143                                  	je	short int_0A_first
 21144                                  %Endif
 21145                                  
 21146                                  	; 14/12/2022
 21147                                  	; 25/10/2022
 21148 000012CB E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21149 000012CE 730C                    	jnc	short int_0A_first
 21150                                  	
 21151                                  int_0A_not_first:
 21152                                  	; 14/12/2022
 21153                                  	; 25/10/2022
 21154                                  	;pop	ds
 21155 000012D0 BF[5106]                	mov	di,INT19OLD0A
 21156 000012D3 BB[5900]                	mov	bx,old0A
 21157 000012D6 BA[5700]                	mov	dx,int0A
 21158 000012D9 E80801                  	call	new_init_loop
 21159                                  	
 21160                                  	; 14/12/2022	
 21161                                  	;jmp	short int_0A_end
 21162                                  ;int_0A_first:
 21163                                  	; 25/10/2022
 21164                                  	;pop	ds
 21165                                  
 21166                                  	; 14/12/2022
 21167                                  int_0A_first:
 21168                                  int_0A_end:
 21169                                  
 21170                                  stkinit_0B:
 21171 000012DC BE2C00                  	mov	si,0Bh*4 ; 44
 21172                                  	
 21173                                  	; 14/12/2022
 21174                                  	; 25/10/2022
 21175 000012DF E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21176 000012E2 730C                    	jnc	short int_0B_end ; int_0B_first
 21177                                  
 21178                                  ; 14/12/2022
 21179                                  %if 0	
 21180                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21181                                  	push	ds
 21182                                  	lds	bx,[es:si]
 21183                                  	push	ds
 21184                                  	pop	dx
 21185                                  		
 21186                                  	cmp	dx,0
 21187                                  	je	short int_0B_first
 21188                                  
 21189                                  	cmp	byte [bx],0CFh
 21190                                  	je	short int_0B_first
 21191                                  	
 21192                                  	cmp	word [bx+6],424Bh
 21193                                  	je	short int_0B_not_first
 21194                                  	
 21195                                  	cmp	dx,0F000h
 21196                                  	jne	short int_0B_not_first
 21197                                  
 21198                                  	push	es
 21199                                  	push	dx
 21200                                  	mov	dx,0F000h
 21201                                  	mov	es,dx
 21202                                  	cmp	bx,[es:0FF01h]
 21203                                  	pop	dx
 21204                                  	pop	es
 21205                                  	je	short int_0B_first
 21206                                  %endif
 21207                                  
 21208                                  int_0B_not_first:
 21209                                  	; 14/12/2022
 21210                                  	; 25/10/2022
 21211                                  	;pop	ds
 21212 000012E4 BF[5606]                	mov	di,INT19OLD0B
 21213 000012E7 BB[7100]                	mov	bx,old0B
 21214 000012EA BA[6F00]                	mov	dx,int0B
 21215 000012ED E8F400                  	call	new_init_loop
 21216                                  
 21217                                  	; 14/12/2022
 21218                                  	;jmp	short int_0B_end
 21219                                  ;int_0B_first:
 21220                                  	; 25/10/2022
 21221                                  	;pop	ds
 21222                                  
 21223                                  int_0B_end:
 21224                                  	
 21225                                  stkinit_0C:
 21226 000012F0 BE3000                  	mov	si,0Ch*4 ; 48
 21227                                  	
 21228                                  	; 14/12/2022
 21229                                  	; 25/10/2022
 21230 000012F3 E8C300                  	call	int_xx_first_check
 21231 000012F6 730C                    	jnc	short int_0C_end ; int_0C_first
 21232                                  
 21233                                  ; 14/12/2022
 21234                                  %if 0	
 21235                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21236                                  	push	ds
 21237                                  	lds	bx,[es:si]
 21238                                  	push	ds
 21239                                  	pop	dx
 21240                                  		
 21241                                  	cmp	dx,0
 21242                                  	je	short int_0C_first
 21243                                  
 21244                                  	cmp	byte [bx],0CFh
 21245                                  	je	short int_0C_first
 21246                                  	
 21247                                  	cmp	word [bx+6],424Bh
 21248                                  	je	short int_0C_not_first
 21249                                  	
 21250                                  	cmp	dx,0F000h
 21251                                  	jne	short int_0C_not_first
 21252                                  
 21253                                  	push	es
 21254                                  	push	dx
 21255                                  	mov	dx,0F000h
 21256                                  	mov	es,dx
 21257                                  	cmp	bx,[es:0FF01h]
 21258                                  	pop	dx
 21259                                  	pop	es
 21260                                  	je	short int_0C_first
 21261                                  %endif
 21262                                  	
 21263                                  int_0C_not_first:
 21264                                  	; 14/12/2022
 21265                                  	; 25/10/2022
 21266                                  	;pop	ds
 21267 000012F8 BF[5B06]                	mov	di,INT19OLD0C
 21268 000012FB BB[8900]                	mov	bx,old0C
 21269 000012FE BA[8700]                	mov	dx,int0C
 21270 00001301 E8E000                  	call	new_init_loop
 21271                                  
 21272                                  	; 14/12/2022
 21273                                  	;jmp	short int_0C_end
 21274                                  ;int_0C_first:
 21275                                  	; 25/10/2022
 21276                                  	;pop	ds
 21277                                  
 21278                                  int_0C_end:
 21279                                  
 21280                                  stkinit_0D:
 21281 00001304 BE3400                  	mov	si,0Dh*4 ; 52
 21282                                  
 21283                                  	; 14/12/2022	
 21284                                  	; 25/10/2022
 21285 00001307 E8AF00                  	call	int_xx_first_check
 21286 0000130A 730C                    	jnc	short int_0D_end ; int_0D_first
 21287                                  
 21288                                  ; 14/12/2022
 21289                                  %if 0	
 21290                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21291                                  	push	ds
 21292                                  	lds	bx,[es:si]
 21293                                  	push	ds
 21294                                  	pop	dx
 21295                                  		
 21296                                  	cmp	dx,0
 21297                                  	je	short int_0D_first
 21298                                  
 21299                                  	cmp	byte [bx],0CFh
 21300                                  	je	short int_0D_first
 21301                                  	
 21302                                  	cmp	word [bx+6],424Bh
 21303                                  	je	short int_0D_not_first
 21304                                  	
 21305                                  	cmp	dx,0F000h
 21306                                  	jne	short int_0D_not_first
 21307                                  
 21308                                  	push	es
 21309                                  	push	dx
 21310                                  	mov	dx,0F000h
 21311                                  	mov	es,dx
 21312                                  	cmp	bx,[es:0FF01h]
 21313                                  	pop	dx
 21314                                  	pop	es
 21315                                  	je	short int_0D_first
 21316                                  %endif
 21317                                  	
 21318                                  int_0D_not_first:
 21319                                  	; 14/12/2022
 21320                                  	; 25/10/2022
 21321                                  	;pop	ds
 21322 0000130C BF[6006]                	mov	di,INT19OLD0D
 21323 0000130F BB[A100]                	mov	bx,old0D
 21324 00001312 BA[9F00]                	mov	dx,int0D
 21325 00001315 E8CC00                  	call	new_init_loop
 21326                                  
 21327                                  	; 14/12/2022
 21328                                  	;jmp	short int_0D_end
 21329                                  	; 02/11/2022
 21330                                  ;int_0D_first:
 21331                                  	;pop	ds
 21332                                  
 21333                                  int_0D_end:
 21334                                  
 21335                                  stkinit_0E:
 21336 00001318 BE3800                  	mov	si,0Eh*4 ; 56
 21337                                  
 21338                                  	; 14/12/2022	
 21339                                  	; 25/10/2022
 21340 0000131B E89B00                  	call	int_xx_first_check
 21341 0000131E 730C                    	jnc	short int_0E_end ; int_0E_first
 21342                                  
 21343                                  ; 14/12/2022
 21344                                  %if 0	
 21345                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21346                                  	push	ds
 21347                                  	lds	bx,[es:si]
 21348                                  	push	ds
 21349                                  	pop	dx
 21350                                  		
 21351                                  	cmp	dx,0
 21352                                  	je	short int_0E_first
 21353                                  
 21354                                  	cmp	byte [bx],0CFh
 21355                                  	je	short int_0E_first
 21356                                  	
 21357                                  	cmp	word [bx+6],424Bh
 21358                                  	je	short int_0E_not_first
 21359                                  	
 21360                                  	cmp	dx,0F000h
 21361                                  	jne	short int_0E_not_first
 21362                                  
 21363                                  	push	es
 21364                                  	push	dx
 21365                                  	mov	dx,0F000h
 21366                                  	mov	es,dx
 21367                                  	cmp	bx,[es:0FF01h]
 21368                                  	pop	dx
 21369                                  	pop	es
 21370                                  	je	short int_0E_first
 21371                                  %endif
 21372                                  	
 21373                                  int_0E_not_first:
 21374                                  	; 14/12/2022
 21375                                  	; 25/10/2022
 21376                                  	;pop	ds
 21377 00001320 BF[6506]                	mov	di,INT19OLD0E
 21378 00001323 BB[B900]                	mov	bx,old0E
 21379 00001326 BA[B700]                	mov	dx,int0E
 21380 00001329 E8B800                  	call	new_init_loop
 21381                                  
 21382                                  	; 14/12/2022
 21383                                  	;jmp	short int_0E_end
 21384                                  ;int_0E_first:
 21385                                  	; 25/10/2022
 21386                                  	;pop	ds	
 21387                                  
 21388                                  int_0E_end:
 21389                                  
 21390                                  stkinit_72:
 21391 0000132C BEC801                  	mov	si,72h*4 ; 456
 21392                                  	
 21393                                  	; 14/12/2022
 21394                                  	; 25/10/2022
 21395 0000132F E88700                  	call	int_xx_first_check
 21396 00001332 730C                    	jnc	short int_72_end ; int_72_first
 21397                                  
 21398                                  ; 14/12/2022
 21399                                  %if 0	
 21400                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21401                                  	push	ds
 21402                                  	lds	bx,[es:si]
 21403                                  	push	ds
 21404                                  	pop	dx
 21405                                  		
 21406                                  	cmp	dx,0
 21407                                  	je	short int_72_first
 21408                                  
 21409                                  	cmp	byte [bx],0CFh
 21410                                  	je	short int_72_first
 21411                                  	
 21412                                  	cmp	word [bx+6],424Bh
 21413                                  	je	short int_72_not_first
 21414                                  	
 21415                                  	cmp	dx,0F000h
 21416                                  	jne	short int_72_not_first
 21417                                  
 21418                                  	push	es
 21419                                  	push	dx
 21420                                  	mov	dx,0F000h
 21421                                  	mov	es,dx
 21422                                  	cmp	bx,[es:0FF01h]
 21423                                  	pop	dx
 21424                                  	pop	es
 21425                                  	je	short int_72_first
 21426                                  %endif
 21427                                  	
 21428                                  int_72_not_first:
 21429                                  	; 14/12/2022
 21430                                  	; 25/10/2022
 21431                                  	;pop	ds
 21432 00001334 BF[6F06]                	mov	di,INT19OLD72
 21433 00001337 BB[D100]                	mov	bx,old72
 21434 0000133A BA[CF00]                	mov	dx,int72
 21435 0000133D E8A400                  	call	new_init_loop
 21436                                  
 21437                                  	; 14/12/2022
 21438                                  	;jmp	short int_72_end
 21439                                  ;int_72_first:
 21440                                  	; 25/10/2022
 21441                                  	;pop	ds
 21442                                  
 21443                                  int_72_end:
 21444                                  
 21445                                  stkinit_73:
 21446 00001340 BECC01                  	mov	si,73h*4 ; 460
 21447                                  	
 21448                                  	; 14/12/2022
 21449                                  	; 25/10/2022
 21450 00001343 E87300                  	call	int_xx_first_check
 21451 00001346 730C                    	jnc	short int_73_end ; int_73_first
 21452                                  
 21453                                  ; 14/12/2022
 21454                                  %if 0	
 21455                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21456                                  	push	ds
 21457                                  	lds	bx,[es:si]
 21458                                  	push	ds
 21459                                  	pop	dx
 21460                                  		
 21461                                  	cmp	dx,0
 21462                                  	je	short int_73_first
 21463                                  
 21464                                  	cmp	byte [bx],0CFh
 21465                                  	je	short int_73_first
 21466                                  	
 21467                                  	cmp	word [bx+6],424Bh
 21468                                  	je	short int_73_not_first
 21469                                  	
 21470                                  	cmp	dx,0F000h
 21471                                  	jne	short int_73_not_first
 21472                                  
 21473                                  	push	es
 21474                                  	push	dx
 21475                                  	mov	dx,0F000h
 21476                                  	mov	es,dx
 21477                                  	cmp	bx,[es:0FF01h]
 21478                                  	pop	dx
 21479                                  	pop	es
 21480                                  	je	short int_73_first
 21481                                  %endif	
 21482                                  	
 21483                                  int_73_not_first:
 21484                                  	; 14/12/2022
 21485                                  	; 25/10/2022
 21486                                  	;pop	ds
 21487 00001348 BF[7406]                	mov	di,INT19OLD73
 21488 0000134B BB[E900]                	mov	bx,old73
 21489 0000134E BA[E700]                	mov	dx,int73
 21490 00001351 E89000                  	call	new_init_loop
 21491                                  
 21492                                  	; 14/12/2022
 21493                                  	;jmp	short int_73_end
 21494                                  ;int_73_first:
 21495                                  	; 25/10/2022
 21496                                  	;pop	ds
 21497                                  
 21498                                  int_73_end:
 21499                                  
 21500                                  stkinit_74:
 21501 00001354 BED001                  	mov	si,74h*4 ; 464
 21502                                  	
 21503                                  	; 14/12/2022
 21504                                  	; 25/10/2022
 21505 00001357 E85F00                  	call	int_xx_first_check
 21506 0000135A 730C                    	jnc	short int_74_end ; int_74_first
 21507                                  
 21508                                  ; 14/12/2022
 21509                                  %if 0		
 21510                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21511                                  	push	ds
 21512                                  	lds	bx,[es:si]
 21513                                  	push	ds
 21514                                  	pop	dx
 21515                                  		
 21516                                  	cmp	dx,0
 21517                                  	je	short int_74_first
 21518                                  
 21519                                  	cmp	byte [bx],0CFh
 21520                                  	je	short int_74_first
 21521                                  	
 21522                                  	cmp	word [bx+6],424Bh
 21523                                  	je	short int_74_not_first
 21524                                  	
 21525                                  	cmp	dx,0F000h
 21526                                  	jne	short int_74_not_first
 21527                                  
 21528                                  	push	es
 21529                                  	push	dx
 21530                                  	mov	dx,0F000h
 21531                                  	mov	es,dx
 21532                                  	cmp	bx,[es:0FF01h]
 21533                                  	pop	dx
 21534                                  	pop	es
 21535                                  	je	short int_74_first
 21536                                  %endif
 21537                                  
 21538                                  int_74_not_first:
 21539                                  	; 14/12/2022
 21540                                  	; 25/10/2022
 21541                                  	;pop	ds
 21542 0000135C BF[7906]                	mov	di,INT19OLD74
 21543 0000135F BB[0101]                	mov	bx,old74
 21544 00001362 BA[FF00]                	mov	dx,int74
 21545 00001365 E87C00                  	call	new_init_loop
 21546                                  	
 21547                                  	; 14/12/2022
 21548                                  	;jmp	short int_74_end
 21549                                  ;int_74_first:
 21550                                  	; 25/10/2022
 21551                                  	;pop	ds
 21552                                  
 21553                                  int_74_end:
 21554                                  
 21555                                  stkinit_76:
 21556 00001368 BED801                  	mov	si,76h*4 ; 472
 21557                                  	
 21558                                  	; 14/12/2022
 21559                                  	; 25/10/2022
 21560 0000136B E84B00                  	call	int_xx_first_check
 21561 0000136E 730E                    	jnc	short int_76_end ; int_76_first
 21562                                  
 21563                                  ; 14/12/2022
 21564                                  %if 0	
 21565                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21566                                  	push	ds
 21567                                  	lds	bx,[es:si]
 21568                                  	push	ds
 21569                                  	pop	dx
 21570                                  		
 21571                                  	cmp	dx,0
 21572                                  	je	short int_76_first
 21573                                  
 21574                                  	cmp	byte [bx],0CFh
 21575                                  	je	short int_76_first
 21576                                  	
 21577                                  	cmp	word [bx+6],424Bh
 21578                                  	je	short int_76_not_first
 21579                                  	
 21580                                  	cmp	dx,0F000h
 21581                                  	jne	short int_76_not_first
 21582                                  
 21583                                  	push	es
 21584                                  	push	dx
 21585                                  	mov	dx,0F000h
 21586                                  	mov	es,dx
 21587                                  	cmp	bx,[es:0FF01h]
 21588                                  	pop	dx
 21589                                  	pop	es
 21590                                  	je	short int_76_first
 21591                                  %endif
 21592                                  	
 21593                                  int_76_not_first:
 21594                                  	; 14/12/2022
 21595                                  	; 25/10/2022
 21596                                  	;pop	ds
 21597 00001370 BF[7E06]                	mov	di,INT19OLD76
 21598 00001373 BB[1901]                	mov	bx,old76
 21599 00001376 BA[1701]                	mov	dx,int76
 21600 00001379 E86800                  	call	new_init_loop
 21601                                  
 21602                                  	; 14/12/2022
 21603 0000137C EB00                    	jmp	short int_76_end
 21604                                  ;int_76_first:
 21605                                  	; 25/10/2022
 21606                                  	;pop	ds
 21607                                  
 21608                                  int_76_end:
 21609                                  
 21610                                  stkinit_77:
 21611 0000137E BEDC01                  	mov	si,77h*4 ; 476
 21612                                  	
 21613                                  	; 14/12/2022
 21614                                  	; 25/10/2022
 21615 00001381 E83500                  	call	int_xx_first_check
 21616 00001384 730C                    	jnc	short int_77_end ; int_77_first
 21617                                  
 21618                                  ; 14/12/2022
 21619                                  %if 0	
 21620                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21621                                  	push	ds
 21622                                  	lds	bx,[es:si]
 21623                                  	push	ds
 21624                                  	pop	dx
 21625                                  		
 21626                                  	cmp	dx,0
 21627                                  	je	short int_77_first
 21628                                  
 21629                                  	cmp	byte [bx],0CFh
 21630                                  	je	short int_77_first
 21631                                  	
 21632                                  	cmp	word [bx+6],424Bh
 21633                                  	je	short int_77_not_first
 21634                                  	
 21635                                  	cmp	dx,0F000h
 21636                                  	jne	short int_77_not_first
 21637                                  
 21638                                  	push	es
 21639                                  	push	dx
 21640                                  	mov	dx,0F000h
 21641                                  	mov	es,dx
 21642                                  	cmp	bx,[es:0FF01h]
 21643                                  	pop	dx
 21644                                  	pop	es
 21645                                  	je	short int_77_first
 21646                                  %endif
 21647                                  	
 21648                                  int_77_not_first:
 21649                                  	; 14/12/2022
 21650                                  	; 25/10/2022
 21651                                  	;pop	ds
 21652 00001386 BF[8306]                	mov	di,INT19OLD77
 21653 00001389 BB[3101]                	mov	bx,old77
 21654 0000138C BA[2F01]                	mov	dx,int77
 21655 0000138F E85200                  	call	new_init_loop
 21656                                  
 21657                                  	; 14/12/2022
 21658                                  	;jmp	short int_77_end
 21659                                  ;int_77_first:
 21660                                  	; 25/10/2022
 21661                                  	;pop	ds
 21662                                  
 21663                                  int_77_end:
 21664 00001392 1E                      	push	ds
 21665 00001393 B800F0                  	mov	ax,0F000h		; look at the model byte
 21666 00001396 8ED8                    	mov	ds,ax
 21667 00001398 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21668 0000139D 1F                      	pop	ds
 21669 0000139E 7504                    	jne	short skip_enablenmis
 21670                                  
 21671 000013A0 B027                    	mov	al,27h			; enable convertible nmis
 21672 000013A2 E672                    	out	72h,al
 21673                                  
 21674                                  ; 25/10/2022
 21675                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21676                                  
 21677                                  skip_enablenmis:
 21678 000013A4 FB                      	sti
 21679                                  	;;mov	ax,Bios_Data ; 70h
 21680                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21681                                  	; 21/10/2022
 21682 000013A5 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21683 000013A8 8ED8                    	mov	ds,ax
 21684                                  
 21685                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21686                                  
 21687 000013AA C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21688                                  					; initialization is complete
 21689                                  
 21690 000013AF 5D                      	pop	bp			; restore all
 21691 000013B0 5E                      	pop	si
 21692 000013B1 5F                      	pop	di
 21693 000013B2 5A                      	pop	dx
 21694 000013B3 59                      	pop	cx
 21695 000013B4 5B                      	pop	bx
 21696 000013B5 07                      	pop	es
 21697 000013B6 1F                      	pop	ds
 21698 000013B7 58                      	pop	ax
 21699 000013B8 C3                      	retn
 21700                                  
 21701                                  ; 14/12/2022
 21702                                  ; ----------------------------------------------------------------------
 21703                                  
 21704                                  	; 14/12/2022
 21705                                  	; 25/10/2022
 21706                                  ;%if 0
 21707                                  	; 27/03/2019 - Retro DOS v4.0
 21708                                  int_xx_first_check:
 21709 000013B9 1E                      	push	ds
 21710 000013BA 26C51C                  	lds	bx,[es:si]
 21711 000013BD 1E                      	push	ds
 21712 000013BE 5A                      	pop	dx
 21713                                  		
 21714 000013BF 83FA00                  	cmp	dx,0
 21715 000013C2 741E                    	je	short int_xx_first
 21716                                  	
 21717 000013C4 803FCF                  	cmp	byte [bx],0CFh
 21718 000013C7 7419                    	je	short int_xx_first
 21719                                  	
 21720 000013C9 817F064B42              	cmp	word [bx+6],424Bh
 21721 000013CE 7411                    	je	short int_xx_not_first
 21722                                  	
 21723 000013D0 81FA00F0                	cmp	dx,0F000h
 21724 000013D4 750B                    	jne	short int_xx_not_first
 21725                                  
 21726 000013D6 06                      	push	es
 21727                                  	;push	dx
 21728                                  	;mov	dx,0F000h
 21729 000013D7 8EC2                    	mov	es,dx
 21730 000013D9 263B1E01FF              	cmp	bx,[es:0FF01h]
 21731                                        	;pop	dx
 21732 000013DE 07                      	pop	es
 21733 000013DF 7401                    	je	short int_xx_first
 21734                                  
 21735                                  int_xx_not_first:
 21736 000013E1 F9                      	stc
 21737                                  int_xx_first:
 21738 000013E2 1F                      	pop	ds
 21739 000013E3 C3                      	retn
 21740                                  
 21741                                  ;%endif
 21742                                  
 21743                                  ; ----------------------------------------------------------------------
 21744                                  ; 27/03/2019 - Retro DOS v4.0
 21745                                  
 21746                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21747                                  ; (SYSINIT:1610h)
 21748                                  
 21749                                  new_init_loop:
 21750                                  
 21751                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21752                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21753                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21754                                  ;	di=offset value of int19old&aa variable in bios.
 21755                                  ;	es=zero, segid of vector table
 21756                                  ;	ds=relocated stack code segment
 21757                                  
 21758 000013E4 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21759 000013E7 8907                    	mov	[bx],ax			; to original owner in ds
 21760 000013E9 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21761 000013ED 894702                  	mov	[bx+2],ax		; to original owner in ds
 21762                                  
 21763 000013F0 1E                      	push	ds
 21764                                  	;;mov	ax,Bios_Data ; 70h
 21765                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21766                                  	; 21/10/2022
 21767 000013F1 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21768 000013F4 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21769 000013F6 268B04                  	mov	ax,[es:si]		;int 19 handler
 21770 000013F9 8905                    	mov	[di],ax
 21771 000013FB 268B4402                	mov	ax,[es:si+2]
 21772 000013FF 894502                  	mov	word [di+2],ax
 21773 00001402 1F                      	pop	ds
 21774                                  
 21775 00001403 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21776 00001406 268C5C02                	mov	[es:si+2],ds
 21777 0000140A C3                      	retn
 21778                                  
 21779                                  ; End of STACK initialization routine
 21780                                  ; ----------------------------------------------------------------------
 21781                                  
 21782                                  ; ----------------------------------------------------------------------
 21783                                  ;set the devmark for mem command.
 21784                                  ;in: [memhi] - the address to place devmark
 21785                                  ;    [memlo] = 0
 21786                                  ;    al = id for devmark_id
 21787                                  ;out: devmark established.
 21788                                  ;     the address saved in cs:[devmark_addr]
 21789                                  ;     [memhi] increase by 1.
 21790                                  ; ----------------------------------------------------------------------
 21791                                  
 21792                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21793                                  ; (SYSINIT:1637h)
 21794                                  
 21795                                  setdevmark:
 21796                                  
 21797 0000140B 06                      	push	es
 21798 0000140C 51                      	push	cx
 21799                                  
 21800 0000140D 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21801 00001412 2E890E[2C14]            	mov	[cs:devmark_addr],cx
 21802 00001417 8EC1                    	mov	es,cx
 21803                                  	; 25/10/2022
 21804                                  	;mov	[es:devmark.id],al
 21805 00001419 26A20000                	mov	[es:0],al
 21806 0000141D 41                      	inc	cx
 21807                                  	;mov	[es:devmark.seg],cx
 21808 0000141E 26890E0100              	mov	[es:1],cx
 21809                                  
 21810 00001423 59                      	pop	cx
 21811 00001424 07                      	pop	es
 21812 00001425 2EFF06[E003]            	inc	word [cs:memhi]
 21813 0000142A C3                      	retn
 21814                                  
 21815                                  ; ----------------------------------------------------------------------
 21816                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 21817                                  ; ----------------------------------------------------------------------
 21818                                  ; 27/03/2019 - Retro DOS v4.0
 21819                                  
 21820                                  ;MULTI_CONFIG	equ 1
 21821                                  
 21822                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 21823                                                                          ; allocation strategy call
 21824                                  
 21825                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 21826                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 21827                                  
 21828                                  default_filenum equ 8
 21829                                  
 21830                                  ;stacksw	equ true		; include switchable hardware stacks
 21831                                  
 21832                                  ; external variable defined in ibmbio module for multi-track
 21833                                  
 21834                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 21835                                  					; it on after handling config.sys file as a
 21836                                  					; default value,if multrk_flag = multrk_off1.
 21837                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 21838                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 21839                                  
 21840                                  ; if stacksw
 21841                                  
 21842                                  ; internal stack parameters
 21843                                  
 21844                                  ;entrysize	equ 8
 21845                                  
 21846                                  ;mincount	equ 8
 21847                                  ;defaultcount	equ 9
 21848                                  ;maxcount	equ 64
 21849                                  
 21850                                  ;minsize 	equ 32
 21851                                  ;defaultsize	equ 128
 21852                                  ;maxsize 	equ 512
 21853                                  
 21854                                  DOS_FLAG_OFFSET	equ 86h
 21855                                  
 21856                                  ;ifdef MULTI_CONFIG
 21857                                  ;
 21858                                  ;   config_envlen must immediately precede config_wrkseg, because they
 21859                                  ;   may be loaded as a dword ptr
 21860                                  
 21861                                  ; 25/10/2022
 21862                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 21863                                  ;               			;  a scratch env, this is its length
 21864                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 21865                                  ;                   			;  segment of work area
 21866                                  ;
 21867                                  ;config_cmd:	db  0  			; current config cmd
 21868                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 21869                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 21870                                  
 21871                                  ;endif ; MULTI_CONFIG
 21872                                  
 21873 0000142B 00                      multdeviceflag:	db  0
 21874                                  
 21875 0000142C 0000                    devmark_addr:	dw  0			;segment address for devmark.
 21876                                  
 21877 0000142E 00                      setdevmarkflag: db  0			;flag used for devmark
 21878                                  
 21879                                  ; 12/12/2022
 21880                                  ;driver_units:	db  0			;total unitcount for driver
 21881                                  
 21882                                  ; 12/12/2022
 21883                                  ;ems_stub_installed:
 21884                                  ;		db  0
 21885                                  
 21886                                  ; 12/12/2022	
 21887                                  ;align 2
 21888                                  
 21889                                  badparm_ptr:	; label	dword
 21890 0000142F 0000                    badparm_off:	dw  0
 21891 00001431 0000                    badparm_seg:	dw  0
 21892                                  
 21893                                  ;******************************************************************************
 21894                                  ;take care of config.sys file.
 21895                                  ;system parser data and code.
 21896                                  ;******************************************************************************
 21897                                  
 21898                                  ;*******************************************************************
 21899                                  ; parser options set for msbio sysconf module
 21900                                  ;*******************************************************************
 21901                                  ;
 21902                                  ;**** default assemble swiches definition **************************
 21903                                  
 21904                                  ;farsw	equ 0		; near call expected
 21905                                  ;datesw	equ 0		; check date format
 21906                                  ;timesw	equ 0		; check time format
 21907                                  ;filesw	equ 1		; check file specification
 21908                                  ;capsw	equ 0		; perform caps if specified
 21909                                  ;cmpxsw	equ 0		; check complex list
 21910                                  ;numsw	equ 1		; check numeric value
 21911                                  ;keysw	equ 0		; support keywords
 21912                                  ;swsw	equ 1		; support switches
 21913                                  ;val1sw	equ 1		; support value definition 1
 21914                                  ;val2sw	equ 0		; support value definition 2
 21915                                  ;val3sw	equ 1		; support value definition 3
 21916                                  ;drvsw	equ 1		; support drive only format
 21917                                  ;qussw	equ 0		; support quoted string format
 21918                                  
 21919                                  ; psdata_seg equ cs
 21920                                  
 21921                                  	;.xlist
 21922                                  	;include parse.asm		;together with psdata.inc
 21923                                  	;.list
 21924                                  
 21925                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 21926                                  ; ======================================================================
 21927                                  ; 27/03/2019 - Retro DOS v4.0
 21928                                  
 21929                                  ; 30/03/2019
 21930                                  ; VERSION.INC (MSDOS 6.0) 
 21931                                  ; Set DBCS Blank constant
 21932                                  
 21933                                  ; ifndef DBCS
 21934                                  DB_SPACE EQU 2020h
 21935                                  DB_SP_HI EQU 20h
 21936                                  DB_SP_LO EQU 20h
 21937                                  ; else
 21938                                  
 21939                                  ;*******************************************************************
 21940                                  ; Parser include file
 21941                                  ;*******************************************************************
 21942                                  
 21943                                  ;**** Equation field
 21944                                  ;-------- Character code definition
 21945                                  
 21946                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 21947                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 21948                                  _$P_Period	   equ	"."             ;AN020;
 21949                                  _$P_Slash	   equ	"/"             ;AN020;
 21950                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 21951                                  _$P_Comma	   equ	","             ;AN000;
 21952                                  _$P_Switch	   equ	"/"             ;AN000;
 21953                                  _$P_Keyword	   equ	"="             ;AN000;
 21954                                  _$P_Colon	   equ	":"             ;AN000;
 21955                                  _$P_Plus 	   equ	"+"             ;AN000;
 21956                                  _$P_Minus	   equ	"-"             ;AN000;
 21957                                  _$P_Rparen	   equ	")"             ;AN000;
 21958                                  _$P_Lparen	   equ	"("             ;AN000;
 21959                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 21960                                  _$P_DQuote	   equ	'"'             ;AN000;
 21961                                  _$P_NULL 	   equ	0		;AN000;
 21962                                  _$P_TAB		   equ	9		;AN000;
 21963                                  _$P_CR		   equ	0Dh		;AN000;
 21964                                  _$P_LF		   equ	0Ah		;AN000;
 21965                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 21966                                  
 21967                                  ;-------- Masks
 21968                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 21969                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 21970                                  
 21971                                  ;-------- DOS function call related equs
 21972                                  
 21973                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 21974                                  					; by this call, following information
 21975                                  struc _$P_CDI	
 21976 00000000 ????                     .DateF: resw 1
 21977 00000002 ??????????               .Money: resb 5
 21978 00000007 ????                     .1000:	 resb 2
 21979 00000009 ????                     .Dec:	 resb 2
 21980 0000000B ????                     .DateS: resb 2
 21981 0000000D ????                     .TimeS: resb 2
 21982 0000000F ??                          	 resb 1
 21983 00000010 ??                      	 resb 1
 21984 00000011 ??                       .TimeF: resb 1	 
 21985 00000012 ????????                	 resw 2
 21986 00000016 ????                    	 resb 2
 21987 00000018 <res Ah>                	 resw 5
 21988                                   .size:
 21989                                  endstruc
 21990                                  
 21991                                  _$P_Date_MDY	   equ	0		;AN000;
 21992                                  _$P_Date_DMY	   equ	1		;AN000;
 21993                                  _$P_Date_YMD	   equ	2		;AN000;
 21994                                  ;-------------
 21995                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 21996                                  					;AN000; DS:SI will points to DBCS EV
 21997                                  ;-------------
 21998                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 21999                                  					;AN000; following parameters are set
 22000                                  					;AN000; to get casemap table.
 22001                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22002                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22003                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22004                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22005                                  					; By this call following information
 22006                                  					; is returned.
 22007                                  struc _$P_DOS_TBL
 22008 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22009 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22010 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22011                                  endstruc
 22012                                  
 22013                                  ; ----------------------------------------------------------------------------
 22014                                  ; PARMS 	LABEL	BYTE
 22015                                  ;		DW	PARMSX
 22016                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22017                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22018                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22019                                  ;					; TYPICAL ARE ";", "="
 22020                                  ;					; "," & WHITESPACE ALWAYS
 22021                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22022                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22023                                  ; ----------------------------------------------------------------------------
 22024                                  
 22025                                  ;-------------------------------- PARMS block structure
 22026                                  struc _$P_PARMS_Blk
 22027 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22028 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22029 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22030                                  endstruc
 22031                                  
 22032                                  _$P_Len_PARMS	   equ	4		;AN000;
 22033                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22034                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22035                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22036                                  
 22037                                  ; ----------------------------------------------------------------------------
 22038                                  ; PARMSX	LABEL	BYTE
 22039                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22040                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22041                                  ;		:			; REPEATS maxp-1 TIMES
 22042                                  ;		DB	maxs		; # OF SWITCHES
 22043                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22044                                  ;		:			; REPEATS maxs-1 TIMES
 22045                                  ;		DB	maxk		; # OF KEYWORD
 22046                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22047                                  ;		:			; REPEATS maxk-1 TIMES
 22048                                  ; ----------------------------------------------------------------------------
 22049                                  
 22050                                  ;-------------------------------- PARMSX block structure
 22051                                  struc _$P_PARMSX_Blk		;AN000;
 22052 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22053 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22054 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22055                                  endstruc
 22056                                  
 22057                                  ; ----------------------------------------------------------------------------
 22058                                  ; << Control field definition  >>
 22059                                  ;
 22060                                  ;
 22061                                  ;CONTROL   LABEL   BYTE
 22062                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22063                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22064                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22065                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22066                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22067                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22068                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22069                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22070                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22071                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22072                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22073                                  ;				   ; 0002H=REPEATS ALLOWED
 22074                                  ;				   ; 0001H=OPTIONAL
 22075                                  ;	   DW	   FUNCTION_FLAGS
 22076                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22077                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22078                                  ;				   ; 0010H=REMOVE ":" AT END
 22079                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22080                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22081                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22082                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22083                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22084                                  ;	   :
 22085                                  ;
 22086                                  ;Note:
 22087                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22088                                  ;      DATE bit simalteniously.
 22089                                  ;
 22090                                  ;      The parser examins each bit along with the following priority.
 22091                                  ;
 22092                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22093                                  ;      FILE SPEC -> SIMPLE STRING.
 22094                                  ;
 22095                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22096                                  ;      in the result buffer is capitalized.
 22097                                  ;
 22098                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22099                                  ;
 22100                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22101                                  ;      switch, for example, '/A', then STRING points to;
 22102                                  ;
 22103                                  ;			DB    1 	; number of following synonyms
 22104                                  ;			DB   '/A',0
 22105                                  ;
 22106                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22107                                  ;
 22108                                  ;			DB    1 	; number of following synonyms
 22109                                  ;			DB   'CODEPAGE=',0
 22110                                  ;
 22111                                  ;    - "..." must consist of upper case characters only because the parser
 22112                                  ;      performs pattern matching after converting input to upper case (by
 22113                                  ;      using the current country upper case table)
 22114                                  ;
 22115                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22116                                  ;      example /A and /B, the format will be;
 22117                                  ;
 22118                                  ;			DB    2 	; number of following synonyms
 22119                                  ;			DB    '/A',0
 22120                                  ;			DB    '/B',0
 22121                                  ; ----------------------------------------------------------------------------
 22122                                  
 22123                                  ;**** Match_Flags
 22124                                  
 22125                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22126                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22127                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22128                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22129                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22130                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22131                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22132                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22133                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22134                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22135                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22136                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22137                                  
 22138                                  ;**** Function flags
 22139                                  
 22140                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22141                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22142                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22143                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22144                                  
 22145                                  ;-------------------------------- Control block structure
 22146                                  struc _$P_Control_Blk
 22147 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22148 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22149 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22150 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22151 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22152 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22153                                  endstruc
 22154                                  
 22155                                  ; ----------------------------------------------------------------------------
 22156                                  ; << Value List Definition >>
 22157                                  ;
 22158                                  ;VALUES 	LABEL	BYTE
 22159                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22160                                  ;	     +-
 22161                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22162                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22163                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22164                                  ;	     |	:
 22165                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22166                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22167                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22168                                  ;	     |	:
 22169                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22170                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22171                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22172                                  ;	     +-	:
 22173                                  ;
 22174                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22175                                  ;
 22176                                  ;Note:
 22177                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22178                                  ;      when no choice lists are provided.
 22179                                  ;
 22180                                  ;    - STRING must consist of upper case characters only because the parser
 22181                                  ;      performs pattern matching after converting input to upper case (by
 22182                                  ;      using the current country upper case table)
 22183                                  ; ----------------------------------------------------------------------------
 22184                                  
 22185                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22186                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22187                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22188                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22189                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22190                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22191                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22192                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22193                                  
 22194                                  struc _$P_Val_List
 22195 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22196 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22197 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22198 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22199 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22200                                  endstruc
 22201                                  
 22202                                  ; ----------------------------------------------------------------------------
 22203                                  ; << Result Buffer Definition  >>
 22204                                  ;
 22205                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22206                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22207                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22208                                  ;						;	3=STRING, 4=COMPLEX,
 22209                                  ;						;	5=FILESPEC, 6=DRIVE
 22210                                  ;						;	7=DATE, 8=TIME
 22211                                  ;						;	9=QUOTED STRING
 22212                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22213                                  ;
 22214                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22215                                  ;
 22216                                  ;            +-
 22217                                  ;	    | DD	n			; VALUE IF NUMBER
 22218                                  ;	    | or
 22219                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22220                                  ;	    |					; (ES presents Segment address)
 22221                                  ;	    | or
 22222                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22223                                  ;	    | or
 22224                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22225                                  ;	    | or
 22226                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22227                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22228                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22229                                  ;	    | or
 22230                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22231                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22232                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22233                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22234                                  ;	    +-
 22235                                  ;
 22236                                  ;
 22237                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22238                                  ;      list.
 22239                                  ;
 22240                                  ;      YEAR: If the input value for the year is less than 100, parser
 22241                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22242                                  ;	     the year value, he returns 1987.
 22243                                  ; ----------------------------------------------------------------------------
 22244                                  
 22245                                  ;-------------------------------- Result block structure
 22246                                  struc _$P_Result_Blk
 22247 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22248 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22249 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22250 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22251                                  endstruc
 22252                                  
 22253                                  ;--------------------------------
 22254                                  ;**** values for the type field in the result block
 22255                                  
 22256                                  _$P_EOL		   equ	0		;AN000; End of line
 22257                                  _$P_Number	   equ	1		;AN000; Number
 22258                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22259                                  _$P_String	   equ	3		;AN000; String
 22260                                  _$P_Complex	   equ	4		;AN000; Complex
 22261                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22262                                  _$P_Drive	   equ	6		;AN000; Drive
 22263                                  _$P_Date_F	   equ	7		;AN000; Date
 22264                                  _$P_Time_F	   equ	8		;AN000; Time
 22265                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22266                                  
 22267                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22268                                  
 22269                                  ;**** Return code
 22270                                  ;
 22271                                  ; following return code will be returned in the AX register.
 22272                                  
 22273                                  _$P_No_Error	   equ	0		;AN000; No error
 22274                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22275                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22276                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22277                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22278                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22279                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22280                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22281                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22282                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22283                                  
 22284                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22285                                  
 22286                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22287                                  
 22288                                  ;********************** Local Data *************************************
 22289 00001433 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22290 00001435 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22291 00001437 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22292 00001439 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22293 0000143B 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22294 0000143C 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22295 0000143E 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22296 00001440 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22297                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22298                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22299                                  
 22300                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22301                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22302                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22303                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22304                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22305                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22306                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22307                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22308                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22309                                  
 22310                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22311                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22312                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22313                                  
 22314 00001442 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22315 00001444 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22316 00001446 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22317 00001448 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22318                                  
 22319 0000144A 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22320                                  _$P_STRING_BUF_END equ	$		;AN000;
 22321                                  
 22322                                  ; 25/10/2022
 22323                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22324                                  
 22325 000014CA FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22326 000014CB 0000                    		   dw	0		;AN000; offset	of char case map table
 22327 000014CD 0000                    		   dw	0		;AN000; segment of char case map table
 22328                                  ; 25/10/2022
 22329                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22330                                  ;		   dw	0		;AN000; offset	of file case map table
 22331                                  ;		   dw	0		;AN000; segment of file case map table
 22332                                  
 22333                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22334                                  ;
 22335                                  
 22336                                  ;M029
 22337                                  ;!!!WARNING!!!
 22338                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22339                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22340                                  ;changes need to be made in SYSPARSE
 22341                                  
 22342                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22343                                  
 22344                                  ; 25/10/2022
 22345                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22346                                  
 22347 000014CF 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22348                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22349                                  
 22350                                  ;ENDIF					;AN000;(of FileSW)
 22351                                  
 22352                                  ; delimiter parsing
 22353                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22354                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22355                                  
 22356                                  ;filespec error flag
 22357 000014D8 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22358                                  					;AN033;  was detected.
 22359                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22360                                  
 22361                                  
 22362                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22363                                  ; ======================================================================
 22364                                  ; 27/03/2019 - Retro DOS v4.0
 22365                                  
 22366                                  ;***********************************************************************
 22367                                  ; SysParse;
 22368                                  ;
 22369                                  ;  Function : Parser Entry
 22370                                  ;
 22371                                  ;  Input: DS:SI -> command line
 22372                                  ;	  ES:DI -> parameter block
 22373                                  ;	  cs -> psdata.inc
 22374                                  ;	  CX = operand ordinal
 22375                                  ;
 22376                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22377                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22378                                  ;		 is in DS.
 22379                                  ;
 22380                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22381                                  ;		    invalid value list. But this parser does NOT implement
 22382                                  ;		    this feature. Therefore CY always zero.
 22383                                  ;
 22384                                  ;	   CY = 0   AX = return code
 22385                                  ;		    BL = terminated delimiter code
 22386                                  ;		    CX = new operand ordinal
 22387                                  ;		    SI = set past scaned operand
 22388                                  ;		    DX = selected result buffer
 22389                                  ;
 22390                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22391                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22392                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22393                                  ;
 22394                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22395                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22396                                  ;
 22397                                  ;-------- Modification History -----------------------------------------
 22398                                  ;
 22399                                  ;  4/04/87 : Created by K. K,
 22400                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22401                                  ;	   : JMP SHORT assemble error (tm02)
 22402                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22403                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22404                                  ;	     DateSW equ 1)	      (tm04)
 22405                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22406                                  ;				      (tm05) in PSDATA.INC
 22407                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22408                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22409                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22410                                  ;	     value-list block	      (tm07)
 22411                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22412                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22413                                  ;	     (tm08)
 22414                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22415                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22416                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22417                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22418                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22419                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22420                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22421                                  ;					  (tm12)
 22422                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22423                                  ;					  (tm13)
 22424                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22425                                  ;					  (tm14)
 22426                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22427                                  ;					  (tm15)
 22428                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22429                                  
 22430                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22431                                  
 22432                                  ;  7/28/87 : Kerry S (;AN018;)
 22433                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22434                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22435                                  ;	     affected: _$P_Chk_SW_Control.
 22436                                  
 22437                                  ;  7/29/87 : Kerry S (;AN019;)
 22438                                  ;	     Now allow the optional bit in match flags for switches.  This
 22439                                  ;	     allows the switch to be encountered with a value or without a
 22440                                  ;	     value and no error is returned.
 22441                                  ;
 22442                                  
 22443                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22444                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22445                                  ;	     within a date response, instead of checking just for the one
 22446                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22447                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22448                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22449                                  
 22450                                  ;  9/1/87  : Kerry S (;AN021)
 22451                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22452                                  ;	     the command line with the string in the control block the
 22453                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22454                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22455                                  ;	     string on the command line than in the synonym list in the control
 22456                                  ;	     block.  I put in a test for a null in the control block so the
 22457                                  ;	     string in the control block must be the same length as the string
 22458                                  ;	     preceeding the colon or equal on the command line.
 22459                                  
 22460                                  ;  8/28/87 : Kerry S (;AN022;)
 22461                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22462                                  ;	     problems for people who included it themselves in a segment other
 22463                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22464                                  ;	     segment.
 22465                                  
 22466                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22467                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22468                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22469                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22470                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22471                                  ;	     BL be used if TIME is being parsed.
 22472                                  
 22473                                  ;  9/24/87 : Ed K
 22474                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22475                                  ;	     invocations with their normally expanded code; made comments
 22476                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22477                                  
 22478                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22479                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22480                                  ;	     pointed to by non-existant CONTROL.
 22481                                  
 22482                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22483                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22484                                  ;	     support to frame quoted text string with single quote.
 22485                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22486                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22487                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22488                                  
 22489                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22490                                  ;	     quote chars within a quoted string is supposed to be reported as
 22491                                  ;	     one quote character, but is reported as two quotes.  This changed
 22492                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22493                                  
 22494                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22495                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22496                                  
 22497                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22498                                  
 22499                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22500                                  ;	     psdata buffer should have cs.
 22501                                  
 22502                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22503                                  ;	     positional missing.
 22504                                  
 22505                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22506                                  ;	     as a line delimiter, should use carriage return.
 22507                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22508                                  
 22509                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22510                                  
 22511                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22512                                  ;	     endless loop since SI is returned still pointing to start
 22513                                  ;	     of that parm.
 22514                                  
 22515                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22516                                  ;	     Vector to returned string has CS instead of cs, but
 22517                                  ;	     when tried to fix it on previous version, changed similar
 22518                                  ;	     but wrong place.
 22519                                  
 22520                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22521                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22522                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22523                                  
 22524                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22525                                  ;	     in a filespec, then flag an error.
 22526                                  
 22527                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22528                                  ;	     indexed off of the cs equate instead of the DS register.
 22529                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22530                                  ;  -->	     local parser data. Why were some references to local data changed
 22531                                  ;	     to do this before, but not all ?????
 22532                                  
 22533                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22534                                  
 22535                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22536                                  ;
 22537                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22538                                  
 22539                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22540                                  
 22541                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22542                                  ;	     separator in TIME before hundredths field.
 22543                                  ;
 22544                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22545                                  ;			strings as keywords.
 22546                                  ;
 22547                                  ;***********************************************************************
 22548                                  
 22549                                  ;IF FarSW				;AN000;(Check if need far return)
 22550                                  ;SysParse proc far			;AN000;
 22551                                  ;ELSE					;AN000;
 22552                                  ;SysParse proc near			;AN000;
 22553                                  ;ENDIF					;AN000;(of FarSW)
 22554                                  
 22555                                  ; 27/03/2019 - Retro DOS v4.0
 22556                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22557                                  
 22558                                  ; 25/10/2022 - Retro DOS v4.0
 22559                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22560                                  
 22561                                  SysParse:
 22562 000014D9 2EC706[4014]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22563 000014E0 FC                      	cld				;AN000; confirm forward direction
 22564 000014E1 2E890E[3314]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22565 000014E6 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22566 000014ED 2EC706[4814]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22567                                  
 22568 000014F4 2EC706[3914]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22569                                  
 22570                                  ;M029 -- Begin changes
 22571                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22572                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22573                                  ;corrupts this table but does not corrupt the checksum region will leave
 22574                                  ;command.com parsing in an inconsistent state.
 22575                                  ; NB: The special characters string has been hardcoded here. If any change
 22576                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22577                                  
 22578                                  ;IF FileSW + DrvSW
 22579 000014FB 2EC706[CF14]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22580 00001502 2EC706[D114]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22581 00001509 2EC706[D314]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22582 00001510 2EC706[D514]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22583                                  ;ENDIFtHHH
 22584                                  
 22585                                  ;M029 -- End of changes
 22586                                  
 22587 00001517 E8BC06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22588 0000151A 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22589                                  ;--------------------------- End of Line
 22590 0000151C B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22591 0000151F 53                      	push	bx			;AN000;
 22592                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22593                                  					;AN000; Get the PARMSX address to
 22594 00001520 268B1D                  	mov	bx,[es:di]
 22595                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22596                                  					;AN000; check ORDINAL to see if the minimum
 22597 00001523 263A0F                  	cmp	cl,[es:bx]	
 22598 00001526 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22599                                  
 22600 00001528 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22601                                  _$P_Fin: 				;AN000;
 22602 0000152B 5B                      	pop	bx			;AN000;
 22603 0000152C E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22604                                  ;---------------------------
 22605                                  _$P_Start:				;AN000;
 22606 0000152F 2E8936[4214]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22607 00001534 53                      	push	bx			;AN000; quoted string or file spec.
 22608 00001535 57                      	push	di			;AN000;
 22609 00001536 55                      	push	bp			;AN000;
 22610                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22611                                  	; 02/11/2022
 22612 00001537 8D1E[4A14]              	lea	bx,[_$P_STRING_BUF]
 22613 0000153B 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22614 00001541 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22615                                  
 22616                                  _$P_Pack_Loop:				;AN000;
 22617 00001543 AC                      	lodsb				;AN000; Pick a operand from buffer
 22618 00001544 E84907                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22619 00001547 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22620                                  
 22621 00001549 E8AD06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22622 0000154C 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22623                                  
 22624 0000154E E8DE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22625 00001551 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22626                                  
 22627 00001553 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22628                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22629 00001559 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22630                                  
 22631 0000155B E87806                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22632 0000155E EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22633                                  
 22634                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22635 00001560 2EF606[4114]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22636 00001566 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22637                                  
 22638 00001568 4E                      	dec	si			;AN000; (tm08)
 22639 00001569 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22640                                  
 22641                                  _$P_PL01:				;AN000;
 22642 0000156B 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22643 0000156E 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22644 00001570 7506                    	jne	short _$P_PL00 		;AN000; then
 22645                                  
 22646 00001572 2E800E[4114]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22647                                  _$P_PL00:				;AN000;
 22648 00001578 43                      	inc	bx			;AN000; ready to see next byte
 22649 00001579 E82E07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22650 0000157C 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22651                                  
 22652 0000157E AC                      	lodsb				;AN000; if yes, store
 22653 0000157F 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22654 00001582 43                      	inc	bx			;AN000; update pointer
 22655 00001583 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22656                                  
 22657                                  _$P_Pack_End_BY_EOL:			;AN000;
 22658 00001585 4E                      	dec	si			;AN000; backup si pointer
 22659                                  _$P_Pack_End:				;AN000;
 22660 00001586 2E8936[3714]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22661 0000158B 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22662 0000158F 2E891E[4614]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22663                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22664 00001594 268B1D                  	mov	bx,[es:di]
 22665                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22666                                  	; 02/11/2022
 22667 00001597 8D36[4A14]              	lea	si,[_$P_STRING_BUF]
 22668 0000159B 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22669 0000159F 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22670                                  
 22671 000015A1 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22672 000015A5 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22673                                  
 22674 000015A7 2EF606[4114]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22675 000015AD 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22676                                  
 22677                                  _$P_Positional_Manager:			;AN000; else process as positional
 22678 000015AF 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22679 000015B3 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22680 000015B5 2E3906[3314]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22681 000015BA 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22682                                  
 22683 000015BC 2EA1[3314]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22684 000015C0 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22685 000015C2 43                      	inc	bx			;AC035; add '2' to
 22686 000015C3 43                      	inc	bx			;AC035;  BX reg
 22687                                  					;AN000; now bx points to 1st CONTROL
 22688 000015C4 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22689 000015C6 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22690 000015C9 E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22691 000015CC EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22692                                  
 22693                                  _$P_Too_Many_Error:			;AN000;
 22694 000015CE 2EC706[3514]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22695 000015D5 EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22696                                  
 22697                                  _$P_SW_Manager:				;AN000;
 22698 000015D7 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22699 000015DB 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22700 000015DD 40                      	inc	ax			;AN000;
 22701 000015DE D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22702 000015E0 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22703 000015E2 268A0F                  	mov	cl,[es:bx]		;AN000;
 22704 000015E5 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22705 000015E7 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22706 000015E9 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22707                                  
 22708 000015EB 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22709                                  
 22710                                  _$P_SW_Mgr_Loop: 			;AN000;
 22711 000015EC 53                      	push	bx			;AN000;
 22712 000015ED 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22713 000015F0 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22714 000015F3 5B                      	pop	bx			;AN000;
 22715 000015F4 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22716                                  
 22717 000015F6 43                      	inc	bx			;AC035; add '2' to
 22718 000015F7 43                      	inc	bx			;AC035;  BX reg
 22719                                  					;AN000; else bx points to the next CONTROL
 22720 000015F8 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22721                                  
 22722                                  _$P_SW_Not_Found:			;AN000;
 22723 000015FA 2EC706[3514]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22724 00001601 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22725                                  
 22726                                  _$P_Key_Manager: 			;AN000;
 22727 00001603 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22728 00001607 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22729 00001609 40                      	inc	ax			;AN000;
 22730 0000160A D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22731 0000160C 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22732 0000160E 268A07                  	mov	al,[es:bx]		;AN000;
 22733 00001611 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22734 00001613 D1E0                    	shl	ax,1			;AN000;
 22735 00001615 40                      	inc	ax			;AN000; ax = ax*2+1
 22736 00001616 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22737 00001618 268A0F                  	mov	cl,[es:bx]		;AN000;
 22738 0000161B 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22739 0000161D 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22740 0000161F 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22741                                  
 22742 00001621 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22743                                  
 22744                                  _$P_Key_Mgr_Loop:			;AN000;
 22745 00001622 53                      	push	bx			;AN000;
 22746 00001623 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22747 00001626 E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22748 00001629 5B                      	pop	bx			;AN000;
 22749 0000162A 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22750                                  
 22751 0000162C 43                      	inc	bx			;AC035; add '2' to
 22752 0000162D 43                      	inc	bx			;AC035;  BX reg
 22753                                  					;AN000; else bx points to the next CONTROL
 22754 0000162E E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22755                                  
 22756                                  _$P_Key_Not_Found:			;AN000;
 22757 00001630 2EC706[3514]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22758                                  _$P_Return_to_Caller:			;AN000;
 22759 00001637 5D                      	pop	bp			;AN000;
 22760 00001638 5F                      	pop	di			;AN000;
 22761 00001639 5B                      	pop	bx			;AN000;
 22762 0000163A 2E8B0E[3314]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22763 0000163F 2EA1[3514]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22764 00001643 2E8B36[3714]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22765 00001648 2E8B16[3914]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22766 0000164D 2E8A1E[3B14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22767                                  _$P_Single_Exit: 			;AN000;
 22768 00001652 F8                      	clc				;AN000;
 22769 00001653 C3                      	retn				;AN000;
 22770                                  
 22771                                  ;***********************************************************************
 22772                                  ; _$P_Chk_Pos_Control
 22773                                  ;
 22774                                  ; Function: Parse CONTROL block for a positional
 22775                                  ;
 22776                                  ; Input:     ES:BX -> CONTROL block
 22777                                  ;	     cs:SI -> _$P_STRING_BUF
 22778                                  ;
 22779                                  ; Output:    None
 22780                                  ;
 22781                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 22782                                  ;
 22783                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 22784                                  ;***********************************************************************
 22785                                  
 22786                                  _$P_Chk_Pos_Control:
 22787 00001654 50                      	push	ax			;AN000;
 22788                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 22789 00001655 268B07                  	mov	ax,[es:bx]
 22790                                  	; 12/12/2022
 22791 00001658 A802                    	test	al,_$P_Repeat
 22792                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 22793 0000165A 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 22794                                  
 22795 0000165C 2EFF06[3314]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 22796                                  _$P_CPC00:				;AN000;
 22797 00001661 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 22798 00001665 7518                    	jne	short _$P_CPC01		;AN000;
 22799                                  
 22800                                  	; 12/12/2022
 22801 00001667 A801                    	test	al,_$P_Optional
 22802                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 22803 00001669 7509                    	jnz	short _$P_CPC02		;AN000;
 22804                                  
 22805 0000166B 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 22806 00001672 EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 22807                                  
 22808                                  _$P_CPC02:				;AN000;
 22809 00001674 50                      	push	ax			;AN000;
 22810 00001675 B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 22811 00001677 B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 22812 00001679 E89B00                  	call	_$P_Fill_Result		;AN000;
 22813 0000167C 58                      	pop	ax			;AN000;
 22814 0000167D EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 22815                                  
 22816                                  _$P_CPC01:				;AN000;
 22817 0000167F E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 22818                                  _$P_CPC_Exit:				;AN000;
 22819 00001682 58                      	pop	ax			;AN000;
 22820 00001683 C3                      	retn				;AN000;
 22821                                  
 22822                                  ;***********************************************************************
 22823                                  ; _$P_Chk_Key_Control
 22824                                  ;
 22825                                  ; Function: Parse CONTROL block for a keyword
 22826                                  ;
 22827                                  ; Input:     ES:BX -> CONTROL block
 22828                                  ;	     cs:SI -> _$P_STRING_BUF
 22829                                  ;
 22830                                  ; Output:    CY = 1 : not match
 22831                                  ;
 22832                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22833                                  ;
 22834                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22835                                  ;***********************************************************************
 22836                                  
 22837                                  _$P_Chk_Key_Control:
 22838 00001684 F9                      	stc				;AN000; this logic works when the KeySW
 22839 00001685 C3                      	retn				;AN000; is reset.
 22840                                  
 22841                                  ;***********************************************************************
 22842                                  ; _$P_Search_KEYorSW:
 22843                                  ;
 22844                                  ; Function: Seach specified keyword or switch from CONTROL
 22845                                  ;
 22846                                  ; Input:     ES:BX -> CONTROL block
 22847                                  ;	     cs:SI -> _$P_STRING_BUF
 22848                                  ;
 22849                                  ; Output:    CY = 1 : not match
 22850                                  ;
 22851                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 22852                                  ;***********************************************************************
 22853                                  
 22854                                  	; 25/10/2022 - Retro DOS v4.0
 22855                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 22856                                  
 22857                                  _$P_Search_KEYorSW:			;AN000;
 22858 00001686 55                      	push	bp			;AN000;
 22859 00001687 51                      	push	cx			;AN000;
 22860 00001688 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 22861 0000168C 30ED                    	xor	ch,ch			;AN000; and set it to cx
 22862 0000168E 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 22863 00001690 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 22864                                  
 22865                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 22866                                  	; 25/10/2022
 22867 00001692 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 22868                                  	;lea	bp,[bx+9]
 22869                                  _$P_KEYorSW_Loop:			;AN000;
 22870 00001695 E8D803                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 22871 00001698 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 22872                                  
 22873 0000169A E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 22874 0000169D E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 22875                                  _$P_KEYorSW_Not_Found:			;AN000;
 22876 0000169F F9                      	stc				;AN000; indicate not found in synonym list
 22877 000016A0 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 22878                                  
 22879                                  _$P_KEYorSW_Found:			;AN000;
 22880 000016A2 2E892E[4814]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 22881 000016A7 F8                      	clc				;AN000; indicate found
 22882                                  _$P_KEYorSW_Exit:			;AN000;
 22883 000016A8 59                      	pop	cx			;AN000;
 22884 000016A9 5D                      	pop	bp			;AN000;
 22885 000016AA C3                      	retn				;AN000;
 22886                                   
 22887                                  ;***********************************************************************
 22888                                  ; _$P_MoveBP_NUL
 22889                                  ;***********************************************************************
 22890                                  
 22891                                  _$P_MoveBP_NUL:
 22892                                  _$P_MBP_Loop:				;AN000;
 22893                                  	; 11/12/2022
 22894 000016AB 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 22895                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22896                                  	; (SYSINIT:18DBh)
 22897                                   	;cmp     byte [es:bp+0],0
 22898 000016B0 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 22899                                  
 22900 000016B2 45                      	inc	bp			;AN000; until
 22901 000016B3 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 22902                                  
 22903                                  _$P_MBP_Exit:				;AN000;
 22904 000016B5 45                      	inc	bp			;AN000; bp points to next to NULL
 22905 000016B6 C3                      	retn				;AN000;
 22906                                  
 22907                                  ;***********************************************************************
 22908                                  ; _$P_Chk_SW_Control
 22909                                  ;
 22910                                  ; Function: Parse CONTROL block for a switch
 22911                                  ;
 22912                                  ; Input:     ES:BX -> CONTROL block
 22913                                  ;	     cs:SI -> _$P_STRING_BUF
 22914                                  ;
 22915                                  ; Output:    CY = 1 : not match
 22916                                  ;
 22917                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22918                                  ;
 22919                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22920                                  ;***********************************************************************
 22921                                  
 22922                                  _$P_Chk_SW_Control:
 22923                                  
 22924                                  ;IF SwSW				;AN000;(Check if switch is supported)
 22925                                  	;or	byte [cs:_$P_Flags+1],10h
 22926 000016B7 2E800E[4114]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 22927 000016BD E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 22928 000016C0 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 22929                                  
 22930                                  	;and	[cs:_$P_Flags+],0EFh
 22931 000016C2 2E8026[4114]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 22932                                  					;AC034; reset the indicator previously set
 22933 000016C8 50                      	push	ax			;AN000; 	      /switch:
 22934 000016C9 2EA1[4414]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 22935 000016CD 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 22936 000016CF 2E0106[4214]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 22937 000016D4 58                      	pop	ax			;AN000;
 22938                                  
 22939 000016D5 2E8B36[4414]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 22940 000016DA 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 22941 000016DE 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 22942                                  
 22943 000016E0 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 22944 000016E5 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 22945                                  
 22946 000016E7 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 22947 000016EE EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 22948                                  
 22949                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 22950                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 22951 000016F0 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 22952 000016F4 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 22953                                  
 22954                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 22955                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 22956                                  	;test	word [es:bx],1
 22957                                  	; 12/12/2022
 22958                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 22959 000016F6 26F60701                	test	byte [es:bx],_$P_Optional
 22960 000016FA 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 22961                                  
 22962 000016FC 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 22963 00001703 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 22964                                  
 22965                                  _$P_CSW00:				;AN000;
 22966 00001705 E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 22967 00001708 F8                      	clc				;AN000; indicate match
 22968                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22969                                  	; 12/12/2022
 22970 00001709 C3                      	retn
 22971                                  
 22972                                  _$P_Chk_SW_Err0: 			;AN000;
 22973 0000170A F9                      	stc				;AN000; not found in switch synonym list
 22974                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22975                                  	; 12/12/2022
 22976 0000170B C3                      	retn	
 22977                                  
 22978                                  _$P_Chk_SW_Exit: 			;AN000;
 22979 0000170C 50                      	push	ax			;AN000;
 22980 0000170D B003                    	mov	al,_$P_String		;AN000; set
 22981 0000170F B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 22982 00001711 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 22983 00001714 58                      	pop	ax			;AN000;
 22984 00001715 F8                      	clc				;AN000;
 22985                                  _$P_Chk_SW_Single_Exit:			;AN000;
 22986 00001716 C3                      	retn				;AN000;
 22987                                  ;ELSE					;AN000;(of IF SwSW)
 22988                                  ;	stc				;AN000; this logic works when the SwSW
 22989                                  ;	retn				;AN000; is reset.
 22990                                  
 22991                                  ;***********************************************************************
 22992                                  ; _$P_Fill_Result
 22993                                  ;
 22994                                  ; Function: Fill the result buffer
 22995                                  ;
 22996                                  ; Input:    AH = Item tag
 22997                                  ;	    AL = type
 22998                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 22999                                  ;		  AL = 2: DX has index(offset) into value list
 23000                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23001                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23002                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23003                                  ;			  amd CH has hundredths
 23004                                  ;		  AL = else: cs:SI points to returned string buffer
 23005                                  ;	    ES:BX -> CONTROL block
 23006                                  ;
 23007                                  ; Output:   None
 23008                                  ;
 23009                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23010                                  ;
 23011                                  ; Vars: _$P_DX(W)
 23012                                  ;***********************************************************************
 23013                                  
 23014                                  _$P_Fill_Result:
 23015 00001717 57                      	push	di			;AN000;
 23016 00001718 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23017                                  					;AN000; di points to result buffer
 23018 0000171C 2E893E[3914]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23019 00001721 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23020 00001724 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23021 00001728 50                      	push	ax			;AN000;
 23022 00001729 2EA1[4814]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23023 0000172D 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23024                                  					;AN000;   then set it to the result
 23025 00001731 58                      	pop	ax			;AN000;
 23026                                  _$P_RLT04:				;AN000;
 23027 00001732 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23028 00001734 750A                    	jne	short _$P_RLT00		;AN000;
 23029                                  
 23030                                  _$P_RLT02:				;AN000;
 23031 00001736 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23032 0000173A 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23033 0000173E EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23034                                  
 23035                                  _$P_RLT00:				;AN000;
 23036 00001740 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23037 00001742 7506                    	jne	short _$P_RLT01		;AN000;
 23038                                  
 23039 00001744 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23040                                  					;AN000; then store list index
 23041 00001748 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23042                                  
 23043                                  _$P_RLT01:				;AN000;
 23044 0000174A 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23045 0000174C 74E8                    	je	short _$P_RLT02		;AN000;
 23046                                  
 23047 0000174E 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23048 00001750 74E4                    	je	short _$P_RLT02		;AN000;
 23049                                  
 23050 00001752 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23051 00001754 7506                    	jne	short _$P_RLT03		;AN000;
 23052                                  
 23053 00001756 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23054 0000175A EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23055                                  
 23056                                  _$P_RLT03:				;AN000;
 23057 0000175C 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23058 0000175E 750F                    	jne	short _$P_RLT05		;AN000;
 23059                                  
 23060 00001760 2EA1[4214]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23061 00001764 40                      	inc	ax			;AN000; skip left Parentheses
 23062 00001765 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23063 00001769 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23064 0000176D EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23065                                  
 23066                                  _$P_RLT05:				;AN000;
 23067                                  ;------------------------  AL = 3, 5, or 9
 23068 0000176F 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23069                                  					;AN000; store offset of STRING_BUF
 23070 00001773 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23071                                  					;AN031; store segment of STRING_BUF
 23072 00001777 50                      	push	ax			;AN000;
 23073 00001778 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23074                                  					;AN000; need CAPS by file table?
 23075 0000177D 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23076                                  
 23077 0000177F B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23078 00001781 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23079                                  
 23080                                  _$P_RLT_CAP00:				;AN000;
 23081 00001783 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23082                                  					;AN000; need CAPS by char table ?
 23083 00001788 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23084                                  
 23085 0000178A B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23086                                  _$P_RLT_CAP02:				;AN000;
 23087 0000178C E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23088                                  _$P_RLT_CAP01:				;AN000;
 23089 0000178F 58                      	pop	ax			;AN000;
 23090 00001790 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23091                                  					;AN000; removing colon at end ?
 23092 00001795 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23093                                  
 23094 00001797 E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23095                                  _$P_RLT_Exit:				;AN000;
 23096 0000179A 5F                      	pop	di			;AN000;
 23097 0000179B C3                      	retn				;AN000;
 23098                                  
 23099                                  ;***********************************************************************
 23100                                  ; _$P_Check_Match_Flags
 23101                                  ;
 23102                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23103                                  ;	     result buffer
 23104                                  ;
 23105                                  ;	    Check for types in this order:
 23106                                  ;		Complex
 23107                                  ;		Date
 23108                                  ;		Time
 23109                                  ;		Drive
 23110                                  ;		Filespec
 23111                                  ;		Quoted String
 23112                                  ;		Simple String
 23113                                  ;
 23114                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23115                                  ;	     ES:BX -> CONTROL block
 23116                                  ;
 23117                                  ; Output:    None
 23118                                  ;
 23119                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23120                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23121                                  ;	     _$P_Drive_Format
 23122                                  ;***********************************************************************
 23123                                  
 23124                                  	; 25/10/2022 - Retro DOS v4.0
 23125                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23126                                  
 23127                                  	; 12/12/2022
 23128                                  _$P_Check_Match_Flags:
 23129 0000179C 2EC606[D814]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23130                                  					;AN033;AC034;; clear filespec error flag.
 23131 000017A2 50                      	push	ax			;AN000;
 23132                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23133 000017A3 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23134 000017A6 09C0                    	or	ax,ax			;AC035; test ax for zero
 23135 000017A8 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23136 000017AA 50                      	push	ax			;AN000; (tm12)
 23137 000017AB 53                      	push	bx			;AN000; (tm12)
 23138 000017AC 52                      	push	dx			;AN000; (tm12)
 23139 000017AD 57                      	push	di			;AN000; (tm12)
 23140 000017AE 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23141 000017B5 B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23142 000017B7 B003                    	mov	al,_$P_String		;AN000; (tm12)
 23143 000017B9 E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23144 000017BC 5F                      	pop	di			;AN000; (tm12)
 23145 000017BD 5A                      	pop	dx			;AN000; (tm12)
 23146 000017BE 5B                      	pop	bx			;AN000; (tm12)
 23147 000017BF 58                      	pop	ax			;AN000; (tm12)
 23148                                  	; 12/12/2022
 23149                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23150                                  	; 12/12/2022
 23151                                  ;_$P_Mat: 				;AN000; (tm12)
 23152                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23153                                  _$P_Bridge:
 23154 000017C0 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23155                                  	
 23156                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23157                                  	; (SYSINIT:19F9h)
 23158                                  	; 12/12/2022
 23159                                  	;nop	; db 90h
 23160                                  
 23161                                  ; 12/12/2022
 23162                                  _$P_Mat:
 23163                                  _$P_Match03:				;AN000;
 23164 000017C2 A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23165 000017C5 7412                    	jz	short _$P_Match04	;AN000;
 23166                                  
 23167 000017C7 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23168 000017CE E82601                  	call	_$P_Value		;AN000; do process
 23169 000017D1 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23170 000017D7 7557                    	jne	short _$P_Match_Exit	;AN000;
 23171                                  _$P_Match04:				;AN000;
 23172 000017D9 A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23173 000017DC 7412                    	jz	short _$P_Match05	;AN000;
 23174                                  
 23175 000017DE 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23176 000017E5 E8EB00                  	call	_$P_SValue		;AN000; do process
 23177 000017E8 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23178 000017EE 7540                    	jne	short _$P_Match_Exit	;AN000;
 23179                                  _$P_Match05:				;AN000;
 23180 000017F0 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23181 000017F3 7415                    	jz	short _$P_Match06	;AN000;
 23182                                  
 23183 000017F5 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23184 000017FC E80F03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23185 000017FF E89103                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23186 00001802 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23187 00001808 7526                    	jne	short _$P_Match_Exit	;AN000;
 23188                                  _$P_Match06:				;AN000;
 23189 0000180A A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23190 0000180D 7412                    	jz	short _$P_Match07	;AN000;
 23191                                  
 23192 0000180F 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23193 00001816 E8F502                  	call	_$P_File_Format		;AN000; do process
 23194 00001819 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23195 0000181F 750F                    	jne	short _$P_Match_Exit	;AN000;
 23196                                  _$P_Match07:				;AN000;
 23197 00001821 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23198 00001824 740A                    	jz	short _$P_Match09	;AN000;
 23199                                  
 23200 00001826 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23201 0000182D E8D701                  	call	_$P_Simple_String	;AN000; do process
 23202                                  _$P_Match09:				;AN000;
 23203                                  _$P_Match_Exit:				;AN000;
 23204 00001830 2E833E[D814]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23205 00001836 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23206 00001838 2E833E[3514]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23207 0000183E 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23208 00001840 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23209                                  _$P_Match2_Exit: 			;AN033;
 23210 00001847 58                      	pop	ax			;AN000;
 23211 00001848 C3                      	retn				;AN000;
 23212                                  
 23213                                  ;***********************************************************************
 23214                                  ; _$P_Remove_Colon;
 23215                                  ;
 23216                                  ; Function: Remove colon at end
 23217                                  ;
 23218                                  ; Input:    cs:SI points to string buffer to be examineed
 23219                                  ;
 23220                                  ; Output:   None
 23221                                  ;
 23222                                  ; Use:	_$P_Chk_DBCS
 23223                                  ;***********************************************************************
 23224                                  
 23225                                  _$P_Remove_Colon:
 23226 00001849 50                      	push	ax			;AN000;
 23227 0000184A 56                      	push	si			;AN000;
 23228                                  _$P_RCOL_Loop:				;AN000;
 23229 0000184B 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23230 0000184E 08C0                    	or	al,al			;AN000; end of string ?
 23231 00001850 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23232                                  
 23233 00001852 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23234 00001854 750D                    	jne	short _$P_RCOL00	;AN000;
 23235                                  
 23236 00001856 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23237 0000185B 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23238                                  
 23239 0000185D 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23240 00001861 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23241                                  
 23242                                  _$P_RCOL00:				;AN000;
 23243 00001863 E84404                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23244 00001866 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23245                                  
 23246 00001868 46                      	inc	si			;AN000; if yes, skip trailing byte
 23247                                  _$P_RCOL01:				;AN000;
 23248 00001869 46                      	inc	si			;AN000; si points to next byte
 23249 0000186A EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23250                                  
 23251                                  _$P_RCOL_Exit:				;AN000;
 23252 0000186C 5E                      	pop	si			;AN000;
 23253 0000186D 58                      	pop	ax			;AN000;
 23254 0000186E C3                      	retn				;AN000;
 23255                                  
 23256                                  ;***********************************************************************
 23257                                  ; _$P_Do_CAPS_String;
 23258                                  ;
 23259                                  ; Function: Perform capitalization along with the file case map table
 23260                                  ;	    or character case map table.
 23261                                  ;
 23262                                  ; Input:    AL = 2 : Use character table
 23263                                  ;	    AL = 4 : Use file table
 23264                                  ;	    cs:SI points to string buffer to be capitalized
 23265                                  ;
 23266                                  ; Output:   None
 23267                                  ;
 23268                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23269                                  ;***********************************************************************
 23270                                  
 23271                                  _$P_Do_CAPS_String:
 23272 0000186F 56                      	push	si			;AN000;
 23273 00001870 52                      	push	dx			;AN000;
 23274 00001871 88C2                    	mov	dl,al			;AN000; save info id
 23275                                  
 23276                                  _$P_DCS_Loop:				;AN000;
 23277 00001873 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23278 00001876 E83104                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23279 00001879 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23280                                  
 23281 0000187B 08C0                    	or	al,al			;AN000; end of string ?
 23282 0000187D 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23283                                  
 23284 0000187F E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23285 00001882 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23286 00001885 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23287                                  _$P_DCS00:				;AN000;
 23288 00001887 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23289                                  _$P_DCS01:				;AN000;
 23290 00001888 46                      	inc	si			;AN000; si point to next byte
 23291 00001889 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23292                                  _$P_DCS_Exit:				;AN000;
 23293 0000188B 5A                      	pop	dx			;AN000;
 23294 0000188C 5E                      	pop	si			;AN000;
 23295 0000188D C3                      	retn
 23296                                  
 23297                                  ;***********************************************************************
 23298                                  ; _$P_Do_CAPS_Char;
 23299                                  ;
 23300                                  ; Function: Perform capitalization along with the file case map table
 23301                                  ;	    or character case map table.
 23302                                  ;
 23303                                  ; Input:    DL = 2 : Use character table
 23304                                  ;	    DL = 4 : Use file table
 23305                                  ;	    AL = character to be capitalized
 23306                                  ;
 23307                                  ; Output:   None
 23308                                  ;
 23309                                  ; Use:	INT 21h /w AH=65h
 23310                                  ;***********************************************************************
 23311                                  
 23312                                  _$P_Do_CAPS_Char:
 23313 0000188E 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23314 00001890 730C                    	jae	short _$P_DCC_Go	;AN000;
 23315                                  
 23316 00001892 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23317 00001894 723C                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23318                                  
 23319 00001896 3C7A                    	cmp	al,"z"                  ;AN000;
 23320 00001898 7738                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23321                                  
 23322 0000189A 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23323 0000189C EB34                    	jmp	short _$P_CAPS_Ret	;AN000;
 23324                                  
 23325                                  _$P_DCC_Go:				;AN000;
 23326 0000189E 53                      	push	bx			;AN000;
 23327 0000189F 06                      	push	es			;AN000;
 23328 000018A0 57                      	push	di			;AN000;
 23329                                  
 23330                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23331 000018A1 8D3E[CA14]              	lea	di,[_$P_Char_CAP_Ptr]
 23332                                  _$P_DCC00:				;AN000;
 23333 000018A5 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23334 000018A8 7417                    	je	short _$P_DCC01		;AN000; if no,
 23335                                  
 23336                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23337                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23338                                  ; call, regardless of what base register is currently be defined as cs.
 23339                                  
 23340 000018AA 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23341 000018AB 51                      	push	cx			;AN000;
 23342 000018AC 52                      	push	dx			;AN000;
 23343                                  
 23344 000018AD 0E                      	push	cs			;AC036; pass current base seg into
 23345                                  					;(Note: this used to push CS.  BUG...
 23346 000018AE 07                      	pop	es			;AN000;   ES reg, required for
 23347                                  					;get extended country information
 23348 000018AF B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23349 000018B1 88D0                    	mov	al,dl			;AN000; upper case table
 23350 000018B3 BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23351 000018B6 B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23352 000018B9 BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23353                                  					;DI already set to point to buffer
 23354 000018BC CD21                    	int	21h			;AN000; es:di point to buffer that
 23355                                  					;now has been filled in with info
 23356 000018BE 5A                      	pop	dx			;AN000;
 23357 000018BF 59                      	pop	cx			;AN000;
 23358 000018C0 58                      	pop	ax			;AN000;
 23359                                  
 23360                                  _$P_DCC01:				;AN000;
 23361                                  
 23362                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23363                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23364                                  ; regardless of which base reg is currently the cs reg.
 23365                                  
 23366 000018C1 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23367 000018C5 2E8E4503                	mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23368 000018C9 43                      	inc	bx			;AC035; add '2' to
 23369 000018CA 43                      	inc	bx			;AC035;  BX reg
 23370                                  					;AN000; skip length field
 23371 000018CB 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23372                                  	;xlat	es:[bx] 		;AN000; perform case map
 23373 000018CD 26                      	es
 23374 000018CE D7                      	xlat
 23375 000018CF 5F                      	pop	di			;AN000;
 23376 000018D0 07                      	pop	es			;AN000;
 23377 000018D1 5B                      	pop	bx			;AN000;
 23378                                  _$P_CAPS_Ret:				;AN000;
 23379 000018D2 C3                      	retn				;AN000;
 23380                                  
 23381                                  ;***********************************************************************
 23382                                  ; _$P_Value / _$P_SValue
 23383                                  ;
 23384                                  ; Function:  Make 32bit value from cs:SI and see value list
 23385                                  ;	     and make result buffer.
 23386                                  ;	     _$P_SValue is an entry point for the signed value
 23387                                  ;	     and this will simply call _$P_Value after the handling
 23388                                  ;	     of the sign character, "+" or "-"
 23389                                  ;
 23390                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23391                                  ;	     ES:BX -> CONTROL block
 23392                                  ;
 23393                                  ; Output:    None
 23394                                  ;
 23395                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23396                                  ;
 23397                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23398                                  ;***********************************************************************
 23399                                  
 23400                                  	; 26/10/2022 - Retro DOS v4.0
 23401                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23402                                  
 23403                                  _$P_SValue:				;AN000; when signed value here
 23404 000018D3 50                      	push	ax			;AN000;
 23405 000018D4 2E800E[4114]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23406 000018DA 2E8026[4114]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23407 000018E0 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23408 000018E3 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23409 000018E5 740A                    	je	short _$P_SVal00	;AN000;
 23410                                  
 23411 000018E7 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23412 000018E9 7507                    	jne	short _$P_Sval01	;AN000; else
 23413                                  
 23414 000018EB 2E800E[4114]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23415                                  _$P_SVal00:				;AN000;
 23416 000018F1 46                      	inc	si			;AN000; skip sign char
 23417                                  _$P_Sval01:				;AN000;
 23418 000018F2 E80200                  	call	_$P_Value		;AN000; and process value
 23419 000018F5 58                      	pop	ax			;AN000;
 23420 000018F6 C3                      	retn
 23421                                  
 23422                                  ;***********************************************************************
 23423                                  
 23424                                  	; 26/10/2022
 23425                                  _$P_Value:				;AN000;
 23426 000018F7 50                      	push	ax			;AN000;
 23427 000018F8 51                      	push	cx			;AN000;
 23428 000018F9 52                      	push	dx			;AN000;
 23429 000018FA 56                      	push	si			;AN000;
 23430 000018FB 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23431 000018FD 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23432 000018FF 53                      	push	bx			;AN000; save control pointer
 23433                                  _$P_Value_Loop:				;AN000;
 23434 00001900 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23435 00001903 08C0                    	or	al,al			;AN000; end of line ?
 23436 00001905 7442                    	jz	short _$P_Value00	;AN000;
 23437                                  
 23438 00001907 E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23439 0000190A 7239                    	jc	short _$P_Value_Err0	;AN000;
 23440                                  
 23441 0000190C 30E4                    	xor	ah,ah			;AN000;
 23442 0000190E 89C5                    	mov	bp,ax			;AN000; save binary number
 23443 00001910 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23444 00001912 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23445 00001914 E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23446 00001917 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23447                                  
 23448 00001919 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23449 0000191B 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23450 0000191D D1E2                    	shl	dx,1			;AN000; to have 4*x
 23451 0000191F D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23452 00001921 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23453 00001924 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23454                                  
 23455 00001926 D1E2                    	shl	dx,1			;AN000; to have 8*x
 23456 00001928 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23457 0000192A E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23458 0000192D 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23459                                  
 23460 0000192F 01DA                    	add	dx,bx			;AN000; now have 10*x
 23461 00001931 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23462 00001933 E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23463 00001936 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23464                                  
 23465 00001938 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23466 0000193A 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23467 0000193D E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23468 00001940 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23469                                  
 23470 00001942 46                      	inc	si			;AN000; update pointer
 23471 00001943 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23472                                  ;
 23473                                  _$P_Value_Err0:				;AN000;
 23474 00001945 5B                      	pop	bx			;AN000;
 23475 00001946 E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23476                                  ;
 23477                                  _$P_Value00:				;AN000;
 23478 00001949 5B                      	pop	bx			;AN000; restore control pointer
 23479 0000194A 2EF606[4114]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23480 00001950 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23481                                  
 23482 00001952 F7D1                    	not	cx			;AN000; +
 23483 00001954 F7D2                    	not	dx			;AN000; |- Make 2's complement
 23484 00001956 83C201                  	add	dx,1			;AN000; |
 23485 00001959 83D100                  	adc	cx,0			;AN000; +
 23486                                  
 23487                                  _$P_Value01:				;AN000; / nval =0
 23488 0000195C 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23489 00001960 268A04                  	mov	al,[es:si]		;AN000; get nval
 23490 00001963 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23491 00001965 7506                    	jne	short _$P_Value02	;AN000;
 23492                                  
 23493 00001967 B001                    	mov	al,_$P_Number		;AN000; Set type
 23494 00001969 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23495 0000196B EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23496                                  
 23497                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23498                                  	; (SYSINIT:1BA5h)
 23499                                  	; 12/12/2022
 23500                                  	;nop	; db  90h
 23501                                  
 23502                                  _$P_Value02:				;AN000; / nval = 1
 23503                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23504                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23505                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23506                                  
 23507 0000196D 46                      	inc	si			;AN000;
 23508 0000196E 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23509 00001971 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23510 00001973 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23511                                  
 23512 00001975 46                      	inc	si			;AN000; si points to 1st item_tag
 23513                                  _$P_Val02_Loop:				;AN000;
 23514 00001976 2EF606[4114]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23515 0000197C 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23516                                  
 23517 0000197E 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23518 00001982 7236                    	jb	short _$P_Val02_Next	;AN000;
 23519 00001984 7706                    	ja	short _$P_Val_In	;AN000;
 23520                                  
 23521 00001986 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23522 0000198A 722E                    	jb	short _$P_Val02_Next	;AN000;
 23523                                  
 23524                                  _$P_Val_In:				;AN000;
 23525 0000198C 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23526 00001990 7728                    	ja	short _$P_Val02_Next	;AN000;
 23527 00001992 723A                    	jb	short _$P_Val_Found	;AN000;
 23528                                  
 23529 00001994 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23530 00001998 7720                    	ja	short _$P_Val02_Next	;AN000;
 23531                                  
 23532 0000199A EB32                    	jmp	short _$P_Val_Found	;AN000;
 23533                                  
 23534                                  _$P_Val02_Sign:				;AN000;
 23535 0000199C 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23536 000019A0 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23537 000019A2 7F06                    	jg	short _$P_SVal_In	;AN000;
 23538                                  
 23539 000019A4 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23540 000019A8 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23541                                  
 23542                                  _$P_SVal_In:				;AN000;
 23543 000019AA 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23544 000019AE 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23545                                  
 23546 000019B0 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23547                                  
 23548 000019B2 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23549 000019B6 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23550                                  
 23551 000019B8 EB14                    	jmp	short _$P_Val_Found	;AN000;
 23552                                  
 23553                                  _$P_Val02_Next:				;AN000;
 23554 000019BA 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23555 000019BD FEC8                    	dec	al			;AN000; loop nrng times in AL
 23556 000019BF 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23557                                  					; / Not found
 23558 000019C1 2EC706[3514]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23559 000019C8 B001                    	mov	al,_$P_Number		;AN000;
 23560 000019CA B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23561 000019CC EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23562                                  
 23563                                  _$P_Val_Found:				;AN000;
 23564 000019CE B001                    	mov	al,_$P_Number		;AN000;
 23565 000019D0 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23566 000019D3 EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23567                                  
 23568                                  _$P_Value03:				;AN000; / nval = 2
 23569                                  
 23570                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23571                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23572                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23573                                  ;(tm07) inc	si			;AN000;
 23574                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23575                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23576                                  ;	mul	ah			;AN000;  Skip nrng field
 23577                                  ;	inc	ax			;AN000;
 23578                                  ;	add	si,ax			;AN000; si points to nnval
 23579                                  ;	mov	al,es:[si]		;AN000; get nnval
 23580                                  ;	inc	si			;AN000; si points to 1st item_tag
 23581                                  ;$P_Val03_Loop:				;AN000;
 23582                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23583                                  ;	jne	$P_Val03_Next		;AN000;
 23584                                  ;
 23585                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23586                                  ;	je	$P_Val_Found		;AN000;
 23587                                  ;
 23588                                  ;$P_Val03_Next:				;AN000;
 23589                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23590                                  ;	dec	al			;AN000; loop nval times in AL
 23591                                  ;	jne	$P_Val03_Loop		;AN000;
 23592                                  ;					;AN000; / Not found
 23593                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23594                                  ;	mov	al,$P_Number		;AN000;
 23595                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23596                                  ;	jmp	short $P_Value_Exit	;AN000;
 23597                                  ;
 23598                                  ;ENDIF					;AN000;(of Val2SW)
 23599                                  ;$P_Value04:
 23600                                  
 23601                                  _$P_Value_Err:				;AN000;
 23602 000019D5 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23603 000019DC B003                    	mov	al,_$P_String		;AN000; Set type
 23604 000019DE B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23605                                  _$P_Value_Exit:				;AN000;
 23606 000019E0 E834FD                  	call	_$P_Fill_Result		;AN000;
 23607 000019E3 5E                      	pop	si			;AN000;
 23608 000019E4 5A                      	pop	dx			;AN000;
 23609 000019E5 59                      	pop	cx			;AN000;
 23610 000019E6 58                      	pop	ax			;AN000;
 23611 000019E7 C3                      	retn				;AN000;
 23612                                  
 23613                                  ; 28/03/2019 - Retro DOS v4.0
 23614                                  
 23615                                  ;***********************************************************************
 23616                                  ; _$P_Check_OVF
 23617                                  ;
 23618                                  ; Function:  Check if overflow is occurred with consideration of
 23619                                  ;	     signed or un-signed numeric value
 23620                                  ;
 23621                                  ; Input:     Flag register
 23622                                  ;
 23623                                  ; Output:    CY = 1  :	Overflow
 23624                                  ;
 23625                                  ; Vars:     _$P_Flags(R)
 23626                                  ;***********************************************************************
 23627                                  
 23628                                  	; 26/10/2022
 23629                                  _$P_Check_OVF:
 23630 000019E8 9C                      	pushf				;AN000;
 23631 000019E9 2EF606[4114]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23632 000019EF 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23633                                  
 23634 000019F1 9D                      	popf				;AN000; by the CY bit
 23635 000019F2 C3                      	retn				;AN000;
 23636                                  
 23637                                  _$P_COVF:				;AN000;
 23638 000019F3 9D                      	popf				;AN000; else,
 23639 000019F4 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23640                                  
 23641 000019F6 F8                      	clc				;AN000; indicate it with CY bit
 23642 000019F7 C3                      	retn				;AN000; CY=0 means no overflow
 23643                                  
 23644                                  _$P_COVF00:				;AN000;
 23645 000019F8 F9                      	stc				;AN000; and CY=1 means overflow
 23646 000019F9 C3                      	retn				;AN000;
 23647                                  
 23648                                  ;***********************************************************************
 23649                                  ; _$P_0099;
 23650                                  ;
 23651                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23652                                  ;
 23653                                  ; Input:     AL = character code
 23654                                  ;
 23655                                  ; Output:    CY = 1 : AL is not number
 23656                                  ;	     CY = 0 : AL contains binary value
 23657                                  ;***********************************************************************
 23658                                  
 23659                                  _$P_0099:
 23660 000019FA 3C30                    	cmp	al,"0"                  ;AN000;
 23661                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23662                                  	; 12/12/2022
 23663 000019FC 7208                    	jb	short _$P_0099Err2  ; cf=1
 23664                                  
 23665 000019FE 3C39                    	cmp	al,"9"                  ;AN000;
 23666 00001A00 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23667                                  
 23668 00001A02 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23669                                  	; 12/12/2022
 23670                                  	; cf=0	
 23671                                  	;clc				;AN000; indicate no error
 23672 00001A04 C3                      	retn				;AN000;
 23673                                  
 23674                                  _$P_0099Err:				;AN000;
 23675 00001A05 F9                      	stc				;AN000; indicate error
 23676                                  _$P_0099Err2: ; 12/12/2022	
 23677 00001A06 C3                      	retn				;AN000;
 23678                                  
 23679                                  ;***********************************************************************
 23680                                  ; _$P_Simple_String
 23681                                  ;
 23682                                  ; Function:  See value list for the simple string
 23683                                  ;	     and make result buffer.
 23684                                  ;
 23685                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23686                                  ;	     ES:BX -> CONTROL block
 23687                                  ;
 23688                                  ; Output:    None
 23689                                  ;
 23690                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23691                                  ;
 23692                                  ; Vars: _$P_RC(W)
 23693                                  ;***********************************************************************
 23694                                  
 23695                                  _$P_Simple_String:
 23696 00001A07 50                      	push	ax			;AN000;
 23697 00001A08 53                      	push	bx			;AN000;
 23698 00001A09 52                      	push	dx			;AN000;
 23699 00001A0A 57                      	push	di			;AN000;
 23700 00001A0B 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23701 00001A0F 268A05                  	mov	al,[es:di]		;AN000; get nval
 23702 00001A12 08C0                    	or	al,al			;AN000; no value list ?
 23703 00001A14 7504                    	jnz	short _$P_Sim00		;AN000; then
 23704                                  
 23705 00001A16 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23706 00001A18 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23707                                  
 23708                                  _$P_Sim00:				;AN000;
 23709                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23710 00001A1A 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23711 00001A1C 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23712                                  
 23713 00001A1E 47                      	inc	di			;AN000;
 23714 00001A1F 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23715 00001A22 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23716 00001A24 F6E4                    	mul	ah			;AN000; Skip nrng field
 23717 00001A26 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23718 00001A27 01C7                    	add	di,ax			;AN000; di points to nnval
 23719 00001A29 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23720 00001A2C B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23721 00001A2E F6E4                    	mul	ah			;AN000; Skip nnval field
 23722 00001A30 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23723 00001A31 01C7                    	add	di,ax			;AN000; di points to nstrval
 23724 00001A33 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23725 00001A36 47                      	inc	di			;AC035; add '2' to
 23726 00001A37 47                      	inc	di			;AC035;  DI reg
 23727                                  					;AN000; di points to 1st string in list
 23728                                  _$P_Sim_Loop:				;AN000;
 23729 00001A38 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23730 00001A3B E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23731 00001A3E 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23732                                  
 23733 00001A40 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23734 00001A43 FEC8                    	dec	al			;AN000; loop nstval times in AL
 23735 00001A45 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23736                                  					;AN000; / Not found
 23737 00001A47 2EC706[3514]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23738 00001A4E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23739 00001A50 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23740                                  
 23741                                  _$P_Sim_Found:				;AN000;
 23742 00001A52 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23743 00001A56 B002                    	mov	al,_$P_List_Idx		;AN000;
 23744 00001A58 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23745 00001A5B EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23746                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23747                                  _$P_Sim01:				;AN000;
 23748 00001A5D 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23749 00001A64 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23750                                  _$P_Sim_Exit:				;AN000;
 23751 00001A66 B003                    	mov	al,_$P_String		;AN000; Set type
 23752                                  _$P_Sim_Exit0:				;AN000;
 23753 00001A68 E8ACFC                  	call	_$P_Fill_Result		;AN000;
 23754 00001A6B 5F                      	pop	di			;AN000;
 23755 00001A6C 5A                      	pop	dx			;AN000;
 23756 00001A6D 5B                      	pop	bx			;AN000;
 23757 00001A6E 58                      	pop	ax			;AN000;
 23758 00001A6F C3                      	retn				;AN000;
 23759                                  
 23760                                  ;***********************************************************************
 23761                                  ; _$P_String_Comp:
 23762                                  ;
 23763                                  ; Function:  Compare two string
 23764                                  ;
 23765                                  ; Input:     cs:SI -> 1st string
 23766                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23767                                  ;	     ES:BX -> CONTROL block
 23768                                  ;
 23769                                  ; Output:    CY = 1 if not match
 23770                                  ;
 23771                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23772                                  ;
 23773                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23774                                  ;***********************************************************************
 23775                                  
 23776                                  _$P_String_Comp:
 23777 00001A70 50                      	push	ax			;AN000;
 23778 00001A71 55                      	push	bp			;AN000;
 23779 00001A72 52                      	push	dx			;AN000;
 23780 00001A73 56                      	push	si			;AN000;
 23781 00001A74 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 23782                                  _$P_SCOM_Loop:				;AN000;
 23783 00001A76 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 23784 00001A79 E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 23785 00001A7C 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 23786                                  
 23787 00001A7E E80DFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 23788                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 23789 00001A81 2EF606[4114]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 23790 00001A87 740D                    	jz	short _$P_SCOM04	;AN000;
 23791                                  
 23792 00001A89 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 23793 00001A8B 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 23794                                  
 23795 00001A8D 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 23796 00001A92 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 23797                                  
 23798 00001A94 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 23799                                  
 23800                                  _$P_SCOM04:				;AN000;
 23801 00001A96 2EF606[4114]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 23802 00001A9C 740E                    	jz	short _$P_SCOM03	;AN000;
 23803                                  
 23804 00001A9E 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 23805 00001AA0 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 23806                                  
 23807                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23808                                  	;cmp	byte [es:bp+0],_$P_NULL
 23809                                  	; 11/12/2022
 23810 00001AA2 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 23811 00001AA7 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 23812                                  
 23813                                  _$P_SCOM05:				;AN000;   found a match
 23814 00001AA9 46                      	inc	si			;AN000; si points to just after "=" or ":"
 23815 00001AAA EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 23816                                  
 23817                                  _$P_SCOM03:				;AN000;
 23818                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 23819                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23820                                  	;cmp	al,[es:bp+0]
 23821                                  	; 11/12/2022
 23822 00001AAC 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 23823 00001AB0 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 23824                                  
 23825 00001AB2 08C0                    	or	al,al			;AN000; end of line
 23826 00001AB4 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 23827                                  
 23828                                  	; 12/12/2022
 23829                                  	;inc	si			;AN000; update operand pointer
 23830                                  	;inc	bp			;AN000;    and synonym pointer
 23831                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23832 00001AB6 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 23833                                  
 23834                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 23835                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23836                                  	;cmp	al,[es:bp+0]
 23837                                  	; 11/12/2022
 23838 00001AB8 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 23839 00001ABC 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 23840                                  
 23841 00001ABE 46                      	inc	si			;AN000; else, load next byte
 23842 00001ABF 2E8A04                  	mov	al,[cs:si]		;AN000; and
 23843 00001AC2 45                      	inc	bp			;AN000;
 23844                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23845                                  	;cmp	al,[es:bp+0]
 23846                                  	; 11/12/2022
 23847 00001AC3 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 23848 00001AC7 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 23849                                  
 23850                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23851                                  	; 12/12/2022
 23852                                  _$P_SCOM01:
 23853 00001AC9 46                      	inc	si			;AN000; else update operand pointer
 23854 00001ACA 45                      	inc	bp			;AN000; 		and synonym pointer
 23855                                  ;_$P_SCOM01:				;AN000;
 23856 00001ACB EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 23857                                  
 23858                                  _$P_SCOM_Differ0:			;AN000;
 23859                                  ;IF SwSW				;AN000;(tm10)
 23860 00001ACD 2EF606[4114]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 23861 00001AD3 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 23862                                  
 23863                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23864                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 23865                                  	; 12/12/2022
 23866 00001AD5 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 23867 00001ADA 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 23868                                  
 23869                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23870                                  	;cmp	byte [es:bp+0],_$P_NULL
 23871                                  	; 11/12/2022
 23872 00001ADC 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 23873                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 23874 00001AE1 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 23875                                  
 23876                                  _$P_not_applicable:			;AN000;(tm10)
 23877                                  ;ENDIF					;AN000;(tm10)
 23878                                  
 23879                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 23880                                  					;AN000; ignore colon option specified ?
 23881                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 23882                                  	; 12/12/2022
 23883 00001AE3 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 23884                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23885                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 23886 00001AE7 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 23887                                  
 23888 00001AE9 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 23889 00001AEB 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 23890                                  
 23891                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23892                                  	;cmp	byte [es:bp+0],_$P_NULL
 23893                                  	; 11/12/2022
 23894 00001AED 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 23895 00001AF2 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 23896                                  
 23897 00001AF4 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 23898                                  
 23899                                  _$P_SCOM02:				;AN000;
 23900 00001AF6 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 23901 00001AF8 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 23902                                  
 23903                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23904                                  	;cmp	byte [es:bp+0],_$P_Colon
 23905                                  	; 11/12/2022
 23906 00001AFA 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 23907 00001AFF 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 23908                                  
 23909                                  _$P_SCOM_Differ: 			;AN000;
 23910 00001B01 F9                      	stc				;AN000; indicate not found
 23911 00001B02 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 23912                                  
 23913                                  _$P_SCOM_Same:				;AN000;
 23914                                  	; 12/12/2022
 23915                                  	; cf=0
 23916 00001B04 2E8936[4414]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 23917                                  	; 12/12/2022
 23918                                  	;clc				;AN000; indicate found
 23919                                  _$P_SCOM_Exit:				;AN000;
 23920 00001B09 5E                      	pop	si			;AN000;
 23921 00001B0A 5A                      	pop	dx			;AN000;
 23922 00001B0B 5D                      	pop	bp			;AN000;
 23923 00001B0C 58                      	pop	ax			;AN000;
 23924 00001B0D C3                      	retn
 23925                                  
 23926                                  ; 30/03/2019
 23927                                  
 23928                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 23929                                  
 23930                                  ;***********************************************************************
 23931                                  ; _$P_File_Format;
 23932                                  ;
 23933                                  ; Function:  Check if the input string is valid file spec format.
 23934                                  ;	     And set the result buffer.
 23935                                  ;
 23936                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23937                                  ;	     ES:BX -> CONTROL block
 23938                                  ;
 23939                                  ; Output:    None
 23940                                  ;
 23941                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 23942                                  ;
 23943                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 23944                                  ;	_$P_SaveSI_Cmpx(R)
 23945                                  ;***********************************************************************
 23946                                  
 23947                                  _$P_File_Format:
 23948 00001B0E 50                      	push	ax			;AN000;
 23949 00001B0F 57                      	push	di			;AN000;
 23950 00001B10 56                      	push	si			;AN000;
 23951 00001B11 2E8B3E[4214]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 23952                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 23953 00001B16 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 23954 00001B19 08C0                    	or	al,al			;AN000; end of line ?
 23955 00001B1B 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 23956                                  
 23957 00001B1D E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 23958 00001B20 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 23959                                  
 23960 00001B22 2EC606[D814]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 23961                                  					;AN033;AC034;; set error flag- bad char.
 23962 00001B28 5E                      	pop	si			;AN033;
 23963 00001B29 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 23964 00001B2D 5F                      	pop	di			;AN033;
 23965 00001B2E EB3E                    	jmp	short _$P_FileF02	;AN033;
 23966                                  
 23967                                  _$P_FileF_Err:				;AN000;
 23968 00001B30 5E                      	pop	si			;AN000;
 23969 00001B31 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 23970 00001B35 5F                      	pop	di			;AN000;
 23971                                  
 23972                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 23973                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 23974                                  	; 12/12/2022
 23975 00001B36 26F60701                	test	byte [es:bx],_$P_Optional
 23976                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23977                                  	;test	word [es:bx],_$P_Optional
 23978 00001B3A 7532                    	jnz	short _$P_FileF02	;AN000;
 23979                                  
 23980 00001B3C 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 23981 00001B43 EB29                    	jmp	short _$P_FileF02	;AN000;
 23982                                  
 23983                                  _$P_FileF03:				;AN000;
 23984 00001B45 58                      	pop	ax			;AN000; discard save si
 23985 00001B46 56                      	push	si			;AN000; save new si
 23986                                  _$P_FileF_Loop1: 			;AN000;
 23987 00001B47 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 23988 00001B4A 08C0                    	or	al,al			;AN000; end of line ?
 23989 00001B4C 741E                    	jz	short _$P_FileF_RLT	;AN000;
 23990                                  
 23991 00001B4E E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 23992 00001B51 740B                    	je	short _$P_FileF00	;AN000;
 23993                                  
 23994 00001B53 E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 23995 00001B56 7302                    	jnc	short _$P_FileF01	;AN000;
 23996 00001B58 47                      	inc	di			;AN000; if yes, skip next byte
 23997 00001B59 46                      	inc	si			;AN000;
 23998                                  _$P_FileF01:				;AN000;
 23999 00001B5A 47                      	inc	di			;AN000;
 24000 00001B5B 46                      	inc	si			;AN000;
 24001 00001B5C EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24002                                  ;
 24003                                  _$P_FileF00:				;AN000;
 24004 00001B5E 2EA2[3B14]              	mov	[cs:_$P_Terminator],al	;AC034;
 24005 00001B62 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24006 00001B66 47                      	inc	di			;AN000;
 24007 00001B67 2E893E[3714]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24008                                  _$P_FileF_RLT:				;AN000;
 24009 00001B6C 5E                      	pop	si			;AN000;
 24010 00001B6D 5F                      	pop	di			;AN000;
 24011                                  _$P_FileF02:				;AN000;
 24012 00001B6E 58                      	pop	ax			;AN000; (tm14)
 24013 00001B6F A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 24014 00001B72 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24015                                  
 24016 00001B74 50                      	push	ax			;AN000;  (tm14)
 24017                                  
 24018 00001B75 B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 24019 00001B77 B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 24020 00001B79 E89BFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 24021 00001B7C 58                      	pop	ax			;AN000;
 24022                                  
 24023                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24024 00001B7D C3                      	retn				;AN000;
 24025                                  
 24026                                  ;***********************************************************************
 24027                                  ; _$P_FileSp_Chk
 24028                                  ;
 24029                                  ; Function:  Check if the input byte is one of file special characters
 24030                                  ;
 24031                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24032                                  ;	     AL = character code to be examineed
 24033                                  ;
 24034                                  ; Output:    ZF = 1 , AL is one of special characters
 24035                                  ;***********************************************************************
 24036                                  
 24037                                  _$P_FileSp_Chk:
 24038 00001B7E 53                      	push	bx			;AN000;
 24039 00001B7F 51                      	push	cx			;AN000;
 24040                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24041 00001B80 8D1E[CF14]              	lea	bx,[_$P_FileSp_Char]
 24042 00001B84 B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 24043                                  _$P_FileSp_Loop: 			;AN000;
 24044 00001B87 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24045 00001B8A 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24046                                  
 24047 00001B8C 43                      	inc	bx			;AN000;
 24048 00001B8D E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24049                                  
 24050 00001B8F 41                      	inc	cx			;AN000; reset ZF
 24051                                  _$P_FileSp_Exit: 			;AN000;
 24052 00001B90 59                      	pop	cx			;AN000;
 24053 00001B91 5B                      	pop	bx			;AN000;
 24054 00001B92 C3                      	retn
 24055                                  
 24056                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24057                                  
 24058                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24059                                  
 24060                                  ;***********************************************************************
 24061                                  ; _$P_Drive_Format;
 24062                                  ;
 24063                                  ; Function:  Check if the input string is valid drive only format.
 24064                                  ;	     And set the result buffer.
 24065                                  ;
 24066                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24067                                  ;	     ES:BX -> CONTROL block
 24068                                  ;
 24069                                  ; Output:    None
 24070                                  ;
 24071                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24072                                  ;
 24073                                  ; Vars: _$P_RC(W)
 24074                                  ;***********************************************************************
 24075                                  
 24076                                  _$P_Drive_Format:
 24077 00001B93 50                      	push	ax			;AN000;
 24078 00001B94 52                      	push	dx			;AN000;
 24079 00001B95 2E8A04                  	mov	al,[cs:si]		;AN000;
 24080 00001B98 08C0                    	or	al,al			;AN000; if null string
 24081 00001B9A 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24082                                  
 24083 00001B9C E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24084 00001B9F 722B                    	jc	short _$P_Drv_Err	;AN000;
 24085                                  
 24086 00001BA1 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24087 00001BA6 740D                    	je	short _$P_DrvF00	;AN000;
 24088                                  
 24089                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24090                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24091                                  	; 12/12/2022
 24092 00001BA8 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24093                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24094                                  	;test	word [es:bx],_$P_Ig_Colon
 24095 00001BAC 741E                    	jz	short _$P_Drv_Err	;AN000;
 24096                                  
 24097 00001BAE 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24098 00001BB3 7517                    	jne	short _$P_Drv_Err	;AN000;
 24099                                  
 24100                                  _$P_DrvF00:				;AN000;
 24101 00001BB5 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24102 00001BB7 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24103 00001BB9 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24104                                  
 24105 00001BBB 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24106 00001BBD 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24107                                  
 24108 00001BBF 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24109 00001BC1 88C2                    	mov	dl,al			;AN000; set
 24110 00001BC3 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24111 00001BC5 B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24112 00001BC7 E84DFB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24113 00001BCA EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24114                                  
 24115                                  _$P_Drv_Err:				;AN000;
 24116 00001BCC 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24117                                  _$P_Drv_Exit:				;AN000;
 24118 00001BD3 5A                      	pop	dx			;AN000;
 24119 00001BD4 58                      	pop	ax			;AN000;
 24120 00001BD5 C3                      	retn				;AN000;
 24121                                  
 24122                                  ;ENDIF					;AN000;(of DrvSW)
 24123                                  
 24124                                  ;***********************************************************************
 24125                                  ; _$P_Skip_Delim;
 24126                                  ;
 24127                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24128                                  ;	    and comma.
 24129                                  ;
 24130                                  ; Input:    DS:SI -> Command String
 24131                                  ;	    ES:DI -> Parameter List
 24132                                  ;
 24133                                  ; Output:   CY = 1 if the end of line encounterd
 24134                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24135                                  ;	    AL = Last examineed character
 24136                                  ;
 24137                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24138                                  ;
 24139                                  ; Vars:     _$P_Flags(R)
 24140                                  ;***********************************************************************
 24141                                  
 24142                                  _$P_Skip_Delim:
 24143                                  _$P_Skip_Delim_Loop:			;AN000;
 24144 00001BD6 AC                      	lodsb				;AN000;
 24145 00001BD7 E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24146 00001BDA 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24147                                  
 24148 00001BDC E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24149 00001BDF 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24150                                  
 24151 00001BE1 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24152 00001BE7 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24153                                  
 24154 00001BE9 2EF606[4114]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24155 00001BEF 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24156                                  
 24157                                  	;dec	si			;AN000; backup si for next call (tm08)
 24158                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24159                                  	; 12/12/2022
 24160                                  	; cf=0
 24161 00001BF1 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24162                                  
 24163                                  _$P_Skip_Delim_CY:			;AN000;
 24164 00001BF3 F9                      	stc				;AN000; indicate EOL
 24165 00001BF4 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24166                                  
 24167                                  _$P_Skip_Delim_NCY:			;AN000;
 24168 00001BF6 F8                      	clc				;AN000; indicate non delim
 24169                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24170 00001BF7 4E                      	dec	si			;AN000;  backup index pointer
 24171                                  	; 12/12/2022
 24172                                  _$P_Exit_At_Extra:	 ; cf=0
 24173 00001BF8 C3                      	retn				;AN000;
 24174                                  
 24175                                  	; 12/12/2022
 24176                                  ;_$P_Exit_At_Extra:			;AN000;
 24177                                  	;clc				;AN000; indicate extra delim
 24178                                  	;retn				;AN000;
 24179                                  
 24180                                  ;***********************************************************************
 24181                                  ; _$P_Chk_EOL;
 24182                                  ;
 24183                                  ; Function: Check if AL is one of End of Line characters.
 24184                                  ;
 24185                                  ; Input:    AL = character code
 24186                                  ;	    ES:DI -> Parameter List
 24187                                  ;
 24188                                  ; Output:   ZF = 1 if one of End of Line characters
 24189                                  ;**********************************************************************
 24190                                  
 24191                                  _$P_Chk_EOL:
 24192 00001BF9 53                      	push	bx			;AN000;
 24193 00001BFA 51                      	push	cx			;AN000;
 24194 00001BFB 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24195 00001BFD 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24196                                  
 24197 00001BFF 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24198 00001C01 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24199                                  
 24200                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24201 00001C03 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24202 00001C05 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24203                                  ;ENDIF					;AN028;
 24204                                  
 24205 00001C07 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24206                                  					;AN000; EOL character specified ?
 24207 00001C0C 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24208                                  
 24209 00001C0E 31DB                    	xor	bx,bx			;AN000;
 24210 00001C10 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24211                                  					;AN000; get length of delimiter list
 24212 00001C14 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24213 00001C17 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24214 00001C1B 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24215                                  
 24216                                  	;xor	cx,cx			;AN000; Get number of extra character
 24217 00001C1D 30ED                    	xor	ch,ch
 24218 00001C1F 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24219                                  _$P_Chk_EOL_Loop:			;AN000;
 24220 00001C22 43                      	inc	bx			;AN000;
 24221 00001C23 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24222 00001C26 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24223                                  
 24224 00001C28 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24225                                  
 24226                                  _$P_Chk_EOL_NZ:				;AN000;
 24227 00001C2A 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24228                                  _$P_Chk_EOL_Exit:			;AN000;
 24229 00001C2C 59                      	pop	cx			;AN000;
 24230 00001C2D 5B                      	pop	bx			;AN000;
 24231 00001C2E C3                      	retn
 24232                                  
 24233                                  ;***********************************************************************
 24234                                  ; _$P_Chk_Delim;
 24235                                  ;
 24236                                  ; Function: Check if AL is one of delimiter characters.
 24237                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24238                                  ;	    blanks.
 24239                                  ;
 24240                                  ; Input:    AL = character code
 24241                                  ;	    DS:SI -> Next Character
 24242                                  ;	    ES:DI -> Parameter List
 24243                                  ;
 24244                                  ; Output:   ZF = 1 if one of delimiter characters
 24245                                  ;	    SI points to the next character
 24246                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24247                                  ;***********************************************************************
 24248                                  
 24249                                  _$P_Chk_Delim:
 24250 00001C2F 53                      	push	bx			;AN000;
 24251 00001C30 51                      	push	cx			;AN000;
 24252 00001C31 2EC606[3B14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24253                                  					;AC034; Assume terminated by space
 24254                                  	;and	byte [cs:_$P_Flags20,0DFh
 24255 00001C37 2E8026[4114]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24256 00001C3D 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24257 00001C3F 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24258                                  
 24259 00001C41 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24260 00001C43 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24261                                  
 24262 00001C45 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24263 00001C47 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24264                                  
 24265                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24266                                  _$P_Chk_Delim00: 			;AN000;
 24267 00001C49 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24268 00001C4B 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24269                                  
 24270 00001C4D 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24271 00001C50 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24272                                  
 24273 00001C52 B020                    	mov	al,_$P_Space		;AN000;
 24274 00001C54 46                      	inc	si			;AN000; make si point to next character
 24275 00001C55 38C0                    	cmp	al,al			;AN000; Set ZF
 24276 00001C57 EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24277                                  
 24278                                  _$P_Chk_Delim01: 			;AN000;
 24279 00001C59 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24280                                  					;AN000; delimiter character specified ?
 24281 00001C5E 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24282                                  
 24283                                  	;xor	cx,cx			;AN000;
 24284 00001C60 30ED                    	xor	ch,ch
 24285                                  	;mov	cl,[es:di+3]
 24286 00001C62 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24287                                  					;AN000; get length of delimiter list
 24288 00001C66 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24289 00001C68 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24290                                  
 24291 00001C6A BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24292                                  _$P_Chk_Delim_Loop:			;AN000;
 24293 00001C6D 43                      	inc	bx			;AN000;
 24294 00001C6E 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24295 00001C71 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24296                                  
 24297 00001C73 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24298                                  
 24299                                  _$P_Chk_Delim_NZ:			;AN000;
 24300 00001C75 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24301                                  _$P_Chk_Delim_Exit:			;AN000;
 24302                                  _$P_ChkDfin:				;AN000;
 24303 00001C77 59                      	pop	cx			;AN000;
 24304 00001C78 5B                      	pop	bx			;AN000;
 24305 00001C79 C3                      	retn				;AN000;
 24306                                  
 24307                                  _$P_Chk_Delim_Exit0:			;AN000;
 24308 00001C7A 2EA2[3B14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24309 00001C7E 2EF606[4114]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24310 00001C84 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24311                                  
 24312 00001C86 2E800E[4114]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24313                                  					;AC034; flag terminated extra delimiter or comma
 24314                                  _$P_No_Set_Extra:			;AN027;
 24315 00001C8C 38C0                    	cmp	al,al			;AN000; set ZF
 24316 00001C8E EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24317                                  
 24318                                  
 24319                                  ;***********************************************************************
 24320                                  ; _$P_Chk_Switch;
 24321                                  ;
 24322                                  ; Function: Check if AL is the switch character not in first position of
 24323                                  ;	    _$P_STRING_BUF
 24324                                  ;
 24325                                  ; Input:    AL = character code
 24326                                  ;	    BX = current pointer within _$P_String_Buf
 24327                                  ;	    SI =>next char on command line (following the one in AL)
 24328                                  ;
 24329                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24330                                  ;		 position, and has no chance of being part of a date string,
 24331                                  ;		 i.e. should be treated as a delimiter.
 24332                                  
 24333                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24334                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24335                                  ;		 should not be treated as a delimiter.
 24336                                  ;
 24337                                  ; Vars:  _$P_Terminator(W)
 24338                                  
 24339                                  ; Use:	 _$P_0099
 24340                                  ;***********************************************************************
 24341                                  
 24342                                  _$P_Chk_Switch:
 24343                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24344 00001C90 8D2E[4A14]              	lea	bp,[_$P_STRING_BUF]	; BP=OFFSET of _$P_String_Buf even in group addressing
 24345                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24346 00001C94 39EB                    	cmp	bx,bp			;AN000;
 24347 00001C96 7406                    	je	short _$P_STRUC_L2	;AN000;
 24348                                  
 24349                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24350 00001C98 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24351 00001C9A 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24352                                  
 24353 00001C9C F9                      	stc				;AN020;not in first position and is slash
 24354                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24355                                  	; 12/12/2022
 24356 00001C9D C3                      	retn
 24357                                  
 24358                                  ; 12/12/2022
 24359                                  ;_$P_STRUC_L5:				;AN000;
 24360                                  ;	CLC				;AN020;not a slash
 24361                                  ;;	    .ENDIF			;AN020;
 24362                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24363                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24364                                  
 24365                                  _$P_STRUC_L2:				;AN000;
 24366                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24367 00001C9E 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24368 00001CA0 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24369                                  
 24370 00001CA2 2E800E[4114]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24371                                  ;	    .ENDIF			;AN020;
 24372                                  
 24373                                  	; 12/12/2022
 24374                                  	; cf=0
 24375                                  	;retn
 24376                                  
 24377                                  _$P_STRUC_L5:
 24378                                  	; 12/12/2022
 24379                                  _$P_STRUC_L12:				;AN000;
 24380 00001CA8 F8                      	clc				;AN020;CF=0 indicating first char
 24381                                  ;	.ENDIF				;AN020;
 24382                                  _$P_STRUC_L1:				;AN000;
 24383 00001CA9 C3                      	retn				;AN000;
 24384                                  
 24385                                  ;**************************************************************************
 24386                                  ; _$P_Chk_DBCS:
 24387                                  ;
 24388                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24389                                  ;
 24390                                  ;  Input:
 24391                                  ;	  AL	= Code to be examineed
 24392                                  ;
 24393                                  ;  Output:
 24394                                  ;	  If CF is on then a lead byte of DBCS
 24395                                  ;
 24396                                  ; Use: INT 21h w/AH=63
 24397                                  ;
 24398                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24399                                  ;***************************************************************************
 24400                                  
 24401                                  _$P_Chk_DBCS:
 24402 00001CAA 1E                      	push	ds			;AN000;
 24403 00001CAB 56                      	push	si			;AN000;
 24404 00001CAC 53                      	push	bx			;AN000; (tm11)
 24405                                  	
 24406 00001CAD 2E833E[3E14]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24407 00001CB3 7527                    	jne	short _$P_DBCS00	;AN000;
 24408                                  
 24409 00001CB5 50                      	push	ax			;AN000;
 24410 00001CB6 1E                      	push	ds			;AN000; (tm11)
 24411 00001CB7 51                      	push	cx			;AN000;
 24412 00001CB8 52                      	push	dx			;AN000;
 24413 00001CB9 57                      	push	di			;AN000;
 24414 00001CBA 55                      	push	bp			;AN000;
 24415 00001CBB 06                      	push	es			;AN000;
 24416 00001CBC 31F6                    	xor	si,si			;AN000;
 24417 00001CBE 8EDE                    	mov	ds,si			;AN000;
 24418 00001CC0 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24419 00001CC3 CD21                    	int	21h			;AN000;
 24420                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24421 00001CC5 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24422 00001CC7 09DB                    	or	bx,bx			;AN000; (tm11)
 24423 00001CC9 07                      	pop	es			;AN000;
 24424 00001CCA 5D                      	pop	bp			;AN000;
 24425 00001CCB 5F                      	pop	di			;AN000;
 24426 00001CCC 5A                      	pop	dx			;AN000;
 24427 00001CCD 59                      	pop	cx			;AN000;
 24428 00001CCE 1F                      	pop	ds			;AN000; (tm11)
 24429 00001CCF 58                      	pop	ax			;AN000;
 24430 00001CD0 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24431                                  
 24432                                  _$P_DBCS02:				;AN000;
 24433 00001CD2 2E8936[3C14]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24434 00001CD7 2E891E[3E14]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24435                                  _$P_DBCS00:				;AN000;
 24436 00001CDC 2E8B36[3C14]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24437 00001CE1 2E8E1E[3E14]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24438                                  
 24439                                  _$P_DBCS_LOOP:				;AN000;
 24440 00001CE6 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24441 00001CE9 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24442                                  
 24443 00001CEB 3A04                    	cmp	al,[si] 		;AN000;
 24444 00001CED 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24445                                  
 24446 00001CEF 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24447 00001CF2 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24448                                  
 24449 00001CF4 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24450 00001CF5 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24451                                  
 24452                                  _$P_DBCS01:				;AN000;
 24453 00001CF7 46                      	inc	si			;AC035; add '2' to
 24454 00001CF8 46                      	inc	si			;AC035;  SI reg
 24455                                  					;AN000; get next vector
 24456 00001CF9 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24457                                  
 24458                                  _$P_NON_DBCS:				;AN000;
 24459                                  	; 12/12/2022
 24460                                  	; cf=0
 24461                                  	;clc				;AN000; indicate SBCS
 24462                                  _$P_DBCS_EXIT:				;AN000;
 24463 00001CFB 5B                      	pop	bx			;AN000; (tm11)
 24464 00001CFC 5E                      	pop	si			;AN000;
 24465 00001CFD 1F                      	pop	ds			;AN000;
 24466 00001CFE C3                      	retn				;AN000;
 24467                                  
 24468                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24469                                  ; ======================================================================
 24470                                  ; 27/03/2019 - Retro DOS v4.0
 24471                                  
 24472                                  ;control block definitions for parser.
 24473                                  ;-----------------------------------------------------------------------
 24474                                  ; buffer = [n | n,m] {/e}
 24475                                  
 24476                                  ; 30/03/2019
 24477                                  
 24478                                  struc p_parms
 24479 00000000 ????                    	resw	1	; dw ?
 24480 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24481 00000003 ??                      	resb	1	; db 1	; length is 1
 24482 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24483                                  .size:
 24484                                  endstruc
 24485                                  
 24486                                  struc p_pos
 24487 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24488 00000002 ????                    	resw	1	; dw ?	; function
 24489 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24490                                  
 24491                                  ; note: by defining result_val before this structure, we could remove
 24492                                  ;  the "result_val" from every structure invocation
 24493                                  
 24494 00000006 ????                    	resw	1	; dw ?	; value list
 24495 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24496                                  .size:
 24497                                  endstruc
 24498                                  
 24499                                  struc	p_range
 24500 00000000 ??                      	resb	1	; db 1	; range definition
 24501 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24502 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24503 00000003 ????????                	resd	1	; dd ?	; numeric min
 24504 00000007 ????????                	resd	1	; dd ?	; numeric max
 24505                                  .size:
 24506                                  endstruc
 24507                                  
 24508                                  ;-----------------------------------------------------------------------
 24509                                  
 24510                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24511                                  	; (SYSINIT:1F48h)
 24512                                  
 24513                                  ; buffer = [n | n,m] {/e}
 24514                                  
 24515                                  ;buf_parms p_parms <buf_parmsx>
 24516                                  buf_parms: 
 24517 00001CFF [041D]                  	dw	buf_parmsx
 24518 00001D01 01                      	db	1	; an extra delimiter list
 24519 00001D02 01                      	db	1	; length is 1
 24520 00001D03 3B                      	db	';'	; delimiter
 24521                                  
 24522                                  buf_parmsx:
 24523 00001D04 0102[0E1D][221D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24524 00001D0A 01                      	db	1			; one switch
 24525 00001D0B [361D]                  	dw	sw_x_ctrl
 24526 00001D0D 00                      	db	0			; no keywords
 24527                                  
 24528                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24529                                  buf_pos1:
 24530 00001D0E 0080                    	dw	8000h	; numeric value??
 24531 00001D10 0000                    	dw	0	; function
 24532 00001D12 [481D]                  	dw	result_val ; result value buffer	
 24533 00001D14 [171D]                  	dw	buf_range_1 ; value list
 24534 00001D16 00                      	db	0  	; no switches/keywords
 24535                                  
 24536                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24537                                  buf_range_1:
 24538 00001D17 01                      	db	1	; range definition
 24539 00001D18 01                      	db	1	; 1 definition of range
 24540 00001D19 01                      	db	1	; item tag for this range
 24541 00001D1A 01000000                	dd	1	; numeric min
 24542 00001D1E 63000000                	dd	99	; numeric max
 24543                                  
 24544                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24545                                  buf_pos2:
 24546 00001D22 0180                    	dw	8001h
 24547 00001D24 0000                    	dw	0
 24548 00001D26 [481D]                  	dw	result_val	
 24549 00001D28 [2B1D]                  	dw	buf_range_2
 24550 00001D2A 00                      	db	0
 24551                                  
 24552                                  ;buf_range_2 p_range <,,,0,8>
 24553                                  buf_range_2:
 24554 00001D2B 01                      	db	1
 24555 00001D2C 01                      	db	1
 24556 00001D2D 01                      	db	1
 24557 00001D2E 00000000                	dd	0
 24558 00001D32 08000000                	dd	8
 24559                                  
 24560                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24561                                  sw_x_ctrl:
 24562 00001D36 0000                    	dw	0
 24563 00001D38 0000                    	dw	0
 24564 00001D3A [481D]                  	dw	result_val	
 24565 00001D3C [471D]                  	dw	noval
 24566 00001D3E 01                      	db	1	; 1 switch
 24567                                  	
 24568                                  switch_x:
 24569 00001D3F 2F5800                  	db	'/X',0		; M016
 24570                                  
 24571                                  p_buffers:
 24572 00001D42 0000                    	dw	0	; local variables
 24573                                  p_h_buffers:
 24574 00001D44 0000                    	dw	0
 24575                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24576                                  p_buffer_slash_x:
 24577 00001D46 00                      	db	0 ; 31/03/2019
 24578                                  
 24579                                  ;-- common definitions -------------------------------------------------
 24580                                  
 24581 00001D47 00                      noval:	db	0
 24582                                  
 24583                                  result_val: 	;label	byte
 24584 00001D48 00                      	db	0		; type returned
 24585                                  result_val_itag:
 24586 00001D49 00                      	db	0		; item tag returned
 24587                                  result_val_swoff:
 24588 00001D4A 0000                    	dw	0		; es:offset of the switch defined
 24589                                  rv_byte:	;label	byte
 24590 00001D4C 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24591                                  
 24592                                  ;-----------------------------------------------------------------------
 24593                                  
 24594                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24595                                  	; (SYSINIT:1F99h)
 24596                                  
 24597                                  ; break = [ on | off ]
 24598                                  
 24599                                  ;brk_parms p_parms  <brk_parmsx>
 24600                                  brk_parms:
 24601 00001D50 [551D]                  	dw	brk_parmsx
 24602 00001D52 01                      	db	1	; an extra delimiter list
 24603 00001D53 01                      	db	1	; length is 1
 24604 00001D54 3B                      	db	';'	; delimiter
 24605                                  
 24606                                  brk_parmsx:
 24607 00001D55 0101[5B1D]              	dw	101h,brk_pos	; min,max = 1 positional
 24608 00001D59 00                      	db	0		; no switches
 24609 00001D5A 00                      	db	0		; no keywords
 24610                                  
 24611                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24612                                  brk_pos:
 24613 00001D5B 0020                    	dw	2000h
 24614 00001D5D 0000                    	dw	0
 24615 00001D5F [481D]                  	dw	result_val	
 24616 00001D61 [641D]                  	dw	on_off_string
 24617 00001D63 00                      	db	0
 24618                                  
 24619                                  on_off_string:	;label	byte
 24620 00001D64 03                      	db	3		; signals that there is a string choice
 24621 00001D65 00                      	db	0		; no range definition
 24622 00001D66 00                      	db	0		; no numeric values choice
 24623 00001D67 02                      	db	2		; 2 strings for choice
 24624 00001D68 01                      	db	1		; the 1st string tag
 24625 00001D69 [6E1D]                  	dw	on_string
 24626 00001D6B 02                      	db	2		; the 2nd string tag
 24627 00001D6C [711D]                  	dw	off_string
 24628                                  
 24629                                  on_string:
 24630 00001D6E 4F4E00                  	db	"ON",0
 24631                                  off_string:
 24632 00001D71 4F464600                	db	"OFF",0
 24633                                  
 24634                                  p_ctrl_break:
 24635 00001D75 00                      	db	0	; local variable
 24636                                  
 24637                                  ;-----------------------------------------------------------------------
 24638                                  
 24639                                  	; 27/10/2022
 24640                                  
 24641                                  ; country = n {m {path}}
 24642                                  ; or
 24643                                  ; country = n,,path
 24644                                  
 24645                                  ;cntry_parms p_parms <cntry_parmsx>
 24646                                  cntry_parms:
 24647 00001D76 [7B1D]                  	dw	cntry_parmsx
 24648 00001D78 01                      	db	1
 24649 00001D79 01                      	db	1
 24650 00001D7A 3B                      	db	';'
 24651                                  	
 24652                                  cntry_parmsx:
 24653 00001D7B 0103[851D][991D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24653 00001D81 [A21D]             
 24654 00001D83 00                      	db	0		; no switches
 24655 00001D84 00                      	db	0		; no keywords
 24656                                  
 24657                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24658                                  cntry_pos1:
 24659 00001D85 0080                    	dw	8000h
 24660 00001D87 0000                    	dw	0
 24661 00001D89 [481D]                  	dw	result_val	
 24662 00001D8B [8E1D]                  	dw	cc_range
 24663 00001D8D 00                      	db	0
 24664                                  
 24665                                  ;cc_range p_range <,,,1,999>
 24666                                  cc_range:
 24667 00001D8E 01                      	db	1
 24668 00001D8F 01                      	db	1
 24669 00001D90 01                      	db	1
 24670 00001D91 01000000                	dd	1
 24671 00001D95 E7030000                	dd	999
 24672                                  
 24673                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24674                                  cntry_pos2:
 24675 00001D99 0180                    	dw	8001h
 24676 00001D9B 0000                    	dw	0
 24677 00001D9D [481D]                  	dw	result_val	
 24678 00001D9F [8E1D]                  	dw	cc_range
 24679 00001DA1 00                      	db	0
 24680                                  
 24681                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24682                                  cntry_pos3:
 24683 00001DA2 0102                    	dw	201h
 24684 00001DA4 0000                    	dw	0
 24685 00001DA6 [481D]                  	dw	result_val	
 24686 00001DA8 [471D]                  	dw	noval
 24687 00001DAA 00                      	db	0	
 24688                                  
 24689                                  p_cntry_code:
 24690 00001DAB 0000                    	dw	0	; local variable
 24691                                  p_code_page:
 24692 00001DAD 0000                    	dw	0	; local variable
 24693                                  
 24694                                  ;-----------------------------------------------------------------------
 24695                                  
 24696                                  	; 27/10/2022
 24697                                  
 24698                                  ; files = n
 24699                                  
 24700                                  ;files_parms p_parms <files_parmsx>
 24701                                  files_parms:
 24702 00001DAF [B41D]                  	dw	files_parmsx
 24703 00001DB1 01                      	db	1
 24704 00001DB2 01                      	db	1
 24705 00001DB3 3B                      	db	';'
 24706                                  
 24707                                  files_parmsx:
 24708 00001DB4 0101[BA1D]              	dw	101h,files_pos	; min,max 1 positional
 24709 00001DB8 00                      	db	0		; no switches
 24710 00001DB9 00                      	db	0		; no keywords
 24711                                  
 24712                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24713                                  files_pos:
 24714 00001DBA 0080                    	dw	8000h
 24715 00001DBC 0000                    	dw	0
 24716 00001DBE [481D]                  	dw	result_val	
 24717 00001DC0 [C31D]                  	dw	files_range
 24718 00001DC2 00                      	db	0
 24719                                  
 24720                                  ;files_range p_range <,,,8,255>
 24721                                  files_range:
 24722 00001DC3 01                      	db	1
 24723 00001DC4 01                      	db	1
 24724 00001DC5 01                      	db	1
 24725 00001DC6 08000000                	dd	8
 24726 00001DCA FF000000                	dd	255
 24727                                  
 24728                                  p_files:
 24729 00001DCE 00                      	db	0		; local variable
 24730                                  
 24731                                  ;-----------------------------------------------------------------------
 24732                                  
 24733                                  	; 27/10/2022
 24734                                  
 24735                                  ; fcbs = n,m
 24736                                  
 24737                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24738                                  fcbs_parms:
 24739 00001DCF [D41D]                  	dw	fcbs_parmsx
 24740 00001DD1 01                      	db	1
 24741 00001DD2 01                      	db	1
 24742 00001DD3 3B                      	db	';'
 24743                                  
 24744                                  fcbs_parmsx:
 24745 00001DD4 0102[DC1D][F01D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24746 00001DDA 00                      	db	0		; no switches
 24747 00001DDB 00                      	db	0		; no keywords
 24748                                  
 24749                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24750                                  fcbs_pos_1:
 24751 00001DDC 0080                    	dw	8000h
 24752 00001DDE 0000                    	dw	0
 24753 00001DE0 [481D]                  	dw	result_val	
 24754 00001DE2 [E51D]                  	dw	fcbs_range
 24755 00001DE4 00                      	db	0
 24756                                  
 24757                                  ;fcbs_range p_range <,,,1,255>
 24758                                  fcbs_range:
 24759 00001DE5 01                      	db	1
 24760 00001DE6 01                      	db	1
 24761 00001DE7 01                      	db	1
 24762 00001DE8 01000000                	dd	1
 24763 00001DEC FF000000                	dd	255
 24764                                  
 24765                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24766                                  fcbs_pos_2:
 24767 00001DF0 0080                    	dw	8000h
 24768 00001DF2 0000                    	dw	0
 24769 00001DF4 [481D]                  	dw	result_val	
 24770 00001DF6 [F91D]                  	dw	fcbs_keep_range
 24771 00001DF8 00                      	db	0
 24772                                  
 24773                                  ;fcbs_keep_range p_range <,,,0,255>
 24774                                  fcbs_keep_range:
 24775 00001DF9 01                      	db	1
 24776 00001DFA 01                      	db	1
 24777 00001DFB 01                      	db	1
 24778 00001DFC 00000000                	dd	0
 24779 00001E00 FF000000                	dd	255
 24780                                  
 24781 00001E04 00                      p_fcbs:	db	0		; local variable
 24782 00001E05 00                      p_keep:	db	0		; local variable
 24783                                  
 24784                                  ;-----------------------------------------------------------------------
 24785                                  
 24786                                  	; 27/10/2022
 24787                                  
 24788                                  ; lastdrive = x
 24789                                  
 24790                                  ;ldrv_parms p_parms <ldrv_parmsx>
 24791                                  ldrv_parms:
 24792 00001E06 [0B1E]                  	dw	ldrv_parmsx
 24793 00001E08 01                      	db	1
 24794 00001E09 01                      	db	1
 24795 00001E0A 3B                      	db	';'
 24796                                  
 24797                                  ldrv_parmsx:
 24798 00001E0B 0101[111E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 24799 00001E0F 00                      	db	0		; no switches
 24800 00001E10 00                      	db	0		; no keywords
 24801                                  
 24802                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 24803                                  ldrv_pos:				    ; remove colon at end
 24804 00001E11 1001                    	dw	110h
 24805 00001E13 1000                    	dw	10h
 24806 00001E15 [481D]                  	dw	result_val	
 24807 00001E17 [471D]                  	dw	noval
 24808 00001E19 00                      	db	0
 24809                                  	
 24810 00001E1A 00                      p_ldrv:	db	0		; local variable
 24811                                  
 24812                                  ;-----------------------------------------------------------------------
 24813                                  
 24814                                  	; 27/10/2022
 24815                                  
 24816                                  ; stacks = n,m
 24817                                  
 24818                                  ;stks_parms p_parms <stks_parmsx>
 24819                                  stks_parms:
 24820 00001E1B [201E]                  	dw	stks_parmsx
 24821 00001E1D 01                      	db	1
 24822 00001E1E 01                      	db	1
 24823 00001E1F 3B                      	db	';'
 24824                                  
 24825                                  stks_parmsx:
 24826 00001E20 0202[281E][3C1E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 24827 00001E26 00                      	db	0		; no switches
 24828 00001E27 00                      	db	0		; no keywords
 24829                                  
 24830                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 24831                                  stks_pos_1:
 24832 00001E28 0080                    	dw	8000h
 24833 00001E2A 0000                    	dw	0
 24834 00001E2C [481D]                  	dw	result_val	
 24835 00001E2E [311E]                  	dw	stks_range
 24836 00001E30 00                      	db	0
 24837                                  
 24838                                  ;stks_range p_range <,,,0,64>
 24839                                  stks_range:
 24840 00001E31 01                      	db	1
 24841 00001E32 01                      	db	1
 24842 00001E33 01                      	db	1
 24843 00001E34 00000000                	dd	0
 24844 00001E38 40000000                	dd	64
 24845                                  
 24846                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 24847                                  stks_pos_2:
 24848 00001E3C 0080                    	dw	8000h
 24849 00001E3E 0000                    	dw	0
 24850 00001E40 [481D]                  	dw	result_val	
 24851 00001E42 [451E]                  	dw	stk_size_range
 24852 00001E44 00                      	db	0
 24853                                  
 24854                                  ;stk_size_range p_range <,,,0,512>
 24855                                  stk_size_range:
 24856 00001E45 01                      	db	1
 24857 00001E46 01                      	db	1
 24858 00001E47 01                      	db	1
 24859 00001E48 00000000                	dd	0
 24860 00001E4C 00020000                	dd	512	
 24861                                  
 24862                                  p_stack_count:
 24863 00001E50 0000                    	dw	0	; local variable
 24864                                  p_stack_size:
 24865 00001E52 0000                    	dw	0	; local variable
 24866                                  
 24867                                  ;-----------------------------------------------------------------------
 24868                                  
 24869                                  	; 27/10/2022
 24870                                  
 24871                                  ; multitrack = [ on | off ]
 24872                                  
 24873                                  ;mtrk_parms p_parms <mtrk_parmsx>
 24874                                  mtrk_parms:
 24875 00001E54 [591E]                  	dw	mtrk_parmsx
 24876 00001E56 01                      	db	1
 24877 00001E57 01                      	db	1
 24878 00001E58 3B                      	db	';'
 24879                                  
 24880                                  mtrk_parmsx:
 24881 00001E59 0101[5F1E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 24882 00001E5D 00                      	db	0		; no switches
 24883 00001E5E 00                      	db	0		; no keywords
 24884                                  
 24885                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24886                                  mtrk_pos:
 24887 00001E5F 0020                    	dw	2000h
 24888 00001E61 0000                    	dw	0
 24889 00001E63 [481D]                  	dw	result_val	
 24890 00001E65 [641D]                  	dw	on_off_string
 24891 00001E67 00                      	db	0
 24892                                  
 24893 00001E68 00                      p_mtrk:	db	0		; local variable
 24894                                  
 24895                                  ;-----------------------------------------------------------------------
 24896                                  
 24897                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24898                                  	; (SYSINIT:20B2h)
 24899                                  
 24900                                  ; switches=/k
 24901                                  
 24902                                  ;swit_parms p_parms <swit_parmsx>
 24903                                  swit_parms:
 24904 00001E69 [6E1E]                  	dw	swit_parmsx
 24905 00001E6B 01                      	db	1
 24906 00001E6C 01                      	db	1
 24907 00001E6D 3B                      	db	';'
 24908                                  
 24909                                  swit_parmsx:
 24910 00001E6E 0000                    	dw	0		; no positionals
 24911                                  	;db	5               ; # of switches
 24912                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24913 00001E70 03                      	db	3
 24914 00001E71 [781E]                  	dw	swit_k_ctrl	; /k control
 24915                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 24916                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 24917 00001E73 [841E]                  	dw	swit_t_ctrl     ; /t control
 24918 00001E75 [901E]                  	dw	swit_w_ctrl     ; /w control
 24919 00001E77 00                      	db	0		; no keywords
 24920                                  
 24921                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24922                                  swit_k_ctrl:
 24923 00001E78 00000000[481D]-         	dw	0,0,result_val,noval
 24923 00001E7E [471D]             
 24924 00001E80 01                      	db	1
 24925 00001E81 2F4B00                  swit_k:	db	'/K',0
 24926                                  
 24927                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24928                                  ;
 24929                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24930                                  ;swit_n_ctrl:
 24931                                  ;	dw	0,0,result_val,noval
 24932                                  ;	db	1
 24933                                  ;swit_n: db	'/N',0
 24934                                  ;
 24935                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24936                                  ;swit_f_ctrl:
 24937                                  ;	dw	0,0,result_val,noval
 24938                                  ;	db	1
 24939                                  ;swit_f: db 	'/F',0
 24940                                  
 24941                                  	; 27/10/2022
 24942                                  
 24943                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 24944                                  swit_t_ctrl:
 24945 00001E84 00000000[481D]-         	dw	0,0,result_val,noval
 24945 00001E8A [471D]             
 24946 00001E8C 01                      	db	1
 24947 00001E8D 2F5400                  swit_t:	db	'/T',0			   ;				M059
 24948                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 24949                                  swit_w_ctrl:
 24950 00001E90 00000000[481D]-         	dw	0,0,result_val,noval
 24950 00001E96 [471D]             
 24951 00001E98 01                      	db	1
 24952 00001E99 2F5700                  swit_w:	db	'/W',0			   ;				M063
 24953                                  
 24954                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 24955                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 24956                                  ;   in the above table to prevent the parsing code from complaining about them
 24957                                  
 24958 00001E9C 00                      p_swit_k:	db     0	; local variable
 24959 00001E9D 00                      p_swit_t:	db     0	; local variable			M059
 24960 00001E9E 00                      p_swit_w:	db     0	; local variable			M063
 24961                                  
 24962                                  ;-----------------------------------------------------------------------
 24963                                  
 24964                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24965                                  	; (SYSINIT:20E8h)
 24966                                  
 24967                                  ; DOS = [ high | low ]
 24968                                  
 24969                                  ;dos_parms p_parms  <dos_parmsx>
 24970                                  dos_parms:
 24971 00001E9F [A41E]                  	dw	dos_parmsx
 24972 00001EA1 01                      	db	1
 24973 00001EA2 01                      	db	1
 24974 00001EA3 3B                      	db	';'
 24975                                  dos_parmsx:
 24976 00001EA4 01                      	db	1		; min parameters
 24977 00001EA5 02                      	db	2		; max parameters
 24978 00001EA6 [AC1E]                  	dw	dos_pos		; 
 24979 00001EA8 [AC1E]                  	dw	dos_pos		; 
 24980 00001EAA 00                      	db	0		; no switches
 24981 00001EAB 00                      	db	0		; no keywords
 24982                                  
 24983                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24984                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24985                                  dos_pos:
 24986 00001EAC 00200000[481D]-         	dw	2000h,0,result_val,dos_strings
 24986 00001EB2 [BE1E]             
 24987 00001EB4 00                      	db	0
 24988 00001EB5 00200000[481D]-         	dw	2000h,0,result_val,dos_strings
 24988 00001EBB [BE1E]             
 24989 00001EBD 00                      	db	0	
 24990                                  
 24991                                  dos_strings:	;label	byte
 24992 00001EBE 03                      	db	3		; signals that there is a string choice
 24993 00001EBF 00                      	db	0		; no range definition
 24994 00001EC0 00                      	db	0		; no numeric values choice
 24995 00001EC1 04                      	db	4		; 4 strings for choice
 24996 00001EC2 01                      	db	1		; the 1st string tag
 24997 00001EC3 [CE1E]                  	dw	hi_string
 24998 00001EC5 02                      	db	2		; the 2nd string tag
 24999 00001EC6 [D31E]                  	dw	lo_string
 25000 00001EC8 03                      	db	3
 25001 00001EC9 [D71E]                  	dw	umb_string
 25002 00001ECB 04                      	db	4
 25003 00001ECC [DB1E]                  	dw	noumb_string
 25004                                  
 25005 00001ECE 4849474800              hi_string:	db	"HIGH",0
 25006 00001ED3 4C4F5700                lo_string:	db	"LOW",0
 25007 00001ED7 554D4200                umb_string:	db	"UMB",0
 25008 00001EDB 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25009                                  
 25010 00001EE1 00                      p_dos_hi:	db	0	; local variable
 25011                                  				; BUGBUG : I dont know whether PARSER uses
 25012                                  				;          this variable or not
 25013                                  
 25014                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25015                                  
 25016                                  %if 0
 25017                                  
 25018                                  ;****************************************************************** RICHID ****
 25019                                  
 25020                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25021                                  
 25022                                  ; 30/03/2019 - Retro DOS v4.0
 25023                                  ;------------------------------------------------------------------------------
 25024                                  
 25025                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25026                                  ;
 25027                                  ;   Date:     May 14, 1992
 25028                                  ;
 25029                                  ;******************************************************************************
 25030                                  ;
 25031                                  ;   Modification log:
 25032                                  ;
 25033                                  ;     DATE    WHO      DESCRIPTION
 25034                                  ;   --------  -------  --------------------------------------------------------
 25035                                  ;   05/14/92  t-richj  Original
 25036                                  ;   06/21/92  t-richj  Final revisions before check-in
 25037                                  ;
 25038                                  ;******************************************************************************
 25039                                  ;
 25040                                  ; There are two primary definitions which need to be made, selectively, before
 25041                                  ; this include file should be used.  These are:
 25042                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25043                                  ;                declared as external.  Otherwise, variables will be declared
 25044                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25045                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25046                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25047                                  ;                (as only one module, sysconf.asm, includes this file).
 25048                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25049                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25050                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25051                                  ;
 25052                                  ;******************************************************************************
 25053                                  
 25054                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25055                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25056                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25057                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25058                                  ; space problem (it's just such a nice round number, eh?).
 25059                                  
 25060                                  MAXUMB	equ	16
 25061                                  
 25062                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25063                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25064                                  
 25065                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25066                                  SystemPSPOwner	equ	8
 25067                                  ;JapanPSPOwner	equ	9
 25068                                  
 25069                                  ; for LoadHigh and DeviceHigh:
 25070                                  ;
 25071                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25072                                  ;	          UnHideUMBs().
 25073                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25074                                  ;	           line.
 25075                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25076                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25077                                  ;	          given a command-line like "/L:3,500;4"
 25078                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25079                                  ;	          matching its index number was specified on the command-line;
 25080                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25081                                  ;	          will be set to 1.  All others will be set to 0.
 25082                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25083                                  ;	          specified by the user for a UMB (in the above example, all
 25084                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25085                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25086                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25087                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25088                                  ;	           for details).
 25089                                  
 25090                                  fInHigh:  db	0
 25091                                  fUmbTiny: db	0
 25092                                  SegLoad:  dw	0
 25093                                  UmbLoad:  db	0
 25094                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25095                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25096                                  fm_umb:   db	0
 25097                                  fm_strat: db	0
 25098                                  fm_argc:  db	0	
 25099                                  
 25100                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25101                                  ; UmbLoad is set to the UMB number given.
 25102                                  
 25103                                  UNSPECIFIED	equ	-1
 25104                                  
 25105                                  %endif
 25106                                  
 25107                                  ;****************************************************************** RICHID ****
 25108                                  
 25109                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25110                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25111                                  
 25112                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25113                                  ; (SYSINIT:212Bh)	
 25114                                  
 25115                                  		;public	DevEntry
 25116                                  
 25117 00001EE2 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25118 00001EE4 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25119 00001EE6 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25120 00001EE8 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25121 00001EEC 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25122                                  ; 27/10/2022 
 25123                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25124                                  ;
 25125 00001EF0 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25126 00001EF1 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25127 00001EF3 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25128 00001EF5 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25129                                  ;
 25130 00001EF7 00000000                DevXMSAddr:	dd	0
 25131                                  ;
 25132 00001EFB 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25133 00001EFD 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25134                                  ;
 25135 00001EFF 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25136                                  				;  is being loaded into UMB
 25137 00001F00 0000                    DevSizeOption:	dw	0	; SIZE= option
 25138                                  ;
 25139 00001F02 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25140 00001F03 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25141 00001F05 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25142                                  ;
 25143 00001F0D 00                      FirstUMBLinked:	db	0
 25144 00001F0E 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25145 00001F10 00000000                DevCmdLine:	dd	0	; Current Command line
 25146 00001F14 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25147                                  				; to use the file name in the command line
 25148                                  ;
 25149                                  ;	ifdef	dblspace_hooks
 25150                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25151                                  ;	endif
 25152                                  
 25153                                  ; ===========================================================================
 25154                                  
 25155                                  ; 31/03/2019 - Retro DOS v4.0
 25156                                  
 25157                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25158                                  ; (SYSINIT:215Eh)
 25159                                  
 25160                                  ;----------------------------------------------------------------------------
 25161                                  ;
 25162                                  ; procedure : doconf
 25163                                  ;
 25164                                  ;             Config file is parsed initially with this routine. For the
 25165                                  ;             Subsequent passes 'multi_pass' entry is used .
 25166                                  ;
 25167                                  ;----------------------------------------------------------------------------
 25168                                  
 25169                                  	; 27/10/2022
 25170                                  doconf:
 25171 00001F15 0E                      	push	cs
 25172 00001F16 1F                      	pop	ds
 25173                                  
 25174 00001F17 B80037                  	mov	ax,3700h
 25175                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25176 00001F1A CD21                    	int	21h
 25177 00001F1C 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25178                                  
 25179                                  ; 27/10/2022
 25180                                  ;;ifdef	MULTI_CONFIG
 25181                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25182                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25183                                  ;;endif	;MULTI_CONFIG
 25184                                  
 25185 00001F20 BA[FC33]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25186 00001F23 B8003D                  	mov	ax,3D00h
 25187                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25188 00001F26 F9                      	stc				;in case of int 24
 25189 00001F27 CD21                    	int	21h			;function request
 25190 00001F29 7306                    	jnc	short noprob		; brif opened okay
 25191                                  
 25192                                  ; 27/10/2022
 25193                                  ;;ifdef	MULTI_CONFIG
 25194                                  ;      	call	kbd_read		; we still want to give the guy
 25195                                  ;					; a chance to select clean boot!
 25196                                  ;;endif					; (ie, no autoexec.bat processing)
 25197 00001F2B C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25198 00001F30 C3                      	retn
 25199                                  noprob: 				;get file size (note < 64k!!)
 25200 00001F31 89C3                    	mov	bx,ax  ; File handle
 25201 00001F33 31C9                    	xor	cx,cx
 25202 00001F35 31D2                    	xor	dx,dx
 25203                                  	;mov	ax,4202h
 25204 00001F37 B80242                  	mov	ax,(LSEEK<<8)|2
 25205 00001F3A CD21                    	int	21h
 25206 00001F3C A3[D203]                	mov	[count],ax
 25207                                  
 25208 00001F3F 31D2                    	xor	dx,dx
 25209                                  	;mov	ax,4200h
 25210 00001F41 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25211 00001F44 CD21                    	int	21h
 25212                                  
 25213                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25214                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25215 00001F46 8B16[A102]              	mov	dx,[top_of_cdss] 
 25216                                  
 25217 00001F4A A1[D203]                	mov	ax,[count]
 25218 00001F4D A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25219 00001F50 E866F1                  	call	ParaRound
 25220 00001F53 29C2                    	sub	dx,ax
 25221                                  
 25222                                  ; 27/10/2022
 25223                                  ;;ifdef	MULTI_CONFIG
 25224                                  ;;
 25225                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25226                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25227                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25228                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25229                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25230                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25231                                  ;;  of extra space, so here we account for it (the worst case of course is
 25232                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25233                                  ;;
 25234                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25235                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25236                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25237                                  ;;endif	;MULTI_CONFIG
 25238                                  
 25239 00001F55 83EA11                  	sub	dx,11h			;room for header
 25240                                  	
 25241                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25242                                  	;mov	[CONFBOT],dx
 25243                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25244 00001F58 8916[A102]              	mov	[top_of_cdss],dx
 25245 00001F5C E870EC                  	call    TempCDS 
 25246                                  	; 11/12/2022
 25247                                  	; ds <> cs 
 25248 00001F5F 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25249                                   
 25250 00001F64 8EDA                    	mov	ds,dx
 25251 00001F66 8EC2                    	mov	es,dx
 25252                                  
 25253 00001F68 31D2                    	xor	dx,dx
 25254 00001F6A 2E8B0E[D203]            	mov	cx,[cs:count]
 25255 00001F6F B43F                    	mov	ah,3Fh
 25256                                  	;mov	ah,READ  ; 3Fh
 25257 00001F71 F9                      	stc				;in case of int 24
 25258 00001F72 CD21                    	int	21h			;function request
 25259 00001F74 9C                      	pushf
 25260                                  
 25261                                  ; find the eof mark in the file. if present,then trim length.
 25262                                  
 25263 00001F75 50                      	push	ax
 25264 00001F76 57                      	push	di
 25265 00001F77 51                      	push	cx
 25266 00001F78 B01A                    	mov	al,1Ah			; eof mark
 25267 00001F7A 89D7                    	mov	di,dx			; point to buffer
 25268 00001F7C E305                    	jcxz	puteol			; no chars
 25269 00001F7E F2AE                    	repnz	scasb			; find end
 25270 00001F80 7501                    	jnz	short puteol		; none found and count exhausted
 25271                                  
 25272                                  ; we found a 1a. back up
 25273                                  
 25274 00001F82 4F                      	dec	di			; backup past 1Ah
 25275                                  
 25276                                  ;  just for the halibut, stick in an extra eol
 25277                                  
 25278                                  puteol:
 25279 00001F83 B00D                    	mov	al,cr ; 0Dh
 25280 00001F85 AA                      	stosb
 25281 00001F86 B00A                    	mov	al,lf  ;0Ah
 25282 00001F88 AA                      	stosb
 25283 00001F89 29D7                    	sub	di,dx			; difference moved
 25284                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25285                                  	;mov	[cs:count],di		; new count
 25286                                  
 25287                                  	; 11/12/2022	
 25288                                  	; 31/03/2019 - Retro DOS v4.0
 25289 00001F8B 0E                      	push	cs
 25290 00001F8C 1F                      	pop	ds
 25291                                  
 25292 00001F8D 893E[D203]              	mov	[count],di		; new count
 25293                                  
 25294 00001F91 59                      	pop	cx
 25295 00001F92 5F                      	pop	di
 25296 00001F93 58                      	pop	ax
 25297                                  
 25298                                  	; 11/12/2022
 25299                                  	; 27/10/2022
 25300                                  	;push	cs
 25301                                  	;pop	ds
 25302                                  
 25303 00001F94 50                      	push	ax
 25304                                  	;mov	ah,CLOSE
 25305 00001F95 B43E                    	mov	ah,3Eh
 25306 00001F97 CD21                    	int	21h
 25307 00001F99 58                      	pop	ax
 25308 00001F9A 9D                      	popf
 25309 00001F9B 7204                    	jc	short conferr 		;if not we've got a problem
 25310 00001F9D 39C1                    	cmp	cx,ax
 25311 00001F9F 742C                    	jz	short getcom		;couldn't read the file
 25312                                  conferr:
 25313 00001FA1 BA[FC33]                	mov	dx,config		;want to print config error
 25314 00001FA4 E8AC13                  	call	badfil
 25315                                  endconv:
 25316 00001FA7 C3                      	retn
 25317                                  
 25318                                  ;----------------------------------------------------------------------------
 25319                                  ;
 25320                                  ; entry : multi_pass
 25321                                  ;
 25322                                  ;             called to execute device=,install= commands
 25323                                  ;
 25324                                  ;----------------------------------------------------------------------------
 25325                                  
 25326                                  	; 27/10/2022
 25327                                  multi_pass:
 25328 00001FA8 0E                      	push	cs
 25329 00001FA9 1F                      	pop	ds
 25330                                  
 25331 00001FAA 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25332                                  ;jae_endconv:
 25333 00001FAF 73F6                    	jae	short endconv 		; do nothing. just return.
 25334                                  
 25335                                  	;push	word [CONFBOT]
 25336                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25337 00001FB1 FF36[A102]              	push	word [top_of_cdss]
 25338 00001FB5 07                      	pop	es			; es -> confbot
 25339                                  
 25340 00001FB6 8B36[D403]              	mov	si,[org_count]
 25341 00001FBA 8936[D203]              	mov	[count],si		; set count
 25342 00001FBE 31F6                    	xor	si,si ; 0
 25343 00001FC0 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25344 00001FC4 8936[2B03]                      mov     [linecount],si		; reset linecount
 25345                                  
 25346 00001FC8 E86807                  	call	getchr
 25347 00001FCB EB06                    	jmp	short conflp
 25348                                  
 25349                                  getcom:
 25350 00001FCD E8B10E                          call    organize                ; organize the file
 25351 00001FD0 E86007                  	call	getchr
 25352                                  conflp: 
 25353 00001FD3 72D2                    	jc	short endconv
 25354                                  
 25355 00001FD5 FF06[2B03]                      inc     word [linecount]	; increase linecount
 25356                                  
 25357 00001FD9 C606[2B14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25358 00001FDE C606[2E14]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25359 00001FE3 3C0A                    	cmp	al,lf			; linefeed?
 25360 00001FE5 7416                    	je	short blank_line	;  then ignore this line.
 25361                                  
 25362                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25363                                  %if 0
 25364                                  
 25365                                  ;ifdef	MULTI_CONFIG
 25366                                  
 25367                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25368                                  ;   number immediately following it....
 25369                                  
 25370                                          mov     [config_cmd],al         ; save original command code
 25371                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25372                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25373                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25374                                          je      short not_final		; no, line number is not embedded
 25375                                  
 25376                                          push    ax                      ;
 25377                                          call    getchr                  ; ignore end-of-image errors,
 25378                                          mov     ah,al                   ; because if there's an error
 25379                                          call    getchr                  ; fetching the line number that's
 25380                                          xchg    al,ah                   ; supposed to be there, the next
 25381                                          mov     [linecount],ax          ; getchr call will get the same error
 25382                                          pop     ax
 25383                                  ;
 25384                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25385                                  ;   which to obtain its original program name, it grovels through all of
 25386                                  ;   memory to find the filename that was used to exec it; it wants to find
 25387                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25388                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25389                                  ;   immediately before the filename, but since we are now storing line # info
 25390                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25391                                  ;   spot.
 25392                                  ;
 25393                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25394                                  ;   over the line number info, since we no longer need that info anyway. This
 25395                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25396                                  ;   retrieved.
 25397                                  ;
 25398                                          cmp	byte [multi_pass_id],2	; final pass?
 25399                                          jb	short not_final		; no
 25400                                          ;test	word [install_flag],have_install_cmd
 25401                                  	test	byte [install_flag],have_install_cmd ; 1
 25402                                          jz	short final		; no install cmds, so yes it is
 25403                                          cmp	byte [multi_pass_id],3	; final pass?
 25404                                          jb	short not_final		; no
 25405                                  final:                                  ;
 25406                                  	mov	[es:si],al		; save backward-compatible command code
 25407                                  not_final:                              ;
 25408                                  ;endif
 25409                                  
 25410                                  %endif
 25411 00001FE7 88C4                    	mov	ah,al
 25412 00001FE9 E84707                  	call	getchr
 25413 00001FEC 7314                    	jnc	short tryi
 25414                                  
 25415 00001FEE 803E[4903]02            	cmp	byte [multi_pass_id],2
 25416                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25417                                  	; 27/10/2022
 25418 00001FF3 73B2                    	jnb	short endconv	
 25419 00001FF5 E90707                  	jmp	badop
 25420                                  	
 25421                                  coff:	
 25422                                  	; 11/12/2022
 25423                                  	; ds = cs
 25424                                  	;push	cs
 25425                                  	;pop	ds
 25426 00001FF8 E89D10                  	call	newline
 25427 00001FFB EBD6                    	jmp	short conflp	; 13/05/2019
 25428                                  
 25429                                  blank_line:
 25430 00001FFD E83307                  	call	getchr
 25431 00002000 EBD1                    	jmp	short conflp
 25432                                  
 25433                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25434                                  ; 11/12/2022
 25435                                  ; (there is not a jump or call to here from anywhere!)
 25436                                  ;coff_p:
 25437                                  	;push	cs
 25438                                  	;pop	ds
 25439                                  
 25440                                  ;to handle install= commands,we are going to use multi-pass.
 25441                                  ;the first pass handles the other commands and only set install_flag when
 25442                                  ;it finds any install command. the second pass will only handle the
 25443                                  ;install= command.
 25444                                  
 25445                                  ;------------------------------------------------------------------------------
 25446                                  ;install command
 25447                                  ;------------------------------------------------------------------------------
 25448                                  
 25449                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25450                                  	; (SYSINIT:2250h)
 25451                                  tryi:
 25452 00002002 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25453 00002007 7503                    	jne	short not_init_pass
 25454 00002009 E92301                  	jmp	multi_try_doshi
 25455                                  not_init_pass:
 25456 0000200C 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25457                                          ; 11/12/2022
 25458                                  	;je	short multi_pass_coff2	; now it is NOPs
 25459 00002011 74E5                    	je	short coff
 25460                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25461                                  	;je	short multi_pass_coff	
 25462                                  					; This pass can be made use of if
 25463                                  					; we want do some config.sys process
 25464                                  					; after device drivers are loaded
 25465                                  					; and before install= commands
 25466                                  					; are processed
 25467                                  
 25468 00002013 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25469 00002018 7411                    	je	short multi_try_i
 25470 0000201A 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25471                                  	; 11/12/2022
 25472                                  	;je	short multi_pass_coff2
 25473 0000201D 74D9                    	je	short coff
 25474                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25475                                  	;je	short multi_pass_coff	
 25476                                  
 25477                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25478                                  ;       but don't process them now.        
 25479                                          
 25480 0000201F 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25481                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25482                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25483 00002022 752A                    	jne	short tryb	
 25484                                  	
 25485                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25486 00002024 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25487                                  multi_pass_coff2:
 25488 00002029 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25489                                  
 25490                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25491                                  ;precheck_installhigh:
 25492                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25493                                  ;       jne     short tryb		; carry on with normal processing
 25494                                  ;	;or	word [install_flag],have_install_cmd
 25495                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25496                                  ;       jmp	short coff
 25497                                  
 25498                                  multi_try_i:
 25499 0000202B 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25500                                  	;jne	short multi_try_n	; no, check for installhigh
 25501                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25502 0000202E 7505                    	jne	short multi_pass_filter
 25503                                  
 25504                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25505                                  ;;ifdef	MULTI_CONFIG
 25506                                  ;       call    query_user              ; query the user if config_cmd
 25507                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25508                                  ;;endif
 25509                                  
 25510 00002030 E806F0                  	call	do_install_exec 	;install it.
 25511 00002033 EBC3                    	jmp	short coff		;to handle next install= command.
 25512                                  
 25513                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25514                                  %if 0
 25515                                  
 25516                                  multi_try_n:
 25517                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25518                                          jne	short multi_pass_filter	; no. ignore this.
 25519                                  ;ifdef	MULTI_CONFIG
 25520                                          call    query_user              ; query the user if config_cmd
 25521                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25522                                  ;endif
 25523                                  
 25524                                  ;       The memory environment is in its normal DOS state, so do
 25525                                  ;       the standard calls to set the alloc strategy for loading high
 25526                                  
 25527                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25528                                  	int	21h			;get alloc strategy
 25529                                  	mov	bx,ax
 25530                                          push    bx                      ; save for the return
 25531                                  
 25532                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25533                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25534                                  	int	21h			;set alloc strategy
 25535                                  
 25536                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25537                                          int     21h                     ; get link state
 25538                                          xor     ah,ah                   ; clear top byte
 25539                                          push    ax                      ; save for return
 25540                                  
 25541                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25542                                  	mov	bx,1
 25543                                  	int	21h			;link in UMBs
 25544                                  
 25545                                  	call	do_install_exec 	;install it.
 25546                                  
 25547                                          mov     ax,(ALLOCOPER<<8)|3
 25548                                          pop     bx                      ; recover original link state
 25549                                          int     21h
 25550                                          pop     bx                      ; recover original alloc strategy
 25551                                          mov     ax,(ALLOCOPER<<8)|1
 25552                                          int     21h
 25553                                  
 25554                                  	jmp	coff			;to handle next install= command.
 25555                                  
 25556                                  %endif
 25557                                  
 25558                                  multi_pass_filter:
 25559 00002035 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25560 00002038 740A                    	je	short multi_pass_adjust
 25561 0000203A 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25562 0000203D 7405                    	je	short multi_pass_adjust
 25563 0000203F 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25564 00002042 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25565                                  
 25566                                  multi_pass_adjust:			; these commands need to
 25567 00002044 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25568 00002048 FF06[D203]              	inc	word [count]		;  for newline proc.
 25569                                  
 25570                                  multi_pass_coff:
 25571                                  	; 11/12/2022
 25572 0000204C EBAA                    	jmp	short coff		; to handle next install= commands.
 25573                                  
 25574                                  ;------------------------------------------------------------------------------
 25575                                  ; buffer command
 25576                                  ;------------------------------------------------------------------------------
 25577                                  
 25578                                  ;******************************************************************************
 25579                                  ;									      *
 25580                                  ; function: parse the parameters of buffers= command.			      *
 25581                                  ;									      *
 25582                                  ; input :								      *
 25583                                  ;	es:si -> parameters in command line.				      *
 25584                                  ; output:								      *
 25585                                  ;	buffers set							      *
 25586                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25587                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25588                                  ;									      *
 25589                                  ; subroutines to be called:						      *
 25590                                  ;	sysinit_parse							      *
 25591                                  ; logic:								      *
 25592                                  ; {									      *
 25593                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25594                                  ;	set dx,cx to 0; 						      *
 25595                                  ;	reset buffer_slash_x;						      *
 25596                                  ;	while (end of command line)					      *
 25597                                  ;	{ sysinit_parse;						      *
 25598                                  ;	  if (no error) then						      *
 25599                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25600                                  ;		    buffer_slash_x = 1					      *
 25601                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25602                                  ;			  buffers = result_val._$P_picked_val;		      *
 25603                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25604                                  ;	  else	{show error message;error exit} 			      *
 25605                                  ;	};								      *
 25606                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25607                                  ; };									      *
 25608                                  ;									      *
 25609                                  ;******************************************************************************
 25610                                  
 25611                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25612                                  	; (SYSINIT:229Ch)
 25613                                  tryb:
 25614 0000204E 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25615 00002051 7557                    	jne	short tryc
 25616                                  
 25617                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25618                                  ;;ifdef	MULTI_CONFIG
 25619                                  ;       call    query_user              ; query the user if config_cmd
 25620                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25621                                  ;;endif
 25622                                  
 25623                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25624                                  	; 18/12/2022
 25625 00002053 31C9                    	xor	cx,cx
 25626                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25627 00002055 880E[461D]              	mov	[p_buffer_slash_x],cl ; 0
 25628                                  
 25629 00002059 BF[FF1C]                	mov	di,buf_parms
 25630                                  	;xor	cx,cx	; 18/12/2022
 25631                                  	; 04/01/2023
 25632                                  	;mov	dx,cx
 25633                                  do7:
 25634 0000205C E87D06                  	call	sysinit_parse
 25635 0000205F 7303                    	jnc	short if7		; parse error,
 25636                                  	; 04/01/2023
 25637                                  	;call	badparm_p		;  and show messages and end the search loop.
 25638                                  	;;jmp	short sr7
 25639                                  	; 31/12/2022
 25640                                  ;sr7:
 25641                                  	;jmp	coff
 25642                                  	; 04/01/2023
 25643 00002061 E9F605                  	jmp	badparm_p_coff
 25644                                  if7:
 25645 00002064 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25646 00002067 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25647                                  	;cmp	word [result_val_swoff],switch_x
 25648 00002069 813E[4A1D][3F1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25649                                  	;jne	short if11
 25650                                  	; 31/12/2022
 25651 0000206F 74EB                    	je	short do7 ;je short en11
 25652                                  
 25653                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25654                                  	;jmp	short en11 ; 31/12/2022
 25655                                  if11:
 25656                                  	;mov	ax,[rv_dword]
 25657 00002071 A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25658 00002074 83F901                  	cmp	cx,1
 25659 00002077 7505                    	jne	short if13
 25660                                  
 25661 00002079 A3[421D]                	mov	[p_buffers],ax
 25662                                  	;jmp	short en11
 25663                                  	; 31/12/2022
 25664 0000207C EBDE                    	jmp	short do7
 25665                                  if13:
 25666 0000207E A3[441D]                	mov	[p_h_buffers],ax
 25667                                  en11:
 25668 00002081 EBD9                    	jmp	short do7
 25669                                  en7:
 25670 00002083 833E[421D]63            	cmp	word [p_buffers],99
 25671 00002088 760B                    	jbe	short if18
 25672                                  
 25673                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25674                                  ;	jne	short if18
 25675                                  
 25676 0000208A E87E06                  	call	badparm_p
 25677 0000208D C706[441D]0000          	mov	word [p_h_buffers],0
 25678 00002093 EB12                    	jmp	short sr7
 25679                                  if18:
 25680 00002095 A1[421D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25681 00002098 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25682                                  
 25683 0000209B A1[441D]                	mov	ax,[p_h_buffers]
 25684 0000209E A3[9902]                	mov	[h_buffers],ax
 25685                                  
 25686                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25687                                  ;	mov	[buffer_slash_x],al
 25688                                  
 25689 000020A1 A1[2B03]                	mov	ax,[linecount]
 25690 000020A4 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25691                                  	; 31/12/2022
 25692                                  	;jmp	short sr7
 25693                                  	; 04/01/2023
 25694                                  sr7:
 25695 000020A7 E94EFF                  	jmp	coff
 25696                                  
 25697                                  ;------------------------------------------------------------------------------
 25698                                  ; break command
 25699                                  ;------------------------------------------------------------------------------
 25700                                  
 25701                                  ;****************************************************************************
 25702                                  ;									    *
 25703                                  ; function: parse the parameters of break = command.			    *
 25704                                  ;									    *
 25705                                  ; input :								    *
 25706                                  ;	es:si -> parameters in command line.				    *
 25707                                  ; output:								    *
 25708                                  ;	turn the control-c check on or off.				    *
 25709                                  ;									    *
 25710                                  ; subroutines to be called:						    *
 25711                                  ;	sysinit_parse							    *
 25712                                  ; logic:								    *
 25713                                  ; {									    *
 25714                                  ;	set di to brk_parms;						    *
 25715                                  ;	set dx,cx to 0; 						    *
 25716                                  ;	while (end of command line)					    *
 25717                                  ;	{ sysinit_parse;						    *
 25718                                  ;	  if (no error) then						    *
 25719                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25720                                  ;		   set p_ctrl_break,on;					    *
 25721                                  ;	       else					  /*off 	 */ *
 25722                                  ;		   set p_ctrl_break,off;				    *
 25723                                  ;	  else {show message;error_exit};				    *
 25724                                  ;	};								    *
 25725                                  ;	if (no error) then						    *
 25726                                  ;	   dos function call to set ctrl_break check according to	    *
 25727                                  ; };									    *
 25728                                  ;									    *
 25729                                  ;****************************************************************************
 25730                                  
 25731                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25732                                  	; (SYSINIT:22FFh)
 25733                                  tryc:
 25734 000020AA 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25735 000020AD 7534                    	jne	short trym
 25736                                  
 25737                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25738                                  ;;ifdef MULTI_CONFIG
 25739                                  ;       call    query_user              ; query the user if config_cmd
 25740                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25741                                  ;;endif
 25742 000020AF BF[501D]                	mov	di,brk_parms
 25743 000020B2 31C9                    	xor	cx,cx
 25744                                  	; 04/01/2023
 25745                                  	;mov	dx,cx
 25746                                  do22:
 25747 000020B4 E82506                  	call	sysinit_parse
 25748 000020B7 7303                    	jnc	short if22		; parse error
 25749                                  	;call	badparm_p		;  show message and end the search loop.
 25750                                  	;;jmp	short sr22
 25751                                  	; 31/12/2022
 25752                                  ;sr22:
 25753                                  	;jmp	coff
 25754                                  	; 04/01/2023
 25755 000020B9 E99E05                  	jmp	badparm_p_coff
 25756                                  if22:
 25757 000020BC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25758 000020BF 7415                    	je	short en22		; then end the $endloop
 25759                                  
 25760                                  	;cmp	byte [result_val_itag],1
 25761 000020C1 803E[491D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25762 000020C6 7507                    	jne	short if26
 25763                                  
 25764 000020C8 C606[751D]01            	mov	byte [p_ctrl_break],1	; turn it on
 25765                                  	;jmp	short en26
 25766                                  	; 31/12/2022
 25767 000020CD EBE5                    	jmp	short do22
 25768                                  if26:
 25769 000020CF C606[751D]00            	mov	byte [p_ctrl_break],0	; turn it off
 25770                                  en26:
 25771 000020D4 EBDE                    	jmp	short do22		; we actually set the ctrl break
 25772                                  en22:
 25773 000020D6 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25774 000020D8 B001                    	mov	al,1
 25775 000020DA 8A16[751D]              	mov	dl,[p_ctrl_break]
 25776 000020DE CD21                    	int	21h
 25777                                  	; 31/12/2022
 25778                                  	;jmp	short sr22
 25779                                  	; 04/01/2023
 25780                                  sr22:
 25781 000020E0 E915FF                  	jmp	coff
 25782                                  
 25783                                  ;------------------------------------------------------------------------------
 25784                                  ; multitrack command
 25785                                  ;------------------------------------------------------------------------------
 25786                                  
 25787                                  ;******************************************************************************
 25788                                  ;									      *
 25789                                  ; function: parse the parameters of multitrack= command.		      *
 25790                                  ;									      *
 25791                                  ; input :								      *
 25792                                  ;	es:si -> parameters in command line.				      *
 25793                                  ; output:								      *
 25794                                  ;	turn multrk_flag on or off.					      *
 25795                                  ;									      *
 25796                                  ; subroutines to be called:						      *
 25797                                  ;	sysinit_parse							      *
 25798                                  ; logic:								      *
 25799                                  ; {									      *
 25800                                  ;	set di to brk_parms;						      *
 25801                                  ;	set dx,cx to 0; 						      *
 25802                                  ;	while (end of command line)					      *
 25803                                  ;	{ sysinit_parse;						      *
 25804                                  ;	  if (no error) then						      *
 25805                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 25806                                  ;		   set p_mtrk,on;					      *
 25807                                  ;	       else					  /*off 	 */   *
 25808                                  ;		   set p_mtrk,off;					      *
 25809                                  ;	  else {show message;error_exit};				      *
 25810                                  ;	};								      *
 25811                                  ;	if (no error) then						      *
 25812                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 25813                                  ;									      *
 25814                                  ; };									      *
 25815                                  ;									      *
 25816                                  ;******************************************************************************
 25817                                  
 25818                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25819                                  trym:
 25820 000020E3 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 25821 000020E6 7569                    	jne	short tryu
 25822                                  
 25823                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25824                                  ;;ifdef	MULTI_CONFIG
 25825                                  ;       call    query_user      ; query the user if config_cmd
 25826                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 25827                                  ;;endif
 25828 000020E8 BF[541E]                	mov	di,mtrk_parms
 25829 000020EB 31C9                    	xor	cx,cx
 25830                                  	; 04/01/2023
 25831                                  	;mov	dx,cx
 25832                                  do31:
 25833 000020ED E8EC05                  	call	sysinit_parse
 25834 000020F0 7303                    	jnc	short if31	; parse error
 25835                                  	;call	badparm_p	;  show message and end the search loop.
 25836                                  	;;jmp	short sr31
 25837                                  	; 31/12/2022
 25838                                  ;sr31:
 25839                                  	;jmp	coff
 25840                                  	; 04/01/2023
 25841 000020F2 E96505                  	jmp	badparm_p_coff
 25842                                  if31:
 25843 000020F5 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 25844 000020F8 7415                    	je	short en31	; then end the $endloop
 25845                                  
 25846                                  	;cmp	byte [result_val_itag],1
 25847 000020FA 803E[491D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25848 000020FF 7507                    	jne	short if35
 25849                                  
 25850 00002101 C606[681E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 25851                                  	;jmp	short en35
 25852                                  	; 31/12/2022
 25853 00002106 EBE5                    	jmp	short do31
 25854                                  if35:
 25855 00002108 C606[681E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 25856                                  en35:
 25857 0000210D EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 25858                                  en31:
 25859 0000210F 1E                      	push	ds
 25860                                  	;;mov	ax,Bios_Data ; 70h
 25861                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25862                                  	; 21/10/2022
 25863 00002110 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25864 00002113 8ED8                    	mov	ds,ax
 25865                                  
 25866 00002115 2E803E[681E]00          	cmp	byte [cs:p_mtrk],0
 25867 0000211B 7508                    	jne	short if39
 25868                                  
 25869 0000211D C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 25870 00002123 EB06                    	jmp	short en39
 25871                                  if39:
 25872 00002125 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 25873                                  en39:
 25874 0000212B 1F                      	pop	ds
 25875                                  	; 31/12/2022
 25876                                  	;jmp	short sr31
 25877                                  	; 04/01/2023
 25878                                  sr31:
 25879 0000212C E9C9FE                  	jmp	coff
 25880                                  
 25881                                  ;----------------------------------------------------------------------------
 25882                                  ; DOS=HIGH/LOW command
 25883                                  ;----------------------------------------------------------------------------
 25884                                  
 25885                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25886                                  multi_try_doshi:
 25887 0000212F 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 25888 00002132 7403                    	je	short it_is_h
 25889                                  skip_it:
 25890 00002134 E9FEFE                  	jmp	multi_pass_filter
 25891                                  it_is_h:				; M003 - removed initing DevUMB
 25892                                  					;	 & runhigh
 25893                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25894                                  ;;ifdef	MULTI_CONFIG
 25895                                  ;       call    query_user              ; query the user if config_cmd
 25896                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 25897                                  ;;endif
 25898 00002137 BF[9F1E]                	mov	di,dos_parms
 25899 0000213A 31C9                    	xor	cx,cx
 25900                                  	; 04/01/2023
 25901                                  	;mov	dx,cx
 25902                                  h_do_parse:
 25903 0000213C E89D05                  	call	sysinit_parse
 25904 0000213F 7303                    	jnc	short h_parse_ok	; parse error
 25905                                  h_badparm:
 25906                                  	; 04/01/2023
 25907                                  	;call	badparm_p		; show message and end the search loop.
 25908                                  	;;jmp	short h_end
 25909                                  	; 11/12/2022
 25910                                  ;h_end:
 25911                                  	;jmp	coff
 25912                                  	; 04/01/2023
 25913 00002141 E91605                  	jmp	badparm_p_coff	
 25914                                  h_parse_ok:
 25915 00002144 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25916 00002147 7405                    	je	short h_end		; then end the $endloop
 25917 00002149 E82D06                  	call	ProcDOS
 25918 0000214C EBEE                    	jmp	short h_do_parse
 25919                                  	; 11/12/2022
 25920                                  	; 04/01/2023
 25921                                  h_end:
 25922 0000214E E9A7FE                  	jmp	coff
 25923                                  
 25924                                  ;-----------------------------------------------------------------------------
 25925                                  ; devicehigh command
 25926                                  ;-----------------------------------------------------------------------------
 25927                                  
 25928                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25929                                  tryu:
 25930 00002151 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 25931 00002154 7539                    	jne	short tryd
 25932                                  
 25933                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25934                                  ;;ifdef	MULTI_CONFIG
 25935                                  ;       call    query_user              ; query the user if config_cmd
 25936                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 25937                                  ;;endif
 25938                                  
 25939                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25940                                  ;	call	InitVar
 25941                                  ;	call	ParseSize		; process the size= option
 25942                                  ;	;jnc	short tryu_0
 25943                                  	
 25944                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 25945                                  
 25946                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25947                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 25948                                  	;mov	[cs:badparm_seg], es
 25949                                  	; 11/12/2022
 25950                                  	; ds = cs
 25951 00002156 8936[2F14]              	mov	[badparm_off], si
 25952 0000215A 8C06[3114]              	mov	[badparm_seg], es
 25953                                  	;
 25954 0000215E E88A08                  	call	ParseSize
 25955 00002161 7303                    	jnc	short tryu_2	; 28/10/2022
 25956                                  
 25957                                  	;call	badparm_p
 25958                                  	;jmp	coff
 25959                                  	; 04/01/2023
 25960 00002163 E9F404                  	jmp	badparm_p_coff
 25961                                  
 25962                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25963                                  ;tryu_0:
 25964                                  ;	mov	ax,[cs:DevSizeOption]
 25965                                  ;	or	ax,ax
 25966                                  ;	jnz	short tryu_2
 25967                                  ;
 25968                                  ;	call	ParseVar
 25969                                  ;	jnc	short tryu_2
 25970                                  ;tryu_1:
 25971                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 25972                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 25973                                  ;	call	badparm_p		; so all we have to do is choke and
 25974                                  ;	jmp	coff			; die, rather verbosely.
 25975                                  
 25976                                  tryu_2:	
 25977 00002166 56                      	push	si
 25978 00002167 06                      	push	es
 25979                                  tryu_3:
 25980 00002168 268A04                  	mov	al,[es:si]
 25981 0000216B 3C0D                    	cmp	al,cr
 25982 0000216D 740C                    	je	short tryu_4
 25983 0000216F 3C0A                    	cmp	al,lf
 25984 00002171 7408                    	je	short tryu_4
 25985 00002173 E8070F                  	call	delim
 25986 00002176 7403                    	jz	short tryu_4
 25987 00002178 46                      	inc	si
 25988 00002179 EBED                    	jmp	short tryu_3
 25989                                  tryu_4:	
 25990                                  	; 11/12/2022
 25991                                  	; ds = cs
 25992 0000217B A2[141F]                	mov	[DevSavedDelim],al
 25993                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 25994                                  					;  it with null
 25995                                  	; 18/12/2022
 25996 0000217E 29DB                    	sub	bx,bx
 25997 00002180 26881C                  	mov	[es:si],bl ; 0
 25998                                   	;mov	byte [es:si],0
 25999                                  
 26000 00002183 07                      	pop	es
 26001 00002184 5E                      	pop	si
 26002                                  
 26003                                  ;------------------------------------------------------------------------------
 26004                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26005                                  ;------------------------------------------------------------------------------
 26006                                  
 26007                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26008                                  ;
 26009                                  ;	call	UmbTest			; See if UMBs are around...
 26010                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26011                                  ;
 26012                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26013                                  ;	jmp	short LoadDevice
 26014                                  
 26015                                  ;------------------------------------------------------------------------------
 26016                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26017                                  ;------------------------------------------------------------------------------
 26018                                  
 26019                                  NrmTst:
 26020                                  	; 11/12/2022
 26021                                  	; ds = cs
 26022                                  	;;mov	byte [cs:DeviceHi],0
 26023                                  	;mov	byte [DeviceHi],0
 26024                                  	; 18/12/2022
 26025                                  	; bx = 0
 26026 00002185 381E[F01E]              	cmp	[DevUMB],bl ; 0
 26027                                  	;cmp	byte [DevUMB],0
 26028                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26029 00002189 7417                    	je	short LoadDevice	; no, we don't
 26030                                  	;mov	byte [cs:DeviceHi],1
 26031                                  	; 11/12/2022
 26032                                  	;mov	byte [DeviceHi],1
 26033                                  	; 18/12/2022
 26034 0000218B FEC3                    	inc	bl ; mov bl,1 ; (*)
 26035                                  	; 11/12/2022
 26036                                  	;jmp	short LoadDevice2	; 11/12/2022
 26037 0000218D EB13                    	jmp	short LoadDevice
 26038                                  
 26039                                  ;------------------------------------------------------------------------------
 26040                                  ; device command
 26041                                  ;------------------------------------------------------------------------------
 26042                                  
 26043                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26044                                  	; (SYSINIT:2401h)
 26045                                  tryd:
 26046                                  	; 11/12/2022
 26047 0000218F 31DB                    	xor 	bx, bx
 26048                                  	;
 26049 00002191 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26050 00002194 7403                    	je	short gotd
 26051                                  skip_it2:
 26052 00002196 E93502                  	jmp	tryq
 26053                                  gotd:
 26054                                  
 26055                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26056                                  ;;ifdef	MULTI_CONFIG
 26057                                  ;       call    query_user              ; query the user if config_cmd
 26058                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26059                                  ;;endif
 26060                                  	; 11/12/2022
 26061                                  	; ds = cs
 26062                                  	;mov	byte [DeviceHi],0
 26063                                  	;mov	word [DevSizeOption],0
 26064 00002199 891E[001F]              	mov	[DevSizeOption],bx ; 0
 26065 0000219D C606[141F]20            	mov	byte [DevSavedDelim],' '
 26066                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26067                                  	;mov	word [cs:DevSizeOption],0
 26068                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26069                                  					;  be replaced with a ' '
 26070                                  LoadDevice:                             ; device= or devicehigh= command.
 26071                                  	; 11/12/2022
 26072                                  	;mov	byte [DeviceHi],0
 26073 000021A2 881E[FF1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26074                                  LoadDevice2:
 26075                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26076                                  	;
 26077                                  	;push    cs
 26078                                          ;pop     ds
 26079                                  	;
 26080                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26081                                  	;mov	[bpb_addr+2],es
 26082                                  	;
 26083                                  	;mov	[DevCmdLine],si		; save it for ourself
 26084                                  	;mov	[DevCmdLine+2],es
 26085                                  	;
 26086                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26087                                  
 26088                                  	; 11/12/2022
 26089                                  	; ds = cs
 26090                                  	;mov	bx,cs
 26091                                  	;mov	ds,bx
 26092                                  
 26093                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26094 000021A6 8936[F803]              	mov	[bpb_addr],si
 26095                                  	;mov	[cs:bpb_addr+2],es
 26096 000021AA 8C06[FA03]              	mov	[bpb_addr+2],es
 26097                                  
 26098                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26099 000021AE 8936[101F]              	mov	[DevCmdLine],si
 26100                                  	;mov	[cs:DevCmdLine+2],es	
 26101 000021B2 8C06[121F]              	mov	[DevCmdLine+2],es	
 26102                                  
 26103 000021B6 E8070F                  	call	round
 26104                                  	
 26105 000021B9 E83F07                  	call	SizeDevice
 26106 000021BC 7215                    	jc	short BadFile
 26107                                  
 26108                                  	; 11/12/2022
 26109                                  	; ds = cs
 26110                                  
 26111                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26112                                  
 26113                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26114                                  ;
 26115                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26116                                  ;
 26117                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26118                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26119                                  ;	jz	short DevConvLoad	; the actual load.
 26120                                  ;
 26121                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26122                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26123                                  ;
 26124                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26125                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26126                                  ;
 26127                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26128                                  ;
 26129                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26130                                  ;	or	ax,ax
 26131                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26132                                  ;
 26133                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26134                                  ;	jge	short DevConvLoad
 26135                                  ;
 26136                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26137                                  ;	call	StoLoadSize		; minsize for load UMB.
 26138                                  
 26139                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26140                                  
 26141                                  DevConvLoad:
 26142                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26143 000021BE E84F06                  	call	InitDevLoad
 26144                                  
 26145                                  	; 11/12/2022
 26146                                  	; ds = cs
 26147 000021C1 A1[E41E]                	mov	ax,[DevLoadAddr]
 26148 000021C4 0306[E21E]              	add	ax,[DevSize]
 26149 000021C8 7206                    	jc	short NoMem
 26150 000021CA 3906[E61E]              	cmp	[DevLoadEnd],ax
 26151 000021CE 7312                    	jae	short LoadDev
 26152                                  	
 26153                                  	; 11/12/2022
 26154                                  	;mov	ax,[cs:DevLoadAddr]
 26155                                  	;add	ax,[cs:DevSize]
 26156                                  	;jc	short NoMem
 26157                                  	;cmp	[cs:DevLoadEnd],ax
 26158                                  	;jae	short LoadDev
 26159                                  NoMem:
 26160                                  	; 11/12/2022
 26161                                  	; ds = cs
 26162                                  	;jmp	mem_err
 26163 000021D0 E9300F                  	jmp	mem_err2
 26164                                  
 26165                                  BadFile:
 26166                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26167                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26168                                  	;cmp    byte [es:si],' '
 26169                                          ;jae	short tryd_2
 26170 000021D3 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26171 000021D7 7503                            jne	short tryd_2
 26172 000021D9 E92305                  	jmp	badop
 26173                                  tryd_2:
 26174 000021DC E87811                  	call	badload
 26175 000021DF E916FE                  	jmp	coff
 26176                                  
 26177                                  LoadDev:
 26178 000021E2 06                      	push	es
 26179 000021E3 1F                      	pop	ds
 26180                                  
 26181 000021E4 89F2                    	mov	dx,si			;ds:dx points to file name
 26182 000021E6 E86307                  	call	ExecDev			; load device driver using exec call
 26183                                  badldreset:
 26184 000021E9 1E                      	push	ds
 26185 000021EA 07                      	pop	es			;es:si back to config.sys
 26186 000021EB 0E                      	push	cs
 26187 000021EC 1F                      	pop	ds			;ds back to sysinit
 26188 000021ED 72E4                    	jc	short BadFile
 26189                                  goodld:
 26190                                  	; 11/12/2022
 26191                                  	; ds = cs
 26192                                  
 26193 000021EF 06                      	push	es
 26194 000021F0 56                      	push	si
 26195 000021F1 E87507                  	call	RemoveNull
 26196 000021F4 06                      	push	es
 26197 000021F5 56                      	push	si
 26198                                  
 26199 000021F6 0E                      	push	cs
 26200 000021F7 07                      	pop	es
 26201                                  
 26202 000021F8 1E                      	push	ds
 26203 000021F9 56                      	push	si
 26204                                  
 26205                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26206                                  	; 31/12/2022
 26207                                  	; ds = cs
 26208 000021FA C536[E81E]              	lds	si,[DevEntry]
 26209                                  	
 26210                                  	;test	word [si+4],8000h
 26211                                  	; 11/12/2022
 26212 000021FE F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26213                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26214 00002202 7511                    	jnz	short got_device_com_cont   ; no.
 26215                                  
 26216 00002204 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26217                                  	;cmp	byte [si+32],26
 26218 00002209 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26219 0000220D 7206                    	jb	short got_device_com_cont
 26220                                  
 26221 0000220F 5E                      	pop	si
 26222 00002210 1F                      	pop	ds
 26223                                  
 26224 00002211 5E                      	pop	si			; clear the stack
 26225 00002212 07                      	pop	es
 26226                                  
 26227                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26228                                  	;call	RetFromUM		; Do this before we leave
 26229                                  
 26230 00002213 EB57                    	jmp	short badnumblock
 26231                                  
 26232                                  got_device_com_cont:
 26233 00002215 5E                      	pop	si
 26234 00002216 1F                      	pop	ds
 26235                                  
 26236                                  	; 11/12/2022
 26237                                  	; ds = cs
 26238                                  
 26239 00002217 E88205                  	call	LieInt12Mem
 26240 0000221A E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26241                                  
 26242                                  	; 11/12/2022
 26243                                  	; ds = cs
 26244 0000221D 803E[2B14]00            	cmp	byte [multdeviceflag],0
 26245                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26246                                  					;  driver in the file ; M027
 26247 00002222 750E                    	jne	short skip_pass_limit	;		      ; M027
 26248                                  
 26249                                  	; 11/12/2022
 26250                                  	; ds = cs
 26251                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26252                                  	;mov	bx,[cs:DevLoadEnd]
 26253                                  	;mov	[cs:break_addr+2],bx
 26254                                  
 26255 00002224 C706[F403]0000          	mov	word [break_addr],0
 26256 0000222A 8B1E[E61E]              	mov	bx,[DevLoadEnd]
 26257 0000222E 891E[F603]              	mov	[break_addr+2],bx
 26258                                  
 26259                                  skip_pass_limit:
 26260                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26261                                  ;	number of installed devices (including DblSpace drives) where
 26262                                  ;	"drivenumber" is the number that the next block device will
 26263                                  ;	be assigned to. Because some naughty device drivers (like
 26264                                  ;	interlnk) look at the internal DOS variable instead of the
 26265                                  ;	value we pass it, we'll temporarily stick our value into
 26266                                  ;	DOS DATA while we're initializing the device drivers.
 26267                                  ;
 26268                                  ;	Note that this will make it impossible for this device
 26269                                  ;	driver to access the DblSpace drive letters, whether
 26270                                  ;	they are swapped-hosts or unswapped compressed drives,
 26271                                  ;	during its initialization phase.
 26272                                  
 26273                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26274                                  	;push	ds
 26275                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26276                                  	;
 26277                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26278                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26279                                  	;mov	ah,al
 26280                                  	;
 26281                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26282                                  	;pop	ds
 26283                                  	;
 26284                                  	;push	ax			; save real sysi_numio/ncds in ax
 26285                                  
 26286                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26287                                  	; (SYSINIT:24B9h)
 26288                                  
 26289 00002232 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26290 00002235 E8D40E                  	call	calldev 		; calldev (sdevstrat);
 26291 00002238 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26292 0000223B E8CE0E                  	call	calldev 		; calldev (sdevint);
 26293                                  
 26294                                  	; 11/12/2022
 26295                                  	; ds <> cs
 26296                                  
 26297                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26298                                  	;pop	ax			; get real sysi_numio value
 26299                                  	;push	ds
 26300                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26301                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26302                                  	;pop	ds
 26303                                  
 26304                                  	; 11/12/2022
 26305 0000223E 0E                      	push	cs
 26306 0000223F 1F                      	pop	ds
 26307                                  
 26308 00002240 E88905                  	call	TrueInt12Mem
 26309                                  
 26310                                  	; 11/12/2022
 26311                                  	; ds = cs
 26312                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26313                                  	;mov	[cs:DevBrkAddr],ax
 26314                                  	;mov	ax,[cs:break_addr+2]
 26315                                  	;mov	[cs:DevBrkAddr+2],ax
 26316 00002243 A1[F403]                	mov	ax,[break_addr]	
 26317 00002246 A3[EC1E]                	mov	[DevBrkAddr],ax
 26318 00002249 A1[F603]                	mov	ax,[break_addr+2]
 26319 0000224C A3[EE1E]                	mov	[DevBrkAddr+2],ax
 26320                                  
 26321                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26322                                  	;call	RetFromUM		; There we go... all done.
 26323                                  
 26324                                  	; 11/12/2022
 26325 0000224F 803E[F01E]00            	cmp	byte [DevUMB],0	
 26326                                  	;cmp	byte [cs:DevUMB],0
 26327 00002254 7403                    	je	short tryd_3
 26328 00002256 E83608                  	call	AllocUMB
 26329                                  	; 31/12/2022
 26330                                  	; ds= cs
 26331                                  tryd_3:
 26332                                  
 26333                                  ;ifndef ROMDOS
 26334                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26335                                  
 26336                                  	; 11/12/2022
 26337                                  	; ds = cs
 26338                                  	
 26339                                  	;cmp	byte [cs:runhigh],0FFh
 26340 00002259 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26341 0000225E 7503                    	jne	short tryd_4
 26342                                  	
 26343                                  	; 11/12/2022
 26344                                  	; ds = cs
 26345 00002260 E873E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26346                                  tryd_4:
 26347                                  ;endif ; ROMDOS
 26348                                  
 26349 00002263 5E                      	pop	si
 26350 00002264 1F                      	pop	ds
 26351 00002265 C60400                  	mov	byte [si],0		; *p = 0;
 26352                                  
 26353 00002268 0E                      	push	cs
 26354 00002269 1F                      	pop	ds
 26355                                  
 26356 0000226A EB1F                    	jmp	short was_device_com
 26357                                  
 26358                                  ;----------------------------------------------------------------------------
 26359                                  
 26360                                  ;02/04/2019 - Retro DOS v4.0
 26361                                  
 26362                                  badnumblock:
 26363 0000226C 0E                      	push	cs
 26364 0000226D 1F                      	pop	ds
 26365 0000226E BA[5038]                	mov	dx,badblock
 26366 00002271 E80B11                  	call	print
 26367                                  
 26368                                  ;------ fall thru -----------------------------------------------------------
 26369                                  
 26370                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26371                                  	
 26372                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26373                                  	
 26374 00002274 5E                      	pop	si
 26375 00002275 07                      	pop	es
 26376                                  
 26377 00002276 0E                      	push	cs
 26378 00002277 1F                      	pop	ds
 26379                                  
 26380                                  skip1_resetmemhi:
 26381                                  	; 11/12/2022
 26382                                  	; ds = cs
 26383 00002278 833E[FD03]00            	cmp	word [configmsgflag],0
 26384                                  	;cmp	word [cs:configmsgflag],0
 26385 0000227D 7409                    	je	short no_error_line_msg
 26386                                  
 26387 0000227F E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26388                                  	; 11/12/2022
 26389                                  	; ds = cs
 26390                                  	;mov	word [cs:configmsgflag],0
 26391 00002282 C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26392                                  
 26393                                  no_error_line_msg:
 26394 00002288 E96DFD                  	jmp	coff
 26395                                  
 26396                                  ;----------------------------------------------------------------------------
 26397                                  
 26398                                  was_device_com:
 26399                                  	; 14/12/2022
 26400                                  	; ds = cs
 26401 0000228B A1[EE1E]                	mov	ax,[DevBrkAddr+2]
 26402                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26403 0000228E 3B06[E61E]              	cmp	ax,[DevLoadEnd]
 26404                                  	;cmp	ax,[cs:DevLoadEnd]
 26405 00002292 7605                    	jbe	short breakok
 26406                                  
 26407 00002294 5E                      	pop	si
 26408 00002295 07                      	pop	es
 26409 00002296 E93AFF                  	jmp	BadFile
 26410                                  
 26411                                  breakok:
 26412                                  	; 14/12/2022
 26413                                  	; ds = cs
 26414 00002299 C43E[6B02]              	les	di,[DOSINFO] 
 26415 0000229D C516[E81E]              	lds	dx,[DevEntry]
 26416                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26417 000022A1 89D6                    	mov	si,dx
 26418                                  
 26419                                  	; 14/11/2022
 26420                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26421                                  
 26422                                  	; 14/12/2022
 26423                                  	; ds <> cs
 26424                                  	
 26425                                  	;mov	ax,[si+4]
 26426 000022A3 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26427                                  	; 12/12/2022
 26428 000022A6 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26429                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26430 000022A9 7426                    	jz	short isblock
 26431                                  
 26432                                  ;------ lets deal with character devices
 26433                                  
 26434 000022AB 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26435 000022B1 E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26436                                  jc_edd:
 26437 000022B4 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26438                                  
 26439                                  	; 12/12/2022
 26440 000022B6 A801                    	test	al,ISCIN
 26441                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26442 000022B8 7408                    	jz	short tryclk
 26443                                  
 26444 000022BA 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26445 000022BE 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26446                                  tryclk: 
 26447                                  	; 12/12/2022
 26448 000022C2 A808                    	test	al,ISCLOCK
 26449                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26450 000022C4 7408                    	jz	short golink
 26451                                  
 26452 000022C6 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26453 000022CA 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26454                                  golink: 
 26455 000022CE E9B000                  	jmp	linkit
 26456                                  
 26457                                  ;------ deal with block device drivers
 26458                                  
 26459                                  isblock:
 26460 000022D1 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26461 000022D5 08C0                    	or	al,al
 26462 000022D7 749B                    	jz	short erase_dev_do
 26463                                  	;mov	[si+10],al
 26464 000022D9 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26465                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26466                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26467                                  perdrv:
 26468 000022DC 98                      	cbw				; warning no device > 127 units
 26469 000022DD 89C1                    	mov	cx,ax
 26470 000022DF 88E6                    	mov	dh,ah
 26471                                  	;mov	dl,[es:di+32]
 26472 000022E1 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26473 000022E5 88D4                    	mov	ah,dl
 26474 000022E7 00C4                    	add	ah,al			; check for too many devices
 26475 000022E9 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26476 000022EC 7603                    	jbe	short ok_block
 26477 000022EE E97BFF                  	jmp	badnumblock
 26478                                  
 26479                                  ok_block:
 26480 000022F1 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26481 000022F7 E8A206                  	call	DevSetBreak		; alloc the device
 26482 000022FA 72B8                    	jc	short jc_edd
 26483 000022FC 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26484                                  
 26485 00002300 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26486 00002305 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26487                                  perunit:
 26488 0000230A 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26489                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26490                                  	; 11/12/2022
 26491 0000230F 26C46E00                	les	bp,[es:bp]
 26492                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26493                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26494                                  scandpb:
 26495                                  	;cmp	word [es:bp+25],-1
 26496 00002313 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26497 00002318 7406                    	je	short foundpb
 26498                                  	;les	bp,[es:bp+25]
 26499 0000231A 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26500 0000231E EBF3                    	jmp	short scandpb
 26501                                  foundpb:
 26502 00002320 2EA1[EC1E]              	mov	ax,[cs:DevBrkAddr]
 26503 00002324 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26504 00002328 2EA1[EE1E]              	mov	ax,[cs:DevBrkAddr+2]
 26505 0000232C 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26506                                  
 26507 00002330 2EC42E[EC1E]            	les	bp,[cs:DevBrkAddr]
 26508 00002335 2E8306[EC1E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26509                                  
 26510 0000233B E83D06                  	call	RoundBreakAddr
 26511                                  
 26512 0000233E 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26513 00002344 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26514                                  
 26515 00002349 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26516 0000234B 43                      	inc	bx
 26517 0000234C 43                      	inc	bx			;point to next guy
 26518                                  	;mov	[es:bp+DPB.DRIVE],dx
 26519                                  	; 11/12/2022
 26520 0000234D 26895600                	mov	[es:bp],dx ; 13/05/2019
 26521                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26522                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26523                                  	
 26524 00002351 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26525 00002353 CD21                    	int	21h
 26526                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26527                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26528                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26529                                  
 26530                                  	;mov	ax,[es:bp+2]
 26531 00002355 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26532 00002359 06                      	push	es
 26533 0000235A 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26534                                  	;cmp	ax,[es:di+10h]
 26535 0000235F 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26536 00002363 07                      	pop	es
 26537                                  	;jna	short iblk_1
 26538                                  	;jmp	short bad_bpb_size_sector
 26539                                  	; 29/10/2022
 26540 00002364 775A                    	ja	short bad_bpb_size_sector
 26541                                  iblk_1:
 26542 00002366 1E                      	push	ds
 26543 00002367 52                      	push	dx
 26544                                  
 26545 00002368 2EC516[E81E]            	lds	dx,[cs:DevEntry]
 26546                                  	;mov	[es:bp+13h],dx
 26547 0000236D 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26548                                  	;mov	[es:bp+15h],ds
 26549 00002371 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26550                                  
 26551 00002375 5A                      	pop	dx
 26552 00002376 1F                      	pop	ds
 26553                                  
 26554 00002377 42                      	inc	dx
 26555 00002378 FEC6                    	inc	dh
 26556 0000237A E28E                    	loop	perunit
 26557                                  
 26558 0000237C 0E                      	push	cs
 26559 0000237D 1F                      	pop	ds
 26560                                  
 26561 0000237E E84EE8                  	call	TempCDS 		; set cds for new drives
 26562                                  linkit:
 26563 00002381 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26564 00002386 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26565 0000238A 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26566                                  
 26567 0000238E 2EC536[E81E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26568 00002393 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26569 00002397 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26570 0000239B 8B04                    	mov	ax,[si]			;get pointer to next device
 26571 0000239D 2EA3[E81E]              	mov	[cs:DevEntry],ax	;and save it
 26572                                  
 26573 000023A1 890C                    	mov	[si],cx			;link in the driver
 26574 000023A3 895402                  	mov	[si+2],dx
 26575                                  enddev:
 26576 000023A6 5E                      	pop	si
 26577 000023A7 07                      	pop	es
 26578 000023A8 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26579 000023A9 740B                    	jz	short coffj3
 26580                                  
 26581 000023AB 2EFE06[2B14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26582 000023B0 E80B06                  	call	DevBreak		; M009
 26583                                  	; 11/12/2022
 26584                                  	; ds = cs (DevBreak)
 26585                                  
 26586                                  	; 03/04/2019 - Retro DOS v4.0
 26587                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26588 000023B3 E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26589                                  coffj3: 
 26590                                  	; 18/12/2022
 26591                                  	; ax = 0
 26592 000023B6 2EA2[2B14]              	mov	[cs:multdeviceflag],al ; 0
 26593                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26594 000023BA E80106                  	call	DevBreak
 26595                                  	; 11/12/2022
 26596                                  	; ds = cs (DevBreak)
 26597                                  	
 26598                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26599                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26600                                  ;					;  created a bogus arena to try
 26601                                  ;					;  to protect some of its resident-
 26602                                  ;					;  init code.
 26603                                  	;call	CheckDoubleSpace
 26604 000023BD E938FC                  	jmp	coff
 26605                                  
 26606                                  ;----------------------------------------------------------------------------
 26607                                  
 26608                                  ;CheckDoubleSpace:
 26609                                  ;;;;	ifdef	dblspace_hooks
 26610                                  ;
 26611                                  ;;	Now check for two special MagicDrv cases:
 26612                                  ;;
 26613                                  ;;       a) the last driver load was MagicDrv final placement:
 26614                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26615                                  ;;
 26616                                  ;;       b) MagicDrv is currently in temporary home:
 26617                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26618                                  ;
 26619                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26620                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26621                                  ;
 26622                                  ;;	Now inquire of driver whether it is present, and final located
 26623                                  ;
 26624                                  ;	mov	ax,multMagicdrv ; 4A11h
 26625                                  ;	mov	bx,MD_VERSION ; 0
 26626                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26627                                  ;	or	ax,ax			; is it there?
 26628                                  ;	jnz	short no_more_magic_calls ; done if not
 26629                                  ;
 26630                                  ;	test	dx,8000h		; is it final placed?
 26631                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26632                                  ;
 26633                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26634                                  ;;	don't keep checking it, and add its number of drive letters
 26635                                  ;;	to drivenumber.
 26636                                  ;
 26637                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26638                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26639                                  ;;					;  the drive number we'll pass to the
 26640                                  ;;					;  next loadable block device.
 26641                                  ;
 26642                                  ;	jmp	short no_more_magic_calls ; and finished.
 26643                                  ;
 26644                                  ;magic_not_yet_home:
 26645                                  ;	push	es
 26646                                  ;	push	si
 26647                                  ;
 26648                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26649                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26650                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26651                                  ;
 26652                                  ;	mov	bx,2
 26653                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26654                                  ;;					;   by this many units
 26655                                  ;
 26656                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26657                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26658                                  ;;					;  sees this, to prevent bad things
 26659                                  ;;					;  from happening if people run the
 26660                                  ;;					;  new driver with an old BIOS
 26661                                  ;	call	far [cs:MagicBackdoor]
 26662                                  ;
 26663                                  ;	pop	si
 26664                                  ;	pop	es
 26665                                  ;
 26666                                  ;no_more_magic_calls:
 26667                                  ;
 26668                                  ;;;;	endif
 26669                                  ;	retn
 26670                                  
 26671                                  ; 03/04/2019 - Retro DOS v4.0
 26672                                  
 26673                                  bad_bpb_size_sector:
 26674 000023C0 5E                      	pop	si
 26675 000023C1 07                      	pop	es
 26676 000023C2 BA[7237]                	mov	dx,badsiz_pre
 26677 000023C5 BB[5037]                	mov	bx,crlfm
 26678 000023C8 E8920F                  	call	prnerr
 26679                                  
 26680 000023CB E92AFC                  	jmp	coff
 26681                                  
 26682                                  ;------------------------------------------------------------------------------
 26683                                  ; country command
 26684                                  ;      the syntax is:
 26685                                  ;	country=country id {,codepage {,path}}
 26686                                  ;	country=country id {,,path}	:default codepage id in dos
 26687                                  ;------------------------------------------------------------------------------
 26688                                  
 26689                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26690                                  	; (SYSINIT:2663h)
 26691                                  tryq:
 26692 000023CE 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26693 000023D1 7403                    	je	short tryq_cont
 26694                                  skip_it3:
 26695 000023D3 E90801                  	jmp	tryf
 26696                                  tryq_cont:
 26697                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26698                                  ;;ifdef	MULTI_CONFIG
 26699                                  ;       call    query_user		; query the user if config_cmd
 26700                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26701                                  ;;endif
 26702                                  	; 14/12/2022
 26703                                  	; ds = cs
 26704                                  	; bx = 0
 26705                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26706                                  	;mov	word [cs:p_code_page],0
 26707 000023D6 881E[0834]              	mov	[cntry_drv],bl ; 0
 26708 000023DA 891E[AD1D]              	mov	[p_code_page],bx ; 0
 26709                                  	
 26710 000023DE BF[761D]                	mov	di,cntry_parms
 26711 000023E1 31C9                    	xor	cx,cx
 26712                                  	; 04/01/2023
 26713                                  	;mov	dx,cx
 26714                                  do52:
 26715 000023E3 E8F602                  	call	sysinit_parse
 26716 000023E6 730B                    	jnc	short if52		; parse error,check error code and
 26717                                  
 26718 000023E8 E8E000                  	call	cntry_error		; show message and end the search loop.
 26719                                  	; 14/12/2022
 26720                                  	; ds = cs
 26721 000023EB C706[AB1D]FFFF          	mov	word [p_cntry_code],-1
 26722                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26723 000023F1 EB34                    	jmp	short sr52
 26724                                  if52:
 26725 000023F3 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26726 000023F6 742F                    	jz	short sr52		; then end the search loop
 26727                                  
 26728                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26729                                  	; 14/12/2022
 26730                                  	; ds = cs
 26731 000023F8 803E[481D]01            	cmp	byte [result_val],_$P_Number	
 26732                                  	;cmp	byte [cs:result_val],_$P_Number
 26733 000023FD 7512                    	jnz	short if56
 26734                                  
 26735                                  	;;mov	ax,[cs:rw_dword]
 26736                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26737                                  	; 14/12/2022
 26738 000023FF A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26739 00002402 83F901                  	cmp	cx,1
 26740 00002405 7505                    	jne	short if57
 26741                                  
 26742                                  	;mov	[cs:p_cntry_code],ax
 26743                                  	; 14/12/2022
 26744 00002407 A3[AB1D]                	mov	[p_cntry_code],ax
 26745                                  
 26746                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26747                                  	;jmp	short en57
 26748                                  	; 12/12/2022
 26749                                  	;jmp	short en56
 26750 0000240A EBD7                    	jmp	short do52
 26751                                  
 26752                                  if57:
 26753                                  	;mov	[cs:p_code_page],ax
 26754                                  	; 14/12/2022
 26755                                  	; ds = cs
 26756 0000240C A3[AD1D]                	mov	[p_code_page],ax
 26757                                  en57:
 26758                                  	;jmp	short en56		; path entered
 26759                                  	; 12/12/2022
 26760 0000240F EBD2                    	jmp	short do52
 26761                                  
 26762                                  if56:
 26763 00002411 1E                      	push	ds
 26764 00002412 06                      	push	es
 26765 00002413 56                      	push	si
 26766 00002414 57                      	push	di
 26767                                  
 26768 00002415 0E                      	push	cs
 26769 00002416 07                      	pop	es
 26770                                  
 26771                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 26772                                  	; 14/12/2022
 26773 00002417 C536[4C1D]              	lds	si,[rv_dword]
 26774 0000241B BF[0834]                	mov	di,cntry_drv
 26775 0000241E E82A0F                  	call	move_asciiz
 26776                                  
 26777 00002421 5F                      	pop	di
 26778 00002422 5E                      	pop	si
 26779 00002423 07                      	pop	es
 26780 00002424 1F                      	pop	ds
 26781                                  
 26782                                  en56:
 26783 00002425 EBBC                    	jmp	short do52
 26784                                  
 26785                                  sr52:
 26786                                  	; 14/12/2022
 26787                                  	; ds = cs
 26788 00002427 833E[AB1D]FF            	cmp	word [p_cntry_code],-1
 26789                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 26790 0000242C 7509                    	jne	short tryq_open
 26791 0000242E E9C7FB                  	jmp	coff
 26792                                  
 26793                                  tryqbad:				;"invalid country code or code page"
 26794 00002431 F9                      	stc
 26795 00002432 BA[B937]                	mov     dx,badcountry
 26796 00002435 EB79                    	jmp     tryqchkerr
 26797                                  
 26798                                  tryq_open:
 26799                                  	; 14/12/2022
 26800                                  	; ds = cs
 26801 00002437 803E[0834]00            	cmp	byte [cntry_drv],0
 26802                                  	;cmp	byte [cs:cntry_drv],0
 26803 0000243C 7405                    	je	short tryq_def
 26804 0000243E BA[0834]                	mov	dx,cntry_drv
 26805 00002441 EB03                    	jmp	short tryq_openit
 26806                                  
 26807                                  tryq_def:
 26808 00002443 BA[0A34]                	mov	dx,cntry_root
 26809                                  tryq_openit:
 26810 00002446 B8003D                  	mov	ax,3D00h		;open a file
 26811 00002449 F9                      	stc
 26812 0000244A CD21                    	int	21h
 26813 0000244C 7242                    	jc	short tryqfilebad	;open failure
 26814                                  
 26815                                  	; 14/12/2022
 26816                                  	; ds = cs
 26817 0000244E A3[D803]                	mov	[cntryfilehandle],ax
 26818                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 26819 00002451 89C3                    	mov	bx,ax
 26820 00002453 A1[AB1D]                	mov	ax,[p_cntry_code]
 26821 00002456 8B16[AD1D]              	mov	dx,[p_code_page]
 26822                                  	;mov	ax,[cs:p_cntry_code]
 26823                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 26824                                  	;mov	cx,[cs:memhi]
 26825 0000245A 8B0E[E003]              	mov	cx,[memhi]
 26826 0000245E 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 26827                                  					; M023
 26828                                  	; 14/12/2022
 26829                                  	; ds = cs
 26830 00002462 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 26831                                  	;cmp	cx,[cs:ALLOCLIM]
 26832 00002466 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 26833                                  
 26834 00002468 BE[0834]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 26835 0000246B 803C00                  	cmp	byte [si],0 		;default path?
 26836 0000246E 7502                    	jne	short tryq_set_for_dos
 26837                                  
 26838 00002470 46                      	inc	si
 26839 00002471 46                      	inc	si			;ds:si -> cntry_root
 26840                                  
 26841                                  tryq_set_for_dos:
 26842                                  	; 14/12/2022
 26843                                  	; ds = cs
 26844 00002472 C43E[7702]              	les	di,[sysi_country]
 26845                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 26846 00002476 57                      	push	di			;save di
 26847                                  	;add	di,8
 26848 00002477 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 26849 0000247A E8CE0E                  	call	move_asciiz		;set the path to country.sys in dos.
 26850 0000247D 5F                      	pop	di			;es:di -> country info tab again.
 26851                                  
 26852                                  	; 14/12/2022	
 26853 0000247E 8B0E[E003]              	mov	cx,[memhi]
 26854                                  	;mov	cx,[cs:memhi]
 26855 00002482 8ED9                    	mov	ds,cx
 26856 00002484 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 26857 00002486 E8060D                  	call	setdoscountryinfo	;now do the job!!!
 26858                                  	; ds <> cs ; 14/12/2022
 26859 00002489 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 26860                                  
 26861 0000248B 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 26862 0000248E 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 26863                                  
 26864                                  tryqfilebad:
 26865 00002490 0E                      	push	cs
 26866 00002491 07                      	pop	es
 26867 00002492 2E803E[0834]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 26868 00002498 7405                    	je	short tryqdefbad
 26869                                  
 26870 0000249A BE[0834]                	mov	si,cntry_drv
 26871 0000249D EB03                    	jmp	short tryqbadload
 26872                                  
 26873                                  tryqdefbad:				;default file has been used.
 26874 0000249F BE[0A34]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 26875                                  tryqbadload:
 26876 000024A2 E8B20E                  	call	badload 		;ds will be restored to sysinit_seg
 26877                                  	;mov	cx,[cs:CONFBOT]
 26878                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26879                                  	;mov	cx,[cs:top_of_cdss]
 26880                                  	; 11/12/2022
 26881                                  	; ds = cs
 26882 000024A5 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 26883 000024A9 8EC1                    	mov	es,cx			;restore es -> confbot.
 26884 000024AB EB13                    	jmp	short coffj4
 26885                                  
 26886                                  tryqmemory:
 26887 000024AD BA[FC37]                	mov	dx,insufmemory
 26888                                  tryqchkerr:
 26889                                  	;mov	cx,[cs:CONFBOT]
 26890                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26891                                  	;mov	cx,[cs:top_of_cdss]
 26892                                  	; 12/12/2022
 26893 000024B0 0E                      	push	cs
 26894 000024B1 1F                      	pop	ds
 26895 000024B2 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 26896 000024B6 8EC1                    	mov	es,cx			;restore es -> confbot seg
 26897                                  	;push	cs
 26898                                  	;pop	ds			;restore ds to sysinit_seg
 26899 000024B8 7306                    	jnc	short coffj4		;if no error,then exit
 26900                                  
 26901 000024BA E8C20E                  	call	print			;else show error message
 26902 000024BD E88A02                  	call	error_line
 26903                                  coffj4:
 26904                                  	;mov	bx,[cs:cntryfilehandle]
 26905                                  	; 11/12/2022
 26906                                  	; ds = cs
 26907 000024C0 8B1E[D803]              	mov	bx,[cntryfilehandle]
 26908 000024C4 B43E                    	mov	ah,3Eh
 26909 000024C6 CD21                    	int	21h			;close a file. don't care even if it fails.
 26910 000024C8 E92DFB                  	jmp	coff
 26911                                  
 26912                                  ;--------------------------------------------
 26913                                  
 26914                                  cntry_error:
 26915                                  
 26916                                  ;function: show "invalid country code or code page" messages,or
 26917                                  ;		"error in country command" depending on the error code
 26918                                  ;		in ax returned by sysparse;
 26919                                  ;in:	ax - error code
 26920                                  ;	ds - sysinitseg
 26921                                  ;	es - confbot
 26922                                  ;out:	show message.  dx destroyed.
 26923                                  
 26924 000024CB 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 26925 000024CE 7505                    	jne	short if64
 26926 000024D0 BA[B937]                	mov	dx,badcountry		;"invalid country code or code page"
 26927 000024D3 EB03                    	jmp	short en64
 26928                                  if64:
 26929 000024D5 BA[DF37]                	mov	dx,badcountrycom	;"error in contry command"
 26930                                  en64:
 26931 000024D8 E8A40E                  	call	print
 26932                                  	;call	error_line
 26933                                  	;retn
 26934                                  	; 11/12/2022
 26935 000024DB E96C02                  	jmp	error_line
 26936                                  
 26937                                  ;------------------------------------------------------------------------------
 26938                                  ; files command
 26939                                  ;------------------------------------------------------------------------------
 26940                                  
 26941                                  ;******************************************************************************
 26942                                  ; function: parse the parameters of files= command.			      *
 26943                                  ;									      *
 26944                                  ; input :								      *
 26945                                  ;	es:si -> parameters in command line.				      *
 26946                                  ; output:								      *
 26947                                  ;	variable files set.						      *
 26948                                  ;									      *
 26949                                  ; subroutines to be called:						      *
 26950                                  ;	sysinit_parse							      *
 26951                                  ; logic:								      *
 26952                                  ; {									      *
 26953                                  ;	set di points to files_parms;					      *
 26954                                  ;	set dx,cx to 0; 						      *
 26955                                  ;	while (end of command line)					      *
 26956                                  ;	{ sysinit_parse;						      *
 26957                                  ;	  if (no error) then						      *
 26958                                  ;	     files = result_val._$P_picked_val				      *
 26959                                  ;	  else								      *
 26960                                  ;	     error exit;						      *
 26961                                  ;	};								      *
 26962                                  ; };									      *
 26963                                  ;									      *
 26964                                  ;******************************************************************************
 26965                                  
 26966                                  tryf:
 26967 000024DE 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 26968 000024E1 7523                    	jne	short tryl
 26969                                  
 26970                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26971                                  ;;ifdef	MULTI_CONFIG
 26972                                  ;       call    query_user              ; query the user if config_cmd
 26973                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 26974                                  ;;endif
 26975                                  
 26976                                  	; 14/12/2022
 26977                                  	; ds = cs
 26978                                  
 26979 000024E3 BF[AF1D]                	mov	di,files_parms
 26980 000024E6 31C9                    	xor	cx,cx
 26981                                  	; 04/01/2023
 26982                                  	;mov	dx,cx
 26983                                  do67:
 26984 000024E8 E8F101                  	call	sysinit_parse
 26985 000024EB 7303                    	jnc	short if67		; parse error
 26986                                  	;call	badparm_p		;  and show messages and end the search loop.
 26987                                  	;jmp	short sr67
 26988                                  	; 04/01/2023
 26989 000024ED E96A01                  	jmp	badparm_p_coff
 26990                                  if67:
 26991 000024F0 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26992 000024F3 7408                    	je	short en67		; then end the $endloop
 26993                                  
 26994                                  	; 14/12/2022
 26995                                  	; ds = cs
 26996                                  	;;mov	al,[cs:rv_dword]
 26997                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26998                                  	;mov	[cs:p_files],al		; save it temporarily
 26999                                  	;mov	al,[rv_dword]
 27000 000024F5 A0[4C1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27001 000024F8 A2[CE1D]                	mov	[p_files],al
 27002                                  
 27003 000024FB EBEB                    	jmp	short do67
 27004                                  en67:
 27005                                  	; 14/12/2022
 27006                                  	; ds = cs
 27007 000024FD A0[CE1D]                	mov	al,[p_files]
 27008 00002500 A2[9D02]                	mov	[FILES],al	
 27009                                  	;mov	al,[cs:p_files]
 27010                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27011                                  sr67:
 27012 00002503 E9F2FA                  	jmp	coff
 27013                                  
 27014                                  ; 04/04/2019 - Retro DOS v4.0
 27015                                  
 27016                                  ;------------------------------------------------------------------------------
 27017                                  ; lastdrive command
 27018                                  ;------------------------------------------------------------------------------
 27019                                  
 27020                                  ;******************************************************************************
 27021                                  ; function: parse the parameters of lastdrive= command. 		      *
 27022                                  ;									      *
 27023                                  ; input :								      *
 27024                                  ;	es:si -> parameters in command line.				      *
 27025                                  ; output:								      *
 27026                                  ;	set the variable num_cds.					      *
 27027                                  ;									      *
 27028                                  ; subroutines to be called:						      *
 27029                                  ;	sysinit_parse							      *
 27030                                  ; logic:								      *
 27031                                  ; {									      *
 27032                                  ;	set di points to ldrv_parms;					      *
 27033                                  ;	set dx,cx to 0; 						      *
 27034                                  ;	while (end of command line)					      *
 27035                                  ;	{ sysinit_parse;						      *
 27036                                  ;	  if (no error) then						      *
 27037                                  ;	     set num_cds to the returned value; 			      *
 27038                                  ;	  else	/*error exit*/						      *
 27039                                  ;	     error exit;						      *
 27040                                  ;	};								      *
 27041                                  ; };									      *
 27042                                  ;									      *
 27043                                  ;******************************************************************************
 27044                                  
 27045                                  tryl:
 27046 00002506 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27047 00002509 7523                    	jne	short tryp
 27048                                  
 27049                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27050                                  ;;ifdef	MULTI_CONFIG
 27051                                  ;       call    query_user      ; query the user if config_cmd
 27052                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27053                                  ;;endif
 27054                                  	; 14/12/2022
 27055                                  	; ds = cs
 27056                                  
 27057 0000250B BF[061E]                	mov	di,ldrv_parms
 27058 0000250E 31C9                    	xor	cx,cx
 27059                                  	; 04/01/2023
 27060                                  	;mov	dx,cx
 27061                                  do73:
 27062 00002510 E8C901                  	call	sysinit_parse
 27063 00002513 7303                    	jnc	short if73	; parse error
 27064                                  	;call	badparm_p	;  and show messages and end the search loop.
 27065                                  	;jmp	short sr73
 27066                                  	; 04/01/2023
 27067 00002515 E94201                  	jmp	badparm_p_coff
 27068                                  if73:
 27069 00002518 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27070 0000251B 7408                    	je	short en73	; then end the $endloop
 27071                                  
 27072                                  	; 14/12/2022
 27073                                  	; ds = cs
 27074                                  	;;mov	al,[cs:rv_dword]
 27075                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27076                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27077                                  
 27078                                  	;mov	al,[rv_dword]
 27079 0000251D A0[4C1D]                	mov	al,[rv_byte]
 27080 00002520 A2[1A1E]                	mov	[p_ldrv],al
 27081                                  
 27082 00002523 EBEB                    	jmp	short do73
 27083                                  en73:
 27084                                  	; 14/12/2022
 27085                                  	; ds = cs
 27086 00002525 A0[1A1E]                	mov	al,[p_ldrv]
 27087 00002528 A2[A002]                	mov	[NUM_CDS],al
 27088                                  	;mov	al,[cs:p_ldrv]
 27089                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27090                                  sr73:
 27091 0000252B E9CAFA                  	jmp	coff
 27092                                  
 27093                                  ;--------------------------------------------------------------------------
 27094                                  ; setting drive parameters
 27095                                  ;--------------------------------------------------------------------------
 27096                                  
 27097                                  tryp:
 27098 0000252E 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27099 00002531 7511                    	jne	short tryk
 27100                                  
 27101                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27102                                  ;;ifdef	MULTI_CONFIG
 27103                                  ;       call    query_user      ; query the user if config_cmd
 27104                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27105                                  ;;endif
 27106                                  
 27107 00002533 E86908                  	call	parseline
 27108 00002536 7209                    	jc	short trypbad
 27109 00002538 E88907                  	call	setparms
 27110 0000253B E8BF07                  	call	diddleback
 27111                                  
 27112                                  ; No error check here, because setparms and diddleback have no error 
 27113                                  ; returns, and setparms as coded now can return with carry set. 
 27114                                  ;       jc	short trypbad
 27115                                  
 27116                                  	; 12/12/2022
 27117                                  	; cf = 0
 27118                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27119                                  	;jc	short trypbad
 27120                                  	
 27121 0000253E E9B7FA                  	jmp	coff
 27122                                  trypbad:
 27123 00002541 E9BB01                  	jmp	badop
 27124                                  
 27125                                  ;--------------------------------------------------------------------------
 27126                                  ; setting internal stack parameters
 27127                                  ; stacks=m,n where
 27128                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27129                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27130                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27131                                  ;	any combinations that are not within the specified limits will
 27132                                  ;	result in "unrecognized command" error.
 27133                                  ;--------------------------------------------------------------------------
 27134                                  
 27135                                  ;**************************************************************************
 27136                                  ;									  *
 27137                                  ; function: parse the parameters of stacks= command.			  *
 27138                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27139                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27140                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27141                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27142                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27143                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27144                                  ;	    (or if "0,0" pair has been entered.)			  *
 27145                                  ; input :								  *
 27146                                  ;	es:si -> parameters in command line.				  *
 27147                                  ; output:								  *
 27148                                  ;	set the variables stack_count,stack_size.			  *
 27149                                  ;									  *
 27150                                  ; subroutines to be called:						  *
 27151                                  ;	sysinit_parse							  *
 27152                                  ; logic:								  *
 27153                                  ; {									  *
 27154                                  ;	set di points to stks_parms;					  *
 27155                                  ;	set dx,cx to 0; 						  *
 27156                                  ;	while (end of command line)					  *
 27157                                  ;	{ sysinit_parse;						  *
 27158                                  ;	  if (no error) then						  *
 27159                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27160                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27161                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27162                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27163                                  ;	     }								  *
 27164                                  ;	  else	/*error exit*/						  *
 27165                                  ;	     error exit;						  *
 27166                                  ;	};								  *
 27167                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27168                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27169                                  ;	 else error_exit;						  *
 27170                                  ; };									  *
 27171                                  ;**************************************************************************
 27172                                  
 27173                                  tryk:
 27174                                          ;if      stacksw
 27175                                  
 27176 00002544 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27177 00002547 7402                    	je	short do_tryk
 27178                                  skip_it4:
 27179 00002549 EB74                    	jmp	short trys	; 15/12/2022
 27180                                  do_tryk:
 27181                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27182                                  ;;ifdef	MULTI_CONFIG
 27183                                  ;       call    query_user              ; query the user if config_cmd
 27184                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27185                                  ;;endif
 27186                                  	; 14/12/2022
 27187                                  	; ds = cs
 27188                                  
 27189 0000254B BF[1B1E]                	mov	di,stks_parms
 27190 0000254E 31C9                    	xor	cx,cx
 27191                                  	; 04/01/2023
 27192                                  	;mov	dx,cx
 27193                                  do79:
 27194 00002550 E88901                  	call	sysinit_parse
 27195 00002553 730B                    	jnc	short if79		; parse error
 27196                                  
 27197 00002555 BA[6B38]                	mov	dx,badstack		; "invalid stack parameter"
 27198 00002558 E8240E                  	call	print			;  and show messages and end the search loop.
 27199 0000255B E8EC01                  	call	error_line
 27200                                  	;jmp	sr79
 27201                                  	; 11/12/2022
 27202 0000255E EB39                    	jmp	short sr79
 27203                                  if79:
 27204 00002560 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27205 00002563 7412                    	je	short en79		; then end the $endloop
 27206                                  
 27207                                  	; 14/12/2022
 27208                                  	; ds = cs
 27209                                  
 27210                                  	;;mov	ax,[cs:rv_dword]
 27211                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27212                                  	;mov	ax,[rv_dword]
 27213 00002565 A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27214                                  
 27215 00002568 83F901                  	cmp	cx,1
 27216 0000256B 7505                    	jne	short if83
 27217                                  
 27218                                  	; 14/12/2022
 27219                                  	;mov	[cs:p_stack_count],ax
 27220                                  	;jmp	short en83
 27221 0000256D A3[501E]                	mov	[p_stack_count],ax
 27222 00002570 EBDE                    	jmp	short do79
 27223                                  if83:
 27224                                  	; 14/12/2022
 27225                                  	;mov	[cs:p_stack_size],ax
 27226 00002572 A3[521E]                	mov	[p_stack_size],ax
 27227                                  en83:
 27228 00002575 EBD9                    	jmp	short do79
 27229                                  en79:
 27230                                  	; 14/12/2022
 27231                                  	; ds = cs
 27232 00002577 A1[501E]                	mov	ax,[p_stack_count]
 27233 0000257A 09C0                    	or	ax,ax
 27234 0000257C 741E                    	jz	short if87		
 27235                                  
 27236                                  	; 14/12/2022
 27237                                  	;cmp	word [p_stack_count],0
 27238                                  	;;cmp	word [cs:p_stack_count],0
 27239                                  	;je	short if87
 27240                                  
 27241                                  	; 14/12/2022
 27242 0000257E 83F808                  	cmp	ax, mincount ; 8
 27243                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27244                                  	; 15/12/2022
 27245 00002581 721F                    	jb	short en87
 27246 00002583 833E[521E]20            	cmp	word [p_stack_size],minsize ; 32
 27247                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27248                                  	; 15/12/2022
 27249 00002588 7218                    	jb	short en87
 27250                                  if94:
 27251                                  	; 14/12/2022
 27252                                  	; ds = cs
 27253                                  	; ax = [p_stack_count]
 27254                                  	;mov	ax,[p_stack_count]
 27255                                  	;;mov	ax,[cs:p_stack_count]
 27256 0000258A A3[8A02]                	mov	[stack_count],ax
 27257                                  	;mov	[cs:stack_count],ax
 27258                                  	;mov	ax,[cs:p_stack_size]
 27259 0000258D A1[521E]                	mov	ax,[p_stack_size]
 27260                                  	;mov	[cs:stack_size],ax
 27261 00002590 A3[8C02]                	mov	[stack_size],ax
 27262                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27263 00002593 C706[8E02]FFFF          	mov	word [stack_addr],-1
 27264                                  sr79:
 27265 00002599 E95CFA                  	jmp	coff
 27266                                  
 27267                                  if87:
 27268                                  	; 14/12/2022
 27269 0000259C 3906[521E]              	cmp	[p_stack_size],ax ; 0
 27270 000025A0 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27271                                  	;cmp	word [cs:p_stack_size],0
 27272                                  	;je	short if94
 27273                                  en87:
 27274                                  	; 15/12/2022
 27275                                  	; ([p_stack_count] is invalid, use default values)
 27276                                  	; 14/12/2022
 27277                                  	; ds = cs
 27278 000025A2 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27279 000025A8 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27280 000025AE C706[8E02]0000          	mov	word [stack_addr],0
 27281                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27282                                  	;				; reset to default value.
 27283                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27284                                  	;mov	word [cs:stack_addr],0
 27285                                  
 27286 000025B4 BA[6B38]                	mov	dx,badstack
 27287 000025B7 E8C50D                  	call	print
 27288 000025BA E88D01                  	call	error_line
 27289 000025BD EBDA                    	jmp	short sr79
 27290                                  
 27291                                  ; 15/12/2022
 27292                                  %if 0
 27293                                  	mov	di,stks_parms
 27294                                  	xor	cx,cx
 27295                                  	; 04/01/2023
 27296                                  	;mov	dx,cx
 27297                                  do79:
 27298                                  	call	sysinit_parse
 27299                                  	jnc	short if79		; parse error
 27300                                  
 27301                                  	mov	dx,badstack		; "invalid stack parameter"
 27302                                  	call	print			;  and show messages and end the search loop.
 27303                                  	call	error_line
 27304                                  	;jmp	sr79
 27305                                  	; 11/12/2022
 27306                                  	jmp	short sr79
 27307                                  if79:
 27308                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27309                                  	je	short en79		; then end the $endloop
 27310                                  
 27311                                  	;mov	ax,[cs:rv_dword]
 27312                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27313                                  	cmp	cx,1
 27314                                  	jne	short if83
 27315                                  
 27316                                  	mov	[cs:p_stack_count],ax
 27317                                  	jmp	short en83
 27318                                  if83:
 27319                                  	mov	[cs:p_stack_size],ax
 27320                                  en83:
 27321                                  	jmp	short do79
 27322                                  en79:
 27323                                  	cmp	word [cs:p_stack_count],0
 27324                                  	je	short if87
 27325                                  
 27326                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27327                                  	jb	short ll88
 27328                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27329                                  	jnb	short if88
 27330                                  ll88:
 27331                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27332                                  if88:
 27333                                  	jmp	short en87
 27334                                  
 27335                                  	; 11/12/2022
 27336                                  if94:
 27337                                  	mov	ax,[cs:p_stack_count]
 27338                                  	mov	[cs:stack_count],ax
 27339                                  	mov	ax,[cs:p_stack_size]
 27340                                  	mov	[cs:stack_size],ax
 27341                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27342                                  sr79:
 27343                                  	jmp	coff
 27344                                  
 27345                                  if87:
 27346                                  	cmp	word [cs:p_stack_size],0
 27347                                  	je	short en87
 27348                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27349                                  en87:
 27350                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27351                                  	jne	short if94
 27352                                  
 27353                                  	mov	word [cs:stack_count],defaultcount ; 9
 27354                                  					; reset to default value.
 27355                                  	mov	word [cs:stack_size],defaultsize ; 128
 27356                                  	mov	word [cs:stack_addr],0
 27357                                  
 27358                                  	mov	dx,badstack
 27359                                  	call	print
 27360                                  	call	error_line
 27361                                  	jmp	short sr79
 27362                                  
 27363                                  %endif
 27364                                  
 27365                                  ; 11/12/2022
 27366                                  %if 0 
 27367                                  
 27368                                  if94:
 27369                                  	mov	ax,[cs:p_stack_count]
 27370                                  	mov	[cs:stack_count],ax
 27371                                  	mov	ax,[cs:p_stack_size]
 27372                                  	mov	[cs:stack_size],ax
 27373                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27374                                  sr79:
 27375                                  	jmp	coff
 27376                                  
 27377                                  %endif
 27378                                  
 27379                                  	;endif
 27380                                  
 27381                                  ;------------------------------------------------------------------------
 27382                                  ; shell command
 27383                                  ;------------------------------------------------------------------------
 27384                                  
 27385                                  trys:
 27386 000025BF 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27387 000025C2 753C                    	jne	short tryx
 27388                                  
 27389                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27390                                  ;;ifdef	MULTI_CONFIG
 27391                                  ;       call    query_user              ; query the user if config_cmd
 27392                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27393                                  ;       mov	byte [cs:newcmd],1
 27394                                  ;;endif
 27395                                  
 27396                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27397                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27398                                  	;mov	byte [cs:command_line+1],0
 27399                                  	; 15/12/2022
 27400                                  	; ds = cs
 27401 000025C4 C606[AA02]00            	mov	byte [command_line+1],0
 27402                                  
 27403 000025C9 BF[5634]                        mov     di,commnd+1		; we already have the first char
 27404 000025CC 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27405                                  storeshell:
 27406 000025CF E86101                  	call	getchr
 27407 000025D2 08C0                            or      al,al                   ; this is the normal case: "organize"
 27408 000025D4 7419                            jz	short getshparms	; put a ZERO right after the filename
 27409                                  
 27410 000025D6 3C20                            cmp     al," "                  ; this may happen if there are no args
 27411 000025D8 7205                            jb	short endofshell	; I suppose...
 27412 000025DA 8805                    	mov	[di],al
 27413 000025DC 47                      	inc	di
 27414                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27415                                          ;jb	short storeshell	; commnd (the filename)
 27416                                          ;jmp	short endofshell
 27417                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27418 000025DD EBF0                    	jmp	short storeshell
 27419                                  
 27420                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27421                                  ;getshparms:
 27422                                  ;	mov     byte [di],0		; zero-terminate the filename
 27423                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27424                                  ;
 27425                                  ;parmloop:
 27426                                  ;	call	getchr
 27427                                  ;	cmp	al," "
 27428                                  ;	jb	short endofparms
 27429                                  ;	mov	[di],al
 27430                                  ;	inc	di
 27431                                  ;	cmp     di,command_line+126
 27432                                  ;	jb	short parmloop
 27433                                  ;endofparms:
 27434                                  ;	mov     cx,di
 27435                                  ;	sub     cx,command_line+1
 27436                                  ;	mov     [cs:command_line],cl
 27437                                  ;
 27438                                  ;endofshell:
 27439                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27440                                  ;					; the command-line as the case may be)
 27441                                  ;skipline:
 27442                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27443                                  ;       je	short endofline		; the line: watch for ever-present LF
 27444                                  ;call	getchr
 27445                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27446                                  ;
 27447                                  ;endofline:
 27448                                  ;       jmp     conflp
 27449                                  
 27450                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27451                                  endofshell:
 27452 000025DF C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27453                                  					; the command-line as the case may be)
 27454 000025E2 E84E01                  	call	getchr
 27455                                  skipline:
 27456 000025E5 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27457 000025E7 7403                    	je	short endofline		; the line: watch for ever-present LF
 27458 000025E9 E84701                  	call	getchr
 27459                                  endofline:
 27460 000025EC E9E4F9                  	jmp     conflp
 27461                                  
 27462                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27463                                  getshparms:
 27464                                  	; 18/12/2022
 27465                                  	; al = 0
 27466 000025EF 8805                    	mov	[di],al ; 0
 27467                                  	;mov	byte [di],0		; zero-terminate the filename
 27468 000025F1 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27469                                  parmloop:
 27470 000025F4 E83C01                  	call	getchr
 27471 000025F7 3C20                    	cmp	al," " ; 20h
 27472 000025F9 72E4                    	jb	short endofshell
 27473 000025FB 8805                    	mov	[di],al
 27474 000025FD 47                      	inc	di
 27475 000025FE EBF4                    	jmp	short parmloop
 27476                                  
 27477                                  ;------------------------------------------------------------------------
 27478                                  ; fcbs command
 27479                                  ;------------------------------------------------------------------------
 27480                                  
 27481                                  ;************************************************************************
 27482                                  ; function: parse the parameters of fcbs= command.			*
 27483                                  ;									*
 27484                                  ; input :								*
 27485                                  ;	es:si -> parameters in command line.				*
 27486                                  ; output:								*
 27487                                  ;	set the variables fcbs,keep.					*
 27488                                  ;									*
 27489                                  ; subroutines to be called:						*
 27490                                  ;	sysinit_parse							*
 27491                                  ; logic:								*
 27492                                  ; {									*
 27493                                  ;	set di points to fcbs_parms;					*
 27494                                  ;	set dx,cx to 0; 						*
 27495                                  ;	while (end of command line)					*
 27496                                  ;	{ sysparse;							*
 27497                                  ;	  if (no error) then						*
 27498                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27499                                  ;		   fcbs = result_val._$P_picked_val;			*
 27500                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27501                                  ;		   keep = result_val._$P_picked_val;			*
 27502                                  ;	     }								*
 27503                                  ;	  else	/*error exit*/						*
 27504                                  ;	     error exit;						*
 27505                                  ;	};								*
 27506                                  ; };									*
 27507                                  ;************************************************************************
 27508                                  
 27509                                  tryx:
 27510 00002600 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27511                                          ;jne	short try1
 27512                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27513 00002603 752F                    	jne	short tryy	; comment command
 27514                                  
 27515                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27516                                  ;;ifdef	MULTI_CONFIG
 27517                                  ;       call    query_user      ; query the user if config_cmd
 27518                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27519                                  ;;endif
 27520                                  
 27521 00002605 BF[CF1D]                	mov	di,fcbs_parms
 27522 00002608 31C9                    	xor	cx,cx
 27523                                  	; 04/01/2023
 27524                                  	;mov	dx,cx
 27525                                  do98:
 27526 0000260A E8CF00                  	call	sysinit_parse
 27527                                          ; 04/01/2023
 27528                                  	;jnc	short if98	; parse error
 27529                                          ;call	badparm_p	;  and show messages and end the search loop.
 27530                                  	;jmp	short sr98
 27531                                  	;------------------------
 27532                                  	; 04/01/2023
 27533 0000260D 724B                    	jc	short badparm_p_coff
 27534                                  if98:
 27535 0000260F 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27536 00002612 7412                    	je	short en98	; then end the $endloop
 27537                                  
 27538                                  	;;mov	al,[cs:rv_dword]
 27539                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27540                                  	; 15/12/2022
 27541                                  	; ds = cs
 27542 00002614 A0[4C1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27543 00002617 83F901                  	cmp	cx,1		; the first positional?
 27544 0000261A 7505                    	jne	short if102
 27545                                  	;mov	[cs:p_fcbs],al
 27546                                  	; 15/12/2022
 27547 0000261C A2[041E]                	mov	[p_fcbs],al
 27548                                  	;jmp	short en102
 27549 0000261F EBE9                    	jmp	short do98
 27550                                  if102:
 27551                                  	;mov	[cs:p_keep],al
 27552                                  	; 15/12/2022
 27553 00002621 A2[051E]                	mov	[p_keep],al
 27554                                  en102:
 27555 00002624 EBE4                    	jmp	short do98
 27556                                  en98:
 27557                                  	; 15/12/2022
 27558                                  	; ds = cs
 27559 00002626 A0[041E]                	mov	al,[p_fcbs]
 27560 00002629 A2[9E02]                	mov	[FCBS],al
 27561 0000262C C606[9F02]00            	mov	byte [KEEP],0
 27562                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27563                                  	;mov	[cs:FCBS],al	 ; M017
 27564                                  	;mov	byte [cs:KEEP],0 ; M017
 27565                                  sr98:
 27566 00002631 E9C4F9                  	jmp	coff
 27567                                  
 27568                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27569                                  ;-------------------------------------------------------------------------
 27570                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27571                                  ;		line number
 27572                                  ;-------------------------------------------------------------------------
 27573                                  
 27574                                  tryy:
 27575 00002634 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27576 00002637 750B                    	jne	short try0
 27577                                  
 27578                                  donothing:
 27579                                  	; 15/12/2022
 27580                                  	; ds = cs
 27581 00002639 FF0E[D603]              	dec	word [chrptr]
 27582 0000263D FF06[D203]              	inc	word [count]
 27583                                  	; 02/11/2022
 27584                                  	;dec	word [cs:chrptr]
 27585                                  	;inc	word [cs:count]
 27586                                  
 27587 00002641 E9B4F9                  	jmp	coff
 27588                                  
 27589                                  ;------------------------------------------------------------------------
 27590                                  ; rem command
 27591                                  ;------------------------------------------------------------------------
 27592                                  
 27593                                  try0:				; do nothing with this line.
 27594 00002644 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27595 00002647 74F0                    	je	short donothing
 27596                                  
 27597                                  ; 07/04/2019 - Retro DOS v4.0
 27598                                  
 27599                                  ;-----------------------------------------------------------------------
 27600                                  ; switches command
 27601                                  ;-----------------------------------------------------------------------
 27602                                  
 27603                                  ;***********************************************************************
 27604                                  ;								       *
 27605                                  ; function: parse the option switches specified.		       *
 27606                                  ; note - this command is intended for the future use also.	       *
 27607                                  ; when we need to set system data flag,use this command.	       *
 27608                                  ;								       *
 27609                                  ; input :							       *
 27610                                  ;	es:si -> parameters in command line.			       *
 27611                                  ; output:							       *
 27612                                  ;	p_swit_k set if /k option chosen.			       *
 27613                                  ;								       *
 27614                                  ; subroutines to be called:					       *
 27615                                  ;	sysinit_parse						       *
 27616                                  ; logic:							       *
 27617                                  ; {								       *
 27618                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27619                                  ;	set dx,cx to 0; 					       *
 27620                                  ;	while (end of command line)				       *
 27621                                  ;	{ sysinit_parse;					       *
 27622                                  ;	  if (no error) then					       *
 27623                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27624                                  ;		    p_swit_k = 1				       *
 27625                                  ;	       endif						       *
 27626                                  ;	  else {show error message;error exit}			       *
 27627                                  ;	};							       *
 27628                                  ; };								       *
 27629                                  ;								       *
 27630                                  ;***********************************************************************
 27631                                  
 27632                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27633                                  
 27634                                  try1:
 27635 00002649 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27636 0000264C 7402                    	je	short do_try1	; switches= command entered?
 27637                                  skip_it5:
 27638                                  	;jmp	tryv
 27639                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27640 0000264E EB7A                    	jmp	tryz
 27641                                  
 27642                                  do_try1:
 27643                                  
 27644                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27645                                  ;;ifdef	MULTI_CONFIG
 27646                                  ;       call    query_user      ; query the user if config_cmd
 27647                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27648                                  ;;endif
 27649                                  
 27650 00002650 BF[691E]                	mov	di,swit_parms
 27651 00002653 31C9                    	xor	cx,cx
 27652                                  	; 04/01/2023
 27653                                  	;mov	dx,cx
 27654                                  do110:
 27655 00002655 E88400                  	call	sysinit_parse
 27656 00002658 7306                    	jnc	short if110	; parse error
 27657                                  	;call	badparm_p	;  and show messages and end the search loop.
 27658                                  	;jmp	short sr110
 27659                                  	; -----------------------
 27660                                  	; 04/01/2023
 27661                                  badparm_p_coff:
 27662 0000265A E8AE00                  	call	badparm_p
 27663 0000265D E998F9                  	jmp	coff
 27664                                  	;------------------------
 27665                                  if110:
 27666 00002660 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27667 00002663 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27668                                  
 27669                                  	; 15/12/2022
 27670                                  	; ds = cs
 27671                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27672                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27673 00002665 813E[4A1D][811E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27674 0000266B 7507                    	jne	short if115	;				;M059
 27675                                  	; 15/12/2022
 27676 0000266D C606[9C1E]01            	mov	byte [p_swit_k],1
 27677                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27678 00002672 EBE1                    	jmp	short do110
 27679                                  if115:	
 27680                                  	; 15/12/2022							;M059
 27681                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27682                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27683 00002674 813E[4A1D][8D1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27684 0000267A 7507                    	jne	short if116					;M059 M063
 27685                                  	; 15/12/2022
 27686 0000267C C606[9D1E]01            	mov	byte [p_swit_t],1
 27687                                  	;mov	byte [cs:p_swit_t],1				;M059
 27688 00002681 EBD2                    	jmp	short do110					;M059
 27689                                  if116:
 27690                                  	; 15/12/2022
 27691                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27692                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27693 00002683 813E[4A1D][991E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27694 00002689 75CA                    	jne	short do110					;M063
 27695                                  	; 15/12/2022
 27696 0000268B C606[9E1E]01            	mov	byte [p_swit_w],1
 27697                                  	;mov	byte [cs:p_swit_w],1				;M063
 27698 00002690 EBC3                    	jmp	short do110					;M063
 27699                                  en110:
 27700                                  	; 15/12/2022
 27701                                  	; ds = cs
 27702 00002692 803E[9C1E]01            	cmp	byte [p_swit_k],1
 27703                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27704 00002697 1E                      	push	ds
 27705                                  	;;mov	ax,Bios_Data
 27706                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27707                                  	; 21/10/2022
 27708 00002698 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27709 0000269B 8ED8                    	mov	ds,ax
 27710 0000269D 750A                    	jne	short if117
 27711 0000269F C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27712 000026A4 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27713                                  if117:
 27714                                  	; 15/12/2022
 27715                                  	; ds <> cs
 27716 000026A9 2EA0[9D1E]              	mov	al,[cs:p_swit_t]				;M059
 27717 000026AD A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27718                                  
 27719 000026B0 2E803E[9E1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27720 000026B6 740E                    	je	short skip_dos_flag				;M063
 27721 000026B8 06                      	push	es
 27722 000026B9 53                      	push	bx
 27723 000026BA B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27724 000026BC CD21                    	int	21h						;M063
 27725                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27726                                  			; Return: ES:BX -> DOS list of lists
 27727                                  	;or	bytes [es:86h],2
 27728 000026BE 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27729 000026C4 5B                      	pop	bx
 27730 000026C5 07                      	pop	es
 27731                                  skip_dos_flag:							;M063
 27732 000026C6 1F                      	pop	ds
 27733                                  sr110:
 27734 000026C7 E92EF9                  	jmp	coff
 27735                                  
 27736                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27737                                  ;
 27738                                  ;tryv:
 27739                                  ;
 27740                                  ;;ifdef	MULTI_CONFIG
 27741                                  ;;------------------------------------------------------------------------
 27742                                  ;; set command (as in "set var=value<cr/lf>")
 27743                                  ;;------------------------------------------------------------------------
 27744                                  ;
 27745                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27746                                  ;       jne	short tryn
 27747                                  ;       call    query_user      ; query the user if config_cmd
 27748                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27749                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 27750                                  ;       jnc	short sr110	; no error
 27751                                  ;err:    
 27752                                  ;	call    error_line      ; whoops, display error in line XXX
 27753                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 27754                                  ;
 27755                                  ;;------------------------------------------------------------------------
 27756                                  ;; numlock command (as in "numlock=on|off")
 27757                                  ;;------------------------------------------------------------------------
 27758                                  ;tryn:
 27759                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 27760                                  ;       jne	short tryy            ;
 27761                                  ;       call    query_user      ; query thye user if config_cmd
 27762                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 27763                                  ;       call    set_numlock
 27764                                  ;       jc	short err
 27765                                  ;       jmp	short sr110	; all done
 27766                                  ;
 27767                                  ;;endif	;MULTI_CONFIG
 27768                                  
 27769                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27770                                  ;;-------------------------------------------------------------------------
 27771                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 27772                                  ;;		line number
 27773                                  ;;-------------------------------------------------------------------------
 27774                                  ;
 27775                                  ;tryy:
 27776                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 27777                                  ;	jne	short try0
 27778                                  ;donothing:
 27779                                  ;	dec	word [chrptr]
 27780                                  ;	inc	word [count]
 27781                                  ;	jmp	coff
 27782                                  ;
 27783                                  ;;------------------------------------------------------------------------
 27784                                  ;; rem command
 27785                                  ;;------------------------------------------------------------------------
 27786                                  ;
 27787                                  ;try0:				;do nothing with this line.
 27788                                  ;	cmp     ah,CONFIG_REM ; '0'
 27789                                  ;	je	short donothing
 27790                                  
 27791                                  ; 30/10/2022
 27792                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 27793                                  
 27794                                  ;------------------------------------------------------------------------
 27795                                  ; bogus command
 27796                                  ;------------------------------------------------------------------------
 27797                                  
 27798                                  tryz:
 27799 000026CA 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 27800                                  	;je	short donothing
 27801                                  	; 02/11/2022
 27802 000026CD 740A                    	je	short tryz_donothing
 27803                                  
 27804 000026CF FF0E[D603]              	dec	word [chrptr]
 27805 000026D3 FF06[D203]              	inc	word [count]
 27806 000026D7 EB26                    	jmp	short badop
 27807                                  
 27808                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27809                                  tryz_donothing:
 27810 000026D9 E95DFF                  	jmp	donothing
 27811                                  
 27812                                  ; 07/04/2019 - Retro DOS v4.0
 27813                                  
 27814                                  ;------------------------------------------------------------------------------
 27815                                  
 27816                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27817                                  ;
 27818                                  ;
 27819                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 27820                                  ;;
 27821                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 27822                                  ;
 27823                                  ;CheckProtmanArena:
 27824                                  ;	push	es
 27825                                  ;	mov	ax,[cs:area]	; get our arena header
 27826                                  ;	dec	ax
 27827                                  ;	mov	es,ax
 27828                                  ;	add	ax,[es:3]	; find end of arena
 27829                                  ;	inc	ax
 27830                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 27831                                  ;	ja	short CheckProtmanDone
 27832                                  ;
 27833                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 27834                                  ;CheckProtmanDone:
 27835                                  ;	pop	es
 27836                                  ;	retn
 27837                                  
 27838                                  ;------------------------------------------------------------------------------
 27839                                  
 27840                                  sysinit_parse:
 27841                                  
 27842                                  ;------------------------------------------------------------------------------
 27843                                  ;set up registers for sysparse
 27844                                  ;in)	es:si -> command line in confbot
 27845                                  ;	di -> offset of the parse control definition.
 27846                                  ;
 27847                                  ;out)	calls sysparse.
 27848                                  ;	carry will set if parse error.
 27849                                  ;	*** the caller should check the eol condition by looking at ax
 27850                                  ;	*** after each call.
 27851                                  ;	*** if no parameters are found,then ax will contain a error code.
 27852                                  ;	*** if the caller needs to look at the synomym@ of the result,
 27853                                  ;	***  the caller should use cs:@ instead of es:@.
 27854                                  ;	cx register should be set to 0 at the first time the caller calls this
 27855                                  ;	 procedure.
 27856                                  ;	ax - exit code
 27857                                  ;	bl - terminated delimeter code
 27858                                  ;	cx - new positional ordinal
 27859                                  ;	si - set to pase scanned operand
 27860                                  ;	dx - selected result buffer
 27861                                  ;------------------------------------------------------------------------------
 27862                                  
 27863                                  	; 24/10/2022
 27864 000026DC 06                      	push	es			;save es,ds
 27865 000026DD 1E                      	push	ds
 27866                                  
 27867 000026DE 06                      	push	es
 27868 000026DF 1F                      	pop	ds			;now ds:si -> command line
 27869                                  
 27870 000026E0 0E                      	push	cs
 27871 000026E1 07                      	pop	es			;now es:di -> control definition
 27872                                  
 27873 000026E2 2E8C1E[3114]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 27874 000026E7 2E8936[2F14]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 27875                                  	;mov	dx,0
 27876                                  	; 04/01/2023
 27877 000026EC 29D2                    	sub	dx,dx ; 0
 27878 000026EE E8E8ED                  	call	SysParse
 27879 000026F1 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 27880                                  
 27881                                  ;**cas note:  when zero true after cmp, carry clear
 27882                                  
 27883                                  	;je	short ll4
 27884                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 27885                                  	; 12/12/2022
 27886 000026F4 7406                    	je	short en4 ; cf=0
 27887 000026F6 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 27888                                  	;jne	short if4
 27889                                  	; 12/12/2022
 27890 000026F9 7401                    	je	short en4 ; cf=0
 27891                                  
 27892                                  ; 12/12/2022
 27893                                  ;ll4:
 27894                                  ;	; 12/12/2022
 27895                                  ;	; cf=0
 27896                                  ;	;clc
 27897                                  ;	jmp	short en4
 27898                                  
 27899                                  if4:
 27900                                  	; 24/10/2022
 27901 000026FB F9                      	stc
 27902                                  en4:
 27903 000026FC 1F                      	pop	ds
 27904 000026FD 07                      	pop	es
 27905 000026FE C3                      	retn
 27906                                  
 27907                                  ; 11/12/2022
 27908                                  %if 0
 27909                                  
 27910                                  ;----------------------------------------------------------------------------
 27911                                  ;
 27912                                  ; procedure : badop_p
 27913                                  ;
 27914                                  ;             same thing as badop,but will make sure to set ds register back
 27915                                  ;             to sysinitseg and return back to the caller.
 27916                                  ;
 27917                                  ;----------------------------------------------------------------------------
 27918                                  
 27919                                  badop_p:
 27920                                  	push	cs
 27921                                  	pop	ds		;set ds to configsys seg.
 27922                                  	mov	dx,badopm
 27923                                  	call	print
 27924                                          ;call	error_line
 27925                                  	;retn
 27926                                  	; 11/12/2022
 27927                                  	jmp	error_line
 27928                                  
 27929                                  %endif
 27930                                  
 27931                                  ;----------------------------------------------------------------------------
 27932                                  ;
 27933                                  ; label : badop
 27934                                  ;
 27935                                  ;----------------------------------------------------------------------------
 27936                                  
 27937                                  badop:	
 27938 000026FF BA[2C37]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 27939 00002702 E87A0C                  	call	print
 27940 00002705 E84200                  	call	error_line	;show "error in config.sys ..." .
 27941 00002708 E9EDF8                  	jmp	coff
 27942                                  
 27943                                  ;----------------------------------------------------------------------------
 27944                                  ;
 27945                                  ; procedure : badparm_p
 27946                                  ;
 27947                                  ;             show "bad command or parameters - xxxxxx"
 27948                                  ;             in badparm_seg,badparm_off -> xxxxx
 27949                                  ;
 27950                                  ;----------------------------------------------------------------------------
 27951                                  
 27952                                  	; 24/10/2022
 27953                                  badparm_p:
 27954                                  	; 11/12/2022
 27955                                  	; ds = cs
 27956                                  	; 11/12/2022
 27957                                  	;push	ds ; *
 27958 0000270B 52                      	push	dx
 27959 0000270C 56                      	push	si
 27960                                  
 27961                                  	; 11/12/2022
 27962                                  	; ds = cs
 27963                                  	;push	cs
 27964                                  	;pop	ds
 27965                                  
 27966 0000270D BA[5337]                	mov	dx,badparm
 27967 00002710 E86C0C                  	call	print			; "bad command or parameters - "
 27968 00002713 C536[2F14]              	lds	si,[badparm_ptr]
 27969                                  
 27970                                  ;	print "xxxx" until cr.
 27971                                  
 27972                                  do1:
 27973 00002717 8A14                    	mov	dl,[si]			; get next character
 27974 00002719 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 27975 0000271C 7407                    	je	short en1		; exit loop if so
 27976                                  
 27977 0000271E B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 27978 00002720 CD21                    	int	21h			; display character
 27979 00002722 46                      	inc	si			; next character
 27980 00002723 EBF2                    	jmp	short do1
 27981                                  en1:
 27982 00002725 0E                      	push	cs
 27983 00002726 1F                      	pop	ds
 27984                                  
 27985 00002727 BA[5037]                	mov	dx,crlfm
 27986 0000272A E8520C                  	call	print
 27987 0000272D E81A00                  	call	error_line
 27988                                  
 27989 00002730 5E                      	pop	si
 27990 00002731 5A                      	pop	dx
 27991                                  	; 11/12/2022
 27992                                  	;pop	ds ; *
 27993                                  badparmp_ret:
 27994 00002732 C3                      	retn
 27995                                  
 27996                                  ;----------------------------------------------------------------------------
 27997                                  ;
 27998                                  ; procedure : getchr
 27999                                  ;
 28000                                  ;----------------------------------------------------------------------------
 28001                                  
 28002                                  	; 24/10/2022
 28003                                  getchr:
 28004                                  	; 12/12/2022
 28005                                  	;push	cx
 28006                                  	;mov	cx,[count]
 28007                                  	;jcxz	nochar
 28008                                  	; 12/12/2022
 28009 00002733 833E[D203]01            	cmp	word [count],1 
 28010 00002738 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 28011                                  	
 28012 0000273A 8B36[D603]              	mov	si,[chrptr]
 28013 0000273E 268A04                  	mov	al,[es:si]
 28014 00002741 FF0E[D203]              	dec	word [count]
 28015 00002745 FF06[D603]              	inc	word [chrptr]
 28016                                  	; 12/12/202
 28017                                  	; cf=0
 28018                                  	;clc
 28019                                  ;get_ret:
 28020                                  	;pop	cx
 28021                                  	;retn
 28022                                  nochar: 
 28023                                  	; 12/12/2022
 28024                                  	; cf=1
 28025                                  	;stc
 28026                                  	;jmp	short get_ret
 28027                                  	
 28028 00002749 C3                      	retn
 28029                                  
 28030                                  ; 11/12/2022
 28031                                  %if 0
 28032                                  
 28033                                  ;----------------------------------------------------------------------------
 28034                                  ;
 28035                                  ; procedure : incorrect_order
 28036                                  ;
 28037                                  ;             show "incorrect order in config.sys ..." message.
 28038                                  ;
 28039                                  ;----------------------------------------------------------------------------
 28040                                  
 28041                                  incorrect_order:
 28042                                  	mov	dx,badorder
 28043                                  	call	print
 28044                                  	call	showlinenum
 28045                                  	retn
 28046                                  
 28047                                  %endif
 28048                                  
 28049                                  ;----------------------------------------------------------------------------
 28050                                  ;
 28051                                  ; procedure : error_line
 28052                                  ;
 28053                                  ;             show "error in config.sys ..." message.
 28054                                  ;
 28055                                  ;----------------------------------------------------------------------------
 28056                                  
 28057                                  	; 11/12/2022
 28058                                  	; 24/10/2022
 28059                                  error_line:
 28060                                  	; 11/12/2022
 28061                                  	; ds = cs
 28062                                  	;push	cs
 28063                                  	;pop	ds
 28064                                  
 28065 0000274A BA[8838]                	mov	dx,errorcmd
 28066 0000274D E82F0C                  	call	print
 28067                                  	;call	showlinenum
 28068                                  	;retn
 28069                                  	; 11/12/2022
 28070                                  	;jmp	short shortlinemum
 28071                                  
 28072                                  ;----------------------------------------------------------------------------
 28073                                  ;
 28074                                  ; procedure : showlinenum
 28075                                  ;
 28076                                  ; convert the binary linecount to decimal ascii string in showcount
 28077                                  ; and display showcount at the current curser position.
 28078                                  ; in.) linecount
 28079                                  ;
 28080                                  ; out) the number is printed.
 28081                                  ;
 28082                                  ;----------------------------------------------------------------------------
 28083                                  
 28084                                  	; 11/12/2022
 28085                                  	; ds = cs
 28086                                  	; 24/10/2022
 28087                                  showlinenum:
 28088 00002750 06                      	push	es
 28089                                  	; 11/12/2022
 28090                                  	;push	ds
 28091 00002751 57                      	push	di
 28092                                  
 28093 00002752 0E                      	push	cs
 28094 00002753 07                      	pop	es		; es=cs
 28095                                  
 28096                                  	; 11/12/2022
 28097                                  	;push	cs
 28098                                  	;pop	ds
 28099                                  
 28100 00002754 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28101 00002757 B90A00                  	mov	cx,10		; decimal divide factor
 28102                                  	;mov	ax,[cs:linecount]
 28103                                  	; 11/12/2022
 28104 0000275A A1[2B03]                	mov	ax,[linecount]
 28105                                  sln_loop:
 28106                                  	; 11/12/2022
 28107 0000275D 39C8                    	cmp	ax,cx ; < 10 ?
 28108                                  	;cmp	ax,10		; < 10?
 28109 0000275F 720C                    	jb	short sln_last
 28110                                  
 28111 00002761 31D2                    	xor	dx,dx
 28112 00002763 F7F1                    	div	cx	; cx = 10
 28113 00002765 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28114 00002768 8815                    	mov	[di],dl
 28115 0000276A 4F                      	dec	di
 28116 0000276B EBF0                    	jmp	short sln_loop
 28117                                  
 28118                                  sln_last:
 28119 0000276D 0C30                    	or	al,30h	; "0"
 28120 0000276F 8805                    	mov	[di],al
 28121 00002771 89FA                    	mov	dx,di
 28122 00002773 E8090C                  	call	print		; show it.
 28123 00002776 5F                      	pop	di
 28124                                  	; 11/12/2022
 28125                                  	;pop	ds
 28126 00002777 07                      	pop	es
 28127 00002778 C3                      	retn
 28128                                  
 28129                                  ; 07/04/2019 - Retro DOS v4.0
 28130                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28131                                  
 28132                                  ;----------------------------------------------------------------------------
 28133                                  ;
 28134                                  ; procedure : ProcDOS
 28135                                  ;
 28136                                  ;	Process the result of DOS= parsing
 28137                                  ;
 28138                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28139                                  ;				= 2 for DOS=LOW
 28140                                  ;				= 3 for DOS=UMB
 28141                                  ;				= 4 for DOS=NOUMB
 28142                                  ;----------------------------------------------------------------------------
 28143                                  
 28144                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28145                                  	; (SYTSINIT:2AB5h)
 28146                                  ProcDOS:
 28147                                  	; 01/01/2023
 28148                                  	; ds = cs
 28149 00002779 30E4                    	xor	ah,ah
 28150                                  	;;mov	al,[cs:result_val_itag]
 28151                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28152                                  	; 04/01/2023
 28153 0000277B A0[491D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28154 0000277E 48                      	dec	ax
 28155 0000277F 7415                    	jz	short pd_hi
 28156 00002781 48                      	dec	ax
 28157 00002782 740E                    	jz	short pd_lo
 28158 00002784 48                      	dec	ax
 28159 00002785 7405                    	jz	short pd_umb
 28160                                  	;;mov	byte [cs:DevUMB],0
 28161                                  	; 18/12/2022
 28162                                  	;mov	byte [cs:DevUMB],ah ; 0
 28163                                  	; 01/01/2023
 28164 00002787 8826[F01E]              	mov	byte [DevUMB],ah ; 0
 28165 0000278B C3                      	retn
 28166                                  pd_umb:
 28167                                  	; 04/01/2023
 28168 0000278C C606[F01E]FF            	mov	byte [DevUMB],0FFh
 28169                                  	;mov	byte [cs:DevUMB],0FFh
 28170 00002791 C3                      	retn
 28171                                  pd_lo:
 28172                                  	; 04/01/2023
 28173 00002792 A2[6A02]                	mov	[runhigh],al ; 0
 28174                                  	; 18/12/2022
 28175                                  	;mov	[cs:runhigh],al ; 0
 28176                                  	;;mov	byte [cs:runhigh],0
 28177 00002795 C3                      	retn
 28178                                  pd_hi:
 28179                                  	; 04/01/2023
 28180 00002796 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28181                                  	;mov	byte [cs:runhigh],0FFh
 28182                                  limx:	; 11/12/2022
 28183 0000279B C3                      	retn
 28184                                  
 28185                                  ;----------------------------------------------------------------------------
 28186                                  ;
 28187                                  ; procedure : LieInt12Mem
 28188                                  ;
 28189                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28190                                  ;		alloclim set to the limit of low memory.
 28191                                  ;
 28192                                  ;	Output : none
 28193                                  ;
 28194                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28195                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28196                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28197                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28198                                  ;	converted into Ks and stored in 40:13h
 28199                                  ;
 28200                                  ;----------------------------------------------------------------------------
 28201                                  
 28202                                  LieInt12Mem:
 28203                                  	; 11/12/2022
 28204                                  	; ds = cs
 28205 0000279C A1[A302]                	mov	ax,[ALLOCLIM]
 28206                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28207                                  					; assuming that it is 3Com
 28208 0000279F E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28209 000027A2 740A                    	jz	short lim_set		; yes, lie to him differently
 28210                                  	; 13/05/2019
 28211                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28212                                  	;je	short limx		; no, don't lie
 28213                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28214                                  	; 11/12/2022
 28215                                  	; ds = cs
 28216 000027A4 803E[FF1E]00            	cmp	byte [DeviceHi],0
 28217 000027A9 74F0                    	je	short limx
 28218 000027AB A1[E61E]                	mov	ax,[DevLoadEnd]
 28219                                  lim_set:
 28220                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28221                                  	; 11/12/2022
 28222                                  	;call	SetInt12Mem
 28223                                  ;limx:
 28224                                  	;retn
 28225                                  	
 28226                                  	;jmp	short SetInt12Mem 
 28227                                  
 28228                                  ;----------------------------------------------------------------------------
 28229                                  ;
 28230                                  ; procedure : SetInt12Mem
 28231                                  ;
 28232                                  ;	Input : AX = Memory size to be set (in paras)
 28233                                  ;	Output : none
 28234                                  ;
 28235                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28236                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28237                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28238                                  ;	restoring the value of 40:13
 28239                                  ;
 28240                                  ;----------------------------------------------------------------------------
 28241                                  
 28242                                  	; 01/11/2022
 28243                                  SetInt12Mem:
 28244 000027AE 1E                      	push	ds
 28245 000027AF BB4000                  	mov	bx,40h
 28246 000027B2 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28247 000027B4 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28248 000027B8 2E891E[031F]            	mov	[cs:OldInt12Mem],bx	; save it
 28249 000027BD B106                    	mov	cl,6
 28250 000027BF D3E8                    	shr	ax,cl			; convert paras into Ks
 28251 000027C1 A31300                  	mov	[13h],ax		; Lie
 28252 000027C4 2EC606[021F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28253 000027CA 1F                      	pop	ds
 28254                                  ;limx:
 28255 000027CB C3                      	retn
 28256                                  
 28257                                  ;----------------------------------------------------------------------------
 28258                                  ;
 28259                                  ; procedure : TrueInt12Mem
 28260                                  ;
 28261                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28262                                  ;			  = 0ffh if we are lying
 28263                                  ;		OldInt12Mem = Saved value of 40:13h
 28264                                  ;
 28265                                  ;	Output : none
 28266                                  ;
 28267                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28268                                  ;	and resets the flag which indicates that we were lying
 28269                                  ;
 28270                                  ;----------------------------------------------------------------------------
 28271                                  
 28272                                  TrueInt12Mem:
 28273                                  	; 11/12/2022
 28274                                  	; ds = cs
 28275 000027CC 803E[021F]00            	cmp	byte [Int12Lied],0
 28276                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28277                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28278                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28279 000027D1 7412                    	je	short timx		; no, we weren't
 28280                                  	; 18/12/2022
 28281 000027D3 B84000                  	mov	ax,40h
 28282 000027D6 8826[021F]              	mov	[Int12Lied],ah ; 0
 28283                                  	;mov	byte [Int12Lied],0
 28284                                  	;mov	byte [cs:Int12Lied],0
 28285 000027DA 1E                      	push	ds
 28286                                  	;mov	ax,40h
 28287 000027DB 8ED8                    	mov	ds,ax
 28288 000027DD 2EA1[031F]              	mov	ax,[cs:OldInt12Mem]
 28289 000027E1 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28290 000027E4 1F                      	pop	ds
 28291                                  timx:
 28292 000027E5 C3                      	retn
 28293                                  
 28294                                  ;----------------------------------------------------------------------------
 28295                                  ;
 28296                                  ; procedure : IsIt3Com?
 28297                                  ;
 28298                                  ;	Input : DevEntry = Seg:0 of device driver
 28299                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28300                                  ;		 else Zero flag is reset
 28301                                  ;
 28302                                  ;----------------------------------------------------------------------------
 28303                                  
 28304                                  IsIt3Com:
 28305                                  	; 11/12/2022
 28306                                  	; ds = cs
 28307 000027E6 1E                      	push	ds
 28308 000027E7 06                      	push	es
 28309 000027E8 56                      	push	si
 28310                                  	; 11/12/2022
 28311 000027E9 C536[E81E]              	lds	si,[DevEntry]
 28312                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28313 000027ED 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28314 000027F0 0E                      	push	cs
 28315 000027F1 07                      	pop	es
 28316 000027F2 BF[051F]                	mov	di,ThreeComName
 28317 000027F5 B90800                  	mov	cx,8			; name length
 28318 000027F8 F3A6                    	rep	cmpsb
 28319 000027FA 5E                      	pop	si
 28320 000027FB 07                      	pop	es
 28321 000027FC 1F                      	pop	ds
 28322 000027FD C3                      	retn
 28323                                  
 28324                                  ;M020 : BEGIN
 28325                                  ;----------------------------------------------------------------------------
 28326                                  
 28327                                  UpdatePDB:
 28328 000027FE 1E                      	push	ds
 28329 000027FF B462                    	mov	ah,62h
 28330 00002801 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28331 00002803 8EDB                    	mov	ds,bx
 28332 00002805 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28333                                  	;mov	[2],bx
 28334 0000280A 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28335 0000280E 1F                      	pop	ds
 28336 0000280F C3                      	retn
 28337                                  
 28338                                  ; M020 : END
 28339                                  
 28340                                  ;----------------------------------------------------------------------------
 28341                                  
 28342                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28343                                  
 28344                                  %if 0
 28345                                  
 28346                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28347                                  ;include highexit.inc	; umb's, etc
 28348                                  
 28349                                  ; ----------------------------------------------------------------------
 28350                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28351                                  ; ----------------------------------------------------------------------
 28352                                  ; 07/04/2019 - Retro DOS v4.0
 28353                                  
 28354                                  ;******************************************************************************
 28355                                  ;
 28356                                  ; This file contains routines needed to parse and implement user-given
 28357                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28358                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28359                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28360                                  ;
 28361                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28362                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28363                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28364                                  ;    DH/LH module opts
 28365                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28366                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28367                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28368                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28369                                  ; available during the load.
 28370                                  ;
 28371                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28372                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28373                                  ; upper-memory block which was not specified by the user... in addition, if
 28374                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28375                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28376                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28377                                  ; free any UMBs so allocated.
 28378                                  ;
 28379                                  ; When a device driver loads, there is the additional problem of allocating its
 28380                                  ; initial load site; this should be restricted to the first UMB specified on
 28381                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28382                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28383                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28384                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28385                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28386                                  ;
 28387                                  ;******************************************************************************
 28388                                  
 28389                                  SWTCH	equ	'/'		; Switch character
 28390                                  
 28391                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28392                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28393                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28394                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28395                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28396                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28397                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28398                                  
 28399                                  CR	equ	0Dh		; Carriage Return
 28400                                  LF	equ	0Ah		; Line Feed
 28401                                  TAB	equ	09h		; Tab character (^I)
 28402                                  
 28403                                  ; -----------------------------------------------------------------------------
 28404                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28405                                  ; -----------------------------------------------------------------------------
 28406                                  ; ENTRY:       None
 28407                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28408                                  ; ERROR EXIT:  None
 28409                                  ; USES:        Flags, variables in highvar.inc
 28410                                  ; -----------------------------------------------------------------------------
 28411                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28412                                  ; are largely ignored, but it is initialized nonetheless.
 28413                                  ; -----------------------------------------------------------------------------
 28414                                  
 28415                                  InitVar:
 28416                                  	;pushreg <ax, cx, di, es>
 28417                                  	push	ax
 28418                                  	push	cx
 28419                                  	push	di
 28420                                  	push	es
 28421                                  
 28422                                  	;dataseg es			;Point ES into appropriate data segment
 28423                                  	push	cs
 28424                                  	pop	es
 28425                                  
 28426                                  	xor	ax,ax
 28427                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28428                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28429                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28430                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28431                                  					;Later is the # of the 1st spec'd UMB
 28432                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28433                                  
 28434                                  	cld
 28435                                  
 28436                                  	mov	cx,MAXUMB ; 16		;For each entry
 28437                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28438                                  	rep	stosb			;	Store 0
 28439                                  
 28440                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28441                                  	mov	di,UmbSize		;on the UmbSize array,
 28442                                  	rep	stosw			;	Store 0
 28443                                  
 28444                                  	;normseg es			; Return ES
 28445                                  
 28446                                  	;popreg	<es, di, cx, ax>
 28447                                  	pop	es
 28448                                  	pop	di
 28449                                  	pop	cx
 28450                                  	pop	ax	 	
 28451                                  
 28452                                  	retn
 28453                                  
 28454                                  ; -----------------------------------------------------------------------------
 28455                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28456                                  ; -----------------------------------------------------------------------------
 28457                                  ; ENTRY   : None
 28458                                  ; EXIT    : None
 28459                                  ; ERROR   : None
 28460                                  ; USES    : Flags, fm_umb, fm_strat
 28461                                  ; -----------------------------------------------------------------------------
 28462                                  
 28463                                  FixMem:
 28464                                  	push	ax
 28465                                  	push	bx
 28466                                  	push	cx
 28467                                  	push	dx
 28468                                  	push	es
 28469                                  
 28470                                  	call	fm_link		; Link in UMBs
 28471                                  
 28472                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28473                                  	jc	short fmX	; (if couldn't get it, leave now).
 28474                                  
 28475                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28476                                  
 28477                                  ; - Walk MCB Chain ------------------------------------------------------------
 28478                                  
 28479                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28480                                  	mov 	cx,dx		; in CX... and the last owner
 28481                                  	inc	dx		; in dx as we go through the loop:
 28482                                  
 28483                                  ; ------------------------------------------
 28484                                  ; FM10--DX  = last MCB's owner's PSP address
 28485                                  ;       CX  = last MCB's address (segment)
 28486                                  ; ------------------------------------------
 28487                                  
 28488                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28489                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28490                                  	or	bx,dx			; dx was owner of previous MCB
 28491                                  	jnz	short fm30		; If not both zero, don't cat.
 28492                                  
 28493                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28494                                  
 28495                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28496                                  	mov	es,cx			; Go back to prev MCB's address
 28497                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28498                                  
 28499                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28500                                  	add	bx,1			; And add one for the header
 28501                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28502                                  
 28503                                  	; ---------------------------------------------------------------------
 28504                                  
 28505                                  fm30:	mov	cx,es			; Put this address on the stack
 28506                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28507                                  
 28508                                  	mov	bx,es			; Move to the next MCB
 28509                                  	add	bx,[es:ARENA.SIZE]
 28510                                  	inc	bx
 28511                                  	mov	es,bx
 28512                                  
 28513                                  	;cmp	al,'Z'
 28514                                  	cmp	al,arena_signature_end
 28515                                  	jne	short fm10		; If signature != 'Z', there are more.
 28516                                  fmX:	
 28517                                  	call	fm_unlink		; Unlink UMBs
 28518                                  
 28519                                  	pop	es
 28520                                  	pop	dx
 28521                                  	pop	cx
 28522                                  	pop	bx
 28523                                  	pop	ax
 28524                                  
 28525                                  	retn
 28526                                  
 28527                                  ; -----------------------------------------------------------------------------
 28528                                  ;*** fm_link - links UMBs not already linked in
 28529                                  ; -----------------------------------------------------------------------------
 28530                                  ; ENTRY:    None
 28531                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28532                                  ; ERROR:    None
 28533                                  ; USES:     AX, BX, fm_umb
 28534                                  ; -----------------------------------------------------------------------------
 28535                                  
 28536                                  fm_link:
 28537                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28538                                  	int	21h			; Current link-state is now in al
 28539                                  
 28540                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28541                                  	;
 28542                                  	;push	es
 28543                                  	;push	cs
 28544                                  	;pop	es
 28545                                  	;mov	[es:fm_umb],al
 28546                                  	;pop	es
 28547                                  	
 28548                                  	mov	[cs:fm_umb],al
 28549                                  
 28550                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28551                                  	mov	bx,1
 28552                                  	int	21h
 28553                                  	retn
 28554                                  
 28555                                  ; -----------------------------------------------------------------------------
 28556                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28557                                  ; -----------------------------------------------------------------------------
 28558                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28559                                  ; EXIT:     None
 28560                                  ; ERROR:    None
 28561                                  ; USES:     AX, BX
 28562                                  ; -----------------------------------------------------------------------------
 28563                                  
 28564                                  fm_unlink:
 28565                                  	xor	bx,bx
 28566                                  	
 28567                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28568                                  	;
 28569                                  	;push	ds
 28570                                  	;push	cs
 28571                                  	;pop	ds
 28572                                  	;mov	bl,[fm_umb]	
 28573                                  	;pop	ds
 28574                                  	
 28575                                  	mov	bl,[cs:fm_umb]
 28576                                  
 28577                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28578                                  	int	21h			; so just use that, and call int 21h
 28579                                  	retn
 28580                                  
 28581                                  ; 08/04/2019 - Retro DOS v4.0
 28582                                  
 28583                                  ; -----------------------------------------------------------------------------
 28584                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28585                                  ; laid out in highvar.inc
 28586                                  ; -----------------------------------------------------------------------------
 28587                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28588                                  ; EXIT:     ES:SI points to first character in child program name
 28589                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28590                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28591                                  ; -----------------------------------------------------------------------------
 28592                                  ; Error codes (in AX if carry set on return):
 28593                                  ;
 28594                                  PV_InvArg	equ	1	; Invalid argument passed
 28595                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28596                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28597                                  ;
 28598                                  ; This routine exects ES:SI to point to a string much like the following:
 28599                                  ;    "/S/L:1,200;2 module options"
 28600                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28601                                  ; required, though that's what this routine is supposed to parse.
 28602                                  ;
 28603                                  optS		equ	'S'	; /S
 28604                                  optL		equ	'L'	; /L:...
 28605                                  ;
 28606                                  ; -----------------------------------------------------------------------------
 28607                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28608                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28609                                  ;     lh /l:1,1000;2 print/d:lpt2
 28610                                  ; the arguments would look like (one per line):
 28611                                  ;     lh
 28612                                  ;     /l
 28613                                  ;     1
 28614                                  ;     1000
 28615                                  ;     2
 28616                                  ;     print
 28617                                  ;     /d
 28618                                  ;     :lpt2
 28619                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28620                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28621                                  ; of the number of arguments LH will need to skip in order to get to the
 28622                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28623                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28624                                  ; for:
 28625                                  ;    Each /L
 28626                                  ;    Each /S (there should be only one)
 28627                                  ;    Each UMB number (they follow ":" or ";")
 28628                                  ;    Each UMB size   (they follow ",")
 28629                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28630                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28631                                  ; -----------------------------------------------------------------------------
 28632                                  
 28633                                  ParseVar:
 28634                                  	;pushreg <di, ds, es>
 28635                                  	push	di
 28636                                  	push	ds
 28637                                  	push	es
 28638                                  
 28639                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28640                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28641                                  	cld
 28642                                  
 28643                                  ; ------------------------------------------------
 28644                                  ; PV10--ES:SI = any whitespace on the command-line
 28645                                  ; ------------------------------------------------
 28646                                  
 28647                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28648                                  	call	isWhite
 28649                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28650                                  	;cmp	al,'/'
 28651                                  	cmp	al,SWTCH
 28652                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28653                                  
 28654                                  	dec	si		; Backup--it's now "odule options", and we need
 28655                                  	clc			; that "m" we just read (or whatever it is).
 28656                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28657                                  
 28658                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28659                                  	;toUpper al		; So we make it upper-case, and...
 28660                                  	and	al,0DFh
 28661                                  	;cmp	al,'S'
 28662                                  	cmp	al,optS		; just read 'S'?
 28663                                  	jne	short pv30
 28664                                  
 28665                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28666                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28667                                  
 28668                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28669                                  	;
 28670                                  	;push	es
 28671                                  	;push	cs
 28672                                  	;pop	es
 28673                                  	;mov	[es:fUmbTiny],1	
 28674                                  	;pop	es
 28675                                  
 28676                                  	mov	byte [cs:fUmbTiny],1
 28677                                  
 28678                                  	jmp	short pv10	; possibly even "/L...".
 28679                                  
 28680                                  pv30:	;cmp	al,'L'
 28681                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28682                                  	jne	short pvE1		; switch!
 28683                                  
 28684                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28685                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28686                                  
 28687                                  	call	parseL
 28688                                  	jnc	short pv10	; If no carry, go back and look for more
 28689                                  
 28690                                  	dec	si		; Else, back up and exit.
 28691                                  	jmp	short pvErr	; AX has already been set by parseL
 28692                                  
 28693                                  pvE1:	;mov	ax,3
 28694                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28695                                  pvErr:	dec	si
 28696                                  	dec	si
 28697                                  	stc
 28698                                  pvX:	;popreg	<es, ds, di>
 28699                                  	pop	es
 28700                                  	pop	ds
 28701                                  	pop	di
 28702                                  	retn
 28703                                  
 28704                                  ; -----------------------------------------------------------------------------
 28705                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28706                                  ; -----------------------------------------------------------------------------
 28707                                  ; ENTRY:    ES:SI points to colon
 28708                                  ; EXIT:     ES:SI points to first character not parsed
 28709                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28710                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28711                                  ; -----------------------------------------------------------------------------
 28712                                  ; If the string here is terminated with anything other than whitespace or a
 28713                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28714                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28715                                  ; makes sure the app /L: is reported as being the culprit.
 28716                                  ; -----------------------------------------------------------------------------
 28717                                  
 28718                                  parseL:
 28719                                  	lodsb
 28720                                  	cmp	al,':'		; Make sure they did /L:
 28721                                  	jne	short plE1	; If they didn't, return with carry set.
 28722                                  
 28723                                  ; ------------------------------------------
 28724                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28725                                  ; ------------------------------------------
 28726                                  
 28727                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28728                                  	jc	short plE2	; And error if it's a bad number.
 28729                                  	call	convUMB		; Convert any address to a UMB number
 28730                                  
 28731                                  	mov	cl,al		; Remember the UMB number
 28732                                  	call	stowUMB		; Mark this UMB # as used;
 28733                                  	jc	short plE2	; If it was already marked, it'll error
 28734                                  
 28735                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28736                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28737                                  
 28738                                  	lodsb
 28739                                  	cmp	al,';'		; Did "umb;" ?
 28740                                  	je	short pl10	; Yep: go back and get another UMB.
 28741                                  
 28742                                  	call	isWhite		; Did "umb " ?
 28743                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28744                                  
 28745                                  	call	isEOL		; Did "umb" ?
 28746                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28747                                  
 28748                                  	;cmp	al,'/'
 28749                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 28750                                  	je	short plSwX	; If so, back up ES:SI one character and return
 28751                                  
 28752                                  	cmp	al,','		; Did "umb," ?
 28753                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 28754                                  
 28755                                  ; --- Read a size -------------------------------------------------------------
 28756                                  
 28757                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 28758                                  	jc	short plE1	; And error if it's a bad size.
 28759                                  
 28760                                  	call	toPara		; Convert from bytes to paragraphs
 28761                                  
 28762                                  	call	stowSiz		; CL still has the UMB number for this routine
 28763                                  
 28764                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 28765                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28766                                  
 28767                                  	lodsb
 28768                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 28769                                  	je	short pl10	;
 28770                                  
 28771                                  	call	isWhite		; Did it end with whitespace?
 28772                                  	jz	short plX	; If so, we're done here--go back.
 28773                                  
 28774                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 28775                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28776                                  
 28777                                  	;cmp	al,'/'
 28778                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 28779                                  	je	short plSwX	; If so, again, we're done here.
 28780                                  plE1:	
 28781                                  	;mov	ax,1
 28782                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 28783                                  	dec	si
 28784                                  	stc
 28785                                  	retn
 28786                                  
 28787                                  plE2:	;mov	ax,2
 28788                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 28789                                  	; 12/12/2022
 28790                                  	; cf=1
 28791                                  	;stc
 28792                                  	retn
 28793                                  plSwX:	
 28794                                  	dec	si		; If we hit a '/' character, back up one char
 28795                                  				; so the whitespace checker will see it too.
 28796                                  plX:	; 12/12/2022
 28797                                  	; cf=0
 28798                                  	;clc			; Then just return with carry clear, so
 28799                                  	retn			; ParseVar will go about its business.
 28800                                  
 28801                                  ; -----------------------------------------------------------------------------
 28802                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 28803                                  ; -----------------------------------------------------------------------------
 28804                                  ; ENTRY:    None
 28805                                  ; EXIT:     None
 28806                                  ; ERROR:    None
 28807                                  ; USES:     fm_argc, flags
 28808                                  ; -----------------------------------------------------------------------------
 28809                                  
 28810                                  ;incArgc:
 28811                                  	;push	ax
 28812                                  
 28813                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 28814                                  
 28815                                  	;mov	al,[cs:fm_argc]
 28816                                  
 28817                                  	;inc	al		; Increment it,
 28818                                  
 28819                                  	;;putdata fm_argc, al	; And store it right back.
 28820                                  
 28821                                  	;mov	[cs:fm_argc],al
 28822                                  
 28823                                  	;pop	ax
 28824                                  	;retn
 28825                                  
 28826                                  ; -----------------------------------------------------------------------------
 28827                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 28828                                  ; -----------------------------------------------------------------------------
 28829                                  ; ENTRY:    AL contains character to test
 28830                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 28831                                  ; ERROR:    None
 28832                                  ; USES:     ZF
 28833                                  ; -----------------------------------------------------------------------------
 28834                                  
 28835                                  isEOL:
 28836                                  	cmp	al,0		; Null-terminator
 28837                                  	je	short ieX
 28838                                  	cmp	al,CR ; 0Dh	; Carriage Return
 28839                                  	je	short ieX
 28840                                  	cmp	al,LF ; 0Ah	; LineFeed
 28841                                  ieX:	
 28842                                  	retn
 28843                                  
 28844                                  ; -----------------------------------------------------------------------------
 28845                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 28846                                  ; -----------------------------------------------------------------------------
 28847                                  ; ENTRY:    AL contains character to test
 28848                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 28849                                  ; ERROR:    None
 28850                                  ; USES:     ZF
 28851                                  ; -----------------------------------------------------------------------------
 28852                                  
 28853                                  isWhite:
 28854                                  	cmp	al,' '		; Space
 28855                                  	je	short iwX
 28856                                  	cmp	al,'='		; Equals (treat as whitespace)
 28857                                  	je	short iwX
 28858                                  	cmp	al,tab ; 9	; Tab
 28859                                  iwX:	
 28860                                  	retn
 28861                                  
 28862                                  ; -----------------------------------------------------------------------------
 28863                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 28864                                  ; -----------------------------------------------------------------------------
 28865                                  ; ENTRY:    AL contains UMB number
 28866                                  ; EXIT:     None
 28867                                  ; ERROR:    None
 28868                                  ; USES:     Flags, variables in highvar.inc
 28869                                  ; -----------------------------------------------------------------------------
 28870                                  
 28871                                  unMarkUMB:
 28872                                  	push	ax
 28873                                  	push	bx
 28874                                  	push	di
 28875                                  	push	es
 28876                                  
 28877                                  	push	cs
 28878                                  	pop	es
 28879                                  
 28880                                  	xor	ah,ah
 28881                                  	mov	bx,ax
 28882                                  
 28883                                  	; 19/04/2019
 28884                                  	
 28885                                  	;mov	byte [es:bx+UmbUsed],0
 28886                                  	mov	[es:bx+UmbUsed],ah ; 0
 28887                                  
 28888                                  	cmp	[es:UmbLoad],al
 28889                                  	jne	short umu10
 28890                                  
 28891                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 28892                                  	mov	[es:UmbLoad],ah ; 0
 28893                                  umu10:	
 28894                                  	pop	es
 28895                                  	pop	di
 28896                                  	pop	bx
 28897                                  	pop	ax
 28898                                  	retn
 28899                                  
 28900                                  ; -----------------------------------------------------------------------------
 28901                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 28902                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 28903                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 28904                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 28905                                  ; -----------------------------------------------------------------------------
 28906                                  ; ENTRY:    AL contains UMB number, as specified by the user
 28907                                  ; EXIT:     None
 28908                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 28909                                  ; USES:     AX, Flags, variables in highvar.inc
 28910                                  ; -----------------------------------------------------------------------------
 28911                                  
 28912                                  stowUMB:
 28913                                  	cmp	al,MAXUMB ; 16
 28914                                  	jb	short su10
 28915                                  	stc
 28916                                  	retn			; Ooops-- UMB>=MAXUMB
 28917                                  su10:	
 28918                                  	push	bx
 28919                                  	push	di
 28920                                  	push	si
 28921                                  	push	ds
 28922                                  	push	es
 28923                                  	push	cs
 28924                                  	pop	es
 28925                                  	push	cs
 28926                                  	pop	ds
 28927                                  	
 28928                                  	;cmp	byte [UmbLoad],0FFh
 28929                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 28930                                  	jne	short su20
 28931                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 28932                                  su20:	
 28933                                  	or	al,al		; If they gave UMB 0, there's really nothing
 28934                                  	jz	short su30	; that we should do here.
 28935                                  
 28936                                  	mov	bl,al
 28937                                  	xor	bh,bh
 28938                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 28939                                  
 28940                                  	xchg	[es:bx+UmbUsed],al
 28941                                  
 28942                                  	or	al,al		; If it was already 1, then al==1... and that
 28943                                  	jz	short su30	; means an error.
 28944                                  
 28945                                  	stc			; OOOPS!  This one's been used before.  :(
 28946                                  su30:	
 28947                                  	pop	es
 28948                                  	pop	ds
 28949                                  	pop	si
 28950                                  	pop	di
 28951                                  	pop	bx
 28952                                  	retn
 28953                                  
 28954                                  ; -----------------------------------------------------------------------------
 28955                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 28956                                  ; -----------------------------------------------------------------------------
 28957                                  ; ENTRY:    CL contains UMB number, AX contains size
 28958                                  ; EXIT:     None
 28959                                  ; ERROR:    None
 28960                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 28961                                  ; -----------------------------------------------------------------------------
 28962                                  
 28963                                  ; 13/05/2019
 28964                                  
 28965                                  stowSiz:
 28966                                  	push	bx
 28967                                  	;push	di ; ?
 28968                                  	push	es
 28969                                  
 28970                                  	push	cs
 28971                                  	pop	es	
 28972                                  
 28973                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 28974                                  	mov	bh,0			;     bx==UMB number, AX==size
 28975                                  	shl	bl,1			;     bx==offset into array, AX=size
 28976                                  	mov	[es:bx+UmbSize],ax	; Store the size
 28977                                  	
 28978                                  	pop	es
 28979                                  	;pop	di ; ?
 28980                                  	pop	bx
 28981                                  
 28982                                  	retn
 28983                                  
 28984                                  ; -----------------------------------------------------------------------------
 28985                                  ;*** toDigit - converts a character-digit to its binary counterpart
 28986                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 28987                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 28988                                  ; A-F are considered valid iff gnradix is 16.
 28989                                  ; -----------------------------------------------------------------------------
 28990                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 28991                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 28992                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 28993                                  ; USES:     CL, Flags
 28994                                  ; -----------------------------------------------------------------------------
 28995                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 28996                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 28997                                  ; will be 10 or 16.
 28998                                  ; -----------------------------------------------------------------------------
 28999                                  
 29000                                  gnradix:
 29001                                  	dw	0		; Must be a word--16x16 multiplication
 29002                                  
 29003                                  toDigit:
 29004                                  	cmp	word [cs:gnradix],16
 29005                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29006                                  
 29007                                  toDigit_hex:
 29008                                  	cmp	cl,'a'	; 61h
 29009                                  	jb	short td10
 29010                                  	cmp	cl,'f'	; 66h
 29011                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29012                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29013                                  	;clc			; <- CLC is implicit from last SUB
 29014                                  	retn
 29015                                  td10:	
 29016                                  	cmp	cl,'A'  ; 41h
 29017                                  	jb	short td20	; Below 'A'?  Not a letter...
 29018                                  	cmp	cl,'F'	; 46h
 29019                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29020                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29021                                  	;clc			; <- CLC is implicit from last SUB
 29022                                  	retn
 29023                                  toDigit_dec:
 29024                                  td20:	
 29025                                  	cmp	cl,'0'		; If less than zero,
 29026                                  	;jb	short tdE	; Done.
 29027                                  	jb	short tdEr ; 08/04/2019
 29028                                  	cmp	cl,'9'		; Or, if greater than nine,
 29029                                  	ja	short tdE	; Done.
 29030                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29031                                  	;clc			; <- CLC is implicit from last SUB
 29032                                  	retn
 29033                                  tdE:	
 29034                                  	stc
 29035                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29036                                  	retn
 29037                                  
 29038                                  ; -----------------------------------------------------------------------------
 29039                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29040                                  ; -----------------------------------------------------------------------------
 29041                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29042                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29043                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29044                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29045                                  ; -----------------------------------------------------------------------------
 29046                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29047                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29048                                  ; will be 10 or 16.
 29049                                  ; -----------------------------------------------------------------------------
 29050                                  
 29051                                  ; 08/04/2019 - Retro DOS v4.0
 29052                                  
 29053                                  GetXNum:
 29054                                  	;pushreg <bx, cx, ds>
 29055                                  	push	bx
 29056                                  	push	cx
 29057                                  	push	ds
 29058                                  
 29059                                  	cld
 29060                                  	xor	ax,ax
 29061                                  	xor	bx,bx
 29062                                  	xor	cx,cx
 29063                                  	xor	dx,dx			; Start with 0 (makes sense)
 29064                                  
 29065                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29066                                  
 29067                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29068                                  	;call	toDigit
 29069                                  	call	toDigit_dec
 29070                                  	jc	short gxnE		; If it's not a digit, leave now.
 29071                                  
 29072                                  	or	cl,cl
 29073                                  	jnz	short gxn20		; Doesn't have '0x'
 29074                                  	mov	cl,[es:si+1]
 29075                                  	cmp	cl,'x'			; Either 'x'...
 29076                                  	je	short gxn10
 29077                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29078                                  	jne	short gxn20
 29079                                  
 29080                                  gxn10:	
 29081                                  	mov	word [cs:gnradix], 16
 29082                                  	inc	si			; Since we read "0x", march over it.
 29083                                  	inc	si
 29084                                  
 29085                                  ; ------------------------------------------------------
 29086                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29087                                  ;        DX:AX = current total
 29088                                  ;        BX    = 0
 29089                                  ;        CH    = 0
 29090                                  ; ------------------------------------------------------
 29091                                  
 29092                                  gxn20:	
 29093                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29094                                  	inc	si
 29095                                  
 29096                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29097                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29098                                  
 29099                                  	call	mul32		; Multiply DX:AX by gnradix
 29100                                  	jc	short gxnX	; (if it's too big, error out)
 29101                                  
 29102                                  	add	ax,cx		; Add the digit
 29103                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29104                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29105                                  	;jmp	short gxn20
 29106                                  	jnc	short gxn20
 29107                                  gxnE:	
 29108                                  	;stc			; In this case, we need to set the carry
 29109                                  	jmp	short gxnX	; and leave--there were no digits given.
 29110                                  gxnQ:	
 29111                                  	dec	si		; Don't read in the offensive character.
 29112                                  	clc			; And clear carry, so they know it's okay.
 29113                                  gxnX:	
 29114                                  	pop	ds
 29115                                  	pop	cx
 29116                                  	pop	bx
 29117                                  	retn
 29118                                  
 29119                                  ; -----------------------------------------------------------------------------
 29120                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29121                                  ; -----------------------------------------------------------------------------
 29122                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29123                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29124                                  ; ERROR:   Carry set if number was too large
 29125                                  ; USES:    Flags, AX, DX
 29126                                  ; -----------------------------------------------------------------------------
 29127                                  
 29128                                  mul32:
 29129                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29130                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29131                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29132                                  	jc	short m32E	; Too big?
 29133                                  
 29134                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29135                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29136                                  
 29137                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29138                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29139                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29140                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29141                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29142                                  	retn
 29143                                  m32E:	
 29144                                  	pop	ax
 29145                                  	retn
 29146                                  
 29147                                  ; -----------------------------------------------------------------------------
 29148                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29149                                  ; -----------------------------------------------------------------------------
 29150                                  ; ENTRY:   DX:AX = the number to be divided
 29151                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29152                                  ; ERROR:   None
 29153                                  ; USES:    Flags, AX, DX
 29154                                  ; -----------------------------------------------------------------------------
 29155                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29156                                  ;       can't ensure a 386 host machine. Sorry.
 29157                                  ; -----------------------------------------------------------------------------
 29158                                  
 29159                                  toPara:
 29160                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29161                                  
 29162                                  	mov	cl,4		;
 29163                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29164                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29165                                  	mov	cl,12
 29166                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29167                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29168                                  
 29169                                  	pop	cx
 29170                                  	retn
 29171                                  
 29172                                  ; -----------------------------------------------------------------------------
 29173                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29174                                  ; -----------------------------------------------------------------------------
 29175                                  ; ENTRY:  Nothing
 29176                                  ; EXIT:   AX contains 0x9FFF for most systems
 29177                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29178                                  ; USES:   Flags, AX
 29179                                  ; -----------------------------------------------------------------------------
 29180                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29181                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29182                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29183                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29184                                  ; -----------------------------------------------------------------------------
 29185                                  
 29186                                  UmbHead:
 29187                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29188                                  
 29189                                  	;push	si ; ?
 29190                                  	;push	ds ; ? 
 29191                                  	;push	es
 29192                                  	;push	bx ; *	
 29193                                  
 29194                                  	; 09/04/2019
 29195                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29196                                  
 29197                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29198                                  	int	21h
 29199                                  
 29200                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29201                                  	cmp	ax,0FFFFh
 29202                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29203                                  
 29204                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29205                                  	;jmp	short uhX
 29206                                  	; 12/12/2022
 29207                                  	retn
 29208                                  uhE:	
 29209                                  	stc
 29210                                  uhX:	
 29211                                  	;pop	bx ; *
 29212                                  	;pop	es
 29213                                  	;pop	ds ; ?
 29214                                  	;pop	si ; ?
 29215                                  	retn
 29216                                  
 29217                                  ; -----------------------------------------------------------------------------
 29218                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29219                                  ; -----------------------------------------------------------------------------
 29220                                  ; ENTRY:  ES:0 should point to a valid MCB
 29221                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29222                                  ; USES:   Flags
 29223                                  ; -----------------------------------------------------------------------------
 29224                                  
 29225                                  isSysMCB:
 29226                                  	;push	ax
 29227                                  
 29228                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29229                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29230                                  	;je	short ism10
 29231                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29232                                  	;;je	short ism10
 29233                                  	;;jmp	short ismX		; Anything else isn't.
 29234                                  	;jne	short ismX
 29235                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29236                                  	jne	short ismX 
 29237                                  ism10:	
 29238                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29239                                  	;cmp	ax,'SC' ; 4353h
 29240                                  	cmp	word [es:ARENA.NAME],'SC'
 29241                                  ismX:	
 29242                                  	;pop	ax
 29243                                  	retn
 29244                                  
 29245                                  ; 09/04/2019 - Retro DOS v4.0
 29246                                  
 29247                                  ; -----------------------------------------------------------------------------
 29248                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29249                                  ; -----------------------------------------------------------------------------
 29250                                  ; ENTRY:  AX contains a segment address
 29251                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29252                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29253                                  ; USES:   Flags, AX
 29254                                  ; -----------------------------------------------------------------------------
 29255                                  ; An address in the following areas is treated as:
 29256                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29257                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29258                                  ;      ...
 29259                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29260                                  ; -----------------------------------------------------------------------------
 29261                                  
 29262                                  AddrToUmb:
 29263                                  	push	cx
 29264                                  	push	dx
 29265                                  	push	es
 29266                                  
 29267                                  	mov	dx,ax		; DX = address to search for
 29268                                  
 29269                                  	call	UmbHead		; AX = first segment
 29270                                  	jc	short atuE	; If it couldn't get it, error out.
 29271                                  
 29272                                  	mov	es,ax		; ES = first UMB segment
 29273                                  	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29274                                  
 29275                                  ; ----------------------------------------
 29276                                  ; ATU10--ES - Current MCB address
 29277                                  ;        DX - Address given for conversion
 29278                                  ;        CX - Current UMB #
 29279                                  ; ----------------------------------------
 29280                                  
 29281                                  atu10:	mov	ax,es
 29282                                          cmp	ax,dx		; Present segment >= given segment?
 29283                                  	jae	short atuX	; Yep--done.
 29284                                  
 29285                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29286                                  	jnz	short atu20
 29287                                  
 29288                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29289                                  atu20:	
 29290                                  	mov	al,[es:ARENA.SIGNATURE]
 29291                                  	cmp	al,arena_signature_end  ; 'Z'
 29292                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29293                                  
 29294                                  	;NextMCB es, ax
 29295                                  
 29296                                  	mov     ax,es
 29297                                  	;add	ax,[es:3]
 29298                                  	add     ax,[es:ARENA.SIZE]
 29299                                  	inc     ax
 29300                                  	mov     es,ax
 29301                                  	
 29302                                  	jmp	short atu10
 29303                                  
 29304                                  ; -----------------------------------------------------------------------------
 29305                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29306                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29307                                  ; -----------------------------------------------------------------------------
 29308                                  
 29309                                  atu30:	
 29310                                  	mov	ax,es
 29311                                  	add	ax,[es:ARENA.SIZE]
 29312                                  	cmp	ax,dx		; Present >= given?
 29313                                  	jae	short atuX	; Yep! It _was_ inside.
 29314                                  atuE:	
 29315                                  	xor	cx,cx		; Else, fall through with UMB # == -1
 29316                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29317                                  atuX:	
 29318                                  	mov	ax, cx		; Return the UMB number in AX
 29319                                  	
 29320                                  	pop	es	
 29321                                  	pop	dx
 29322                                  	pop	cx
 29323                                  	retn
 29324                                  
 29325                                  ; -----------------------------------------------------------------------------
 29326                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29327                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29328                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29329                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29330                                  ; -----------------------------------------------------------------------------
 29331                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29332                                  ; EXIT:   AX will contain a UMB number
 29333                                  ; ERROR:  None
 29334                                  ; USES:   Flags, AX
 29335                                  ; -----------------------------------------------------------------------------
 29336                                  
 29337                                  convUMB:
 29338                                  	cmp	word [cs:gnradix],16
 29339                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29340                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29341                                  	cmp	ax,0FFFFh
 29342                                  	jne	short cu10
 29343                                  	inc	ax		; If too high, ignore it (make it conventional)
 29344                                  cu10:	
 29345                                  	retn
 29346                                  
 29347                                  ; -----------------------------------------------------------------------------
 29348                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29349                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29350                                  ; of the usual HIGH_FIRST.  See the code.
 29351                                  ; -----------------------------------------------------------------------------
 29352                                  ; ENTRY:  None
 29353                                  ; EXIT:   None
 29354                                  ; ERROR:  None
 29355                                  ; USES:   Flags, fm_umb, fm_strat
 29356                                  ; -----------------------------------------------------------------------------
 29357                                  
 29358                                  setUMBs:
 29359                                  	push	ax
 29360                                  	push	bx
 29361                                  	call	fm_link
 29362                                  	pop	bx
 29363                                  	pop	ax
 29364                                  	retn
 29365                                  
 29366                                  ; -----------------------------------------------------------------------------
 29367                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29368                                  ; -----------------------------------------------------------------------------
 29369                                  ; ENTRY:  None
 29370                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29371                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29372                                  ; ERROR:  None
 29373                                  ; USES:   Flags, fm_strat, fm_umb
 29374                                  ; -----------------------------------------------------------------------------
 29375                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29376                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29377                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29378                                  ; such that the load UMB is too small, and shouldn't be used.
 29379                                  ; -----------------------------------------------------------------------------
 29380                                  
 29381                                  loadLow:
 29382                                  	;push	ds
 29383                                  	;push	cs		; Point DS into appropriate data segment
 29384                                  	;pop	ds	
 29385                                  
 29386                                  	;mov	al,[UmbLoad]
 29387                                  	mov	al,[cs:UmbLoad]
 29388                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29389                                  	jne	short ll10
 29390                                  
 29391                                  	stc
 29392                                  ll15:
 29393                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29394                                  	;stc
 29395                                  	;jmp	short llX
 29396                                  	retn
 29397                                  ll10:	
 29398                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29399                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29400                                  
 29401                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29402                                  	retn
 29403                                  
 29404                                  	;mov	al,1
 29405                                  	;clc
 29406                                  ;llX:
 29407                                  	;pop	ds		; Return DS to where it was
 29408                                  	;retn
 29409                                  
 29410                                  ; -----------------------------------------------------------------------------
 29411                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29412                                  ; -----------------------------------------------------------------------------
 29413                                  ; ENTRY:  None
 29414                                  ; EXIT:   None
 29415                                  ; ERROR:  None
 29416                                  ; USES:   Flags, fm_strat, fm_umb
 29417                                  ; -----------------------------------------------------------------------------
 29418                                  
 29419                                  HideUMBs:
 29420                                  	push	ax
 29421                                  	push	cx
 29422                                  	push	ds
 29423                                  	push	es
 29424                                  
 29425                                  	call	UmbTest		; See if we REALLY linked in anything...
 29426                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29427                                  
 29428                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29429                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29430                                  
 29431                                  	;putdata fInHigh,1	; Remember that we're now running high
 29432                                  	mov	byte [cs:fInHigh],1
 29433                                  
 29434                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29435                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29436                                  
 29437                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29438                                  	je	short husX	; then we shouldn't do this loop:
 29439                                  
 29440                                  	xor	cx,cx
 29441                                  
 29442                                  ; -----------------------------------------------
 29443                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29444                                  ; -----------------------------------------------
 29445                                  
 29446                                  hus10:	inc	cx		; For each UMB:
 29447                                  	cmp	cx,MAXUMB ; 16
 29448                                  	jae	short hus20
 29449                                  
 29450                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29451                                  	push	es
 29452                                  	call	findUMB		; valid range of UMBs)
 29453                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29454                                  	jc	short hus20
 29455                                  
 29456                                  	call	_hideUMB_	; hide what we need to hide.
 29457                                  
 29458                                  	jmp	short hus10
 29459                                  hus20:	
 29460                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29461                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29462                                  
 29463                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29464                                  	jnz	short husX	; If not, we're done.
 29465                                  
 29466                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29467                                  husX:	
 29468                                  	pop	es
 29469                                  	pop	ds
 29470                                  	pop	cx
 29471                                  	pop	ax
 29472                                  	retn
 29473                                  
 29474                                  ; -----------------------------------------------------------------------------
 29475                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29476                                  ; -----------------------------------------------------------------------------
 29477                                  ; ENTRY:  None
 29478                                  ; EXIT:   AL == load UMB
 29479                                  ; ERROR:  None
 29480                                  ; USES:   Flags, AX
 29481                                  ; -----------------------------------------------------------------------------
 29482                                  
 29483                                  ;GetLoadUMB:
 29484                                  ;	;getdata al, UmbLoad
 29485                                  ;	push	ds
 29486                                  ;	push	cs
 29487                                  ;	pop	ds
 29488                                  ;	mov	al,[UmLoad]
 29489                                  ;	pop	ds
 29490                                  ;	retn
 29491                                  
 29492                                  ; -----------------------------------------------------------------------------
 29493                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29494                                  ; -----------------------------------------------------------------------------
 29495                                  ; ENTRY:  None
 29496                                  ; EXIT:   AX == load UMB minimum size
 29497                                  ; ERROR:  None
 29498                                  ; USES:   Flags, AX
 29499                                  ; -----------------------------------------------------------------------------
 29500                                  
 29501                                  GetLoadSize:
 29502                                  	; 09/04/2019 - Retro DOS v4.0
 29503                                  	mov	al,[cs:UmbLoad]
 29504                                  	jmp	short GetSize
 29505                                  
 29506                                  	;push	bx
 29507                                  	;;push	si
 29508                                  	;push	ds
 29509                                  	;push	cs
 29510                                  	;pop	ds
 29511                                  
 29512                                  	;mov	al,[UmbLoad]
 29513                                  
 29514                                  	;xor	ah,ah			;    ax==UMB
 29515                                  	;mov	bx,UmbSize		;    bx==array
 29516                                  	;shl	al,1	                ;    ax==offset
 29517                                  	;;add	ax,bx			;    ax==element index
 29518                                  	;;mov	si,ax			; ds:si==element index
 29519                                  
 29520                                  	;;lodsw				;    ax==size
 29521                                  
 29522                                  	;add	bx,ax
 29523                                  	;mov	ax,[bx]
 29524                                  
 29525                                  	;pop	ds
 29526                                  	;;pop	si
 29527                                  	;pop	bx
 29528                                  	;retn
 29529                                  
 29530                                  ; -----------------------------------------------------------------------------
 29531                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29532                                  ; -----------------------------------------------------------------------------
 29533                                  ; ENTRY:  AL == a UMB number
 29534                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29535                                  ; ERROR:  None
 29536                                  ; USES:   Flags, AX
 29537                                  ; -----------------------------------------------------------------------------
 29538                                  
 29539                                  GetSize:
 29540                                  	; 09/04/2019 - Retro DOS v4.0
 29541                                  
 29542                                  	push	bx
 29543                                  	;push	si
 29544                                  	;push	ds
 29545                                  	;push	cs
 29546                                  	;pop	ds
 29547                                  
 29548                                  	xor	ah,ah			;    ax==UMB
 29549                                  	mov	bx,UmbSize		;    bx==array
 29550                                  	shl	al,1	                ;    ax==offset
 29551                                  	;add	ax,bx			;    ax==element index
 29552                                  	;mov	si,ax			; ds:si==element index
 29553                                  
 29554                                  	;lodsw				;    ax==size
 29555                                  
 29556                                  	add	bx,ax
 29557                                  	;mov	ax,[bx]
 29558                                  	mov	ax,[cs:bx]
 29559                                  
 29560                                  	;pop	ds
 29561                                  	;pop	si
 29562                                  	pop	bx
 29563                                  	retn
 29564                                  
 29565                                  ; -----------------------------------------------------------------------------
 29566                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29567                                  ; -----------------------------------------------------------------------------
 29568                                  ; ENTRY:   AL == new load UMB
 29569                                  ; EXIT:    None
 29570                                  ; ERROR:   None
 29571                                  ; USES:    Flags, AX
 29572                                  ; -----------------------------------------------------------------------------
 29573                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29574                                  ;          time you would ever need this, so that's okay.
 29575                                  ; -----------------------------------------------------------------------------
 29576                                  
 29577                                  ;StoLoadUMB:
 29578                                  ;	;putdata UmbLoad, al
 29579                                  ;	push	es
 29580                                  ;	push	cs
 29581                                  ;	pop	es
 29582                                  ;	mov	[es:UmbLoad],al
 29583                                  ;	pop	es
 29584                                  ;	retn
 29585                                  
 29586                                  ; -----------------------------------------------------------------------------
 29587                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29588                                  ; -----------------------------------------------------------------------------
 29589                                  ; ENTRY:  AL == new load size
 29590                                  ; EXIT:   None
 29591                                  ; ERROR:  None
 29592                                  ; USES:   Flags, AX
 29593                                  ; -----------------------------------------------------------------------------
 29594                                  
 29595                                  StoLoadSize:
 29596                                  	push	dx
 29597                                  
 29598                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29599                                  	;
 29600                                  	;push	ds
 29601                                  	;push	cs
 29602                                  	;pop	ds
 29603                                  	;mov	dl,[UmbLoad]
 29604                                  	;pop	ds	
 29605                                  
 29606                                  	mov	dl,[cs:UmbLoad]
 29607                                  
 29608                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29609                                  	je	short sls10
 29610                                  
 29611                                  	call	stowSiz			; We've got a function to do just this
 29612                                  sls10:	
 29613                                  	pop	dx
 29614                                  	retn
 29615                                  
 29616                                  ; -----------------------------------------------------------------------------
 29617                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29618                                  ; -----------------------------------------------------------------------------
 29619                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29620                                  ; EXIT:     None; free elements in UMB marked as hidden
 29621                                  ; ERROR:    None
 29622                                  ; USES:     Flags
 29623                                  ; -----------------------------------------------------------------------------
 29624                                  
 29625                                  hideUMB:
 29626                                  	push	ax
 29627                                  	push	es
 29628                                  
 29629                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29630                                  	jc	short huX
 29631                                  
 29632                                  ; ------------------------------------------------
 29633                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29634                                  ;            we're not in the same UMB, so exit.
 29635                                  ; ------------------------------------------------
 29636                                  
 29637                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29638                                  	jz	short huX	; If it is, we've finished the UMB.
 29639                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29640                                  	or	word [es:ARENA.OWNER],0
 29641                                  	jnz	short hu20
 29642                                  
 29643                                  	call	hideMCB
 29644                                  hu20:	
 29645                                  	mov	al,[es:ARENA.SIGNATURE]
 29646                                  	cmp	al,arena_signature_end  ;'Z'
 29647                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29648                                  
 29649                                  	;NextMCB es, ax		; Go on forward.
 29650                                  	mov     ax,es
 29651                                  	;add	ax,[es:3]
 29652                                  	add     ax,[es:ARENA.SIZE]
 29653                                  	inc     ax
 29654                                  	mov     es,ax
 29655                                  
 29656                                  	jmp	short hu10
 29657                                  huX:	
 29658                                  	pop	es
 29659                                  	pop	ax
 29660                                  	retn
 29661                                  
 29662                                  ; -----------------------------------------------------------------------------
 29663                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29664                                  ; -----------------------------------------------------------------------------
 29665                                  ; ENTRY:    None
 29666                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29667                                  ; ERROR:    None
 29668                                  ; USES:     Flags
 29669                                  ; -----------------------------------------------------------------------------
 29670                                  
 29671                                  isTiny:
 29672                                  	push	ax
 29673                                  
 29674                                  	;getdata al, fUmbTiny
 29675                                  	;
 29676                                  	;push	ds
 29677                                  	;push	cs
 29678                                  	;pop	ds
 29679                                  	;mov	al,[fUmbTiny]
 29680                                  	;pop	ds
 29681                                  
 29682                                  	mov	al,[cs:fUmbTiny]		
 29683                                  
 29684                                  	or	al,al
 29685                                  	pop	ax
 29686                                  	retn
 29687                                  
 29688                                  ; -----------------------------------------------------------------------------
 29689                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29690                                  ; -----------------------------------------------------------------------------
 29691                                  ; ENTRY:    ES:0 should point to an MCB
 29692                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29693                                  ; ERROR:    None
 29694                                  ; USES:     Flags
 29695                                  ; -----------------------------------------------------------------------------
 29696                                  
 29697                                  ;isFreeMCB:
 29698                                  ;	or	word [es:ARENA.OWNER],0
 29699                                  ;	retn
 29700                                  
 29701                                  ; -----------------------------------------------------------------------------
 29702                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29703                                  ; -----------------------------------------------------------------------------
 29704                                  ; ENTRY:    ES:0 should point to an MCB
 29705                                  ; EXIT:     None; MCB marked as HIDDEN
 29706                                  ; ERROR:    None
 29707                                  ; USES:     None
 29708                                  ; -----------------------------------------------------------------------------
 29709                                  
 29710                                  hideMCB:
 29711                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29712                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29713                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29714                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29715                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29716                                  	retn
 29717                                  
 29718                                  ; -----------------------------------------------------------------------------
 29719                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29720                                  ; -----------------------------------------------------------------------------
 29721                                  ; ENTRY:    ES:0 should point to an MCB
 29722                                  ; EXIT:     None; MCB marked as FREE
 29723                                  ; ERROR:    None
 29724                                  ; USES:     None
 29725                                  ; -----------------------------------------------------------------------------
 29726                                  
 29727                                  unHideMCB:
 29728                                  	push	ax
 29729                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29730                                  	mov	ax,'  ' ; 2020h
 29731                                  	mov	[es:ARENA.NAME+0],ax
 29732                                  	mov	[es:ARENA.NAME+2],ax
 29733                                  	mov	[es:ARENA.NAME+4],ax
 29734                                  	mov	[es:ARENA.NAME+6],ax
 29735                                  	pop	ax
 29736                                  	retn
 29737                                  
 29738                                  ; -----------------------------------------------------------------------------
 29739                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29740                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29741                                  ; -----------------------------------------------------------------------------
 29742                                  ; ENTRY:    AL should be to a valid UMB number
 29743                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29744                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29745                                  ; USES:     Flags, ES
 29746                                  ; -----------------------------------------------------------------------------
 29747                                  
 29748                                  findUMB:
 29749                                  	push	ax
 29750                                  	push	cx
 29751                                  	push	dx
 29752                                  
 29753                                  	xor	ah,ah		; Zap ah, so al==ax
 29754                                  
 29755                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 29756                                  
 29757                                  	call	UmbHead		; Returns first UMB segment in AX
 29758                                  	mov	es,ax
 29759                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 29760                                  
 29761                                  ; ---------------------------------------------
 29762                                  ; FU10--CX - This UMB number; 0 == conventional
 29763                                  ;       DX - The UMB number they're looking for
 29764                                  ;       ES - The current MCB address
 29765                                  ; ---------------------------------------------
 29766                                  
 29767                                  fu10:	
 29768                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 29769                                  	je	short fuX	; searching for--so exit.
 29770                                  
 29771                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29772                                  	jnz	short fu20
 29773                                  
 29774                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 29775                                  fu20:	
 29776                                  	mov	al,[es:ARENA.SIGNATURE]
 29777                                  	cmp	al,arena_signature_end ; 'Z'
 29778                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 29779                                  
 29780                                  	;NextMCB es, ax		; Go on forward.
 29781                                  	mov     ax,es
 29782                                  	;add	ax,[es:3]
 29783                                  	add     ax,[es:ARENA.SIZE]
 29784                                  	inc     ax
 29785                                  	mov     es,ax
 29786                                  
 29787                                  	jmp	short fu10
 29788                                  fuE:	
 29789                                  	stc
 29790                                  fuX:
 29791                                  	pop	dx
 29792                                  	pop	cx
 29793                                  	pop	ax		; The address is already in ES.
 29794                                  	retn
 29795                                  
 29796                                  ; -----------------------------------------------------------------------------
 29797                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 29798                                  ; -----------------------------------------------------------------------------
 29799                                  ; ENTRY:    AL should be to a valid UMB number
 29800                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 29801                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 29802                                  ; USES:     Flags, ES
 29803                                  ; -----------------------------------------------------------------------------
 29804                                  
 29805                                  BigFree:
 29806                                  	push	bx
 29807                                  	push	cx
 29808                                  
 29809                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 29810                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 29811                                  
 29812                                  	xor	bx,bx			; Segment address of largest free MCB
 29813                                  	xor	cx,cx			; Size of largest free MCB
 29814                                  
 29815                                  ; ---------------------------------------------
 29816                                  ; BF10--ES - Current MCB address
 29817                                  ;       BX - Address of largest free MCB so far
 29818                                  ;       CX - Size of largest free MCB so far
 29819                                  ; ---------------------------------------------
 29820                                  
 29821                                  bf10:	
 29822                                  	call	isSysMCB		; If we've left the MCB, we're done.
 29823                                  	jz	short bf30
 29824                                  
 29825                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 29826                                  	or	word [es:ARENA.OWNER],0
 29827                                  	jnz	short bf20
 29828                                  
 29829                                  	mov	ax,[es:ARENA.SIZE]
 29830                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 29831                                  	cmp	cx,ax
 29832                                  	jg	short bf20		; Unless we're bigger,
 29833                                  
 29834                                  	mov	bx,es			; Store this new element's address,
 29835                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 29836                                  	mov	cx,ax
 29837                                  
 29838                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 29839                                  	cmp	al,arena_signature_end	; 'Z'
 29840                                  	jz	short bf30		; 'Z' means this was the last MCB.
 29841                                  
 29842                                  	;NextMCB es,ax		; Go on forward.
 29843                                  	mov     ax,es
 29844                                  	;add	ax,[es:3]
 29845                                  	add     ax,[es:ARENA.SIZE]
 29846                                  	inc     ax
 29847                                  	mov     es,ax
 29848                                  
 29849                                  	jmp	short bf10
 29850                                  
 29851                                  bf30:	mov	es,bx			; Return the address
 29852                                  	mov	ax,cx			; Return the size
 29853                                  	or	bx,bx
 29854                                  	jnz	short bfX		; (if size==0, there's nothing free)
 29855                                  bfE:	
 29856                                  	stc
 29857                                  bfX:
 29858                                  	pop	cx
 29859                                  	pop	bx
 29860                                  	retn
 29861                                  
 29862                                  ; -----------------------------------------------------------------------------
 29863                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 29864                                  ; -----------------------------------------------------------------------------
 29865                                  ; ENTRY:    AL should be to a valid UMB number
 29866                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 29867                                  ; ERROR:    None
 29868                                  ; USES:     Flags
 29869                                  ; -----------------------------------------------------------------------------
 29870                                  
 29871                                  isSpecified:
 29872                                  	push	ax
 29873                                  
 29874                                  	xor	bh,bh
 29875                                  	mov	bl,al
 29876                                  
 29877                                  	;getdata al, DS:UmbUsed[bx]
 29878                                  	;
 29879                                  	;push	ds
 29880                                  	;push	cs
 29881                                  	;pop	ds
 29882                                  	;mov	al,[bx+UmbUsed]
 29883                                  	;pop	ds
 29884                                  	
 29885                                  	mov	al,[cs:bx+UmbUsed]
 29886                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 29887                                  
 29888                                  	pop	ax
 29889                                  	retn
 29890                                  
 29891                                  ; -----------------------------------------------------------------------------
 29892                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 29893                                  ; -----------------------------------------------------------------------------
 29894                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 29895                                  ; EXIT:     None; MCB broken if carry clear
 29896                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 29897                                  ; USES:     Flags
 29898                                  ; -----------------------------------------------------------------------------
 29899                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 29900                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 29901                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 29902                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 29903                                  ; minimum for performing a split.
 29904                                  ; -----------------------------------------------------------------------------
 29905                                  
 29906                                  MIN_SPLIT_SIZE	equ	20h
 29907                                  
 29908                                  shrinkMCB:
 29909                                  	;pushreg <bx, cx, es>
 29910                                  	push	bx
 29911                                  	push	cx
 29912                                  	push	es
 29913                                  
 29914                                  	mov	bx,ax			; Move things around... and
 29915                                  	mov	ax,es			; save this one for later.
 29916                                  
 29917                                  	mov	cx,[es:ARENA.SIZE]
 29918                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 29919                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 29920                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 29921                                  	; 18/12/2022
 29922                                  	cmp	cx,bx
 29923                                  	jb	short smE ; (*)
 29924                                  
 29925                                  	mov	dl,[es:ARENA.SIGNATURE]
 29926                                  	mov	cx,[es:ARENA.SIZE]
 29927                                  
 29928                                  	mov	[es:ARENA.SIZE],bx
 29929                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 29930                                  
 29931                                  	add	ax,bx
 29932                                  	inc	ax
 29933                                  	mov	es,ax			; Move to new arena area
 29934                                  
 29935                                  	mov	ax,cx
 29936                                  	sub	ax,bx
 29937                                  	; 12/12/2022
 29938                                  	; ax > 0
 29939                                  	dec	ax			; And prepare the new size
 29940                                  
 29941                                  	; 18/12/2022
 29942                                  	mov	[es:ARENA.SIGNATURE],dl
 29943                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 29944                                  	mov	[es:ARENA.SIZE],ax
 29945                                  	;mov	ax,'  ' ; 2020h
 29946                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 29947                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 29948                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 29949                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 29950                                  
 29951                                  	; 18/12/2022
 29952                                  	call	freeMCB	; (**)
 29953                                  
 29954                                  	; 12/12/2022
 29955                                  	; cf=0
 29956                                  	;clc
 29957                                  	; 18/12/2022
 29958                                  	;jmp	short smX
 29959                                  smE:	
 29960                                  	; 18/12/2022
 29961                                  	; cf=1 (*)
 29962                                  	;stc
 29963                                  smX:	
 29964                                  	;popreg	<es, cx, bx>
 29965                                  	pop	es
 29966                                  	pop	cx
 29967                                  	pop	bx
 29968                                  	retn
 29969                                  
 29970                                  ; -----------------------------------------------------------------------------
 29971                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 29972                                  ; -----------------------------------------------------------------------------
 29973                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 29974                                  ; EXIT:     None; UMB is hidden as necessary
 29975                                  ; ERROR:    None
 29976                                  ; USES:     Flags, AX, CX
 29977                                  ; -----------------------------------------------------------------------------
 29978                                  ; PRIMARY LOGIC:
 29979                                  ;
 29980                                  ; If the UMB is specified in the DH/LH statement, then:
 29981                                  ;    If the largest free segment is too small (check specified size), then:
 29982                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 29983                                  ;    Else, if largest free segment is LARGER than specified size, then:
 29984                                  ;       If /S was given on the command-line, then:
 29985                                  ;          Break that element into two pieces
 29986                                  ;          Set a flag that we're shrinking
 29987                                  ;       Endif
 29988                                  ;    Endif
 29989                                  ; Endif
 29990                                  ; If the UMB is NOT specified (or was removed by the above):
 29991                                  ;    Hide all free elements in the UMB
 29992                                  ;    If the flag that we're shrinking was set, then:
 29993                                  ;       UN-hide the lower portion of the shrunken UMB
 29994                                  ;    ENDIF
 29995                                  ; ENDIF
 29996                                  ; -----------------------------------------------------------------------------
 29997                                  
 29998                                  _hideUMB_:
 29999                                  	push	bx
 30000                                  	push	dx
 30001                                  	push	es
 30002                                  
 30003                                  	mov	al,cl
 30004                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30005                                  	jz	short hu_20
 30006                                  
 30007                                  	mov	al,cl		; Retrieve the size of the largest
 30008                                  	call	BigFree		; free element in AX; put its address in ES
 30009                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30010                                  
 30011                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30012                                  	mov	al,cl		; Retrieve the user's specified
 30013                                  	call	GetSize		; minimum size for this umb (into AX)
 30014                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30015                                  
 30016                                  	or	ax,ax		; If they didn't specify one,
 30017                                  	jz	short hu_20	; Skip over all this.
 30018                                  
 30019                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30020                                  	jbe	short hu_10
 30021                                  
 30022                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30023                                  	call	unMarkUMB
 30024                                  	jmp	short hu_20
 30025                                  hu_10:	
 30026                                  	call	isTiny		; Returns ZF clear if user specified /S
 30027                                  	jz	short hu_20
 30028                                  
 30029                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30030                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30031                                  
 30032                                  	mov	dx,es
 30033                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30034                                  
 30035                                  hu_20:	mov	ax,cx
 30036                                  	call	isSpecified	; If they specified this UMB, we're done...
 30037                                  	jnz	short hu_X	; so leave.
 30038                                  
 30039                                  	xor	dx,dx
 30040                                  hu_30:	
 30041                                  	mov	al,cl
 30042                                  
 30043                                  	call	hideUMB		; Hides everything in UMB #al
 30044                                  
 30045                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30046                                  	jz	short hu_X	; So we should leave.
 30047                                  
 30048                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30049                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30050                                  hu_X:	
 30051                                  	pop	es
 30052                                  	pop	dx
 30053                                  	pop	bx
 30054                                  	retn
 30055                                  
 30056                                  ; -----------------------------------------------------------------------------
 30057                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30058                                  ; -----------------------------------------------------------------------------
 30059                                  ; Entry:  None
 30060                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30061                                  ; Error:  None
 30062                                  ; Uses:   Flags
 30063                                  ; -----------------------------------------------------------------------------
 30064                                  
 30065                                  UnFreeze:
 30066                                  	push	ax
 30067                                  	push	es
 30068                                  
 30069                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30070                                  	jc	short ufX
 30071                                  
 30072                                  	mov	es,ax
 30073                                  
 30074                                  ; ------------------------------
 30075                                  ; UF10--ES - Current MCB address
 30076                                  ; ------------------------------
 30077                                  
 30078                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30079                                  	jnz	short uf20
 30080                                  	call	unHideMCB
 30081                                  uf20:	
 30082                                  	mov	al,[es:ARENA.SIGNATURE]
 30083                                  
 30084                                  	cmp	al,arena_signature_end ; 'Z'
 30085                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30086                                  
 30087                                  	;NextMCB es, ax		; Go on forward.
 30088                                  	mov     ax,es
 30089                                  	;add	ax,[es:3]
 30090                                  	add     ax,[es:ARENA.SIZE]
 30091                                  	inc     ax
 30092                                  	mov     es,ax
 30093                                  
 30094                                  	jmp	short uf10
 30095                                  ufX:	
 30096                                  	pop	es
 30097                                  	pop	ax
 30098                                  	retn
 30099                                  
 30100                                  ; -----------------------------------------------------------------------------
 30101                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30102                                  ; -----------------------------------------------------------------------------
 30103                                  ; ENTRY:    ES:0 should point to an MCB
 30104                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30105                                  ; ERROR:    None
 30106                                  ; USES:     Flags
 30107                                  ; -----------------------------------------------------------------------------
 30108                                  
 30109                                  isFrozMCB:
 30110                                  	;push	ax
 30111                                  
 30112                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30113                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30114                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30115                                  	jne	short ifmX
 30116                                  
 30117                                  	;mov	ax,[es:ARENA.NAME+0]
 30118                                  	;cmp	ax,'FR' ; 5246h
 30119                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30120                                  	jne	short ifmX
 30121                                  	;mov	ax,[es:ARENA.NAME+2]
 30122                                  	;cmp	ax,'OZ' ; 5A4Fh
 30123                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30124                                  	jne	short ifmX
 30125                                  	;mov	ax,[es:ARENA.NAME+4]
 30126                                  	;cmp	ax,'EN' ; 4E45h
 30127                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30128                                  	jne	short ifmX
 30129                                  	;mov	ax,[es:ARENA.NAME+6]
 30130                                  	;cmp	ax,'  ' ; 2020h
 30131                                  	cmp	word [es:ARENA.NAME+6],'  '
 30132                                  ifmX:	
 30133                                  	;pop	ax
 30134                                  	retn
 30135                                  
 30136                                  ; -----------------------------------------------------------------------------
 30137                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30138                                  ; -----------------------------------------------------------------------------
 30139                                  ; ENTRY:    ES:0 should point to an MCB
 30140                                  ; EXIT:     None; MCB frozen
 30141                                  ; ERROR:    None
 30142                                  ; USES:     None
 30143                                  ; -----------------------------------------------------------------------------
 30144                                  
 30145                                  frezMCB:
 30146                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30147                                  	mov	word [es:ARENA.NAME+0],'FR'
 30148                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30149                                  	mov	word [es:ARENA.NAME+4],'EN'
 30150                                  	mov	word [es:ARENA.NAME+6],'  '
 30151                                  	retn
 30152                                  
 30153                                  ; -----------------------------------------------------------------------------
 30154                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30155                                  ; -----------------------------------------------------------------------------
 30156                                  ; Entry:  None
 30157                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30158                                  ; Error:  None
 30159                                  ; Uses:   Flags
 30160                                  ; -----------------------------------------------------------------------------
 30161                                  
 30162                                  FreezeUM:
 30163                                  	push	ax
 30164                                  	push	cx
 30165                                  	push	dx
 30166                                  	push	es
 30167                                  
 30168                                  	;call	GetLoadUMB
 30169                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30170                                  
 30171                                  	xor	ah,ah		; Zap ah, so al==ax
 30172                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30173                                  
 30174                                  	call	UmbHead		; Returns first UMB segment in AX
 30175                                  	mov	es,ax
 30176                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30177                                  
 30178                                  ; -----------------------------------------
 30179                                  ; FUM10--ES - Current MCB address
 30180                                  ;        CX - Current UMB number
 30181                                  ;        DX - UMB number to skip (load UMB)
 30182                                  ; -----------------------------------------
 30183                                  
 30184                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30185                                  	jnz	short fum20
 30186                                  
 30187                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30188                                  fum20:	
 30189                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30190                                  	je	short fum30	; freeze anything... so skip that section.
 30191                                  
 30192                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30193                                  	or	word [es:ARENA.OWNER],0
 30194                                  	jnz	short fum30	; either.
 30195                                  
 30196                                  	call	frezMCB
 30197                                  fum30:	
 30198                                  	mov	al,[es:ARENA.SIGNATURE]
 30199                                  	cmp	al,arena_signature_end ; 'Z'
 30200                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30201                                  
 30202                                  	;NextMCB es, ax		; Go on forward.
 30203                                  	mov     ax,es
 30204                                  	;add	ax,[es:3]
 30205                                  	add     ax,[es:ARENA.SIZE]
 30206                                  	inc     ax
 30207                                  	mov     es,ax
 30208                                  	
 30209                                  	jmp	short fum10
 30210                                  
 30211                                  fumX:	pop	es
 30212                                  	pop	dx
 30213                                  	pop	cx
 30214                                  	pop	ax
 30215                                  	retn
 30216                                  
 30217                                  ; -----------------------------------------------------------------------------
 30218                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30219                                  ; -----------------------------------------------------------------------------
 30220                                  ; ENTRY:    None
 30221                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30222                                  ; ERROR:    None
 30223                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30224                                  ; -----------------------------------------------------------------------------
 30225                                  
 30226                                  UmbTest:
 30227                                  	push	ax
 30228                                  	push	bx
 30229                                  	push	ds
 30230                                  	push	es
 30231                                  
 30232                                  	call	fm_link			; Link in UMBs (if not already linked)
 30233                                  	call	WalkMem			; Check to see if they're really linked
 30234                                  	pushf				; And remember what we found out
 30235                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30236                                  	popf				; And restore what we found out.
 30237                                  
 30238                                  	pop	es
 30239                                  	pop	ds
 30240                                  	pop	bx
 30241                                  	pop	ax
 30242                                  	retn
 30243                                  
 30244                                  ; -----------------------------------------------------------------------------
 30245                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30246                                  ; -----------------------------------------------------------------------------
 30247                                  ; ENTRY:    None
 30248                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30249                                  ; ERROR:    None
 30250                                  ; USES:     Flags
 30251                                  ; -----------------------------------------------------------------------------
 30252                                  
 30253                                  WalkMem:
 30254                                  	push	ax ; ?
 30255                                  	push	bx ; ?
 30256                                  	push	es ; ? no need to save contents of these registers ?
 30257                                  		   	
 30258                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30259                                  	int	21h
 30260                                  
 30261                                  	mov	ax,[es:bx-2]
 30262                                  	mov	es,ax
 30263                                  
 30264                                  ; ------------------------------
 30265                                  ; UM10: ES = Current MCB pointer
 30266                                  ; ------------------------------
 30267                                  
 30268                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30269                                  	cmp	al,arena_signature_end ;  'Z'
 30270                                  	je	short um20		; If signature == 'Z', hay no more.
 30271                                  
 30272                                  	;NextMCB es, bx			; Move to the next MCB
 30273                                  
 30274                                  	mov     bx,es
 30275                                  	;add	bx,[es:3]
 30276                                  	add     bx,[es:ARENA.SIZE]
 30277                                  	inc     bx
 30278                                  	mov     es,bx
 30279                                  		
 30280                                  	jmp	short um10		; And restart the loop.
 30281                                  um20:	
 30282                                  	mov	ax,es
 30283                                  
 30284                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30285                                  
 30286                                  	pop	es ; ?
 30287                                  	pop	bx ; ?
 30288                                  	pop	ax ; ?
 30289                                  	retn
 30290                                  
 30291                                  ; -----------------------------------------------------------------------------
 30292                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30293                                  ; -----------------------------------------------------------------------------
 30294                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30295                                  ; EXIT:     None
 30296                                  ; ERROR:    None
 30297                                  ; USES:     AX, BX
 30298                                  ; -----------------------------------------------------------------------------
 30299                                  
 30300                                  hl_unlink:
 30301                                  	xor	bh,bh
 30302                                  
 30303                                  	;getdata bl,fm_umb		; Restore original link-state
 30304                                  	;
 30305                                  	;push	ds
 30306                                  	;push	cs
 30307                                  	;pop	ds
 30308                                  	;mov	bl,[fm_umb]
 30309                                  	;pop	ds
 30310                                  
 30311                                  	mov	bl,[cs:fm_umb]
 30312                                  
 30313                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30314                                  	int	21h
 30315                                  	retn
 30316                                  
 30317                                  ; ----------------------------------------------------------------------
 30318                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30319                                  ; ----------------------------------------------------------------------
 30320                                  ; 09/04/2019 - Retro DOS v4.0
 30321                                  
 30322                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30323                                  ;   Date:     May 14, 1992
 30324                                  
 30325                                  ;   Modification log:
 30326                                  ;
 30327                                  ;     DATE    WHO      DESCRIPTION
 30328                                  ;   --------  -------  --------------------------------------------------------
 30329                                  ;   05/14/92  t-richj  Original
 30330                                  ;   06/21/92  t-richj  Final revisions before check-in
 30331                                  
 30332                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30333                                  
 30334                                  ; -----------------------------------------------------------------------------
 30335                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30336                                  ; -----------------------------------------------------------------------------
 30337                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30338                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30339                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30340                                  ; ERROR:  None
 30341                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30342                                  ; -----------------------------------------------------------------------------
 30343                                  
 30344                                  UnHideUMBs:
 30345                                  	push	ax		; Save ax for what we're about to do
 30346                                  
 30347                                  ; -----------------------------------------------------------------------------
 30348                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30349                                  ;    length of time. Those six constitute a check of whether or not we should
 30350                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30351                                  ;    will destroy the current link-state and memory-allocation strategy after
 30352                                  ;    every command execution.
 30353                                  ; -----------------------------------------------------------------------------
 30354                                  
 30355                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30356                                  	;
 30357                                  	;push	ds
 30358                                  	;push	cs
 30359                                  	;pop	ds
 30360                                  	;mov	al,[fInHigh]
 30361                                  	;pop	ds	
 30362                                  
 30363                                  	mov	al,[cs:fInHigh]
 30364                                  
 30365                                  	or	al,al
 30366                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30367                                  
 30368                                  	pop	ax		; then there's nothing to do here... so
 30369                                  	stc			; restore everything and return. Just like
 30370                                  	retn			; that.
 30371                                  uhu10:	
 30372                                  	call	linkumb		; Make sure UMBs are linked in.
 30373                                  	call	FreeUMBs
 30374                                  
 30375                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30376                                  	;
 30377                                  	;push	es
 30378                                  	;push	cs
 30379                                  	;pop	es
 30380                                  	;mov	byte [es:fInHigh],0
 30381                                  	;pop	ds	
 30382                                  
 30383                                  	mov	byte [cs:fInHigh],0	
 30384                                  
 30385                                  	call	he_unlink	; Unlink UMBs
 30386                                  
 30387                                  	pop	ax
 30388                                  	; 12/12/2022
 30389                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30390                                  	retn
 30391                                  
 30392                                  ; -----------------------------------------------------------------------------
 30393                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30394                                  ; -----------------------------------------------------------------------------
 30395                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30396                                  ; EXIT:     None
 30397                                  ; ERROR:    None
 30398                                  ; USES:     AX, BX
 30399                                  ; -----------------------------------------------------------------------------
 30400                                  
 30401                                  he_unlink:
 30402                                  	xor	bh, bh
 30403                                  
 30404                                  	;getdata bl, fm_umb	; Restore original link-state
 30405                                  	mov	bl,[cs:fm_umb]	
 30406                                  
 30407                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30408                                  	int	21h
 30409                                  	retn
 30410                                  
 30411                                  ; -----------------------------------------------------------------------------
 30412                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30413                                  ; -----------------------------------------------------------------------------
 30414                                  ; ENTRY:    None
 30415                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30416                                  ; ERROR:    None (ignore CF)
 30417                                  ; USES:     Flags
 30418                                  ; -----------------------------------------------------------------------------
 30419                                  
 30420                                  FreeUMBs:
 30421                                  	push	ax
 30422                                  	push	es
 30423                                  
 30424                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30425                                  	jc	short fusX
 30426                                  
 30427                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30428                                  fus10:	
 30429                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30430                                  	jnz	short fus20
 30431                                  	call	freeMCB
 30432                                  fus20:	   
 30433                                  	mov	al,[es:ARENA.SIGNATURE]
 30434                                  	cmp	al,arena_signature_end ; 'Z'
 30435                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30436                                  
 30437                                  	mov	ax,es
 30438                                  	add	ax,[es:ARENA.SIZE]
 30439                                  	inc	ax
 30440                                  	mov	es,ax		; Go on forward.
 30441                                  
 30442                                  	jmp	short fus10
 30443                                  fusX:	
 30444                                  	pop	es
 30445                                  	pop	ax
 30446                                  	retn
 30447                                  
 30448                                  ; -----------------------------------------------------------------------------
 30449                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30450                                  ; -----------------------------------------------------------------------------
 30451                                  ; ENTRY:    ES:0 should point to an MCB
 30452                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30453                                  ; ERROR:    None
 30454                                  ; USES:     Flags
 30455                                  ; -----------------------------------------------------------------------------
 30456                                  
 30457                                  isHideMCB:
 30458                                  	;push	ax
 30459                                  
 30460                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30461                                  	jne	short ihm_x				; then check for HIDDEN
 30462                                  
 30463                                  	;mov	ax,[es:ARENA.NAME]
 30464                                  	;cmp	ax,'HI' ; 4948h
 30465                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30466                                  	jne	short ihm_x
 30467                                  	;mov	ax,[es:ARENA.NAME+2]
 30468                                  	;cmp	ax,'DD' ; 4444h
 30469                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30470                                  	jne	short ihm_x
 30471                                  	;mov	ax,[es:ARENA.NAME+4]
 30472                                  	;cmp	ax,'EN' ; 4E45h
 30473                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30474                                  	jne	short ihm_x
 30475                                  	;mov	ax,[es:ARENA.NAME+6]
 30476                                  	;cmp	ax,'  ' ; 2020h
 30477                                  	cmp	word [es:ARENA.NAME+6],'  '
 30478                                  ihm_x:	
 30479                                  	;pop	ax
 30480                                  	retn
 30481                                  
 30482                                  ; -----------------------------------------------------------------------------
 30483                                  ;*** freeMCB - marks as free the MCB at ES:0
 30484                                  ; -----------------------------------------------------------------------------
 30485                                  ; ENTRY:    ES:0 should point to an MCB
 30486                                  ; EXIT:     None; MCB free'd
 30487                                  ; ERROR:    None
 30488                                  ; USES:     AX
 30489                                  ; -----------------------------------------------------------------------------
 30490                                  
 30491                                  freeMCB:
 30492                                  	mov	word [es:ARENA.OWNER],0
 30493                                  	mov	ax,'  '
 30494                                  	mov	[es:ARENA.NAME+0],ax
 30495                                  	mov	[es:ARENA.NAME+2],ax
 30496                                  	mov	[es:ARENA.NAME+4],ax
 30497                                  	mov	[es:ARENA.NAME+6],ax
 30498                                  	retn
 30499                                  
 30500                                  ; -----------------------------------------------------------------------------
 30501                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30502                                  ; -----------------------------------------------------------------------------
 30503                                  ; ENTRY:  Nothing
 30504                                  ; EXIT:   AX contains 0x9FFF for most systems
 30505                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30506                                  ; USES:   Flags, AX
 30507                                  ; -----------------------------------------------------------------------------
 30508                                  
 30509                                  HeadUmb:
 30510                                  	; 13/05/2019
 30511                                  
 30512                                  	;push	si ; ?
 30513                                  	;push	ds ; ?
 30514                                  	;push	es
 30515                                  	;push	bx ; *
 30516                                  
 30517                                  	; 09/04/2019
 30518                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30519                                  
 30520                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30521                                  	int	21h
 30522                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30523                                  			; Return: ES:BX -> DOS list of lists
 30524                                  	;mov	ax,[es:8Ch]
 30525                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30526                                  	cmp	ax,0FFFFh
 30527                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30528                                  
 30529                                  	;clc				; Else, it isn't.
 30530                                  	;jmp	short xhu_x
 30531                                  xhu_e:	
 30532                                  	;stc
 30533                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30534                                  xhu_x:	
 30535                                  	;pop	bx ; *
 30536                                  	;pop	es	
 30537                                  	;pop	ds ; ?
 30538                                  	;pop	si ; ?
 30539                                  	retn
 30540                                  
 30541                                  ; -----------------------------------------------------------------------------
 30542                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30543                                  ; -----------------------------------------------------------------------------
 30544                                  ; ENTRY:    None
 30545                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30546                                  ; ERROR:    None
 30547                                  ; USES:     AX, BX, fm_umb
 30548                                  ; -----------------------------------------------------------------------------
 30549                                  
 30550                                  linkumb:
 30551                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30552                                  	int	21h			; Current link-state is now in al
 30553                                  
 30554                                  	or	al,al			; BUGBUG: proper check?
 30555                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30556                                  
 30557                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30558                                  	mov	bx,1
 30559                                  	int	21h
 30560                                  lumbX:
 30561                                  	retn
 30562                                  
 30563                                  %endif
 30564                                  
 30565                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30566                                  ; (SYSINIT:2B5Fh)
 30567                                  
 30568                                  ; ----------------------------------------------------------------------
 30569                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30570                                  ; ----------------------------------------------------------------------
 30571                                  ; 09/04/2019 - Retro DOS v4.0
 30572                                  
 30573                                  ;----------------------------------------------------------------------------
 30574                                  ;
 30575                                  ; procedure : InitDevLoad
 30576                                  ;
 30577                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30578                                  ;			 = 1 indicates load in UMB:
 30579                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30580                                  ;		                    = 1 indicates a DOS 5-style load
 30581                                  ;		DevSize  = Size of the device driver file in paras
 30582                                  ;
 30583                                  ;	Output : none
 30584                                  ;
 30585                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30586                                  ;	Also sets up a header for the Device driver entry for mem utility
 30587                                  ;
 30588                                  ;----------------------------------------------------------------------------
 30589                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30590                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30591                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30592                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30593                                  ;----------------------------------------------------------------------------
 30594                                  
 30595                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30596                                  InitDevLoad:
 30597                                  	; 11/12/2022
 30598                                  	; ds = cs
 30599 00002810 803E[FF1E]00            	cmp	byte [DeviceHi],0
 30600                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30601                                  	;je	short InitForLo		; no, init for lo mem
 30602 00002815 741F                    	je	short initforlo_x ; 09/04/2019
 30603                                  
 30604                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30605                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30606                                  ;	je	short InitForConv
 30607                                  ;
 30608                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30609                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30610                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30611                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30612                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30613                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30614                                  ;
 30615                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30616                                  ;
 30617                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30618                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30619                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30620                                  ;	pushf
 30621                                  ;	call	UnFreeze		; Then unhide everything frozen
 30622                                  ;	popf
 30623                                  ;
 30624                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30625                                  ;
 30626                                  ;	jmp	short InitForHi
 30627                                  
 30628                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30629                                  	; (SYSINIT:2B67h)
 30630                                  InitForConv:
 30631                                  	; 11/12/2022
 30632                                  	; ds = cs
 30633 00002817 E83700                  	call	SpaceInUMB		; Do we have space left in the
 30634                                  					;  current UMB ?
 30635 0000281A 7308                    	jnc	short InitForHi		; yes, we have
 30636 0000281C E84F04                  	call	ShrinkUMB		; shrink the current UMB in use
 30637 0000281F E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30638 00002822 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30639                                  					;  in low memory
 30640                                  InitForHi:
 30641                                  	; 11/12/2022
 30642                                  	; ds = cs
 30643                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30644                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30645                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30646 00002824 A1[F51E]                	mov	ax,[DevUMBFree]
 30647 00002827 8B16[F11E]              	mov	dx,[DevUMBAddr]
 30648 0000282B 0316[F31E]              	add	dx,[DevUMBSize]
 30649 0000282F EB0C                    	jmp	short idl1
 30650                                  
 30651                                  InitForLo:
 30652                                  	; 11/12/2022
 30653                                  	; ds = cs
 30654                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30655 00002831 C606[FF1E]00            	mov	byte [DeviceHi],0
 30656                                  initforlo_x:
 30657                                  	; 11/12/2022
 30658                                  	; ds = cs
 30659                                  					;  into UMB indicate that
 30660                                  					;  we are loading low
 30661                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30662                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30663 00002836 A1[E003]                	mov	ax,[memhi]
 30664 00002839 8B16[A302]              	mov	dx,[ALLOCLIM]
 30665                                  idl1:
 30666 0000283D E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30667                                  	; 11/12/2022
 30668                                  	; ds = cs
 30669                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30670                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30671                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30672                                  	;mov	[cs:DevEntry+2],ax
 30673 00002840 A3[E41E]                	mov	[DevLoadAddr],ax
 30674 00002843 8916[E61E]              	mov	[DevLoadEnd],dx
 30675 00002847 C706[E81E]0000          	mov	word [DevEntry],0
 30676 0000284D A3[EA1E]                	mov	[DevEntry+2],ax
 30677 00002850 C3                      	retn
 30678                                  
 30679                                  ;----------------------------------------------------------------------------
 30680                                  ;
 30681                                  ; procedure : SpaceInUMB?
 30682                                  ;
 30683                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30684                                  ;	Output : Carry set if no space in UMB
 30685                                  ;		 Carry clear if Space is available for the device in
 30686                                  ;		   current UMB
 30687                                  ;
 30688                                  ;----------------------------------------------------------------------------
 30689                                  
 30690                                  SpaceInUMB:
 30691                                  	; 11/12/2022
 30692                                  	; ds = cs
 30693                                  	;mov	ax,[cs:DevUMBSize]
 30694                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30695                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30696 00002851 A1[F31E]                	mov	ax,[DevUMBSize]
 30697 00002854 0306[F11E]              	add	ax,[DevUMBAddr]		; End of UMB
 30698 00002858 2B06[F51E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30699                                  	; 11/12/2022
 30700                                  	;or	ax,ax			; Nospace ?
 30701                                  	;jnz	short spcinumb1
 30702                                  	;stc
 30703                                  	;retn
 30704                                  	; 11/12/2022
 30705 0000285C 83F801                  	cmp	ax,1
 30706 0000285F 7205                    	jb	short spcinumb2	; cf=1
 30707                                  spcinumb1:
 30708 00002861 48                      	dec	ax			; space for sub-arena
 30709                                  	; 11/12/2022
 30710                                  	; ds = cs
 30711 00002862 3B06[E21E]              	cmp	ax,[DevSize]
 30712                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30713                                  spcinumb2:
 30714 00002866 C3                      	retn
 30715                                  
 30716                                  ;----------------------------------------------------------------------------
 30717                                  ;
 30718                                  ; procedure : PrepareMark
 30719                                  ;
 30720                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30721                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30722                                  ;
 30723                                  ;----------------------------------------------------------------------------
 30724                                  
 30725                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30726                                  ;
 30727                                  ;PrepareMark:
 30728                                  ;	push	ds
 30729                                  ;	mov	ds,ax
 30730                                  ;	mov	word [ARENA.OWNER],8
 30731                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30732                                  ;	pop	ds
 30733                                  ;
 30734                                  ;	inc	ax
 30735                                  ;	mov	[cs:DevUMBAddr],ax
 30736                                  ;	mov	[cs:DevUMBFree],ax
 30737                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30738                                  ;	retn
 30739                                  
 30740                                  ;----------------------------------------------------------------------------
 30741                                  ;
 30742                                  ; procedure : GetUMBForDev
 30743                                  ;
 30744                                  ;	Input : DevSize
 30745                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30746                                  ;		 the device.
 30747                                  ;		 If success carry clear
 30748                                  ;
 30749                                  ;	Allocates the biggest UMB for loading devices and updates
 30750                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 30751                                  ;	UMB.
 30752                                  ;
 30753                                  ;	This routine relies on the fact that all of the low memory
 30754                                  ;	is allocated, and any DOS alloc calls should return memory
 30755                                  ;	from the UMB pool.
 30756                                  ;
 30757                                  ;----------------------------------------------------------------------------
 30758                                  
 30759                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30760                                  	; (SYSINIT:2BC6h)
 30761                                  
 30762                                  GetUMBForDev:
 30763                                  	; 11/12/2022
 30764                                  	; ds = cs
 30765 00002867 BBFFFF                  	mov	bx,0FFFFh
 30766 0000286A B80048                  	mov	ax,4800h
 30767 0000286D CD21                    	int	21h
 30768                                  		; DOS - 2+ - ALLOCATE MEMORY
 30769                                  		; BX = number of 16-byte paragraphs desired
 30770                                  
 30771 0000286F 09DB                    	or	bx,bx
 30772 00002871 742C                    	jz	short gufd_err
 30773                                  
 30774 00002873 4B                      	dec	bx
 30775                                  	; 11/12/2022
 30776                                  	; ds = cs
 30777 00002874 391E[E21E]              	cmp	[DevSize],bx
 30778                                  	;cmp	[cs:DevSize],bx
 30779 00002878 7725                    	ja	short gufd_err
 30780 0000287A 43                      	inc	bx
 30781                                  
 30782 0000287B B80048                  	mov	ax,4800h
 30783 0000287E CD21                    	int	21h
 30784 00002880 721D                    	jc	short gufd_err
 30785                                  
 30786                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30787                                  	;dec	ax
 30788                                  	;call	PrepareMark
 30789                                  	;
 30790                                  PrepareMark:
 30791 00002882 1E                      	push	ds
 30792 00002883 48                      	dec	ax
 30793 00002884 8ED8                    	mov	ds,ax
 30794 00002886 C70601000800            	mov	word [ARENA.OWNER],8
 30795 0000288C C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 30796 00002892 40                      	inc	ax
 30797 00002893 1F                      	pop	ds
 30798                                  	; 11/12/2022
 30799                                  	; ds = cs
 30800                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30801                                  	;mov	[cs:DevUMBAddr],ax
 30802                                  	;mov	[cs:DevUMBFree],ax
 30803 00002894 891E[F31E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 30804 00002898 A3[F11E]                	mov	[DevUMBAddr],ax
 30805 0000289B A3[F51E]                	mov	[DevUMBFree],ax
 30806                                  	;
 30807                                  	; 11/12/2022
 30808                                  	; cf=0
 30809                                  	;clc				; mark no error
 30810 0000289E C3                      	retn
 30811                                  gufd_err:
 30812 0000289F 31C0                    	xor	ax,ax ; 0
 30813                                  	; 11/12/2022
 30814                                  	; ds = cs
 30815                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 30816                                  	;mov	[cs:DevUMBAddr],ax
 30817                                  	;mov	[cs:DevUMBFree],ax
 30818 000028A1 A3[F31E]                	mov	[DevUMBSize],ax		; erase the previous values
 30819 000028A4 A3[F11E]                	mov	[DevUMBAddr],ax
 30820 000028A7 A3[F51E]                	mov	[DevUMBFree],ax
 30821 000028AA F9                      	stc
 30822 000028AB C3                      	retn
 30823                                  
 30824                                  ;----------------------------------------------------------------------------
 30825                                  ;
 30826                                  ; procedure : DevSetMark
 30827                                  ;
 30828                                  ;	Input : AX - Free segment were device is going to be loaded
 30829                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 30830                                  ;
 30831                                  ;	Creates a sub-arena for the device driver
 30832                                  ;	puts 'D' marker in the sub-arena
 30833                                  ;	Put the owner of the sub-arena as (AX+1)
 30834                                  ;	Copies the file name into sub-arena name field
 30835                                  ;
 30836                                  ;	Size field of the sub-arena will be set only at succesful
 30837                                  ;	completion of Device load.
 30838                                  ;
 30839                                  ;----------------------------------------------------------------------------
 30840                                  
 30841                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30842                                  	; (SYSINIT:2C13h)
 30843                                  
 30844                                  DevSetMark:
 30845 000028AC 06                      	push	es
 30846 000028AD 57                      	push	di
 30847 000028AE 1E                      	push	ds
 30848 000028AF 56                      	push	si
 30849 000028B0 8EC0                    	mov	es,ax
 30850 000028B2 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 30851 000028B8 40                      	inc	ax
 30852 000028B9 26A30100                	mov	[es:devmark.seg],ax
 30853                                  
 30854                                  ;-------------- Copy file name
 30855                                  
 30856 000028BD 50                      	push	ax			; save load addr
 30857 000028BE 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 30858                                  
 30859 000028C3 89F7                    	mov	di,si
 30860 000028C5 FC                      	cld
 30861                                  dsm_again:
 30862 000028C6 AC                      	lodsb
 30863 000028C7 3C3A                    	cmp	al,':'
 30864 000028C9 7504                    	jne	short isit_slash
 30865 000028CB 89F7                    	mov	di,si
 30866 000028CD EBF7                    	jmp	short dsm_again
 30867                                  isit_slash:
 30868 000028CF 3C5C                    	cmp	al, '\'
 30869 000028D1 7504                    	jne	short isit_null
 30870 000028D3 89F7                    	mov	di,si
 30871 000028D5 EBEF                    	jmp	short dsm_again
 30872                                  isit_null:
 30873 000028D7 08C0                    	or	al,al
 30874 000028D9 75EB                    	jnz	short dsm_again
 30875 000028DB 89FE                    	mov	si,di
 30876                                  
 30877 000028DD BF0800                  	mov	di,devmark.filename ; 8
 30878 000028E0 B90800                  	mov	cx,8			; maximum 8 characters
 30879                                  dsm_next_char:
 30880 000028E3 AC                      	lodsb
 30881 000028E4 08C0                    	or	al, al
 30882 000028E6 7407                    	jz	short blankout
 30883 000028E8 3C2E                    	cmp	al, '.'
 30884 000028EA 7403                    	je	short blankout
 30885 000028EC AA                      	stosb
 30886 000028ED E2F4                    	loop	dsm_next_char
 30887                                  blankout:
 30888 000028EF E304                    	jcxz	dsm_exit
 30889 000028F1 B020                    	mov	al, ' '
 30890 000028F3 F3AA                    	rep	stosb			; blank out the rest
 30891                                  dsm_exit:
 30892 000028F5 58                      	pop	ax			; restore load addr
 30893 000028F6 5E                      	pop	si
 30894 000028F7 1F                      	pop	ds
 30895 000028F8 5F                      	pop	di
 30896 000028F9 07                      	pop	es
 30897 000028FA C3                      	retn
 30898                                  
 30899                                  ;----------------------------------------------------------------------------
 30900                                  ;
 30901                                  ; procedure : SizeDevice
 30902                                  ;
 30903                                  ;	Input : ES:SI - points to device file to be sized
 30904                                  ;
 30905                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 30906                                  ;
 30907                                  ;	Calculates the size of the device file in paras and stores it
 30908                                  ;	in DevSize
 30909                                  ;
 30910                                  ;----------------------------------------------------------------------------
 30911                                  
 30912                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30913                                  SizeDevice:
 30914                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30915                                  	; 11/12/2022 ; *
 30916 000028FB 1E                      	push	ds ; *
 30917 000028FC 06                      	push	es
 30918 000028FD 1F                      	pop	ds
 30919 000028FE 89F2                    	mov	dx,si			; ds:dx -> file name
 30920 00002900 B8003D                  	mov	ax,3D00h		; open
 30921 00002903 CD21                    	int	21h
 30922 00002905 7243                    	jc	short sd_err		; open failed
 30923                                  
 30924 00002907 89C3                    	mov	bx,ax			; BX - file handle
 30925 00002909 B80242                  	mov	ax,4202h		; seek
 30926 0000290C 31C9                    	xor	cx,cx
 30927 0000290E 89CA                    	mov	dx,cx			; to end of file
 30928 00002910 CD21                    	int	21h
 30929 00002912 722F                    	jc	short sd_close		; did seek fail (impossible)
 30930 00002914 83C00F                  	add	ax,15			; para convert
 30931 00002917 83D200                  	adc	dx,0
 30932 0000291A F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 30933 0000291E 7409                    	jz	short szdev1		; no
 30934 00002920 2EC706[E21E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 30935                                  					; assuming that we fail later
 30936 00002927 EB1A                    	jmp	short sd_close
 30937                                  szdev1:
 30938 00002929 B104                    	mov	cl,4			; convert it to paras
 30939 0000292B D3E8                    	shr	ax,cl
 30940 0000292D B10C                    	mov	cl,12
 30941 0000292F D3E2                    	shl	dx,cl
 30942 00002931 09D0                    	or	ax,dx
 30943                                  	;
 30944                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30945 00002933 2E3B06[001F]            	cmp     ax,[cs:DevSizeOption]
 30946                                  	;ja	short szdev2
 30947                                  	; 14/08/2023
 30948 00002938 7305                    	jnb	short szdev2
 30949 0000293A 2EA1[001F]              	mov     ax,[cs:DevSizeOption]
 30950                                  	; 12/12/2022
 30951 0000293E F8                      	clc
 30952                                  szdev2:
 30953 0000293F 2EA3[E21E]              	mov	[cs:DevSize],ax		; save file size
 30954                                  
 30955                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30956                                  	; 12/12/2022
 30957                                  	; cf=0
 30958                                  	;clc
 30959                                  sd_close:
 30960 00002943 9C                      	pushf				; let close not spoil our
 30961                                  					;  carry flag
 30962 00002944 B8003E                  	mov	ax,3E00h		; close
 30963 00002947 CD21                    	int	21h			; we are not checking for err
 30964 00002949 9D                      	popf
 30965                                  sd_err:
 30966                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30967                                  	; 11/12/2022 ; *
 30968 0000294A 1F                      	pop     ds ; *
 30969 0000294B C3                      	retn
 30970                                  
 30971                                  ;----------------------------------------------------------------------------
 30972                                  ;
 30973                                  ; procedure : ExecDev
 30974                                  ;
 30975                                  ;	Input : ds:dx -> device to be executed
 30976                                  ;		DevLoadAddr - contains where device has to be loaded
 30977                                  ;
 30978                                  ;	Output : Carry if error
 30979                                  ;		 Carry clear if no error
 30980                                  ;
 30981                                  ;	Loads a device driver using the 4b03h function call
 30982                                  ;
 30983                                  ;----------------------------------------------------------------------------
 30984                                  
 30985                                  	; 01/11/2022
 30986                                  ExecDev:
 30987 0000294C 2E8B1E[E41E]            	mov	bx,[cs:DevLoadAddr]
 30988 00002951 2E891E[FB1E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 30989                                  					;  block for exec with
 30990                                  					;  Load address
 30991 00002956 2E891E[FD1E]            	mov	[cs:DevExecReloc],bx
 30992 0000295B 8CCB                    	mov	bx,cs
 30993 0000295D 8EC3                    	mov	es,bx
 30994 0000295F BB[FB1E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 30995 00002962 B003                    	mov	al,3	; (load program only)
 30996 00002964 B44B                    	mov	ah,EXEC ; 4Bh
 30997 00002966 CD21                    	int	21h			;load in the device driver
 30998                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 30999                                  		; DS:DX -> ASCIZ filename
 31000                                  		; ES:BX -> parameter block
 31001                                  		; AL = subfunction 
 31002 00002968 C3                      	retn
 31003                                  
 31004                                  ;----------------------------------------------------------------------------
 31005                                  ;
 31006                                  ; procedure : RetFromUM
 31007                                  ;
 31008                                  ;	Input : None
 31009                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31010                                  ;		 ConvLoad clear if did.
 31011                                  ;
 31012                                  ;	Prepares memory for more devices after returning from loading one
 31013                                  ;	using the DOS 6 options (/L:... etc).
 31014                                  ;
 31015                                  ;----------------------------------------------------------------------------
 31016                                  
 31017                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31018                                  ;RetFromUM:
 31019                                  ;	pushf
 31020                                  ;	mov	byte [cs:ConvLoad],1
 31021                                  ;	call	UnHideUMBs
 31022                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31023                                  ;	mov	byte [cs:ConvLoad],0
 31024                                  ;rfUM1:	
 31025                                  ;	popf
 31026                                  ;	retn
 31027                                  
 31028                                  ;----------------------------------------------------------------------------
 31029                                  ;
 31030                                  ; procedure : RemoveNull
 31031                                  ;
 31032                                  ;	Input : ES:SI points to a null terminated string
 31033                                  ;
 31034                                  ;	Output : none
 31035                                  ;
 31036                                  ;	Replaces the null at the end of a string with blank
 31037                                  ;
 31038                                  ;----------------------------------------------------------------------------
 31039                                  
 31040                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31041                                  	; (SYSINIT:2CCEh)
 31042                                  RemoveNull:
 31043                                  	; 11/12/2022
 31044                                  	; ds = cs
 31045                                  rn_next:
 31046 00002969 268A1C                  	mov	bl,[es:si]
 31047 0000296C 08DB                    	or	bl,bl			; null ?
 31048 0000296E 7403                    	jz	short rn_gotnull
 31049 00002970 46                      	inc	si			; advance the pointer
 31050 00002971 EBF6                    	jmp	short rn_next
 31051                                  rn_gotnull:
 31052                                  	; 11/12/2022
 31053 00002973 8A1E[141F]              	mov	bl,[DevSavedDelim]
 31054                                  	;mov	bl,[cs:DevSavedDelim]
 31055 00002977 26881C                  	mov	[es:si],bl		; replace null with blank
 31056                                  	; 02/11/2022
 31057                                  ; 11/12/2022
 31058                                  rba_ok:		; 10/04/2019
 31059 0000297A C3                      	retn
 31060                                  
 31061                                  ;----------------------------------------------------------------------------
 31062                                  ;
 31063                                  ; procedure : RoundBreakAddr
 31064                                  ;
 31065                                  ;	Input : DevBrkAddr
 31066                                  ;	Output : DevBrkAddr
 31067                                  ;
 31068                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31069                                  ;
 31070                                  ;----------------------------------------------------------------------------
 31071                                  
 31072                                  RoundBreakAddr:
 31073 0000297B 2EA1[EC1E]              	mov	ax,[cs:DevBrkAddr]
 31074 0000297F E837E7                  	call	ParaRound
 31075 00002982 2E0106[EE1E]            	add	[cs:DevBrkAddr+2],ax
 31076 00002987 2EC706[EC1E]0000        	mov	word [cs:DevBrkAddr],0
 31077 0000298E 2EA1[E61E]              	mov	ax,[cs:DevLoadEnd]
 31078 00002992 2E3906[EE1E]            	cmp	[cs:DevBrkAddr+2],ax
 31079 00002997 76E1                    	jbe	short rba_ok
 31080 00002999 E96507                  	jmp	mem_err
 31081                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31082                                  	; 11/12/2022
 31083                                  ;rba_ok:
 31084                                  ;	retn
 31085                                  
 31086                                  ;----------------------------------------------------------------------------
 31087                                  ;
 31088                                  ; procedure : DevSetBreak
 31089                                  ;
 31090                                  ;	Input : DevBrkAddr
 31091                                  ;	Output : Carry set if Device returned Init failed
 31092                                  ;		 Else carry clear
 31093                                  ;
 31094                                  ;----------------------------------------------------------------------------
 31095                                  
 31096                                  DevSetBreak:
 31097 0000299C 50                      	push	ax
 31098                                  
 31099 0000299D 2EA1[EE1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31100 000029A1 2E803E[2B14]00          	cmp	byte [cs:multdeviceflag],0
 31101 000029A7 750F                    	jne	short set_break_continue ;do not check it.
 31102 000029A9 2E3B06[E41E]            	cmp	ax,[cs:DevLoadAddr]
 31103 000029AE 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31104                                  
 31105                                  	;cmp	word [cs:DevBrkAddr],0
 31106                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31107                                  	; 12/12/2022
 31108 000029B0 2E833E[EC1E]01          	cmp	word [cs:DevBrkAddr],1
 31109 000029B6 7204                    	jb	short break_failed
 31110                                  
 31111                                  set_break_continue:
 31112 000029B8 E8C0FF                  	call	RoundBreakAddr
 31113                                  	; 12/12/2022
 31114 000029BB F8                      	clc
 31115                                  break_failed:
 31116 000029BC 58                      	pop	ax
 31117                                  	;clc
 31118 000029BD C3                      	retn
 31119                                  
 31120                                  	; 12/12/2022
 31121                                  ;break_failed:
 31122                                  	;pop	ax
 31123                                  	;stc
 31124                                  	;retn
 31125                                  
 31126                                  ;----------------------------------------------------------------------------
 31127                                  ;
 31128                                  ; procedure : DevBreak
 31129                                  ;
 31130                                  ;	Input : DevLoadAddr & DevBrkAddr
 31131                                  ;	Output : none
 31132                                  ;
 31133                                  ;	Marks a succesful install of a device driver
 31134                                  ;	Sets device size field in sub-arena &
 31135                                  ;	Updates Free ptr in UMB or adjusts memhi
 31136                                  ;
 31137                                  ;----------------------------------------------------------------------------
 31138                                  
 31139                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31140                                  DevBreak:
 31141                                  	;push	ds ; 11/12/2022
 31142                                  
 31143                                  	; 11/12/2022
 31144 000029BE 0E                      	push	cs
 31145 000029BF 1F                      	pop	ds
 31146                                  	;mov	ax,[cs:DevLoadAddr]
 31147                                  	;mov	bx,[cs:DevBrkAddr+2]
 31148 000029C0 A1[E41E]                	mov	ax,[DevLoadAddr]
 31149 000029C3 8B1E[EE1E]              	mov	bx,[DevBrkAddr+2]
 31150                                  	; 11/12/2022
 31151 000029C7 1E                      	push	ds
 31152                                  
 31153 000029C8 48                      	dec	ax			; seg of sub-arena
 31154 000029C9 8ED8                    	mov	ds,ax
 31155 000029CB 40                      	inc	ax			; Back to Device segment
 31156 000029CC 29D8                    	sub	ax,bx
 31157 000029CE F7D8                    	neg	ax			; size of device in paras
 31158 000029D0 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31159                                  	
 31160                                  	; 11/12/2022
 31161 000029D3 1F                      	pop	ds
 31162                                  	; ds = cs
 31163                                   	
 31164 000029D4 803E[FF1E]00            	cmp	byte [DeviceHi],0
 31165                                  	;cmp	byte [cs:DeviceHi],0
 31166 000029D9 7405                    	je	short db_lo
 31167                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31168                                  	;jmp	short db_exit
 31169                                  	; 11/12/2022
 31170 000029DB 891E[F51E]              	mov	[DevUMBFree],bx
 31171 000029DF C3                      	retn	
 31172                                  db_lo:
 31173                                  	; 11/12/2022
 31174                                  	; ds = cs
 31175                                  	;mov	[cs:memhi],bx
 31176                                  	;mov	word [cs:memlo],0
 31177 000029E0 891E[E003]              	mov	[memhi],bx
 31178 000029E4 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31179                                  db_exit:
 31180                                  	;pop	ds ; 11/12/2022
 31181 000029EA C3                      	retn
 31182                                  
 31183                                  ; 10/04/2019 - Retro DOS v4.0
 31184                                  
 31185                                  ;----------------------------------------------------------------------------
 31186                                  ;
 31187                                  ; procedure : ParseSize
 31188                                  ;
 31189                                  ;	Parses the command line for SIZE= command
 31190                                  ;
 31191                                  ;	ES:SI = command line to parsed
 31192                                  ;
 31193                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31194                                  ;	updates the DevSizeOption variable with value supplied
 31195                                  ;	in SIZE=option
 31196                                  ;	Returns carry if the SIZE option was invalid
 31197                                  ;
 31198                                  ;----------------------------------------------------------------------------
 31199                                  
 31200                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31201                                  	; (SYSINIT:2D5Ah)
 31202                                  ParseSize:
 31203                                  	;push	bx
 31204                                  	;mov	bx,si
 31205                                  
 31206                                  	; 11/12/2022
 31207                                  	; ds = cs
 31208                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31209                                  	;mov	[cs:DevCmdLine],si
 31210                                  	;mov	[cs:DevCmdLine+2],es
 31211 000029EB C706[001F]0000          	mov	word [DevSizeOption],0 ; init the value
 31212 000029F1 8936[101F]              	mov	[DevCmdLine],si
 31213 000029F5 8C06[121F]              	mov	[DevCmdLine+2],es	
 31214 000029F9 E82800                  	call	SkipDelim
 31215 000029FC 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31216 00002A01 751F                    	jne	short ps_no_size
 31217 00002A03 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31218 00002A09 7517                    	jne	short ps_no_size
 31219 00002A0B 268A4404                	mov	al,[es:si+4]
 31220 00002A0F E86B06                  	call	delim
 31221 00002A12 750E                    	jne	short ps_no_size
 31222 00002A14 83C605                  	add	si,5
 31223 00002A17 E81500                  	call	GetHexNum
 31224 00002A1A 7207                    	jc	short ps_err
 31225                                  	; 11/12/2022
 31226                                  	; ds = cs
 31227                                  	;mov	[cs:DevSizeOption],ax
 31228 00002A1C A3[001F]                	mov	[DevSizeOption],ax
 31229 00002A1F E80200                  	call	SkipDelim
 31230                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31231                                  	;mov	bx,si
 31232                                  ps_no_size:	
 31233                                  	;mov	si,bx
 31234                                  	;pop	bx
 31235 00002A22 F8                      	clc	; cf=0
 31236                                  	;retn
 31237                                  	; 11/12/2022
 31238                                  ps_err:		; cf=1
 31239                                  sd_ret:		; cf=?
 31240 00002A23 C3                      	retn
 31241                                  ;ps_err:
 31242                                  	; 02/11/2022
 31243                                  	;pop	bx
 31244                                  	;stc
 31245                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31246                                  	; 11/12/2022
 31247                                  	; cf=1
 31248                                  	;stc
 31249                                  	; 11/12/2022
 31250                                  ;sd_ret: 
 31251                                  	; 22/07/2023
 31252                                  	; 12/04/2019
 31253                                  	;retn
 31254                                  
 31255                                  ; 12/04/2019 - Retro DOS v4.0
 31256                                  
 31257                                  ;----------------------------------------------------------------------------
 31258                                  ;
 31259                                  ; procedure : SkipDelim
 31260                                  ;
 31261                                  ;	Skips delimiters in the string pointed to by ES:SI
 31262                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31263                                  ;
 31264                                  ;----------------------------------------------------------------------------
 31265                                  	
 31266                                  	; 01/11/2022
 31267                                  SkipDelim:
 31268                                  sd_next_char:
 31269 00002A24 268A04                  	mov	al,[es:si]
 31270 00002A27 E85306                  	call	delim
 31271 00002A2A 75F7                    	jnz	short sd_ret
 31272 00002A2C 46                      	inc	si
 31273 00002A2D EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31274                                  	; 11/12/2022
 31275                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31276                                  ;sd_ret:
 31277                                  	;retn
 31278                                  
 31279                                  ;----------------------------------------------------------------------------
 31280                                  ;
 31281                                  ; procedure : GetHexNum
 31282                                  ;
 31283                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31284                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31285                                  ;
 31286                                  ;	Returns in AX the number number of paras equivalent to the
 31287                                  ;	hex number of bytes specified by the hexadecimal string.
 31288                                  ;
 31289                                  ;	Returns carry in case it encountered a non-hex character or
 31290                                  ;	if it encountered crlf
 31291                                  ;
 31292                                  ;----------------------------------------------------------------------------
 31293                                  
 31294                                  ; 13/05/2019
 31295                                  
 31296                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31297                                  	; (SYSINIT:2DA5h)
 31298                                  GetHexNum:
 31299 00002A2F 31C0                    	xor	ax,ax
 31300 00002A31 31D2                    	xor	dx,dx
 31301                                  ghn_next:
 31302 00002A33 268A1C                  	mov	bl,[es:si]
 31303 00002A36 80FB0D                  	cmp	bl,cr  ; 0Dh
 31304 00002A39 7436                    	je	short ghn_err
 31305 00002A3B 80FB0A                  	cmp	bl,lf  ; 0Ah
 31306 00002A3E 7431                    	je	short ghn_err
 31307 00002A40 50                      	push	ax
 31308 00002A41 88D8                    	mov	al,bl
 31309 00002A43 E83706                  	call	delim
 31310 00002A46 58                      	pop	ax
 31311                                  	; 04/01/2023
 31312 00002A47 B90400                  	mov	cx, 4
 31313 00002A4A 7410                    	jz	short ghn_into_paras
 31314 00002A4C E82400                  	call	GetNibble
 31315                                  	;jc	short ghn_err
 31316                                  	; 11/12/2022
 31317 00002A4F 7221                    	jc	short ghn_ret ; cf=1
 31318                                  	; 04/01/2023
 31319                                  	;mov	cx,4
 31320                                  ghn_shift1:
 31321 00002A51 D1E0                    	shl	ax,1
 31322 00002A53 D1D2                    	rcl	dx,1
 31323 00002A55 E2FA                    	loop	ghn_shift1
 31324 00002A57 08D8                    	or	al,bl
 31325 00002A59 46                      	inc	si
 31326 00002A5A EBD7                    	jmp	short ghn_next
 31327                                  ghn_into_paras:
 31328 00002A5C 83C00F                  	add	ax,15
 31329 00002A5F 83D200                  	adc	dx,0
 31330 00002A62 F7C2F0FF                	test	dx,0FFF0h
 31331 00002A66 7509                    	jnz	short ghn_err
 31332                                  	; 04/01/2023
 31333                                  	;mov	cx,4
 31334                                  ghn_shift2:
 31335 00002A68 F8                      	clc
 31336 00002A69 D1DA                    	rcr	dx,1
 31337 00002A6B D1D8                    	rcr	ax,1
 31338 00002A6D E2F9                    	loop	ghn_shift2
 31339 00002A6F F8                      	clc
 31340 00002A70 C3                      	retn
 31341                                  	; 11/12/2022
 31342                                  ghn_err:
 31343                                  gnib_err:
 31344 00002A71 F9                      	stc
 31345                                  ghn_ret:
 31346                                  gnib_ret:
 31347 00002A72 C3                      	retn
 31348                                  
 31349                                  ;----------------------------------------------------------------------------
 31350                                  ;
 31351                                  ; procedure : GetNibble
 31352                                  ;
 31353                                  ;	Convert one nibble (hex digit) in BL into binary
 31354                                  ;
 31355                                  ;	Retruns binary value in BL
 31356                                  ;
 31357                                  ;	Returns carry if BL contains non-hex digit
 31358                                  ;
 31359                                  ;----------------------------------------------------------------------------
 31360                                  
 31361                                  GetNibble:
 31362 00002A73 80FB30                  	cmp	bl,'0'
 31363                                  	;jb	short gnib_err
 31364                                  	; 11/12/2022
 31365 00002A76 72FA                    	jb	short gnib_ret ; cf=1
 31366 00002A78 80FB39                  	cmp	bl,'9'
 31367 00002A7B 7704                    	ja	short is_it_hex
 31368 00002A7D 80EB30                  	sub	bl,'0'		; clc
 31369 00002A80 C3                      	retn
 31370                                  is_it_hex:
 31371 00002A81 80FB41                  	cmp	bl,'A'
 31372                                  	;jb	short gnib_err
 31373                                  	; 11/12/2022
 31374 00002A84 72EC                    	jb	short gnib_ret ; cf=1
 31375 00002A86 80FB46                  	cmp	bl,'F'
 31376 00002A89 77E6                    	ja	short gnib_err ; 11/12/2022
 31377 00002A8B 80EB37                  	sub	bl,'A'- 10	; clc
 31378 00002A8E C3                      	retn
 31379                                  	; 11/12/2022
 31380                                  ;gnib_err:
 31381                                  ;	stc
 31382                                  ;gnib_ret:
 31383                                  ;	retn
 31384                                  
 31385                                  ;============================================================================
 31386                                  
 31387                                  ; 12/04/2019 - Retro DOS v4.0
 31388                                  
 31389                                  ; umb.inc (MSDOS 6.0, 1991)
 31390                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31391                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31392                                  
 31393                                  XMM_REQUEST_UMB	equ 10h
 31394                                  XMM_RELEASE_UMB	equ 11h
 31395                                  
 31396                                  ;----------------------------------------------------------------------------
 31397                                  ;
 31398                                  ; procedure : AllocUMB
 31399                                  ;
 31400                                  ;	Allocate all UMBs and link it to DOS arena chain
 31401                                  ;
 31402                                  ;----------------------------------------------------------------------------
 31403                                  
 31404                                  AllocUMB:
 31405                                  	; 31/12/2022
 31406                                  	; ds = cs
 31407 00002A8F E81000                  	call	InitAllocUMB		; link in the first UMB
 31408 00002A92 720D                    	jc	short au_exit		; quit on error
 31409                                  au_next:
 31410 00002A94 E83900                  	call	umb_allocate		; allocate
 31411 00002A97 7205                    	jc	short au_coalesce
 31412 00002A99 E85200                  	call	umb_insert		; & insert till no UMBs
 31413 00002A9C EBF6                    	jmp	short au_next
 31414                                  au_coalesce:
 31415 00002A9E E80B01                  	call	umb_coalesce		; coalesce all UMBs
 31416                                  au_exit:
 31417                                  	; 31/12/2022
 31418                                  	; ds = cs
 31419 00002AA1 C3                      	retn
 31420                                  
 31421                                  ;----------------------------------------------------------------------------
 31422                                  ;
 31423                                  ; procedure : InitAllocUMB
 31424                                  ;
 31425                                  ;----------------------------------------------------------------------------
 31426                                  
 31427                                  InitAllocUMB:
 31428                                  	; 31/12/2022
 31429                                  	; ds = cs
 31430 00002AA2 E874DF                  	call	IsXMSLoaded
 31431 00002AA5 7527                    	jnz	short iau_err		; quit on no XMS driver
 31432 00002AA7 B452                    	mov	ah,52h
 31433 00002AA9 CD21                    	int	21h			; get DOS DATA seg
 31434                                  	; 31/12/2022
 31435                                  	; ds = cs
 31436                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31437 00002AAB 8C06[0E1F]              	mov	[DevDOSData],es		; & save it for later
 31438 00002AAF B81043                  	mov	ax,4310h
 31439 00002AB2 CD2F                    	int	2Fh
 31440                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31441                                  	;mov	[cs:DevXMSAddr+2],es
 31442 00002AB4 891E[F71E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31443 00002AB8 8C06[F91E]              	mov	[DevXMSAddr+2],es	
 31444                                  	; 31/12/2022
 31445 00002ABC 803E[0D1F]00            	cmp	byte [FirstUMBLinked],0 
 31446                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31447                                  	;jne	short ia_1		; quit if we already did it
 31448                                  	; 12/12/2022
 31449 00002AC1 770A                    	ja	short ia_1 ; cf=0
 31450 00002AC3 E83401                  	call	LinkFirstUMB		; else link the first UMB
 31451                                  	;jc	short iau_err
 31452                                  	; 12/12/2022
 31453 00002AC6 7207                    	jc	short iau_err2  ; cf=1
 31454                                  	; 31/12/2022
 31455                                  	; ds = cs
 31456 00002AC8 C606[0D1F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31457                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31458                                  ia_1:
 31459                                  	; 12/12/2022
 31460                                  	; cf=0
 31461                                  	;clc
 31462 00002ACD C3                      	retn
 31463                                  iau_err:
 31464 00002ACE F9                      	stc
 31465                                  iau_err2:
 31466 00002ACF C3                      	retn
 31467                                  
 31468                                  ;-------------------------------------------------------------------------
 31469                                  ;
 31470                                  ; Procedure Name	: umb_allocate
 31471                                  ;
 31472                                  ; Inputs		: DS = data
 31473                                  ;
 31474                                  ; Outputs		: if UMB available
 31475                                  ;				Allocates the largest available UMB and 
 31476                                  ;			  	BX = segment of allocated block
 31477                                  ;				DX = size of allocated block
 31478                                  ;				NC
 31479                                  ;			  else 
 31480                                  ;				CY
 31481                                  ;
 31482                                  ; Uses			: BX, DX
 31483                                  ;
 31484                                  ;-------------------------------------------------------------------------
 31485                                  
 31486                                  umb_allocate:
 31487                                  	; 31/12/2022
 31488                                  	; ds = cs
 31489 00002AD0 50                      	push	ax
 31490 00002AD1 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31491 00002AD3 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31492                                  					;   possible
 31493                                  	; 31/12/2022
 31494 00002AD6 FF1E[F71E]              	call	far [DevXMSAddr]
 31495                                  	;call	far [cs:DevXMSAddr]
 31496                                  					; dx now contains the size of
 31497                                  					; the largest UMB
 31498 00002ADA 09D2                    	or	dx,dx
 31499 00002ADC 740D                    	jz	short ua_err
 31500                                  	
 31501 00002ADE B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31502                                  
 31503                                  	; 31/12/2022
 31504 00002AE0 FF1E[F71E]              	call	far [DevXMSAddr]
 31505                                  	;call	far [cs:DevXMSAddr]
 31506                                  
 31507 00002AE4 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31508 00002AE7 7502                    	jne	short ua_err		; N: error
 31509                                  	;clc
 31510                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31511                                  	; 12/12/2022
 31512                                  	; cf=0
 31513                                  	;clc 
 31514                                  ua_done:
 31515 00002AE9 58                      	pop	ax
 31516 00002AEA C3                      	retn
 31517                                  ua_err:
 31518 00002AEB F9                      	stc
 31519 00002AEC EBFB                    	jmp	short ua_done
 31520                                  
 31521                                  ;---------------------------------------------------------------------------
 31522                                  ;
 31523                                  ; Procedure Name	: umb_insert
 31524                                  ;
 31525                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31526                                  ;			: BX = seg address of UMB to be linked in
 31527                                  ;			: DX = size of UMB to be linked in paras
 31528                                  ;			; DS = data
 31529                                  ;
 31530                                  ; Outputs		: links the UMB into the arena chain
 31531                                  ;
 31532                                  ; Uses			: AX, CX, ES, DX, BX
 31533                                  ;
 31534                                  ;---------------------------------------------------------------------------
 31535                                  
 31536                                  umb_insert:
 31537 00002AEE 1E                      	push	ds
 31538                                  
 31539                                  	; 31/12/2022
 31540                                  	; ds = cs
 31541                                  
 31542                                  	;mov	ds,[cs:DevDOSData]
 31543 00002AEF 8E1E[0E1F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31544                                  	;mov	ds,[8Ch]
 31545 00002AF3 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31546 00002AF7 8CD8                    	mov	ax,ds
 31547 00002AF9 8EC0                    	mov	es,ax
 31548                                  ui_next:
 31549 00002AFB 39D8                    	cmp	ax,bx			; Q: is current block above
 31550                                  					;    new block
 31551 00002AFD 770F                    	ja	short ui_insert		; Y: insert it
 31552                                  					; Q: is current block the
 31553                                  					;    last
 31554 00002AFF 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31555 00002B05 745C                    	je	short ui_append		; Y: append new block to chain
 31556                                  					; N: get next block
 31557 00002B07 8ED8                    	mov	ds,ax			; M005
 31558                                  	;call	get_next		; ax = es = next block
 31559 00002B09 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31560 00002B0C EBED                    	jmp	short ui_next
 31561                                  
 31562                                  ui_insert:
 31563 00002B0E 8CD9                    	mov	cx,ds			; ds = previous arena
 31564 00002B10 41                      	inc	cx			; top of previous block
 31565                                  
 31566 00002B11 29D9                    	sub	cx,bx
 31567 00002B13 F7D9                    	neg	cx			; cx = size of used block
 31568                                  	;mov	byte [0],'M'
 31569 00002B15 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31570                                  	;mov	word [1],8
 31571 00002B1A C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31572                                  	;mov	[3],cx
 31573 00002B20 890E0300                	mov	[ARENA.SIZE],cx	
 31574                                  	;mov	word [8],4353h ; 'SC'
 31575 00002B24 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31576                                  
 31577                                  ; prepare the arena at start of new block
 31578                                  
 31579 00002B2A 8EC3                    	mov	es,bx
 31580 00002B2C 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31581 00002B32 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31582                                  					; mark as free
 31583 00002B39 83EA02                  	sub	dx,2			; make room for arena at
 31584                                  					; start & end of new block
 31585 00002B3C 2689160300              	mov	[es:ARENA.SIZE],dx
 31586                                  
 31587                                  ; prepare arena at end of new block
 31588                                  	
 31589 00002B41 01D3                    	add	bx,dx
 31590 00002B43 43                      	inc	bx
 31591 00002B44 8EC3                    	mov	es,bx			; es=arena at top of new block
 31592 00002B46 43                      	inc	bx			; bx=top of new block
 31593                                  
 31594                                  					; ax contains arena just above
 31595                                  					; this block
 31596 00002B47 29D8                    	sub	ax,bx			; ax = size of used block
 31597                                  	
 31598 00002B49 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31599 00002B4F 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31600 00002B56 26A30300                	mov	[es:ARENA.SIZE],ax	
 31601 00002B5A 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31602                                  
 31603 00002B61 EB47                    	jmp	short ui_done
 31604                                  
 31605                                  ui_append:
 31606                                  					; es = arena of last block	
 31607 00002B63 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31608 00002B68 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31609                                  					; going to rsrv on top of this 
 31610                                  					; block for the next arena.
 31611                                  	; 13/05/2019
 31612 00002B6E 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31613                                  
 31614 00002B74 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31615 00002B76 40                      	inc	ax
 31616 00002B77 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31617                                  					;    seg. address of new block
 31618 00002B79 F7D8                    	neg	ax
 31619                                  
 31620 00002B7B 8EC1                    	mov	es,cx			; ds = arena of unused block
 31621                                  
 31622 00002B7D 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31623 00002B83 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31624 00002B8A 26A30300                	mov	[es:ARENA.SIZE],ax	
 31625 00002B8E 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31626                                  
 31627                                  ; prepare the arena at start of new block
 31628 00002B95 8EC3                    	mov	es,bx
 31629 00002B97 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31630 00002B9D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31631                                  					; mark as free
 31632 00002BA4 4A                      	dec	dx			; make room for arena
 31633 00002BA5 2689160300              	mov	[es:ARENA.SIZE],dx	
 31634                                  ui_done:
 31635                                  uc_done: ; 31/12/2022 ; *!
 31636 00002BAA 1F                      	pop	ds
 31637                                  	; ds = cs ; 31/12/2022
 31638                                  ;uc_done:	; 18/12/2022
 31639 00002BAB C3                      	retn
 31640                                  
 31641                                  ; 13/04/2019 - Retro DOS v4.0
 31642                                  
 31643                                  ;----------------------------------------------------------------------------
 31644                                  ;
 31645                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31646                                  ;
 31647                                  ;	Coalesce adds the block following the argument to the argument block,
 31648                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31649                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31650                                  ;	preceeding allocated block.
 31651                                  ;
 31652                                  ;	EXIT	'C' clear if OK
 31653                                  ;		  (ds) unchanged, this block updated
 31654                                  ;		  (ax) = address of next block, IFF not at end
 31655                                  ;		'C' set if arena trashed
 31656                                  ;	USES	cx, di, ds, es
 31657                                  ;
 31658                                  ;----------------------------------------------------------------------------
 31659                                  
 31660                                  umb_coalesce:
 31661                                  	; 31/12/2022
 31662                                  	; ds = cs
 31663 00002BAC 1E                      	push	ds ; *!
 31664                                  
 31665 00002BAD 31FF                    	xor	di, di
 31666                                  
 31667                                  	;mov	es,[cs:DevDOSData]
 31668                                  	; 31/12/2022
 31669 00002BAF 8E06[0E1F]              	mov	es,[DevDOSData]
 31670 00002BB3 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31671                                  uc_nextfree:
 31672 00002BB8 8CC0                    	mov	ax,es
 31673 00002BBA 8ED8                    	mov	ds,ax
 31674                                  	;cmp	[es:1],di
 31675 00002BBC 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31676 00002BC1 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31677                                  					; N: get next arena
 31678 00002BC3 E82100                  	call	get_next		; es, ax = next arena
 31679 00002BC6 72E2                    	jc	short uc_done	; *!
 31680 00002BC8 EBEE                    	jmp	short uc_nextfree
 31681                                  uc_again:
 31682 00002BCA E81A00                  	call	get_next		; ES, AX <- next block
 31683 00002BCD 72DB                    	jc	short uc_done	; *!
 31684                                  uc_check:
 31685 00002BCF 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31686 00002BD4 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31687                                  					; Y: coalesce
 31688 00002BD6 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31689 00002BDB 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31690                                  	;add	[3],cx
 31691 00002BDC 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31692 00002BE0 268A0D                  	mov     cl,[es:di]              ; move up signature
 31693 00002BE3 880D                    	mov     [di],cl
 31694 00002BE5 EBE3                    	jmp     short uc_again		; try again
 31695                                  
 31696                                  	; 18/12/2022
 31697                                  ;uc_done:
 31698                                  	;retn
 31699                                  
 31700                                  ;----------------------------------------------------------------------------
 31701                                  ;
 31702                                  ;**	get_next - Find Next item in Arena
 31703                                  ;
 31704                                  ;	ENTRY	dS - pointer to block head
 31705                                  ;	EXIT	AX,ES - pointers to next head
 31706                                  ;		'C' set if arena damaged
 31707                                  ;
 31708                                  ;----------------------------------------------------------------------------
 31709                                  
 31710                                  	; 01/11/2022
 31711                                  get_next:
 31712 00002BE7 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31713 00002BEC 740A                    	je	short gn_err
 31714                                  _get_next_:
 31715 00002BEE 8CD8                    	mov     ax,ds                   ; ax=current block
 31716 00002BF0 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31717 00002BF4 40                      	inc     ax                      ; remember that header!
 31718 00002BF5 8EC0                    	mov	es,ax
 31719                                  	;clc
 31720                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31721                                  	; 11/12/2022
 31722                                  	; cf=0
 31723                                  	;clc
 31724 00002BF7 C3                      	retn
 31725                                  gn_err:
 31726 00002BF8 F9                      	stc
 31727                                  	; 11/12/2022	
 31728                                  lfu_err:	 ; cf=1
 31729 00002BF9 C3                      	retn
 31730                                  
 31731                                  ;----------------------------------------------------------------------------
 31732                                  ;
 31733                                  ; procedure : LinkFirstUMB
 31734                                  ;
 31735                                  ;----------------------------------------------------------------------------
 31736                                  
 31737                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31738                                  	; (SYSINIT:2F81h)
 31739                                  LinkFirstUMB:
 31740                                  	; 31/12/2022
 31741                                  	; ds = cs
 31742 00002BFA E8D3FE                  	call	umb_allocate
 31743 00002BFD 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31744                                  
 31745                                  ; bx = segment of allocated UMB
 31746                                  ; dx = size of UMB
 31747                                  
 31748                                  	; 31/12/2022
 31749                                  	; ds = cs
 31750                                  
 31751 00002BFF CD12                    	int	12h			; ax = size of memory
 31752 00002C01 B106                    	mov	cl,6
 31753 00002C03 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 31754                                  
 31755 00002C05 89C1                    	mov	cx,ax			; cx = size in paras
 31756 00002C07 29D8                    	sub	ax,bx			; ax = - size of unused block
 31757                                  
 31758 00002C09 F7D8                    	neg	ax
 31759                                  
 31760 00002C0B 83E901                  	sub	cx,1			; cx = first umb_arena
 31761 00002C0E 8EC1                    	mov	es,cx			; es = first umb_arena
 31762                                  	
 31763 00002C10 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31764 00002C16 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31765                                  					
 31766 00002C1D 26A30300                	mov	[es:ARENA.SIZE],ax	
 31767 00002C21 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31768                                  
 31769                                  ; put in the arena for the first UMB
 31770                                  
 31771 00002C28 8EC3                    	mov	es,bx			; es has first free umb seg
 31772 00002C2A 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31773 00002C30 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 31774                                  					; mark as free 
 31775 00002C37 4A                      	dec	dx			; make room for arena
 31776 00002C38 2689160300              	mov	[es:ARENA.SIZE],dx	
 31777                                  
 31778                                  	;mov	es,[cs:DevDOSData]
 31779                                  	; 31/12/2022
 31780 00002C3D 8E06[0E1F]              	mov	es,[DevDOSData] ; ds = cs
 31781 00002C41 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 31782 00002C44 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 31783                                  					;  data segment with the arena
 31784                                  					;  just below Top of Mem
 31785                                  
 31786                                  ; we must now scan the arena chain and update the size of the last arena
 31787                                  
 31788 00002C47 BF2400                  	mov	di,DOS_ARENA ; 24h
 31789 00002C4A 268E05                  	mov	es,[es:di]		; es = start arena
 31790 00002C4D 31FF                    	xor	di,di
 31791                                  ;scan_next
 31792                                  ; 09/12/2022
 31793                                  scannext:
 31794 00002C4F 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 31795 00002C53 740C                    	je	short got_last
 31796                                  	
 31797 00002C55 8CC0                    	mov	ax,es
 31798 00002C57 2603060300              	add	ax,[es:ARENA.SIZE]
 31799 00002C5C 40                      	inc	ax
 31800 00002C5D 8EC0                    	mov	es,ax
 31801                                  	;jmp	short scan_next
 31802                                  	; 09/12/2022
 31803 00002C5F EBEE                    	jmp	short scannext
 31804                                  got_last:
 31805 00002C61 26832E030001            	sub	word [es:ARENA.SIZE],1
 31806 00002C67 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31807                                  	;clc
 31808                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31809                                  	; 11/12/2022
 31810                                  	; cf=0
 31811                                  	;clc
 31812 00002C6D C3                      	retn
 31813                                  
 31814                                  ; 11/12/2022
 31815                                  ;;lfu_err:
 31816                                  ;	;stc
 31817                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31818                                  ;	; 11/12/2022
 31819                                  ;	; cf=1
 31820                                  ;	;stc
 31821                                  ;	retn
 31822                                  
 31823                                  ;----------------------------------------------------------------------------
 31824                                  ;
 31825                                  ; procedure : ShrinkUMB
 31826                                  ;
 31827                                  ;	Shrinks the current UMB in use, so that the unused portions
 31828                                  ;	of the UMB is given back to the DOS free mem pool
 31829                                  ;
 31830                                  ;----------------------------------------------------------------------------
 31831                                  
 31832                                  ShrinkUMB:
 31833                                  	; 12/12/2022
 31834                                  	; ds = cs
 31835 00002C6E 833E[F11E]00            	cmp	word [DevUMBAddr],0
 31836                                  	;cmp	word [cs:DevUMBAddr],0
 31837 00002C73 7421                    	je	short su_exit
 31838 00002C75 06                      	push	es
 31839 00002C76 53                      	push	bx
 31840                                  	; 12/12/2022
 31841                                  	;mov	bx,[cs:DevUMBFree]
 31842                                  	;sub	bx,[cs:DevUMBAddr]
 31843                                  	;mov	es,[cs:DevUMBAddr]
 31844 00002C77 8B1E[F51E]              	mov	bx,[DevUMBFree]
 31845 00002C7B 2B1E[F11E]              	sub	bx,[DevUMBAddr]
 31846 00002C7F 8E06[F11E]              	mov	es,[DevUMBAddr]
 31847                                  	
 31848 00002C83 B8004A                  	mov	ax,4A00h
 31849 00002C86 CD21                    	int	21h
 31850                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 31851                                  		; ES = segment address of block to change
 31852                                  		; BX = new size in paragraphs
 31853 00002C88 8CC0                    	mov	ax,es
 31854 00002C8A 48                      	dec	ax
 31855 00002C8B 8EC0                    	mov	es,ax
 31856 00002C8D 26C70601000800          	mov	word [es:ARENA.OWNER],8
 31857 00002C94 5B                      	pop	bx
 31858 00002C95 07                      	pop	es
 31859                                  su_exit:
 31860 00002C96 C3                      	retn
 31861                                  
 31862                                  ;----------------------------------------------------------------------------
 31863                                  ;
 31864                                  ; procedure : UnlinkUMB
 31865                                  ;
 31866                                  ;	Unlinks the UMBs from the DOS arena chain
 31867                                  ;
 31868                                  ;----------------------------------------------------------------------------
 31869                                  
 31870                                  UnlinkUMB:
 31871                                  	; 12/12/2022
 31872                                  	; ds = cs
 31873 00002C97 1E                      	push	ds
 31874 00002C98 06                      	push	es
 31875                                  	; 12/12/2022
 31876 00002C99 803E[0D1F]00            	cmp	byte [FirstUMBLinked],0
 31877                                  	;cmp	byte [cs:FirstUMBLinked],0
 31878 00002C9E 7420                    	je	short ulu_x		; nothing to unlink
 31879                                  	; 12/12/2022
 31880 00002CA0 8E06[0E1F]              	mov	es,[DevDOSData]
 31881                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 31882 00002CA4 268E1E2400              	mov	ds,[es:DOS_ARENA]
 31883 00002CA9 268B3E8C00              	mov	di,[es:UMB_ARENA]
 31884                                  ulu_next:
 31885 00002CAE E836FF                  	call	get_next
 31886 00002CB1 720D                    	jc	short ulu_x
 31887 00002CB3 39C7                    	cmp	di,ax			; is the next one UMB ?
 31888 00002CB5 7404                    	je	short ulu_found
 31889 00002CB7 8ED8                    	mov	ds,ax
 31890 00002CB9 EBF3                    	jmp	short ulu_next
 31891                                  ulu_found:
 31892                                  	;mov	byte [0],'Z'
 31893 00002CBB C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31894                                  ulu_x:
 31895 00002CC0 07                      	pop	es
 31896 00002CC1 1F                      	pop	ds
 31897 00002CC2 C3                      	retn
 31898                                  
 31899                                  ; ----------------------------------------------------------------------
 31900                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 31901                                  ; ----------------------------------------------------------------------
 31902                                  ; 14/04/2019 - Retro DOS v4.0
 31903                                  
 31904                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 31905                                  ;
 31906                                  ; Summary:
 31907                                  ;
 31908                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 31909                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 31910                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 31911                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 31912                                  ;   and/or config.inc for the full list.
 31913                                  ;
 31914                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 31915                                  ;   configuration support. blockname is either MENU, which contains one
 31916                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 31917                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 31918                                  ;   INCLUDE allows the current block to name another block for inclusion
 31919                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 31920                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 31921                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 31922                                  ;
 31923                                  ; Example:
 31924                                  ;
 31925                                  ;   [menu]
 31926                                  ;   menuitem=misc,Miscellaneous
 31927                                  ;   menuitem=network,Network Configuration
 31928                                  ;   menudefault=network,15
 31929                                  ;
 31930                                  ;   [network]
 31931                                  ;   include misc
 31932                                  ;   device=foo
 31933                                  ;
 31934                                  ;   [misc]
 31935                                  ;   device=bar
 31936                                  ;   include alternate
 31937                                  ;
 31938                                  ;   [alternate]
 31939                                  ;   device=tar
 31940                                  ;
 31941                                  ;
 31942                                  ;   When the menu is displayed
 31943                                  ;
 31944                                  ;    1. Miscellaneous
 31945                                  ;    2. Network Configuration
 31946                                  ;
 31947                                  ;   #2 is highlighted as the default option, and will be automatically
 31948                                  ;   selected after 15 seconds. It will invoke the following lines in the
 31949                                  ;   following order:
 31950                                  ;
 31951                                  ;       DEVICE=BAR
 31952                                  ;       DEVICE=TAR
 31953                                  ;       DEVICE=FOO
 31954                                  ;
 31955                                  
 31956                                  ;MULTI_CONFIG equ 1
 31957                                  
 31958                                  ; the following depend on the positions of the various letters in switchlist
 31959                                  
 31960                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 31961                                  
 31962                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 31963                                  flagdrive	equ 00001000b ; 8 
 31964                                  flagcyln	equ 00010000b ; 16
 31965                                  flagseclim	equ 00100000b ; 32
 31966                                  flagheads	equ 01000000b ; 64
 31967                                  flagff		equ 10000000b ; 128
 31968                                  
 31969                                  ;----------------------------------------------------------------------------
 31970                                  ; 19/04/2019 - Retro DOS v4.0
 31971                                  
 31972                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 31973                                  
 31974                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31975                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 31976                                  
 31977 00002CC3 00                      insert_blank:	db 	0
 31978                                  
 31979                                  ;----------------------------------------------------------------------------
 31980                                  ;
 31981                                  ; procedure : setparms
 31982                                  ;
 31983                                  ; the following set of routines is used to parse the drivparm = command in
 31984                                  ; the config.sys file to change the default drive parameters.
 31985                                  ;
 31986                                  ;----------------------------------------------------------------------------
 31987                                  
 31988                                  setparms:
 31989 00002CC4 1E                      	push	ds
 31990 00002CC5 50                      	push	ax
 31991 00002CC6 53                      	push	bx
 31992 00002CC7 51                      	push	cx
 31993 00002CC8 52                      	push	dx
 31994                                  
 31995 00002CC9 0E                      	push	cs
 31996 00002CCA 1F                      	pop	ds
 31997                                  
 31998 00002CCB 31DB                    	xor	bx,bx
 31999 00002CCD 8A1E[8E36]              	mov	bl,[drive]
 32000                                  	; 18/12/2022
 32001 00002CD1 43                      	inc	bx
 32002                                  	;inc	bl			; get it correct for ioctl call
 32003                                  					; (1=a,2=b...)
 32004 00002CD2 BA[6635]                	mov	dx,deviceparameters
 32005 00002CD5 B444                    	mov	ah,IOCTL ; 44h
 32006 00002CD7 B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 32007 00002CD9 B508                    	mov	ch,RAWIO ; 8
 32008 00002CDB B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32009 00002CDD CD21                    	int	21h
 32010                                  
 32011                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32012                                  ;
 32013                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32014                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32015                                  ;	; 21/10/2022
 32016                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32017                                  ;	mov	ds,ax			; set Bios_Data segment
 32018                                  ;
 32019                                  ;	test	word [cs:switches],flagec35 ; 4
 32020                                  ;	jz	short not_ec35
 32021                                  
 32022                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32023                                  	;test	word [switches],flagec35 ; 4
 32024                                  	; 12/12/2022
 32025 00002CDF F606[8F36]04            	test	byte [switches],flagec35 ; 4
 32026 00002CE4 7411                    	jz	short eot_ok
 32027                                  
 32028                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32029                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32030 00002CE6 8A0E[8E36]              	mov	cl,[drive]
 32031 00002CEA B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32032 00002CED 8ED8                    	mov	ds,ax	
 32033                                  
 32034 00002CEF B001                    	mov	al,1			; assume drive 0
 32035 00002CF1 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32036                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32037 00002CF3 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32038                                  
 32039                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32040                                  ;
 32041                                  ;not_ec35:
 32042                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32043                                  ;;	sectors per track than any old ones.
 32044                                  ;
 32045                                  ;	;mov	al,[cs:deviceparameters+20]
 32046                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32047                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32048                                  ;	cmp	al,[EOT]
 32049                                  ;	jbe	short eot_ok
 32050                                  ;	mov	[EOT],al
 32051                                  
 32052                                  eot_ok:
 32053 00002CF7 5A                      	pop	dx			; fix up all the registers
 32054 00002CF8 59                      	pop	cx
 32055 00002CF9 5B                      	pop	bx
 32056 00002CFA 58                      	pop	ax
 32057 00002CFB 1F                      	pop	ds ; 13/05/2019
 32058 00002CFC C3                      	retn
 32059                                  
 32060                                  ;----------------------------------------------------------------------------
 32061                                  ;
 32062                                  ; procedure : diddleback
 32063                                  ;
 32064                                  ; replace default values for further drivparm commands
 32065                                  ;
 32066                                  ;----------------------------------------------------------------------------
 32067                                  
 32068                                  diddleback:
 32069 00002CFD 1E                      	push	ds
 32070 00002CFE 0E                      	push	cs
 32071 00002CFF 1F                      	pop	ds
 32072                                  	;mov	word [deviceparameters+4],80
 32073 00002D00 C706[6A35]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32074                                  	;mov	byte [deviceparameters+1],2
 32075 00002D06 C606[6735]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32076                                  	;mov	word [deviceparameters+2],0
 32077 00002D0B C706[6835]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32078 00002D11 C706[8F36]0000          	mov	word [switches],0	    ; zero all switches
 32079 00002D17 1F                      	pop	ds
 32080 00002D18 C3                      	retn
 32081                                  
 32082                                  ; 04/01/2023
 32083                                  %if 0
 32084                                  
 32085                                  ; 15/04/2019 - Retro DOS v4.0
 32086                                  
 32087                                  ;----------------------------------------------------------------------------
 32088                                  ;
 32089                                  ; procedure : parseline
 32090                                  ;
 32091                                  ; entry point is parseline. al contains the first character in command line.
 32092                                  ;
 32093                                  ;----------------------------------------------------------------------------
 32094                                  
 32095                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32096                                  	; (SYSINIT:30ACh)
 32097                                  
 32098                                  parseline:
 32099                                  	push	ds
 32100                                  
 32101                                  	push	cs
 32102                                  	pop	ds
 32103                                  
 32104                                  nextswtch:
 32105                                  	cmp	al,cr			; carriage return?
 32106                                  	je	short done_line
 32107                                  	cmp	al,lf			; linefeed?
 32108                                  	je	short put_back		; put it back and done
 32109                                  
 32110                                  ; anything less or equal to a space is ignored.
 32111                                  
 32112                                  	cmp	al,' '                  ; space?
 32113                                  	jbe	short getnext		; skip over space
 32114                                  	cmp	al,'/'
 32115                                  	je	short getparm
 32116                                  	stc				; mark error invalid-character-in-input
 32117                                  	jmp	short exitpl
 32118                                  
 32119                                  getparm:
 32120                                  	call	check_switch
 32121                                  	mov	[switches],bx		; save switches read so far
 32122                                  	jc	short swterr
 32123                                  getnext:
 32124                                  	call	getchr
 32125                                  	jc	short done_line
 32126                                  	jmp	short nextswtch
 32127                                  swterr:
 32128                                  	jmp	short exitpl		; exit if error
 32129                                  
 32130                                  done_line:
 32131                                  	; 12/12/2022
 32132                                  	test	byte [switches],flagdrive ; 8
 32133                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32134                                  	jnz	short okay
 32135                                  	stc				; mark error no-drive-specified
 32136                                  	jmp	short exitpl
 32137                                  
 32138                                  okay:
 32139                                  	mov	ax,[switches]
 32140                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32141                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32142                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32143                                  	;clc			    ; everything is fine
 32144                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32145                                  	; 12/12/2022
 32146                                  	; cf=0
 32147                                  	;clc
 32148                                  	call	setdeviceparameters
 32149                                  exitpl:
 32150                                  	pop	ds
 32151                                  	retn
 32152                                  put_back:
 32153                                  	inc	word [count]		; one more char to scan
 32154                                  	dec	word [chrptr]		; back up over linefeed
 32155                                  	jmp	short done_line
 32156                                  
 32157                                  %endif
 32158                                  
 32159                                  ;----------------------------------------------------------------------------
 32160                                  ;
 32161                                  ; procedure : check_switch
 32162                                  ;
 32163                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32164                                  ; gets the number, if any required, following the switch. the switch and the
 32165                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32166                                  ; error.
 32167                                  ;
 32168                                  ;----------------------------------------------------------------------------
 32169                                  
 32170                                  check_switch:
 32171 00002D19 E817FA                  	call	getchr
 32172                                  	;jc	short err_check
 32173 00002D1C 724E                    	jc	short err_chk
 32174 00002D1E 24DF                            and     al,0DFh                 ; convert it to upper case
 32175 00002D20 3C41                    	cmp	al,'A'
 32176                                  	;jb	short err_check
 32177 00002D22 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32178 00002D24 3C5A                    	cmp	al,'Z'
 32179 00002D26 7743                    	ja	short err_check
 32180                                  
 32181 00002D28 06                      	push	es
 32182                                  
 32183 00002D29 0E                      	push	cs
 32184 00002D2A 07                      	pop	es
 32185                                  
 32186 00002D2B 8A0E[2237]              	mov	cl,[switchlist]		; get number of valid switches
 32187 00002D2F B500                    	mov	ch,0
 32188 00002D31 BF[2337]                	mov	di,1+switchlist		; point to string of valid switches
 32189 00002D34 F2AE                    	repne	scasb
 32190                                  
 32191 00002D36 07                      	pop	es
 32192 00002D37 7532                    	jnz	short err_check
 32193                                  
 32194 00002D39 B80100                  	mov	ax,1
 32195 00002D3C D3E0                    	shl	ax,cl			; set bit to indicate switch
 32196 00002D3E 8B1E[8F36]              	mov	bx,[switches]		; get switches so far
 32197 00002D42 09C3                    	or	bx,ax			; save this with other switches
 32198 00002D44 89C1                    	mov	cx,ax
 32199                                  	; 12/12/2022
 32200 00002D46 A8F8                    	test	al,switchnum ; 0F8h
 32201                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32202 00002D48 741E                    	jz	short done_swtch
 32203                                  
 32204 00002D4A E8E6F9                  	call	getchr
 32205 00002D4D 721A                    	jc	short err_swtch
 32206                                  
 32207 00002D4F 3C3A                    	cmp	al,':'
 32208 00002D51 7516                    	jne	short err_swtch
 32209                                  
 32210 00002D53 E8DDF9                  	call	getchr
 32211 00002D56 53                      	push	bx			; preserve switches
 32212                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32213                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32214                                  	; 12/12/2022
 32215                                  	; ds = cs
 32216 00002D57 C606[2A03]20            	mov	byte [sepchr],' '
 32217 00002D5C E8D803                  	call	getnum
 32218                                  	;mov	byte [cs:sepchr],0
 32219                                  	; 12/12/2022
 32220 00002D5F C606[2A03]00            	mov	byte [sepchr],0
 32221 00002D64 5B                      	pop	bx			; restore switches
 32222                                  
 32223                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32224                                  ; not check for carry set here. if there is an error, it will be detected
 32225                                  ; further on (hopefully).
 32226                                  
 32227 00002D65 E80500                  	call	process_num
 32228                                  
 32229                                  done_swtch:
 32230                                  	;clc
 32231                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32232                                  	; 12/12/2022
 32233                                  	; cf=0
 32234                                  	;clc
 32235 00002D68 C3                      	retn
 32236                                  
 32237                                  err_swtch:
 32238 00002D69 31CB                    	xor	bx,cx			; remove this switch from the records
 32239                                  err_check:
 32240 00002D6B F9                      	stc
 32241                                  err_chk:
 32242 00002D6C C3                      	retn
 32243                                  
 32244                                  ;----------------------------------------------------------------------------
 32245                                  ;
 32246                                  ; procedure : process_num
 32247                                  ;
 32248                                  ; this routine takes the switch just input, and the number following (if any),
 32249                                  ; and sets the value in the appropriate variable. if the number input is zero
 32250                                  ; then it does nothing - it assumes the default value that is present in the
 32251                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32252                                  ;
 32253                                  ;----------------------------------------------------------------------------
 32254                                  
 32255                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32256                                  	; (SYSINIT:3156h)
 32257                                  process_num:
 32258 00002D6D 850E[8F36]              	test	[switches],cx		; if this switch has been done before,
 32259 00002D71 752B                    	jnz	short done_ret		; ignore this one.
 32260                                  	; 12/12/2022
 32261 00002D73 F6C108                  	test	cl,flagdrive ; 8
 32262                                  	;test	cx,flagdrive ; 8
 32263 00002D76 7404                    	jz	short try_f
 32264 00002D78 A2[8E36]                	mov	byte [drive],al
 32265                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32266                                  	;jmp	short done_ret
 32267                                  	; 12/12/2022
 32268                                  	; cf=0
 32269 00002D7B C3                      	retn	; 13/05/2019
 32270                                  try_f:
 32271                                  	; 12/12/2022
 32272 00002D7C F6C180                  	test	cl,flagff ; 80h
 32273                                  	;test	cx,flagff ; 80h
 32274 00002D7F 7404                    	jz	short try_t
 32275                                  
 32276                                  ; ensure that we do not get bogus form factors that are not supported
 32277                                  
 32278                                  	;mov	[deviceparameters+1],al
 32279 00002D81 A2[6735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32280                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32281                                  	;jmp	short done_ret
 32282                                  	; 12/12/2022
 32283                                  	; cf=0
 32284 00002D84 C3                      	retn	; 13/05/2019
 32285                                  try_t:
 32286 00002D85 09C0                    	or	ax,ax
 32287 00002D87 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32288                                  	; 12/12/2022
 32289 00002D89 F6C110                  	test	cl,flagcyln ; 10h
 32290                                  	;test	cx,flagcyln ; 10h
 32291 00002D8C 7404                    	jz	short try_s
 32292                                  
 32293                                  	;mov	[deviceparameters+4],ax
 32294 00002D8E A3[6A35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32295                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32296                                  	;jmp	short done_ret
 32297                                  	; 12/12/2022
 32298                                  	; cf=0
 32299 00002D91 C3                      	retn	; 13/05/2019
 32300                                  try_s:
 32301                                  	; 12/12/2022
 32302 00002D92 F6C120                  	test	cl,flagseclim ; 20h
 32303                                  	;test	cx,flagseclim ; 20h
 32304 00002D95 7404                    	jz	short try_h
 32305 00002D97 A3[8C36]                	mov	[slim],ax
 32306                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32307                                  	;jmp	short done_ret
 32308                                  	; 12/12/2022
 32309                                  	; cf=0
 32310 00002D9A C3                      	retn	; 13/05/2019
 32311                                  
 32312                                  ; must be for number of heads
 32313                                  
 32314                                  try_h:
 32315 00002D9B A3[8A36]                	mov	[hlim],ax
 32316                                  done_ret:
 32317                                  	;clc
 32318                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32319                                  	; 12/12/2022
 32320                                  	; cf=0 (test instruction resets cf)
 32321                                  	;clc
 32322 00002D9E C3                      	retn
 32323                                  
 32324                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32325                                  %if 1
 32326                                  
 32327                                  ; 15/04/2019 - Retro DOS v4.0
 32328                                  
 32329                                  ;----------------------------------------------------------------------------
 32330                                  ;
 32331                                  ; procedure : parseline
 32332                                  ;
 32333                                  ; entry point is parseline. al contains the first character in command line.
 32334                                  ;
 32335                                  ;----------------------------------------------------------------------------
 32336                                  
 32337                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32338                                  	; (SYSINIT:30ACh)
 32339                                  parseline:
 32340                                  	; 04/01/2023
 32341                                  	; ds = cs ; *
 32342                                  
 32343                                  	;push	ds ; *
 32344                                  
 32345                                  	;push	cs ; *
 32346                                  	;pop	ds ; *
 32347                                  
 32348                                  nextswtch:
 32349 00002D9F 3C0D                    	cmp	al,cr			; carriage return?
 32350 00002DA1 741C                    	je	short done_line
 32351 00002DA3 3C0A                    	cmp	al,lf			; linefeed?
 32352 00002DA5 7421                    	je	short put_back		; put it back and done
 32353                                  
 32354                                  ; anything less or equal to a space is ignored.
 32355                                  
 32356 00002DA7 3C20                    	cmp	al,' '                  ; space?
 32357 00002DA9 760F                    	jbe	short getnext		; skip over space
 32358 00002DAB 3C2F                    	cmp	al,'/'
 32359 00002DAD 7402                    	je	short getparm
 32360 00002DAF F9                      	stc				; mark error invalid-character-in-input
 32361                                  	;jmp	short exitpl
 32362                                  	; 04/01/2023
 32363                                  swterr:
 32364 00002DB0 C3                      	retn
 32365                                  
 32366                                  getparm:
 32367 00002DB1 E865FF                  	call	check_switch
 32368 00002DB4 891E[8F36]              	mov	[switches],bx		; save switches read so far
 32369 00002DB8 72F6                    	jc	short swterr
 32370                                  getnext:
 32371 00002DBA E876F9                  	call	getchr
 32372                                  	;jc	short done_line
 32373                                  	;jmp	short nextswtch
 32374                                  	; 04/01/2023
 32375 00002DBD 73E0                    	jnc	short nextswtch
 32376                                  ;swterr:
 32377                                  	;jmp	short exitpl		; exit if error
 32378                                  
 32379                                  done_line:
 32380                                  	; 12/12/2022
 32381 00002DBF F606[8F36]08            	test	byte [switches],flagdrive ; 8
 32382                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32383 00002DC4 750C                    	jnz	short okay
 32384 00002DC6 F9                      	stc				; mark error no-drive-specified
 32385                                  	;jmp	short exitpl
 32386                                  	; 04/01/2023
 32387 00002DC7 C3                      	retn
 32388                                  
 32389                                  ;exitpl:
 32390                                  	; 04/01/2023
 32391                                  	; ds = cs
 32392                                  	;;pop	ds ; *
 32393                                  	;retn
 32394                                  
 32395                                  put_back:
 32396 00002DC8 FF06[D203]              	inc	word [count]		; one more char to scan
 32397 00002DCC FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32398 00002DD0 EBED                    	jmp	short done_line
 32399                                  
 32400                                  okay:
 32401 00002DD2 A1[8F36]                	mov	ax,[switches]
 32402 00002DD5 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32403 00002DD8 A3[6835]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32404 00002DDB C706[8C35]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32405                                  	;clc			    ; everything is fine
 32406                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32407                                  	; 12/12/2022
 32408                                  	; cf=0
 32409                                  	;clc
 32410                                  	;call	setdeviceparameters
 32411                                  	; 04/01/2023
 32412                                  	;jmp	short setdeviceparameters
 32413                                  
 32414                                  %endif
 32415                                  
 32416                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32417                                  
 32418                                  ;----------------------------------------------------------------------------
 32419                                  ;
 32420                                  ; procedure : setdeviceparameters
 32421                                  ;
 32422                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32423                                  ; system based on the form factor. it is assumed that the bpbs for the
 32424                                  ; various form factors are present in the bpbtable. for hard files,
 32425                                  ; the recommended bpb is the same as the bpb on the drive.
 32426                                  ; no attempt is made to preserve registers since we are going to jump to
 32427                                  ; sysinit straight after this routine.
 32428                                  ;
 32429                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32430                                  ;	  we always return no carry
 32431                                  ;
 32432                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32433                                  ;
 32434                                  ;----------------------------------------------------------------------------
 32435                                  
 32436                                  ; 15/04/2019 - Retro DOS v4.0
 32437                                  
 32438                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32439                                  setdeviceparameters:
 32440                                  	; 04/01/2023
 32441                                  	; ds = cs
 32442                                  	
 32443 00002DE1 06                      	push	es
 32444                                  
 32445 00002DE2 0E                      	push	cs
 32446 00002DE3 07                      	pop	es
 32447                                  
 32448 00002DE4 31DB                    	xor	bx,bx
 32449 00002DE6 8A1E[6735]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32450 00002DEA 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32451 00002DED 7506                    	jne	short got_80
 32452                                  
 32453 00002DEF C706[6A35]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32454                                  							; 48 tpi=40 cyl
 32455                                  got_80:
 32456 00002DF5 D1E3                    	shl	bx,1			; get index into bpb table
 32457 00002DF7 8BB7[0E37]              	mov	si,[bpbtable+bx]	; get address of bpb
 32458                                  
 32459                                  	;mov	di,deviceparameters+7	
 32460                                  	; 02/11/2022
 32461 00002DFB BF[6D35]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32462 00002DFE B91F00                  	mov	cx,A_BPB.size ; 31
 32463 00002E01 FC                      	cld
 32464                                  	;repe	movsb
 32465                                  	; 02/11/2022
 32466 00002E02 F3A4                    	rep	movsb
 32467                                  
 32468 00002E04 07                      	pop	es
 32469                                  
 32470                                  	; 12/12/2022
 32471 00002E05 F606[8F36]20            	test	byte [switches],flagseclim ; 20h
 32472                                  	;test	word [switches],flagseclim ; 20h
 32473 00002E0A 7406                    	jz	short see_heads
 32474                                  
 32475 00002E0C A1[8C36]                	mov	ax,[slim]
 32476                                  	;mov	[deviceparameters+20],ax
 32477 00002E0F A3[7A35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32478                                  
 32479                                  see_heads:
 32480                                  	; 12/12/2022
 32481 00002E12 F606[8F36]40            	test	byte [switches],flagheads ; 40h
 32482                                  	;test	word [switches],flagheads ; 40h
 32483 00002E17 7406                    	jz	short heads_not_altered
 32484                                  
 32485 00002E19 A1[8A36]                	mov	ax,[hlim]
 32486                                  	;mov	[deviceparameters+22],ax	
 32487 00002E1C A3[7C35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32488                                  
 32489                                  heads_not_altered:
 32490                                  
 32491                                  ; set up correct media descriptor byte and sectors/cluster
 32492                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32493                                  
 32494                                  	;mov	byte [deviceparameters+9],2
 32495                                  	; 02/11/2022
 32496                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32497                                  	; 04/01/2023
 32498 00002E1F B80200                  	mov	ax,2	
 32499 00002E22 A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32500                                  
 32501 00002E25 B3F0                    	mov	bl,0F0h			; get default mediabyte
 32502                                  
 32503                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32504                                  
 32505                                  	;mov	bh,[deviceparameters+17]
 32506                                  	; 02/11/2022
 32507 00002E27 8A3E[7735]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32508                                  
 32509                                  	; 04/01/2023
 32510                                  	; ax = 2
 32511 00002E2B 3906[7C35]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32512                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32513 00002E2F 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32514                                  
 32515 00002E31 7524                    	jne	short only_one_head	; one head, do one head stuff
 32516                                  
 32517                                  ;	two head drives will use the mediadescriptor from the bpb
 32518                                  
 32519 00002E33 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32520                                  
 32521                                  ;	two sided drives have two special cases to look for. One is
 32522                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32523                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32524                                  ;	   one sector/cluster.
 32525                                  
 32526                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32527                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32528                                  ;	   type of 2 headed drive is all set.
 32529                                  
 32530 00002E35 833E[7A35]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32531 00002E3A 7509                    	jne	short not_144m
 32532 00002E3C 833E[6A35]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32533 00002E41 7502                    	jne	short not_144m
 32534                                  
 32535                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32536                                  
 32537 00002E43 EB24                    	jmp	short got_one_secperclus_drive
 32538                                  
 32539                                  ;	check for 320K
 32540                                  
 32541                                  not_144m:
 32542 00002E45 833E[6A35]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32543 00002E4A 7521                    	jne	short got_correct_mediad
 32544 00002E4C 833E[7A35]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32545 00002E51 751A                    	jne	short got_correct_mediad
 32546                                  
 32547 00002E53 B3FC                    	mov	bl,0FCh
 32548 00002E55 EB16                    	jmp	short got_correct_mediad
 32549                                  
 32550                                  only_one_head:
 32551                                  
 32552                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32553                                  
 32554 00002E57 803E[6735]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32555 00002E5C 740B                    	je	short got_one_secperclus_drive
 32556                                  
 32557                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32558                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32559                                  ;	  besides 8 will be considered 0fch
 32560                                  
 32561 00002E5E B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32562 00002E60 833E[7A35]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32563                                  	; 12/12/2022
 32564 00002E65 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32565                                  
 32566 00002E67 B3FE                    	mov	bl,0FEh			; 160K mediaid
 32567                                  
 32568                                  ;	we've either got a one sided drive, or a 1.44M drive
 32569                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32570                                  
 32571                                  got_one_secperclus_drive:
 32572                                  	; 04/01/2023
 32573                                  	; ax = 2
 32574 00002E69 48                      	dec	ax  ; ax = 1
 32575 00002E6A A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32576                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32577                                  
 32578                                  got_correct_mediad:
 32579 00002E6D 881E[7735]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32580                                  
 32581                                  ;	 Calculate the correct number of Total Sectors on medium
 32582                                  
 32583 00002E71 A1[6A35]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32584 00002E74 F726[7C35]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32585 00002E78 F726[7A35]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32586 00002E7C A3[7535]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32587 00002E7F F8                      	clc				; we currently return no errors
 32588                                  
 32589 00002E80 C3                      	retn
 32590                                  
 32591                                  ;	M047 -- end rewritten routine
 32592                                  
 32593                                  ;----------------------------------------------------------------------------
 32594                                  ;
 32595                                  ; procedure : organize
 32596                                  ;
 32597                                  ;----------------------------------------------------------------------------
 32598                                  
 32599                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32600                                  	; (SYSINIT:3234h)
 32601                                  
 32602                                  organize:
 32603                                  	; 04/01/2023
 32604                                  	; ds = cs
 32605 00002E81 8B0E[D203]              	mov	cx,[count]
 32606                                  	;mov	cx,[cs:count]
 32607 00002E85 E326                    	jcxz	nochar1
 32608                                  
 32609                                  ;ifndef	MULTI_CONFIG
 32610                                  ;
 32611                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32612                                  ;;   because we the case of values in SET commands preserved
 32613                                  ;
 32614                                  ;	call	mapcase
 32615                                  ;endif
 32616                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32617 00002E87 E81B02                  	call	mapcase
 32618                                  
 32619 00002E8A 31F6                    	xor	si,si
 32620 00002E8C 89F7                    	mov	di,si
 32621 00002E8E 31C0                    	xor	ax,ax
 32622                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32623                                  	;;mov	byte [cs:com_level],0
 32624                                  	; 12/12/2022
 32625                                  	;mov	[cs:com_level],al ; 0
 32626                                  	; 04/01/2023
 32627                                  	; ds = cs
 32628 00002E90 A2[CC03]                	mov	[com_level],al ; 0
 32629                                  org1:
 32630 00002E93 E8B101                  	call	skip_comment
 32631 00002E96 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32632 00002E98 E89601                  	call	get2			; not a comment string. then get a char.
 32633 00002E9B 3C0A                    	cmp	al,lf ; 0Ah
 32634 00002E9D 7406                    	je	short end_commd_line	; starts with a blank line.
 32635 00002E9F 3C20                    	cmp	al,' ' ; 20h
 32636 00002EA1 76F0                    	jbe	short org1		; skip leading control characters
 32637 00002EA3 EB0A                    	jmp	short findit
 32638                                  
 32639                                  end_commd_line:
 32640 00002EA5 AA                      	stosb				; store line feed char in buffer for the linecount.
 32641                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32642                                  	; 04/01/2023
 32643                                  	; ds = cs
 32644 00002EA6 C606[CC03]00            	mov	byte [com_level],0
 32645 00002EAB EBE6                    	jmp	short org1
 32646                                  
 32647                                  nochar1:
 32648 00002EAD F9                      	stc
 32649 00002EAE C3                      	retn
 32650                                  
 32651                                  findit:
 32652 00002EAF 51                      	push	cx
 32653 00002EB0 56                      	push	si
 32654 00002EB1 57                      	push	di
 32655 00002EB2 89F5                    	mov	bp,si
 32656 00002EB4 4D                      	dec	bp
 32657 00002EB5 BE[D534]                        mov     si,comtab		; prepare to search command table
 32658 00002EB8 B500                    	mov	ch,0
 32659                                  findcom:
 32660 00002EBA 89EF                    	mov	di,bp
 32661 00002EBC 8A0C                    	mov	cl,[si]
 32662 00002EBE 46                      	inc	si
 32663 00002EBF E324                    	jcxz	nocom
 32664                                  
 32665                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32666                                  
 32667                                  ;ifdef	MULTI_CONFIG
 32668                                  ;
 32669                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32670                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32671                                  ;;   anything in particular)
 32672                                  ;
 32673                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32674                                  ;       je	short semicolon
 32675                                  ;loopcom:
 32676                                  ;       mov     al,[es:di]
 32677                                  ;       inc     di
 32678                                  ;       and     al,~20h ; 0DFh		; force upper case
 32679                                  ;       inc     si                      ; compare to byte @es:di
 32680                                  ;       cmp     al,[si-1]
 32681                                  ;       loope   loopcom
 32682                                  ;;else
 32683                                  ;;	repe	cmpsb
 32684                                  ;endif
 32685                                  	; 02/11/2022
 32686 00002EC1 F3A6                    	repe	cmpsb
 32687                                  
 32688 00002EC3 9F                      	lahf
 32689 00002EC4 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32690 00002EC6 9E                      	sahf
 32691 00002EC7 AC                              lodsb                           ; get indicator letter
 32692 00002EC8 75F0                    	jnz	short findcom
 32693 00002ECA 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32694 00002ECE 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32695 00002ED0 26803D0A                	cmp	byte [es:di],lf
 32696 00002ED4 740A                    	je	short gotcom0
 32697                                  
 32698                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32699                                  ;
 32700                                  ;;ifdef	MULTI_CONFIG
 32701                                  ;
 32702                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32703                                  ;
 32704                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32705                                  ;       je	short gotcom0
 32706                                  ;;endif
 32707                                  ;	push	ax
 32708                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32709                                  ;
 32710                                  ;;ifdef	MULTI_CONFIG
 32711                                  ;
 32712                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32713                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32714                                  ;;   stored in the CONFIG.SYS memory image.
 32715                                  ;
 32716                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32717                                  ;       jne	short no_query		; no
 32718                                  ;       pop     ax                      ; yes, so retrieve the original code
 32719                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32720                                  ;       jmp     short gotcom0           ;
 32721                                  ;semicolon:
 32722                                  ;       mov     al,CONFIG_REM
 32723                                  ;       jmp     short gotcom0
 32724                                  ;no_query:
 32725                                  ;;endif  ;MULTI_CONFIG
 32726                                  
 32727                                  	; 02/11/2022
 32728 00002ED6 50                      	push	ax
 32729 00002ED7 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32730                                  
 32731 00002EDA E8A001                  	call	delim
 32732                                  no_delim:
 32733 00002EDD 58                      	pop	ax
 32734 00002EDE 75DA                    	jnz	short findcom
 32735                                  gotcom0:
 32736 00002EE0 5F                      	pop	di
 32737 00002EE1 5E                      	pop	si
 32738 00002EE2 59                      	pop	cx
 32739 00002EE3 EB0F                    	jmp	short gotcom
 32740                                  nocom:
 32741 00002EE5 5F                      	pop	di
 32742 00002EE6 5E                      	pop	si
 32743 00002EE7 59                      	pop	cx
 32744 00002EE8 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32745 00002EEA AA                      	stosb				; save indicator char.
 32746                                  _skipline:
 32747 00002EEB E84301                  	call	get2
 32748 00002EEE 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32749 00002EF0 75F9                            jne     short _skipline
 32750 00002EF2 EBB1                    	jmp	short end_commd_line	; handle next command line
 32751                                  gotcom:
 32752 00002EF4 AA                              stosb                           ; save indicator char in buffer
 32753                                  
 32754                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32755                                  ;;ifdef	MULTI_CONFIG
 32756                                  ;
 32757                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 32758                                  ;;   it screws up the direct comparisons below.
 32759                                  ;
 32760                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 32761                                  ;;endif
 32762                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 32763                                  ;
 32764                                  ;;ifdef	MULTI_CONFIG
 32765                                  ;
 32766                                  ;;   There is no whitespace/delimiter between the "begin block" character
 32767                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 32768                                  ;;   skipping code
 32769                                  ;
 32770                                  ;       cmp     al,CONFIG_BEGIN
 32771                                  ;       je	short org31
 32772                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 32773                                  ;       je      short no_mapcase
 32774                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 32775                                  ;       je      short no_mapcase
 32776                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 32777                                  ;       je      short no_mapcase
 32778                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 32779                                  ;       je      short no_mapcase
 32780                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 32781                                  ;no_mapcase:
 32782                                  ;;endif
 32783                                  
 32784                                  	; 02/11/2022
 32785                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 32786                                  	; 04/01/2023
 32787                                  	; ds = cs
 32788 00002EF5 A2[D003]                	mov	[cmd_indicator],al
 32789                                  org2:	
 32790 00002EF8 E83601                  	call    get2                    ; skip the command name until delimiter
 32791 00002EFB 3C0A                            cmp     al,lf
 32792 00002EFD 740B                    	je	short org21
 32793 00002EFF 3C0D                    	cmp	al,cr
 32794 00002F01 7407                    	je	short org21
 32795                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32796                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 32797                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 32798                                  
 32799 00002F03 E87701                  	call	delim
 32800 00002F06 75F0                            jnz	short org2
 32801 00002F08 EB02                    	jmp	short org3
 32802                                  org21:					;if cr or lf then
 32803 00002F0A 4E                      	dec	si			; undo si, cx register
 32804 00002F0B 41                      	inc	cx			;  and continue
 32805                                  org3:	
 32806                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 32807                                  	;je	short get_cmt_token
 32808                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32809                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32810                                  	;;je	short org_file
 32811                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 32812                                  	;je	short org_file
 32813                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32814                                          ;;je	short org_file
 32815                                  	;; 02/11/2022
 32816                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32817                                  	;je	short org_file
 32818                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 32819                                  	;je	short org_file
 32820                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 32821                                  	;je	short org_switch
 32822                                  
 32823                                  	; 04/01/2023
 32824                                  	; ds = cs
 32825                                  
 32826 00002F0C 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 32827 00002F11 7456                    	je	short get_cmt_token
 32828                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32829                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32830                                  	;je	short org_file
 32831 00002F13 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 32832 00002F18 7429                    	je	short org_file
 32833                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32834                                          ;je	short org_file
 32835                                  	; 02/11/2022
 32836 00002F1A 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32837 00002F1F 7422                    	je	short org_file
 32838 00002F21 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 32839 00002F26 741B                    	je	short org_file
 32840 00002F28 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 32841 00002F2D 7403                    	je	short org_switch
 32842                                  	
 32843                                  org31:
 32844 00002F2F E99500                  	jmp	org4
 32845                                  
 32846                                  org_switch:
 32847 00002F32 E81201                  	call	skip_comment
 32848 00002F35 7472                    	jz	short end_commd_line_brdg
 32849                                  
 32850 00002F37 E8F700                  	call	get2
 32851 00002F3A E84801                  	call	org_delim
 32852 00002F3D 74F3                    	jz	short org_switch
 32853                                  
 32854 00002F3F AA                      	stosb
 32855 00002F40 E99300                  	jmp	org5
 32856                                  
 32857                                  org_file:			; get the filename and put 0 at end
 32858 00002F43 E80101                  	call	skip_comment
 32859 00002F46 7464                    	jz	short org_put_zero
 32860                                  
 32861 00002F48 E8E600                  	call	get2		; not a comment
 32862 00002F4B E82F01                  	call	delim
 32863 00002F4E 74F3                    	jz	short org_file	; skip the possible delimiters
 32864                                  
 32865 00002F50 AA                      	stosb			; copy the first non delim char found in buffer
 32866                                  
 32867                                  org_copy_file:
 32868 00002F51 E8F300                  	call	skip_comment	; comment char in the filename?
 32869 00002F54 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 32870                                  
 32871 00002F56 E8D800                  	call	get2
 32872 00002F59 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 32873 00002F5B 7457                    	je	short end_file_slash ; this will be the special case.
 32874                                  
 32875 00002F5D AA                      	stosb			; save the char. in buffer
 32876 00002F5E E81C01                  	call	delim
 32877 00002F61 7459                    	jz	short end_copy_file
 32878                                  
 32879 00002F63 3C20                    	cmp	al, ' '
 32880 00002F65 77EA                    	ja	short org_copy_file ; keep copying
 32881 00002F67 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 32882                                  
 32883                                  get_cmt_token:			; get the token. just max. 2 char.
 32884 00002F69 E8C500                  	call	get2
 32885 00002F6C 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 32886 00002F6E 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 32887 00002F70 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 32888 00002F72 74F5                    	je	short get_cmt_token ;  character.)
 32889 00002F74 3C3D                    	cmp	al,'='		; = is special in this case.
 32890 00002F76 74F1                    	je	short get_cmt_token
 32891 00002F78 3C0D                    	cmp	al,cr
 32892 00002F7A 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 32893 00002F7C 3C0A                    	cmp	al,lf
 32894 00002F7E 7422                    	je	short get_cmt_end
 32895                                  
 32896                                  	; 04/01/2023
 32897                                  	; ds = cs
 32898                                  	;mov	[cs:cmmt1],al	; store it
 32899                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 32900 00002F80 A2[CE03]                	mov	[cmmt1],al	; store it
 32901 00002F83 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 32902 00002F88 E8A600                  	call	get2
 32903 00002F8B 3C20                    	cmp	al,' ' ; 20h
 32904 00002F8D 7413                    	je	short get_cmt_end
 32905 00002F8F 3C09                    	cmp	al,tab ; 9
 32906 00002F91 740F                    	je	short get_cmt_end
 32907 00002F93 3C0D                    	cmp	al,cr  ; 0Dh
 32908 00002F95 740B                    	je	short get_cmt_end
 32909 00002F97 3C0A                    	cmp	al,lf  ; 0Ah
 32910 00002F99 740E                    	je	short end_commd_line_brdg
 32911                                  
 32912                                  	;mov	[cs:cmmt2],al
 32913                                  	;inc	byte [cs:cmmt]
 32914                                  	; 04/01/2023
 32915 00002F9B A2[CF03]                	mov	[cmmt2],al
 32916 00002F9E FE06[CD03]              	inc	byte [cmmt]
 32917                                  
 32918                                  get_cmt_end:
 32919 00002FA2 E88C00                  	call	get2
 32920 00002FA5 3C0A                    	cmp	al,lf
 32921 00002FA7 75F9                    	jne	short get_cmt_end	; skip it.
 32922                                  end_commd_line_brdg: 
 32923 00002FA9 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 32924                                  
 32925                                  org_put_zero:				; make the filename in front of
 32926 00002FAC 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 32927 00002FB0 47                      	inc	di
 32928 00002FB1 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 32929                                  
 32930                                  end_file_slash: 			; al = "/" option char.
 32931 00002FB4 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 32932 00002FB8 47                      	inc	di			; and
 32933 00002FB9 AA                      	stosb				; store "/" after that.
 32934 00002FBA EB1A                    	jmp	short org5		; continue with the rest of the line
 32935                                  
 32936                                  end_copy_file:
 32937 00002FBC 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 32938 00002FC1 3C0A                    	cmp	al,lf
 32939 00002FC3 74E4                    	je	short end_commd_line_brdg
 32940 00002FC5 EB0F                    	jmp	short org5
 32941                                  
 32942                                  org4:					; org4 skips all delimiters after the command name except for '/'
 32943 00002FC7 E87D00                  	call	skip_comment
 32944 00002FCA 74DD                    	jz	short end_commd_line_brdg
 32945                                  
 32946 00002FCC E86200                  	call	get2
 32947 00002FCF E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 32948 00002FD2 74F3                    	jz	short org4
 32949 00002FD4 EB08                    	jmp	short org51
 32950                                  
 32951                                  org5:					; rest of the line
 32952 00002FD6 E86E00                  	call	skip_comment		; comment?
 32953 00002FD9 74CE                    	jz	short end_commd_line_brdg
 32954 00002FDB E85300                  	call	get2			; not a comment.
 32955                                  
 32956                                  org51:
 32957 00002FDE AA                      	stosb				; copy the character
 32958 00002FDF 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 32959 00002FE1 743A                    	je	short at_quote
 32960 00002FE3 3C20                    	cmp	al,' '  ; 20h
 32961 00002FE5 77EF                    	ja	short org5
 32962                                  					; M051 - Start
 32963                                  	; 04/01/2023
 32964                                  	; ds = cs
 32965 00002FE7 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 32966                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 32967 00002FEC 7514                    	jne	short not_dh		; N: 
 32968 00002FEE 3C0A                    	cmp	al,lf			; Q: is this line feed
 32969 00002FF0 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 32970 00002FF2 3C0D                    	cmp	al,cr			; Q: is this a cr
 32971 00002FF4 75E0                    	jne	short org5		; N: 
 32972 00002FF6 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 32973 00002FFB AA                      	stosb				; put cr after blank
 32974 00002FFC FE06[C32C]              	inc	byte [insert_blank]
 32975                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 32976                                  					; inserted
 32977 00003000 EBD4                    	jmp	short org5
 32978                                  not_dh:					; M051 - End
 32979                                  
 32980 00003002 3C0A                    	cmp	al,lf			; line feed?
 32981 00003004 740F                    	je	short org1_brdg		; handles the next command line.
 32982 00003006 EBCE                    	jmp	short org5		; handles next char in this line.
 32983                                  
 32984                                  org_dhlf:				; M051 - Start
 32985                                  	; 04/01/2023
 32986                                  	; ds = cs
 32987 00003008 803E[C32C]01            	cmp	byte [insert_blank],1
 32988                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 32989 0000300D 7406                    	je	short org1_brdg		; Y:
 32990 0000300F 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 32991 00003014 AA                      	stosb				; put lf after blank
 32992                                  					; M051 - End
 32993                                  org1_brdg:
 32994 00003015 C606[C32C]00            	mov	byte [insert_blank],0 
 32995                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 32996                                  					; M051: devicehigh
 32997 0000301A E976FE                  	jmp	org1
 32998                                  
 32999                                  at_quote:
 33000 0000301D 803E[CC03]00            	cmp	byte [com_level],0
 33001                                  	;cmp	byte [cs:com_level],0
 33002 00003022 7407                    	je	short up_level
 33003                                  	;mov	byte [cs:com_level],0	; reset it.
 33004 00003024 C606[CC03]00            	mov	byte [com_level],0
 33005 00003029 EBAB                    	jmp	short org5
 33006                                  
 33007                                  up_level:
 33008                                  	;inc	byte [cs:com_level]	; set it.
 33009 0000302B FE06[CC03]              	inc	byte [com_level]
 33010 0000302F EBA5                    	jmp	short org5
 33011                                  
 33012                                  ;----------------------------------------------------------------------------
 33013                                  ;
 33014                                  ; procedure : get2
 33015                                  ;
 33016                                  ;----------------------------------------------------------------------------
 33017                                  
 33018                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33019                                  	; (SYSINIT:33FAh)
 33020                                  	; 04/01/2023
 33021                                  get2:
 33022 00003031 E304                    	jcxz	noget
 33023                                  	;
 33024                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33025                                  	;;lods	byte ptr es:[si]
 33026                                  	; 12/12/2022
 33027 00003033 26                      	es	
 33028 00003034 AC                      	lodsb
 33029                                  	;mov	al, [es:si]
 33030                                  	;inc	si
 33031                                  	;
 33032 00003035 49                      	dec	cx
 33033 00003036 C3                      	retn
 33034                                  noget:
 33035 00003037 59                      	pop	cx
 33036                                  	; 04/01/2023
 33037                                  	; ds = cs
 33038                                  	;mov	[cs:count],di ; 13/05/2019
 33039                                  	;mov	[cs:org_count],di
 33040 00003038 893E[D203]              	mov	[count],di
 33041 0000303C 893E[D403]              	mov	[org_count],di
 33042 00003040 31F6                    	xor	si,si
 33043                                  	;mov	[cs:chrptr],si
 33044 00003042 8936[D603]              	mov	[chrptr],si
 33045                                  
 33046                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33047                                  ;;ifndef MULTI_CONFIG
 33048                                  ;;	retn
 33049                                  ;;else
 33050                                  ;
 33051                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33052                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33053                                  ;;   and the new boot menu stuff...
 33054                                  ;
 33055                                  ;	mov     cx,di
 33056                                  ;	jmp     menu_check
 33057                                  ;;endif
 33058                                  
 33059                                  	; 02/11/2022
 33060 00003046 C3                      	retn
 33061                                  
 33062                                  ;----------------------------------------------------------------------------
 33063                                  ;
 33064                                  ; procedure : skip_comment
 33065                                  ;
 33066                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33067                                  ;in) es:si-> string
 33068                                  ;	 cx -> length.
 33069                                  ;out) zero flag not set if not found a comment string.
 33070                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33071                                  ;	  the line feed character at this moment when return.
 33072                                  ;	  ax register destroyed.
 33073                                  ;	  if found, si, cx register adjusted accordingly.
 33074                                  ;
 33075                                  ;----------------------------------------------------------------------------
 33076                                  
 33077                                  	; 04/01/2023 - Retro DOS v4.0
 33078                                  
 33079                                  skip_comment:
 33080 00003047 E3EE                    	jcxz	noget		; get out of the organize routine.
 33081                                  
 33082                                  	; 04/01/2023
 33083                                  	; ds = cs	
 33084                                  
 33085 00003049 803E[CC03]00            	cmp	byte [com_level],0
 33086                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33087 0000304E 752C                    	jne	short no_commt	 ; (not inside quotations)
 33088                                  
 33089 00003050 803E[CD03]01            	cmp	byte [cmmt],1
 33090                                  	;cmp	byte [cs:cmmt],1
 33091 00003055 7225                    	jb	short no_commt
 33092                                  
 33093 00003057 268A04                  	mov	al,[es:si]
 33094                                  	
 33095 0000305A 3806[CE03]              	cmp	[cmmt1],al
 33096                                  	;cmp	[cs:cmmt1],al
 33097 0000305E 751C                    	jne	short no_commt
 33098                                  
 33099 00003060 803E[CD03]02            	cmp	byte [cmmt],2
 33100                                  	;cmp	byte [cs:cmmt],2
 33101 00003065 750A                    	jne	short skip_cmmt
 33102                                  
 33103 00003067 268A4401                	mov	al,[es:si+1]
 33104                                  	
 33105 0000306B 3806[CF03]              	cmp	[cmmt2],al
 33106                                  	;cmp	[cs:cmmt2],al
 33107 0000306F 750B                    	jne	short no_commt
 33108                                  skip_cmmt:
 33109 00003071 E3C4                    	jcxz	noget		; get out of organize routine.
 33110 00003073 268A04                  	mov	al,[es:si]
 33111 00003076 46                      	inc	si
 33112 00003077 49                      	dec	cx
 33113 00003078 3C0A                    	cmp	al,lf		; line feed?
 33114 0000307A 75F5                    	jne	short skip_cmmt
 33115                                  no_commt:
 33116 0000307C C3                      	retn
 33117                                  
 33118                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33119                                  %if 0
 33120                                  
 33121                                  ;ifdef	MULTI_CONFIG
 33122                                  
 33123                                  ;----------------------------------------------------------------------------
 33124                                  ;
 33125                                  ;   kbd_read: wait for keystroke
 33126                                  ;
 33127                                  ;   INPUT
 33128                                  ;       DS == CS == sysinitseg
 33129                                  ;
 33130                                  ;   OUTPUT
 33131                                  ;       Carry SET to clean boot, CLEAR otherwise
 33132                                  ;
 33133                                  ;   OTHER REGS USED
 33134                                  ;       All
 33135                                  ;
 33136                                  ;   HISTORY
 33137                                  ;       Created 16-Nov-1992 by JeffPar
 33138                                  ;
 33139                                  ;----------------------------------------------------------------------------
 33140                                  
 33141                                  kbd_read:
 33142                                          test    byte [bDisableUI],2
 33143                                          jnz     short kbd_nodelay
 33144                                  
 33145                                          push    ds              ; the bios timer tick count is incremented
 33146                                          sub     ax,ax           ; 18.2 times per second;
 33147                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33148                                  	;mov	dx,[046Ch]	; get initial value
 33149                                  kbd_loop:
 33150                                          mov     ah,1            ;
 33151                                          int     16h             ; peek the keyboard
 33152                                          jnz	short kbd_loopdone ; something's there, get out
 33153                                          mov     ah,2            ; peek the shift states
 33154                                          int     16h             ;
 33155                                          test    al,03h          ; either right or left shift key bits set?
 33156                                          jnz	short kbd_loopdone ; yes
 33157                                          mov     ax,[046Ch]	;
 33158                                  	;sub	ax,dx           ; get difference
 33159                                  	; 15/04/2019 - Retro DOS v4.0
 33160                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33161                                  
 33162                                  	cmp     al,37           ; reached limit?
 33163                                          jb	short kbd_loop	; not yet
 33164                                  kbd_loopdone:
 33165                                          pop     ds              ; delay complete!
 33166                                  kbd_nodelay:
 33167                                          sub     bx,bx           ; assume clean boot
 33168                                          mov     ah,2            ; peek the shift states
 33169                                          int     16h             ;
 33170                                          test    al,03h          ; either right or left shift key bits set?
 33171                                          jz      short kbd_notshift ; no
 33172                                          inc     bx              ; yes
 33173                                          inc     bx
 33174                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33175                                  	or	byte [bQueryOpt],4
 33176                                  kbd_notshift:                   ;
 33177                                          mov     ah,1            ; peek the keyboard
 33178                                          int     16h             ;
 33179                                          jz	short kbd_test	; no key present
 33180                                          or      al,al           ; is it a function key?
 33181                                          jnz	short kbd_test	; no
 33182                                  
 33183                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33184                                          cmp     ah,62h          ; CTRL F5
 33185                                          je	short kbd_cfg_bypass
 33186                                  	
 33187                                          cmp     ah,3Fh          ; F5 function key?
 33188                                          jne	short kbd_notf5	; no
 33189                                  kbd_cfg_bypass:
 33190                                          mov     dx,_$CleanMsg
 33191                                          call    print
 33192                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33193                                  	or	byte [bQueryOpt],4           ;
 33194                                          jmp     short kbd_eat   ; yes, clean boot selected
 33195                                  kbd_notf5:
 33196                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33197                                          cmp     ah,65h          ; CTRL F8
 33198                                          je	short kbd_cfg_confirm
 33199                                  
 33200                                          cmp     ah,42h          ; F8 function key?
 33201                                          jne	short kbd_exit	; no
 33202                                  kbd_cfg_confirm:
 33203                                          mov     dx,_$InterMsg
 33204                                          call    print           ;
 33205                                          mov     bl,1            ; yes, interactive-boot option enabled
 33206                                          mov     [bQueryOpt],bl  ; change default setting
 33207                                  kbd_eat:                        ;
 33208                                          mov     ah,0            ;
 33209                                          int     16h             ; eat the key we assumed was a signal
 33210                                          mov	byte [secElapsed],-1
 33211                                          or      bx,bx           ;
 33212                                          jz	short kbd_clean	;
 33213                                  kbd_test:                       ;
 33214                                          cmp     bl,2            ;
 33215                                          jb	short kbd_exit	;
 33216                                  kbd_clean:                      ;
 33217                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33218                                          stc                     ; set carry to indicate abort
 33219                                          retn			;
 33220                                  kbd_exit:                       ;
 33221                                          clc                     ; clear carry to indicate success
 33222                                          retn			;
 33223                                  
 33224                                  ;----------------------------------------------------------------------------
 33225                                  ;
 33226                                  ;   set_numlock: set numlock LED
 33227                                  ;
 33228                                  ;   INPUT
 33229                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33230                                  ;
 33231                                  ;   OUTPUT
 33232                                  ;       None
 33233                                  ;
 33234                                  ;   OTHER REGS USED
 33235                                  ;       None
 33236                                  ;
 33237                                  ;   HISTORY
 33238                                  ;       Created 16-Nov-1992 by JeffPar
 33239                                  ;
 33240                                  ;----------------------------------------------------------------------------
 33241                                  
 33242                                  set_numlock:
 33243                                          push    ax
 33244                                          push    ds
 33245                                          sub     ax,ax
 33246                                          mov     ds,ax
 33247                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33248                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33249                                          jne	short not_off	; no
 33250                                          and     byte [0417h],~20h ; 0DFh
 33251                                          jmp     short set_done
 33252                                  not_off:
 33253                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33254                                          stc
 33255                                          jne	short set_done	; no
 33256                                          or      byte [0417h],20h
 33257                                  set_done:
 33258                                          pop     ds
 33259                                          pop     ax
 33260                                          retn
 33261                                  
 33262                                  ; 16/04/2019 - Retro DOS v4.0
 33263                                  
 33264                                  ;----------------------------------------------------------------------------
 33265                                  ;
 33266                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33267                                  ;
 33268                                  ;   INPUT
 33269                                  ;       CX == "organized" config.sys memory image length
 33270                                  ;    ES:SI -> "organized" config.sys memory image
 33271                                  ;       DS == CS == sysinitseg
 33272                                  ;
 33273                                  ;   OUTPUT
 33274                                  ;       Same as above;  the idea is that menu_check simply transforms
 33275                                  ;       a block-structured config.sys image into a conventional image,
 33276                                  ;       based on the user's block selection and any other boot-time options
 33277                                  ;       the user may have employed...
 33278                                  ;
 33279                                  ;   OTHER REGS USED
 33280                                  ;       All
 33281                                  ;
 33282                                  ;   NOTES
 33283                                  ;       [count] and [org_count] are set to the new config.sys image length
 33284                                  ;
 33285                                  ;   HISTORY
 33286                                  ;       Created 16-Mar-1992 by JeffPar
 33287                                  ;
 33288                                  ;----------------------------------------------------------------------------
 33289                                  
 33290                                  menu_check:
 33291                                  
 33292                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33293                                  ;   disable clean/interactive boot options
 33294                                  
 33295                                          push    cx              ;
 33296                                          push    si              ;
 33297                                          sub     bx,bx           ; remains ZERO until first block
 33298                                  swchk_loop:                     ;
 33299                                          call    get_char        ; get first char of current line
 33300                                          jc	short swchk_end	; hit eof
 33301                                          cmp     al,CONFIG_BEGIN ;
 33302                                          jne	short swchk_next1 ;
 33303                                          inc     bx              ; remember that we've seen a block
 33304                                          jmp     short swchk_nextline
 33305                                  swchk_next1:                    ;
 33306                                          cmp     al,CONFIG_NUMLOCK
 33307                                          jne	short swchk_next2 ;
 33308                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33309                                          jnz	short swchk_nextline ; before the first block
 33310                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33311                                          mov     byte [es:si-1],CONFIG_REM
 33312                                          jmp     short swchk_nextline
 33313                                  swchk_next2:                    ;
 33314                                          cmp     al,CONFIG_SWITCHES
 33315                                          jne	short swchk_nextline ; this line ain't it
 33316                                  swchk_scan:                     ;
 33317                                          call    get_char        ; look for /N or /F
 33318                                  swchk_scan1:                    ;
 33319                                          cmp     al,LF           ; end of line?
 33320                                          je	short swchk_nextline ; yes
 33321                                          cmp     al,'/'          ; switch-char?
 33322                                          jne	short swchk_scan ; no
 33323                                          call    get_char        ;
 33324                                          and     al,~20h ; 0DFh	; convert to upper case
 33325                                          cmp     al,[swit_n+1]
 33326                                          jne	short swchk_scan2 ; no
 33327                                          or      byte [bDisableUI],1
 33328                                          jmp	short swchk_scan ; continue looking for switches of interest
 33329                                  swchk_scan2:                    ;
 33330                                          cmp     al,[swit_f+1]
 33331                                          jne	short swchk_scan1 ; no
 33332                                          or      byte [bDisableUI],2
 33333                                          jmp     short swchk_scan ; continue looking for switches of interest
 33334                                  swchk_nextline:                 ;
 33335                                          call    skip_opt_line   ;
 33336                                          jmp     short swchk_loop ;
 33337                                  swchk_end:                      ;
 33338                                          pop     si              ;
 33339                                          pop     cx              ;
 33340                                  
 33341                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33342                                  ;   the DisableUI flag is still clear
 33343                                  
 33344                                          test    byte [bDisableUI],1
 33345                                          jnz	short menu_search
 33346                                  ;
 33347                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33348                                  ;   there is anything at all in the keyboard buffer
 33349                                  ;
 33350                                          call    kbd_read
 33351                                          jnc	short menu_search
 33352                                          jmp	menu_abort
 33353                                  
 33354                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33355                                  
 33356                                  menu_search:
 33357                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33358                                          mov     di,szMenu	;
 33359                                          call    find_block      ; find the MENU block
 33360                                          jnc	short menu_found ;
 33361                                          mov     byte [szBoot],0
 33362                                          jmp	no_selection ; not found
 33363                                  
 33364                                  ;   Process the requested menu color(s)
 33365                                  
 33366                                  menu_color:
 33367                                          push    cx              ;
 33368                                          push    dx              ;
 33369                                          mov     dx,0007h        ; default color setting
 33370                                          call    get_number	; get first number
 33371                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33372                                          mov     ch,bl           ; save it in CH
 33373                                          and     dl,0F0h         ;
 33374                                          or      dl,bl           ;
 33375                                          call    delim           ; did we hit a delimiter
 33376                                          jne	short check_color ; no, all done
 33377                                          call    get_number	; get next number
 33378                                          and     bl,0Fh		; second # is background color (for high nibble)
 33379                                          mov     dh,bl           ; save it in DH
 33380                                          and     dl,0Fh		;
 33381                                          mov     cl,4            ;
 33382                                          shl     bl,cl           ;
 33383                                          or      dl,bl           ;
 33384                                  check_color:                    ;
 33385                                          cmp     ch,dh           ; are foreground/background the same?
 33386                                          jne	short set_color	; no
 33387                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33388                                  set_color:
 33389                                          mov     [bMenuColor],dl ;
 33390                                          pop     dx              ;
 33391                                          pop     cx              ;
 33392                                          jmp	menu_nextitem
 33393                                  
 33394                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33395                                  ;   above is there simply to alleviate short jump problems)
 33396                                  
 33397                                  menu_found:
 33398                                          mov     byte [bDefBlock],1
 33399                                          mov     word [offDefBlock],0
 33400                                          mov     byte [secTimeOut],-1
 33401                                          and     byte [bQueryOpt],~2 ; 0FDh
 33402                                  
 33403                                          call    skip_opt_line   ; skip to next line
 33404                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33405                                  
 33406                                  ;   Process the menu block now
 33407                                  
 33408                                  menu_process:
 33409                                          call    get_char        ; get first char of current line
 33410                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33411                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33412                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33413                                          je	short to_menu_getdefault
 33414                                          cmp     al,CONFIG_SUBMENU
 33415                                          je	short menu_item	; go process sub-menu
 33416                                          cmp     al,CONFIG_MENUITEM
 33417                                          je	short menu_item	; go process menu item
 33418                                          cmp     al,CONFIG_MENUDEFAULT
 33419                                          je	short menu_default ; go process menu default
 33420                                          cmp     al,CONFIG_MENUCOLOR
 33421                                          je	short menu_color ; go process menu color
 33422                                          cmp     al,CONFIG_NUMLOCK
 33423                                          je	short menu_numlock ;
 33424                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33425                                          je	short menu_nextitem ;
 33426                                          call    any_delim       ; allow blank lines and such
 33427                                          je	short menu_nextitem ;
 33428                                          stc                     ;
 33429                                          call    print_error     ; non-MENU command!
 33430                                          jmp     short menu_nextitem
 33431                                  menu_numlock:
 33432                                          call    set_numlock
 33433                                          jmp     short menu_nextitem
 33434                                  to_menu_getdefault:
 33435                                          jmp     short menu_getdefault
 33436                                  
 33437                                  ;   Save the offset of the default block name, we'll need it later
 33438                                  
 33439                                  menu_default:
 33440                                          mov     [offDefBlock],si; save address of default block name
 33441                                          cmp     byte [secElapsed],0
 33442                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33443                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33444                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33445                                          call    skip_delim      ; something is typed
 33446                                          jc	short menu_nextitem ;
 33447                                          mov     si,bx           ;
 33448                                          call    get_number      ; get number (of seconds for timeout)
 33449                                          cmp     bl,90           ; limit it to a reasonable number
 33450                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33451                                          mov     bl,90           ;  display function can handle)
 33452                                  timeout_ok:                     ;
 33453                                          mov     [secTimeOut],bl ;
 33454                                  timeout_skip:
 33455                                          jmp     short menu_nextitem
 33456                                  
 33457                                  ;   Verify that this is a valid menu item by searching for the named block
 33458                                  
 33459                                  menu_item:
 33460                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33461                                          jae	short menu_nextitem ;
 33462                                          mov     di,si           ; DS:DI -> block name to search for
 33463                                          call    srch_block      ;
 33464                                          je	short menu_itemfound ;
 33465                                          stc                     ;
 33466                                          call    print_error     ; print error and pause
 33467                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33468                                  
 33469                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33470                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33471                                  ;   and CX are unmodified
 33472                                  
 33473                                  menu_itemfound:
 33474                                          inc     dx              ; otherwise, increment total block count
 33475                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33476                                          mov	[abBlockType+bx],al
 33477                                          add     bx,bx           ; of recorded block names and descriptions
 33478                                  
 33479                                  ;   There should be a description immediately following the block name on
 33480                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33481                                  ;   description...
 33482                                  
 33483                                          mov     [aoffBlockName+bx],si
 33484                                          mov     [aoffBlockDesc+bx],si
 33485                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33486                                          call    skip_token      ;
 33487                                          jc	short menu_nextitem ; hit eol/eof
 33488                                          call    skip_delim      ;
 33489                                          jc	short menu_nextitem ; hit eol/eof
 33490                                          xchg    bx,di           ;
 33491                                          mov     [aoffBlockDesc+bx],di
 33492                                  
 33493                                  menu_nextitem:
 33494                                          call    skip_opt_line   ;
 33495                                          jmp     menu_process    ; go back for more lines
 33496                                  
 33497                                  ;   Display menu items now, after determining which one is default
 33498                                  
 33499                                  menu_getdefault:
 33500                                          or      dl,dl           ; where there any valid blocks at all?
 33501                                          jnz	short menu_valid ; yes
 33502                                          sub     bx,bx           ; no, so force autoselect of 0
 33503                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33504                                  menu_valid:
 33505                                          sub     bx,bx           ;
 33506                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33507                                          mov     di,[offDefBlock];
 33508                                          or      di,di           ; does a default block exist?
 33509                                          jz	short menu_nodefault ; no
 33510                                          inc     bx              ; yes, walk name table, looking for default
 33511                                  menu_chkdefault:
 33512                                          push    bx              ;
 33513                                          add     bx,bx           ;
 33514                                          mov     si,[aoffBlockName+bx]
 33515                                          mov     cx,128          ; arbitrary maximum length of a name
 33516                                          push    ds              ;
 33517                                          push    es              ;
 33518                                          pop     ds              ;
 33519                                          call    comp_names      ; is this block the same as the default?
 33520                                          pop     ds              ;
 33521                                          pop     bx              ;
 33522                                          je	short menu_setdefault ; yes
 33523                                          inc     bx              ;
 33524                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33525                                          jbe	short menu_chkdefault ; not yet
 33526                                  menu_nodefault:
 33527                                          mov     bl,1            ; if no default, force default to #1
 33528                                  menu_setdefault:
 33529                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33530                                  
 33531                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33532                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33533                                  ;   supposed to skip menu display and run with the specified default block;
 33534                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33535                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33536                                  ;   with no timeout)
 33537                                  
 33538                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33539                                          jne	short menu_display ; no
 33540                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33541                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33542                                          jmp     not_topmenu	;
 33543                                  
 33544                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33545                                  
 33546                                  menu_display:
 33547                                          mov     ah,0Fh          ; get current video mode
 33548                                          int     10h             ;
 33549                                          mov     ah,00h          ; just re-select that mode
 33550                                          int     10h             ;
 33551                                          push    es              ;
 33552                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33553                                          mov     es,ax           ; and save the current (default) video page
 33554                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33555                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33556                                          mov     al,[es:0062h]   ;
 33557                                          mov     [bCRTPage],al   ;
 33558                                          mov     ax,[bMenuPage]	; select new page for menu
 33559                                          int     10h             ;
 33560                                          mov     ax,0600h        ; clear entire screen
 33561                                          mov     bh,[bMenuColor] ; using this color
 33562                                          sub     cx,cx           ; upper left row/col
 33563                                          ;mov	dl,[es:CRT_Cols] 
 33564                                          mov	dl,[es:4Ah]
 33565                                  	dec     dl              ;
 33566                                          ;mov	dh,[es:CRT_Rows];
 33567                                          mov	dh,[es:84h]
 33568                                  	or      dh,dh           ; # of rows valid?
 33569                                          jnz	short menu_clear ; hopefully
 33570                                          mov     dh,[bLastRow]   ; no, use a default
 33571                                  menu_clear:
 33572                                          int     10h             ; clear the screen using the req. attribute
 33573                                          pop     es              ;
 33574                                          mov     [bLastRow],dh   ; save DH
 33575                                          mov     dx,_$MenuHeader
 33576                                          call    print           ; cursor now on row 3 (numbered from 0)
 33577                                  
 33578                                          test    byte [bDisableUI],1
 33579                                          jnz     short menu_nostatus
 33580                                          mov     bh,[bMenuPage]  ;
 33581                                          mov     dh,[bLastRow]   ; restore DH
 33582                                          mov     dl,0            ; print the status line on row DH, col 0,
 33583                                          mov     ah,02h          ; now that we can trash the cursor position
 33584                                          int     10h             ;
 33585                                          mov     dx,_$StatusLine
 33586                                          call    print           ;
 33587                                          mov     ah,3            ; get cursor position
 33588                                          int     10h             ;
 33589                                          sub     dl,2            ;
 33590                                          mov     [bLastCol],dl   ; save column where status char will go
 33591                                  
 33592                                  menu_nostatus:
 33593                                          mov     bx,1            ; now prepare to display all the menu items
 33594                                  menu_disploop:
 33595                                          call    print_item	; print item #BL
 33596                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33597                                          cmp     bl,[bMaxBlock]  ; all done?
 33598                                          jbe	short menu_disploop ; not yet
 33599                                  
 33600                                  ;   Set cursor position to just below the menu items
 33601                                  
 33602                                          mov     dl,0            ; select column
 33603                                          mov     dh,bl           ;
 33604                                          add     dh,4            ; select row below menu
 33605                                          mov     bh,[bMenuPage]  ;
 33606                                          mov     ah,02h          ; set cursor position beneath the block list
 33607                                          int     10h             ;
 33608                                  
 33609                                          mov     dx,_$MenuPrmpt
 33610                                          call    print           ;
 33611                                          call    select_item     ; make a selection, return # in BX
 33612                                          mov     dx,crlfm	
 33613                                          call    print           ;
 33614                                          push    word [bDisableUI]
 33615                                          or      byte [bDisableUI],1
 33616                                          call    show_status     ; clear the status line now
 33617                                          pop     word [bDisableUI]
 33618                                  
 33619                                  ;   Now begins the "re-organization" process...
 33620                                  
 33621                                  menu_autoselect:
 33622                                          cmp     bx,-1           ; clean boot requested?
 33623                                          jne	short normal_boot ; no
 33624                                          call    disable_autoexec; basically, add a /D to the command.com line
 33625                                  menu_abort:
 33626                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33627                                          jmp	menu_exit	;
 33628                                  
 33629                                  normal_boot:
 33630                                          cmp     bx,-2           ; back to top-level menu?
 33631                                          jne	short not_topmenu ; no
 33632                                          mov     cx,[count]      ; yes, start all over
 33633                                          sub     si,si           ;
 33634                                          jmp     menu_search
 33635                                  
 33636                                  not_topmenu:
 33637                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33638                                          jne	short not_submenu
 33639                                          add     bx,bx           ;
 33640                                          mov     di,[aoffBlockName+bx]
 33641                                          call    srch_block      ; THIS CANNOT FAIL!
 33642                                          mov     si,di           ;
 33643                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33644                                          jmp     menu_found
 33645                                  
 33646                                  not_submenu:
 33647                                          add     bx,bx           ; get BX -> name of selected block
 33648                                          mov     bx,[aoffBlockName+bx]
 33649                                  
 33650                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33651                                  ;   the offset relative to ES of the block name to be processed (along with
 33652                                  ;   all the "common" lines of course)
 33653                                  
 33654                                  no_selection:
 33655                                          mov     [offDefBlock],bx; save selection
 33656                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33657                                          sub     si,si           ;
 33658                                          push    ds              ;
 33659                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33660                                          sub     di,di           ;
 33661                                  
 33662                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33663                                  ;
 33664                                  ;   Work our way through the config.sys image again, this time copying
 33665                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33666                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33667                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33668                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33669                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33670                                  ;
 33671                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33672                                  ;   stack we're running on, then we should check it inside copy_block
 33673                                  
 33674                                  copyblock_loop:
 33675                                          push    bx              ; save selected block name
 33676                                          call    copy_block      ; process (named or common) block
 33677                                          pop     bx              ;
 33678                                          jc	short move_config ; hit eof
 33679                                  
 33680                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33681                                  
 33682                                  copyblock_begin:
 33683                                          push    ax              ;
 33684                                          push    cx              ;
 33685                                          push    si              ;
 33686                                          push    di              ; always do "common" blocks
 33687                                          mov     di,szCommon
 33688                                          push    ds              ;
 33689                                          push    cs              ;
 33690                                          pop     ds              ;
 33691                                          call    comp_names      ;
 33692                                          pop     ds              ;
 33693                                          pop     di              ;
 33694                                          pop     si              ;
 33695                                          pop     cx              ;
 33696                                          pop     ax              ;
 33697                                          je	short copyblock_check
 33698                                          or      bx,bx           ; is there a block name to check?
 33699                                          jz	short copyblock_skip ; no
 33700                                          push    di              ;
 33701                                          mov     di,bx           ; check block against given block name
 33702                                          push    ds              ;
 33703                                          push    es              ;
 33704                                          pop     ds              ;
 33705                                          call    comp_names      ; is this the block we really want to do?
 33706                                          pop     ds              ;
 33707                                          pop     di              ;
 33708                                  copyblock_check:
 33709                                          jc	short move_config ; hit eof
 33710                                          jne	short copyblock_skip  ;
 33711                                          call    skip_opt_line   ;
 33712                                          jmp	short copyblock_loop 
 33713                                  
 33714                                  copyblock_skip:                 ;
 33715                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33716                                          call    get_char        ;
 33717                                          jc	short move_config ; hit eof
 33718                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33719                                          cmp     al,CONFIG_BEGIN ;
 33720                                          je	short copyblock_begin
 33721                                          jmp     short copyblock_skip ; anything else is just skipped
 33722                                  ;
 33723                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33724                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33725                                  ;   copy the new config.sys image to "confbot"
 33726                                  ;
 33727                                  move_config:
 33728                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33729                                          push    cx              ;
 33730                                  ;
 33731                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33732                                  ;   since the configuration name only currently exists in the "confbot" area
 33733                                  ;
 33734                                   	;mov	cx,7
 33735                                  	mov     cx,szMenu-szBoot-1
 33736                                          mov     si,szBoot	; first copy the CONFIG= part
 33737                                          inc     di              ; skip a byte, in case absolutely nothing
 33738                                                                  ; was copied to the workspace, because we always
 33739                                                                  ; zero the first byte of the workspace (below)
 33740                                  copy_boot: 
 33741                                  	;lods    byte ptr cs:[si];
 33742                                          cs
 33743                                  	lodsb
 33744                                  	mov     [di],al         ;
 33745                                          inc     di              ;
 33746                                          loop    copy_boot       ;
 33747                                  
 33748                                          push    es              ; then copy the configuration name
 33749                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 33750                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 33751                                          or      si,si           ; valid?
 33752                                          jnz	short l1	; yes
 33753                                          push    cs              ;
 33754                                          pop     es              ;
 33755                                          mov     si,szCommon
 33756                                  l1:     mov     al,[es:si]      ;
 33757                                          call    any_delim       ;
 33758                                          je	short l2	;
 33759                                          mov     [di],al         ;
 33760                                          inc     si              ;
 33761                                          inc     di              ;
 33762                                          loop    l1              ;
 33763                                  l2:     mov     byte [di],lf	; terminate the configuration string
 33764                                          pop     es              ;
 33765                                  
 33766                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 33767                                  
 33768                                          sub     di,di           ;
 33769                                          mov     [cs:config_envlen],di
 33770                                          sub     si,si           ;
 33771                                          pop     cx              ; recover the size of "config_wrkseg"
 33772                                  
 33773                                          push    cx              ;
 33774                                          rep     movsb           ; moved!
 33775                                          pop     cx              ;
 33776                                          mov     ax,ds           ;
 33777                                          pop     ds              ;
 33778                                  
 33779                                  ;   Now that the config_wrkseg is available once again, we shall
 33780                                  ;   use it to create an environment. The first thing to go in will be
 33781                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 33782                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 33783                                  ;   is empty.
 33784                                  
 33785                                          push    es              ;
 33786                                          mov     es,ax           ;
 33787                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 33788                                          mov     byte [es:0],0	;empty the environment block
 33789                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 33790                                          pop     es
 33791                                  
 33792                                  ;   Before returning, restore the default video page setting but do NOT
 33793                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 33794                                  ;   displayed on a different page, then it's because we don't want to see
 33795                                  ;   all the device driver/TSR goop (which goes to the default page)
 33796                                  
 33797                                  menu_done:
 33798                                          cmp     byte [bMenuPage],0
 33799                                          je	short menu_exit	;
 33800                                          push    es              ;
 33801                                          mov     ax,40h          ;
 33802                                          mov     es,ax           ;
 33803                                          mov     ax,[wCRTStart]  ;
 33804                                          mov     [es:004Eh],ax   ;
 33805                                          mov     al,[bCRTPage]   ;
 33806                                          mov     [es:0062h],al   ;
 33807                                          pop     es              ;
 33808                                  menu_exit:
 33809                                          mov     [count],cx      ; set new counts
 33810                                          mov     [org_count],cx  ;
 33811                                          sub     si,si           ; always return ES:SI pointing to config.sys
 33812                                          retn
 33813                                  
 33814                                  ;----------------------------------------------------------------------------
 33815                                  ;
 33816                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 33817                                  ;
 33818                                  ;   INPUT
 33819                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 33820                                  ;
 33821                                  ;   OUTPUT
 33822                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 33823                                  ;       carry set if error (eg, missing =); clear otherwise
 33824                                  ;
 33825                                  ;   OTHER REGS USED
 33826                                  ;       None
 33827                                  ;
 33828                                  ;   NOTES
 33829                                  ;       None
 33830                                  ;
 33831                                  ;   HISTORY
 33832                                  ;       Created 29-Mar-1992 by JeffPar
 33833                                  ;
 33834                                  ;----------------------------------------------------------------------------
 33835                                  
 33836                                  copy_envvar:
 33837                                          push    cx              ;
 33838                                          push    si              ;
 33839                                          push    ds              ;
 33840                                          push    es              ;
 33841                                          push    es              ;
 33842                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 33843                                          pop     ds                 ; DS:SI to point to envvar
 33844                                  
 33845                                  ;   Have to calculate the length of the variable name (and if we hit
 33846                                  ;   the end of the line before we hit '=', then it's curtains for this
 33847                                  ;   config.sys line)
 33848                                  ;
 33849                                  ;   The check for NULL is important because copy_envvar is also used to copy
 33850                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 33851                                  ;   menu block existed (in order to prevent the creation of an environment)
 33852                                  
 33853                                          sub     cx,cx           ;
 33854                                  copy_varlen:                    ;
 33855                                          lodsb                   ;
 33856                                          or      al,al           ; NULL?
 33857                                          stc                     ;
 33858                                          jz	short copy_envexit ; yes, abort
 33859                                          cmp     al,cr          ;
 33860                                          stc                     ;
 33861                                          je	short copy_envexit
 33862                                          cmp     al,lf          ;
 33863                                          stc                     ;
 33864                                          je	short copy_envexit
 33865                                          inc     cx              ;
 33866                                          cmp     al,'='          ;
 33867                                          jne	short copy_varlen
 33868                                          mov     al,0            ;
 33869                                          mov     ah,[si]         ; save char after '='
 33870                                          sub     si,cx           ; back up to given varname
 33871                                          dec     cx              ; CX == # of bytes in varname
 33872                                          sub     di,di           ; start looking for DS:SI at ES:0
 33873                                  copy_varsrch:
 33874                                          cmp     byte [es:di],al
 33875                                          je	short copy_envprep ; search failed, just copy var
 33876                                          mov     bx,di           ; ES:BX -> start of this varname
 33877                                          push    cx              ;
 33878                                          push    si              ;
 33879                                          repe    cmpsb           ;
 33880                                          pop     si              ;
 33881                                          pop     cx              ;
 33882                                          jne	short copy_varnext ; no match, skip to next varname
 33883                                          cmp     byte [es:di],'='
 33884                                          jne     short copy_varnext ; no match, there's more characters
 33885                                  
 33886                                  ;   Previous occurrence of variable has been found; determine the
 33887                                  ;   entire length and then destroy it
 33888                                  
 33889                                          mov     cx,-1           ;
 33890                                          repne   scasb           ; guaranteed to get null (since we put it there)
 33891                                          push    si              ;
 33892                                          mov     si,di           ;
 33893                                          mov     di,bx           ;
 33894                                          mov     cx,[cs:config_envlen]
 33895                                          sub     cx,si           ; destroy variable now
 33896                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 33897                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 33898                                  
 33899                                  	rep	; 0F3h
 33900                                  	es	; 26h
 33901                                  	movsb	; 0A4h
 33902                                  
 33903                                  	pop     si
 33904                                  copy_envprep:
 33905                                          cmp     ah,cr          ; if there is nothing after the '='
 33906                                          je	short copy_envdel ; then just exit with variable deleted
 33907                                          cmp     ah,lf           ;
 33908                                          je	short copy_envdel
 33909                                          jmp     short copy_envloop
 33910                                  
 33911                                  copy_varnext:                   ;
 33912                                          push    cx              ;
 33913                                          mov     cx,-1           ;
 33914                                          repne   scasb           ;
 33915                                          pop     cx              ;
 33916                                          jmp	short copy_varsrch
 33917                                  
 33918                                  copy_envloop:                   ;
 33919                                          lodsb                   ;
 33920                                          cmp     al,cr           ;
 33921                                          je	short copy_envdone
 33922                                          cmp     al,lf           ;
 33923                                          je	short copy_envdone
 33924                                          stosb                   ;
 33925                                          jmp     short copy_envloop
 33926                                  
 33927                                  copy_envdone:                   ;
 33928                                          sub     al,al           ; do SUB to clear carry as well
 33929                                          stosb                   ; always null-terminate these puppies
 33930                                  copy_envdel:                    ;
 33931                                          mov     [es:di],al      ; and stick another null to terminate the env.
 33932                                          mov     [cs:config_envlen],di
 33933                                  
 33934                                  copy_envexit:                   ;
 33935                                          pop     es              ;
 33936                                          pop     ds              ;
 33937                                          pop     si              ;
 33938                                          pop     cx              ;
 33939                                  
 33940                                  copy_done:	; 18/12/2022
 33941                                          retn
 33942                                  
 33943                                  ;----------------------------------------------------------------------------
 33944                                  ;
 33945                                  ;   copy_block:  copy the current block to the new config.sys workspace
 33946                                  ;
 33947                                  ;   INPUT
 33948                                  ;       CX == remaining bytes in "organized" config.sys memory image
 33949                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 33950                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 33951                                  ;             config.sys image) where the current block is to be copied
 33952                                  ;
 33953                                  ;   OUTPUT
 33954                                  ;       Same as above
 33955                                  ;       AL also equals the last character read from the organized image
 33956                                  ;
 33957                                  ;   OTHER REGS USED
 33958                                  ;       All
 33959                                  ;
 33960                                  ;   NOTES
 33961                                  ;       None
 33962                                  ;
 33963                                  ;   HISTORY
 33964                                  ;       Created 16-Mar-1992 by JeffPar
 33965                                  ;
 33966                                  ;----------------------------------------------------------------------------
 33967                                  
 33968                                  copy_block:
 33969                                          call    get_char        ; check for include
 33970                                          jc	short copy_done	;
 33971                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33972                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 33973                                          je	short copy_done ;
 33974                                  
 33975                                          cmp     al,CONFIG_INCLUDE ; 'J'
 33976                                          mov     al,ah           ; AL == the original line code
 33977                                          jne	short copy_line	; not an "include" line
 33978                                  
 33979                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 33980                                  ;   never try to include the block again (no infinite include loops please),
 33981                                  ;   then search for the named block and call copy_block again.
 33982                                  
 33983                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 33984                                          push    di              ;
 33985                                  
 33986                                          mov     di,szMenu
 33987                                          call    comp_names_safe ; don't allow INCLUDE MENU
 33988                                          je	short copy_skip	;
 33989                                  
 33990                                          mov     di,szCommon
 33991                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 33992                                          je	short copy_skip	;
 33993                                  
 33994                                          mov     di,si           ; try to find the block
 33995                                          call    srch_block      ;
 33996                                          mov     dx,di           ;
 33997                                          pop     di              ;
 33998                                          jne	short copy_error ; no such block
 33999                                          push    cx              ;
 34000                                          mov     cx,bx           ;
 34001                                          push    si              ;
 34002                                          dec     dx              ;
 34003                                          mov     si,dx           ;
 34004                                          call    skip_line       ; skip the rest of the "block name" line
 34005                                          call    copy_block      ; and copy in the rest of that block
 34006                                          pop     si              ;
 34007                                          pop     cx              ;
 34008                                          sub     al,al           ; force skip_opt_line to skip...
 34009                                          jmp     short copy_nextline
 34010                                  
 34011                                  copy_skip:
 34012                                          pop     di
 34013                                  copy_error:
 34014                                          clc                     ;
 34015                                          call    print_error     ; note that carry is clear, no pause
 34016                                          jmp     short copy_nextline
 34017                                  
 34018                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34019                                  
 34020                                  copy_line:
 34021                                          mov     [di],al         ;
 34022                                          inc     di              ;
 34023                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34024                                          jb	short copy_nextline ; no
 34025                                          cmp     byte [cs:config_multi],0
 34026                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34027                                          call    get_linenum	; BX == line # of line @ES:SI
 34028                                          mov     [di],bx         ; stash it immediately following the line code
 34029                                          inc     di              ;
 34030                                          inc     di              ;
 34031                                          jmp     short copy_next ;
 34032                                  copy_loop:                      ;
 34033                                          call    get_char        ;
 34034                                          jc	short copy_done ; end of file
 34035                                          mov     [di],al         ;
 34036                                          inc     di              ;
 34037                                  copy_next:
 34038                                          cmp     al,lf ; 0Ah	; done with line?
 34039                                          jne	short copy_loop	; nope
 34040                                  
 34041                                  copy_nextline:
 34042                                          call    skip_opt_line   ;
 34043                                          jmp     short copy_block
 34044                                  
 34045                                  	; 18/12/2022
 34046                                  ;copy_done:
 34047                                          ;retn
 34048                                  
 34049                                  ;----------------------------------------------------------------------------
 34050                                  ;
 34051                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34052                                  ;
 34053                                  ;   INPUT
 34054                                  ;    ES:SI -> some line in the config.sys memory image
 34055                                  ;
 34056                                  ;   OUTPUT
 34057                                  ;       BX == line # (relative to 1)
 34058                                  ;
 34059                                  ;   OTHER REGS USED
 34060                                  ;       DX
 34061                                  ;
 34062                                  ;   NOTES
 34063                                  ;       None
 34064                                  ;
 34065                                  ;   HISTORY
 34066                                  ;       Created 16-Mar-1992 by JeffPar
 34067                                  ;
 34068                                  ;----------------------------------------------------------------------------
 34069                                  
 34070                                  get_linenum:
 34071                                          push    ax              ;
 34072                                          sub     bx,bx           ; BX == line # (to be returned)
 34073                                          push    cx              ;
 34074                                          mov     dx,si           ; DX == the offset we're looking for
 34075                                          push    si              ;
 34076                                          mov     cx,[cs:count]   ;
 34077                                          sub     si,si           ; prepare to scan entire file
 34078                                  get_linenum_loop:               ;
 34079                                          call    skip_line       ;
 34080                                          jc	short get_linenum_done
 34081                                          inc     bx              ;
 34082                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34083                                          jb	short get_linenum_loop ; no
 34084                                  get_linenum_done:               ;
 34085                                          pop     si              ;
 34086                                          pop     cx              ;
 34087                                          pop     ax              ;
 34088                                          retn
 34089                                  
 34090                                  ;----------------------------------------------------------------------------
 34091                                  ;
 34092                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34093                                  ;
 34094                                  ;   INPUT
 34095                                  ;       ES -> config.sys image
 34096                                  ;    ES:DI -> block name to find
 34097                                  ;
 34098                                  ;   OUTPUT
 34099                                  ;       ZF flag set, if found
 34100                                  ;    ES:DI -> just past the name in the block heading, if found
 34101                                  ;       BX == # bytes remaining from that point, if found
 34102                                  ;
 34103                                  ;   OTHER REGS USED
 34104                                  ;       None
 34105                                  ;
 34106                                  ;   NOTES
 34107                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34108                                  ;       config.sys image, not merely the remaining portion, and that it
 34109                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34110                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34111                                  ;
 34112                                  ;   HISTORY
 34113                                  ;       Created 16-Mar-1992 by JeffPar
 34114                                  ;
 34115                                  ;----------------------------------------------------------------------------
 34116                                  
 34117                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34118                                          push    ax              ;
 34119                                          push    cx              ;
 34120                                          mov     cx,[cs:count]   ;
 34121                                          push    si              ;
 34122                                          sub     si,si           ;
 34123                                          push    ds              ;
 34124                                          push    es              ;
 34125                                          pop     ds              ;
 34126                                          call    find_block      ;
 34127                                          mov     di,si           ;
 34128                                          mov     bx,cx           ;
 34129                                          pop     ds              ;
 34130                                          pop     si              ;
 34131                                          pop     cx              ;
 34132                                          pop     ax              ;
 34133                                  find_exit: ; 16/04/2019
 34134                                          retn			;
 34135                                  
 34136                                  ;----------------------------------------------------------------------------
 34137                                  ;
 34138                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34139                                  ;
 34140                                  ;   INPUT
 34141                                  ;    DS:DI -> block name to find
 34142                                  ;    ES:SI -> remainder of config.sys image
 34143                                  ;       CX == remaining size of config.sys image
 34144                                  ;
 34145                                  ;   OUTPUT
 34146                                  ;       ZF flag set, if found (also, CF set if EOF)
 34147                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34148                                  ;       CX == # bytes remaining from that point
 34149                                  ;
 34150                                  ;   OTHER REGS USED
 34151                                  ;       AX
 34152                                  ;
 34153                                  ;   NOTES
 34154                                  ;       This differs from "srch_block" in that it searches only the
 34155                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34156                                  ;       pointing to where the search left off, and that it takes a pointer
 34157                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34158                                  ;
 34159                                  ;   HISTORY
 34160                                  ;       Created 16-Mar-1992 by JeffPar
 34161                                  ;
 34162                                  ;----------------------------------------------------------------------------
 34163                                  
 34164                                  find_block:
 34165                                          call    get_char        ; get line code
 34166                                          jc	short find_exit	; end of file
 34167                                          and     al,~CONFIG_OPTION_QUERY
 34168                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34169                                          je	short check_line ; no
 34170                                          cmp     al,CONFIG_INCLUDE
 34171                                          jne	short next_line	;
 34172                                          or	byte [cs:config_multi],1
 34173                                          jmp     short next_line ;
 34174                                  check_line:
 34175                                          or      byte [cs:config_multi],1
 34176                                          call    comp_names      ; compare block names
 34177                                          jbe	short find_exit	; end of file, or names matched
 34178                                  next_line:
 34179                                          call    skip_opt_line   ; no, so skip to next line
 34180                                          jmp	short find_block  ;
 34181                                  ;find_exit:
 34182                                  ;	retn
 34183                                  
 34184                                  ;----------------------------------------------------------------------------
 34185                                  ;
 34186                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34187                                  ;
 34188                                  ;   INPUT
 34189                                  ;    DS:DI -> keyword to compare
 34190                                  ;    ES:SI -> position in config.sys
 34191                                  ;       CX == remaining bytes in config.sys
 34192                                  ;
 34193                                  ;   OUTPUT
 34194                                  ;       ZF flag set, if match (also, CF set if EOF)
 34195                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34196                                  ;       CX == # bytes remaining from that point
 34197                                  ;
 34198                                  ;   OTHER REGS USED
 34199                                  ;       AX
 34200                                  ;
 34201                                  ;   NOTES
 34202                                  ;       None
 34203                                  ;
 34204                                  ;   HISTORY
 34205                                  ;       Created 16-Mar-1992 by JeffPar
 34206                                  ;
 34207                                  ;----------------------------------------------------------------------------
 34208                                  
 34209                                  comp_names:
 34210                                          push    di              ;
 34211                                  comp_loop:                      ;
 34212                                          call    get_char        ;
 34213                                          jc	short comp_exit	;
 34214                                          call    any_delim       ; is next character a delimiter?
 34215                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34216                                          je	short comp_almost ; yes, it *could* be a match
 34217                                          inc     di              ;
 34218                                          and     ax,~2020h ; 0DFDFh 
 34219                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34220                                          cmp     al,ah           ; match?
 34221                                          je	short comp_loop ; yes, keep looking at the characters
 34222                                          clc                     ; prevent erroneous eof indication: clear carry
 34223                                  comp_exit:                      ;
 34224                                          pop     di              ;
 34225                                          retn			;
 34226                                  comp_almost:                    ;
 34227                                          xchg    al,ah           ; we don't know for sure if it's a match
 34228                                          call    any_delim       ; until we verify that the second string has
 34229                                          xchg    al,ah           ; been exhausted also...
 34230                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34231                                  
 34232                                  ;----------------------------------------------------------------------------
 34233                                  
 34234                                  comp_names_safe:
 34235                                          push    ax
 34236                                          push    cx
 34237                                          push	si
 34238                                          push    ds
 34239                                          push    cs
 34240                                          pop     ds
 34241                                          call    comp_names
 34242                                          pop     ds
 34243                                  	pop	si
 34244                                          pop     cx
 34245                                          pop     ax
 34246                                          retn
 34247                                  
 34248                                  ;----------------------------------------------------------------------------
 34249                                  ;
 34250                                  ;   print_item:  display menu item #BL
 34251                                  ;
 34252                                  ;   INPUT
 34253                                  ;       BL == menu item # to display
 34254                                  ;
 34255                                  ;   OUTPUT
 34256                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34257                                  ;
 34258                                  ;   OTHER REGS USED
 34259                                  ;       None
 34260                                  ;
 34261                                  ;   NOTES
 34262                                  ;       This function saves/restores the current cursor position, so you
 34263                                  ;       needn't worry about it.
 34264                                  ;
 34265                                  ;   HISTORY
 34266                                  ;       Created 16-Mar-1992 by JeffPar
 34267                                  ;
 34268                                  ;----------------------------------------------------------------------------
 34269                                  
 34270                                  print_item:		; prints menu item #BL (1 to N)
 34271                                          push    ax              ;
 34272                                          push    bx              ;
 34273                                          push    cx              ;
 34274                                          push    dx              ;
 34275                                          push    si              ;
 34276                                          mov     ah,03h          ; get cursor position
 34277                                          mov     bh,[bMenuPage]  ; always page zero
 34278                                          int     10h             ; DH/DL = row/column
 34279                                          push    dx              ; save it
 34280                                          mov     ah,02h          ; set cursor position
 34281                                          mov     dh,bl           ;
 34282                                          add     dh,3            ;
 34283                                          mov     dl,5            ;
 34284                                          int     10h             ; set cursor position for correct row/col
 34285                                          mov     al,bl           ;
 34286                                          add     al,'0'          ; convert menu item # to ASCII digit
 34287                                          mov     ah,[bMenuColor] ; normal attribute
 34288                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34289                                          jne	short print_other ; no
 34290                                          or      ah,70h          ; yes, set bgnd color to white
 34291                                          mov     ch,ah           ;
 34292                                          mov     cl,4            ;
 34293                                          rol     ch,cl           ;
 34294                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34295                                          jne	short print_other ; no
 34296                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34297                                  print_other:                    ;
 34298                                          mov     bh,0            ;
 34299                                          add     bx,bx           ;
 34300                                          mov     di,[aoffBlockDesc+bx]
 34301                                          mov     bl,ah           ; put the attribute in the correct register now
 34302                                          mov     bh,[bMenuPage]  ; get correct video page #
 34303                                          mov     ah,09h          ; write char/attr
 34304                                          mov     cx,1            ;
 34305                                          int     10h             ;
 34306                                          inc     dl              ; increment column
 34307                                          mov     ah,02h          ;
 34308                                          int     10h             ;
 34309                                          ;mov	ax,0900h+'.'    ;
 34310                                          mov	ax,092Eh
 34311                                  	int     10h             ; display '.'
 34312                                          inc     dl              ; increment column
 34313                                          mov     ah,02h          ;
 34314                                          int     10h             ;
 34315                                          ;mov	ax,0900h+' '    ;
 34316                                          mov	ax,0920h
 34317                                  	int     10h             ; display ' '
 34318                                          inc     dl              ; increment column
 34319                                          mov     ah,02h          ;
 34320                                          int     10h             ;
 34321                                          push    es              ;
 34322                                  print_loop:                     ;
 34323                                          mov     al,[es:di]	; get a character of the description
 34324                                          inc     di              ;
 34325                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34326                                          jne	short print_nontab ;
 34327                                          mov     al,' '          ;
 34328                                  print_nontab:                   ;
 34329                                          cmp     al,' '          ;
 34330                                          jb	short print_done ; stop at the 1st character < space
 34331                                          cmp     al,'$'          ;
 34332                                          je	short print_done ; also stop on $
 34333                                          mov     ah,09h          ; display function #
 34334                                          int     10h             ;
 34335                                          inc     dl              ; increment column
 34336                                          cmp     dl,78           ; far enough?
 34337                                          jae	short print_done ; yes
 34338                                          mov     ah,02h          ;
 34339                                          int     10h             ;
 34340                                          jmp     print_loop      ;
 34341                                  print_done:                     ;
 34342                                          pop     es              ;
 34343                                          pop     dx              ;
 34344                                          mov     ah,02h          ;
 34345                                          int     10h             ; restore previous row/col
 34346                                          pop     si              ;
 34347                                          pop     dx              ;
 34348                                          pop     cx              ;
 34349                                          pop     bx              ;
 34350                                          pop     ax              ;
 34351                                          retn			;
 34352                                  
 34353                                  ;----------------------------------------------------------------------------
 34354                                  ;
 34355                                  ;   select_item:  wait for user to select menu item, with time-out
 34356                                  ;
 34357                                  ;   INPUT
 34358                                  ;       None
 34359                                  ;
 34360                                  ;   OUTPUT
 34361                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34362                                  ;       Selected menu item highlighted
 34363                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34364                                  ;
 34365                                  ;   OTHER REGS USED
 34366                                  ;       None
 34367                                  ;
 34368                                  ;   NOTES
 34369                                  ;       None
 34370                                  ;
 34371                                  ;   HISTORY
 34372                                  ;       Created 16-Mar-1992 by JeffPar
 34373                                  ;
 34374                                  ;----------------------------------------------------------------------------
 34375                                  
 34376                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34377                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34378                                          mov     al,bl           ;
 34379                                          call    disp_num        ;
 34380                                          call    show_status     ; display current interactive status
 34381                                          cmp     byte [secTimeOut],-1
 34382                                          je	short input_key	; no time-out, just go to input
 34383                                          mov     ah,GET_TIME ; 2Ch
 34384                                          int     21h             ;
 34385                                          mov     bh,dh           ; BH = initial # of seconds
 34386                                  check_time:
 34387                                          mov     al,[secTimeOut] ;
 34388                                          sub     al,[secElapsed] ;
 34389                                          jae	short show_time	;
 34390                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34391                                          mov     byte [secElapsed],0
 34392                                          jmp	select_done	; time's up!
 34393                                  show_time:
 34394                                          push    bx              ;
 34395                                          mov     bl,al           ; save # in BL
 34396                                          mov     bh,[bMenuPage]  ;
 34397                                          mov     ah,03h          ; get cursor position
 34398                                          int     10h             ;
 34399                                          push    dx              ;
 34400                                  	add	dl,8		; move cursor to the right
 34401                                          mov     ah,02h          ; set cursor position
 34402                                          int     10h             ;
 34403                                          mov     dx,_$TimeOut
 34404                                          call    print           ; print the "Time remaining: " prompt
 34405                                          mov     al,bl           ; recover # from BL
 34406                                          cbw                     ; this works because AL is always <= 90
 34407                                          mov     cl,10           ;
 34408                                          div     cl              ; AL = tens digit, AH = ones digit
 34409                                          mov     cl,ah           ;
 34410                                          add     al,'0'          ;
 34411                                          mov     ah,0Eh          ;
 34412                                          int     10h             ; write TTY tens digit
 34413                                          mov     al,cl           ;
 34414                                          add     al,'0'          ;
 34415                                          mov     ah,0Eh          ;
 34416                                          int     10h             ; write TTY ones digit
 34417                                          pop     dx
 34418                                          mov     ah,02h          ; set cursor position back to where it was
 34419                                          int     10h             ;
 34420                                          pop     bx              ;
 34421                                  input_key:
 34422                                          mov     ah,RAW_CON_IO ; 6
 34423                                          mov     dl,0FFh         ; input request
 34424                                          int     21h             ;
 34425                                          jnz	short got_key	;
 34426                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34427                                          je	short input_key	; no, just go back to input
 34428                                          mov     ah,GET_TIME     ;
 34429                                          int     21h             ; DH = seconds
 34430                                          mov     ah,dh           ;
 34431                                          sub     dh,bh           ; should generally be zero or one
 34432                                          mov     bh,ah           ;
 34433                                          jnc	short got_time	;
 34434                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34435                                  got_time:
 34436                                          or      dh,dh           ; any change?
 34437                                          jz	short input_key	; no
 34438                                          add     [secElapsed],dh ;
 34439                                          jmp	short check_time ;
 34440                                  got_key:
 34441                                          push    ax              ;
 34442                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34443                                          xchg    [secTimeOut],ax
 34444                                          cmp     al,-1           ; was time-out already disabled?
 34445                                          je	short timeout_disabled ; yes
 34446                                          push    bx              ; let's disable # seconds display
 34447                                          mov     ax,0A20h        ; write multiple spaces
 34448                                          mov     bx,[bMenuColor]
 34449                                          mov     cx,80           ; 80 of them, to be safe
 34450                                          int     10h             ; to completely obliterate # seconds display
 34451                                          pop     bx   		;
 34452                                  
 34453                                  timeout_disabled:
 34454                                          pop     ax              ;
 34455                                          or      al,al           ; extended key pressed?
 34456                                          jnz	short normal_key ; no
 34457                                          int     21h             ; get the next part of the key then
 34458                                          jz	short input_key	; hmmm, what happened to the second part?
 34459                                  
 34460                                          cmp     al,48h          ; up arrow?
 34461                                          jne	short not_up	; no
 34462                                          cmp     bl,1            ; are we as up as up can get?
 34463                                          jbe	short input_key	; yes, ignore it
 34464                                          dec     byte [bDefBlock] ;
 34465                                          call    print_item      ; re-print the current item
 34466                                          dec     bl              ; and then print the new current item
 34467                                          jmp     short print1
 34468                                  not_up:
 34469                                          cmp     al,50h          ; down arrow?
 34470                                          jne	short not_down	; no
 34471                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34472                                          jae	short to_input_key ; yes, ignore it
 34473                                          inc     byte [bDefBlock] ;
 34474                                          call    print_item      ; re-print the current item
 34475                                          inc     bx              ; and then print the new current item
 34476                                  print1: 
 34477                                  	mov     al,bl           ;
 34478                                  print2: 
 34479                                  	call    print_item      ;
 34480                                          call    disp_num        ;
 34481                                  to_input_key:
 34482                                          jmp     input_key       ;
 34483                                  not_down:
 34484                                          test    byte [bDisableUI],1
 34485                                          jnz	short to_input_key ; don't allow F8 or F5
 34486                                          cmp     al,42h          ; F8 function key?
 34487                                          jne	short not_f8	; no
 34488                                          xor     byte [bQueryOpt],1
 34489                                          call    show_status     ;
 34490                                          jmp     input_key	;
 34491                                  not_f8:
 34492                                          cmp     al,3Fh          ; F5 function key?
 34493                                          jne	short to_input_key ; no
 34494                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34495                                          mov     al,' '          ; don't want to display anything really;
 34496                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34497                                  
 34498                                  normal_key:
 34499                                          cmp     al,0Dh          ; Enter?
 34500                                          je	short select_done ; yes
 34501                                          cmp     al,08h          ; backspace?
 34502                                          jne	short not_backspace ; no
 34503                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34504                                          retn			;
 34505                                  not_backspace:
 34506                                          sub     al,'0'          ; is greater than '0'?
 34507                                          jbe	short to_input_key ; no
 34508                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34509                                          ja	short to_input_key ; no
 34510                                          mov	[bDefBlock],al  ;
 34511                                          call    print_item      ; redisplay the current selection
 34512                                          mov     bl,al           ; set new selection
 34513                                          jmp	short print2
 34514                                  
 34515                                  select_done:
 34516                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34517                                          mov     al,bl           ;
 34518                                          add     al,'0'          ; convert it into a digit, then display it
 34519                                  
 34520                                  	; fall into disp_input
 34521                                  
 34522                                  ; 16/04/2019 - Retro DOS v4.0
 34523                                  
 34524                                  ;----------------------------------------------------------------------------
 34525                                  ;
 34526                                  ;   disp_input:  display a single character + cr/lf
 34527                                  ;
 34528                                  ;   INPUT
 34529                                  ;       AL == character to display
 34530                                  ;
 34531                                  ;   OUTPUT
 34532                                  ;       None
 34533                                  ;
 34534                                  ;   OTHER REGS USED
 34535                                  ;       None
 34536                                  ;
 34537                                  ;   NOTES
 34538                                  ;       This function is used not only for the menu input selection but
 34539                                  ;       also for the interactive line prompting (the y/n/a thing).
 34540                                  ;
 34541                                  ;   HISTORY
 34542                                  ;       Created 16-Mar-1992 by JeffPar
 34543                                  ;
 34544                                  ;----------------------------------------------------------------------------
 34545                                  
 34546                                  disp_input:
 34547                                          push    ax
 34548                                          cmp     al,' '
 34549                                          jae	short disp_ok
 34550                                          mov     al,' '
 34551                                  disp_ok:
 34552                                          mov     dl,al
 34553                                          mov     ah,STD_CON_OUTPUT ; 2
 34554                                          int     21h
 34555                                          mov     dx,crlfm
 34556                                          call    print
 34557                                          pop     ax
 34558                                          retn
 34559                                  
 34560                                  ;----------------------------------------------------------------------------
 34561                                  
 34562                                  disp_num:
 34563                                          push    bx
 34564                                          add     al,'0'
 34565                                          mov     ah,0Ah
 34566                                          mov     bx,[bMenuColor]
 34567                                          mov     cx,1
 34568                                          int     10h
 34569                                          pop     bx
 34570                                          retn
 34571                                  
 34572                                  ;----------------------------------------------------------------------------
 34573                                  ;
 34574                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34575                                  ;
 34576                                  ;   INPUT
 34577                                  ;       None
 34578                                  ;
 34579                                  ;   OUTPUT
 34580                                  ;       None
 34581                                  ;
 34582                                  ;   OTHER REGS USED
 34583                                  ;       None
 34584                                  ;
 34585                                  ;   NOTES
 34586                                  ;       None
 34587                                  ;
 34588                                  ;   HISTORY
 34589                                  ;       Created 16-Mar-1992 by JeffPar
 34590                                  ;
 34591                                  ;----------------------------------------------------------------------------
 34592                                  
 34593                                  show_status:
 34594                                          push    bx              ; BL = video page #
 34595                                          mov     bx,[bMenuColor]
 34596                                          mov     ah,03h          ; get cursor position
 34597                                          int     10h             ;
 34598                                          push    dx              ; save it
 34599                                          mov     ah,02h          ; set cursor position
 34600                                          mov     dx,[bLastCol]   ; set correct row/col
 34601                                          test    byte [bDisableUI],1
 34602                                          jz	short show_onoff ; just show on/off
 34603                                          mov     dl,0            ;
 34604                                          int     10h             ;
 34605                                          mov     ax,0A20h        ; write multiple spaces
 34606                                          mov     cx,80           ; 80 of them, to be exact
 34607                                          int     10h             ; to obliterate the status line
 34608                                          jmp     short show_done ;
 34609                                  show_onoff: 
 34610                                          int     10h
 34611                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34612                                  		; AL = character, BH = display page - alpha mode
 34613                                  		; BL = color of character (graphics mode, PCjr only)
 34614                                  		; CX = number of times to write character
 34615                                  
 34616                                          mov     al,[_$NO]	; assume OFF
 34617                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34618                                          jne	short show_noton ; no
 34619                                          mov     al,[_$YES]	; yes
 34620                                  show_noton:                     ;
 34621                                          mov     ah,0Eh          ; write TTY
 34622                                          int     10h             ;
 34623                                  show_done:                      ;
 34624                                          pop     dx              ;
 34625                                          mov     ah,02h          ;
 34626                                          int     10h             ; restore original cursor position
 34627                                          pop     bx              ;
 34628                                          retn			;
 34629                                  
 34630                                  ; 16/04/2019 - Retro DOS v4.0
 34631                                  
 34632                                  ;----------------------------------------------------------------------------
 34633                                  ;
 34634                                  ;   skip_token: advances ES:SI/CX past the current token
 34635                                  ;
 34636                                  ;   INPUT
 34637                                  ;    ES:SI -> position in config.sys
 34638                                  ;       CX == remaining bytes in config.sys
 34639                                  ;
 34640                                  ;   OUTPUT
 34641                                  ;       CF set if EOL/EOF hit
 34642                                  ;       AL == 1st char of delimiter
 34643                                  ;    ES:SI -> just past the delimiter
 34644                                  ;       CX == # bytes remaining from that point
 34645                                  ;
 34646                                  ;   OTHER REGS USED
 34647                                  ;       AX
 34648                                  ;
 34649                                  ;   NOTES
 34650                                  ;       None
 34651                                  ;
 34652                                  ;   HISTORY
 34653                                  ;       Created 16-Mar-1992 by JeffPar
 34654                                  ;
 34655                                  ;----------------------------------------------------------------------------
 34656                                  
 34657                                  skip_token:
 34658                                          call    get_char
 34659                                          jc	short skip_token_done
 34660                                          call    any_delim
 34661                                          jne	short skip_token
 34662                                  skip_check_eol:
 34663                                          cmp     al,cr ; 0Dh
 34664                                          je	short skip_token_eol
 34665                                          cmp     al,lf ; 0Ah
 34666                                          je	short skip_token_eol
 34667                                          clc
 34668                                          ;jmp	short skip_token_done
 34669                                  	retn
 34670                                  skip_token_eol:
 34671                                          stc
 34672                                  skip_token_done:
 34673                                          retn
 34674                                  
 34675                                  ;----------------------------------------------------------------------------
 34676                                  ;
 34677                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34678                                  ;
 34679                                  ;   INPUT
 34680                                  ;    ES:SI -> position in config.sys
 34681                                  ;       CX == remaining bytes in config.sys
 34682                                  ;
 34683                                  ;   OUTPUT
 34684                                  ;       CF set if EOF hit
 34685                                  ;       AL == 1st char of token
 34686                                  ;    ES:SI -> just past the token
 34687                                  ;       CX == # bytes remaining from that point
 34688                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34689                                  ;
 34690                                  ;   OTHER REGS USED
 34691                                  ;       AX
 34692                                  ;
 34693                                  ;   NOTES
 34694                                  ;       None
 34695                                  ;
 34696                                  ;   HISTORY
 34697                                  ;       Created 16-Mar-1992 by JeffPar
 34698                                  ;
 34699                                  ;----------------------------------------------------------------------------
 34700                                  
 34701                                  skip_delim:       ; returns carry set if eol/eof
 34702                                          call    get_char        ;
 34703                                          lea     bx,[si-1]       ; also returns BX -> next token
 34704                                          jc	short skip_token_done ;
 34705                                          call    delim           ;
 34706                                          je	short skip_delim ;
 34707                                          jmp	short skip_check_eol  ; 13/05/2019
 34708                                  
 34709                                  ;----------------------------------------------------------------------------
 34710                                  ;
 34711                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34712                                  ;
 34713                                  ;   INPUT
 34714                                  ;       AL == last character read
 34715                                  ;    ES:SI -> position in config.sys
 34716                                  ;       CX == remaining bytes in config.sys
 34717                                  ;
 34718                                  ;   OUTPUT
 34719                                  ;       CF set if EOF hit
 34720                                  ;       AL == 1st char of new line
 34721                                  ;    ES:SI -> just past 1st char of new line
 34722                                  ;       CX == # bytes remaining from that point
 34723                                  ;
 34724                                  ;   OTHER REGS USED
 34725                                  ;       AX
 34726                                  ;
 34727                                  ;   NOTES
 34728                                  ;       In other words, the purpose here is to skip to the next line,
 34729                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34730                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34731                                  ;
 34732                                  ;   HISTORY
 34733                                  ;       Created 16-Mar-1992 by JeffPar
 34734                                  ;
 34735                                  ;----------------------------------------------------------------------------
 34736                                  
 34737                                  skip_opt_line:
 34738                                          cmp     al,lf ; 0Ah
 34739                                          je	short skip_line_done
 34740                                       
 34741                                  	; fall into skip_line
 34742                                  
 34743                                  ;----------------------------------------------------------------------------
 34744                                  ;
 34745                                  ;   skip_line: skip to the next line
 34746                                  ;
 34747                                  ;   INPUT
 34748                                  ;    ES:SI -> position in config.sys
 34749                                  ;       CX == remaining bytes in config.sys
 34750                                  ;
 34751                                  ;   OUTPUT
 34752                                  ;       CF set if EOF hit
 34753                                  ;    ES:SI -> just past 1st char of new line
 34754                                  ;       CX == # bytes remaining from that point
 34755                                  ;
 34756                                  ;   OTHER REGS USED
 34757                                  ;       AX
 34758                                  ;
 34759                                  ;   NOTES
 34760                                  ;       None
 34761                                  ;
 34762                                  ;   HISTORY
 34763                                  ;       Created 16-Mar-1992 by JeffPar
 34764                                  ;
 34765                                  ;----------------------------------------------------------------------------
 34766                                  
 34767                                  skip_line:
 34768                                          call    get_char
 34769                                          jc	short skip_line_done
 34770                                          cmp     al,lf ; 0Ah
 34771                                          jne	short skip_line
 34772                                  skip_line_done:
 34773                                  num_done:	; 18/12/2022
 34774                                          retn
 34775                                  
 34776                                  ;----------------------------------------------------------------------------
 34777                                  ;
 34778                                  ;   get_number: return binary equivalent of numeric string
 34779                                  ;
 34780                                  ;   INPUT
 34781                                  ;    ES:SI -> position in config.sys
 34782                                  ;       CX == remaining bytes in config.sys
 34783                                  ;
 34784                                  ;   OUTPUT
 34785                                  ;       AL == non-digit encountered
 34786                                  ;       BX == binary #
 34787                                  ;    ES:SI -> just past 1st non-digit
 34788                                  ;       CX == # bytes remaining from that point
 34789                                  ;
 34790                                  ;   OTHER REGS USED
 34791                                  ;       AX
 34792                                  ;
 34793                                  ;   NOTES
 34794                                  ;       None
 34795                                  ;
 34796                                  ;   HISTORY
 34797                                  ;       Created 16-Mar-1992 by JeffPar
 34798                                  ;
 34799                                  ;----------------------------------------------------------------------------
 34800                                  
 34801                                  ; 13/05/2019
 34802                                  
 34803                                  get_number:
 34804                                          sub     bx,bx           ; BX = result
 34805                                  num_loop:
 34806                                          call    get_char        ;
 34807                                          jc	short num_done	;
 34808                                          cmp     al,'0'          ; convert to value
 34809                                          jb	short num_done	; no more number
 34810                                          cmp     al,'9'          ;
 34811                                          ja	short num_done	;
 34812                                          push    ax              ;
 34813                                          mov     ax,10           ;
 34814                                          push    dx              ;
 34815                                          mul     bx              ;
 34816                                          pop     dx              ;
 34817                                          mov     bx,ax           ;
 34818                                          pop     ax              ;
 34819                                          sub     al,'0'          ;
 34820                                          cbw                     ;
 34821                                          add     bx,ax           ;
 34822                                          jmp	short num_loop	;
 34823                                  
 34824                                  	; 18/12/2022
 34825                                  ;num_done:
 34826                                          ;retn
 34827                                  
 34828                                  ;----------------------------------------------------------------------------
 34829                                  ;
 34830                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 34831                                  ;
 34832                                  ;   INPUT
 34833                                  ;    ES:SI -> position in config.sys
 34834                                  ;       CX == remaining bytes in config.sys
 34835                                  ;
 34836                                  ;   OUTPUT
 34837                                  ;       AL == next character
 34838                                  ;    ES:SI -> just past next character
 34839                                  ;       CX == # bytes remaining from that point
 34840                                  ;
 34841                                  ;   OTHER REGS USED
 34842                                  ;       AX
 34843                                  ;
 34844                                  ;   NOTES
 34845                                  ;       None
 34846                                  ;
 34847                                  ;   HISTORY
 34848                                  ;       Created 16-Mar-1992 by JeffPar
 34849                                  ;
 34850                                  ;----------------------------------------------------------------------------
 34851                                  
 34852                                  get_char:
 34853                                          sub     cx,1            ; use SUB to set carry,zero
 34854                                          jb	short get_fail	; out of data
 34855                                          ;lods	byte ptr es:[si] ;
 34856                                  	es	
 34857                                  	lodsb
 34858                                          mov     ah,al           ;
 34859                                          retn			;
 34860                                  get_fail:                       ; restore CX to zero
 34861                                          mov     cx,0            ; leave carry set, zero not set
 34862                                  nearby_ret:
 34863                                          retn
 34864                                  
 34865                                  ;----------------------------------------------------------------------------
 34866                                  ;
 34867                                  ;   query_user: ask user whether to execute current config.sys command
 34868                                  ;
 34869                                  ;   INPUT
 34870                                  ;       AL == current command code
 34871                                  ;    ES:SI -> current command line in config.sys
 34872                                  ;    config_cmd == current command code, but with QUERY bit intact
 34873                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 34874                                  ;
 34875                                  ;   OUTPUT
 34876                                  ;       CF set if command should be ignored (it is also REM'ed out)
 34877                                  ;
 34878                                  ;   OTHER REGS USED
 34879                                  ;       BX, CX, DX, DI
 34880                                  ;
 34881                                  ;   NOTES
 34882                                  ;       None
 34883                                  ;
 34884                                  ;   HISTORY
 34885                                  ;       Created 16-Mar-1992 by JeffPar
 34886                                  ;
 34887                                  ;----------------------------------------------------------------------------
 34888                                  
 34889                                  	; 12/12/2022
 34890                                  query_user:
 34891                                          test    byte [bQueryOpt],4	; answer no to everything?
 34892                                          ;jz	short qu_1		;
 34893                                          ; 12/12/2022
 34894                                  	;jmp	short skip_all		;
 34895                                  	jnz	short skip_all
 34896                                  qu_1:
 34897                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 34898                                          jnz	short nearby_ret	; yes (and return carry clear!)
 34899                                          push    ax                      ;
 34900                                          mov     al,[config_cmd]         ;
 34901                                          test    byte [bQueryOpt],1	; query every command?
 34902                                          jnz	short query_all		; yes
 34903                                          test    al,CONFIG_OPTION_QUERY  ;
 34904                                          ;jnz	short query_all		;
 34905                                          ; 12/12/2022
 34906                                  	;jmp	short do_cmd		;
 34907                                  	jz	short do_cmd ; cf=0
 34908                                  query_all:
 34909                                  
 34910                                  ;   Search for the command code (AL) in "comtab", and then print
 34911                                  ;   out the corresponding keyword, followed by the rest of the actual
 34912                                  ;   line pointed to by ES:SI
 34913                                  
 34914                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 34915                                          mov     dx,_$AutoPrmpt    	;
 34916                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34917                                          jz	short generic_prompt	; config_cmd must have been 0
 34918                                  
 34919                                          mov     dh,al                   ; save config_cmd in DH
 34920                                          sub     bx,bx                   ;
 34921                                          mov     di,comtab		;
 34922                                  find_match:                             ;
 34923                                          mov     bl,[di]                 ; get size of current keyword
 34924                                          or      bl,bl                   ;
 34925                                          jz	short line_print	; end of table
 34926                                          inc     di                      ;
 34927                                          cmp     al,[di+bx]              ; match?
 34928                                          je	short cmd_match		; yes
 34929                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 34930                                  	; 13/05/2019	
 34931                                          jmp	short find_match	; loop
 34932                                  cmd_match:                              ;
 34933                                          mov     cl,[di-1]               ;
 34934                                          mov     ch,0                    ;
 34935                                          mov     ah,STD_CON_OUTPUT ; 2
 34936                                  cmd_print:                              ;
 34937                                          mov     al,[di]                 ;
 34938                                          inc     di                      ;
 34939                                          mov     dl,al                   ;
 34940                                          int     21h                     ;
 34941                                          loop    cmd_print               ;
 34942                                          mov     dl,'='                  ;
 34943                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 34944                                          jne	short cmd_notset	;
 34945                                          mov     dl,' '                  ;
 34946                                  cmd_notset:
 34947                                          int     21h                     ; '=' looks funny on SET commands
 34948                                  line_print:                             ;
 34949                                  	;lods	byte ptr es:[si]        ;
 34950                                          es
 34951                                  	lodsb
 34952                                  	or      al,al                   ;
 34953                                          jnz	short non_null		;
 34954                                          mov     al,' '                  ;
 34955                                  non_null:                               ;
 34956                                          cmp     al,' '                  ; control code?
 34957                                          jb	short prompt_user	; yes, assume end of line
 34958                                          jne	short non_space		;
 34959                                          cmp     byte [es:si],' '	;
 34960                                          jb	short prompt_user	;
 34961                                  non_space:                              ;
 34962                                          mov     dl,al                   ;
 34963                                          mov     ah,STD_CON_OUTPUT ; 2	;
 34964                                          int     21h                     ;
 34965                                          jmp	short line_print	;
 34966                                  prompt_user:                            ;
 34967                                          mov     dx,_$InterPrmpt		;
 34968                                  
 34969                                  generic_prompt:
 34970                                          call    print                   ;
 34971                                  input_loop:                             ;
 34972                                          mov     ah,0                    ; read a key
 34973                                          int     16h                     ;
 34974                                          or      al,al                   ; is it a function key?
 34975                                          jnz	short not_func		; no
 34976                                          cmp     ah,3Fh                  ; F5 function key?
 34977                                          jne	short input_loop	; no
 34978                                          mov     al,[_$NO]                  ;
 34979                                          or      byte [bQueryOpt],4	; no more queries
 34980                                          jmp     short legal_char        ;
 34981                                  not_func:
 34982                                          and     al,~20h ; 0DFh		; converting to upper case
 34983                                          cmp     al,[_$NO]		; verify character is legal
 34984                                          je	short legal_char	;
 34985                                          cmp     al,[_$YES]		;
 34986                                          je	short legal_char	;
 34987                                          cmp     byte [config_cmd],0	;
 34988                                          je	short input_loop	; don't allow Esc on this query
 34989                                          cmp     al,1Bh                  ; Esc?
 34990                                          jne	short input_loop	;
 34991                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 34992                                          mov     al,[_$YES]
 34993                                  legal_char:                             ;
 34994                                          call    disp_input              ;
 34995                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 34996                                  
 34997                                          cmp     al,[_$NO]		; process line?
 34998                                          je	short skip_cmd		; no
 34999                                  	; 12/12/2022
 35000                                  	clc
 35001                                  do_cmd:
 35002                                  	pop     ax			;
 35003                                  	; 12/12/2022
 35004                                  	; cf=0
 35005                                  	;clc				; just do the command
 35006                                  	retn
 35007                                  
 35008                                  skip_cmd:
 35009                                  	pop     ax			;
 35010                                  skip_all:
 35011                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35012                                  	stc
 35013                                  	retn
 35014                                  
 35015                                  ;----------------------------------------------------------------------------
 35016                                  ;
 35017                                  ;   print_error: displays multi-config error conditions
 35018                                  ;
 35019                                  ;   INPUT
 35020                                  ;    Carry set to pause, clear to not
 35021                                  ;    ES:SI -> current command line in config.sys
 35022                                  ;
 35023                                  ;   OUTPUT
 35024                                  ;       None
 35025                                  ;
 35026                                  ;   OTHER REGS USED
 35027                                  ;       None
 35028                                  ;
 35029                                  ;   NOTES
 35030                                  ;       None
 35031                                  ;
 35032                                  ;   HISTORY
 35033                                  ;       Created 16-Mar-1992 by JeffPar
 35034                                  ;
 35035                                  ;----------------------------------------------------------------------------
 35036                                  
 35037                                  print_error:
 35038                                          push    ax
 35039                                          push    bx
 35040                                          push    cx
 35041                                          push    dx
 35042                                          push    ds
 35043                                          push    cs
 35044                                          pop     ds
 35045                                          pushf
 35046                                          call    get_linenum
 35047                                          mov     [linecount],bx
 35048                                          call    error_line
 35049                                          popf
 35050                                          jnc	short pe_ret
 35051                                          mov     dx,_$PauseMsg
 35052                                          call    print
 35053                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35054                                          int     21h			; wait for a key
 35055                                          or      al,al			; extended key?
 35056                                          jnz	short pe_1		; no
 35057                                          mov     ah,07h			; yes
 35058                                          int     21h			; eat it too
 35059                                  pe_1:     
 35060                                  	mov     dx,crlfm
 35061                                          call    print
 35062                                  pe_ret: 
 35063                                  	pop     ds
 35064                                          pop     dx
 35065                                          pop     cx
 35066                                          pop     bx
 35067                                          pop     ax
 35068                                  	retn
 35069                                  
 35070                                  ;----------------------------------------------------------------------------
 35071                                  
 35072                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35073                                  ;   command-line for the shell;  this (undocumented) switch disables
 35074                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35075                                  ;   displayed when there's no AUTOEXEC.BAT.
 35076                                  
 35077                                  disable_autoexec:
 35078                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35079                                  	; 17/04/2019 - Retro DOS v4.0
 35080                                  
 35081                                  	test	byte [bQueryOpt],4
 35082                                  	jz	short disable_exit
 35083                                  	test	byte [dae_flag],1
 35084                                  	jnz	short disable_exit
 35085                                  	or	byte [dae_flag],1
 35086                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35087                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35088                                  	mov     dx,'D ' ; 2044h
 35089                                  dae_1:
 35090                                          ;mov	al,[def_swchr]
 35091                                  	mov     al,[command_line-1]     ; get default switchchar
 35092                                          or      al,al                   ; anything there?
 35093                                          jz	short disable_exit	; no, disable_autoexec already called
 35094                                          mov     bl,[command_line]       ;
 35095                                          mov     bh,0                    ; BX == command-line length
 35096                                          mov     cx,bx                   ;
 35097                                          add     bl,3                    ;
 35098                                          cmp     bl,126                  ;
 35099                                          ja	short disable_exit	;
 35100                                          mov     [command_line],bl       ; update length
 35101                                          add     bx,command_line+1	; make sure we move the NULL too
 35102                                          inc     cx                      ; (just for consistency sake)
 35103                                  disable_loop:                           ;
 35104                                          mov     ah,[bx-3]               ;
 35105                                          mov     [bx],ah                 ;
 35106                                          dec     bx                      ;
 35107                                          loop    disable_loop            ;
 35108                                          mov     [bx-2],al               ;
 35109                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35110                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35111                                          ;mov	byte [command_line-1],0 ;
 35112                                  disable_exit:                           ;
 35113                                          retn
 35114                                  
 35115                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35116                                  	cmp     byte [bQueryOpt],1
 35117                                  	jnz     short disable_exit
 35118                                  	test	byte [dae_flag],2
 35119                                  	jnz     short disable_exit
 35120                                  	or      byte [dae_flag],2
 35121                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 35122                                  	jmp     short dae_1
 35123                                  
 35124                                  ;endif  ;MULTI_CONFIG
 35125                                  
 35126                                  %endif	; 02/11/2022
 35127                                  
 35128                                  
 35129                                  ; 19/04/2019 - Retro DOS v4.0
 35130                                  
 35131                                  ;----------------------------------------------------------------------------
 35132                                  ;
 35133                                  ; procedure : delim
 35134                                  ;
 35135                                  ;----------------------------------------------------------------------------
 35136                                  
 35137                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35138                                  ;
 35139                                  ;;ifdef	MULTI_CONFIG
 35140                                  ;
 35141                                  ;any_delim:
 35142                                  ;       cmp     al,cr
 35143                                  ;       je	short delim_ret
 35144                                  ;       cmp     al,lf
 35145                                  ;       je	short delim_ret
 35146                                  ;       cmp     al,'['
 35147                                  ;       je	short delim_ret
 35148                                  ;       cmp     al,']'
 35149                                  ;       je	short delim_ret
 35150                                  ;
 35151                                  ;;endif  ;MULTI_CONFIG
 35152                                  
 35153                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35154                                  	; (SYSINIT:3450h)	
 35155                                  delim:
 35156 0000307D 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35157 0000307F 7416                    	je	short delim_ret
 35158                                  
 35159 00003081 3C00                    	cmp	al,0		; special case for sysinit!!!
 35160 00003083 7412                    	je	short delim_ret
 35161                                  
 35162                                  org_delim:			; used by organize routine except for getting
 35163 00003085 3C20                    	cmp	al,' '          ; the filename.
 35164 00003087 740E                    	je	short delim_ret
 35165 00003089 3C09                            cmp     al,tab ; 9
 35166 0000308B 740A                    	je	short delim_ret
 35167 0000308D 3C3D                    	cmp	al,'='
 35168 0000308F 7406                    	je	short delim_ret
 35169 00003091 3C2C                    	cmp	al,','
 35170 00003093 7402                    	je	short delim_ret
 35171 00003095 3C3B                    	cmp	al,';'
 35172                                  
 35173                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35174                                  ;;ifdef	MULTI_CONFIG
 35175                                  ;;   Make sure there's no chance of a false EOF indication
 35176                                  ;	clc
 35177                                  ;;endif
 35178                                  
 35179                                  	; 02/11/2022
 35180                                  delim_ret:
 35181 00003097 C3                      	retn
 35182                                  
 35183                                  ;----------------------------------------------------------------------------
 35184                                  ;
 35185                                  ; procedure : newline
 35186                                  ;
 35187                                  ;  newline returns with first character of next line
 35188                                  ;
 35189                                  ;----------------------------------------------------------------------------
 35190                                  
 35191                                  newline:
 35192 00003098 E898F6                  	call	getchr			;skip non-control characters
 35193 0000309B 7207                    	jc	short nl_ret
 35194 0000309D 3C0A                    	cmp	al,lf			;look for line feed
 35195 0000309F 75F7                    	jne	short newline
 35196 000030A1 E88FF6                  	call	getchr
 35197                                  nl_ret:
 35198 000030A4 C3                      	retn
 35199                                  
 35200                                  ;----------------------------------------------------------------------------
 35201                                  ; 
 35202                                  ; procedure : mapcase
 35203                                  ;
 35204                                  ;----------------------------------------------------------------------------
 35205                                  
 35206                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35207                                  mapcase:
 35208 000030A5 51                      	push	cx
 35209 000030A6 56                      	push	si
 35210 000030A7 1E                      	push	ds
 35211                                  
 35212 000030A8 06                      	push	es
 35213 000030A9 1F                      	pop	ds
 35214                                  
 35215                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35216                                  ;;ifdef	MULTI_CONFIG
 35217                                  ;
 35218                                  ;	mov	bl,al                   ; same cmd code this line
 35219                                  ;;else
 35220                                  ;;	xor	si,si
 35221                                  ;;endif
 35222                                  	; 02/11/2022
 35223 000030AA 31F6                    	xor	si, si
 35224                                  
 35225                                  convloop:
 35226 000030AC AC                      	lodsb
 35227 000030AD 3C61                    	cmp	al,'a'
 35228 000030AF 7209                    	jb	short noconv
 35229 000030B1 3C7A                    	cmp	al,'z'
 35230 000030B3 7705                    	ja	short noconv
 35231 000030B5 2C20                    	sub	al,20h
 35232 000030B7 8844FF                  	mov	[si-1],al
 35233                                  noconv:
 35234                                  
 35235                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35236                                  ;;ifdef	MULTI_CONFIG
 35237                                  ;;
 35238                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35239                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35240                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35241                                  ;;   anything after the "=" in a SET)
 35242                                  ;;
 35243                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35244                                  ;       jne	short check_eol		; no, just check for end-of-line
 35245                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35246                                  ;       je	short convdone		; yes
 35247                                  ;check_eol:
 35248                                  ;       cmp     al,cr
 35249                                  ;       je	short convdone
 35250                                  ;       cmp     al,lf
 35251                                  ;       je	short convdone
 35252                                  ;;endif
 35253                                  	
 35254                                  	; 02/11/2022
 35255 000030BA E2F0                    	loop	convloop
 35256                                  convdone:
 35257 000030BC 1F                      	pop	ds
 35258 000030BD 5E                      	pop	si
 35259 000030BE 59                      	pop	cx
 35260 000030BF C3                      	retn
 35261                                  
 35262                                  ;----------------------------------------------------------------------------
 35263                                  ;
 35264                                  ; procedure : round
 35265                                  ;
 35266                                  ; round the values in memlo and memhi to paragraph boundary.
 35267                                  ; perform bounds check.
 35268                                  ;
 35269                                  ;----------------------------------------------------------------------------
 35270                                  
 35271                                  round:
 35272 000030C0 50                      	push	ax
 35273 000030C1 2EA1[DE03]              	mov	ax,[cs:memlo]
 35274                                  
 35275 000030C5 E8F1DF                  	call	ParaRound		; para round up
 35276                                  
 35277 000030C8 2E0106[E003]            	add	[cs:memhi],ax
 35278 000030CD 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35279 000030D4 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35280 000030D8 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35281 000030DD 7322                    	jae	short mem_err
 35282 000030DF 2EF606[2E14]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35283 000030E5 7418                    	jz	short skip_set_devmarksize
 35284 000030E7 06                      	push	es
 35285 000030E8 56                      	push	si
 35286 000030E9 2E8B36[2C14]            	mov	si,[cs:devmark_addr]
 35287 000030EE 8EC6                    	mov	es,si
 35288 000030F0 29F0                    	sub	ax,si
 35289 000030F2 48                      	dec	ax
 35290                                  	;mov	[es:3],ax
 35291 000030F3 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35292 000030F7 2E8026[2E14]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35293 000030FD 5E                      	pop	si
 35294 000030FE 07                      	pop	es
 35295                                  skip_set_devmarksize:
 35296 000030FF 58                      	pop	ax
 35297                                  	; 11/12/2022
 35298                                  	; cf = 0
 35299                                  	; 02/11/2022
 35300                                  	;clc	; ? (not needed here)	; clear carry
 35301 00003100 C3                      	retn
 35302                                  
 35303                                  ;----------------------------------------------------------------------------
 35304                                  
 35305                                  mem_err:
 35306                                  	; 11/12/2022
 35307 00003101 0E                      	push	cs
 35308 00003102 1F                      	pop	ds
 35309                                  mem_err2:
 35310 00003103 BA[2938]                	mov	dx,badmem
 35311                                  	;push	cs
 35312                                  	;pop	ds
 35313 00003106 E87602                  	call	print
 35314 00003109 E941D7                  	jmp	stall
 35315                                  
 35316                                  ;----------------------------------------------------------------------------
 35317                                  ;
 35318                                  ; procedure : calldev
 35319                                  ;
 35320                                  ;----------------------------------------------------------------------------
 35321                                  
 35322                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35323                                  	; (SYSINIT:34E0h)
 35324                                  calldev:
 35325 0000310C 2E8E1E[EA1E]            	mov	ds,[cs:DevEntry+2]
 35326 00003111 2E031E[E81E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35327 00003116 8B07                    	mov	ax,[bx]
 35328                                  
 35329 00003118 2EFF36[E81E]            	push	word [cs:DevEntry]
 35330 0000311D 2EA3[E81E]              	mov	word [cs:DevEntry],ax
 35331 00003121 BB[E603]                	mov	bx,packet
 35332 00003124 2EFF1E[E81E]            	call	far [cs:DevEntry]
 35333 00003129 2E8F06[E81E]            	pop	word [cs:DevEntry]
 35334 0000312E C3                      	retn
 35335                                  
 35336                                  ;----------------------------------------------------------------------------
 35337                                  ;
 35338                                  ; procedure : todigit
 35339                                  ;
 35340                                  ;----------------------------------------------------------------------------
 35341                                  
 35342                                  todigit:
 35343 0000312F 2C30                    	sub	al,'0'
 35344                                  	;jb	short notdig  ; 02/11/2022
 35345                                  	; 12/12/2022
 35346 00003131 7203                    	jb	short notdig2
 35347                                  	;cmp	al,9
 35348                                  	;ja	short notdig
 35349                                  	;clc
 35350                                  	;retn
 35351                                  	; 12/12/2022
 35352 00003133 3C0A                    	cmp	al,10
 35353 00003135 F5                      	cmc
 35354                                  notdig:
 35355                                  	;stc
 35356                                  notdig2:
 35357 00003136 C3                      	retn
 35358                                  
 35359                                  ;----------------------------------------------------------------------------
 35360                                  ;
 35361                                  ; procedure : getnum
 35362                                  ;
 35363                                  ; getnum parses a decimal number.
 35364                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35365                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35366                                  ;
 35367                                  ;----------------------------------------------------------------------------
 35368                                  
 35369                                  getnum:
 35370 00003137 53                      	push	bx
 35371 00003138 31DB                    	xor	bx,bx			; running count is zero
 35372                                  b2:
 35373 0000313A E8F2FF                  	call	todigit 		; do we have a digit ?
 35374 0000313D 7247                    	jc	short badnum		; no, bomb
 35375                                  
 35376 0000313F 93                      	xchg	ax,bx			; put total in ax
 35377 00003140 53                      	push	bx			; save digit (0 to 9)
 35378                                  	;mov	bx,10			; base of arithmetic
 35379                                  	; 12/12/2022
 35380 00003141 B30A                    	mov	bl,10
 35381 00003143 F7E3                    	mul	bx			; shift by one decimal digit
 35382 00003145 5B                      	pop	bx			; get back digit (0 to 9)
 35383 00003146 00D8                    	add	al,bl			; get total
 35384 00003148 80D400                  	adc	ah,0			; make that 16 bits
 35385 0000314B 7239                    	jc	short badnum		; too big a number
 35386                                  
 35387 0000314D 93                      	xchg	ax,bx			; stash total
 35388                                  
 35389 0000314E E8E2F5                  	call	getchr			;get next digit
 35390 00003151 722D                    	jc	short b1		; no more characters
 35391 00003153 3C20                    	cmp	al,' ' 			; space?
 35392 00003155 741F                    	je	short b15		; then end of digits
 35393 00003157 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35394 00003159 741B                    	je	short b15		; then end of digits.
 35395 0000315B 3C09                    	cmp	al, tab ; 9		; tab
 35396 0000315D 7417                    	je	short b15
 35397 0000315F 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35398 00003164 7410                    	je	short b15
 35399 00003166 3C2F                    	cmp	al,'/'			; see if another switch follows
 35400                                  	;nop				; cas - remnant of old bad code
 35401                                  	;nop
 35402                                  	; 12/12/2022
 35403                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35404                                  	;nop
 35405                                  	;nop
 35406 00003168 740C                    	je	short b15
 35407 0000316A 3C0A                    	cmp	al,lf			; line-feed?
 35408 0000316C 7408                    	je	short b15
 35409 0000316E 3C0D                    	cmp	al,cr			; carriage return?
 35410 00003170 7404                    	je	short b15
 35411 00003172 08C0                    	or	al,al			; end of line separator?
 35412 00003174 75C4                    	jnz	short b2		; no, try as a valid char...
 35413                                  b15:
 35414 00003176 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35415 0000317B 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35416                                  b1:
 35417 00003180 89D8                    	mov	ax,bx			; get proper count
 35418 00003182 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35419 00003184 5B                      	pop	bx
 35420 00003185 C3                      	retn
 35421                                  badnum:
 35422                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35423                                  	;mov	byte [cs:sepchr],0
 35424 00003186 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35425                                  	; 12 /12/2022
 35426 00003188 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35427 0000318C 5B                      	pop	bx
 35428 0000318D F9                      	stc				; and carry set
 35429 0000318E C3                      	retn
 35430                                  
 35431                                  ;****************************************************************************
 35432                                  
 35433                                  setdoscountryinfo:
 35434                                  
 35435                                  ;----------------------------------------------------------------------------
 35436                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35437                                  ;	ds:0  -> buffer.
 35438                                  ;	si = 0
 35439                                  ;	ax = country id
 35440                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35441                                  ;	bx = file handle
 35442                                  ;	this routine can handle maximum 438 country_data entries.
 35443                                  ;
 35444                                  ;output: dos_country_cdpg_info set.
 35445                                  ;	 carry set if any file read failure or wrong information in the file.
 35446                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35447                                  ;	 codepage_id in the file.
 35448                                  ;----------------------------------------------------------------------------
 35449                                  
 35450 0000318F 57                      	push	di
 35451 00003190 50                      	push	ax
 35452 00003191 52                      	push	dx
 35453                                  
 35454 00003192 31C9                    	xor	cx,cx
 35455 00003194 31D2                    	xor	dx,dx
 35456 00003196 B80002                  	mov	ax,512			;read 512 bytes
 35457 00003199 E84F01                  	call	readincontrolbuffer	;read the file header
 35458 0000319C 724D                    	jc	short setdosdata_fail
 35459                                  
 35460 0000319E 06                      	push	es
 35461 0000319F 56                      	push	si
 35462                                  
 35463 000031A0 0E                      	push	cs
 35464 000031A1 07                      	pop	es
 35465                                  
 35466 000031A2 BF[4B34]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35467 000031A5 B90800                  	mov	cx,8			;length of the signature
 35468 000031A8 F3A6                    	repz	cmpsb
 35469                                  
 35470 000031AA 5E                      	pop	si
 35471 000031AB 07                      	pop	es
 35472 000031AC 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35473                                  
 35474 000031AE 83C612                  	add	si,18			;si -> county info type
 35475 000031B1 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35476 000031B4 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35477                                  
 35478 000031B6 46                      	inc	si			;si -> file offset
 35479 000031B7 8B14                    	mov	dx,[si]			;get the info file offset.
 35480 000031B9 8B4C02                  	mov	cx,[si+2]
 35481 000031BC B80018                  	mov	ax,6144			;read 6144 bytes.
 35482 000031BF E82901                  	call	readincontrolbuffer	;read info
 35483 000031C2 7227                    	jc	short setdosdata_fail
 35484                                  
 35485 000031C4 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35486 000031C6 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35487 000031CA 771F                    	ja	short setdosdata_fail
 35488                                  
 35489 000031CC 46                      	inc	si
 35490 000031CD 46                      	inc	si			;si -> entry information packet
 35491 000031CE 5A                      	pop	dx			;restore code page id
 35492 000031CF 58                      	pop	ax			;restore country id
 35493 000031D0 5F                      	pop	di
 35494                                  
 35495                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35496 000031D1 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35497 000031D4 750A                    	jne	short setdoscntry_next
 35498                                  
 35499 000031D6 83FA00                  	cmp	dx,0			;no user specified code page ?
 35500 000031D9 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35501 000031DB 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35502 000031DE 7413                    	je	short setdoscntry_got_it
 35503                                  
 35504                                  setdoscntry_next:
 35505 000031E0 0334                    	add	si,[si]			;next entry
 35506 000031E2 46                      	inc	si
 35507 000031E3 46                      	inc	si			;take a word for size of entry itself
 35508 000031E4 E2EB                    	loop	setdoscntry_find
 35509                                  
 35510 000031E6 B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35511                                  setdoscntry_fail:
 35512 000031E9 F9                      	stc
 35513 000031EA C3                      	retn
 35514                                  
 35515                                  setdosdata_fail:
 35516 000031EB 5E                      	pop	si
 35517 000031EC 59                      	pop	cx
 35518 000031ED 5F                      	pop	di
 35519 000031EE EBF9                    	jmp	short setdoscntry_fail
 35520                                  
 35521                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35522 000031F0 8B5404                  	mov	dx,[si+4]
 35523                                  
 35524                                  setdoscntry_got_it:			;found the matching entry
 35525 000031F3 2E8916[5334]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35526 000031F8 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35527 000031FB 8B4C0C                  	mov	cx,[si+12]
 35528 000031FE B80002                  	mov	ax,512 			;read 512 bytes
 35529 00003201 E8E700                  	call	readincontrolbuffer
 35530 00003204 72E3                    	jc	short setdoscntry_fail
 35531                                  
 35532 00003206 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35533 00003208 46                      	inc	si
 35534 00003209 46                      	inc	si			;si -> first entry
 35535                                  
 35536                                  setdoscntry_data:
 35537 0000320A 57                      	push	di			;es:di -> dos_country_cdpg_info
 35538 0000320B 51                      	push	cx			;save # of entry left
 35539 0000320C 56                      	push	si			;si -> current entry in control buffer
 35540                                  
 35541 0000320D 8A4402                  	mov	al,[si+2]		;get data entry id
 35542 00003210 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35543 00003213 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35544                                  
 35545 00003215 8B5404                  	mov	dx,[si+4]		;get offset of data
 35546 00003218 8B4C06                  	mov	cx,[si+6]
 35547 0000321B B80042                  	mov	ax,4200h
 35548 0000321E F9                      	stc
 35549 0000321F CD21                    	int	21h			;move pointer
 35550 00003221 72C8                    	jc	short setdosdata_fail
 35551                                  
 35552 00003223 BA0002                  	mov	dx,512			;start of data buffer
 35553 00003226 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35554 00003229 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35555 0000322B F9                      	stc
 35556 0000322C CD21                    	int	21h			;read the country.sys data
 35557 0000322E 72BB                    	jc	short setdosdata_fail 	;read failure
 35558                                  
 35559 00003230 39C8                    	cmp	ax,cx
 35560 00003232 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35561                                  
 35562 00003234 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35563 00003237 8B4C06                  	mov	cx,[si+6]
 35564 0000323A B80042                  	mov	ax,4200h
 35565 0000323D F9                      	stc
 35566 0000323E CD21                    	int	21h			;move pointer back again
 35567 00003240 72A9                    	jc	short setdosdata_fail
 35568                                  
 35569 00003242 56                      	push	si
 35570 00003243 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35571 00003246 8B0C                    	mov	cx,[si]
 35572 00003248 5E                      	pop	si
 35573 00003249 BA0002                  	mov	dx,512			;start of data buffer
 35574 0000324C 83C10A                  	add	cx,10			;signature + a word for the length itself
 35575 0000324F B43F                    	mov	ah,3Fh			;read the data from the file.
 35576 00003251 F9                      	stc
 35577 00003252 CD21                    	int	21h
 35578 00003254 7295                    	jc	short setdosdata_fail
 35579                                  
 35580 00003256 39C8                    	cmp	ax,cx
 35581 00003258 7591                    	jne	short setdosdata_fail
 35582                                  
 35583 0000325A 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35584 0000325D BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35585 00003260 8B0C                    	mov	cx,[si]			;get the length of the file
 35586 00003262 41                      	inc	cx			;take care of a word for lenght of tab
 35587 00003263 41                      	inc	cx			;itself.
 35588 00003264 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35589 00003268 7781                    	ja	short setdosdata_fail
 35590                                  
 35591                                  	;if	bugfix
 35592 0000326A E83500                  	call	setdbcs_before_copy
 35593                                  	;endif
 35594                                  
 35595 0000326D 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35596 0000326F 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35597                                  
 35598 00003271 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35599                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35600 00003275 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35601                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35602                                  	
 35603 00003279 57                      	push	di			;save di
 35604                                  
 35605 0000327A 50                      	push	ax
 35606 0000327B 2EA1[5334]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35607 0000327F 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35608 00003282 58                      	pop	ax
 35609                                  
 35610                                  setdoscntry_mov:
 35611 00003283 F3A4                    	rep	movsb			;copy the table into dos
 35612 00003285 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35613 00003287 7509                    	jne	short setdoscntry_data_next
 35614                                  
 35615 00003289 5F                      	pop	di			;restore di
 35616 0000328A 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35617                                  	;pop	word [es:di+26]		;restore
 35618 0000328E 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35619                                  	;pop	word [es:di+24]
 35620                                  
 35621                                  setdoscntry_data_next:
 35622 00003292 5E                      	pop	si			;restore control buffer pointer
 35623 00003293 59                      	pop	cx			;restore # of entries left
 35624 00003294 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35625 00003295 0334                    	add	si,[si]			;try to get the next entry
 35626 00003297 46                      	inc	si
 35627 00003298 46                      	inc	si			;take a word of entry length itself
 35628 00003299 49                      	dec	cx
 35629 0000329A 83F900                  	cmp	cx,0
 35630 0000329D 741D                    	je	short setdoscntry_ok
 35631 0000329F E968FF                  	jmp	setdoscntry_data
 35632                                  
 35633                                  	; 18/12/2022
 35634                                  ;setdoscntry_ok:
 35635                                  	;retn
 35636                                  
 35637                                  ;----------------------------------------------------------------------------
 35638                                  
 35639                                  	;if	bugfix
 35640                                  
 35641                                  setdbcs_before_copy:
 35642 000032A2 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35643 000032A4 7516                    	jne	short sdbcsbc		; jump if not
 35644 000032A6 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35645 000032AA 7410                    	je	short sdbcsbc		; jump if so
 35646                                  
 35647 000032AC 57                      	push	di
 35648 000032AD 50                      	push	ax
 35649 000032AE 51                      	push	cx
 35650 000032AF 268B0D                  	mov	cx,[es:di]		; load block length
 35651 000032B2 83C702                  	add	di,2			; points actual data
 35652 000032B5 30C0                    	xor	al,al			; fill bytes
 35653 000032B7 F3AA                    	rep	stosb			; clear data block
 35654 000032B9 59                      	pop	cx
 35655 000032BA 58                      	pop	ax
 35656 000032BB 5F                      	pop	di
 35657                                  sdbcsbc:
 35658                                  setdoscntry_ok:	; 18/12/2022	
 35659 000032BC C3                      	retn
 35660                                  
 35661                                  	;endif
 35662                                  
 35663                                  ;----------------------------------------------------------------------------
 35664                                  
 35665                                  getcountrydestination:
 35666                                  
 35667                                  ;get the destination address in the dos country info table.
 35668                                  ;input: al - data id
 35669                                  ;	es:di -> dos_country_cdpg_info
 35670                                  ;on return:
 35671                                  ;	es:di -> destination address of the matching data id
 35672                                  ;	carry set if no matching data id found in dos.
 35673                                  
 35674 000032BD 51                      	push	cx
 35675                                  	;add	di,74
 35676 000032BE 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35677                                  					;skip the reserved area, syscodepage etc.
 35678 000032C1 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35679 000032C4 47                      	inc	di
 35680 000032C5 47                      	inc	di			;si -> the first start entry id
 35681                                  
 35682                                  getcntrydest:
 35683 000032C6 263805                  	cmp	byte [es:di],al
 35684 000032C9 7413                    	je	short getcntrydest_ok
 35685 000032CB 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35686 000032CF 7405                    	je	short getcntrydest_1
 35687                                  
 35688 000032D1 83C705                  	add	di,5			;next data id
 35689 000032D4 EB03                    	jmp	short getcntrydest_loop
 35690                                  
 35691                                  getcntrydest_1:
 35692                                  	;add	di,41
 35693 000032D6 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35694                                  getcntrydest_loop:
 35695 000032D9 E2EB                    	loop	getcntrydest
 35696 000032DB F9                      	stc
 35697 000032DC EB0B                    	jmp	short getcntrydest_exit
 35698                                  
 35699                                  getcntrydest_ok:
 35700 000032DE 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35701 000032E0 7503                    	jne	short getcntrydest_ok1
 35702                                  
 35703 000032E2 47                      	inc	di			;now di -> cccountryinfolen
 35704 000032E3 EB04                    	jmp	short getcntrydest_exit
 35705                                  
 35706                                  getcntrydest_ok1:
 35707 000032E5 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35708                                  
 35709                                  getcntrydest_exit:
 35710 000032E9 59                      	pop	cx
 35711 000032EA C3                      	retn
 35712                                  
 35713                                  ;----------------------------------------------------------------------------
 35714                                  
 35715                                  readincontrolbuffer:
 35716                                  
 35717                                  ;move file pointer to cx:dx
 35718                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35719                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35720                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35721                                  ;	 be moved.
 35722                                  ;	 ax - # of bytes to read
 35723                                  ;	 bx - file handle
 35724                                  ;	 ds - buffer seg.
 35725                                  ;return: the control data information is read into ds:0 - ds:0200.
 35726                                  ;	 cx,dx value destroyed.
 35727                                  ;	 carry set if error in reading file.
 35728                                  
 35729 000032EB 50                      	push	ax			;# of bytes to read
 35730 000032EC B80042                  	mov	ax,4200h
 35731 000032EF F9                      	stc
 35732 000032F0 CD21                    	int	21h			;move pointer
 35733 000032F2 59                      	pop	cx			;# of bytes to read
 35734 000032F3 7209                    	jc	short ricb_exit
 35735                                  
 35736 000032F5 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35737 000032F7 31F6                    	xor	si,si
 35738 000032F9 B43F                    	mov	ah,3Fh			;read into the buffer
 35739 000032FB F9                      	stc
 35740 000032FC CD21                    	int	21h			;should be less than 1024 bytes.
 35741                                  ricb_exit:
 35742 000032FE C3                      	retn
 35743                                  
 35744                                  ;----------------------------------------------------------------------------
 35745                                  
 35746                                  set_country_path:
 35747                                  
 35748                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35749                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 35750                                  ;     assumes current directory is the root directory.
 35751                                  ;out: ds:di -> full path (cntry_drv).
 35752                                  ;     set the cntry_drv string from the country=,,path command.
 35753                                  ;     ds, es, si value saved.
 35754                                  
 35755 000032FF 56                      	push	si
 35756                                  
 35757 00003300 1E                      	push	ds			;switch ds, es
 35758 00003301 06                      	push	es
 35759 00003302 1F                      	pop	ds
 35760 00003303 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 35761                                  
 35762 00003304 E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 35763 00003307 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 35764                                  
 35765 00003309 8A04                    	mov	al,[si]
 35766 0000330B 46                      	inc	si
 35767 0000330C 46                      	inc	si			;si -> next char after ":"
 35768 0000330D EB06                    	jmp	short scp_setdrv
 35769                                  
 35770                                  scp_default_drv:
 35771 0000330F B419                    	mov	ah,19h
 35772 00003311 CD21                    	int	21h
 35773 00003313 0441                    	add	al,"A"			;convert it to a character.
 35774                                  
 35775                                  scp_setdrv:
 35776 00003315 2EA2[0834]              	mov	[cs:cntry_drv],al	;set the drive letter.
 35777 00003319 BF[0B34]                	mov	di,cntry_path
 35778 0000331C 8A04                    	mov	al,[si]
 35779 0000331E 3C5C                    	cmp	al, "\"
 35780 00003320 7406                    	je	short scp_root_dir
 35781                                  
 35782 00003322 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 35783 00003324 7402                    	je	short scp_root_dir
 35784                                  
 35785 00003326 EB01                    	jmp	short scp_path
 35786                                  
 35787                                  scp_root_dir:
 35788 00003328 4F                      	dec	di			;di -> cntry_root
 35789                                  scp_path:
 35790 00003329 E81F00                  	call	move_asciiz		;copy it
 35791                                  
 35792 0000332C BF[0834]                	mov	di,cntry_drv
 35793                                  scpath_exit:
 35794                                  
 35795 0000332F 1E                      	push	ds			;switch ds, es
 35796 00003330 06                      	push	es
 35797 00003331 1F                      	pop	ds
 35798 00003332 07                      	pop	es			;ds, es value restored
 35799                                  
 35800 00003333 5E                      	pop	si
 35801 00003334 C3                      	retn
 35802                                  
 35803                                  ;----------------------------------------------------------------------------
 35804                                  
 35805                                  chk_drive_letter:
 35806                                  
 35807                                  ;check if ds:[si] is a drive letter followed by ":".
 35808                                  ;assume that every alpha character is already converted to upper case.
 35809                                  ;carry set if not.
 35810                                  
 35811 00003335 50                      	push	ax
 35812 00003336 803C41                  	cmp	byte [si],"A"
 35813                                  	;jb	short cdletter_no
 35814 00003339 720E                    	jb	short cdletter_exit
 35815 0000333B 803C5A                  	cmp	byte [si],"Z"
 35816 0000333E 7708                    	ja	short cdletter_no
 35817 00003340 807C013A                	cmp	byte [si+1],":"
 35818 00003344 7502                    	jne	short cdletter_no
 35819                                  
 35820 00003346 EB01                    	jmp	short cdletter_exit
 35821                                  
 35822                                  cdletter_no:
 35823 00003348 F9                      	stc
 35824                                  cdletter_exit:
 35825 00003349 58                      	pop	ax
 35826 0000334A C3                      	retn
 35827                                  
 35828                                  ;----------------------------------------------------------------------------
 35829                                  
 35830                                  move_asciiz:
 35831                                  
 35832                                  ;in: ds:si -> source es:di -> target
 35833                                  ;out: copy the string until 0.
 35834                                  ;assumes there exists a 0.
 35835                                  
 35836                                  masciiz_loop:
 35837 0000334B A4                      	movsb
 35838 0000334C 807CFF00                	cmp	byte [si-1],0	; was it 0?
 35839 00003350 75F9                    	jne	short masciiz_loop
 35840 00003352 C3                      	retn
 35841                                  
 35842                                  ;----------------------------------------------------------------------------
 35843                                  
 35844                                  ;	ds:dx points to string to output (asciz)
 35845                                  ;
 35846                                  ;	prints <badld_pre> <string> <badld_post>
 35847                                  
 35848                                  badfil:
 35849 00003353 0E                      	push	cs
 35850 00003354 07                      	pop	es
 35851                                  
 35852 00003355 89D6                    	mov	si,dx
 35853                                  badload:
 35854 00003357 BA[9337]                	mov	dx,badld_pre	; want to print config error
 35855 0000335A BB[5037]                	mov	bx,crlfm
 35856                                  prnerr:
 35857 0000335D 0E                      	push	cs
 35858 0000335E 1F                      	pop	ds ; *
 35859 0000335F E81D00                  	call	print
 35860                                  prn1:
 35861 00003362 268A14                  	mov	dl,[es:si]
 35862 00003365 08D2                    	or	dl,dl
 35863 00003367 7407                    	jz	short prn2
 35864 00003369 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 35865 0000336B CD21                    	int	21h
 35866 0000336D 46                      	inc	si
 35867 0000336E EBF2                    	jmp	short prn1
 35868                                  prn2:
 35869 00003370 89DA                    	mov	dx,bx
 35870 00003372 E80A00                  	call	print
 35871                                  	; 11/12/2022
 35872                                  	; ds = cs ; *
 35873 00003375 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 35874                                  	;cmp	byte [cs:donotshownum],1 
 35875 0000337A 7407                    	je	short prnexit
 35876                                  	
 35877                                  	; 18/12/2022
 35878                                  	;call	error_line
 35879 0000337C E9CBF3                  	jmp	error_line
 35880                                  ;prnexit:
 35881                                  	;retn
 35882                                  
 35883                                  ;----------------------------------------------------------------------------
 35884                                  
 35885                                  print:
 35886 0000337F B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 35887 00003381 CD21                    	int	21h
 35888                                  prnexit:	; 18/12/2022
 35889 00003383 C3                      	retn
 35890                                  
 35891                                  ;----------------------------------------------------------------------------
 35892                                  
 35893                                  ;  open device pointed to by dx, al has access code
 35894                                  ;   if unable to open do a device open null device instead
 35895                                  
 35896                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35897                                  	; (SYSINIT:3764h)
 35898                                  open_dev:
 35899 00003384 E80500                  	call	open_file
 35900 00003387 7309                    	jnc	short open_dev3
 35901                                  
 35902                                  open_dev1:
 35903 00003389 BA[EC33]                	mov	dx,nuldev
 35904                                  	; 18/12/2022
 35905                                  	;call	open_file
 35906                                  ;of_retn:
 35907                                  	;retn
 35908                                  	; 18/12/2022
 35909                                  	;jmp	short open_file
 35910                                  open_file:
 35911 0000338C B43D                    	mov	ah,OPEN	; 3Dh
 35912 0000338E F9                      	stc
 35913 0000338F CD21                    	int	21h
 35914                                  of_retn:	; 18/12/2022
 35915 00003391 C3                      	retn
 35916                                  
 35917                                  open_dev3:
 35918 00003392 89C3                    	mov	bx,ax			; handle from open to bx
 35919                                  	;;xor	ax,ax			; get device info
 35920                                  	;;mov	ah,IOCTL ; 44h
 35921                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 35922                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35923                                  	;xor	ax,ax
 35924                                  	;mov	ah,44h	; IOCTL
 35925                                  	; 11/12/2022
 35926 00003394 B80044                  	mov	ax,4400h ; IOCTL<<8 
 35927                                  
 35928 00003397 CD21                    	int	21h
 35929                                  
 35930 00003399 F6C280                  	test	dl,10000000b ; 80h
 35931 0000339C 75F3                    	jnz	short of_retn
 35932                                  
 35933 0000339E B43E                    	mov	ah,CLOSE ; 3Eh
 35934 000033A0 CD21                    	int	21h
 35935 000033A2 EBE5                    	jmp	short open_dev1
 35936                                  
 35937                                  ;----------------------------------------------------------------------------
 35938                                  
 35939                                  ; 18/12/2022
 35940                                  %if 0
 35941                                  open_file:
 35942                                  	mov	ah,OPEN	; 3Dh
 35943                                  	stc
 35944                                  	int	21h
 35945                                  	retn
 35946                                  %endif
 35947                                  
 35948                                  ;----------------------------------------------------------------------------
 35949                                  
 35950                                  ; test int24. return back to dos with the fake user response of "fail"
 35951                                  
 35952                                  int24:
 35953 000033A4 B003                    	mov	al,3			; fail the system call
 35954 000033A6 CF                      	iret				; return back to dos.
 35955                                  
 35956                                  ; 19/04/2019 - Retro DOS v4.0
 35957                                  
 35958                                  ;----------------------------------------------------------------------------
 35959                                  ; DATA
 35960                                  ;----------------------------------------------------------------------------
 35961                                  
 35962                                  ;include copyrigh.inc			; copyright statement
 35963                                  
 35964                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 35965                                  
 35966                                  ;MsDosVersion6Copyr:
 35967                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 35968                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 35969                                  
 35970                                  ; 22/10/2022
 35971                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 35972                                  
 35973                                  ; 04/01/2023
 35974                                  %if 0
 35975                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35976                                  MsDosVersion5Copyr:
 35977                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 35978                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 35979                                  %endif
 35980                                  
 35981                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35982                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 35983                                  ; 20/04/2019 - Retro DOS v4.0
 35984                                  ;BOOTMES:
 35985                                  ;	db      13
 35986                                  ;	db      10
 35987                                  ;	db      "MS-DOS version "
 35988                                  ;	db      MAJOR_VERSION + "0"
 35989                                  ;	db      "."
 35990                                  ;	db      (MINOR_VERSION / 10) + "0"
 35991                                  ;	db      (MINOR_VERSION % 10) + "0"
 35992                                  ;	db      13,10
 35993                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 35994                                  ;	; 22/10/2022
 35995                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 35996                                  ;	;
 35997                                  ;	db	0
 35998                                  
 35999                                  	; 12/12/2022
 36000 000033A7 00                      	db	0
 36001                                  ; 12/12/2022
 36002                                  BOOTMES:
 36003 000033A8 0D0A                    	db	13,10
 36004 000033AA 526574726F20444F53-     	db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36004 000033B3 2076342E3020284D6F-
 36004 000033BC 646966696564204D53-
 36004 000033C5 444F5320352E302920 
 36005 000033CE 0D0A                    	db	13,10
 36006                                  	;db	"by Erdogan Tan [2022] "
 36007 000033D0 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 36007 000033D9 6E2054616E205B3230-
 36007 000033E2 32335D20           
 36008 000033E6 0D0A                    	db	13,10
 36009 000033E8 0D0A2400                	db	13,10,"$",0
 36010                                  
 36011 000033EC 4E554C00                nuldev:	db	"NUL",0
 36012 000033F0 434F4E00                condev:	db	"CON",0
 36013 000033F4 41555800                auxdev:	db	"AUX",0
 36014 000033F8 50524E00                prndev:	db	"PRN",0
 36015                                  
 36016                                  ;IFDEF	CONFIGPROC
 36017 000033FC 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36017 00003405 595300             
 36018                                  
 36019 00003408 413A                    cntry_drv:  db	"A:"
 36020 0000340A 5C                      cntry_root: db	"\"
 36021 0000340B 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36021 00003414 595300             
 36022                                  	    ;db	52 dup (0)
 36023 00003417 00<rep 34h>             	    times 52 db 0	
 36024                                  
 36025                                  country_file_signature:
 36026 0000344B FF434F554E545259        	db	0FFh,'COUNTRY'
 36027                                  
 36028                                  cntrycodepage_id: 
 36029 00003453 0000                    	dw	0 	
 36030                                  
 36031                                  ;ENDIF ; CONFIGPROC
 36032                                  
 36033                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36034                                  ;;ifdef	MULTI_CONFIG
 36035                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36036                                  ;tmplate: db	64                      ; must precede commnd
 36037                                  ;;endif
 36038                                  	; 02/11/2022
 36039                                  	;db	12                      ; size of commnd line (excl. null)
 36040                                  
 36041 00003455 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36041 0000345E 434F4D00           
 36042                                  	;db	51 dup (0)
 36043 00003462 00<rep 33h>             	times	51 db 0
 36044                                  ;endif
 36045                                  
 36046                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36047                                  ;;ifdef	MULTI_CONFIG
 36048                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36049                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36050                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36051                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36052                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36053                                  ;	 db	9,"A:\DOS /P",0		;
 36054                                  ;def_swchr:	
 36055                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36056                                  ;;endif
 36057                                  
 36058                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36059                                  ;command_line:
 36060                                  ;	db	2,"/P"			; default command.com args
 36061                                  ;	;db	125 dup (0)
 36062                                  ;	times	125 db 0
 36063                                  
 36064                                  pathstring:
 36065                                  	;db	64 dup (0)
 36066 00003495 00<rep 40h>             	times	64 db 0
 36067                                  
 36068                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36069                                  %if 0
 36070                                  
 36071                                  dae_flag:
 36072                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36073                                  
 36074                                  ;ifdef	MULTI_CONFIG
 36075                                  
 36076                                  MAX_MULTI_CONFIG equ 10
 36077                                  
 36078                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36079                                  
 36080                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36081                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36082                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36083                                  bLastCol:	db      0               ; ending column on status line
 36084                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36085                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36086                                                                          ; 2=disable default 2-second delay
 36087                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36088                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36089                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36090                                  bDefBlock:	db      1               ; default block #
 36091                                  bMaxBlock:	db      0               ; maxmimum block #
 36092                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36093                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36094                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36095                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36096                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36097                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36098                                  
 36099                                  szBoot:		db      "CONFIG=",0
 36100                                  szMenu:		db      "MENU",0
 36101                                  szCommon:	db      "COMMON",0
 36102                                  
 36103                                  ;endif	;MULTI_CONFIG
 36104                                  
 36105                                  comtab:	 ; label byte
 36106                                  
 36107                                  ;            cmd len    command         cmd code
 36108                                  ;            -------    -------         --------
 36109                                  
 36110                                  ;ifdef MULTI_CONFIG
 36111                                          db      1,      "[",            CONFIG_BEGIN
 36112                                  ;endif
 36113                                          db      5,      "BREAK",        CONFIG_BREAK
 36114                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36115                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36116                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36117                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36118                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36119                                          db      3,      "DOS",          CONFIG_DOS
 36120                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36121                                          db      4,      "FCBS",         CONFIG_FCBS
 36122                                          db      5,      "FILES",        CONFIG_FILES
 36123                                  ;ifdef MULTI_CONFIG
 36124                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36125                                  ;endif
 36126                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36127                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36128                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36129                                  ;ifdef MULTI_CONFIG
 36130                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36131                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36132                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36133                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36134                                  ;endif
 36135                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36136                                  ;ifdef MULTI_CONFIG
 36137                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36138                                  ;endif
 36139                                          db      3,      "REM",          CONFIG_REM
 36140                                  ;ifdef MULTI_CONFIG
 36141                                          db      3,      "SET",          CONFIG_SET
 36142                                  ;endif
 36143                                          db      5,      "SHELL",        CONFIG_SHELL
 36144                                  ;if    STACKSW
 36145                                          db      6,      "STACKS",       CONFIG_STACKS
 36146                                  ;endif
 36147                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36148                                  	db	0
 36149                                  %endif
 36150                                  
 36151                                  comtab:
 36152                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36153                                  	; (SYSINIT:38EDh)
 36154 000034D5 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36155 000034DE 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36156 000034E5 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36157 000034ED 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36157 000034F6 474855             
 36158 000034F9 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36159 00003500 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36160 00003506 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36160 0000350F 454C               
 36161 00003511 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36161 0000351A 434B4D             
 36162 0000351D 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36162 00003526 50                 
 36163 00003527 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36164 0000352F 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36165 00003538 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36166 0000353F 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36167 00003548 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36168 00003551 0352454D30              	db      3,      "REM",          CONFIG_REM
 36169 00003556 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36169 0000355F 31                 
 36170 00003560 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36171 00003565 00                      	db	0
 36172                                  
 36173                                  deviceparameters:	
 36174                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36175                                  devp.specialfunc:	; deviceparameters +
 36176 00003566 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36177                                  devp.devtype:
 36178 00003567 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36179                                  devp.devattr:
 36180 00003568 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36181                                  devp.cylinders:
 36182 0000356A 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36183                                  
 36184 0000356C 00<rep 11Eh>            	times	286	db 0
 36185                                  	
 36186 0000368A 0200                    hlim:	dw	2
 36187 0000368C 0900                    slim:	dw	9
 36188                                  
 36189 0000368E 00                      drive:	db	0
 36190                                  
 36191                                  switches:
 36192 0000368F 0000                    	dw	0
 36193                                  
 36194                                  ; the following are the recommended bpbs for the media that
 36195                                  ; we know of so far.
 36196                                  
 36197                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36198                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36199                                  
 36200                                  ; 48 tpi diskettes
 36201                                  
 36202 00003691 0002                    bpb48t	dw	512
 36203 00003693 02                      	db	2
 36204 00003694 0100                    	dw	1
 36205 00003696 02                      	db	2
 36206 00003697 7000                    	dw	112
 36207 00003699 D002                    	dw	2*9*40 ; 720
 36208 0000369B FD                      	db	0FDh
 36209 0000369C 0200                    	dw	2
 36210 0000369E 0900                    	dw	9
 36211 000036A0 0200                    	dw	2
 36212 000036A2 00000000                	dd	0
 36213 000036A6 00000000                        dd      0
 36214                                  
 36215                                  ; 96tpi diskettes
 36216                                  
 36217 000036AA 0002                    bpb96t:	dw	512
 36218 000036AC 01                      	db	1
 36219 000036AD 0100                    	dw	1
 36220 000036AF 02                      	db	2
 36221 000036B0 E000                    	dw	224
 36222 000036B2 6009                    	dw	2*15*80 ; 2400
 36223 000036B4 F9                      	db	0F9h
 36224 000036B5 0700                    	dw	7
 36225 000036B7 0F00                    	dw	15
 36226 000036B9 0200                    	dw	2
 36227 000036BB 00000000                	dd	0
 36228 000036BF 00000000                        dd      0
 36229                                  
 36230                                  ; 3 1/2 inch diskette bpb
 36231                                  
 36232 000036C3 0002                    bpb35:	dw	512
 36233 000036C5 02                      	db	2
 36234 000036C6 0100                    	dw	1
 36235 000036C8 02                      	db	2
 36236 000036C9 7000                    	dw	112
 36237 000036CB A005                    	dw	2*9*80 ; 1440
 36238 000036CD F9                      	db	0F9h
 36239 000036CE 0300                    	dw	3
 36240 000036D0 0900                    	dw	9
 36241 000036D2 0200                    	dw	2
 36242 000036D4 00000000                	dd	0
 36243 000036D8 00000000                        dd      0
 36244                                        
 36245 000036DC 0002                    bpb35h:	dw	512
 36246 000036DE 01                      	db	1
 36247 000036DF 0100                    	dw	1
 36248 000036E1 02                      	db	2
 36249 000036E2 E000                    	dw	224
 36250 000036E4 400B                    	dw	2*18*80 ; 2880
 36251 000036E6 F0                      	db	0F0h
 36252 000036E7 0900                    	dw	9
 36253 000036E9 1200                    	dw	18
 36254 000036EB 0200                    	dw	2
 36255 000036ED 00000000                	dd	0
 36256 000036F1 00000000                        dd      0
 36257                                  
 36258                                  ; m037 - BEGIN
 36259                                  
 36260 000036F5 0002                    bpb288:	dw	512
 36261 000036F7 02                      	db	2
 36262 000036F8 0100                    	dw	1
 36263 000036FA 02                      	db	2
 36264 000036FB F000                    	dw	240
 36265 000036FD 8016                    	dw	2*36*80 ; 5760
 36266 000036FF F0                      	db	0F0h
 36267 00003700 0900                    	dw	9
 36268 00003702 2400                    	dw	36
 36269 00003704 0200                    	dw	2
 36270 00003706 00000000                	dd	0
 36271 0000370A 00000000                        dd      0
 36272                                  
 36273                                  ; m037 - END
 36274                                  
 36275                                  ; 12/05/2019
 36276                                  
 36277                                  align 2
 36278                                  
 36279                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36280                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36281                                  
 36282 0000370E [9136]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36283 00003710 [AA36]                  	    dw	    bpb96t		; 96tpi drives
 36284 00003712 [C336]                  	    dw	    bpb35		; 3.5" drives
 36285                                  ; the following are not supported, so default to 3.5" media layout
 36286 00003714 [C336]                  	    dw	    bpb35		; not used - 8" drives
 36287 00003716 [C336]                  	    dw	    bpb35		; not used - 8" drives
 36288 00003718 [C336]                  	    dw	    bpb35		; not used - hard files
 36289 0000371A [C336]                  	    dw	    bpb35		; not used - tape drives
 36290 0000371C [DC36]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36291 0000371E [C336]                  	    dw	    bpb35		; ERIMO				m037
 36292 00003720 [F536]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36293                                  
 36294                                  switchlist: 
 36295 00003722 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36296                                  
 36297                                  ;----------------------------------------------------------------------------
 36298                                  ; Messages
 36299                                  ;----------------------------------------------------------------------------
 36300                                  
 36301                                  ; 19/04/2019 - Retro DOS v4.0
 36302                                  
 36303                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36304                                  
 36305 0000372B 00                      	db 	0
 36306                                  
 36307                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36308                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36309                                  
 36310                                  badopm:
 36311 0000372C 0D0A                    	db	0Dh,0Ah 
 36312 0000372E 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36312 00003737 7A656420636F6D6D61-
 36312 00003740 6E6420696E20434F4E-
 36312 00003749 4649472E535953     
 36313                                  crlfm:
 36314 00003750 0D0A24                  	db	0Dh,0Ah,'$'
 36315                                  badparm:
 36316 00003753 0D0A                    	db	0Dh,0Ah
 36317 00003755 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36317 0000375E 6E64206F7220706172-
 36317 00003767 616D6574657273202D-
 36317 00003770 2024               
 36318                                  badsiz_pre:
 36319 00003772 0D0A                    	db	0Dh,0Ah
 36320 00003774 536563746F72207369-     	db	'Sector size too large in file $'
 36320 0000377D 7A6520746F6F206C61-
 36320 00003786 72676520696E206669-
 36320 0000378F 6C652024           
 36321                                  badld_pre:
 36322 00003793 0D0A                    	db	0Dh,0Ah
 36323 00003795 426164206F72206D69-     	db	'Bad or missing $'
 36323 0000379E 7373696E672024     
 36324                                  badcom:
 36325 000037A5 436F6D6D616E642049-     	db	'Command Interpreter',0
 36325 000037AE 6E7465727072657465-
 36325 000037B7 7200               
 36326                                  badcountry:
 36327 000037B9 0D0A                    	db	0Dh,0Ah
 36328 000037BB 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36328 000037C4 6F756E74727920636F-
 36328 000037CD 6465206F7220636F64-
 36328 000037D6 6520706167650D0A24 
 36329                                  badcountrycom:
 36330 000037DF 0D0A                    	db	0Dh,0Ah
 36331 000037E1 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36331 000037EA 434F554E5452592063-
 36331 000037F3 6F6D6D616E640D0A24 
 36332                                  insufmemory:
 36333 000037FC 0D0A                    	db	0Dh,0Ah
 36334 000037FE 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36334 00003807 656E74206D656D6F72-
 36334 00003810 7920666F7220434F55-
 36334 00003819 4E5452592E53595320-
 36334 00003822 66696C650D0A24     
 36335                                  badmem:
 36336 00003829 0D0A                    	db	0Dh,0Ah
 36337 0000382B 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36337 00003834 74696F6E20746F6F20-
 36337 0000383D 6C6172676520666F72-
 36337 00003846 206D656D6F72790D0A-
 36337 0000384F 24                 
 36338                                  badblock:
 36339 00003850 0D0A                    	db	0Dh,0Ah
 36340 00003852 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36340 0000385B 626C6F636B20646576-
 36340 00003864 696365730D0A24     
 36341                                  badstack:
 36342 0000386B 0D0A                    	db	0Dh,0Ah
 36343 0000386D 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36343 00003876 5441434B2070617261-
 36343 0000387F 6D65746572730D0A24 
 36344                                  	; 18/12/2022
 36345                                  ;badorder:
 36346                                  	;db	0Dh,0Ah
 36347                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36348                                  errorcmd:
 36349 00003888 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36349 00003891 434F4E4649472E5359-
 36349 0000389A 53206C696E652024   
 36350                                  
 36351                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36352                                  %if 0
 36353                                  
 36354                                  OnOff:	db	'ON'
 36355                                  OnOff2:	db	'OFF'
 36356                                  
 36357                                  StartMsg:
 36358                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36359                                  	db	0Ah,0
 36360                                  _$PauseMsg:
 36361                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36362                                  _$CleanMsg:
 36363                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36364                                  _$InterMsg:
 36365                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36366                                  _$MenuHeader:
 36367                                  	db	0Dh,0Ah
 36368                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36369                                  	db	'  =======================',0Dh,0Ah,'$'
 36370                                  _$MenuPrmpt:
 36371                                  	db	'  Enter a choice: $'
 36372                                  _$StatusLine:
 36373                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36374                                  	db	'and AUTOEXEC.BAT [ ]$'
 36375                                  _$InterPrmpt:
 36376                                  	db	' [Y,N]?$'
 36377                                  _$YES:	db	'YES$'
 36378                                  _$NO:	db	'NO $'
 36379                                  _$TimeOut:
 36380                                  	db	'Time remaining: $'
 36381                                  badcomprmpt:
 36382                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36383                                  	db	0Dh,0Ah,'$'
 36384                                  _$AutoPrmpt:
 36385                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36386                                  
 36387                                  %endif
 36388                                  
 36389                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36390                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36391                                  
 36392                                  TooManyDrivesMsg:
 36393 000038A2 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36393 000038AB 4C6F676963616C2064-
 36393 000038B4 726976657320706173-
 36393 000038BD 74205A3A2065786973-
 36393 000038C6 7420616E642077696C-
 36393 000038CF 6C2062652069676E6F-
 36393 000038D8 7265640D0A24       
 36394                                  
 36395                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36396                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36397                                  	;db	7 dup(0)
 36398                                  
 36399                                  	;times	7 db 0
 36400                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36401                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36402                                  	; 09/12/2022
 36403                                  	;times	4 db 0
 36404                                  
 36405                                  ;----------------------------------------------------------------------------
 36406                                  		; 09/12/2022
 36407                                  		;db 0
 36408                                  
 36409                                  number3div	equ ($-SYSINIT$)
 36410                                  number3mod	equ (number3div % 16)
 36411                                  
 36412                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 36413 000038DE 00<rep 2h>              		times (16-number3mod) db 0
 36414                                  %endif
 36415                                  
 36416                                  ;---------------------------------------------------------------------------- 
 36417                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 36418                                  ;---------------------------------------------------------------------------- 
 36419                                  
 36420                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36421                                  
 36422                                  ;----------------------------------------------------------------------------
 36423                                  ; 20/04/2019 - Retro DOS v4.0
 36424                                  
 36425                                  ; 09/12/2022
 36426                                  ;
 36427                                  ;bss_start:
 36428                                  ;
 36429                                  ;ABSOLUTE bss_start
 36430                                  ;
 36431                                  ;alignb 16
 36432                                  
 36433                                  SI_end:  ; SI_end equ $
 36434                                  
 36435                                  ;----------------------------------------------------------------------------
 36436                                  
 36437                                  ;sysinitseg	ends
 36438                                  
 36439                                  ; ***************************************************************************
 36440                                  
 36441                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36442                                  
 36443                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36444                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36445                                  
 36446                                  ;----------------------------------------------------------------------------
 36447                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36448                                  ;----------------------------------------------------------------------------
 36449                                  
 36450                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36451                                  ;----------------------------------------------------------------------------
 36452                                  ;----------------------------------------------------------------------------
 36453                                  
 36454                                  ; ----------------------------------------------------------------------------
 36455                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36456                                  ; ----------------------------------------------------------------------------
 36457                                  ; 18/03/2019 - Retro DOS v4.0 
 36458                                  ; 11/06/2018 - Retro DOS v3.0 
 36459                                  
 36460                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36461                                  		;; 28/06/2019 ('msdos6.s') 
 36462                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36463                                  		
 36464                                  		; 27/09/2023 (BugFix)
 36465                                  		; 19/09/2023
 36466                                  		; 28/12/2022 (BugFix)
 36467                                  		; 22/12/2022
 36468                                  		; 21/12/2022 ('msdos5.s')
 36469 000038E0 <bin 90F0h>             		incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36470                                  	
 36471                                  ; 28/09/2023	
 36472                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36473                                  
 36474                                  align 2
 36475                                  
 36476                                  ; 21/12/2022
 36477                                  ;;END_OF_KERNEL:
 36478                                  ;END_OF_KERNEL equ $
 36479                                  
 36480                                  ; 28/09/2023
 36481                                  S3SIZE equ $-$$
 36482                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 36483                                  
 36484                                  ;=============================================================================
 36485                                  ;	END
 36486                                  ;=============================================================================
 36487                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36488                                  ; ------------------------------
 36489                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
